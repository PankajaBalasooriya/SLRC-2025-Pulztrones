
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a90c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  0800aae0  0800aae0  0000bae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b294  0800b294  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b294  0800b294  0000c294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b29c  0800b29c  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b29c  0800b29c  0000c29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b2a0  0800b2a0  0000c2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b2a4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad8  200001d4  0800b478  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cac  0800b478  0000dcac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e79  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003522  00000000  00000000  0002307d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  000265a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001026  00000000  00000000  00027a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005e3b  00000000  00000000  00028aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b5cd  00000000  00000000  0002e8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7650  00000000  00000000  00049eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001314fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006810  00000000  00000000  00131544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  00137d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aac4 	.word	0x0800aac4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800aac4 	.word	0x0800aac4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b988 	b.w	8000fd0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	468e      	mov	lr, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4688      	mov	r8, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d962      	bls.n	8000db4 <__udivmoddi4+0xdc>
 8000cee:	fab2 f682 	clz	r6, r2
 8000cf2:	b14e      	cbz	r6, 8000d08 <__udivmoddi4+0x30>
 8000cf4:	f1c6 0320 	rsb	r3, r6, #32
 8000cf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	ea43 0808 	orr.w	r8, r3, r8
 8000d06:	40b4      	lsls	r4, r6
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d14:	0c23      	lsrs	r3, r4, #16
 8000d16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d2c:	f080 80ea 	bcs.w	8000f04 <__udivmoddi4+0x22c>
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f240 80e7 	bls.w	8000f04 <__udivmoddi4+0x22c>
 8000d36:	3902      	subs	r1, #2
 8000d38:	443b      	add	r3, r7
 8000d3a:	1a9a      	subs	r2, r3, r2
 8000d3c:	b2a3      	uxth	r3, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4e:	459c      	cmp	ip, r3
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x8e>
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d58:	f080 80d6 	bcs.w	8000f08 <__udivmoddi4+0x230>
 8000d5c:	459c      	cmp	ip, r3
 8000d5e:	f240 80d3 	bls.w	8000f08 <__udivmoddi4+0x230>
 8000d62:	443b      	add	r3, r7
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6a:	eba3 030c 	sub.w	r3, r3, ip
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40f3      	lsrs	r3, r6
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xb6>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb0>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x14c>
 8000d96:	4573      	cmp	r3, lr
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xc8>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	f200 8105 	bhi.w	8000faa <__udivmoddi4+0x2d2>
 8000da0:	1a84      	subs	r4, r0, r2
 8000da2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	4690      	mov	r8, r2
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d0e5      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000dae:	e9c5 4800 	strd	r4, r8, [r5]
 8000db2:	e7e2      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f000 8090 	beq.w	8000eda <__udivmoddi4+0x202>
 8000dba:	fab2 f682 	clz	r6, r2
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	f040 80a4 	bne.w	8000f0c <__udivmoddi4+0x234>
 8000dc4:	1a8a      	subs	r2, r1, r2
 8000dc6:	0c03      	lsrs	r3, r0, #16
 8000dc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dcc:	b280      	uxth	r0, r0
 8000dce:	b2bc      	uxth	r4, r7
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dde:	fb04 f20c 	mul.w	r2, r4, ip
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x11e>
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x11c>
 8000dee:	429a      	cmp	r2, r3
 8000df0:	f200 80e0 	bhi.w	8000fb4 <__udivmoddi4+0x2dc>
 8000df4:	46c4      	mov	ip, r8
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e04:	fb02 f404 	mul.w	r4, r2, r4
 8000e08:	429c      	cmp	r4, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x144>
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x142>
 8000e14:	429c      	cmp	r4, r3
 8000e16:	f200 80ca 	bhi.w	8000fae <__udivmoddi4+0x2d6>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	1b1b      	subs	r3, r3, r4
 8000e1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa0e f401 	lsl.w	r4, lr, r1
 8000e34:	fa20 f306 	lsr.w	r3, r0, r6
 8000e38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e40:	4323      	orrs	r3, r4
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	fa1f fc87 	uxth.w	ip, r7
 8000e4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e4e:	0c1c      	lsrs	r4, r3, #16
 8000e50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d909      	bls.n	8000e78 <__udivmoddi4+0x1a0>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e6a:	f080 809c 	bcs.w	8000fa6 <__udivmoddi4+0x2ce>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f240 8099 	bls.w	8000fa6 <__udivmoddi4+0x2ce>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	eba4 040e 	sub.w	r4, r4, lr
 8000e7c:	fa1f fe83 	uxth.w	lr, r3
 8000e80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e84:	fb09 4413 	mls	r4, r9, r3, r4
 8000e88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e90:	45a4      	cmp	ip, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1ce>
 8000e94:	193c      	adds	r4, r7, r4
 8000e96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e9a:	f080 8082 	bcs.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d97f      	bls.n	8000fa2 <__udivmoddi4+0x2ca>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eaa:	eba4 040c 	sub.w	r4, r4, ip
 8000eae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000eb2:	4564      	cmp	r4, ip
 8000eb4:	4673      	mov	r3, lr
 8000eb6:	46e1      	mov	r9, ip
 8000eb8:	d362      	bcc.n	8000f80 <__udivmoddi4+0x2a8>
 8000eba:	d05f      	beq.n	8000f7c <__udivmoddi4+0x2a4>
 8000ebc:	b15d      	cbz	r5, 8000ed6 <__udivmoddi4+0x1fe>
 8000ebe:	ebb8 0203 	subs.w	r2, r8, r3
 8000ec2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	fa22 f301 	lsr.w	r3, r2, r1
 8000ece:	431e      	orrs	r6, r3
 8000ed0:	40cc      	lsrs	r4, r1
 8000ed2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e74f      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000eda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ede:	0c01      	lsrs	r1, r0, #16
 8000ee0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eea:	463b      	mov	r3, r7
 8000eec:	4638      	mov	r0, r7
 8000eee:	463c      	mov	r4, r7
 8000ef0:	46b8      	mov	r8, r7
 8000ef2:	46be      	mov	lr, r7
 8000ef4:	2620      	movs	r6, #32
 8000ef6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000efa:	eba2 0208 	sub.w	r2, r2, r8
 8000efe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f02:	e766      	b.n	8000dd2 <__udivmoddi4+0xfa>
 8000f04:	4601      	mov	r1, r0
 8000f06:	e718      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	e72c      	b.n	8000d66 <__udivmoddi4+0x8e>
 8000f0c:	f1c6 0220 	rsb	r2, r6, #32
 8000f10:	fa2e f302 	lsr.w	r3, lr, r2
 8000f14:	40b7      	lsls	r7, r6
 8000f16:	40b1      	lsls	r1, r6
 8000f18:	fa20 f202 	lsr.w	r2, r0, r2
 8000f1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f20:	430a      	orrs	r2, r1
 8000f22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f26:	b2bc      	uxth	r4, r7
 8000f28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb08 f904 	mul.w	r9, r8, r4
 8000f36:	40b0      	lsls	r0, r6
 8000f38:	4589      	cmp	r9, r1
 8000f3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f3e:	b280      	uxth	r0, r0
 8000f40:	d93e      	bls.n	8000fc0 <__udivmoddi4+0x2e8>
 8000f42:	1879      	adds	r1, r7, r1
 8000f44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f48:	d201      	bcs.n	8000f4e <__udivmoddi4+0x276>
 8000f4a:	4589      	cmp	r9, r1
 8000f4c:	d81f      	bhi.n	8000f8e <__udivmoddi4+0x2b6>
 8000f4e:	eba1 0109 	sub.w	r1, r1, r9
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fb09 f804 	mul.w	r8, r9, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	b292      	uxth	r2, r2
 8000f60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f64:	4542      	cmp	r2, r8
 8000f66:	d229      	bcs.n	8000fbc <__udivmoddi4+0x2e4>
 8000f68:	18ba      	adds	r2, r7, r2
 8000f6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f6e:	d2c4      	bcs.n	8000efa <__udivmoddi4+0x222>
 8000f70:	4542      	cmp	r2, r8
 8000f72:	d2c2      	bcs.n	8000efa <__udivmoddi4+0x222>
 8000f74:	f1a9 0102 	sub.w	r1, r9, #2
 8000f78:	443a      	add	r2, r7
 8000f7a:	e7be      	b.n	8000efa <__udivmoddi4+0x222>
 8000f7c:	45f0      	cmp	r8, lr
 8000f7e:	d29d      	bcs.n	8000ebc <__udivmoddi4+0x1e4>
 8000f80:	ebbe 0302 	subs.w	r3, lr, r2
 8000f84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f88:	3801      	subs	r0, #1
 8000f8a:	46e1      	mov	r9, ip
 8000f8c:	e796      	b.n	8000ebc <__udivmoddi4+0x1e4>
 8000f8e:	eba7 0909 	sub.w	r9, r7, r9
 8000f92:	4449      	add	r1, r9
 8000f94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9c:	fb09 f804 	mul.w	r8, r9, r4
 8000fa0:	e7db      	b.n	8000f5a <__udivmoddi4+0x282>
 8000fa2:	4673      	mov	r3, lr
 8000fa4:	e77f      	b.n	8000ea6 <__udivmoddi4+0x1ce>
 8000fa6:	4650      	mov	r0, sl
 8000fa8:	e766      	b.n	8000e78 <__udivmoddi4+0x1a0>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e6fd      	b.n	8000daa <__udivmoddi4+0xd2>
 8000fae:	443b      	add	r3, r7
 8000fb0:	3a02      	subs	r2, #2
 8000fb2:	e733      	b.n	8000e1c <__udivmoddi4+0x144>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	443b      	add	r3, r7
 8000fba:	e71c      	b.n	8000df6 <__udivmoddi4+0x11e>
 8000fbc:	4649      	mov	r1, r9
 8000fbe:	e79c      	b.n	8000efa <__udivmoddi4+0x222>
 8000fc0:	eba1 0109 	sub.w	r1, r1, r9
 8000fc4:	46c4      	mov	ip, r8
 8000fc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fca:	fb09 f804 	mul.w	r8, r9, r4
 8000fce:	e7c4      	b.n	8000f5a <__udivmoddi4+0x282>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <Buzzer_On>:
#include "buzzer.h"
#include "main.h"

// Turn on the buzzer (PC15 high)
void Buzzer_On(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2120      	movs	r1, #32
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <Buzzer_On+0x14>)
 8000fde:	f003 f8b3 	bl	8004148 <HAL_GPIO_WritePin>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40020000 	.word	0x40020000

08000fec <Buzzer_Off>:

// Turn off the buzzer (PC15 low)
void Buzzer_Off(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2120      	movs	r1, #32
 8000ff4:	4802      	ldr	r0, [pc, #8]	@ (8001000 <Buzzer_Off+0x14>)
 8000ff6:	f003 f8a7 	bl	8004148 <HAL_GPIO_WritePin>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40020000 	.word	0x40020000

08001004 <Buzzer_Toggle>:

// Toggle the buzzer state with a specified delay
void Buzzer_Toggle(uint32_t delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    Buzzer_On();
 800100c:	f7ff ffe2 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(delay);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f001 ffe1 	bl	8002fd8 <HAL_Delay>
    Buzzer_Off();
 8001016:	f7ff ffe9 	bl	8000fec <Buzzer_Off>
    HAL_Delay(delay);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f001 ffdc 	bl	8002fd8 <HAL_Delay>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <Buzzer_UniquePattern>:

void Buzzer_UniquePattern(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
    // Pattern: Short-Short-Long-Short-Long
    // Total duration: 1000ms (1 second)

    Buzzer_On();
 800102c:	f7ff ffd2 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 8001030:	2064      	movs	r0, #100	@ 0x64
 8001032:	f001 ffd1 	bl	8002fd8 <HAL_Delay>
    Buzzer_Off();
 8001036:	f7ff ffd9 	bl	8000fec <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800103a:	2064      	movs	r0, #100	@ 0x64
 800103c:	f001 ffcc 	bl	8002fd8 <HAL_Delay>

    Buzzer_On();
 8001040:	f7ff ffc8 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 8001044:	2064      	movs	r0, #100	@ 0x64
 8001046:	f001 ffc7 	bl	8002fd8 <HAL_Delay>
    Buzzer_Off();
 800104a:	f7ff ffcf 	bl	8000fec <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800104e:	2064      	movs	r0, #100	@ 0x64
 8001050:	f001 ffc2 	bl	8002fd8 <HAL_Delay>

    Buzzer_On();
 8001054:	f7ff ffbe 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 8001058:	20c8      	movs	r0, #200	@ 0xc8
 800105a:	f001 ffbd 	bl	8002fd8 <HAL_Delay>
    Buzzer_Off();
 800105e:	f7ff ffc5 	bl	8000fec <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 8001062:	2064      	movs	r0, #100	@ 0x64
 8001064:	f001 ffb8 	bl	8002fd8 <HAL_Delay>

    Buzzer_On();
 8001068:	f7ff ffb4 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 800106c:	2064      	movs	r0, #100	@ 0x64
 800106e:	f001 ffb3 	bl	8002fd8 <HAL_Delay>
    Buzzer_Off();
 8001072:	f7ff ffbb 	bl	8000fec <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 8001076:	2064      	movs	r0, #100	@ 0x64
 8001078:	f001 ffae 	bl	8002fd8 <HAL_Delay>

    Buzzer_On();
 800107c:	f7ff ffaa 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 8001080:	20c8      	movs	r0, #200	@ 0xc8
 8001082:	f001 ffa9 	bl	8002fd8 <HAL_Delay>
    Buzzer_Off();
 8001086:	f7ff ffb1 	bl	8000fec <Buzzer_Off>
    // No delay at the end to make it exactly 1 second
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <Delay_Init+0x38>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10e      	bne.n	80010be <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <Delay_Init+0x38>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	4a08      	ldr	r2, [pc, #32]	@ (80010c8 <Delay_Init+0x38>)
 80010a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010aa:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80010ac:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <Delay_Init+0x3c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <Delay_Init+0x3c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a05      	ldr	r2, [pc, #20]	@ (80010cc <Delay_Init+0x3c>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6013      	str	r3, [r2, #0]
    }
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000edf0 	.word	0xe000edf0
 80010cc:	e0001000 	.word	0xe0001000

080010d0 <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 80010d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010da:	b21b      	sxth	r3, r3
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 80010ec:	4b03      	ldr	r3, [pc, #12]	@ (80010fc <getLeftEncoderCounts+0x14>)
 80010ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f0:	b21b      	sxth	r3, r3
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	40010000 	.word	0x40010000

08001100 <resetEncodersinSystick>:
	previous_left_count = 0;
	previous_right_count = 0;

}

void resetEncodersinSystick() {
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <resetEncodersinSystick+0x1c>)
 8001106:	2200      	movs	r2, #0
 8001108:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 800110a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	40010000 	.word	0x40010000

08001120 <update_Encoder_Data>:

void update_Encoder_Data(){
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
	int16_t left_count = getLeftEncoderCounts();
 8001126:	f7ff ffdf 	bl	80010e8 <getLeftEncoderCounts>
 800112a:	4603      	mov	r3, r0
 800112c:	81fb      	strh	r3, [r7, #14]
	int16_t right_count = getRightEncoderCounts();
 800112e:	f7ff ffcf 	bl	80010d0 <getRightEncoderCounts>
 8001132:	4603      	mov	r3, r0
 8001134:	81bb      	strh	r3, [r7, #12]

	left_delta = left_count - previous_left_count;
 8001136:	89fa      	ldrh	r2, [r7, #14]
 8001138:	4b3b      	ldr	r3, [pc, #236]	@ (8001228 <update_Encoder_Data+0x108>)
 800113a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113e:	b29b      	uxth	r3, r3
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	b21a      	sxth	r2, r3
 8001146:	4b39      	ldr	r3, [pc, #228]	@ (800122c <update_Encoder_Data+0x10c>)
 8001148:	801a      	strh	r2, [r3, #0]
	previous_left_count = left_count;
 800114a:	4a37      	ldr	r2, [pc, #220]	@ (8001228 <update_Encoder_Data+0x108>)
 800114c:	89fb      	ldrh	r3, [r7, #14]
 800114e:	8013      	strh	r3, [r2, #0]

	right_delta = right_count - previous_right_count;
 8001150:	89ba      	ldrh	r2, [r7, #12]
 8001152:	4b37      	ldr	r3, [pc, #220]	@ (8001230 <update_Encoder_Data+0x110>)
 8001154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001158:	b29b      	uxth	r3, r3
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	b29b      	uxth	r3, r3
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b34      	ldr	r3, [pc, #208]	@ (8001234 <update_Encoder_Data+0x114>)
 8001162:	801a      	strh	r2, [r3, #0]
	previous_right_count = right_count;
 8001164:	4a32      	ldr	r2, [pc, #200]	@ (8001230 <update_Encoder_Data+0x110>)
 8001166:	89bb      	ldrh	r3, [r7, #12]
 8001168:	8013      	strh	r3, [r2, #0]

	float left_change = left_delta * MM_PER_COUNT_LEFT;
 800116a:	4b30      	ldr	r3, [pc, #192]	@ (800122c <update_Encoder_Data+0x10c>)
 800116c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fa07 	bl	8000584 <__aeabi_i2d>
 8001176:	a32a      	add	r3, pc, #168	@ (adr r3, 8001220 <update_Encoder_Data+0x100>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fa6c 	bl	8000658 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fd3e 	bl	8000c08 <__aeabi_d2f>
 800118c:	4603      	mov	r3, r0
 800118e:	60bb      	str	r3, [r7, #8]
	float right_change = right_delta * MM_PER_COUNT_RIGHT;
 8001190:	4b28      	ldr	r3, [pc, #160]	@ (8001234 <update_Encoder_Data+0x114>)
 8001192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9f4 	bl	8000584 <__aeabi_i2d>
 800119c:	a320      	add	r3, pc, #128	@ (adr r3, 8001220 <update_Encoder_Data+0x100>)
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	f7ff fa59 	bl	8000658 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fd2b 	bl	8000c08 <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	607b      	str	r3, [r7, #4]

	m_fwd_change = 0.5 * (right_change + left_change);
 80011b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80011ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80011be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80011c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <update_Encoder_Data+0x118>)
 80011cc:	edc3 7a00 	vstr	s15, [r3]
	m_robot_distance += m_fwd_change;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <update_Encoder_Data+0x11c>)
 80011d2:	ed93 7a00 	vldr	s14, [r3]
 80011d6:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <update_Encoder_Data+0x118>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e0:	4b16      	ldr	r3, [pc, #88]	@ (800123c <update_Encoder_Data+0x11c>)
 80011e2:	edc3 7a00 	vstr	s15, [r3]
	m_rot_change = (right_change - left_change) * DEG_PER_MM_DIFFERENCE;
 80011e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80011ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011f2:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <update_Encoder_Data+0x120>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <update_Encoder_Data+0x124>)
 80011fe:	edc3 7a00 	vstr	s15, [r3]
	m_robot_angle += m_rot_change;
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <update_Encoder_Data+0x128>)
 8001204:	ed93 7a00 	vldr	s14, [r3]
 8001208:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <update_Encoder_Data+0x124>)
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001212:	4b0d      	ldr	r3, [pc, #52]	@ (8001248 <update_Encoder_Data+0x128>)
 8001214:	edc3 7a00 	vstr	s15, [r3]


}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	58e4ab66 	.word	0x58e4ab66
 8001224:	3fb0cd2e 	.word	0x3fb0cd2e
 8001228:	200001fc 	.word	0x200001fc
 800122c:	200001f8 	.word	0x200001f8
 8001230:	200001fe 	.word	0x200001fe
 8001234:	200001fa 	.word	0x200001fa
 8001238:	20000200 	.word	0x20000200
 800123c:	200001f0 	.word	0x200001f0
 8001240:	0800aafc 	.word	0x0800aafc
 8001244:	20000204 	.word	0x20000204
 8001248:	200001f4 	.word	0x200001f4

0800124c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001252:	f001 fe4f 	bl	8002ef4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001256:	f000 f895 	bl	8001384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125a:	f000 fb77 	bl	800194c <MX_GPIO_Init>
  MX_DMA_Init();
 800125e:	f000 fb55 	bl	800190c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001262:	f000 fad5 	bl	8001810 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001266:	f000 f9ad 	bl	80015c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800126a:	f000 fa03 	bl	8001674 <MX_TIM2_Init>
  MX_I2C2_Init();
 800126e:	f000 f97b 	bl	8001568 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8001272:	f000 faf7 	bl	8001864 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001276:	f000 fb1f 	bl	80018b8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800127a:	f000 f8f5 	bl	8001468 <MX_ADC1_Init>
  MX_I2C1_Init();
 800127e:	f000 f945 	bl	800150c <MX_I2C1_Init>
  MX_TIM3_Init();
 8001282:	f000 fa4b 	bl	800171c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001286:	213c      	movs	r1, #60	@ 0x3c
 8001288:	4831      	ldr	r0, [pc, #196]	@ (8001350 <main+0x104>)
 800128a:	f005 fa3f 	bl	800670c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800128e:	213c      	movs	r1, #60	@ 0x3c
 8001290:	4830      	ldr	r0, [pc, #192]	@ (8001354 <main+0x108>)
 8001292:	f005 fa3b 	bl	800670c <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001296:	2100      	movs	r1, #0
 8001298:	482f      	ldr	r0, [pc, #188]	@ (8001358 <main+0x10c>)
 800129a:	f005 f8c9 	bl	8006430 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800129e:	2104      	movs	r1, #4
 80012a0:	482d      	ldr	r0, [pc, #180]	@ (8001358 <main+0x10c>)
 80012a2:	f005 f8c5 	bl	8006430 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80012a6:	2108      	movs	r1, #8
 80012a8:	482b      	ldr	r0, [pc, #172]	@ (8001358 <main+0x10c>)
 80012aa:	f005 f8c1 	bl	8006430 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80012ae:	210c      	movs	r1, #12
 80012b0:	4829      	ldr	r0, [pc, #164]	@ (8001358 <main+0x10c>)
 80012b2:	f005 f8bd 	bl	8006430 <HAL_TIM_PWM_Start>

  SSD1306_Init();
 80012b6:	f001 fbb1 	bl	8002a1c <SSD1306_Init>
    SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 80012ba:	2301      	movs	r3, #1
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	2340      	movs	r3, #64	@ 0x40
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2380      	movs	r3, #128	@ 0x80
 80012c4:	4a25      	ldr	r2, [pc, #148]	@ (800135c <main+0x110>)
 80012c6:	2100      	movs	r1, #0
 80012c8:	2000      	movs	r0, #0
 80012ca:	f001 fd11 	bl	8002cf0 <SSD1306_DrawBitmap>
    SSD1306_UpdateScreen(); // update screen
 80012ce:	f001 fc69 	bl	8002ba4 <SSD1306_UpdateScreen>




	  Buzzer_UniquePattern();
 80012d2:	f7ff fea9 	bl	8001028 <Buzzer_UniquePattern>

  /*---------------------Delay--------------------------------*/
  Delay_Init();
 80012d6:	f7ff fedb 	bl	8001090 <Delay_Init>
  /*-------------------------------------------------------------------*/

  //AnalogMux_Init();

  UART_Init(&huart3);
 80012da:	4821      	ldr	r0, [pc, #132]	@ (8001360 <main+0x114>)
 80012dc:	f001 fb68 	bl	80029b0 <UART_Init>

  /*---------------------Servo--------------------------------*/
  Servo_Init(50);  // 50Hz for standard servos
 80012e0:	2032      	movs	r0, #50	@ 0x32
 80012e2:	f000 fd0b 	bl	8001cfc <Servo_Init>

  //Examples
  // Register servos (do this once)
  int claw = Servo_Register(11, "claw", 0, 180);
 80012e6:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8001364 <main+0x118>
 80012ea:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8001368 <main+0x11c>
 80012ee:	491f      	ldr	r1, [pc, #124]	@ (800136c <main+0x120>)
 80012f0:	200b      	movs	r0, #11
 80012f2:	f000 fd27 	bl	8001d44 <Servo_Register>
 80012f6:	60f8      	str	r0, [r7, #12]
  int arm = Servo_Register(13, "arm", 0, 180);
 80012f8:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8001364 <main+0x118>
 80012fc:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8001368 <main+0x11c>
 8001300:	491b      	ldr	r1, [pc, #108]	@ (8001370 <main+0x124>)
 8001302:	200d      	movs	r0, #13
 8001304:	f000 fd1e 	bl	8001d44 <Servo_Register>
 8001308:	60b8      	str	r0, [r7, #8]
  int base = Servo_Register(15, "base", 0, 180);
 800130a:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8001364 <main+0x118>
 800130e:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8001368 <main+0x11c>
 8001312:	4918      	ldr	r1, [pc, #96]	@ (8001374 <main+0x128>)
 8001314:	200f      	movs	r0, #15
 8001316:	f000 fd15 	bl	8001d44 <Servo_Register>
 800131a:	6078      	str	r0, [r7, #4]

  // Later in your code, use the servos by ID
  Servo_SetAngle(claw, 35);   // Set claw to 45 degrees
 800131c:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8001378 <main+0x12c>
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f000 fe03 	bl	8001f2c <Servo_SetAngle>
  Servo_SetAngle(arm,100);    // Set arm to 90 degrees
 8001326:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800137c <main+0x130>
 800132a:	68b8      	ldr	r0, [r7, #8]
 800132c:	f000 fdfe 	bl	8001f2c <Servo_SetAngle>

  // Or use them by name
  Servo_SetAngleByName("base", 90);  // Set base to 120 degrees
 8001330:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001380 <main+0x134>
 8001334:	480f      	ldr	r0, [pc, #60]	@ (8001374 <main+0x128>)
 8001336:	f000 fe6d 	bl	8002014 <Servo_SetAngleByName>

  // Reset all servos to center position
  //Servo_ResetAll();

  Buzzer_Toggle(100);
 800133a:	2064      	movs	r0, #100	@ 0x64
 800133c:	f7ff fe62 	bl	8001004 <Buzzer_Toggle>
  //HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Enable UART interrupt

 // HAL_Delay(2000);
  //RAYKHA_Calibrate(&raykha_calibration, RAYKHA_LINE_WHITE);

  Buzzer_Toggle(100);
 8001340:	2064      	movs	r0, #100	@ 0x64
 8001342:	f7ff fe5f 	bl	8001004 <Buzzer_Toggle>



  EnableSysTickFunction();
 8001346:	f001 faed 	bl	8002924 <EnableSysTickFunction>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800134a:	bf00      	nop
 800134c:	e7fd      	b.n	800134a <main+0xfe>
 800134e:	bf00      	nop
 8001350:	200002f8 	.word	0x200002f8
 8001354:	20000340 	.word	0x20000340
 8001358:	20000388 	.word	0x20000388
 800135c:	0800ab18 	.word	0x0800ab18
 8001360:	20000418 	.word	0x20000418
 8001364:	43340000 	.word	0x43340000
 8001368:	00000000 	.word	0x00000000
 800136c:	0800aae0 	.word	0x0800aae0
 8001370:	0800aae8 	.word	0x0800aae8
 8001374:	0800aaec 	.word	0x0800aaec
 8001378:	420c0000 	.word	0x420c0000
 800137c:	42c80000 	.word	0x42c80000
 8001380:	42b40000 	.word	0x42b40000

08001384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b094      	sub	sp, #80	@ 0x50
 8001388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	2234      	movs	r2, #52	@ 0x34
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f007 fab7 	bl	8008906 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001460 <SystemClock_Config+0xdc>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001460 <SystemClock_Config+0xdc>)
 80013b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b8:	4b29      	ldr	r3, [pc, #164]	@ (8001460 <SystemClock_Config+0xdc>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c4:	2300      	movs	r3, #0
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <SystemClock_Config+0xe0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a25      	ldr	r2, [pc, #148]	@ (8001464 <SystemClock_Config+0xe0>)
 80013ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b23      	ldr	r3, [pc, #140]	@ (8001464 <SystemClock_Config+0xe0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e4:	2301      	movs	r3, #1
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e8:	2310      	movs	r3, #16
 80013ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ec:	2302      	movs	r3, #2
 80013ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f0:	2300      	movs	r3, #0
 80013f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013f4:	2308      	movs	r3, #8
 80013f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80013f8:	23b4      	movs	r3, #180	@ 0xb4
 80013fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001400:	2302      	movs	r3, #2
 8001402:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001404:	2302      	movs	r3, #2
 8001406:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4618      	mov	r0, r3
 800140e:	f004 fd21 	bl	8005e54 <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001418:	f000 fb3e 	bl	8001a98 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800141c:	f004 f980 	bl	8005720 <HAL_PWREx_EnableOverDrive>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001426:	f000 fb37 	bl	8001a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142a:	230f      	movs	r3, #15
 800142c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142e:	2302      	movs	r3, #2
 8001430:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001436:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800143a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800143c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001440:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	2105      	movs	r1, #5
 8001448:	4618      	mov	r0, r3
 800144a:	f004 f9b9 	bl	80057c0 <HAL_RCC_ClockConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001454:	f000 fb20 	bl	8001a98 <Error_Handler>
  }
}
 8001458:	bf00      	nop
 800145a:	3750      	adds	r7, #80	@ 0x50
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	40007000 	.word	0x40007000

08001468 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146e:	463b      	mov	r3, r7
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800147a:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <MX_ADC1_Init+0x98>)
 800147c:	4a21      	ldr	r2, [pc, #132]	@ (8001504 <MX_ADC1_Init+0x9c>)
 800147e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001480:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <MX_ADC1_Init+0x98>)
 8001482:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001486:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001488:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <MX_ADC1_Init+0x98>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800148e:	4b1c      	ldr	r3, [pc, #112]	@ (8001500 <MX_ADC1_Init+0x98>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <MX_ADC1_Init+0x98>)
 8001496:	2201      	movs	r2, #1
 8001498:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800149a:	4b19      	ldr	r3, [pc, #100]	@ (8001500 <MX_ADC1_Init+0x98>)
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a2:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <MX_ADC1_Init+0x98>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a8:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <MX_ADC1_Init+0x98>)
 80014aa:	4a17      	ldr	r2, [pc, #92]	@ (8001508 <MX_ADC1_Init+0xa0>)
 80014ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ae:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <MX_ADC1_Init+0x98>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <MX_ADC1_Init+0x98>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014ba:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <MX_ADC1_Init+0x98>)
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <MX_ADC1_Init+0x98>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c8:	480d      	ldr	r0, [pc, #52]	@ (8001500 <MX_ADC1_Init+0x98>)
 80014ca:	f001 fda9 	bl	8003020 <HAL_ADC_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014d4:	f000 fae0 	bl	8001a98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014d8:	230a      	movs	r3, #10
 80014da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014dc:	2301      	movs	r3, #1
 80014de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014e4:	463b      	mov	r3, r7
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	@ (8001500 <MX_ADC1_Init+0x98>)
 80014ea:	f001 fddd 	bl	80030a8 <HAL_ADC_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014f4:	f000 fad0 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000208 	.word	0x20000208
 8001504:	40012000 	.word	0x40012000
 8001508:	0f000001 	.word	0x0f000001

0800150c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001510:	4b12      	ldr	r3, [pc, #72]	@ (800155c <MX_I2C1_Init+0x50>)
 8001512:	4a13      	ldr	r2, [pc, #76]	@ (8001560 <MX_I2C1_Init+0x54>)
 8001514:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001516:	4b11      	ldr	r3, [pc, #68]	@ (800155c <MX_I2C1_Init+0x50>)
 8001518:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <MX_I2C1_Init+0x58>)
 800151a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800151c:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <MX_I2C1_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <MX_I2C1_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001528:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <MX_I2C1_Init+0x50>)
 800152a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800152e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001530:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153c:	4b07      	ldr	r3, [pc, #28]	@ (800155c <MX_I2C1_Init+0x50>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <MX_I2C1_Init+0x50>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001548:	4804      	ldr	r0, [pc, #16]	@ (800155c <MX_I2C1_Init+0x50>)
 800154a:	f002 fe17 	bl	800417c <HAL_I2C_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001554:	f000 faa0 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000250 	.word	0x20000250
 8001560:	40005400 	.word	0x40005400
 8001564:	00061a80 	.word	0x00061a80

08001568 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <MX_I2C2_Init+0x50>)
 800156e:	4a13      	ldr	r2, [pc, #76]	@ (80015bc <MX_I2C2_Init+0x54>)
 8001570:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_I2C2_Init+0x50>)
 8001574:	4a12      	ldr	r2, [pc, #72]	@ (80015c0 <MX_I2C2_Init+0x58>)
 8001576:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <MX_I2C2_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_I2C2_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_I2C2_Init+0x50>)
 8001586:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800158a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <MX_I2C2_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_I2C2_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <MX_I2C2_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_I2C2_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	@ (80015b8 <MX_I2C2_Init+0x50>)
 80015a6:	f002 fde9 	bl	800417c <HAL_I2C_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015b0:	f000 fa72 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200002a4 	.word	0x200002a4
 80015bc:	40005800 	.word	0x40005800
 80015c0:	000186a0 	.word	0x000186a0

080015c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	@ 0x30
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2224      	movs	r2, #36	@ 0x24
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f007 f997 	bl	8008906 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015e0:	4b22      	ldr	r3, [pc, #136]	@ (800166c <MX_TIM1_Init+0xa8>)
 80015e2:	4a23      	ldr	r2, [pc, #140]	@ (8001670 <MX_TIM1_Init+0xac>)
 80015e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015e6:	4b21      	ldr	r3, [pc, #132]	@ (800166c <MX_TIM1_Init+0xa8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ec:	4b1f      	ldr	r3, [pc, #124]	@ (800166c <MX_TIM1_Init+0xa8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015f2:	4b1e      	ldr	r3, [pc, #120]	@ (800166c <MX_TIM1_Init+0xa8>)
 80015f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	@ (800166c <MX_TIM1_Init+0xa8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001600:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <MX_TIM1_Init+0xa8>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001606:	4b19      	ldr	r3, [pc, #100]	@ (800166c <MX_TIM1_Init+0xa8>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800160c:	2303      	movs	r3, #3
 800160e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001610:	2300      	movs	r3, #0
 8001612:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001614:	2301      	movs	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001618:	2300      	movs	r3, #0
 800161a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001624:	2301      	movs	r3, #1
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001628:	2300      	movs	r3, #0
 800162a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	4619      	mov	r1, r3
 8001636:	480d      	ldr	r0, [pc, #52]	@ (800166c <MX_TIM1_Init+0xa8>)
 8001638:	f004 ffc2 	bl	80065c0 <HAL_TIM_Encoder_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001642:	f000 fa29 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	4619      	mov	r1, r3
 8001652:	4806      	ldr	r0, [pc, #24]	@ (800166c <MX_TIM1_Init+0xa8>)
 8001654:	f005 fc2c 	bl	8006eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800165e:	f000 fa1b 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	3730      	adds	r7, #48	@ 0x30
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200002f8 	.word	0x200002f8
 8001670:	40010000 	.word	0x40010000

08001674 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	@ 0x30
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	2224      	movs	r2, #36	@ 0x24
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f007 f93f 	bl	8008906 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001690:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <MX_TIM2_Init+0xa4>)
 8001692:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001696:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001698:	4b1f      	ldr	r3, [pc, #124]	@ (8001718 <MX_TIM2_Init+0xa4>)
 800169a:	2200      	movs	r2, #0
 800169c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169e:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <MX_TIM2_Init+0xa4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <MX_TIM2_Init+0xa4>)
 80016a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <MX_TIM2_Init+0xa4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b2:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <MX_TIM2_Init+0xa4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016b8:	2303      	movs	r3, #3
 80016ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016c0:	2301      	movs	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016d0:	2301      	movs	r3, #1
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	4619      	mov	r1, r3
 80016e2:	480d      	ldr	r0, [pc, #52]	@ (8001718 <MX_TIM2_Init+0xa4>)
 80016e4:	f004 ff6c 	bl	80065c0 <HAL_TIM_Encoder_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80016ee:	f000 f9d3 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	4619      	mov	r1, r3
 80016fe:	4806      	ldr	r0, [pc, #24]	@ (8001718 <MX_TIM2_Init+0xa4>)
 8001700:	f005 fbd6 	bl	8006eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800170a:	f000 f9c5 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	3730      	adds	r7, #48	@ 0x30
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000340 	.word	0x20000340

0800171c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	@ 0x28
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001722:	f107 0320 	add.w	r3, r7, #32
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]
 800173a:	615a      	str	r2, [r3, #20]
 800173c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800173e:	4b32      	ldr	r3, [pc, #200]	@ (8001808 <MX_TIM3_Init+0xec>)
 8001740:	4a32      	ldr	r2, [pc, #200]	@ (800180c <MX_TIM3_Init+0xf0>)
 8001742:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001744:	4b30      	ldr	r3, [pc, #192]	@ (8001808 <MX_TIM3_Init+0xec>)
 8001746:	2200      	movs	r2, #0
 8001748:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174a:	4b2f      	ldr	r3, [pc, #188]	@ (8001808 <MX_TIM3_Init+0xec>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8001750:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <MX_TIM3_Init+0xec>)
 8001752:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001756:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001758:	4b2b      	ldr	r3, [pc, #172]	@ (8001808 <MX_TIM3_Init+0xec>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175e:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <MX_TIM3_Init+0xec>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001764:	4828      	ldr	r0, [pc, #160]	@ (8001808 <MX_TIM3_Init+0xec>)
 8001766:	f004 fe13 	bl	8006390 <HAL_TIM_PWM_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001770:	f000 f992 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800177c:	f107 0320 	add.w	r3, r7, #32
 8001780:	4619      	mov	r1, r3
 8001782:	4821      	ldr	r0, [pc, #132]	@ (8001808 <MX_TIM3_Init+0xec>)
 8001784:	f005 fb94 	bl	8006eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800178e:	f000 f983 	bl	8001a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001792:	2360      	movs	r3, #96	@ 0x60
 8001794:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2200      	movs	r2, #0
 80017a6:	4619      	mov	r1, r3
 80017a8:	4817      	ldr	r0, [pc, #92]	@ (8001808 <MX_TIM3_Init+0xec>)
 80017aa:	f005 f83d 	bl	8006828 <HAL_TIM_PWM_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80017b4:	f000 f970 	bl	8001a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2204      	movs	r2, #4
 80017bc:	4619      	mov	r1, r3
 80017be:	4812      	ldr	r0, [pc, #72]	@ (8001808 <MX_TIM3_Init+0xec>)
 80017c0:	f005 f832 	bl	8006828 <HAL_TIM_PWM_ConfigChannel>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80017ca:	f000 f965 	bl	8001a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2208      	movs	r2, #8
 80017d2:	4619      	mov	r1, r3
 80017d4:	480c      	ldr	r0, [pc, #48]	@ (8001808 <MX_TIM3_Init+0xec>)
 80017d6:	f005 f827 	bl	8006828 <HAL_TIM_PWM_ConfigChannel>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80017e0:	f000 f95a 	bl	8001a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	220c      	movs	r2, #12
 80017e8:	4619      	mov	r1, r3
 80017ea:	4807      	ldr	r0, [pc, #28]	@ (8001808 <MX_TIM3_Init+0xec>)
 80017ec:	f005 f81c 	bl	8006828 <HAL_TIM_PWM_ConfigChannel>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80017f6:	f000 f94f 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017fa:	4803      	ldr	r0, [pc, #12]	@ (8001808 <MX_TIM3_Init+0xec>)
 80017fc:	f000 fe0e 	bl	800241c <HAL_TIM_MspPostInit>

}
 8001800:	bf00      	nop
 8001802:	3728      	adds	r7, #40	@ 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000388 	.word	0x20000388
 800180c:	40000400 	.word	0x40000400

08001810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <MX_USART2_UART_Init+0x4c>)
 8001816:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <MX_USART2_UART_Init+0x50>)
 8001818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800181a:	4b10      	ldr	r3, [pc, #64]	@ (800185c <MX_USART2_UART_Init+0x4c>)
 800181c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001822:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <MX_USART2_UART_Init+0x4c>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <MX_USART2_UART_Init+0x4c>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800182e:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <MX_USART2_UART_Init+0x4c>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001834:	4b09      	ldr	r3, [pc, #36]	@ (800185c <MX_USART2_UART_Init+0x4c>)
 8001836:	220c      	movs	r2, #12
 8001838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183a:	4b08      	ldr	r3, [pc, #32]	@ (800185c <MX_USART2_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <MX_USART2_UART_Init+0x4c>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	@ (800185c <MX_USART2_UART_Init+0x4c>)
 8001848:	f005 fbae 	bl	8006fa8 <HAL_UART_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001852:	f000 f921 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200003d0 	.word	0x200003d0
 8001860:	40004400 	.word	0x40004400

08001864 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001868:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <MX_USART3_UART_Init+0x4c>)
 800186a:	4a12      	ldr	r2, [pc, #72]	@ (80018b4 <MX_USART3_UART_Init+0x50>)
 800186c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <MX_USART3_UART_Init+0x4c>)
 8001870:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001874:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <MX_USART3_UART_Init+0x4c>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800187c:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <MX_USART3_UART_Init+0x4c>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001882:	4b0b      	ldr	r3, [pc, #44]	@ (80018b0 <MX_USART3_UART_Init+0x4c>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001888:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <MX_USART3_UART_Init+0x4c>)
 800188a:	220c      	movs	r2, #12
 800188c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188e:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <MX_USART3_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <MX_USART3_UART_Init+0x4c>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <MX_USART3_UART_Init+0x4c>)
 800189c:	f005 fb84 	bl	8006fa8 <HAL_UART_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018a6:	f000 f8f7 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000418 	.word	0x20000418
 80018b4:	40004800 	.word	0x40004800

080018b8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018bc:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <MX_USART6_UART_Init+0x4c>)
 80018be:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <MX_USART6_UART_Init+0x50>)
 80018c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80018c2:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <MX_USART6_UART_Init+0x4c>)
 80018c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <MX_USART6_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <MX_USART6_UART_Init+0x4c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <MX_USART6_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <MX_USART6_UART_Init+0x4c>)
 80018de:	220c      	movs	r2, #12
 80018e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e2:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <MX_USART6_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e8:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <MX_USART6_UART_Init+0x4c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018ee:	4805      	ldr	r0, [pc, #20]	@ (8001904 <MX_USART6_UART_Init+0x4c>)
 80018f0:	f005 fb5a 	bl	8006fa8 <HAL_UART_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80018fa:	f000 f8cd 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000460 	.word	0x20000460
 8001908:	40011400 	.word	0x40011400

0800190c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <MX_DMA_Init+0x3c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a0b      	ldr	r2, [pc, #44]	@ (8001948 <MX_DMA_Init+0x3c>)
 800191c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <MX_DMA_Init+0x3c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	2039      	movs	r0, #57	@ 0x39
 8001934:	f001 fec1 	bl	80036ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001938:	2039      	movs	r0, #57	@ 0x39
 800193a:	f001 feda 	bl	80036f2 <HAL_NVIC_EnableIRQ>

}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800

0800194c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	@ 0x28
 8001950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b48      	ldr	r3, [pc, #288]	@ (8001a88 <MX_GPIO_Init+0x13c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	4a47      	ldr	r2, [pc, #284]	@ (8001a88 <MX_GPIO_Init+0x13c>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	6313      	str	r3, [r2, #48]	@ 0x30
 8001972:	4b45      	ldr	r3, [pc, #276]	@ (8001a88 <MX_GPIO_Init+0x13c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b41      	ldr	r3, [pc, #260]	@ (8001a88 <MX_GPIO_Init+0x13c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a40      	ldr	r2, [pc, #256]	@ (8001a88 <MX_GPIO_Init+0x13c>)
 8001988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a88 <MX_GPIO_Init+0x13c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a88 <MX_GPIO_Init+0x13c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a39      	ldr	r2, [pc, #228]	@ (8001a88 <MX_GPIO_Init+0x13c>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b37      	ldr	r3, [pc, #220]	@ (8001a88 <MX_GPIO_Init+0x13c>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b33      	ldr	r3, [pc, #204]	@ (8001a88 <MX_GPIO_Init+0x13c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a32      	ldr	r2, [pc, #200]	@ (8001a88 <MX_GPIO_Init+0x13c>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b30      	ldr	r3, [pc, #192]	@ (8001a88 <MX_GPIO_Init+0x13c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIRPUMP_Pin|WATERPUMP_Pin, GPIO_PIN_SET);
 80019d2:	2201      	movs	r2, #1
 80019d4:	2106      	movs	r1, #6
 80019d6:	482d      	ldr	r0, [pc, #180]	@ (8001a8c <MX_GPIO_Init+0x140>)
 80019d8:	f002 fbb6 	bl	8004148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	2120      	movs	r1, #32
 80019e0:	482b      	ldr	r0, [pc, #172]	@ (8001a90 <MX_GPIO_Init+0x144>)
 80019e2:	f002 fbb1 	bl	8004148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80019ec:	4829      	ldr	r0, [pc, #164]	@ (8001a94 <MX_GPIO_Init+0x148>)
 80019ee:	f002 fbab 	bl	8004148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	4820      	ldr	r0, [pc, #128]	@ (8001a8c <MX_GPIO_Init+0x140>)
 8001a0a:	f002 fa09 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIRPUMP_Pin WATERPUMP_Pin */
  GPIO_InitStruct.Pin = AIRPUMP_Pin|WATERPUMP_Pin;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	4819      	ldr	r0, [pc, #100]	@ (8001a8c <MX_GPIO_Init+0x140>)
 8001a26:	f002 f9fb 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a2a:	2320      	movs	r3, #32
 8001a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4813      	ldr	r0, [pc, #76]	@ (8001a90 <MX_GPIO_Init+0x144>)
 8001a42:	f002 f9ed 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 8001a46:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480d      	ldr	r0, [pc, #52]	@ (8001a94 <MX_GPIO_Init+0x148>)
 8001a60:	f002 f9de 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	4804      	ldr	r0, [pc, #16]	@ (8001a8c <MX_GPIO_Init+0x140>)
 8001a7a:	f002 f9d1 	bl	8003e20 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	@ 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40020400 	.word	0x40020400

08001a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9c:	b672      	cpsid	i
}
 8001a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <Error_Handler+0x8>

08001aa4 <PCA9685_SetBit>:
  * @param  Bit: Bit position to modify (0-7)
  * @param  Value: Value to set (0 or 1)
  * @retval None
  */
void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af04      	add	r7, sp, #16
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	71bb      	strb	r3, [r7, #6]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	230a      	movs	r3, #10
 8001abc:	9302      	str	r3, [sp, #8]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	f107 030f 	add.w	r3, r7, #15
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2301      	movs	r3, #1
 8001aca:	2180      	movs	r1, #128	@ 0x80
 8001acc:	4819      	ldr	r0, [pc, #100]	@ (8001b34 <PCA9685_SetBit+0x90>)
 8001ace:	f002 fe91 	bl	80047f4 <HAL_I2C_Mem_Read>
  if (Value == 0)
 8001ad2:	797b      	ldrb	r3, [r7, #5]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10d      	bne.n	8001af4 <PCA9685_SetBit+0x50>
    readValue &= ~(1 << Bit);
 8001ad8:	79bb      	ldrb	r3, [r7, #6]
 8001ada:	2201      	movs	r2, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	b25a      	sxtb	r2, r3
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	4013      	ands	r3, r2
 8001aec:	b25b      	sxtb	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	73fb      	strb	r3, [r7, #15]
 8001af2:	e00a      	b.n	8001b0a <PCA9685_SetBit+0x66>
  else
    readValue |= (1 << Bit);
 8001af4:	79bb      	ldrb	r3, [r7, #6]
 8001af6:	2201      	movs	r2, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	b25a      	sxtb	r2, r3
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	4313      	orrs	r3, r2
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	230a      	movs	r3, #10
 8001b10:	9302      	str	r3, [sp, #8]
 8001b12:	2301      	movs	r3, #1
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	f107 030f 	add.w	r3, r7, #15
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	2180      	movs	r1, #128	@ 0x80
 8001b20:	4804      	ldr	r0, [pc, #16]	@ (8001b34 <PCA9685_SetBit+0x90>)
 8001b22:	f002 fd6d 	bl	8004600 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f001 fa56 	bl	8002fd8 <HAL_Delay>
}
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200002a4 	.word	0x200002a4

08001b38 <PCA9685_SetPWMFrequency>:
  * @brief  Set PWM frequency (24Hz to 1526Hz)
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af04      	add	r7, sp, #16
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;

  // Ensure frequency is within valid range
  if(frequency >= 1526)
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d902      	bls.n	8001b52 <PCA9685_SetPWMFrequency+0x1a>
    prescale = 0x03;  // Maximum frequency (1526Hz)
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	73fb      	strb	r3, [r7, #15]
 8001b50:	e00c      	b.n	8001b6c <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24)
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	2b18      	cmp	r3, #24
 8001b56:	d802      	bhi.n	8001b5e <PCA9685_SetPWMFrequency+0x26>
    prescale = 0xFF;  // Minimum frequency (24Hz)
 8001b58:	23ff      	movs	r3, #255	@ 0xff
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e006      	b.n	8001b6c <PCA9685_SetPWMFrequency+0x34>
  else
    // Calculate prescale value based on 25MHz internal oscillator
    prescale = (uint8_t)(25000000 / (4096 * frequency));
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	031b      	lsls	r3, r3, #12
 8001b62:	4a12      	ldr	r2, [pc, #72]	@ (8001bac <PCA9685_SetPWMFrequency+0x74>)
 8001b64:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	73fb      	strb	r3, [r7, #15]

  // Enter sleep mode before changing the frequency
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2104      	movs	r1, #4
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7ff ff97 	bl	8001aa4 <PCA9685_SetBit>

  // Set the prescale value
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 8001b76:	230a      	movs	r3, #10
 8001b78:	9302      	str	r3, [sp, #8]
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	9301      	str	r3, [sp, #4]
 8001b7e:	f107 030f 	add.w	r3, r7, #15
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2301      	movs	r3, #1
 8001b86:	22fe      	movs	r2, #254	@ 0xfe
 8001b88:	2180      	movs	r1, #128	@ 0x80
 8001b8a:	4809      	ldr	r0, [pc, #36]	@ (8001bb0 <PCA9685_SetPWMFrequency+0x78>)
 8001b8c:	f002 fd38 	bl	8004600 <HAL_I2C_Mem_Write>

  // Exit sleep mode
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2104      	movs	r1, #4
 8001b94:	2000      	movs	r0, #0
 8001b96:	f7ff ff85 	bl	8001aa4 <PCA9685_SetBit>

  // Restart all PWM channels
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2107      	movs	r1, #7
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7ff ff80 	bl	8001aa4 <PCA9685_SetBit>
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	017d7840 	.word	0x017d7840
 8001bb0:	200002a4 	.word	0x200002a4

08001bb4 <PCA9685_Init>:
  * @brief  Initialize PCA9685 with specified frequency
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_Init(uint16_t frequency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	80fb      	strh	r3, [r7, #6]
  // Set desired PWM frequency (usually 50Hz for standard servos)
  PCA9685_SetPWMFrequency(frequency);
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ffb9 	bl	8001b38 <PCA9685_SetPWMFrequency>

  // Enable Auto-Increment for efficient register writing
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2105      	movs	r1, #5
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7ff ff6a 	bl	8001aa4 <PCA9685_SetBit>
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <PCA9685_SetPWM>:
  * @param  OnTime: Value between 0-4095 for ON time
  * @param  OffTime: Value between 0-4095 for OFF time
  * @retval None
  */
void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af04      	add	r7, sp, #16
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
 8001be2:	460b      	mov	r3, r1
 8001be4:	80bb      	strh	r3, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];

  // Calculate register address for the specified channel
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	3306      	adds	r3, #6
 8001bf2:	73fb      	strb	r3, [r7, #15]

  // Prepare data bytes for ON and OFF times
  pwm[0] = OnTime & 0xFF;         // ON Low byte
 8001bf4:	88bb      	ldrh	r3, [r7, #4]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	723b      	strb	r3, [r7, #8]
  pwm[1] = (OnTime >> 8) & 0xFF;  // ON High byte
 8001bfa:	88bb      	ldrh	r3, [r7, #4]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;        // OFF Low byte
 8001c04:	887b      	ldrh	r3, [r7, #2]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	72bb      	strb	r3, [r7, #10]
  pwm[3] = (OffTime >> 8) & 0xFF; // OFF High byte
 8001c0a:	887b      	ldrh	r3, [r7, #2]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	72fb      	strb	r3, [r7, #11]

  // Write all 4 bytes in a single I2C transaction
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	230a      	movs	r3, #10
 8001c1a:	9302      	str	r3, [sp, #8]
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2301      	movs	r3, #1
 8001c28:	2180      	movs	r1, #128	@ 0x80
 8001c2a:	4803      	ldr	r0, [pc, #12]	@ (8001c38 <PCA9685_SetPWM+0x60>)
 8001c2c:	f002 fce8 	bl	8004600 <HAL_I2C_Mem_Write>
}
 8001c30:	bf00      	nop
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	200002a4 	.word	0x200002a4
 8001c3c:	00000000 	.word	0x00000000

08001c40 <PCA9685_SetServoAngle>:
  * @param  Channel: Channel number (0-15)
  * @param  Angle: Desired angle (0-180 degrees)
  * @retval None
  */
void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	ed87 0a00 	vstr	s0, [r7]
 8001c4c:	71fb      	strb	r3, [r7, #7]
  float pwmValue;

  // Limit angle to 0-180 range
  if (Angle < 0) Angle = 0;
 8001c4e:	edd7 7a00 	vldr	s15, [r7]
 8001c52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	d502      	bpl.n	8001c62 <PCA9685_SetServoAngle+0x22>
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
  if (Angle > 180) Angle = 180;
 8001c62:	edd7 7a00 	vldr	s15, [r7]
 8001c66:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001cf0 <PCA9685_SetServoAngle+0xb0>
 8001c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c72:	dd01      	ble.n	8001c78 <PCA9685_SetServoAngle+0x38>
 8001c74:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf4 <PCA9685_SetServoAngle+0xb4>)
 8001c76:	603b      	str	r3, [r7, #0]

  // Convert angle to PWM value
  // At 50Hz: 0° = 102.4 value (0.5ms), 180° = 511.9 value (2.5ms)
  pwmValue = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8001c78:	6838      	ldr	r0, [r7, #0]
 8001c7a:	f7fe fc95 	bl	80005a8 <__aeabi_f2d>
 8001c7e:	a318      	add	r3, pc, #96	@ (adr r3, 8001ce0 <PCA9685_SetServoAngle+0xa0>)
 8001c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c84:	f7fe fce8 	bl	8000658 <__aeabi_dmul>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	4b18      	ldr	r3, [pc, #96]	@ (8001cf8 <PCA9685_SetServoAngle+0xb8>)
 8001c96:	f7fe fe09 	bl	80008ac <__aeabi_ddiv>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	a311      	add	r3, pc, #68	@ (adr r3, 8001ce8 <PCA9685_SetServoAngle+0xa8>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe fb20 	bl	80002ec <__adddf3>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f7fe ffa8 	bl	8000c08 <__aeabi_d2f>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60fb      	str	r3, [r7, #12]

  // Set PWM with calculated value
  PCA9685_SetPWM(Channel, 0, (uint16_t)pwmValue);
 8001cbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cc4:	ee17 3a90 	vmov	r3, s15
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ff82 	bl	8001bd8 <PCA9685_SetPWM>
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	f3af 8000 	nop.w
 8001ce0:	00000000 	.word	0x00000000
 8001ce4:	40799800 	.word	0x40799800
 8001ce8:	9999999a 	.word	0x9999999a
 8001cec:	40599999 	.word	0x40599999
 8001cf0:	43340000 	.word	0x43340000
 8001cf4:	43340000 	.word	0x43340000
 8001cf8:	40668000 	.word	0x40668000

08001cfc <Servo_Init>:
  * @brief  Initialize the servo control system
  * @param  frequency: PWM frequency for the servos (typically 50Hz)
  * @retval None
  */
void Servo_Init(uint16_t frequency)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	80fb      	strh	r3, [r7, #6]
    if (isInitialized)
 8001d06:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <Servo_Init+0x3c>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d110      	bne.n	8001d30 <Servo_Init+0x34>
        return;

    // Initialize PCA9685 with the specified frequency
    PCA9685_Init(frequency);
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff4f 	bl	8001bb4 <PCA9685_Init>

    // Clear the servo array
    memset(servos, 0, sizeof(servos));
 8001d16:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4807      	ldr	r0, [pc, #28]	@ (8001d3c <Servo_Init+0x40>)
 8001d1e:	f006 fdf2 	bl	8008906 <memset>
    servoCount = 0;
 8001d22:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <Servo_Init+0x44>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
    isInitialized = 1;
 8001d28:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <Servo_Init+0x3c>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	e000      	b.n	8001d32 <Servo_Init+0x36>
        return;
 8001d30:	bf00      	nop
}
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	2000074d 	.word	0x2000074d
 8001d3c:	2000050c 	.word	0x2000050c
 8001d40:	2000074c 	.word	0x2000074c

08001d44 <Servo_Register>:
  * @param  minAngle: Minimum angle limit (0-180)
  * @param  maxAngle: Maximum angle limit (0-180)
  * @retval int: Servo ID (0 to MAX_SERVOS-1) or -1 if error
  */
int Servo_Register(uint8_t channel, const char* name, float minAngle, float maxAngle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d52:	edc7 0a00 	vstr	s1, [r7]
 8001d56:	73fb      	strb	r3, [r7, #15]
    // Check if initialized
    if (!isInitialized)
 8001d58:	4b6e      	ldr	r3, [pc, #440]	@ (8001f14 <Servo_Register+0x1d0>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <Servo_Register+0x22>
        return -1;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
 8001d64:	e0d1      	b.n	8001f0a <Servo_Register+0x1c6>

    // Check if we've reached maximum servo count
    if (servoCount >= MAX_SERVOS)
 8001d66:	4b6c      	ldr	r3, [pc, #432]	@ (8001f18 <Servo_Register+0x1d4>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b0f      	cmp	r3, #15
 8001d6c:	d902      	bls.n	8001d74 <Servo_Register+0x30>
        return -1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d72:	e0ca      	b.n	8001f0a <Servo_Register+0x1c6>

    // Check if channel is valid
    if (channel >= MAX_SERVOS)
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	2b0f      	cmp	r3, #15
 8001d78:	d902      	bls.n	8001d80 <Servo_Register+0x3c>
        return -1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	e0c4      	b.n	8001f0a <Servo_Register+0x1c6>

    // Check if the channel is already in use
    for (int i = 0; i < servoCount; i++) {
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	e01b      	b.n	8001dbe <Servo_Register+0x7a>
        if (servos[i].initialized && servos[i].channel == channel)
 8001d86:	4965      	ldr	r1, [pc, #404]	@ (8001f1c <Servo_Register+0x1d8>)
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	3310      	adds	r3, #16
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00d      	beq.n	8001db8 <Servo_Register+0x74>
 8001d9c:	495f      	ldr	r1, [pc, #380]	@ (8001f1c <Servo_Register+0x1d8>)
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d102      	bne.n	8001db8 <Servo_Register+0x74>
            return -1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e0a8      	b.n	8001f0a <Servo_Register+0x1c6>
    for (int i = 0; i < servoCount; i++) {
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	4b56      	ldr	r3, [pc, #344]	@ (8001f18 <Servo_Register+0x1d4>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	dbdd      	blt.n	8001d86 <Servo_Register+0x42>
    }

    // Validate angle limits
    if (minAngle < SERVO_ANGLE_MIN) minAngle = SERVO_ANGLE_MIN;
 8001dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	d502      	bpl.n	8001dde <Servo_Register+0x9a>
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
    if (maxAngle > SERVO_ANGLE_MAX) maxAngle = SERVO_ANGLE_MAX;
 8001dde:	edd7 7a00 	vldr	s15, [r7]
 8001de2:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001f20 <Servo_Register+0x1dc>
 8001de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dee:	dd01      	ble.n	8001df4 <Servo_Register+0xb0>
 8001df0:	4b4c      	ldr	r3, [pc, #304]	@ (8001f24 <Servo_Register+0x1e0>)
 8001df2:	603b      	str	r3, [r7, #0]
    if (minAngle >= maxAngle) return -1;
 8001df4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001df8:	edd7 7a00 	vldr	s15, [r7]
 8001dfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	db02      	blt.n	8001e0c <Servo_Register+0xc8>
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	e07e      	b.n	8001f0a <Servo_Register+0x1c6>

    // Register the servo
    int servoId = servoCount;
 8001e0c:	4b42      	ldr	r3, [pc, #264]	@ (8001f18 <Servo_Register+0x1d4>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	613b      	str	r3, [r7, #16]
    servos[servoId].channel = channel;
 8001e12:	4942      	ldr	r1, [pc, #264]	@ (8001f1c <Servo_Register+0x1d8>)
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	701a      	strb	r2, [r3, #0]
    servos[servoId].minAngle = minAngle;
 8001e24:	493d      	ldr	r1, [pc, #244]	@ (8001f1c <Servo_Register+0x1d8>)
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	3304      	adds	r3, #4
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	601a      	str	r2, [r3, #0]
    servos[servoId].maxAngle = maxAngle;
 8001e38:	4938      	ldr	r1, [pc, #224]	@ (8001f1c <Servo_Register+0x1d8>)
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	3308      	adds	r3, #8
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	601a      	str	r2, [r3, #0]
    servos[servoId].currentAngle = (minAngle + maxAngle) / 2.0f;  // Center position
 8001e4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e50:	edd7 7a00 	vldr	s15, [r7]
 8001e54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e58:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001e5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e60:	492e      	ldr	r1, [pc, #184]	@ (8001f1c <Servo_Register+0x1d8>)
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	330c      	adds	r3, #12
 8001e70:	edc3 7a00 	vstr	s15, [r3]
    servos[servoId].initialized = 1;
 8001e74:	4929      	ldr	r1, [pc, #164]	@ (8001f1c <Servo_Register+0x1d8>)
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3310      	adds	r3, #16
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]

    // Set optional name
    if (name != NULL) {
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d018      	beq.n	8001ec0 <Servo_Register+0x17c>
        strncpy(servos[servoId].name, name, sizeof(servos[servoId].name) - 1);
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	3310      	adds	r3, #16
 8001e9a:	4a20      	ldr	r2, [pc, #128]	@ (8001f1c <Servo_Register+0x1d8>)
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	220f      	movs	r2, #15
 8001ea2:	68b9      	ldr	r1, [r7, #8]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f006 fd36 	bl	8008916 <strncpy>
        servos[servoId].name[sizeof(servos[servoId].name) - 1] = '\0';  // Ensure null termination
 8001eaa:	491c      	ldr	r1, [pc, #112]	@ (8001f1c <Servo_Register+0x1d8>)
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	3320      	adds	r3, #32
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
 8001ebe:	e00d      	b.n	8001edc <Servo_Register+0x198>
    } else {
        snprintf(servos[servoId].name, sizeof(servos[servoId].name), "Servo%d", servoId);
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	3310      	adds	r3, #16
 8001ecc:	4a13      	ldr	r2, [pc, #76]	@ (8001f1c <Servo_Register+0x1d8>)
 8001ece:	4413      	add	r3, r2
 8001ed0:	1c58      	adds	r0, r3, #1
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4a14      	ldr	r2, [pc, #80]	@ (8001f28 <Servo_Register+0x1e4>)
 8001ed6:	2110      	movs	r1, #16
 8001ed8:	f006 fc9c 	bl	8008814 <sniprintf>
    }

    // Update servo count
    servoCount++;
 8001edc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <Servo_Register+0x1d4>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <Servo_Register+0x1d4>)
 8001ee6:	701a      	strb	r2, [r3, #0]

    // Move servo to center position
    PCA9685_SetServoAngle(channel, servos[servoId].currentAngle);
 8001ee8:	490c      	ldr	r1, [pc, #48]	@ (8001f1c <Servo_Register+0x1d8>)
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	330c      	adds	r3, #12
 8001ef8:	edd3 7a00 	vldr	s15, [r3]
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	eeb0 0a67 	vmov.f32	s0, s15
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fe9c 	bl	8001c40 <PCA9685_SetServoAngle>

    return servoId;
 8001f08:	693b      	ldr	r3, [r7, #16]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2000074d 	.word	0x2000074d
 8001f18:	2000074c 	.word	0x2000074c
 8001f1c:	2000050c 	.word	0x2000050c
 8001f20:	43340000 	.word	0x43340000
 8001f24:	43340000 	.word	0x43340000
 8001f28:	0800aaf4 	.word	0x0800aaf4

08001f2c <Servo_SetAngle>:
  * @param  servoId: ID returned from Servo_Register
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngle(int servoId, float angle)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	ed87 0a00 	vstr	s0, [r7]
    // Check if servo ID is valid
    if (servoId < 0 || servoId >= servoCount || !servos[servoId].initialized)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db10      	blt.n	8001f60 <Servo_SetAngle+0x34>
 8001f3e:	4b33      	ldr	r3, [pc, #204]	@ (800200c <Servo_SetAngle+0xe0>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4293      	cmp	r3, r2
 8001f48:	da0a      	bge.n	8001f60 <Servo_SetAngle+0x34>
 8001f4a:	4931      	ldr	r1, [pc, #196]	@ (8002010 <Servo_SetAngle+0xe4>)
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	3310      	adds	r3, #16
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <Servo_SetAngle+0x3a>
        return -1;
 8001f60:	f04f 33ff 	mov.w	r3, #4294967295
 8001f64:	e04d      	b.n	8002002 <Servo_SetAngle+0xd6>

    // Clamp angle to servo limits
    if (angle < servos[servoId].minAngle)
 8001f66:	492a      	ldr	r1, [pc, #168]	@ (8002010 <Servo_SetAngle+0xe4>)
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	3304      	adds	r3, #4
 8001f76:	edd3 7a00 	vldr	s15, [r3]
 8001f7a:	ed97 7a00 	vldr	s14, [r7]
 8001f7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f86:	d509      	bpl.n	8001f9c <Servo_SetAngle+0x70>
        angle = servos[servoId].minAngle;
 8001f88:	4921      	ldr	r1, [pc, #132]	@ (8002010 <Servo_SetAngle+0xe4>)
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	3304      	adds	r3, #4
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	603b      	str	r3, [r7, #0]
    if (angle > servos[servoId].maxAngle)
 8001f9c:	491c      	ldr	r1, [pc, #112]	@ (8002010 <Servo_SetAngle+0xe4>)
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	3308      	adds	r3, #8
 8001fac:	edd3 7a00 	vldr	s15, [r3]
 8001fb0:	ed97 7a00 	vldr	s14, [r7]
 8001fb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fbc:	dd09      	ble.n	8001fd2 <Servo_SetAngle+0xa6>
        angle = servos[servoId].maxAngle;
 8001fbe:	4914      	ldr	r1, [pc, #80]	@ (8002010 <Servo_SetAngle+0xe4>)
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	3308      	adds	r3, #8
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	603b      	str	r3, [r7, #0]

    // Update current angle
    servos[servoId].currentAngle = angle;
 8001fd2:	490f      	ldr	r1, [pc, #60]	@ (8002010 <Servo_SetAngle+0xe4>)
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	330c      	adds	r3, #12
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	601a      	str	r2, [r3, #0]

    // Set servo position
    PCA9685_SetServoAngle(servos[servoId].channel, angle);
 8001fe6:	490a      	ldr	r1, [pc, #40]	@ (8002010 <Servo_SetAngle+0xe4>)
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	ed97 0a00 	vldr	s0, [r7]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fe20 	bl	8001c40 <PCA9685_SetServoAngle>

    return 0;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	2000074c 	.word	0x2000074c
 8002010:	2000050c 	.word	0x2000050c

08002014 <Servo_SetAngleByName>:
  * @param  name: Name of the servo
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngleByName(const char* name, float angle)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	ed87 0a00 	vstr	s0, [r7]
    if (name == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <Servo_SetAngleByName+0x18>
        return -1;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	e00f      	b.n	800204c <Servo_SetAngleByName+0x38>

    int servoId = Servo_GetIdByName(name);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f811 	bl	8002054 <Servo_GetIdByName>
 8002032:	60f8      	str	r0, [r7, #12]

    if (servoId >= 0)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b00      	cmp	r3, #0
 8002038:	db06      	blt.n	8002048 <Servo_SetAngleByName+0x34>
        return Servo_SetAngle(servoId, angle);
 800203a:	ed97 0a00 	vldr	s0, [r7]
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7ff ff74 	bl	8001f2c <Servo_SetAngle>
 8002044:	4603      	mov	r3, r0
 8002046:	e001      	b.n	800204c <Servo_SetAngleByName+0x38>
    else
        return -1;
 8002048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <Servo_GetIdByName>:
  * @brief  Get servo ID by name
  * @param  name: Name of the servo
  * @retval int: Servo ID or -1 if not found
  */
int Servo_GetIdByName(const char* name)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
    if (name == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <Servo_GetIdByName+0x14>
        return -1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	e02a      	b.n	80020be <Servo_GetIdByName+0x6a>

    // Search for servo with the given name
    for (int i = 0; i < servoCount; i++) {
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	e01f      	b.n	80020ae <Servo_GetIdByName+0x5a>
        if (servos[i].initialized && strcmp(servos[i].name, name) == 0)
 800206e:	4916      	ldr	r1, [pc, #88]	@ (80020c8 <Servo_GetIdByName+0x74>)
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	3310      	adds	r3, #16
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d011      	beq.n	80020a8 <Servo_GetIdByName+0x54>
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	3310      	adds	r3, #16
 8002090:	4a0d      	ldr	r2, [pc, #52]	@ (80020c8 <Servo_GetIdByName+0x74>)
 8002092:	4413      	add	r3, r2
 8002094:	3301      	adds	r3, #1
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe f8b9 	bl	8000210 <strcmp>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <Servo_GetIdByName+0x54>
            return i;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	e00a      	b.n	80020be <Servo_GetIdByName+0x6a>
    for (int i = 0; i < servoCount; i++) {
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3301      	adds	r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <Servo_GetIdByName+0x78>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4293      	cmp	r3, r2
 80020b8:	dbd9      	blt.n	800206e <Servo_GetIdByName+0x1a>
    }

    return -1;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	2000050c 	.word	0x2000050c
 80020cc:	2000074c 	.word	0x2000074c

080020d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	4b10      	ldr	r3, [pc, #64]	@ (800211c <HAL_MspInit+0x4c>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	4a0f      	ldr	r2, [pc, #60]	@ (800211c <HAL_MspInit+0x4c>)
 80020e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020e6:	4b0d      	ldr	r3, [pc, #52]	@ (800211c <HAL_MspInit+0x4c>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	603b      	str	r3, [r7, #0]
 80020f6:	4b09      	ldr	r3, [pc, #36]	@ (800211c <HAL_MspInit+0x4c>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	4a08      	ldr	r2, [pc, #32]	@ (800211c <HAL_MspInit+0x4c>)
 80020fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002100:	6413      	str	r3, [r2, #64]	@ 0x40
 8002102:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_MspInit+0x4c>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800210e:	2007      	movs	r0, #7
 8002110:	f001 fac8 	bl	80036a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40023800 	.word	0x40023800

08002120 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	@ 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a17      	ldr	r2, [pc, #92]	@ (800219c <HAL_ADC_MspInit+0x7c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d127      	bne.n	8002192 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	4b16      	ldr	r3, [pc, #88]	@ (80021a0 <HAL_ADC_MspInit+0x80>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	4a15      	ldr	r2, [pc, #84]	@ (80021a0 <HAL_ADC_MspInit+0x80>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002150:	6453      	str	r3, [r2, #68]	@ 0x44
 8002152:	4b13      	ldr	r3, [pc, #76]	@ (80021a0 <HAL_ADC_MspInit+0x80>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b0f      	ldr	r3, [pc, #60]	@ (80021a0 <HAL_ADC_MspInit+0x80>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4a0e      	ldr	r2, [pc, #56]	@ (80021a0 <HAL_ADC_MspInit+0x80>)
 8002168:	f043 0304 	orr.w	r3, r3, #4
 800216c:	6313      	str	r3, [r2, #48]	@ 0x30
 800216e:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <HAL_ADC_MspInit+0x80>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_ADC_Pin;
 800217a:	2301      	movs	r3, #1
 800217c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800217e:	2303      	movs	r3, #3
 8002180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_ADC_GPIO_Port, &GPIO_InitStruct);
 8002186:	f107 0314 	add.w	r3, r7, #20
 800218a:	4619      	mov	r1, r3
 800218c:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <HAL_ADC_MspInit+0x84>)
 800218e:	f001 fe47 	bl	8003e20 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002192:	bf00      	nop
 8002194:	3728      	adds	r7, #40	@ 0x28
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40012000 	.word	0x40012000
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40020800 	.word	0x40020800

080021a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08c      	sub	sp, #48	@ 0x30
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 031c 	add.w	r3, r7, #28
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a42      	ldr	r2, [pc, #264]	@ (80022d0 <HAL_I2C_MspInit+0x128>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d12c      	bne.n	8002224 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	4b41      	ldr	r3, [pc, #260]	@ (80022d4 <HAL_I2C_MspInit+0x12c>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	4a40      	ldr	r2, [pc, #256]	@ (80022d4 <HAL_I2C_MspInit+0x12c>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021da:	4b3e      	ldr	r3, [pc, #248]	@ (80022d4 <HAL_I2C_MspInit+0x12c>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021e6:	23c0      	movs	r3, #192	@ 0xc0
 80021e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ea:	2312      	movs	r3, #18
 80021ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f2:	2303      	movs	r3, #3
 80021f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021f6:	2304      	movs	r3, #4
 80021f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	4619      	mov	r1, r3
 8002200:	4835      	ldr	r0, [pc, #212]	@ (80022d8 <HAL_I2C_MspInit+0x130>)
 8002202:	f001 fe0d 	bl	8003e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	4b32      	ldr	r3, [pc, #200]	@ (80022d4 <HAL_I2C_MspInit+0x12c>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	4a31      	ldr	r2, [pc, #196]	@ (80022d4 <HAL_I2C_MspInit+0x12c>)
 8002210:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002214:	6413      	str	r3, [r2, #64]	@ 0x40
 8002216:	4b2f      	ldr	r3, [pc, #188]	@ (80022d4 <HAL_I2C_MspInit+0x12c>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002222:	e050      	b.n	80022c6 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2c      	ldr	r2, [pc, #176]	@ (80022dc <HAL_I2C_MspInit+0x134>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d14b      	bne.n	80022c6 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	4b28      	ldr	r3, [pc, #160]	@ (80022d4 <HAL_I2C_MspInit+0x12c>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a27      	ldr	r2, [pc, #156]	@ (80022d4 <HAL_I2C_MspInit+0x12c>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b25      	ldr	r3, [pc, #148]	@ (80022d4 <HAL_I2C_MspInit+0x12c>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	4b21      	ldr	r3, [pc, #132]	@ (80022d4 <HAL_I2C_MspInit+0x12c>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a20      	ldr	r2, [pc, #128]	@ (80022d4 <HAL_I2C_MspInit+0x12c>)
 8002254:	f043 0304 	orr.w	r3, r3, #4
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <HAL_I2C_MspInit+0x12c>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002266:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800226a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800226c:	2312      	movs	r3, #18
 800226e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002278:	2304      	movs	r3, #4
 800227a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227c:	f107 031c 	add.w	r3, r7, #28
 8002280:	4619      	mov	r1, r3
 8002282:	4815      	ldr	r0, [pc, #84]	@ (80022d8 <HAL_I2C_MspInit+0x130>)
 8002284:	f001 fdcc 	bl	8003e20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002288:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800228c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800228e:	2312      	movs	r3, #18
 8002290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002296:	2303      	movs	r3, #3
 8002298:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800229a:	2304      	movs	r3, #4
 800229c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800229e:	f107 031c 	add.w	r3, r7, #28
 80022a2:	4619      	mov	r1, r3
 80022a4:	480e      	ldr	r0, [pc, #56]	@ (80022e0 <HAL_I2C_MspInit+0x138>)
 80022a6:	f001 fdbb 	bl	8003e20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <HAL_I2C_MspInit+0x12c>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	4a08      	ldr	r2, [pc, #32]	@ (80022d4 <HAL_I2C_MspInit+0x12c>)
 80022b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ba:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <HAL_I2C_MspInit+0x12c>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
}
 80022c6:	bf00      	nop
 80022c8:	3730      	adds	r7, #48	@ 0x30
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40005400 	.word	0x40005400
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020400 	.word	0x40020400
 80022dc:	40005800 	.word	0x40005800
 80022e0:	40020800 	.word	0x40020800

080022e4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	@ 0x30
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a32      	ldr	r2, [pc, #200]	@ (80023cc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d12d      	bne.n	8002362 <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	4b31      	ldr	r3, [pc, #196]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xec>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	4a30      	ldr	r2, [pc, #192]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6453      	str	r3, [r2, #68]	@ 0x44
 8002316:	4b2e      	ldr	r3, [pc, #184]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	61bb      	str	r3, [r7, #24]
 8002320:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	4b2a      	ldr	r3, [pc, #168]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	4a29      	ldr	r2, [pc, #164]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xec>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6313      	str	r3, [r2, #48]	@ 0x30
 8002332:	4b27      	ldr	r3, [pc, #156]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 800233e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002350:	2301      	movs	r3, #1
 8002352:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	4619      	mov	r1, r3
 800235a:	481e      	ldr	r0, [pc, #120]	@ (80023d4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800235c:	f001 fd60 	bl	8003e20 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002360:	e030      	b.n	80023c4 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800236a:	d12b      	bne.n	80023c4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	4b17      	ldr	r3, [pc, #92]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	4a16      	ldr	r2, [pc, #88]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6413      	str	r3, [r2, #64]	@ 0x40
 800237c:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xec>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xec>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002390:	4a0f      	ldr	r2, [pc, #60]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6313      	str	r3, [r2, #48]	@ 0x30
 8002398:	4b0d      	ldr	r3, [pc, #52]	@ (80023d0 <HAL_TIM_Encoder_MspInit+0xec>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 80023a4:	2303      	movs	r3, #3
 80023a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b0:	2300      	movs	r3, #0
 80023b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023b4:	2301      	movs	r3, #1
 80023b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4619      	mov	r1, r3
 80023be:	4805      	ldr	r0, [pc, #20]	@ (80023d4 <HAL_TIM_Encoder_MspInit+0xf0>)
 80023c0:	f001 fd2e 	bl	8003e20 <HAL_GPIO_Init>
}
 80023c4:	bf00      	nop
 80023c6:	3730      	adds	r7, #48	@ 0x30
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40010000 	.word	0x40010000
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020000 	.word	0x40020000

080023d8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002414 <HAL_TIM_PWM_MspInit+0x3c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10d      	bne.n	8002406 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <HAL_TIM_PWM_MspInit+0x40>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	4a09      	ldr	r2, [pc, #36]	@ (8002418 <HAL_TIM_PWM_MspInit+0x40>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023fa:	4b07      	ldr	r3, [pc, #28]	@ (8002418 <HAL_TIM_PWM_MspInit+0x40>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40000400 	.word	0x40000400
 8002418:	40023800 	.word	0x40023800

0800241c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	@ 0x28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a21      	ldr	r2, [pc, #132]	@ (80024c0 <HAL_TIM_MspPostInit+0xa4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d13b      	bne.n	80024b6 <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	4b20      	ldr	r3, [pc, #128]	@ (80024c4 <HAL_TIM_MspPostInit+0xa8>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	4a1f      	ldr	r2, [pc, #124]	@ (80024c4 <HAL_TIM_MspPostInit+0xa8>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6313      	str	r3, [r2, #48]	@ 0x30
 800244e:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <HAL_TIM_MspPostInit+0xa8>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	4b19      	ldr	r3, [pc, #100]	@ (80024c4 <HAL_TIM_MspPostInit+0xa8>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	4a18      	ldr	r2, [pc, #96]	@ (80024c4 <HAL_TIM_MspPostInit+0xa8>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	6313      	str	r3, [r2, #48]	@ 0x30
 800246a:	4b16      	ldr	r3, [pc, #88]	@ (80024c4 <HAL_TIM_MspPostInit+0xa8>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002476:	23c0      	movs	r3, #192	@ 0xc0
 8002478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2300      	movs	r3, #0
 8002484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002486:	2302      	movs	r3, #2
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4619      	mov	r1, r3
 8002490:	480d      	ldr	r0, [pc, #52]	@ (80024c8 <HAL_TIM_MspPostInit+0xac>)
 8002492:	f001 fcc5 	bl	8003e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002496:	2303      	movs	r3, #3
 8002498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249a:	2302      	movs	r3, #2
 800249c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024a6:	2302      	movs	r3, #2
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	4619      	mov	r1, r3
 80024b0:	4806      	ldr	r0, [pc, #24]	@ (80024cc <HAL_TIM_MspPostInit+0xb0>)
 80024b2:	f001 fcb5 	bl	8003e20 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80024b6:	bf00      	nop
 80024b8:	3728      	adds	r7, #40	@ 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40000400 	.word	0x40000400
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40020000 	.word	0x40020000
 80024cc:	40020400 	.word	0x40020400

080024d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08e      	sub	sp, #56	@ 0x38
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a66      	ldr	r2, [pc, #408]	@ (8002688 <HAL_UART_MspInit+0x1b8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d12c      	bne.n	800254c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
 80024f6:	4b65      	ldr	r3, [pc, #404]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	4a64      	ldr	r2, [pc, #400]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 80024fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002500:	6413      	str	r3, [r2, #64]	@ 0x40
 8002502:	4b62      	ldr	r3, [pc, #392]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	623b      	str	r3, [r7, #32]
 800250c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	4b5e      	ldr	r3, [pc, #376]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	4a5d      	ldr	r2, [pc, #372]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6313      	str	r3, [r2, #48]	@ 0x30
 800251e:	4b5b      	ldr	r3, [pc, #364]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800252a:	230c      	movs	r3, #12
 800252c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002536:	2303      	movs	r3, #3
 8002538:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800253a:	2307      	movs	r3, #7
 800253c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002542:	4619      	mov	r1, r3
 8002544:	4852      	ldr	r0, [pc, #328]	@ (8002690 <HAL_UART_MspInit+0x1c0>)
 8002546:	f001 fc6b 	bl	8003e20 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800254a:	e099      	b.n	8002680 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a50      	ldr	r2, [pc, #320]	@ (8002694 <HAL_UART_MspInit+0x1c4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d12d      	bne.n	80025b2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	4b4c      	ldr	r3, [pc, #304]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	4a4b      	ldr	r2, [pc, #300]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 8002560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002564:	6413      	str	r3, [r2, #64]	@ 0x40
 8002566:	4b49      	ldr	r3, [pc, #292]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	4b45      	ldr	r3, [pc, #276]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	4a44      	ldr	r2, [pc, #272]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	6313      	str	r3, [r2, #48]	@ 0x30
 8002582:	4b42      	ldr	r3, [pc, #264]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800258e:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259c:	2303      	movs	r3, #3
 800259e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025a0:	2307      	movs	r3, #7
 80025a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025a8:	4619      	mov	r1, r3
 80025aa:	483b      	ldr	r0, [pc, #236]	@ (8002698 <HAL_UART_MspInit+0x1c8>)
 80025ac:	f001 fc38 	bl	8003e20 <HAL_GPIO_Init>
}
 80025b0:	e066      	b.n	8002680 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a39      	ldr	r2, [pc, #228]	@ (800269c <HAL_UART_MspInit+0x1cc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d161      	bne.n	8002680 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	4b32      	ldr	r3, [pc, #200]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 80025c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c4:	4a31      	ldr	r2, [pc, #196]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 80025c6:	f043 0320 	orr.w	r3, r3, #32
 80025ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80025cc:	4b2f      	ldr	r3, [pc, #188]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 80025ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	4b2b      	ldr	r3, [pc, #172]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e0:	4a2a      	ldr	r2, [pc, #168]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e8:	4b28      	ldr	r3, [pc, #160]	@ (800268c <HAL_UART_MspInit+0x1bc>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025f4:	23c0      	movs	r3, #192	@ 0xc0
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	2303      	movs	r3, #3
 8002602:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002604:	2308      	movs	r3, #8
 8002606:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800260c:	4619      	mov	r1, r3
 800260e:	4822      	ldr	r0, [pc, #136]	@ (8002698 <HAL_UART_MspInit+0x1c8>)
 8002610:	f001 fc06 	bl	8003e20 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002614:	4b22      	ldr	r3, [pc, #136]	@ (80026a0 <HAL_UART_MspInit+0x1d0>)
 8002616:	4a23      	ldr	r2, [pc, #140]	@ (80026a4 <HAL_UART_MspInit+0x1d4>)
 8002618:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800261a:	4b21      	ldr	r3, [pc, #132]	@ (80026a0 <HAL_UART_MspInit+0x1d0>)
 800261c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002620:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002622:	4b1f      	ldr	r3, [pc, #124]	@ (80026a0 <HAL_UART_MspInit+0x1d0>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002628:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <HAL_UART_MspInit+0x1d0>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800262e:	4b1c      	ldr	r3, [pc, #112]	@ (80026a0 <HAL_UART_MspInit+0x1d0>)
 8002630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002634:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002636:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <HAL_UART_MspInit+0x1d0>)
 8002638:	2200      	movs	r2, #0
 800263a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800263c:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <HAL_UART_MspInit+0x1d0>)
 800263e:	2200      	movs	r2, #0
 8002640:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002642:	4b17      	ldr	r3, [pc, #92]	@ (80026a0 <HAL_UART_MspInit+0x1d0>)
 8002644:	2200      	movs	r2, #0
 8002646:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002648:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <HAL_UART_MspInit+0x1d0>)
 800264a:	2200      	movs	r2, #0
 800264c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800264e:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <HAL_UART_MspInit+0x1d0>)
 8002650:	2200      	movs	r2, #0
 8002652:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002654:	4812      	ldr	r0, [pc, #72]	@ (80026a0 <HAL_UART_MspInit+0x1d0>)
 8002656:	f001 f867 	bl	8003728 <HAL_DMA_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_UART_MspInit+0x194>
      Error_Handler();
 8002660:	f7ff fa1a 	bl	8001a98 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a0e      	ldr	r2, [pc, #56]	@ (80026a0 <HAL_UART_MspInit+0x1d0>)
 8002668:	63da      	str	r2, [r3, #60]	@ 0x3c
 800266a:	4a0d      	ldr	r2, [pc, #52]	@ (80026a0 <HAL_UART_MspInit+0x1d0>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	2100      	movs	r1, #0
 8002674:	2047      	movs	r0, #71	@ 0x47
 8002676:	f001 f820 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800267a:	2047      	movs	r0, #71	@ 0x47
 800267c:	f001 f839 	bl	80036f2 <HAL_NVIC_EnableIRQ>
}
 8002680:	bf00      	nop
 8002682:	3738      	adds	r7, #56	@ 0x38
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40004400 	.word	0x40004400
 800268c:	40023800 	.word	0x40023800
 8002690:	40020000 	.word	0x40020000
 8002694:	40004800 	.word	0x40004800
 8002698:	40020800 	.word	0x40020800
 800269c:	40011400 	.word	0x40011400
 80026a0:	200004a8 	.word	0x200004a8
 80026a4:	40026428 	.word	0x40026428

080026a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <NMI_Handler+0x4>

080026b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b4:	bf00      	nop
 80026b6:	e7fd      	b.n	80026b4 <HardFault_Handler+0x4>

080026b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026bc:	bf00      	nop
 80026be:	e7fd      	b.n	80026bc <MemManage_Handler+0x4>

080026c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026c4:	bf00      	nop
 80026c6:	e7fd      	b.n	80026c4 <BusFault_Handler+0x4>

080026c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026cc:	bf00      	nop
 80026ce:	e7fd      	b.n	80026cc <UsageFault_Handler+0x4>

080026d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002700:	f000 fc4a 	bl	8002f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick_accumulator += 1;  // Increment by 1 ms
 8002704:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <SysTick_Handler+0x3c>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	3301      	adds	r3, #1
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4b0a      	ldr	r3, [pc, #40]	@ (8002738 <SysTick_Handler+0x3c>)
 8002710:	701a      	strb	r2, [r3, #0]
  if(systick_function_enabled){
 8002712:	4b0a      	ldr	r3, [pc, #40]	@ (800273c <SysTick_Handler+0x40>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d009      	beq.n	8002730 <SysTick_Handler+0x34>
	  if (tick_accumulator >= TICK_INTERVAL) {
 800271c:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <SysTick_Handler+0x3c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b13      	cmp	r3, #19
 8002724:	d904      	bls.n	8002730 <SysTick_Handler+0x34>
	        tick_accumulator = 0;  // Accumulate remainder
 8002726:	4b04      	ldr	r3, [pc, #16]	@ (8002738 <SysTick_Handler+0x3c>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
	        SysTickFunction();
 800272c:	f000 f8f4 	bl	8002918 <SysTickFunction>
	      }
  }

  CheckEncoderCounts();
 8002730:	f000 f904 	bl	800293c <CheckEncoderCounts>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}
 8002738:	2000074e 	.word	0x2000074e
 800273c:	20000508 	.word	0x20000508

08002740 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002744:	4802      	ldr	r0, [pc, #8]	@ (8002750 <DMA2_Stream1_IRQHandler+0x10>)
 8002746:	f001 f92f 	bl	80039a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200004a8 	.word	0x200004a8

08002754 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002758:	4802      	ldr	r0, [pc, #8]	@ (8002764 <USART6_IRQHandler+0x10>)
 800275a:	f004 fc75 	bl	8007048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000460 	.word	0x20000460

08002768 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return 1;
 800276c:	2301      	movs	r3, #1
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <_kill>:

int _kill(int pid, int sig)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002782:	f006 f925 	bl	80089d0 <__errno>
 8002786:	4603      	mov	r3, r0
 8002788:	2216      	movs	r2, #22
 800278a:	601a      	str	r2, [r3, #0]
  return -1;
 800278c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <_exit>:

void _exit (int status)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ffe7 	bl	8002778 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027aa:	bf00      	nop
 80027ac:	e7fd      	b.n	80027aa <_exit+0x12>

080027ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	e00a      	b.n	80027d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027c0:	f3af 8000 	nop.w
 80027c4:	4601      	mov	r1, r0
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	60ba      	str	r2, [r7, #8]
 80027cc:	b2ca      	uxtb	r2, r1
 80027ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3301      	adds	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	429a      	cmp	r2, r3
 80027dc:	dbf0      	blt.n	80027c0 <_read+0x12>
  }

  return len;
 80027de:	687b      	ldr	r3, [r7, #4]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	e009      	b.n	800280e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	60ba      	str	r2, [r7, #8]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	3301      	adds	r3, #1
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	429a      	cmp	r2, r3
 8002814:	dbf1      	blt.n	80027fa <_write+0x12>
  }
  return len;
 8002816:	687b      	ldr	r3, [r7, #4]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <_close>:

int _close(int file)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002828:	f04f 33ff 	mov.w	r3, #4294967295
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002848:	605a      	str	r2, [r3, #4]
  return 0;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <_isatty>:

int _isatty(int file)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002860:	2301      	movs	r3, #1
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800286e:	b480      	push	{r7}
 8002870:	b085      	sub	sp, #20
 8002872:	af00      	add	r7, sp, #0
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	60b9      	str	r1, [r7, #8]
 8002878:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002890:	4a14      	ldr	r2, [pc, #80]	@ (80028e4 <_sbrk+0x5c>)
 8002892:	4b15      	ldr	r3, [pc, #84]	@ (80028e8 <_sbrk+0x60>)
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800289c:	4b13      	ldr	r3, [pc, #76]	@ (80028ec <_sbrk+0x64>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a4:	4b11      	ldr	r3, [pc, #68]	@ (80028ec <_sbrk+0x64>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	@ (80028f0 <_sbrk+0x68>)
 80028a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <_sbrk+0x64>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d207      	bcs.n	80028c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b8:	f006 f88a 	bl	80089d0 <__errno>
 80028bc:	4603      	mov	r3, r0
 80028be:	220c      	movs	r2, #12
 80028c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
 80028c6:	e009      	b.n	80028dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c8:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <_sbrk+0x64>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ce:	4b07      	ldr	r3, [pc, #28]	@ (80028ec <_sbrk+0x64>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	4a05      	ldr	r2, [pc, #20]	@ (80028ec <_sbrk+0x64>)
 80028d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028da:	68fb      	ldr	r3, [r7, #12]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20020000 	.word	0x20020000
 80028e8:	00000400 	.word	0x00000400
 80028ec:	20000750 	.word	0x20000750
 80028f0:	20000cb0 	.word	0x20000cb0

080028f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f8:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <SystemInit+0x20>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	4a05      	ldr	r2, [pc, #20]	@ (8002914 <SystemInit+0x20>)
 8002900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002904:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <SysTickFunction>:
#include "uartcom.h"

extern volatile uint8_t systick_function_enabled;
extern UART_HandleTypeDef huart3;

void SysTickFunction(void) {
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */
	//--------------------------------------------------------------------
		update_Encoder_Data();
 800291c:	f7fe fc00 	bl	8001120 <update_Encoder_Data>
	//--------------------------------------------------------------------
		//UART_Transmit_EncoderData(&huart3);



}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}

08002924 <EnableSysTickFunction>:



void EnableSysTickFunction(void) {
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  //HAL_Delay(10);
  systick_function_enabled = 1;
 8002928:	4b03      	ldr	r3, [pc, #12]	@ (8002938 <EnableSysTickFunction+0x14>)
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10);
 800292e:	200a      	movs	r0, #10
 8002930:	f000 fb52 	bl	8002fd8 <HAL_Delay>
}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000508 	.word	0x20000508

0800293c <CheckEncoderCounts>:
	//HAL_Delay(10);
  systick_function_enabled = 0;
  HAL_Delay(10);
}

void CheckEncoderCounts(void){
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
		 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
		 *
		 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
		 * turning. But that'll be approximately never in Micromouse :)
		 */
		if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8002942:	f7fe fbc5 	bl	80010d0 <getRightEncoderCounts>
 8002946:	4603      	mov	r3, r0
 8002948:	461a      	mov	r2, r3
 800294a:	f647 1318 	movw	r3, #31000	@ 0x7918
 800294e:	429a      	cmp	r2, r3
 8002950:	dc15      	bgt.n	800297e <CheckEncoderCounts+0x42>
 8002952:	f7fe fbc9 	bl	80010e8 <getLeftEncoderCounts>
 8002956:	4603      	mov	r3, r0
 8002958:	461a      	mov	r2, r3
 800295a:	f647 1318 	movw	r3, #31000	@ 0x7918
 800295e:	429a      	cmp	r2, r3
 8002960:	dc0d      	bgt.n	800297e <CheckEncoderCounts+0x42>
				|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8002962:	f7fe fbb5 	bl	80010d0 <getRightEncoderCounts>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	4b0f      	ldr	r3, [pc, #60]	@ (80029a8 <CheckEncoderCounts+0x6c>)
 800296c:	429a      	cmp	r2, r3
 800296e:	db06      	blt.n	800297e <CheckEncoderCounts+0x42>
 8002970:	f7fe fbba 	bl	80010e8 <getLeftEncoderCounts>
 8002974:	4603      	mov	r3, r0
 8002976:	461a      	mov	r2, r3
 8002978:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <CheckEncoderCounts+0x6c>)
 800297a:	429a      	cmp	r2, r3
 800297c:	da10      	bge.n	80029a0 <CheckEncoderCounts+0x64>
			int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 800297e:	f7fe fba7 	bl	80010d0 <getRightEncoderCounts>
 8002982:	4603      	mov	r3, r0
 8002984:	b29c      	uxth	r4, r3
 8002986:	f7fe fbaf 	bl	80010e8 <getLeftEncoderCounts>
 800298a:	4603      	mov	r3, r0
 800298c:	b29b      	uxth	r3, r3
 800298e:	1ae3      	subs	r3, r4, r3
 8002990:	b29b      	uxth	r3, r3
 8002992:	80fb      	strh	r3, [r7, #6]
			resetEncodersinSystick();
 8002994:	f7fe fbb4 	bl	8001100 <resetEncodersinSystick>
			TIM1->CNT = (int16_t) difference;
 8002998:	4a04      	ldr	r2, [pc, #16]	@ (80029ac <CheckEncoderCounts+0x70>)
 800299a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800299e:	6253      	str	r3, [r2, #36]	@ 0x24
		}
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd90      	pop	{r4, r7, pc}
 80029a8:	ffff86e8 	.word	0xffff86e8
 80029ac:	40010000 	.word	0x40010000

080029b0 <UART_Init>:
#include "string.h"
#include "encoders.h"

// UART Initialization function
void UART_Init(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
    // You can customize this function depending on your UART configuration
    // Initialize UART with the desired configuration (baud rate, parity, stop bits, etc.)
    HAL_UART_Init(huart);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f004 faf5 	bl	8006fa8 <HAL_UART_Init>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80029cc:	f7ff ff92 	bl	80028f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029d0:	480c      	ldr	r0, [pc, #48]	@ (8002a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029d2:	490d      	ldr	r1, [pc, #52]	@ (8002a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029d4:	4a0d      	ldr	r2, [pc, #52]	@ (8002a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029d8:	e002      	b.n	80029e0 <LoopCopyDataInit>

080029da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029de:	3304      	adds	r3, #4

080029e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e4:	d3f9      	bcc.n	80029da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029ec:	e001      	b.n	80029f2 <LoopFillZerobss>

080029ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f0:	3204      	adds	r2, #4

080029f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f4:	d3fb      	bcc.n	80029ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80029f6:	f005 fff1 	bl	80089dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029fa:	f7fe fc27 	bl	800124c <main>
  bx  lr    
 80029fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a08:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002a0c:	0800b2a4 	.word	0x0800b2a4
  ldr r2, =_sbss
 8002a10:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002a14:	20000cac 	.word	0x20000cac

08002a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a18:	e7fe      	b.n	8002a18 <ADC_IRQHandler>
	...

08002a1c <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002a22:	f000 f9cd 	bl	8002dc0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002a26:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	2178      	movs	r1, #120	@ 0x78
 8002a2e:	485b      	ldr	r0, [pc, #364]	@ (8002b9c <SSD1306_Init+0x180>)
 8002a30:	f002 f912 	bl	8004c58 <HAL_I2C_IsDeviceReady>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e0a9      	b.n	8002b92 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002a3e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002a42:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002a44:	e002      	b.n	8002a4c <SSD1306_Init+0x30>
		p--;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f9      	bne.n	8002a46 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002a52:	22ae      	movs	r2, #174	@ 0xae
 8002a54:	2100      	movs	r1, #0
 8002a56:	2078      	movs	r0, #120	@ 0x78
 8002a58:	f000 fa2e 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	2100      	movs	r1, #0
 8002a60:	2078      	movs	r0, #120	@ 0x78
 8002a62:	f000 fa29 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002a66:	2210      	movs	r2, #16
 8002a68:	2100      	movs	r1, #0
 8002a6a:	2078      	movs	r0, #120	@ 0x78
 8002a6c:	f000 fa24 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002a70:	22b0      	movs	r2, #176	@ 0xb0
 8002a72:	2100      	movs	r1, #0
 8002a74:	2078      	movs	r0, #120	@ 0x78
 8002a76:	f000 fa1f 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002a7a:	22c8      	movs	r2, #200	@ 0xc8
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	2078      	movs	r0, #120	@ 0x78
 8002a80:	f000 fa1a 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002a84:	2200      	movs	r2, #0
 8002a86:	2100      	movs	r1, #0
 8002a88:	2078      	movs	r0, #120	@ 0x78
 8002a8a:	f000 fa15 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002a8e:	2210      	movs	r2, #16
 8002a90:	2100      	movs	r1, #0
 8002a92:	2078      	movs	r0, #120	@ 0x78
 8002a94:	f000 fa10 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002a98:	2240      	movs	r2, #64	@ 0x40
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	2078      	movs	r0, #120	@ 0x78
 8002a9e:	f000 fa0b 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002aa2:	2281      	movs	r2, #129	@ 0x81
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	2078      	movs	r0, #120	@ 0x78
 8002aa8:	f000 fa06 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002aac:	22ff      	movs	r2, #255	@ 0xff
 8002aae:	2100      	movs	r1, #0
 8002ab0:	2078      	movs	r0, #120	@ 0x78
 8002ab2:	f000 fa01 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002ab6:	22a1      	movs	r2, #161	@ 0xa1
 8002ab8:	2100      	movs	r1, #0
 8002aba:	2078      	movs	r0, #120	@ 0x78
 8002abc:	f000 f9fc 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002ac0:	22a6      	movs	r2, #166	@ 0xa6
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	2078      	movs	r0, #120	@ 0x78
 8002ac6:	f000 f9f7 	bl	8002eb8 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002aca:	22a8      	movs	r2, #168	@ 0xa8
 8002acc:	2100      	movs	r1, #0
 8002ace:	2078      	movs	r0, #120	@ 0x78
 8002ad0:	f000 f9f2 	bl	8002eb8 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8002ad4:	223f      	movs	r2, #63	@ 0x3f
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	2078      	movs	r0, #120	@ 0x78
 8002ada:	f000 f9ed 	bl	8002eb8 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002ade:	22a4      	movs	r2, #164	@ 0xa4
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	2078      	movs	r0, #120	@ 0x78
 8002ae4:	f000 f9e8 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002ae8:	22d3      	movs	r2, #211	@ 0xd3
 8002aea:	2100      	movs	r1, #0
 8002aec:	2078      	movs	r0, #120	@ 0x78
 8002aee:	f000 f9e3 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002af2:	2200      	movs	r2, #0
 8002af4:	2100      	movs	r1, #0
 8002af6:	2078      	movs	r0, #120	@ 0x78
 8002af8:	f000 f9de 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002afc:	22d5      	movs	r2, #213	@ 0xd5
 8002afe:	2100      	movs	r1, #0
 8002b00:	2078      	movs	r0, #120	@ 0x78
 8002b02:	f000 f9d9 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002b06:	22f0      	movs	r2, #240	@ 0xf0
 8002b08:	2100      	movs	r1, #0
 8002b0a:	2078      	movs	r0, #120	@ 0x78
 8002b0c:	f000 f9d4 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002b10:	22d9      	movs	r2, #217	@ 0xd9
 8002b12:	2100      	movs	r1, #0
 8002b14:	2078      	movs	r0, #120	@ 0x78
 8002b16:	f000 f9cf 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002b1a:	2222      	movs	r2, #34	@ 0x22
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	2078      	movs	r0, #120	@ 0x78
 8002b20:	f000 f9ca 	bl	8002eb8 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002b24:	22da      	movs	r2, #218	@ 0xda
 8002b26:	2100      	movs	r1, #0
 8002b28:	2078      	movs	r0, #120	@ 0x78
 8002b2a:	f000 f9c5 	bl	8002eb8 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8002b2e:	2212      	movs	r2, #18
 8002b30:	2100      	movs	r1, #0
 8002b32:	2078      	movs	r0, #120	@ 0x78
 8002b34:	f000 f9c0 	bl	8002eb8 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002b38:	22db      	movs	r2, #219	@ 0xdb
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	2078      	movs	r0, #120	@ 0x78
 8002b3e:	f000 f9bb 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002b42:	2220      	movs	r2, #32
 8002b44:	2100      	movs	r1, #0
 8002b46:	2078      	movs	r0, #120	@ 0x78
 8002b48:	f000 f9b6 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002b4c:	228d      	movs	r2, #141	@ 0x8d
 8002b4e:	2100      	movs	r1, #0
 8002b50:	2078      	movs	r0, #120	@ 0x78
 8002b52:	f000 f9b1 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002b56:	2214      	movs	r2, #20
 8002b58:	2100      	movs	r1, #0
 8002b5a:	2078      	movs	r0, #120	@ 0x78
 8002b5c:	f000 f9ac 	bl	8002eb8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002b60:	22af      	movs	r2, #175	@ 0xaf
 8002b62:	2100      	movs	r1, #0
 8002b64:	2078      	movs	r0, #120	@ 0x78
 8002b66:	f000 f9a7 	bl	8002eb8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002b6a:	222e      	movs	r2, #46	@ 0x2e
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	2078      	movs	r0, #120	@ 0x78
 8002b70:	f000 f9a2 	bl	8002eb8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002b74:	2000      	movs	r0, #0
 8002b76:	f000 f843 	bl	8002c00 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8002b7a:	f000 f813 	bl	8002ba4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002b7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ba0 <SSD1306_Init+0x184>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <SSD1306_Init+0x184>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002b8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <SSD1306_Init+0x184>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8002b90:	2301      	movs	r3, #1
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000250 	.word	0x20000250
 8002ba0:	20000b54 	.word	0x20000b54

08002ba4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8002baa:	2300      	movs	r3, #0
 8002bac:	71fb      	strb	r3, [r7, #7]
 8002bae:	e01d      	b.n	8002bec <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	3b50      	subs	r3, #80	@ 0x50
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2100      	movs	r1, #0
 8002bba:	2078      	movs	r0, #120	@ 0x78
 8002bbc:	f000 f97c 	bl	8002eb8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	2078      	movs	r0, #120	@ 0x78
 8002bc6:	f000 f977 	bl	8002eb8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002bca:	2210      	movs	r2, #16
 8002bcc:	2100      	movs	r1, #0
 8002bce:	2078      	movs	r0, #120	@ 0x78
 8002bd0:	f000 f972 	bl	8002eb8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	01db      	lsls	r3, r3, #7
 8002bd8:	4a08      	ldr	r2, [pc, #32]	@ (8002bfc <SSD1306_UpdateScreen+0x58>)
 8002bda:	441a      	add	r2, r3
 8002bdc:	2380      	movs	r3, #128	@ 0x80
 8002bde:	2140      	movs	r1, #64	@ 0x40
 8002be0:	2078      	movs	r0, #120	@ 0x78
 8002be2:	f000 f903 	bl	8002dec <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	3301      	adds	r3, #1
 8002bea:	71fb      	strb	r3, [r7, #7]
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	2b07      	cmp	r3, #7
 8002bf0:	d9de      	bls.n	8002bb0 <SSD1306_UpdateScreen+0xc>
	}
}
 8002bf2:	bf00      	nop
 8002bf4:	bf00      	nop
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000754 	.word	0x20000754

08002c00 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <SSD1306_Fill+0x14>
 8002c10:	2300      	movs	r3, #0
 8002c12:	e000      	b.n	8002c16 <SSD1306_Fill+0x16>
 8002c14:	23ff      	movs	r3, #255	@ 0xff
 8002c16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4803      	ldr	r0, [pc, #12]	@ (8002c2c <SSD1306_Fill+0x2c>)
 8002c1e:	f005 fe72 	bl	8008906 <memset>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000754 	.word	0x20000754

08002c30 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	80fb      	strh	r3, [r7, #6]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	80bb      	strh	r3, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	70fb      	strb	r3, [r7, #3]
	if (
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c46:	d848      	bhi.n	8002cda <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002c48:	88bb      	ldrh	r3, [r7, #4]
 8002c4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c4c:	d845      	bhi.n	8002cda <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002c4e:	4b26      	ldr	r3, [pc, #152]	@ (8002ce8 <SSD1306_DrawPixel+0xb8>)
 8002c50:	791b      	ldrb	r3, [r3, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d006      	beq.n	8002c64 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002c56:	78fb      	ldrb	r3, [r7, #3]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf0c      	ite	eq
 8002c5c:	2301      	moveq	r3, #1
 8002c5e:	2300      	movne	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d11a      	bne.n	8002ca0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002c6a:	88fa      	ldrh	r2, [r7, #6]
 8002c6c:	88bb      	ldrh	r3, [r7, #4]
 8002c6e:	08db      	lsrs	r3, r3, #3
 8002c70:	b298      	uxth	r0, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	01db      	lsls	r3, r3, #7
 8002c76:	4413      	add	r3, r2
 8002c78:	4a1c      	ldr	r2, [pc, #112]	@ (8002cec <SSD1306_DrawPixel+0xbc>)
 8002c7a:	5cd3      	ldrb	r3, [r2, r3]
 8002c7c:	b25a      	sxtb	r2, r3
 8002c7e:	88bb      	ldrh	r3, [r7, #4]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	2101      	movs	r1, #1
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	b25b      	sxtb	r3, r3
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	b259      	sxtb	r1, r3
 8002c90:	88fa      	ldrh	r2, [r7, #6]
 8002c92:	4603      	mov	r3, r0
 8002c94:	01db      	lsls	r3, r3, #7
 8002c96:	4413      	add	r3, r2
 8002c98:	b2c9      	uxtb	r1, r1
 8002c9a:	4a14      	ldr	r2, [pc, #80]	@ (8002cec <SSD1306_DrawPixel+0xbc>)
 8002c9c:	54d1      	strb	r1, [r2, r3]
 8002c9e:	e01d      	b.n	8002cdc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002ca0:	88fa      	ldrh	r2, [r7, #6]
 8002ca2:	88bb      	ldrh	r3, [r7, #4]
 8002ca4:	08db      	lsrs	r3, r3, #3
 8002ca6:	b298      	uxth	r0, r3
 8002ca8:	4603      	mov	r3, r0
 8002caa:	01db      	lsls	r3, r3, #7
 8002cac:	4413      	add	r3, r2
 8002cae:	4a0f      	ldr	r2, [pc, #60]	@ (8002cec <SSD1306_DrawPixel+0xbc>)
 8002cb0:	5cd3      	ldrb	r3, [r2, r3]
 8002cb2:	b25a      	sxtb	r2, r3
 8002cb4:	88bb      	ldrh	r3, [r7, #4]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	2101      	movs	r1, #1
 8002cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc0:	b25b      	sxtb	r3, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	b25b      	sxtb	r3, r3
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	b259      	sxtb	r1, r3
 8002cca:	88fa      	ldrh	r2, [r7, #6]
 8002ccc:	4603      	mov	r3, r0
 8002cce:	01db      	lsls	r3, r3, #7
 8002cd0:	4413      	add	r3, r2
 8002cd2:	b2c9      	uxtb	r1, r1
 8002cd4:	4a05      	ldr	r2, [pc, #20]	@ (8002cec <SSD1306_DrawPixel+0xbc>)
 8002cd6:	54d1      	strb	r1, [r2, r3]
 8002cd8:	e000      	b.n	8002cdc <SSD1306_DrawPixel+0xac>
		return;
 8002cda:	bf00      	nop
	}
}
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000b54 	.word	0x20000b54
 8002cec:	20000754 	.word	0x20000754

08002cf0 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60ba      	str	r2, [r7, #8]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	81fb      	strh	r3, [r7, #14]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	81bb      	strh	r3, [r7, #12]
 8002d02:	4613      	mov	r3, r2
 8002d04:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d0a:	3307      	adds	r3, #7
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	da00      	bge.n	8002d12 <SSD1306_DrawBitmap+0x22>
 8002d10:	3307      	adds	r3, #7
 8002d12:	10db      	asrs	r3, r3, #3
 8002d14:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	82bb      	strh	r3, [r7, #20]
 8002d1e:	e044      	b.n	8002daa <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8002d20:	2300      	movs	r3, #0
 8002d22:	827b      	strh	r3, [r7, #18]
 8002d24:	e02f      	b.n	8002d86 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8002d26:	8a7b      	ldrh	r3, [r7, #18]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8002d30:	7dfb      	ldrb	r3, [r7, #23]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	75fb      	strb	r3, [r7, #23]
 8002d36:	e012      	b.n	8002d5e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002d38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d3c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002d40:	fb03 f202 	mul.w	r2, r3, r2
 8002d44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	da00      	bge.n	8002d4e <SSD1306_DrawBitmap+0x5e>
 8002d4c:	3307      	adds	r3, #7
 8002d4e:	10db      	asrs	r3, r3, #3
 8002d50:	b21b      	sxth	r3, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	4413      	add	r3, r2
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	da09      	bge.n	8002d7a <SSD1306_DrawBitmap+0x8a>
 8002d66:	89fa      	ldrh	r2, [r7, #14]
 8002d68:	8a7b      	ldrh	r3, [r7, #18]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	89b9      	ldrh	r1, [r7, #12]
 8002d70:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff5b 	bl	8002c30 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002d7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3301      	adds	r3, #1
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	827b      	strh	r3, [r7, #18]
 8002d86:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002d8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	dbc9      	blt.n	8002d26 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002d92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3301      	adds	r3, #1
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	82bb      	strh	r3, [r7, #20]
 8002d9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3301      	adds	r3, #1
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	81bb      	strh	r3, [r7, #12]
 8002daa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002dae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	dbb4      	blt.n	8002d20 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002db6:	bf00      	nop
 8002db8:	bf00      	nop
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002dc6:	4b08      	ldr	r3, [pc, #32]	@ (8002de8 <ssd1306_I2C_Init+0x28>)
 8002dc8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002dca:	e002      	b.n	8002dd2 <ssd1306_I2C_Init+0x12>
		p--;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f9      	bne.n	8002dcc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	0003d090 	.word	0x0003d090

08002dec <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b0c7      	sub	sp, #284	@ 0x11c
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	4604      	mov	r4, r0
 8002df4:	4608      	mov	r0, r1
 8002df6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002dfa:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002dfe:	600a      	str	r2, [r1, #0]
 8002e00:	4619      	mov	r1, r3
 8002e02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e06:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002e0a:	4622      	mov	r2, r4
 8002e0c:	701a      	strb	r2, [r3, #0]
 8002e0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e12:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002e16:	4602      	mov	r2, r0
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002e22:	460a      	mov	r2, r1
 8002e24:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002e26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e2e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002e32:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002e36:	7812      	ldrb	r2, [r2, #0]
 8002e38:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002e40:	e015      	b.n	8002e6e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002e42:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002e46:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002e4a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	441a      	add	r2, r3
 8002e52:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002e56:	3301      	adds	r3, #1
 8002e58:	7811      	ldrb	r1, [r2, #0]
 8002e5a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002e5e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002e62:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002e64:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002e68:	3301      	adds	r3, #1
 8002e6a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002e6e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002e78:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002e7c:	8812      	ldrh	r2, [r2, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d8df      	bhi.n	8002e42 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8002e82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e86:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	b299      	uxth	r1, r3
 8002e8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002e92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f107 020c 	add.w	r2, r7, #12
 8002ea0:	200a      	movs	r0, #10
 8002ea2:	9000      	str	r0, [sp, #0]
 8002ea4:	4803      	ldr	r0, [pc, #12]	@ (8002eb4 <ssd1306_I2C_WriteMulti+0xc8>)
 8002ea6:	f001 faad 	bl	8004404 <HAL_I2C_Master_Transmit>
}
 8002eaa:	bf00      	nop
 8002eac:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd90      	pop	{r4, r7, pc}
 8002eb4:	20000250 	.word	0x20000250

08002eb8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	71bb      	strb	r3, [r7, #6]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002eca:	79bb      	ldrb	r3, [r7, #6]
 8002ecc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002ece:	797b      	ldrb	r3, [r7, #5]
 8002ed0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	b299      	uxth	r1, r3
 8002ed6:	f107 020c 	add.w	r2, r7, #12
 8002eda:	230a      	movs	r3, #10
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	2302      	movs	r3, #2
 8002ee0:	4803      	ldr	r0, [pc, #12]	@ (8002ef0 <ssd1306_I2C_Write+0x38>)
 8002ee2:	f001 fa8f 	bl	8004404 <HAL_I2C_Master_Transmit>
}
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000250 	.word	0x20000250

08002ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f34 <HAL_Init+0x40>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f34 <HAL_Init+0x40>)
 8002efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f04:	4b0b      	ldr	r3, [pc, #44]	@ (8002f34 <HAL_Init+0x40>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0a      	ldr	r2, [pc, #40]	@ (8002f34 <HAL_Init+0x40>)
 8002f0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f10:	4b08      	ldr	r3, [pc, #32]	@ (8002f34 <HAL_Init+0x40>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a07      	ldr	r2, [pc, #28]	@ (8002f34 <HAL_Init+0x40>)
 8002f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1c:	2003      	movs	r0, #3
 8002f1e:	f000 fbc1 	bl	80036a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f000 f808 	bl	8002f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f28:	f7ff f8d2 	bl	80020d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40023c00 	.word	0x40023c00

08002f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f40:	4b12      	ldr	r3, [pc, #72]	@ (8002f8c <HAL_InitTick+0x54>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b12      	ldr	r3, [pc, #72]	@ (8002f90 <HAL_InitTick+0x58>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fbd9 	bl	800370e <HAL_SYSTICK_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00e      	b.n	8002f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b0f      	cmp	r3, #15
 8002f6a:	d80a      	bhi.n	8002f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f000 fba1 	bl	80036ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f78:	4a06      	ldr	r2, [pc, #24]	@ (8002f94 <HAL_InitTick+0x5c>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	20000008 	.word	0x20000008
 8002f94:	20000004 	.word	0x20000004

08002f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <HAL_IncTick+0x20>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_IncTick+0x24>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a04      	ldr	r2, [pc, #16]	@ (8002fbc <HAL_IncTick+0x24>)
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000008 	.word	0x20000008
 8002fbc:	20000b5c 	.word	0x20000b5c

08002fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	@ (8002fd4 <HAL_GetTick+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000b5c 	.word	0x20000b5c

08002fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff ffee 	bl	8002fc0 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d005      	beq.n	8002ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800301c <HAL_Delay+0x44>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ffe:	bf00      	nop
 8003000:	f7ff ffde 	bl	8002fc0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	429a      	cmp	r2, r3
 800300e:	d8f7      	bhi.n	8003000 <HAL_Delay+0x28>
  {
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000008 	.word	0x20000008

08003020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e033      	b.n	800309e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff f86e 	bl	8002120 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b00      	cmp	r3, #0
 800305c:	d118      	bne.n	8003090 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003066:	f023 0302 	bic.w	r3, r3, #2
 800306a:	f043 0202 	orr.w	r2, r3, #2
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f94a 	bl	800330c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	f023 0303 	bic.w	r3, r3, #3
 8003086:	f043 0201 	orr.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	641a      	str	r2, [r3, #64]	@ 0x40
 800308e:	e001      	b.n	8003094 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800309c:	7bfb      	ldrb	r3, [r7, #15]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x1c>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e113      	b.n	80032ec <HAL_ADC_ConfigChannel+0x244>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b09      	cmp	r3, #9
 80030d2:	d925      	bls.n	8003120 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68d9      	ldr	r1, [r3, #12]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	3b1e      	subs	r3, #30
 80030ea:	2207      	movs	r2, #7
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43da      	mvns	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	400a      	ands	r2, r1
 80030f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68d9      	ldr	r1, [r3, #12]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	4618      	mov	r0, r3
 800310c:	4603      	mov	r3, r0
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4403      	add	r3, r0
 8003112:	3b1e      	subs	r3, #30
 8003114:	409a      	lsls	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	e022      	b.n	8003166 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6919      	ldr	r1, [r3, #16]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	2207      	movs	r2, #7
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43da      	mvns	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	400a      	ands	r2, r1
 8003142:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6919      	ldr	r1, [r3, #16]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	4618      	mov	r0, r3
 8003156:	4603      	mov	r3, r0
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4403      	add	r3, r0
 800315c:	409a      	lsls	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b06      	cmp	r3, #6
 800316c:	d824      	bhi.n	80031b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	3b05      	subs	r3, #5
 8003180:	221f      	movs	r2, #31
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43da      	mvns	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	400a      	ands	r2, r1
 800318e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	b29b      	uxth	r3, r3
 800319c:	4618      	mov	r0, r3
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	3b05      	subs	r3, #5
 80031aa:	fa00 f203 	lsl.w	r2, r0, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80031b6:	e04c      	b.n	8003252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	d824      	bhi.n	800320a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	3b23      	subs	r3, #35	@ 0x23
 80031d2:	221f      	movs	r2, #31
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43da      	mvns	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	400a      	ands	r2, r1
 80031e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	4618      	mov	r0, r3
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	3b23      	subs	r3, #35	@ 0x23
 80031fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
 8003208:	e023      	b.n	8003252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	3b41      	subs	r3, #65	@ 0x41
 800321c:	221f      	movs	r2, #31
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	400a      	ands	r2, r1
 800322a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	4618      	mov	r0, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	3b41      	subs	r3, #65	@ 0x41
 8003246:	fa00 f203 	lsl.w	r2, r0, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003252:	4b29      	ldr	r3, [pc, #164]	@ (80032f8 <HAL_ADC_ConfigChannel+0x250>)
 8003254:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a28      	ldr	r2, [pc, #160]	@ (80032fc <HAL_ADC_ConfigChannel+0x254>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d10f      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x1d8>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b12      	cmp	r3, #18
 8003266:	d10b      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1d      	ldr	r2, [pc, #116]	@ (80032fc <HAL_ADC_ConfigChannel+0x254>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d12b      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x23a>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1c      	ldr	r2, [pc, #112]	@ (8003300 <HAL_ADC_ConfigChannel+0x258>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <HAL_ADC_ConfigChannel+0x1f4>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b11      	cmp	r3, #17
 800329a:	d122      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a11      	ldr	r2, [pc, #68]	@ (8003300 <HAL_ADC_ConfigChannel+0x258>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d111      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032be:	4b11      	ldr	r3, [pc, #68]	@ (8003304 <HAL_ADC_ConfigChannel+0x25c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a11      	ldr	r2, [pc, #68]	@ (8003308 <HAL_ADC_ConfigChannel+0x260>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	0c9a      	lsrs	r2, r3, #18
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80032d4:	e002      	b.n	80032dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	3b01      	subs	r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f9      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40012300 	.word	0x40012300
 80032fc:	40012000 	.word	0x40012000
 8003300:	10000012 	.word	0x10000012
 8003304:	20000000 	.word	0x20000000
 8003308:	431bde83 	.word	0x431bde83

0800330c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003314:	4b79      	ldr	r3, [pc, #484]	@ (80034fc <ADC_Init+0x1f0>)
 8003316:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	431a      	orrs	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6859      	ldr	r1, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	021a      	lsls	r2, r3, #8
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6859      	ldr	r1, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6899      	ldr	r1, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339e:	4a58      	ldr	r2, [pc, #352]	@ (8003500 <ADC_Init+0x1f4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d022      	beq.n	80033ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6899      	ldr	r1, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80033d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6899      	ldr	r1, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	e00f      	b.n	800340a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003408:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 0202 	bic.w	r2, r2, #2
 8003418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6899      	ldr	r1, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	7e1b      	ldrb	r3, [r3, #24]
 8003424:	005a      	lsls	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01b      	beq.n	8003470 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003446:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003456:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6859      	ldr	r1, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	3b01      	subs	r3, #1
 8003464:	035a      	lsls	r2, r3, #13
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	e007      	b.n	8003480 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800347e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800348e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	3b01      	subs	r3, #1
 800349c:	051a      	lsls	r2, r3, #20
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80034b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6899      	ldr	r1, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80034c2:	025a      	lsls	r2, r3, #9
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6899      	ldr	r1, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	029a      	lsls	r2, r3, #10
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	609a      	str	r2, [r3, #8]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	40012300 	.word	0x40012300
 8003500:	0f000001 	.word	0x0f000001

08003504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003514:	4b0c      	ldr	r3, [pc, #48]	@ (8003548 <__NVIC_SetPriorityGrouping+0x44>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003520:	4013      	ands	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800352c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003536:	4a04      	ldr	r2, [pc, #16]	@ (8003548 <__NVIC_SetPriorityGrouping+0x44>)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	60d3      	str	r3, [r2, #12]
}
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003550:	4b04      	ldr	r3, [pc, #16]	@ (8003564 <__NVIC_GetPriorityGrouping+0x18>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	0a1b      	lsrs	r3, r3, #8
 8003556:	f003 0307 	and.w	r3, r3, #7
}
 800355a:	4618      	mov	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	2b00      	cmp	r3, #0
 8003578:	db0b      	blt.n	8003592 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	f003 021f 	and.w	r2, r3, #31
 8003580:	4907      	ldr	r1, [pc, #28]	@ (80035a0 <__NVIC_EnableIRQ+0x38>)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2001      	movs	r0, #1
 800358a:	fa00 f202 	lsl.w	r2, r0, r2
 800358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000e100 	.word	0xe000e100

080035a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	db0a      	blt.n	80035ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	490c      	ldr	r1, [pc, #48]	@ (80035f0 <__NVIC_SetPriority+0x4c>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	0112      	lsls	r2, r2, #4
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	440b      	add	r3, r1
 80035c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035cc:	e00a      	b.n	80035e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4908      	ldr	r1, [pc, #32]	@ (80035f4 <__NVIC_SetPriority+0x50>)
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	3b04      	subs	r3, #4
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	440b      	add	r3, r1
 80035e2:	761a      	strb	r2, [r3, #24]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000e100 	.word	0xe000e100
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b089      	sub	sp, #36	@ 0x24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f1c3 0307 	rsb	r3, r3, #7
 8003612:	2b04      	cmp	r3, #4
 8003614:	bf28      	it	cs
 8003616:	2304      	movcs	r3, #4
 8003618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3304      	adds	r3, #4
 800361e:	2b06      	cmp	r3, #6
 8003620:	d902      	bls.n	8003628 <NVIC_EncodePriority+0x30>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3b03      	subs	r3, #3
 8003626:	e000      	b.n	800362a <NVIC_EncodePriority+0x32>
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	f04f 32ff 	mov.w	r2, #4294967295
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	401a      	ands	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003640:	f04f 31ff 	mov.w	r1, #4294967295
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	43d9      	mvns	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	4313      	orrs	r3, r2
         );
}
 8003652:	4618      	mov	r0, r3
 8003654:	3724      	adds	r7, #36	@ 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003670:	d301      	bcc.n	8003676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003672:	2301      	movs	r3, #1
 8003674:	e00f      	b.n	8003696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003676:	4a0a      	ldr	r2, [pc, #40]	@ (80036a0 <SysTick_Config+0x40>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800367e:	210f      	movs	r1, #15
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	f7ff ff8e 	bl	80035a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <SysTick_Config+0x40>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800368e:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <SysTick_Config+0x40>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	e000e010 	.word	0xe000e010

080036a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff29 	bl	8003504 <__NVIC_SetPriorityGrouping>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036cc:	f7ff ff3e 	bl	800354c <__NVIC_GetPriorityGrouping>
 80036d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	6978      	ldr	r0, [r7, #20]
 80036d8:	f7ff ff8e 	bl	80035f8 <NVIC_EncodePriority>
 80036dc:	4602      	mov	r2, r0
 80036de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff5d 	bl	80035a4 <__NVIC_SetPriority>
}
 80036ea:	bf00      	nop
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	4603      	mov	r3, r0
 80036fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff31 	bl	8003568 <__NVIC_EnableIRQ>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ffa2 	bl	8003660 <SysTick_Config>
 800371c:	4603      	mov	r3, r0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003734:	f7ff fc44 	bl	8002fc0 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e099      	b.n	8003878 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0201 	bic.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003764:	e00f      	b.n	8003786 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003766:	f7ff fc2b 	bl	8002fc0 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b05      	cmp	r3, #5
 8003772:	d908      	bls.n	8003786 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2203      	movs	r2, #3
 800377e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e078      	b.n	8003878 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e8      	bne.n	8003766 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4b38      	ldr	r3, [pc, #224]	@ (8003880 <HAL_DMA_Init+0x158>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d107      	bne.n	80037f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e8:	4313      	orrs	r3, r2
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f023 0307 	bic.w	r3, r3, #7
 8003806:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003816:	2b04      	cmp	r3, #4
 8003818:	d117      	bne.n	800384a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00e      	beq.n	800384a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fa7b 	bl	8003d28 <DMA_CheckFifoParam>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2240      	movs	r2, #64	@ 0x40
 800383c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003846:	2301      	movs	r3, #1
 8003848:	e016      	b.n	8003878 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa32 	bl	8003cbc <DMA_CalcBaseAndBitshift>
 8003858:	4603      	mov	r3, r0
 800385a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003860:	223f      	movs	r2, #63	@ 0x3f
 8003862:	409a      	lsls	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	f010803f 	.word	0xf010803f

08003884 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003890:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003892:	f7ff fb95 	bl	8002fc0 <HAL_GetTick>
 8003896:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d008      	beq.n	80038b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2280      	movs	r2, #128	@ 0x80
 80038a8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e052      	b.n	800395c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0216 	bic.w	r2, r2, #22
 80038c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d103      	bne.n	80038e6 <HAL_DMA_Abort+0x62>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0208 	bic.w	r2, r2, #8
 80038f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003906:	e013      	b.n	8003930 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003908:	f7ff fb5a 	bl	8002fc0 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b05      	cmp	r3, #5
 8003914:	d90c      	bls.n	8003930 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2203      	movs	r2, #3
 8003920:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e015      	b.n	800395c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e4      	bne.n	8003908 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003942:	223f      	movs	r2, #63	@ 0x3f
 8003944:	409a      	lsls	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d004      	beq.n	8003982 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2280      	movs	r2, #128	@ 0x80
 800397c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e00c      	b.n	800399c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2205      	movs	r2, #5
 8003986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0201 	bic.w	r2, r2, #1
 8003998:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039b4:	4b8e      	ldr	r3, [pc, #568]	@ (8003bf0 <HAL_DMA_IRQHandler+0x248>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a8e      	ldr	r2, [pc, #568]	@ (8003bf4 <HAL_DMA_IRQHandler+0x24c>)
 80039ba:	fba2 2303 	umull	r2, r3, r2, r3
 80039be:	0a9b      	lsrs	r3, r3, #10
 80039c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d2:	2208      	movs	r2, #8
 80039d4:	409a      	lsls	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4013      	ands	r3, r2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d01a      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d013      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0204 	bic.w	r2, r2, #4
 80039fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a00:	2208      	movs	r2, #8
 8003a02:	409a      	lsls	r2, r3
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0c:	f043 0201 	orr.w	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a18:	2201      	movs	r2, #1
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d012      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a36:	2201      	movs	r2, #1
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a42:	f043 0202 	orr.w	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4e:	2204      	movs	r2, #4
 8003a50:	409a      	lsls	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d012      	beq.n	8003a80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00b      	beq.n	8003a80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a78:	f043 0204 	orr.w	r2, r3, #4
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a84:	2210      	movs	r2, #16
 8003a86:	409a      	lsls	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d043      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d03c      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa2:	2210      	movs	r2, #16
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d018      	beq.n	8003aea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d108      	bne.n	8003ad8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d024      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	4798      	blx	r3
 8003ad6:	e01f      	b.n	8003b18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01b      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
 8003ae8:	e016      	b.n	8003b18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d107      	bne.n	8003b08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0208 	bic.w	r2, r2, #8
 8003b06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 808f 	beq.w	8003c48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8087 	beq.w	8003c48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3e:	2220      	movs	r2, #32
 8003b40:	409a      	lsls	r2, r3
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b05      	cmp	r3, #5
 8003b50:	d136      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0216 	bic.w	r2, r2, #22
 8003b60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d103      	bne.n	8003b82 <HAL_DMA_IRQHandler+0x1da>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0208 	bic.w	r2, r2, #8
 8003b90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b96:	223f      	movs	r2, #63	@ 0x3f
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d07e      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
        }
        return;
 8003bbe:	e079      	b.n	8003cb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d01d      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10d      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d031      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	4798      	blx	r3
 8003bec:	e02c      	b.n	8003c48 <HAL_DMA_IRQHandler+0x2a0>
 8003bee:	bf00      	nop
 8003bf0:	20000000 	.word	0x20000000
 8003bf4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d023      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
 8003c08:	e01e      	b.n	8003c48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10f      	bne.n	8003c38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0210 	bic.w	r2, r2, #16
 8003c26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d032      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d022      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2205      	movs	r2, #5
 8003c60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	3301      	adds	r3, #1
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d307      	bcc.n	8003c90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f2      	bne.n	8003c74 <HAL_DMA_IRQHandler+0x2cc>
 8003c8e:	e000      	b.n	8003c92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d005      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
 8003cb2:	e000      	b.n	8003cb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cb4:	bf00      	nop
    }
  }
}
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	3b10      	subs	r3, #16
 8003ccc:	4a14      	ldr	r2, [pc, #80]	@ (8003d20 <DMA_CalcBaseAndBitshift+0x64>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cd6:	4a13      	ldr	r2, [pc, #76]	@ (8003d24 <DMA_CalcBaseAndBitshift+0x68>)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4413      	add	r3, r2
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d909      	bls.n	8003cfe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003cf2:	f023 0303 	bic.w	r3, r3, #3
 8003cf6:	1d1a      	adds	r2, r3, #4
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	659a      	str	r2, [r3, #88]	@ 0x58
 8003cfc:	e007      	b.n	8003d0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	aaaaaaab 	.word	0xaaaaaaab
 8003d24:	0800af18 	.word	0x0800af18

08003d28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d11f      	bne.n	8003d82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d856      	bhi.n	8003df6 <DMA_CheckFifoParam+0xce>
 8003d48:	a201      	add	r2, pc, #4	@ (adr r2, 8003d50 <DMA_CheckFifoParam+0x28>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d61 	.word	0x08003d61
 8003d54:	08003d73 	.word	0x08003d73
 8003d58:	08003d61 	.word	0x08003d61
 8003d5c:	08003df7 	.word	0x08003df7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d046      	beq.n	8003dfa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d70:	e043      	b.n	8003dfa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d76:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d7a:	d140      	bne.n	8003dfe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d80:	e03d      	b.n	8003dfe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d8a:	d121      	bne.n	8003dd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d837      	bhi.n	8003e02 <DMA_CheckFifoParam+0xda>
 8003d92:	a201      	add	r2, pc, #4	@ (adr r2, 8003d98 <DMA_CheckFifoParam+0x70>)
 8003d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d98:	08003da9 	.word	0x08003da9
 8003d9c:	08003daf 	.word	0x08003daf
 8003da0:	08003da9 	.word	0x08003da9
 8003da4:	08003dc1 	.word	0x08003dc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dac:	e030      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d025      	beq.n	8003e06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dbe:	e022      	b.n	8003e06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dc8:	d11f      	bne.n	8003e0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dce:	e01c      	b.n	8003e0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d903      	bls.n	8003dde <DMA_CheckFifoParam+0xb6>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d003      	beq.n	8003de4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ddc:	e018      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
      break;
 8003de2:	e015      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00e      	beq.n	8003e0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
      break;
 8003df4:	e00b      	b.n	8003e0e <DMA_CheckFifoParam+0xe6>
      break;
 8003df6:	bf00      	nop
 8003df8:	e00a      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e008      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e006      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
      break;
 8003e02:	bf00      	nop
 8003e04:	e004      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
      break;
 8003e06:	bf00      	nop
 8003e08:	e002      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <DMA_CheckFifoParam+0xe8>
      break;
 8003e0e:	bf00      	nop
    }
  } 
  
  return status; 
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop

08003e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b089      	sub	sp, #36	@ 0x24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e36:	2300      	movs	r3, #0
 8003e38:	61fb      	str	r3, [r7, #28]
 8003e3a:	e165      	b.n	8004108 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	f040 8154 	bne.w	8004102 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d005      	beq.n	8003e72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d130      	bne.n	8003ed4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68da      	ldr	r2, [r3, #12]
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 0201 	and.w	r2, r3, #1
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d017      	beq.n	8003f10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	2203      	movs	r2, #3
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d123      	bne.n	8003f64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	08da      	lsrs	r2, r3, #3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3208      	adds	r2, #8
 8003f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f003 0307 	and.w	r3, r3, #7
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	220f      	movs	r2, #15
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	08da      	lsrs	r2, r3, #3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3208      	adds	r2, #8
 8003f5e:	69b9      	ldr	r1, [r7, #24]
 8003f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	2203      	movs	r2, #3
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 0203 	and.w	r2, r3, #3
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 80ae 	beq.w	8004102 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	4b5d      	ldr	r3, [pc, #372]	@ (8004120 <HAL_GPIO_Init+0x300>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fae:	4a5c      	ldr	r2, [pc, #368]	@ (8004120 <HAL_GPIO_Init+0x300>)
 8003fb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fb6:	4b5a      	ldr	r3, [pc, #360]	@ (8004120 <HAL_GPIO_Init+0x300>)
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fc2:	4a58      	ldr	r2, [pc, #352]	@ (8004124 <HAL_GPIO_Init+0x304>)
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	089b      	lsrs	r3, r3, #2
 8003fc8:	3302      	adds	r3, #2
 8003fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0303 	and.w	r3, r3, #3
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	220f      	movs	r2, #15
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a4f      	ldr	r2, [pc, #316]	@ (8004128 <HAL_GPIO_Init+0x308>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d025      	beq.n	800403a <HAL_GPIO_Init+0x21a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a4e      	ldr	r2, [pc, #312]	@ (800412c <HAL_GPIO_Init+0x30c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01f      	beq.n	8004036 <HAL_GPIO_Init+0x216>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8004130 <HAL_GPIO_Init+0x310>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d019      	beq.n	8004032 <HAL_GPIO_Init+0x212>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a4c      	ldr	r2, [pc, #304]	@ (8004134 <HAL_GPIO_Init+0x314>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_GPIO_Init+0x20e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a4b      	ldr	r2, [pc, #300]	@ (8004138 <HAL_GPIO_Init+0x318>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00d      	beq.n	800402a <HAL_GPIO_Init+0x20a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a4a      	ldr	r2, [pc, #296]	@ (800413c <HAL_GPIO_Init+0x31c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d007      	beq.n	8004026 <HAL_GPIO_Init+0x206>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a49      	ldr	r2, [pc, #292]	@ (8004140 <HAL_GPIO_Init+0x320>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d101      	bne.n	8004022 <HAL_GPIO_Init+0x202>
 800401e:	2306      	movs	r3, #6
 8004020:	e00c      	b.n	800403c <HAL_GPIO_Init+0x21c>
 8004022:	2307      	movs	r3, #7
 8004024:	e00a      	b.n	800403c <HAL_GPIO_Init+0x21c>
 8004026:	2305      	movs	r3, #5
 8004028:	e008      	b.n	800403c <HAL_GPIO_Init+0x21c>
 800402a:	2304      	movs	r3, #4
 800402c:	e006      	b.n	800403c <HAL_GPIO_Init+0x21c>
 800402e:	2303      	movs	r3, #3
 8004030:	e004      	b.n	800403c <HAL_GPIO_Init+0x21c>
 8004032:	2302      	movs	r3, #2
 8004034:	e002      	b.n	800403c <HAL_GPIO_Init+0x21c>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <HAL_GPIO_Init+0x21c>
 800403a:	2300      	movs	r3, #0
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	f002 0203 	and.w	r2, r2, #3
 8004042:	0092      	lsls	r2, r2, #2
 8004044:	4093      	lsls	r3, r2
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800404c:	4935      	ldr	r1, [pc, #212]	@ (8004124 <HAL_GPIO_Init+0x304>)
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	089b      	lsrs	r3, r3, #2
 8004052:	3302      	adds	r3, #2
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800405a:	4b3a      	ldr	r3, [pc, #232]	@ (8004144 <HAL_GPIO_Init+0x324>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	43db      	mvns	r3, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4013      	ands	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800407e:	4a31      	ldr	r2, [pc, #196]	@ (8004144 <HAL_GPIO_Init+0x324>)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004084:	4b2f      	ldr	r3, [pc, #188]	@ (8004144 <HAL_GPIO_Init+0x324>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	43db      	mvns	r3, r3
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4013      	ands	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040a8:	4a26      	ldr	r2, [pc, #152]	@ (8004144 <HAL_GPIO_Init+0x324>)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040ae:	4b25      	ldr	r3, [pc, #148]	@ (8004144 <HAL_GPIO_Init+0x324>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	43db      	mvns	r3, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4013      	ands	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004144 <HAL_GPIO_Init+0x324>)
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <HAL_GPIO_Init+0x324>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040fc:	4a11      	ldr	r2, [pc, #68]	@ (8004144 <HAL_GPIO_Init+0x324>)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	3301      	adds	r3, #1
 8004106:	61fb      	str	r3, [r7, #28]
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	2b0f      	cmp	r3, #15
 800410c:	f67f ae96 	bls.w	8003e3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop
 8004114:	3724      	adds	r7, #36	@ 0x24
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800
 8004124:	40013800 	.word	0x40013800
 8004128:	40020000 	.word	0x40020000
 800412c:	40020400 	.word	0x40020400
 8004130:	40020800 	.word	0x40020800
 8004134:	40020c00 	.word	0x40020c00
 8004138:	40021000 	.word	0x40021000
 800413c:	40021400 	.word	0x40021400
 8004140:	40021800 	.word	0x40021800
 8004144:	40013c00 	.word	0x40013c00

08004148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	807b      	strh	r3, [r7, #2]
 8004154:	4613      	mov	r3, r2
 8004156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004158:	787b      	ldrb	r3, [r7, #1]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800415e:	887a      	ldrh	r2, [r7, #2]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004164:	e003      	b.n	800416e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004166:	887b      	ldrh	r3, [r7, #2]
 8004168:	041a      	lsls	r2, r3, #16
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	619a      	str	r2, [r3, #24]
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e12b      	b.n	80043e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fe f800 	bl	80021a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2224      	movs	r2, #36	@ 0x24
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0201 	bic.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041e0:	f001 fbe0 	bl	80059a4 <HAL_RCC_GetPCLK1Freq>
 80041e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4a81      	ldr	r2, [pc, #516]	@ (80043f0 <HAL_I2C_Init+0x274>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d807      	bhi.n	8004200 <HAL_I2C_Init+0x84>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4a80      	ldr	r2, [pc, #512]	@ (80043f4 <HAL_I2C_Init+0x278>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	bf94      	ite	ls
 80041f8:	2301      	movls	r3, #1
 80041fa:	2300      	movhi	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	e006      	b.n	800420e <HAL_I2C_Init+0x92>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4a7d      	ldr	r2, [pc, #500]	@ (80043f8 <HAL_I2C_Init+0x27c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	bf94      	ite	ls
 8004208:	2301      	movls	r3, #1
 800420a:	2300      	movhi	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e0e7      	b.n	80043e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4a78      	ldr	r2, [pc, #480]	@ (80043fc <HAL_I2C_Init+0x280>)
 800421a:	fba2 2303 	umull	r2, r3, r2, r3
 800421e:	0c9b      	lsrs	r3, r3, #18
 8004220:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4a6a      	ldr	r2, [pc, #424]	@ (80043f0 <HAL_I2C_Init+0x274>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d802      	bhi.n	8004250 <HAL_I2C_Init+0xd4>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	3301      	adds	r3, #1
 800424e:	e009      	b.n	8004264 <HAL_I2C_Init+0xe8>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004256:	fb02 f303 	mul.w	r3, r2, r3
 800425a:	4a69      	ldr	r2, [pc, #420]	@ (8004400 <HAL_I2C_Init+0x284>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	099b      	lsrs	r3, r3, #6
 8004262:	3301      	adds	r3, #1
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6812      	ldr	r2, [r2, #0]
 8004268:	430b      	orrs	r3, r1
 800426a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004276:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	495c      	ldr	r1, [pc, #368]	@ (80043f0 <HAL_I2C_Init+0x274>)
 8004280:	428b      	cmp	r3, r1
 8004282:	d819      	bhi.n	80042b8 <HAL_I2C_Init+0x13c>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	1e59      	subs	r1, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004292:	1c59      	adds	r1, r3, #1
 8004294:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004298:	400b      	ands	r3, r1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_I2C_Init+0x138>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1e59      	subs	r1, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80042ac:	3301      	adds	r3, #1
 80042ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b2:	e051      	b.n	8004358 <HAL_I2C_Init+0x1dc>
 80042b4:	2304      	movs	r3, #4
 80042b6:	e04f      	b.n	8004358 <HAL_I2C_Init+0x1dc>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d111      	bne.n	80042e4 <HAL_I2C_Init+0x168>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	1e58      	subs	r0, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6859      	ldr	r1, [r3, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	440b      	add	r3, r1
 80042ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80042d2:	3301      	adds	r3, #1
 80042d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bf0c      	ite	eq
 80042dc:	2301      	moveq	r3, #1
 80042de:	2300      	movne	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	e012      	b.n	800430a <HAL_I2C_Init+0x18e>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	1e58      	subs	r0, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6859      	ldr	r1, [r3, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	0099      	lsls	r1, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042fa:	3301      	adds	r3, #1
 80042fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004300:	2b00      	cmp	r3, #0
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_I2C_Init+0x196>
 800430e:	2301      	movs	r3, #1
 8004310:	e022      	b.n	8004358 <HAL_I2C_Init+0x1dc>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10e      	bne.n	8004338 <HAL_I2C_Init+0x1bc>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	1e58      	subs	r0, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6859      	ldr	r1, [r3, #4]
 8004322:	460b      	mov	r3, r1
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	440b      	add	r3, r1
 8004328:	fbb0 f3f3 	udiv	r3, r0, r3
 800432c:	3301      	adds	r3, #1
 800432e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004336:	e00f      	b.n	8004358 <HAL_I2C_Init+0x1dc>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1e58      	subs	r0, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	0099      	lsls	r1, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	fbb0 f3f3 	udiv	r3, r0, r3
 800434e:	3301      	adds	r3, #1
 8004350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004354:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	6809      	ldr	r1, [r1, #0]
 800435c:	4313      	orrs	r3, r2
 800435e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69da      	ldr	r2, [r3, #28]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004386:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6911      	ldr	r1, [r2, #16]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68d2      	ldr	r2, [r2, #12]
 8004392:	4311      	orrs	r1, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	430b      	orrs	r3, r1
 800439a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	000186a0 	.word	0x000186a0
 80043f4:	001e847f 	.word	0x001e847f
 80043f8:	003d08ff 	.word	0x003d08ff
 80043fc:	431bde83 	.word	0x431bde83
 8004400:	10624dd3 	.word	0x10624dd3

08004404 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	607a      	str	r2, [r7, #4]
 800440e:	461a      	mov	r2, r3
 8004410:	460b      	mov	r3, r1
 8004412:	817b      	strh	r3, [r7, #10]
 8004414:	4613      	mov	r3, r2
 8004416:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004418:	f7fe fdd2 	bl	8002fc0 <HAL_GetTick>
 800441c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b20      	cmp	r3, #32
 8004428:	f040 80e0 	bne.w	80045ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	2319      	movs	r3, #25
 8004432:	2201      	movs	r2, #1
 8004434:	4970      	ldr	r1, [pc, #448]	@ (80045f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 ff3c 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004442:	2302      	movs	r3, #2
 8004444:	e0d3      	b.n	80045ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_I2C_Master_Transmit+0x50>
 8004450:	2302      	movs	r3, #2
 8004452:	e0cc      	b.n	80045ee <HAL_I2C_Master_Transmit+0x1ea>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b01      	cmp	r3, #1
 8004468:	d007      	beq.n	800447a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0201 	orr.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004488:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2221      	movs	r2, #33	@ 0x21
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2210      	movs	r2, #16
 8004496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	893a      	ldrh	r2, [r7, #8]
 80044aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4a50      	ldr	r2, [pc, #320]	@ (80045fc <HAL_I2C_Master_Transmit+0x1f8>)
 80044ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044bc:	8979      	ldrh	r1, [r7, #10]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	6a3a      	ldr	r2, [r7, #32]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 fcf6 	bl	8004eb4 <I2C_MasterRequestWrite>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e08d      	b.n	80045ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80044e8:	e066      	b.n	80045b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	6a39      	ldr	r1, [r7, #32]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 fffa 	bl	80054e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00d      	beq.n	8004516 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d107      	bne.n	8004512 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004510:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e06b      	b.n	80045ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	781a      	ldrb	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b04      	cmp	r3, #4
 8004552:	d11b      	bne.n	800458c <HAL_I2C_Master_Transmit+0x188>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004558:	2b00      	cmp	r3, #0
 800455a:	d017      	beq.n	800458c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	781a      	ldrb	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	6a39      	ldr	r1, [r7, #32]
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fff1 	bl	8005578 <I2C_WaitOnBTFFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00d      	beq.n	80045b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d107      	bne.n	80045b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e01a      	b.n	80045ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d194      	bne.n	80044ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e000      	b.n	80045ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80045ec:	2302      	movs	r3, #2
  }
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	00100002 	.word	0x00100002
 80045fc:	ffff0000 	.word	0xffff0000

08004600 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af02      	add	r7, sp, #8
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	4608      	mov	r0, r1
 800460a:	4611      	mov	r1, r2
 800460c:	461a      	mov	r2, r3
 800460e:	4603      	mov	r3, r0
 8004610:	817b      	strh	r3, [r7, #10]
 8004612:	460b      	mov	r3, r1
 8004614:	813b      	strh	r3, [r7, #8]
 8004616:	4613      	mov	r3, r2
 8004618:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800461a:	f7fe fcd1 	bl	8002fc0 <HAL_GetTick>
 800461e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b20      	cmp	r3, #32
 800462a:	f040 80d9 	bne.w	80047e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	2319      	movs	r3, #25
 8004634:	2201      	movs	r2, #1
 8004636:	496d      	ldr	r1, [pc, #436]	@ (80047ec <HAL_I2C_Mem_Write+0x1ec>)
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fe3b 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004644:	2302      	movs	r3, #2
 8004646:	e0cc      	b.n	80047e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d101      	bne.n	8004656 <HAL_I2C_Mem_Write+0x56>
 8004652:	2302      	movs	r3, #2
 8004654:	e0c5      	b.n	80047e2 <HAL_I2C_Mem_Write+0x1e2>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b01      	cmp	r3, #1
 800466a:	d007      	beq.n	800467c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0201 	orr.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800468a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2221      	movs	r2, #33	@ 0x21
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2240      	movs	r2, #64	@ 0x40
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a3a      	ldr	r2, [r7, #32]
 80046a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80046ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4a4d      	ldr	r2, [pc, #308]	@ (80047f0 <HAL_I2C_Mem_Write+0x1f0>)
 80046bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046be:	88f8      	ldrh	r0, [r7, #6]
 80046c0:	893a      	ldrh	r2, [r7, #8]
 80046c2:	8979      	ldrh	r1, [r7, #10]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	4603      	mov	r3, r0
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 fc72 	bl	8004fb8 <I2C_RequestMemoryWrite>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d052      	beq.n	8004780 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e081      	b.n	80047e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 ff00 	bl	80054e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00d      	beq.n	800470a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d107      	bne.n	8004706 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004704:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e06b      	b.n	80047e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	781a      	ldrb	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b04      	cmp	r3, #4
 8004746:	d11b      	bne.n	8004780 <HAL_I2C_Mem_Write+0x180>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474c:	2b00      	cmp	r3, #0
 800474e:	d017      	beq.n	8004780 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004754:	781a      	ldrb	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1aa      	bne.n	80046de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fef3 	bl	8005578 <I2C_WaitOnBTFFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00d      	beq.n	80047b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479c:	2b04      	cmp	r3, #4
 800479e:	d107      	bne.n	80047b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e016      	b.n	80047e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	e000      	b.n	80047e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80047e0:	2302      	movs	r3, #2
  }
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	00100002 	.word	0x00100002
 80047f0:	ffff0000 	.word	0xffff0000

080047f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08c      	sub	sp, #48	@ 0x30
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	4608      	mov	r0, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	461a      	mov	r2, r3
 8004802:	4603      	mov	r3, r0
 8004804:	817b      	strh	r3, [r7, #10]
 8004806:	460b      	mov	r3, r1
 8004808:	813b      	strh	r3, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800480e:	f7fe fbd7 	bl	8002fc0 <HAL_GetTick>
 8004812:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b20      	cmp	r3, #32
 800481e:	f040 8214 	bne.w	8004c4a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	2319      	movs	r3, #25
 8004828:	2201      	movs	r2, #1
 800482a:	497b      	ldr	r1, [pc, #492]	@ (8004a18 <HAL_I2C_Mem_Read+0x224>)
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 fd41 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
 800483a:	e207      	b.n	8004c4c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <HAL_I2C_Mem_Read+0x56>
 8004846:	2302      	movs	r3, #2
 8004848:	e200      	b.n	8004c4c <HAL_I2C_Mem_Read+0x458>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b01      	cmp	r3, #1
 800485e:	d007      	beq.n	8004870 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800487e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2222      	movs	r2, #34	@ 0x22
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2240      	movs	r2, #64	@ 0x40
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800489a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80048a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4a5b      	ldr	r2, [pc, #364]	@ (8004a1c <HAL_I2C_Mem_Read+0x228>)
 80048b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048b2:	88f8      	ldrh	r0, [r7, #6]
 80048b4:	893a      	ldrh	r2, [r7, #8]
 80048b6:	8979      	ldrh	r1, [r7, #10]
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	9301      	str	r3, [sp, #4]
 80048bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	4603      	mov	r3, r0
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fc0e 	bl	80050e4 <I2C_RequestMemoryRead>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e1bc      	b.n	8004c4c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d113      	bne.n	8004902 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048da:	2300      	movs	r3, #0
 80048dc:	623b      	str	r3, [r7, #32]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	623b      	str	r3, [r7, #32]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	623b      	str	r3, [r7, #32]
 80048ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e190      	b.n	8004c24 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004906:	2b01      	cmp	r3, #1
 8004908:	d11b      	bne.n	8004942 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800491a:	2300      	movs	r3, #0
 800491c:	61fb      	str	r3, [r7, #28]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	61fb      	str	r3, [r7, #28]
 800492e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e170      	b.n	8004c24 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004946:	2b02      	cmp	r3, #2
 8004948:	d11b      	bne.n	8004982 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004958:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004968:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	e150      	b.n	8004c24 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004998:	e144      	b.n	8004c24 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499e:	2b03      	cmp	r3, #3
 80049a0:	f200 80f1 	bhi.w	8004b86 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d123      	bne.n	80049f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fe29 	bl	8005608 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e145      	b.n	8004c4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049f2:	e117      	b.n	8004c24 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d14e      	bne.n	8004a9a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a02:	2200      	movs	r2, #0
 8004a04:	4906      	ldr	r1, [pc, #24]	@ (8004a20 <HAL_I2C_Mem_Read+0x22c>)
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fc54 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d008      	beq.n	8004a24 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e11a      	b.n	8004c4c <HAL_I2C_Mem_Read+0x458>
 8004a16:	bf00      	nop
 8004a18:	00100002 	.word	0x00100002
 8004a1c:	ffff0000 	.word	0xffff0000
 8004a20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a98:	e0c4      	b.n	8004c24 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	496c      	ldr	r1, [pc, #432]	@ (8004c54 <HAL_I2C_Mem_Read+0x460>)
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 fc05 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0cb      	b.n	8004c4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afc:	2200      	movs	r2, #0
 8004afe:	4955      	ldr	r1, [pc, #340]	@ (8004c54 <HAL_I2C_Mem_Read+0x460>)
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 fbd7 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e09d      	b.n	8004c4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b84:	e04e      	b.n	8004c24 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fd3c 	bl	8005608 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e058      	b.n	8004c4c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d124      	bne.n	8004c24 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d107      	bne.n	8004bf2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f47f aeb6 	bne.w	800499a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	e000      	b.n	8004c4c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004c4a:	2302      	movs	r3, #2
  }
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3728      	adds	r7, #40	@ 0x28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	00010004 	.word	0x00010004

08004c58 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08a      	sub	sp, #40	@ 0x28
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	607a      	str	r2, [r7, #4]
 8004c62:	603b      	str	r3, [r7, #0]
 8004c64:	460b      	mov	r3, r1
 8004c66:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004c68:	f7fe f9aa 	bl	8002fc0 <HAL_GetTick>
 8004c6c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	f040 8111 	bne.w	8004ea2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	2319      	movs	r3, #25
 8004c86:	2201      	movs	r2, #1
 8004c88:	4988      	ldr	r1, [pc, #544]	@ (8004eac <HAL_I2C_IsDeviceReady+0x254>)
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 fb12 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004c96:	2302      	movs	r3, #2
 8004c98:	e104      	b.n	8004ea4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_I2C_IsDeviceReady+0x50>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e0fd      	b.n	8004ea4 <HAL_I2C_IsDeviceReady+0x24c>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d007      	beq.n	8004cce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2224      	movs	r2, #36	@ 0x24
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4a70      	ldr	r2, [pc, #448]	@ (8004eb0 <HAL_I2C_IsDeviceReady+0x258>)
 8004cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d00:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 fad0 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00d      	beq.n	8004d36 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d28:	d103      	bne.n	8004d32 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d30:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e0b6      	b.n	8004ea4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d36:	897b      	ldrh	r3, [r7, #10]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d44:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004d46:	f7fe f93b 	bl	8002fc0 <HAL_GetTick>
 8004d4a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	bf0c      	ite	eq
 8004d5a:	2301      	moveq	r3, #1
 8004d5c:	2300      	movne	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d70:	bf0c      	ite	eq
 8004d72:	2301      	moveq	r3, #1
 8004d74:	2300      	movne	r3, #0
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004d7a:	e025      	b.n	8004dc8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d7c:	f7fe f920 	bl	8002fc0 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d302      	bcc.n	8004d92 <HAL_I2C_IsDeviceReady+0x13a>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d103      	bne.n	8004d9a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	22a0      	movs	r2, #160	@ 0xa0
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	bf0c      	ite	eq
 8004da8:	2301      	moveq	r3, #1
 8004daa:	2300      	movne	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2ba0      	cmp	r3, #160	@ 0xa0
 8004dd2:	d005      	beq.n	8004de0 <HAL_I2C_IsDeviceReady+0x188>
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d102      	bne.n	8004de0 <HAL_I2C_IsDeviceReady+0x188>
 8004dda:	7dbb      	ldrb	r3, [r7, #22]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0cd      	beq.n	8004d7c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d129      	bne.n	8004e4a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e04:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	2319      	movs	r3, #25
 8004e22:	2201      	movs	r2, #1
 8004e24:	4921      	ldr	r1, [pc, #132]	@ (8004eac <HAL_I2C_IsDeviceReady+0x254>)
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 fa44 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e036      	b.n	8004ea4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e02c      	b.n	8004ea4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e58:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e62:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	2319      	movs	r3, #25
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	490f      	ldr	r1, [pc, #60]	@ (8004eac <HAL_I2C_IsDeviceReady+0x254>)
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 fa20 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e012      	b.n	8004ea4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	3301      	adds	r3, #1
 8004e82:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	f4ff af32 	bcc.w	8004cf2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004ea2:	2302      	movs	r3, #2
  }
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	00100002 	.word	0x00100002
 8004eb0:	ffff0000 	.word	0xffff0000

08004eb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	607a      	str	r2, [r7, #4]
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d006      	beq.n	8004ede <I2C_MasterRequestWrite+0x2a>
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d003      	beq.n	8004ede <I2C_MasterRequestWrite+0x2a>
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004edc:	d108      	bne.n	8004ef0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e00b      	b.n	8004f08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef4:	2b12      	cmp	r3, #18
 8004ef6:	d107      	bne.n	8004f08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f9cd 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00d      	beq.n	8004f3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f2e:	d103      	bne.n	8004f38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e035      	b.n	8004fa8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f44:	d108      	bne.n	8004f58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f46:	897b      	ldrh	r3, [r7, #10]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f54:	611a      	str	r2, [r3, #16]
 8004f56:	e01b      	b.n	8004f90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f58:	897b      	ldrh	r3, [r7, #10]
 8004f5a:	11db      	asrs	r3, r3, #7
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	f003 0306 	and.w	r3, r3, #6
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f063 030f 	orn	r3, r3, #15
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	490e      	ldr	r1, [pc, #56]	@ (8004fb0 <I2C_MasterRequestWrite+0xfc>)
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 fa16 	bl	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e010      	b.n	8004fa8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f86:	897b      	ldrh	r3, [r7, #10]
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	4907      	ldr	r1, [pc, #28]	@ (8004fb4 <I2C_MasterRequestWrite+0x100>)
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 fa06 	bl	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	00010008 	.word	0x00010008
 8004fb4:	00010002 	.word	0x00010002

08004fb8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	817b      	strh	r3, [r7, #10]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	813b      	strh	r3, [r7, #8]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fe0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 f960 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00d      	beq.n	8005016 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005004:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005008:	d103      	bne.n	8005012 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005010:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e05f      	b.n	80050d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005016:	897b      	ldrh	r3, [r7, #10]
 8005018:	b2db      	uxtb	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005024:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	6a3a      	ldr	r2, [r7, #32]
 800502a:	492d      	ldr	r1, [pc, #180]	@ (80050e0 <I2C_RequestMemoryWrite+0x128>)
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f9bb 	bl	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e04c      	b.n	80050d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005054:	6a39      	ldr	r1, [r7, #32]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 fa46 	bl	80054e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00d      	beq.n	800507e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	2b04      	cmp	r3, #4
 8005068:	d107      	bne.n	800507a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005078:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e02b      	b.n	80050d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d105      	bne.n	8005090 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005084:	893b      	ldrh	r3, [r7, #8]
 8005086:	b2da      	uxtb	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	611a      	str	r2, [r3, #16]
 800508e:	e021      	b.n	80050d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005090:	893b      	ldrh	r3, [r7, #8]
 8005092:	0a1b      	lsrs	r3, r3, #8
 8005094:	b29b      	uxth	r3, r3
 8005096:	b2da      	uxtb	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800509e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a0:	6a39      	ldr	r1, [r7, #32]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 fa20 	bl	80054e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00d      	beq.n	80050ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d107      	bne.n	80050c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e005      	b.n	80050d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050ca:	893b      	ldrh	r3, [r7, #8]
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	00010002 	.word	0x00010002

080050e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	4608      	mov	r0, r1
 80050ee:	4611      	mov	r1, r2
 80050f0:	461a      	mov	r2, r3
 80050f2:	4603      	mov	r3, r0
 80050f4:	817b      	strh	r3, [r7, #10]
 80050f6:	460b      	mov	r3, r1
 80050f8:	813b      	strh	r3, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800510c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800511c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800511e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	2200      	movs	r2, #0
 8005126:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f8c2 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00d      	beq.n	8005152 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005144:	d103      	bne.n	800514e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800514c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e0aa      	b.n	80052a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005152:	897b      	ldrh	r3, [r7, #10]
 8005154:	b2db      	uxtb	r3, r3
 8005156:	461a      	mov	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005160:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	6a3a      	ldr	r2, [r7, #32]
 8005166:	4952      	ldr	r1, [pc, #328]	@ (80052b0 <I2C_RequestMemoryRead+0x1cc>)
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f91d 	bl	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e097      	b.n	80052a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800518e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005190:	6a39      	ldr	r1, [r7, #32]
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 f9a8 	bl	80054e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00d      	beq.n	80051ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d107      	bne.n	80051b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e076      	b.n	80052a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d105      	bne.n	80051cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051c0:	893b      	ldrh	r3, [r7, #8]
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	611a      	str	r2, [r3, #16]
 80051ca:	e021      	b.n	8005210 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051cc:	893b      	ldrh	r3, [r7, #8]
 80051ce:	0a1b      	lsrs	r3, r3, #8
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	b2da      	uxtb	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051dc:	6a39      	ldr	r1, [r7, #32]
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 f982 	bl	80054e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00d      	beq.n	8005206 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d107      	bne.n	8005202 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005200:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e050      	b.n	80052a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005206:	893b      	ldrh	r3, [r7, #8]
 8005208:	b2da      	uxtb	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005212:	6a39      	ldr	r1, [r7, #32]
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f967 	bl	80054e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00d      	beq.n	800523c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005224:	2b04      	cmp	r3, #4
 8005226:	d107      	bne.n	8005238 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005236:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e035      	b.n	80052a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800524a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800524c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524e:	9300      	str	r3, [sp, #0]
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	2200      	movs	r2, #0
 8005254:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f82b 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00d      	beq.n	8005280 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800526e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005272:	d103      	bne.n	800527c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800527a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e013      	b.n	80052a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005280:	897b      	ldrh	r3, [r7, #10]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	b2da      	uxtb	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	6a3a      	ldr	r2, [r7, #32]
 8005294:	4906      	ldr	r1, [pc, #24]	@ (80052b0 <I2C_RequestMemoryRead+0x1cc>)
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 f886 	bl	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	00010002 	.word	0x00010002

080052b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	4613      	mov	r3, r2
 80052c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052c4:	e048      	b.n	8005358 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d044      	beq.n	8005358 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ce:	f7fd fe77 	bl	8002fc0 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d302      	bcc.n	80052e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d139      	bne.n	8005358 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	0c1b      	lsrs	r3, r3, #16
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d10d      	bne.n	800530a <I2C_WaitOnFlagUntilTimeout+0x56>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	43da      	mvns	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4013      	ands	r3, r2
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	bf0c      	ite	eq
 8005300:	2301      	moveq	r3, #1
 8005302:	2300      	movne	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	e00c      	b.n	8005324 <I2C_WaitOnFlagUntilTimeout+0x70>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	43da      	mvns	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4013      	ands	r3, r2
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	429a      	cmp	r2, r3
 8005328:	d116      	bne.n	8005358 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005344:	f043 0220 	orr.w	r2, r3, #32
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e023      	b.n	80053a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	0c1b      	lsrs	r3, r3, #16
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	d10d      	bne.n	800537e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	43da      	mvns	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4013      	ands	r3, r2
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	461a      	mov	r2, r3
 800537c:	e00c      	b.n	8005398 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	43da      	mvns	r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	4013      	ands	r3, r2
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	bf0c      	ite	eq
 8005390:	2301      	moveq	r3, #1
 8005392:	2300      	movne	r3, #0
 8005394:	b2db      	uxtb	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	429a      	cmp	r2, r3
 800539c:	d093      	beq.n	80052c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053b6:	e071      	b.n	800549c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053c6:	d123      	bne.n	8005410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fc:	f043 0204 	orr.w	r2, r3, #4
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e067      	b.n	80054e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005416:	d041      	beq.n	800549c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005418:	f7fd fdd2 	bl	8002fc0 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	429a      	cmp	r2, r3
 8005426:	d302      	bcc.n	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d136      	bne.n	800549c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	0c1b      	lsrs	r3, r3, #16
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b01      	cmp	r3, #1
 8005436:	d10c      	bne.n	8005452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	43da      	mvns	r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4013      	ands	r3, r2
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	bf14      	ite	ne
 800544a:	2301      	movne	r3, #1
 800544c:	2300      	moveq	r3, #0
 800544e:	b2db      	uxtb	r3, r3
 8005450:	e00b      	b.n	800546a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	43da      	mvns	r2, r3
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	4013      	ands	r3, r2
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	bf14      	ite	ne
 8005464:	2301      	movne	r3, #1
 8005466:	2300      	moveq	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d016      	beq.n	800549c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005488:	f043 0220 	orr.w	r2, r3, #32
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e021      	b.n	80054e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	0c1b      	lsrs	r3, r3, #16
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d10c      	bne.n	80054c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	43da      	mvns	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4013      	ands	r3, r2
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	bf14      	ite	ne
 80054b8:	2301      	movne	r3, #1
 80054ba:	2300      	moveq	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	e00b      	b.n	80054d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	43da      	mvns	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4013      	ands	r3, r2
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bf14      	ite	ne
 80054d2:	2301      	movne	r3, #1
 80054d4:	2300      	moveq	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f47f af6d 	bne.w	80053b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054f4:	e034      	b.n	8005560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f8e3 	bl	80056c2 <I2C_IsAcknowledgeFailed>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e034      	b.n	8005570 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d028      	beq.n	8005560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800550e:	f7fd fd57 	bl	8002fc0 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	429a      	cmp	r2, r3
 800551c:	d302      	bcc.n	8005524 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d11d      	bne.n	8005560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800552e:	2b80      	cmp	r3, #128	@ 0x80
 8005530:	d016      	beq.n	8005560 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554c:	f043 0220 	orr.w	r2, r3, #32
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e007      	b.n	8005570 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800556a:	2b80      	cmp	r3, #128	@ 0x80
 800556c:	d1c3      	bne.n	80054f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005584:	e034      	b.n	80055f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 f89b 	bl	80056c2 <I2C_IsAcknowledgeFailed>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e034      	b.n	8005600 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559c:	d028      	beq.n	80055f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559e:	f7fd fd0f 	bl	8002fc0 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d302      	bcc.n	80055b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d11d      	bne.n	80055f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d016      	beq.n	80055f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055dc:	f043 0220 	orr.w	r2, r3, #32
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e007      	b.n	8005600 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d1c3      	bne.n	8005586 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005614:	e049      	b.n	80056aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	2b10      	cmp	r3, #16
 8005622:	d119      	bne.n	8005658 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0210 	mvn.w	r2, #16
 800562c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2220      	movs	r2, #32
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e030      	b.n	80056ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005658:	f7fd fcb2 	bl	8002fc0 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	429a      	cmp	r2, r3
 8005666:	d302      	bcc.n	800566e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d11d      	bne.n	80056aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005678:	2b40      	cmp	r3, #64	@ 0x40
 800567a:	d016      	beq.n	80056aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	f043 0220 	orr.w	r2, r3, #32
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e007      	b.n	80056ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056b4:	2b40      	cmp	r3, #64	@ 0x40
 80056b6:	d1ae      	bne.n	8005616 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056d8:	d11b      	bne.n	8005712 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	f043 0204 	orr.w	r2, r3, #4
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800572a:	2300      	movs	r3, #0
 800572c:	603b      	str	r3, [r7, #0]
 800572e:	4b20      	ldr	r3, [pc, #128]	@ (80057b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	4a1f      	ldr	r2, [pc, #124]	@ (80057b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005738:	6413      	str	r3, [r2, #64]	@ 0x40
 800573a:	4b1d      	ldr	r3, [pc, #116]	@ (80057b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800573c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005746:	4b1b      	ldr	r3, [pc, #108]	@ (80057b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800574c:	f7fd fc38 	bl	8002fc0 <HAL_GetTick>
 8005750:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005752:	e009      	b.n	8005768 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005754:	f7fd fc34 	bl	8002fc0 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005762:	d901      	bls.n	8005768 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e01f      	b.n	80057a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005768:	4b13      	ldr	r3, [pc, #76]	@ (80057b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005774:	d1ee      	bne.n	8005754 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005776:	4b11      	ldr	r3, [pc, #68]	@ (80057bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005778:	2201      	movs	r2, #1
 800577a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800577c:	f7fd fc20 	bl	8002fc0 <HAL_GetTick>
 8005780:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005782:	e009      	b.n	8005798 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005784:	f7fd fc1c 	bl	8002fc0 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005792:	d901      	bls.n	8005798 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e007      	b.n	80057a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005798:	4b07      	ldr	r3, [pc, #28]	@ (80057b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057a4:	d1ee      	bne.n	8005784 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40023800 	.word	0x40023800
 80057b4:	420e0040 	.word	0x420e0040
 80057b8:	40007000 	.word	0x40007000
 80057bc:	420e0044 	.word	0x420e0044

080057c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e0cc      	b.n	800596e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057d4:	4b68      	ldr	r3, [pc, #416]	@ (8005978 <HAL_RCC_ClockConfig+0x1b8>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d90c      	bls.n	80057fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e2:	4b65      	ldr	r3, [pc, #404]	@ (8005978 <HAL_RCC_ClockConfig+0x1b8>)
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ea:	4b63      	ldr	r3, [pc, #396]	@ (8005978 <HAL_RCC_ClockConfig+0x1b8>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d001      	beq.n	80057fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0b8      	b.n	800596e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d020      	beq.n	800584a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	d005      	beq.n	8005820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005814:	4b59      	ldr	r3, [pc, #356]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	4a58      	ldr	r2, [pc, #352]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800581e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800582c:	4b53      	ldr	r3, [pc, #332]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	4a52      	ldr	r2, [pc, #328]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005838:	4b50      	ldr	r3, [pc, #320]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	494d      	ldr	r1, [pc, #308]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 8005846:	4313      	orrs	r3, r2
 8005848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d044      	beq.n	80058e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d107      	bne.n	800586e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585e:	4b47      	ldr	r3, [pc, #284]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d119      	bne.n	800589e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e07f      	b.n	800596e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d003      	beq.n	800587e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800587a:	2b03      	cmp	r3, #3
 800587c:	d107      	bne.n	800588e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800587e:	4b3f      	ldr	r3, [pc, #252]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d109      	bne.n	800589e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e06f      	b.n	800596e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800588e:	4b3b      	ldr	r3, [pc, #236]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e067      	b.n	800596e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800589e:	4b37      	ldr	r3, [pc, #220]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f023 0203 	bic.w	r2, r3, #3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	4934      	ldr	r1, [pc, #208]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058b0:	f7fd fb86 	bl	8002fc0 <HAL_GetTick>
 80058b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058b6:	e00a      	b.n	80058ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b8:	f7fd fb82 	bl	8002fc0 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e04f      	b.n	800596e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ce:	4b2b      	ldr	r3, [pc, #172]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 020c 	and.w	r2, r3, #12
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	429a      	cmp	r2, r3
 80058de:	d1eb      	bne.n	80058b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058e0:	4b25      	ldr	r3, [pc, #148]	@ (8005978 <HAL_RCC_ClockConfig+0x1b8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 030f 	and.w	r3, r3, #15
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d20c      	bcs.n	8005908 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ee:	4b22      	ldr	r3, [pc, #136]	@ (8005978 <HAL_RCC_ClockConfig+0x1b8>)
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f6:	4b20      	ldr	r3, [pc, #128]	@ (8005978 <HAL_RCC_ClockConfig+0x1b8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d001      	beq.n	8005908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e032      	b.n	800596e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005914:	4b19      	ldr	r3, [pc, #100]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	4916      	ldr	r1, [pc, #88]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 8005922:	4313      	orrs	r3, r2
 8005924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d009      	beq.n	8005946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005932:	4b12      	ldr	r3, [pc, #72]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	490e      	ldr	r1, [pc, #56]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 8005942:	4313      	orrs	r3, r2
 8005944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005946:	f000 f855 	bl	80059f4 <HAL_RCC_GetSysClockFreq>
 800594a:	4602      	mov	r2, r0
 800594c:	4b0b      	ldr	r3, [pc, #44]	@ (800597c <HAL_RCC_ClockConfig+0x1bc>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	091b      	lsrs	r3, r3, #4
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	490a      	ldr	r1, [pc, #40]	@ (8005980 <HAL_RCC_ClockConfig+0x1c0>)
 8005958:	5ccb      	ldrb	r3, [r1, r3]
 800595a:	fa22 f303 	lsr.w	r3, r2, r3
 800595e:	4a09      	ldr	r2, [pc, #36]	@ (8005984 <HAL_RCC_ClockConfig+0x1c4>)
 8005960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005962:	4b09      	ldr	r3, [pc, #36]	@ (8005988 <HAL_RCC_ClockConfig+0x1c8>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f7fd fae6 	bl	8002f38 <HAL_InitTick>

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40023c00 	.word	0x40023c00
 800597c:	40023800 	.word	0x40023800
 8005980:	0800ab00 	.word	0x0800ab00
 8005984:	20000000 	.word	0x20000000
 8005988:	20000004 	.word	0x20000004

0800598c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005990:	4b03      	ldr	r3, [pc, #12]	@ (80059a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005992:	681b      	ldr	r3, [r3, #0]
}
 8005994:	4618      	mov	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	20000000 	.word	0x20000000

080059a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059a8:	f7ff fff0 	bl	800598c <HAL_RCC_GetHCLKFreq>
 80059ac:	4602      	mov	r2, r0
 80059ae:	4b05      	ldr	r3, [pc, #20]	@ (80059c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	0a9b      	lsrs	r3, r3, #10
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	4903      	ldr	r1, [pc, #12]	@ (80059c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059ba:	5ccb      	ldrb	r3, [r1, r3]
 80059bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40023800 	.word	0x40023800
 80059c8:	0800ab10 	.word	0x0800ab10

080059cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059d0:	f7ff ffdc 	bl	800598c <HAL_RCC_GetHCLKFreq>
 80059d4:	4602      	mov	r2, r0
 80059d6:	4b05      	ldr	r3, [pc, #20]	@ (80059ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	0b5b      	lsrs	r3, r3, #13
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	4903      	ldr	r1, [pc, #12]	@ (80059f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059e2:	5ccb      	ldrb	r3, [r1, r3]
 80059e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	40023800 	.word	0x40023800
 80059f0:	0800ab10 	.word	0x0800ab10

080059f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f8:	b0ae      	sub	sp, #184	@ 0xb8
 80059fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a1a:	4bcb      	ldr	r3, [pc, #812]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 030c 	and.w	r3, r3, #12
 8005a22:	2b0c      	cmp	r3, #12
 8005a24:	f200 8206 	bhi.w	8005e34 <HAL_RCC_GetSysClockFreq+0x440>
 8005a28:	a201      	add	r2, pc, #4	@ (adr r2, 8005a30 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2e:	bf00      	nop
 8005a30:	08005a65 	.word	0x08005a65
 8005a34:	08005e35 	.word	0x08005e35
 8005a38:	08005e35 	.word	0x08005e35
 8005a3c:	08005e35 	.word	0x08005e35
 8005a40:	08005a6d 	.word	0x08005a6d
 8005a44:	08005e35 	.word	0x08005e35
 8005a48:	08005e35 	.word	0x08005e35
 8005a4c:	08005e35 	.word	0x08005e35
 8005a50:	08005a75 	.word	0x08005a75
 8005a54:	08005e35 	.word	0x08005e35
 8005a58:	08005e35 	.word	0x08005e35
 8005a5c:	08005e35 	.word	0x08005e35
 8005a60:	08005c65 	.word	0x08005c65
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a64:	4bb9      	ldr	r3, [pc, #740]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0x358>)
 8005a66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005a6a:	e1e7      	b.n	8005e3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a6c:	4bb8      	ldr	r3, [pc, #736]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005a72:	e1e3      	b.n	8005e3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a74:	4bb4      	ldr	r3, [pc, #720]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a80:	4bb1      	ldr	r3, [pc, #708]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d071      	beq.n	8005b70 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a8c:	4bae      	ldr	r3, [pc, #696]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	099b      	lsrs	r3, r3, #6
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a98:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005aae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	462b      	mov	r3, r5
 8005ab6:	f04f 0000 	mov.w	r0, #0
 8005aba:	f04f 0100 	mov.w	r1, #0
 8005abe:	0159      	lsls	r1, r3, #5
 8005ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ac4:	0150      	lsls	r0, r2, #5
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4621      	mov	r1, r4
 8005acc:	1a51      	subs	r1, r2, r1
 8005ace:	6439      	str	r1, [r7, #64]	@ 0x40
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8005ad6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ad8:	f04f 0200 	mov.w	r2, #0
 8005adc:	f04f 0300 	mov.w	r3, #0
 8005ae0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	018b      	lsls	r3, r1, #6
 8005ae8:	4641      	mov	r1, r8
 8005aea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005aee:	4641      	mov	r1, r8
 8005af0:	018a      	lsls	r2, r1, #6
 8005af2:	4641      	mov	r1, r8
 8005af4:	1a51      	subs	r1, r2, r1
 8005af6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005af8:	4649      	mov	r1, r9
 8005afa:	eb63 0301 	sbc.w	r3, r3, r1
 8005afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	00cb      	lsls	r3, r1, #3
 8005b10:	4641      	mov	r1, r8
 8005b12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b16:	4641      	mov	r1, r8
 8005b18:	00ca      	lsls	r2, r1, #3
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4622      	mov	r2, r4
 8005b22:	189b      	adds	r3, r3, r2
 8005b24:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b26:	462b      	mov	r3, r5
 8005b28:	460a      	mov	r2, r1
 8005b2a:	eb42 0303 	adc.w	r3, r2, r3
 8005b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	024b      	lsls	r3, r1, #9
 8005b40:	4621      	mov	r1, r4
 8005b42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b46:	4621      	mov	r1, r4
 8005b48:	024a      	lsls	r2, r1, #9
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b5c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005b60:	f7fb f8a2 	bl	8000ca8 <__aeabi_uldivmod>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4613      	mov	r3, r2
 8005b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b6e:	e067      	b.n	8005c40 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b70:	4b75      	ldr	r3, [pc, #468]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	099b      	lsrs	r3, r3, #6
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b7c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005b80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b8e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005b92:	4622      	mov	r2, r4
 8005b94:	462b      	mov	r3, r5
 8005b96:	f04f 0000 	mov.w	r0, #0
 8005b9a:	f04f 0100 	mov.w	r1, #0
 8005b9e:	0159      	lsls	r1, r3, #5
 8005ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ba4:	0150      	lsls	r0, r2, #5
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4621      	mov	r1, r4
 8005bac:	1a51      	subs	r1, r2, r1
 8005bae:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8005bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	f04f 0300 	mov.w	r3, #0
 8005bc0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005bc4:	4649      	mov	r1, r9
 8005bc6:	018b      	lsls	r3, r1, #6
 8005bc8:	4641      	mov	r1, r8
 8005bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bce:	4641      	mov	r1, r8
 8005bd0:	018a      	lsls	r2, r1, #6
 8005bd2:	4641      	mov	r1, r8
 8005bd4:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bd8:	4649      	mov	r1, r9
 8005bda:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bf2:	4692      	mov	sl, r2
 8005bf4:	469b      	mov	fp, r3
 8005bf6:	4623      	mov	r3, r4
 8005bf8:	eb1a 0303 	adds.w	r3, sl, r3
 8005bfc:	623b      	str	r3, [r7, #32]
 8005bfe:	462b      	mov	r3, r5
 8005c00:	eb4b 0303 	adc.w	r3, fp, r3
 8005c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005c12:	4629      	mov	r1, r5
 8005c14:	028b      	lsls	r3, r1, #10
 8005c16:	4621      	mov	r1, r4
 8005c18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	028a      	lsls	r2, r1, #10
 8005c20:	4610      	mov	r0, r2
 8005c22:	4619      	mov	r1, r3
 8005c24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c28:	2200      	movs	r2, #0
 8005c2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c2c:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005c32:	f7fb f839 	bl	8000ca8 <__aeabi_uldivmod>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c40:	4b41      	ldr	r3, [pc, #260]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	0c1b      	lsrs	r3, r3, #16
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	005b      	lsls	r3, r3, #1
 8005c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005c52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005c62:	e0eb      	b.n	8005e3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c64:	4b38      	ldr	r3, [pc, #224]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c70:	4b35      	ldr	r3, [pc, #212]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d06b      	beq.n	8005d54 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c7c:	4b32      	ldr	r3, [pc, #200]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	099b      	lsrs	r3, r3, #6
 8005c82:	2200      	movs	r2, #0
 8005c84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c90:	2300      	movs	r3, #0
 8005c92:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c94:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005c98:	4622      	mov	r2, r4
 8005c9a:	462b      	mov	r3, r5
 8005c9c:	f04f 0000 	mov.w	r0, #0
 8005ca0:	f04f 0100 	mov.w	r1, #0
 8005ca4:	0159      	lsls	r1, r3, #5
 8005ca6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005caa:	0150      	lsls	r0, r2, #5
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	1a51      	subs	r1, r2, r1
 8005cb4:	61b9      	str	r1, [r7, #24]
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	eb63 0301 	sbc.w	r3, r3, r1
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005cca:	4659      	mov	r1, fp
 8005ccc:	018b      	lsls	r3, r1, #6
 8005cce:	4651      	mov	r1, sl
 8005cd0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cd4:	4651      	mov	r1, sl
 8005cd6:	018a      	lsls	r2, r1, #6
 8005cd8:	4651      	mov	r1, sl
 8005cda:	ebb2 0801 	subs.w	r8, r2, r1
 8005cde:	4659      	mov	r1, fp
 8005ce0:	eb63 0901 	sbc.w	r9, r3, r1
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cf0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cf4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cf8:	4690      	mov	r8, r2
 8005cfa:	4699      	mov	r9, r3
 8005cfc:	4623      	mov	r3, r4
 8005cfe:	eb18 0303 	adds.w	r3, r8, r3
 8005d02:	613b      	str	r3, [r7, #16]
 8005d04:	462b      	mov	r3, r5
 8005d06:	eb49 0303 	adc.w	r3, r9, r3
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005d18:	4629      	mov	r1, r5
 8005d1a:	024b      	lsls	r3, r1, #9
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d22:	4621      	mov	r1, r4
 8005d24:	024a      	lsls	r2, r1, #9
 8005d26:	4610      	mov	r0, r2
 8005d28:	4619      	mov	r1, r3
 8005d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d2e:	2200      	movs	r2, #0
 8005d30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d32:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005d34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d38:	f7fa ffb6 	bl	8000ca8 <__aeabi_uldivmod>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4613      	mov	r3, r2
 8005d42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d46:	e065      	b.n	8005e14 <HAL_RCC_GetSysClockFreq+0x420>
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	00f42400 	.word	0x00f42400
 8005d50:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d54:	4b3d      	ldr	r3, [pc, #244]	@ (8005e4c <HAL_RCC_GetSysClockFreq+0x458>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	099b      	lsrs	r3, r3, #6
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	4611      	mov	r1, r2
 8005d60:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d64:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d66:	2300      	movs	r3, #0
 8005d68:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d6a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005d6e:	4642      	mov	r2, r8
 8005d70:	464b      	mov	r3, r9
 8005d72:	f04f 0000 	mov.w	r0, #0
 8005d76:	f04f 0100 	mov.w	r1, #0
 8005d7a:	0159      	lsls	r1, r3, #5
 8005d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d80:	0150      	lsls	r0, r2, #5
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4641      	mov	r1, r8
 8005d88:	1a51      	subs	r1, r2, r1
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	4649      	mov	r1, r9
 8005d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005da0:	4659      	mov	r1, fp
 8005da2:	018b      	lsls	r3, r1, #6
 8005da4:	4651      	mov	r1, sl
 8005da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005daa:	4651      	mov	r1, sl
 8005dac:	018a      	lsls	r2, r1, #6
 8005dae:	4651      	mov	r1, sl
 8005db0:	1a54      	subs	r4, r2, r1
 8005db2:	4659      	mov	r1, fp
 8005db4:	eb63 0501 	sbc.w	r5, r3, r1
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	00eb      	lsls	r3, r5, #3
 8005dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dc6:	00e2      	lsls	r2, r4, #3
 8005dc8:	4614      	mov	r4, r2
 8005dca:	461d      	mov	r5, r3
 8005dcc:	4643      	mov	r3, r8
 8005dce:	18e3      	adds	r3, r4, r3
 8005dd0:	603b      	str	r3, [r7, #0]
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	eb45 0303 	adc.w	r3, r5, r3
 8005dd8:	607b      	str	r3, [r7, #4]
 8005dda:	f04f 0200 	mov.w	r2, #0
 8005dde:	f04f 0300 	mov.w	r3, #0
 8005de2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005de6:	4629      	mov	r1, r5
 8005de8:	028b      	lsls	r3, r1, #10
 8005dea:	4621      	mov	r1, r4
 8005dec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005df0:	4621      	mov	r1, r4
 8005df2:	028a      	lsls	r2, r1, #10
 8005df4:	4610      	mov	r0, r2
 8005df6:	4619      	mov	r1, r3
 8005df8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e00:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005e02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e06:	f7fa ff4f 	bl	8000ca8 <__aeabi_uldivmod>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4613      	mov	r3, r2
 8005e10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005e14:	4b0d      	ldr	r3, [pc, #52]	@ (8005e4c <HAL_RCC_GetSysClockFreq+0x458>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	0f1b      	lsrs	r3, r3, #28
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8005e22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005e32:	e003      	b.n	8005e3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e34:	4b06      	ldr	r3, [pc, #24]	@ (8005e50 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005e36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005e3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	37b8      	adds	r7, #184	@ 0xb8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	00f42400 	.word	0x00f42400

08005e54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e28d      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 8083 	beq.w	8005f7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e74:	4b94      	ldr	r3, [pc, #592]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 030c 	and.w	r3, r3, #12
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d019      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005e80:	4b91      	ldr	r3, [pc, #580]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f003 030c 	and.w	r3, r3, #12
        || \
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d106      	bne.n	8005e9a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005e8c:	4b8e      	ldr	r3, [pc, #568]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e98:	d00c      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e9a:	4b8b      	ldr	r3, [pc, #556]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005ea2:	2b0c      	cmp	r3, #12
 8005ea4:	d112      	bne.n	8005ecc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ea6:	4b88      	ldr	r3, [pc, #544]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005eb2:	d10b      	bne.n	8005ecc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb4:	4b84      	ldr	r3, [pc, #528]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d05b      	beq.n	8005f78 <HAL_RCC_OscConfig+0x124>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d157      	bne.n	8005f78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e25a      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ed4:	d106      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x90>
 8005ed6:	4b7c      	ldr	r3, [pc, #496]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a7b      	ldr	r2, [pc, #492]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e01d      	b.n	8005f20 <HAL_RCC_OscConfig+0xcc>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005eec:	d10c      	bne.n	8005f08 <HAL_RCC_OscConfig+0xb4>
 8005eee:	4b76      	ldr	r3, [pc, #472]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a75      	ldr	r2, [pc, #468]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	4b73      	ldr	r3, [pc, #460]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a72      	ldr	r2, [pc, #456]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	e00b      	b.n	8005f20 <HAL_RCC_OscConfig+0xcc>
 8005f08:	4b6f      	ldr	r3, [pc, #444]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a6e      	ldr	r2, [pc, #440]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f12:	6013      	str	r3, [r2, #0]
 8005f14:	4b6c      	ldr	r3, [pc, #432]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a6b      	ldr	r2, [pc, #428]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d013      	beq.n	8005f50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f28:	f7fd f84a 	bl	8002fc0 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f30:	f7fd f846 	bl	8002fc0 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b64      	cmp	r3, #100	@ 0x64
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e21f      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f42:	4b61      	ldr	r3, [pc, #388]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f0      	beq.n	8005f30 <HAL_RCC_OscConfig+0xdc>
 8005f4e:	e014      	b.n	8005f7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f50:	f7fd f836 	bl	8002fc0 <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f58:	f7fd f832 	bl	8002fc0 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b64      	cmp	r3, #100	@ 0x64
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e20b      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f6a:	4b57      	ldr	r3, [pc, #348]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1f0      	bne.n	8005f58 <HAL_RCC_OscConfig+0x104>
 8005f76:	e000      	b.n	8005f7a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d06f      	beq.n	8006066 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005f86:	4b50      	ldr	r3, [pc, #320]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 030c 	and.w	r3, r3, #12
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d017      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005f92:	4b4d      	ldr	r3, [pc, #308]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 030c 	and.w	r3, r3, #12
        || \
 8005f9a:	2b08      	cmp	r3, #8
 8005f9c:	d105      	bne.n	8005faa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00b      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005faa:	4b47      	ldr	r3, [pc, #284]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005fb2:	2b0c      	cmp	r3, #12
 8005fb4:	d11c      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fb6:	4b44      	ldr	r3, [pc, #272]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d116      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fc2:	4b41      	ldr	r3, [pc, #260]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d005      	beq.n	8005fda <HAL_RCC_OscConfig+0x186>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d001      	beq.n	8005fda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e1d3      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fda:	4b3b      	ldr	r3, [pc, #236]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	4937      	ldr	r1, [pc, #220]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fee:	e03a      	b.n	8006066 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d020      	beq.n	800603a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ff8:	4b34      	ldr	r3, [pc, #208]	@ (80060cc <HAL_RCC_OscConfig+0x278>)
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ffe:	f7fc ffdf 	bl	8002fc0 <HAL_GetTick>
 8006002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006004:	e008      	b.n	8006018 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006006:	f7fc ffdb 	bl	8002fc0 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d901      	bls.n	8006018 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e1b4      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006018:	4b2b      	ldr	r3, [pc, #172]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d0f0      	beq.n	8006006 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006024:	4b28      	ldr	r3, [pc, #160]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	4925      	ldr	r1, [pc, #148]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 8006034:	4313      	orrs	r3, r2
 8006036:	600b      	str	r3, [r1, #0]
 8006038:	e015      	b.n	8006066 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800603a:	4b24      	ldr	r3, [pc, #144]	@ (80060cc <HAL_RCC_OscConfig+0x278>)
 800603c:	2200      	movs	r2, #0
 800603e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006040:	f7fc ffbe 	bl	8002fc0 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006048:	f7fc ffba 	bl	8002fc0 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e193      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800605a:	4b1b      	ldr	r3, [pc, #108]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1f0      	bne.n	8006048 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b00      	cmp	r3, #0
 8006070:	d036      	beq.n	80060e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d016      	beq.n	80060a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800607a:	4b15      	ldr	r3, [pc, #84]	@ (80060d0 <HAL_RCC_OscConfig+0x27c>)
 800607c:	2201      	movs	r2, #1
 800607e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006080:	f7fc ff9e 	bl	8002fc0 <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006086:	e008      	b.n	800609a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006088:	f7fc ff9a 	bl	8002fc0 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e173      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800609a:	4b0b      	ldr	r3, [pc, #44]	@ (80060c8 <HAL_RCC_OscConfig+0x274>)
 800609c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0f0      	beq.n	8006088 <HAL_RCC_OscConfig+0x234>
 80060a6:	e01b      	b.n	80060e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060a8:	4b09      	ldr	r3, [pc, #36]	@ (80060d0 <HAL_RCC_OscConfig+0x27c>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ae:	f7fc ff87 	bl	8002fc0 <HAL_GetTick>
 80060b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060b4:	e00e      	b.n	80060d4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060b6:	f7fc ff83 	bl	8002fc0 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d907      	bls.n	80060d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e15c      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
 80060c8:	40023800 	.word	0x40023800
 80060cc:	42470000 	.word	0x42470000
 80060d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060d4:	4b8a      	ldr	r3, [pc, #552]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 80060d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1ea      	bne.n	80060b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8097 	beq.w	800621c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060ee:	2300      	movs	r3, #0
 80060f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060f2:	4b83      	ldr	r3, [pc, #524]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 80060f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10f      	bne.n	800611e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060fe:	2300      	movs	r3, #0
 8006100:	60bb      	str	r3, [r7, #8]
 8006102:	4b7f      	ldr	r3, [pc, #508]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 8006104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006106:	4a7e      	ldr	r2, [pc, #504]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 8006108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800610c:	6413      	str	r3, [r2, #64]	@ 0x40
 800610e:	4b7c      	ldr	r3, [pc, #496]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 8006110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006116:	60bb      	str	r3, [r7, #8]
 8006118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800611a:	2301      	movs	r3, #1
 800611c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800611e:	4b79      	ldr	r3, [pc, #484]	@ (8006304 <HAL_RCC_OscConfig+0x4b0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006126:	2b00      	cmp	r3, #0
 8006128:	d118      	bne.n	800615c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800612a:	4b76      	ldr	r3, [pc, #472]	@ (8006304 <HAL_RCC_OscConfig+0x4b0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a75      	ldr	r2, [pc, #468]	@ (8006304 <HAL_RCC_OscConfig+0x4b0>)
 8006130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006136:	f7fc ff43 	bl	8002fc0 <HAL_GetTick>
 800613a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800613c:	e008      	b.n	8006150 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800613e:	f7fc ff3f 	bl	8002fc0 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e118      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006150:	4b6c      	ldr	r3, [pc, #432]	@ (8006304 <HAL_RCC_OscConfig+0x4b0>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0f0      	beq.n	800613e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d106      	bne.n	8006172 <HAL_RCC_OscConfig+0x31e>
 8006164:	4b66      	ldr	r3, [pc, #408]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 8006166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006168:	4a65      	ldr	r2, [pc, #404]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 800616a:	f043 0301 	orr.w	r3, r3, #1
 800616e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006170:	e01c      	b.n	80061ac <HAL_RCC_OscConfig+0x358>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	2b05      	cmp	r3, #5
 8006178:	d10c      	bne.n	8006194 <HAL_RCC_OscConfig+0x340>
 800617a:	4b61      	ldr	r3, [pc, #388]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 800617c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800617e:	4a60      	ldr	r2, [pc, #384]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 8006180:	f043 0304 	orr.w	r3, r3, #4
 8006184:	6713      	str	r3, [r2, #112]	@ 0x70
 8006186:	4b5e      	ldr	r3, [pc, #376]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 8006188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800618a:	4a5d      	ldr	r2, [pc, #372]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 800618c:	f043 0301 	orr.w	r3, r3, #1
 8006190:	6713      	str	r3, [r2, #112]	@ 0x70
 8006192:	e00b      	b.n	80061ac <HAL_RCC_OscConfig+0x358>
 8006194:	4b5a      	ldr	r3, [pc, #360]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 8006196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006198:	4a59      	ldr	r2, [pc, #356]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 800619a:	f023 0301 	bic.w	r3, r3, #1
 800619e:	6713      	str	r3, [r2, #112]	@ 0x70
 80061a0:	4b57      	ldr	r3, [pc, #348]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 80061a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a4:	4a56      	ldr	r2, [pc, #344]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 80061a6:	f023 0304 	bic.w	r3, r3, #4
 80061aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d015      	beq.n	80061e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b4:	f7fc ff04 	bl	8002fc0 <HAL_GetTick>
 80061b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ba:	e00a      	b.n	80061d2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061bc:	f7fc ff00 	bl	8002fc0 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d901      	bls.n	80061d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e0d7      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 80061d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0ee      	beq.n	80061bc <HAL_RCC_OscConfig+0x368>
 80061de:	e014      	b.n	800620a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e0:	f7fc feee 	bl	8002fc0 <HAL_GetTick>
 80061e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061e6:	e00a      	b.n	80061fe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061e8:	f7fc feea 	bl	8002fc0 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e0c1      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061fe:	4b40      	ldr	r3, [pc, #256]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 8006200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1ee      	bne.n	80061e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800620a:	7dfb      	ldrb	r3, [r7, #23]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d105      	bne.n	800621c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006210:	4b3b      	ldr	r3, [pc, #236]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 8006212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006214:	4a3a      	ldr	r2, [pc, #232]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 8006216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800621a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 80ad 	beq.w	8006380 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006226:	4b36      	ldr	r3, [pc, #216]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f003 030c 	and.w	r3, r3, #12
 800622e:	2b08      	cmp	r3, #8
 8006230:	d060      	beq.n	80062f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d145      	bne.n	80062c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800623a:	4b33      	ldr	r3, [pc, #204]	@ (8006308 <HAL_RCC_OscConfig+0x4b4>)
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006240:	f7fc febe 	bl	8002fc0 <HAL_GetTick>
 8006244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006248:	f7fc feba 	bl	8002fc0 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e093      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800625a:	4b29      	ldr	r3, [pc, #164]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1f0      	bne.n	8006248 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	69da      	ldr	r2, [r3, #28]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006274:	019b      	lsls	r3, r3, #6
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627c:	085b      	lsrs	r3, r3, #1
 800627e:	3b01      	subs	r3, #1
 8006280:	041b      	lsls	r3, r3, #16
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006288:	061b      	lsls	r3, r3, #24
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006290:	071b      	lsls	r3, r3, #28
 8006292:	491b      	ldr	r1, [pc, #108]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 8006294:	4313      	orrs	r3, r2
 8006296:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006298:	4b1b      	ldr	r3, [pc, #108]	@ (8006308 <HAL_RCC_OscConfig+0x4b4>)
 800629a:	2201      	movs	r2, #1
 800629c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800629e:	f7fc fe8f 	bl	8002fc0 <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062a4:	e008      	b.n	80062b8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a6:	f7fc fe8b 	bl	8002fc0 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e064      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062b8:	4b11      	ldr	r3, [pc, #68]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0f0      	beq.n	80062a6 <HAL_RCC_OscConfig+0x452>
 80062c4:	e05c      	b.n	8006380 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062c6:	4b10      	ldr	r3, [pc, #64]	@ (8006308 <HAL_RCC_OscConfig+0x4b4>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062cc:	f7fc fe78 	bl	8002fc0 <HAL_GetTick>
 80062d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d2:	e008      	b.n	80062e6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d4:	f7fc fe74 	bl	8002fc0 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d901      	bls.n	80062e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e04d      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062e6:	4b06      	ldr	r3, [pc, #24]	@ (8006300 <HAL_RCC_OscConfig+0x4ac>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1f0      	bne.n	80062d4 <HAL_RCC_OscConfig+0x480>
 80062f2:	e045      	b.n	8006380 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d107      	bne.n	800630c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e040      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
 8006300:	40023800 	.word	0x40023800
 8006304:	40007000 	.word	0x40007000
 8006308:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800630c:	4b1f      	ldr	r3, [pc, #124]	@ (800638c <HAL_RCC_OscConfig+0x538>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d030      	beq.n	800637c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006324:	429a      	cmp	r2, r3
 8006326:	d129      	bne.n	800637c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006332:	429a      	cmp	r2, r3
 8006334:	d122      	bne.n	800637c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800633c:	4013      	ands	r3, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006342:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006344:	4293      	cmp	r3, r2
 8006346:	d119      	bne.n	800637c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006352:	085b      	lsrs	r3, r3, #1
 8006354:	3b01      	subs	r3, #1
 8006356:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006358:	429a      	cmp	r2, r3
 800635a:	d10f      	bne.n	800637c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006366:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006368:	429a      	cmp	r2, r3
 800636a:	d107      	bne.n	800637c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006376:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006378:	429a      	cmp	r2, r3
 800637a:	d001      	beq.n	8006380 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e000      	b.n	8006382 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	40023800 	.word	0x40023800

08006390 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e041      	b.n	8006426 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d106      	bne.n	80063bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7fc f80e 	bl	80023d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	3304      	adds	r3, #4
 80063cc:	4619      	mov	r1, r3
 80063ce:	4610      	mov	r0, r2
 80063d0:	f000 faec 	bl	80069ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
	...

08006430 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d109      	bne.n	8006454 <HAL_TIM_PWM_Start+0x24>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b01      	cmp	r3, #1
 800644a:	bf14      	ite	ne
 800644c:	2301      	movne	r3, #1
 800644e:	2300      	moveq	r3, #0
 8006450:	b2db      	uxtb	r3, r3
 8006452:	e022      	b.n	800649a <HAL_TIM_PWM_Start+0x6a>
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2b04      	cmp	r3, #4
 8006458:	d109      	bne.n	800646e <HAL_TIM_PWM_Start+0x3e>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b01      	cmp	r3, #1
 8006464:	bf14      	ite	ne
 8006466:	2301      	movne	r3, #1
 8006468:	2300      	moveq	r3, #0
 800646a:	b2db      	uxtb	r3, r3
 800646c:	e015      	b.n	800649a <HAL_TIM_PWM_Start+0x6a>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b08      	cmp	r3, #8
 8006472:	d109      	bne.n	8006488 <HAL_TIM_PWM_Start+0x58>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b01      	cmp	r3, #1
 800647e:	bf14      	ite	ne
 8006480:	2301      	movne	r3, #1
 8006482:	2300      	moveq	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	e008      	b.n	800649a <HAL_TIM_PWM_Start+0x6a>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b01      	cmp	r3, #1
 8006492:	bf14      	ite	ne
 8006494:	2301      	movne	r3, #1
 8006496:	2300      	moveq	r3, #0
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e07c      	b.n	800659c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d104      	bne.n	80064b2 <HAL_TIM_PWM_Start+0x82>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064b0:	e013      	b.n	80064da <HAL_TIM_PWM_Start+0xaa>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d104      	bne.n	80064c2 <HAL_TIM_PWM_Start+0x92>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064c0:	e00b      	b.n	80064da <HAL_TIM_PWM_Start+0xaa>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b08      	cmp	r3, #8
 80064c6:	d104      	bne.n	80064d2 <HAL_TIM_PWM_Start+0xa2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064d0:	e003      	b.n	80064da <HAL_TIM_PWM_Start+0xaa>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2202      	movs	r2, #2
 80064d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2201      	movs	r2, #1
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fcbe 	bl	8006e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a2d      	ldr	r2, [pc, #180]	@ (80065a4 <HAL_TIM_PWM_Start+0x174>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d004      	beq.n	80064fc <HAL_TIM_PWM_Start+0xcc>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a2c      	ldr	r2, [pc, #176]	@ (80065a8 <HAL_TIM_PWM_Start+0x178>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d101      	bne.n	8006500 <HAL_TIM_PWM_Start+0xd0>
 80064fc:	2301      	movs	r3, #1
 80064fe:	e000      	b.n	8006502 <HAL_TIM_PWM_Start+0xd2>
 8006500:	2300      	movs	r3, #0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d007      	beq.n	8006516 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006514:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a22      	ldr	r2, [pc, #136]	@ (80065a4 <HAL_TIM_PWM_Start+0x174>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d022      	beq.n	8006566 <HAL_TIM_PWM_Start+0x136>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006528:	d01d      	beq.n	8006566 <HAL_TIM_PWM_Start+0x136>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1f      	ldr	r2, [pc, #124]	@ (80065ac <HAL_TIM_PWM_Start+0x17c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d018      	beq.n	8006566 <HAL_TIM_PWM_Start+0x136>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a1d      	ldr	r2, [pc, #116]	@ (80065b0 <HAL_TIM_PWM_Start+0x180>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d013      	beq.n	8006566 <HAL_TIM_PWM_Start+0x136>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a1c      	ldr	r2, [pc, #112]	@ (80065b4 <HAL_TIM_PWM_Start+0x184>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00e      	beq.n	8006566 <HAL_TIM_PWM_Start+0x136>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a16      	ldr	r2, [pc, #88]	@ (80065a8 <HAL_TIM_PWM_Start+0x178>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d009      	beq.n	8006566 <HAL_TIM_PWM_Start+0x136>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a18      	ldr	r2, [pc, #96]	@ (80065b8 <HAL_TIM_PWM_Start+0x188>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d004      	beq.n	8006566 <HAL_TIM_PWM_Start+0x136>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a16      	ldr	r2, [pc, #88]	@ (80065bc <HAL_TIM_PWM_Start+0x18c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d111      	bne.n	800658a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b06      	cmp	r3, #6
 8006576:	d010      	beq.n	800659a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006588:	e007      	b.n	800659a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0201 	orr.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40010000 	.word	0x40010000
 80065a8:	40010400 	.word	0x40010400
 80065ac:	40000400 	.word	0x40000400
 80065b0:	40000800 	.word	0x40000800
 80065b4:	40000c00 	.word	0x40000c00
 80065b8:	40014000 	.word	0x40014000
 80065bc:	40001800 	.word	0x40001800

080065c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e097      	b.n	8006704 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d106      	bne.n	80065ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7fb fe7b 	bl	80022e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2202      	movs	r2, #2
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6812      	ldr	r2, [r2, #0]
 8006600:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006604:	f023 0307 	bic.w	r3, r3, #7
 8006608:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	3304      	adds	r3, #4
 8006612:	4619      	mov	r1, r3
 8006614:	4610      	mov	r0, r2
 8006616:	f000 f9c9 	bl	80069ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	4313      	orrs	r3, r2
 800663a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006642:	f023 0303 	bic.w	r3, r3, #3
 8006646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	021b      	lsls	r3, r3, #8
 8006652:	4313      	orrs	r3, r2
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006660:	f023 030c 	bic.w	r3, r3, #12
 8006664:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800666c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006670:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	4313      	orrs	r3, r2
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	4313      	orrs	r3, r2
 8006682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	011a      	lsls	r2, r3, #4
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	031b      	lsls	r3, r3, #12
 8006690:	4313      	orrs	r3, r2
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800669e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80066a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	4313      	orrs	r3, r2
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800671c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006724:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800672c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006734:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d110      	bne.n	800675e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d102      	bne.n	8006748 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006742:	7b7b      	ldrb	r3, [r7, #13]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d001      	beq.n	800674c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e069      	b.n	8006820 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800675c:	e031      	b.n	80067c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b04      	cmp	r3, #4
 8006762:	d110      	bne.n	8006786 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d102      	bne.n	8006770 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800676a:	7b3b      	ldrb	r3, [r7, #12]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d001      	beq.n	8006774 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e055      	b.n	8006820 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006784:	e01d      	b.n	80067c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d108      	bne.n	800679e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800678c:	7bbb      	ldrb	r3, [r7, #14]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d105      	bne.n	800679e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006792:	7b7b      	ldrb	r3, [r7, #13]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d102      	bne.n	800679e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006798:	7b3b      	ldrb	r3, [r7, #12]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d001      	beq.n	80067a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e03e      	b.n	8006820 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2202      	movs	r2, #2
 80067a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2202      	movs	r2, #2
 80067ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2202      	movs	r2, #2
 80067b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2202      	movs	r2, #2
 80067be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <HAL_TIM_Encoder_Start+0xc4>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d008      	beq.n	80067e0 <HAL_TIM_Encoder_Start+0xd4>
 80067ce:	e00f      	b.n	80067f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2201      	movs	r2, #1
 80067d6:	2100      	movs	r1, #0
 80067d8:	4618      	mov	r0, r3
 80067da:	f000 fb43 	bl	8006e64 <TIM_CCxChannelCmd>
      break;
 80067de:	e016      	b.n	800680e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2201      	movs	r2, #1
 80067e6:	2104      	movs	r1, #4
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fb3b 	bl	8006e64 <TIM_CCxChannelCmd>
      break;
 80067ee:	e00e      	b.n	800680e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2201      	movs	r2, #1
 80067f6:	2100      	movs	r1, #0
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fb33 	bl	8006e64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2201      	movs	r2, #1
 8006804:	2104      	movs	r1, #4
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fb2c 	bl	8006e64 <TIM_CCxChannelCmd>
      break;
 800680c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f042 0201 	orr.w	r2, r2, #1
 800681c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800683e:	2b01      	cmp	r3, #1
 8006840:	d101      	bne.n	8006846 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006842:	2302      	movs	r3, #2
 8006844:	e0ae      	b.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b0c      	cmp	r3, #12
 8006852:	f200 809f 	bhi.w	8006994 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006856:	a201      	add	r2, pc, #4	@ (adr r2, 800685c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	08006891 	.word	0x08006891
 8006860:	08006995 	.word	0x08006995
 8006864:	08006995 	.word	0x08006995
 8006868:	08006995 	.word	0x08006995
 800686c:	080068d1 	.word	0x080068d1
 8006870:	08006995 	.word	0x08006995
 8006874:	08006995 	.word	0x08006995
 8006878:	08006995 	.word	0x08006995
 800687c:	08006913 	.word	0x08006913
 8006880:	08006995 	.word	0x08006995
 8006884:	08006995 	.word	0x08006995
 8006888:	08006995 	.word	0x08006995
 800688c:	08006953 	.word	0x08006953
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	4618      	mov	r0, r3
 8006898:	f000 f934 	bl	8006b04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699a      	ldr	r2, [r3, #24]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0208 	orr.w	r2, r2, #8
 80068aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699a      	ldr	r2, [r3, #24]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0204 	bic.w	r2, r2, #4
 80068ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6999      	ldr	r1, [r3, #24]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	619a      	str	r2, [r3, #24]
      break;
 80068ce:	e064      	b.n	800699a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 f984 	bl	8006be4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6999      	ldr	r1, [r3, #24]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	021a      	lsls	r2, r3, #8
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	619a      	str	r2, [r3, #24]
      break;
 8006910:	e043      	b.n	800699a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	4618      	mov	r0, r3
 800691a:	f000 f9d9 	bl	8006cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69da      	ldr	r2, [r3, #28]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 0208 	orr.w	r2, r2, #8
 800692c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69da      	ldr	r2, [r3, #28]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0204 	bic.w	r2, r2, #4
 800693c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69d9      	ldr	r1, [r3, #28]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	691a      	ldr	r2, [r3, #16]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	61da      	str	r2, [r3, #28]
      break;
 8006950:	e023      	b.n	800699a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fa2d 	bl	8006db8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	69da      	ldr	r2, [r3, #28]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800696c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69da      	ldr	r2, [r3, #28]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800697c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69d9      	ldr	r1, [r3, #28]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	021a      	lsls	r2, r3, #8
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	61da      	str	r2, [r3, #28]
      break;
 8006992:	e002      	b.n	800699a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	75fb      	strb	r3, [r7, #23]
      break;
 8006998:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a46      	ldr	r2, [pc, #280]	@ (8006ad8 <TIM_Base_SetConfig+0x12c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d013      	beq.n	80069ec <TIM_Base_SetConfig+0x40>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ca:	d00f      	beq.n	80069ec <TIM_Base_SetConfig+0x40>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a43      	ldr	r2, [pc, #268]	@ (8006adc <TIM_Base_SetConfig+0x130>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00b      	beq.n	80069ec <TIM_Base_SetConfig+0x40>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a42      	ldr	r2, [pc, #264]	@ (8006ae0 <TIM_Base_SetConfig+0x134>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d007      	beq.n	80069ec <TIM_Base_SetConfig+0x40>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a41      	ldr	r2, [pc, #260]	@ (8006ae4 <TIM_Base_SetConfig+0x138>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d003      	beq.n	80069ec <TIM_Base_SetConfig+0x40>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a40      	ldr	r2, [pc, #256]	@ (8006ae8 <TIM_Base_SetConfig+0x13c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d108      	bne.n	80069fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a35      	ldr	r2, [pc, #212]	@ (8006ad8 <TIM_Base_SetConfig+0x12c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d02b      	beq.n	8006a5e <TIM_Base_SetConfig+0xb2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a0c:	d027      	beq.n	8006a5e <TIM_Base_SetConfig+0xb2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a32      	ldr	r2, [pc, #200]	@ (8006adc <TIM_Base_SetConfig+0x130>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d023      	beq.n	8006a5e <TIM_Base_SetConfig+0xb2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a31      	ldr	r2, [pc, #196]	@ (8006ae0 <TIM_Base_SetConfig+0x134>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d01f      	beq.n	8006a5e <TIM_Base_SetConfig+0xb2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a30      	ldr	r2, [pc, #192]	@ (8006ae4 <TIM_Base_SetConfig+0x138>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d01b      	beq.n	8006a5e <TIM_Base_SetConfig+0xb2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2f      	ldr	r2, [pc, #188]	@ (8006ae8 <TIM_Base_SetConfig+0x13c>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d017      	beq.n	8006a5e <TIM_Base_SetConfig+0xb2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a2e      	ldr	r2, [pc, #184]	@ (8006aec <TIM_Base_SetConfig+0x140>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d013      	beq.n	8006a5e <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2d      	ldr	r2, [pc, #180]	@ (8006af0 <TIM_Base_SetConfig+0x144>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00f      	beq.n	8006a5e <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a2c      	ldr	r2, [pc, #176]	@ (8006af4 <TIM_Base_SetConfig+0x148>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00b      	beq.n	8006a5e <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2b      	ldr	r2, [pc, #172]	@ (8006af8 <TIM_Base_SetConfig+0x14c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d007      	beq.n	8006a5e <TIM_Base_SetConfig+0xb2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a2a      	ldr	r2, [pc, #168]	@ (8006afc <TIM_Base_SetConfig+0x150>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d003      	beq.n	8006a5e <TIM_Base_SetConfig+0xb2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a29      	ldr	r2, [pc, #164]	@ (8006b00 <TIM_Base_SetConfig+0x154>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d108      	bne.n	8006a70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a10      	ldr	r2, [pc, #64]	@ (8006ad8 <TIM_Base_SetConfig+0x12c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d003      	beq.n	8006aa4 <TIM_Base_SetConfig+0xf8>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a12      	ldr	r2, [pc, #72]	@ (8006ae8 <TIM_Base_SetConfig+0x13c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d103      	bne.n	8006aac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	691a      	ldr	r2, [r3, #16]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d105      	bne.n	8006aca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	f023 0201 	bic.w	r2, r3, #1
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	611a      	str	r2, [r3, #16]
  }
}
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40010000 	.word	0x40010000
 8006adc:	40000400 	.word	0x40000400
 8006ae0:	40000800 	.word	0x40000800
 8006ae4:	40000c00 	.word	0x40000c00
 8006ae8:	40010400 	.word	0x40010400
 8006aec:	40014000 	.word	0x40014000
 8006af0:	40014400 	.word	0x40014400
 8006af4:	40014800 	.word	0x40014800
 8006af8:	40001800 	.word	0x40001800
 8006afc:	40001c00 	.word	0x40001c00
 8006b00:	40002000 	.word	0x40002000

08006b04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	f023 0201 	bic.w	r2, r3, #1
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0303 	bic.w	r3, r3, #3
 8006b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f023 0302 	bic.w	r3, r3, #2
 8006b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a20      	ldr	r2, [pc, #128]	@ (8006bdc <TIM_OC1_SetConfig+0xd8>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d003      	beq.n	8006b68 <TIM_OC1_SetConfig+0x64>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a1f      	ldr	r2, [pc, #124]	@ (8006be0 <TIM_OC1_SetConfig+0xdc>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d10c      	bne.n	8006b82 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f023 0308 	bic.w	r3, r3, #8
 8006b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f023 0304 	bic.w	r3, r3, #4
 8006b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a15      	ldr	r2, [pc, #84]	@ (8006bdc <TIM_OC1_SetConfig+0xd8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d003      	beq.n	8006b92 <TIM_OC1_SetConfig+0x8e>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a14      	ldr	r2, [pc, #80]	@ (8006be0 <TIM_OC1_SetConfig+0xdc>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d111      	bne.n	8006bb6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	621a      	str	r2, [r3, #32]
}
 8006bd0:	bf00      	nop
 8006bd2:	371c      	adds	r7, #28
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	40010000 	.word	0x40010000
 8006be0:	40010400 	.word	0x40010400

08006be4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	f023 0210 	bic.w	r2, r3, #16
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	021b      	lsls	r3, r3, #8
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f023 0320 	bic.w	r3, r3, #32
 8006c2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	011b      	lsls	r3, r3, #4
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a22      	ldr	r2, [pc, #136]	@ (8006cc8 <TIM_OC2_SetConfig+0xe4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d003      	beq.n	8006c4c <TIM_OC2_SetConfig+0x68>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a21      	ldr	r2, [pc, #132]	@ (8006ccc <TIM_OC2_SetConfig+0xe8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d10d      	bne.n	8006c68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a17      	ldr	r2, [pc, #92]	@ (8006cc8 <TIM_OC2_SetConfig+0xe4>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d003      	beq.n	8006c78 <TIM_OC2_SetConfig+0x94>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a16      	ldr	r2, [pc, #88]	@ (8006ccc <TIM_OC2_SetConfig+0xe8>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d113      	bne.n	8006ca0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	621a      	str	r2, [r3, #32]
}
 8006cba:	bf00      	nop
 8006cbc:	371c      	adds	r7, #28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	40010000 	.word	0x40010000
 8006ccc:	40010400 	.word	0x40010400

08006cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 0303 	bic.w	r3, r3, #3
 8006d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	021b      	lsls	r3, r3, #8
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a21      	ldr	r2, [pc, #132]	@ (8006db0 <TIM_OC3_SetConfig+0xe0>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d003      	beq.n	8006d36 <TIM_OC3_SetConfig+0x66>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a20      	ldr	r2, [pc, #128]	@ (8006db4 <TIM_OC3_SetConfig+0xe4>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d10d      	bne.n	8006d52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	021b      	lsls	r3, r3, #8
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a16      	ldr	r2, [pc, #88]	@ (8006db0 <TIM_OC3_SetConfig+0xe0>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d003      	beq.n	8006d62 <TIM_OC3_SetConfig+0x92>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a15      	ldr	r2, [pc, #84]	@ (8006db4 <TIM_OC3_SetConfig+0xe4>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d113      	bne.n	8006d8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	621a      	str	r2, [r3, #32]
}
 8006da4:	bf00      	nop
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	40010000 	.word	0x40010000
 8006db4:	40010400 	.word	0x40010400

08006db8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	021b      	lsls	r3, r3, #8
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	031b      	lsls	r3, r3, #12
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a12      	ldr	r2, [pc, #72]	@ (8006e5c <TIM_OC4_SetConfig+0xa4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d003      	beq.n	8006e20 <TIM_OC4_SetConfig+0x68>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a11      	ldr	r2, [pc, #68]	@ (8006e60 <TIM_OC4_SetConfig+0xa8>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d109      	bne.n	8006e34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	019b      	lsls	r3, r3, #6
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	621a      	str	r2, [r3, #32]
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40010000 	.word	0x40010000
 8006e60:	40010400 	.word	0x40010400

08006e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b087      	sub	sp, #28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f003 031f 	and.w	r3, r3, #31
 8006e76:	2201      	movs	r2, #1
 8006e78:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1a      	ldr	r2, [r3, #32]
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	43db      	mvns	r3, r3
 8006e86:	401a      	ands	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a1a      	ldr	r2, [r3, #32]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f003 031f 	and.w	r3, r3, #31
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	fa01 f303 	lsl.w	r3, r1, r3
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	621a      	str	r2, [r3, #32]
}
 8006ea2:	bf00      	nop
 8006ea4:	371c      	adds	r7, #28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
	...

08006eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d101      	bne.n	8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e05a      	b.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a21      	ldr	r2, [pc, #132]	@ (8006f8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d022      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f14:	d01d      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8006f90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d018      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a1b      	ldr	r2, [pc, #108]	@ (8006f94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d013      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d00e      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a18      	ldr	r2, [pc, #96]	@ (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d009      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a17      	ldr	r2, [pc, #92]	@ (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d004      	beq.n	8006f52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a15      	ldr	r2, [pc, #84]	@ (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d10c      	bne.n	8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40010000 	.word	0x40010000
 8006f90:	40000400 	.word	0x40000400
 8006f94:	40000800 	.word	0x40000800
 8006f98:	40000c00 	.word	0x40000c00
 8006f9c:	40010400 	.word	0x40010400
 8006fa0:	40014000 	.word	0x40014000
 8006fa4:	40001800 	.word	0x40001800

08006fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e042      	b.n	8007040 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7fb fa7e 	bl	80024d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2224      	movs	r2, #36	@ 0x24
 8006fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fc85 	bl	80078fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	691a      	ldr	r2, [r3, #16]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695a      	ldr	r2, [r3, #20]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68da      	ldr	r2, [r3, #12]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b0ba      	sub	sp, #232	@ 0xe8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800706e:	2300      	movs	r3, #0
 8007070:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007074:	2300      	movs	r3, #0
 8007076:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10f      	bne.n	80070ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007092:	f003 0320 	and.w	r3, r3, #32
 8007096:	2b00      	cmp	r3, #0
 8007098:	d009      	beq.n	80070ae <HAL_UART_IRQHandler+0x66>
 800709a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fb69 	bl	800777e <UART_Receive_IT>
      return;
 80070ac:	e25b      	b.n	8007566 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 80de 	beq.w	8007274 <HAL_UART_IRQHandler+0x22c>
 80070b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d106      	bne.n	80070d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 80d1 	beq.w	8007274 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <HAL_UART_IRQHandler+0xae>
 80070de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d005      	beq.n	80070f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ee:	f043 0201 	orr.w	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00b      	beq.n	800711a <HAL_UART_IRQHandler+0xd2>
 8007102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007112:	f043 0202 	orr.w	r2, r3, #2
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800711a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <HAL_UART_IRQHandler+0xf6>
 8007126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007136:	f043 0204 	orr.w	r2, r3, #4
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800713e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d011      	beq.n	800716e <HAL_UART_IRQHandler+0x126>
 800714a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	d105      	bne.n	8007162 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d005      	beq.n	800716e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007166:	f043 0208 	orr.w	r2, r3, #8
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 81f2 	beq.w	800755c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b00      	cmp	r3, #0
 8007182:	d008      	beq.n	8007196 <HAL_UART_IRQHandler+0x14e>
 8007184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007188:	f003 0320 	and.w	r3, r3, #32
 800718c:	2b00      	cmp	r3, #0
 800718e:	d002      	beq.n	8007196 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 faf4 	bl	800777e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071a0:	2b40      	cmp	r3, #64	@ 0x40
 80071a2:	bf0c      	ite	eq
 80071a4:	2301      	moveq	r3, #1
 80071a6:	2300      	movne	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d103      	bne.n	80071c2 <HAL_UART_IRQHandler+0x17a>
 80071ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d04f      	beq.n	8007262 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f9fc 	bl	80075c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d2:	2b40      	cmp	r3, #64	@ 0x40
 80071d4:	d141      	bne.n	800725a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3314      	adds	r3, #20
 80071dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80071ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3314      	adds	r3, #20
 80071fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007202:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007206:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800720e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800721a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1d9      	bne.n	80071d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d013      	beq.n	8007252 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800722e:	4a7e      	ldr	r2, [pc, #504]	@ (8007428 <HAL_UART_IRQHandler+0x3e0>)
 8007230:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007236:	4618      	mov	r0, r3
 8007238:	f7fc fb94 	bl	8003964 <HAL_DMA_Abort_IT>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d016      	beq.n	8007270 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800724c:	4610      	mov	r0, r2
 800724e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007250:	e00e      	b.n	8007270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f99e 	bl	8007594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007258:	e00a      	b.n	8007270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f99a 	bl	8007594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007260:	e006      	b.n	8007270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f996 	bl	8007594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800726e:	e175      	b.n	800755c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007270:	bf00      	nop
    return;
 8007272:	e173      	b.n	800755c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007278:	2b01      	cmp	r3, #1
 800727a:	f040 814f 	bne.w	800751c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800727e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 8148 	beq.w	800751c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800728c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007290:	f003 0310 	and.w	r3, r3, #16
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 8141 	beq.w	800751c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800729a:	2300      	movs	r3, #0
 800729c:	60bb      	str	r3, [r7, #8]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	60bb      	str	r3, [r7, #8]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	60bb      	str	r3, [r7, #8]
 80072ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072ba:	2b40      	cmp	r3, #64	@ 0x40
 80072bc:	f040 80b6 	bne.w	800742c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 8145 	beq.w	8007560 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80072da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072de:	429a      	cmp	r2, r3
 80072e0:	f080 813e 	bcs.w	8007560 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072f6:	f000 8088 	beq.w	800740a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	330c      	adds	r3, #12
 8007300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007308:	e853 3f00 	ldrex	r3, [r3]
 800730c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007310:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	330c      	adds	r3, #12
 8007322:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007326:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800732a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007332:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800733e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1d9      	bne.n	80072fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3314      	adds	r3, #20
 800734c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007356:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007358:	f023 0301 	bic.w	r3, r3, #1
 800735c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3314      	adds	r3, #20
 8007366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800736a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800736e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007372:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800737c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e1      	bne.n	8007346 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3314      	adds	r3, #20
 8007388:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3314      	adds	r3, #20
 80073a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80073a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80073a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80073ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80073b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e3      	bne.n	8007382 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2220      	movs	r2, #32
 80073be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	330c      	adds	r3, #12
 80073ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073d2:	e853 3f00 	ldrex	r3, [r3]
 80073d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073da:	f023 0310 	bic.w	r3, r3, #16
 80073de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	330c      	adds	r3, #12
 80073e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80073ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 80073ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e3      	bne.n	80073c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007404:	4618      	mov	r0, r3
 8007406:	f7fc fa3d 	bl	8003884 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2202      	movs	r2, #2
 800740e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007418:	b29b      	uxth	r3, r3
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	b29b      	uxth	r3, r3
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f8c1 	bl	80075a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007426:	e09b      	b.n	8007560 <HAL_UART_IRQHandler+0x518>
 8007428:	08007687 	.word	0x08007687
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007434:	b29b      	uxth	r3, r3
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 808e 	beq.w	8007564 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007448:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8089 	beq.w	8007564 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	330c      	adds	r3, #12
 8007458:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007468:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	330c      	adds	r3, #12
 8007472:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007476:	647a      	str	r2, [r7, #68]	@ 0x44
 8007478:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800747c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e3      	bne.n	8007452 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3314      	adds	r3, #20
 8007490:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	623b      	str	r3, [r7, #32]
   return(result);
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	f023 0301 	bic.w	r3, r3, #1
 80074a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3314      	adds	r3, #20
 80074aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80074ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80074b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e3      	bne.n	800748a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	330c      	adds	r3, #12
 80074d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	60fb      	str	r3, [r7, #12]
   return(result);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0310 	bic.w	r3, r3, #16
 80074e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	330c      	adds	r3, #12
 80074f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80074f4:	61fa      	str	r2, [r7, #28]
 80074f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	69b9      	ldr	r1, [r7, #24]
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	617b      	str	r3, [r7, #20]
   return(result);
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e3      	bne.n	80074d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800750e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f847 	bl	80075a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800751a:	e023      	b.n	8007564 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800751c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007524:	2b00      	cmp	r3, #0
 8007526:	d009      	beq.n	800753c <HAL_UART_IRQHandler+0x4f4>
 8007528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800752c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f8ba 	bl	80076ae <UART_Transmit_IT>
    return;
 800753a:	e014      	b.n	8007566 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800753c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00e      	beq.n	8007566 <HAL_UART_IRQHandler+0x51e>
 8007548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800754c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007550:	2b00      	cmp	r3, #0
 8007552:	d008      	beq.n	8007566 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f8fa 	bl	800774e <UART_EndTransmit_IT>
    return;
 800755a:	e004      	b.n	8007566 <HAL_UART_IRQHandler+0x51e>
    return;
 800755c:	bf00      	nop
 800755e:	e002      	b.n	8007566 <HAL_UART_IRQHandler+0x51e>
      return;
 8007560:	bf00      	nop
 8007562:	e000      	b.n	8007566 <HAL_UART_IRQHandler+0x51e>
      return;
 8007564:	bf00      	nop
  }
}
 8007566:	37e8      	adds	r7, #232	@ 0xe8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b095      	sub	sp, #84	@ 0x54
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	330c      	adds	r3, #12
 80075ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d2:	e853 3f00 	ldrex	r3, [r3]
 80075d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	330c      	adds	r3, #12
 80075e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80075e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80075ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075f0:	e841 2300 	strex	r3, r2, [r1]
 80075f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1e5      	bne.n	80075c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3314      	adds	r3, #20
 8007602:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	e853 3f00 	ldrex	r3, [r3]
 800760a:	61fb      	str	r3, [r7, #28]
   return(result);
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	f023 0301 	bic.w	r3, r3, #1
 8007612:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3314      	adds	r3, #20
 800761a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800761c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800761e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007620:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007624:	e841 2300 	strex	r3, r2, [r1]
 8007628:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1e5      	bne.n	80075fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007634:	2b01      	cmp	r3, #1
 8007636:	d119      	bne.n	800766c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	330c      	adds	r3, #12
 800763e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	60bb      	str	r3, [r7, #8]
   return(result);
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f023 0310 	bic.w	r3, r3, #16
 800764e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	330c      	adds	r3, #12
 8007656:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007658:	61ba      	str	r2, [r7, #24]
 800765a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	6979      	ldr	r1, [r7, #20]
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	613b      	str	r3, [r7, #16]
   return(result);
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e5      	bne.n	8007638 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2220      	movs	r2, #32
 8007670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800767a:	bf00      	nop
 800767c:	3754      	adds	r7, #84	@ 0x54
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007692:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f7ff ff77 	bl	8007594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076a6:	bf00      	nop
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b085      	sub	sp, #20
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b21      	cmp	r3, #33	@ 0x21
 80076c0:	d13e      	bne.n	8007740 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076ca:	d114      	bne.n	80076f6 <UART_Transmit_IT+0x48>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d110      	bne.n	80076f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	461a      	mov	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	1c9a      	adds	r2, r3, #2
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	621a      	str	r2, [r3, #32]
 80076f4:	e008      	b.n	8007708 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	1c59      	adds	r1, r3, #1
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	6211      	str	r1, [r2, #32]
 8007700:	781a      	ldrb	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29b      	uxth	r3, r3
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	4619      	mov	r1, r3
 8007716:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10f      	bne.n	800773c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68da      	ldr	r2, [r3, #12]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800772a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800773a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	e000      	b.n	8007742 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007740:	2302      	movs	r3, #2
  }
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b082      	sub	sp, #8
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007764:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2220      	movs	r2, #32
 800776a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff fefc 	bl	800756c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b08c      	sub	sp, #48	@ 0x30
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b22      	cmp	r3, #34	@ 0x22
 8007790:	f040 80ae 	bne.w	80078f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800779c:	d117      	bne.n	80077ce <UART_Receive_IT+0x50>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d113      	bne.n	80077ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077bc:	b29a      	uxth	r2, r3
 80077be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c6:	1c9a      	adds	r2, r3, #2
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80077cc:	e026      	b.n	800781c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80077d4:	2300      	movs	r3, #0
 80077d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077e0:	d007      	beq.n	80077f2 <UART_Receive_IT+0x74>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10a      	bne.n	8007800 <UART_Receive_IT+0x82>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fc:	701a      	strb	r2, [r3, #0]
 80077fe:	e008      	b.n	8007812 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	b2db      	uxtb	r3, r3
 8007808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800780c:	b2da      	uxtb	r2, r3
 800780e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007810:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007820:	b29b      	uxth	r3, r3
 8007822:	3b01      	subs	r3, #1
 8007824:	b29b      	uxth	r3, r3
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	4619      	mov	r1, r3
 800782a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800782c:	2b00      	cmp	r3, #0
 800782e:	d15d      	bne.n	80078ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68da      	ldr	r2, [r3, #12]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f022 0220 	bic.w	r2, r2, #32
 800783e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800784e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	695a      	ldr	r2, [r3, #20]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0201 	bic.w	r2, r2, #1
 800785e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007872:	2b01      	cmp	r3, #1
 8007874:	d135      	bne.n	80078e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	330c      	adds	r3, #12
 8007882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	613b      	str	r3, [r7, #16]
   return(result);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f023 0310 	bic.w	r3, r3, #16
 8007892:	627b      	str	r3, [r7, #36]	@ 0x24
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	330c      	adds	r3, #12
 800789a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800789c:	623a      	str	r2, [r7, #32]
 800789e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	69f9      	ldr	r1, [r7, #28]
 80078a2:	6a3a      	ldr	r2, [r7, #32]
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e5      	bne.n	800787c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0310 	and.w	r3, r3, #16
 80078ba:	2b10      	cmp	r3, #16
 80078bc:	d10a      	bne.n	80078d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078be:	2300      	movs	r3, #0
 80078c0:	60fb      	str	r3, [r7, #12]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	60fb      	str	r3, [r7, #12]
 80078d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7ff fe64 	bl	80075a8 <HAL_UARTEx_RxEventCallback>
 80078e0:	e002      	b.n	80078e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7ff fe4c 	bl	8007580 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	e002      	b.n	80078f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	e000      	b.n	80078f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80078f0:	2302      	movs	r3, #2
  }
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3730      	adds	r7, #48	@ 0x30
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007900:	b0c0      	sub	sp, #256	@ 0x100
 8007902:	af00      	add	r7, sp, #0
 8007904:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007918:	68d9      	ldr	r1, [r3, #12]
 800791a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	ea40 0301 	orr.w	r3, r0, r1
 8007924:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	431a      	orrs	r2, r3
 8007934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	431a      	orrs	r2, r3
 800793c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	4313      	orrs	r3, r2
 8007944:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007954:	f021 010c 	bic.w	r1, r1, #12
 8007958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007962:	430b      	orrs	r3, r1
 8007964:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007976:	6999      	ldr	r1, [r3, #24]
 8007978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	ea40 0301 	orr.w	r3, r0, r1
 8007982:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	4b8f      	ldr	r3, [pc, #572]	@ (8007bc8 <UART_SetConfig+0x2cc>)
 800798c:	429a      	cmp	r2, r3
 800798e:	d005      	beq.n	800799c <UART_SetConfig+0xa0>
 8007990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	4b8d      	ldr	r3, [pc, #564]	@ (8007bcc <UART_SetConfig+0x2d0>)
 8007998:	429a      	cmp	r2, r3
 800799a:	d104      	bne.n	80079a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800799c:	f7fe f816 	bl	80059cc <HAL_RCC_GetPCLK2Freq>
 80079a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80079a4:	e003      	b.n	80079ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079a6:	f7fd fffd 	bl	80059a4 <HAL_RCC_GetPCLK1Freq>
 80079aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079b8:	f040 810c 	bne.w	8007bd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079c0:	2200      	movs	r2, #0
 80079c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80079c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80079ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80079ce:	4622      	mov	r2, r4
 80079d0:	462b      	mov	r3, r5
 80079d2:	1891      	adds	r1, r2, r2
 80079d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80079d6:	415b      	adcs	r3, r3
 80079d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80079da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80079de:	4621      	mov	r1, r4
 80079e0:	eb12 0801 	adds.w	r8, r2, r1
 80079e4:	4629      	mov	r1, r5
 80079e6:	eb43 0901 	adc.w	r9, r3, r1
 80079ea:	f04f 0200 	mov.w	r2, #0
 80079ee:	f04f 0300 	mov.w	r3, #0
 80079f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079fe:	4690      	mov	r8, r2
 8007a00:	4699      	mov	r9, r3
 8007a02:	4623      	mov	r3, r4
 8007a04:	eb18 0303 	adds.w	r3, r8, r3
 8007a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a0c:	462b      	mov	r3, r5
 8007a0e:	eb49 0303 	adc.w	r3, r9, r3
 8007a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007a26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	18db      	adds	r3, r3, r3
 8007a2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a30:	4613      	mov	r3, r2
 8007a32:	eb42 0303 	adc.w	r3, r2, r3
 8007a36:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007a3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007a40:	f7f9 f932 	bl	8000ca8 <__aeabi_uldivmod>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	4b61      	ldr	r3, [pc, #388]	@ (8007bd0 <UART_SetConfig+0x2d4>)
 8007a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a4e:	095b      	lsrs	r3, r3, #5
 8007a50:	011c      	lsls	r4, r3, #4
 8007a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a56:	2200      	movs	r2, #0
 8007a58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007a60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007a64:	4642      	mov	r2, r8
 8007a66:	464b      	mov	r3, r9
 8007a68:	1891      	adds	r1, r2, r2
 8007a6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007a6c:	415b      	adcs	r3, r3
 8007a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a74:	4641      	mov	r1, r8
 8007a76:	eb12 0a01 	adds.w	sl, r2, r1
 8007a7a:	4649      	mov	r1, r9
 8007a7c:	eb43 0b01 	adc.w	fp, r3, r1
 8007a80:	f04f 0200 	mov.w	r2, #0
 8007a84:	f04f 0300 	mov.w	r3, #0
 8007a88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a94:	4692      	mov	sl, r2
 8007a96:	469b      	mov	fp, r3
 8007a98:	4643      	mov	r3, r8
 8007a9a:	eb1a 0303 	adds.w	r3, sl, r3
 8007a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007aa2:	464b      	mov	r3, r9
 8007aa4:	eb4b 0303 	adc.w	r3, fp, r3
 8007aa8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ab8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007abc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	18db      	adds	r3, r3, r3
 8007ac4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	eb42 0303 	adc.w	r3, r2, r3
 8007acc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ace:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007ad2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007ad6:	f7f9 f8e7 	bl	8000ca8 <__aeabi_uldivmod>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4611      	mov	r1, r2
 8007ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8007bd0 <UART_SetConfig+0x2d4>)
 8007ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8007ae6:	095b      	lsrs	r3, r3, #5
 8007ae8:	2264      	movs	r2, #100	@ 0x64
 8007aea:	fb02 f303 	mul.w	r3, r2, r3
 8007aee:	1acb      	subs	r3, r1, r3
 8007af0:	00db      	lsls	r3, r3, #3
 8007af2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007af6:	4b36      	ldr	r3, [pc, #216]	@ (8007bd0 <UART_SetConfig+0x2d4>)
 8007af8:	fba3 2302 	umull	r2, r3, r3, r2
 8007afc:	095b      	lsrs	r3, r3, #5
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007b04:	441c      	add	r4, r3
 8007b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007b14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007b18:	4642      	mov	r2, r8
 8007b1a:	464b      	mov	r3, r9
 8007b1c:	1891      	adds	r1, r2, r2
 8007b1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007b20:	415b      	adcs	r3, r3
 8007b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007b28:	4641      	mov	r1, r8
 8007b2a:	1851      	adds	r1, r2, r1
 8007b2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007b2e:	4649      	mov	r1, r9
 8007b30:	414b      	adcs	r3, r1
 8007b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b34:	f04f 0200 	mov.w	r2, #0
 8007b38:	f04f 0300 	mov.w	r3, #0
 8007b3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007b40:	4659      	mov	r1, fp
 8007b42:	00cb      	lsls	r3, r1, #3
 8007b44:	4651      	mov	r1, sl
 8007b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b4a:	4651      	mov	r1, sl
 8007b4c:	00ca      	lsls	r2, r1, #3
 8007b4e:	4610      	mov	r0, r2
 8007b50:	4619      	mov	r1, r3
 8007b52:	4603      	mov	r3, r0
 8007b54:	4642      	mov	r2, r8
 8007b56:	189b      	adds	r3, r3, r2
 8007b58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b5c:	464b      	mov	r3, r9
 8007b5e:	460a      	mov	r2, r1
 8007b60:	eb42 0303 	adc.w	r3, r2, r3
 8007b64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	18db      	adds	r3, r3, r3
 8007b80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b82:	4613      	mov	r3, r2
 8007b84:	eb42 0303 	adc.w	r3, r2, r3
 8007b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007b92:	f7f9 f889 	bl	8000ca8 <__aeabi_uldivmod>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd0 <UART_SetConfig+0x2d4>)
 8007b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8007ba0:	095b      	lsrs	r3, r3, #5
 8007ba2:	2164      	movs	r1, #100	@ 0x64
 8007ba4:	fb01 f303 	mul.w	r3, r1, r3
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	3332      	adds	r3, #50	@ 0x32
 8007bae:	4a08      	ldr	r2, [pc, #32]	@ (8007bd0 <UART_SetConfig+0x2d4>)
 8007bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb4:	095b      	lsrs	r3, r3, #5
 8007bb6:	f003 0207 	and.w	r2, r3, #7
 8007bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4422      	add	r2, r4
 8007bc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007bc4:	e106      	b.n	8007dd4 <UART_SetConfig+0x4d8>
 8007bc6:	bf00      	nop
 8007bc8:	40011000 	.word	0x40011000
 8007bcc:	40011400 	.word	0x40011400
 8007bd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007bde:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007be2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007be6:	4642      	mov	r2, r8
 8007be8:	464b      	mov	r3, r9
 8007bea:	1891      	adds	r1, r2, r2
 8007bec:	6239      	str	r1, [r7, #32]
 8007bee:	415b      	adcs	r3, r3
 8007bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007bf6:	4641      	mov	r1, r8
 8007bf8:	1854      	adds	r4, r2, r1
 8007bfa:	4649      	mov	r1, r9
 8007bfc:	eb43 0501 	adc.w	r5, r3, r1
 8007c00:	f04f 0200 	mov.w	r2, #0
 8007c04:	f04f 0300 	mov.w	r3, #0
 8007c08:	00eb      	lsls	r3, r5, #3
 8007c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c0e:	00e2      	lsls	r2, r4, #3
 8007c10:	4614      	mov	r4, r2
 8007c12:	461d      	mov	r5, r3
 8007c14:	4643      	mov	r3, r8
 8007c16:	18e3      	adds	r3, r4, r3
 8007c18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c1c:	464b      	mov	r3, r9
 8007c1e:	eb45 0303 	adc.w	r3, r5, r3
 8007c22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c36:	f04f 0200 	mov.w	r2, #0
 8007c3a:	f04f 0300 	mov.w	r3, #0
 8007c3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007c42:	4629      	mov	r1, r5
 8007c44:	008b      	lsls	r3, r1, #2
 8007c46:	4621      	mov	r1, r4
 8007c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	008a      	lsls	r2, r1, #2
 8007c50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007c54:	f7f9 f828 	bl	8000ca8 <__aeabi_uldivmod>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4b60      	ldr	r3, [pc, #384]	@ (8007de0 <UART_SetConfig+0x4e4>)
 8007c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c62:	095b      	lsrs	r3, r3, #5
 8007c64:	011c      	lsls	r4, r3, #4
 8007c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007c74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c78:	4642      	mov	r2, r8
 8007c7a:	464b      	mov	r3, r9
 8007c7c:	1891      	adds	r1, r2, r2
 8007c7e:	61b9      	str	r1, [r7, #24]
 8007c80:	415b      	adcs	r3, r3
 8007c82:	61fb      	str	r3, [r7, #28]
 8007c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c88:	4641      	mov	r1, r8
 8007c8a:	1851      	adds	r1, r2, r1
 8007c8c:	6139      	str	r1, [r7, #16]
 8007c8e:	4649      	mov	r1, r9
 8007c90:	414b      	adcs	r3, r1
 8007c92:	617b      	str	r3, [r7, #20]
 8007c94:	f04f 0200 	mov.w	r2, #0
 8007c98:	f04f 0300 	mov.w	r3, #0
 8007c9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ca0:	4659      	mov	r1, fp
 8007ca2:	00cb      	lsls	r3, r1, #3
 8007ca4:	4651      	mov	r1, sl
 8007ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007caa:	4651      	mov	r1, sl
 8007cac:	00ca      	lsls	r2, r1, #3
 8007cae:	4610      	mov	r0, r2
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	189b      	adds	r3, r3, r2
 8007cb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cbc:	464b      	mov	r3, r9
 8007cbe:	460a      	mov	r2, r1
 8007cc0:	eb42 0303 	adc.w	r3, r2, r3
 8007cc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007cd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	f04f 0300 	mov.w	r3, #0
 8007cdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ce0:	4649      	mov	r1, r9
 8007ce2:	008b      	lsls	r3, r1, #2
 8007ce4:	4641      	mov	r1, r8
 8007ce6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cea:	4641      	mov	r1, r8
 8007cec:	008a      	lsls	r2, r1, #2
 8007cee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007cf2:	f7f8 ffd9 	bl	8000ca8 <__aeabi_uldivmod>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	4b38      	ldr	r3, [pc, #224]	@ (8007de0 <UART_SetConfig+0x4e4>)
 8007cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8007d02:	095b      	lsrs	r3, r3, #5
 8007d04:	2264      	movs	r2, #100	@ 0x64
 8007d06:	fb02 f303 	mul.w	r3, r2, r3
 8007d0a:	1acb      	subs	r3, r1, r3
 8007d0c:	011b      	lsls	r3, r3, #4
 8007d0e:	3332      	adds	r3, #50	@ 0x32
 8007d10:	4a33      	ldr	r2, [pc, #204]	@ (8007de0 <UART_SetConfig+0x4e4>)
 8007d12:	fba2 2303 	umull	r2, r3, r2, r3
 8007d16:	095b      	lsrs	r3, r3, #5
 8007d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d1c:	441c      	add	r4, r3
 8007d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d22:	2200      	movs	r2, #0
 8007d24:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d26:	677a      	str	r2, [r7, #116]	@ 0x74
 8007d28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007d2c:	4642      	mov	r2, r8
 8007d2e:	464b      	mov	r3, r9
 8007d30:	1891      	adds	r1, r2, r2
 8007d32:	60b9      	str	r1, [r7, #8]
 8007d34:	415b      	adcs	r3, r3
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d3c:	4641      	mov	r1, r8
 8007d3e:	1851      	adds	r1, r2, r1
 8007d40:	6039      	str	r1, [r7, #0]
 8007d42:	4649      	mov	r1, r9
 8007d44:	414b      	adcs	r3, r1
 8007d46:	607b      	str	r3, [r7, #4]
 8007d48:	f04f 0200 	mov.w	r2, #0
 8007d4c:	f04f 0300 	mov.w	r3, #0
 8007d50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d54:	4659      	mov	r1, fp
 8007d56:	00cb      	lsls	r3, r1, #3
 8007d58:	4651      	mov	r1, sl
 8007d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d5e:	4651      	mov	r1, sl
 8007d60:	00ca      	lsls	r2, r1, #3
 8007d62:	4610      	mov	r0, r2
 8007d64:	4619      	mov	r1, r3
 8007d66:	4603      	mov	r3, r0
 8007d68:	4642      	mov	r2, r8
 8007d6a:	189b      	adds	r3, r3, r2
 8007d6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d6e:	464b      	mov	r3, r9
 8007d70:	460a      	mov	r2, r1
 8007d72:	eb42 0303 	adc.w	r3, r2, r3
 8007d76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d82:	667a      	str	r2, [r7, #100]	@ 0x64
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	f04f 0300 	mov.w	r3, #0
 8007d8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007d90:	4649      	mov	r1, r9
 8007d92:	008b      	lsls	r3, r1, #2
 8007d94:	4641      	mov	r1, r8
 8007d96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d9a:	4641      	mov	r1, r8
 8007d9c:	008a      	lsls	r2, r1, #2
 8007d9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007da2:	f7f8 ff81 	bl	8000ca8 <__aeabi_uldivmod>
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	4b0d      	ldr	r3, [pc, #52]	@ (8007de0 <UART_SetConfig+0x4e4>)
 8007dac:	fba3 1302 	umull	r1, r3, r3, r2
 8007db0:	095b      	lsrs	r3, r3, #5
 8007db2:	2164      	movs	r1, #100	@ 0x64
 8007db4:	fb01 f303 	mul.w	r3, r1, r3
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	011b      	lsls	r3, r3, #4
 8007dbc:	3332      	adds	r3, #50	@ 0x32
 8007dbe:	4a08      	ldr	r2, [pc, #32]	@ (8007de0 <UART_SetConfig+0x4e4>)
 8007dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc4:	095b      	lsrs	r3, r3, #5
 8007dc6:	f003 020f 	and.w	r2, r3, #15
 8007dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4422      	add	r2, r4
 8007dd2:	609a      	str	r2, [r3, #8]
}
 8007dd4:	bf00      	nop
 8007dd6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007de0:	51eb851f 	.word	0x51eb851f

08007de4 <__cvt>:
 8007de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007de8:	ec57 6b10 	vmov	r6, r7, d0
 8007dec:	2f00      	cmp	r7, #0
 8007dee:	460c      	mov	r4, r1
 8007df0:	4619      	mov	r1, r3
 8007df2:	463b      	mov	r3, r7
 8007df4:	bfbb      	ittet	lt
 8007df6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007dfa:	461f      	movlt	r7, r3
 8007dfc:	2300      	movge	r3, #0
 8007dfe:	232d      	movlt	r3, #45	@ 0x2d
 8007e00:	700b      	strb	r3, [r1, #0]
 8007e02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007e08:	4691      	mov	r9, r2
 8007e0a:	f023 0820 	bic.w	r8, r3, #32
 8007e0e:	bfbc      	itt	lt
 8007e10:	4632      	movlt	r2, r6
 8007e12:	4616      	movlt	r6, r2
 8007e14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e18:	d005      	beq.n	8007e26 <__cvt+0x42>
 8007e1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007e1e:	d100      	bne.n	8007e22 <__cvt+0x3e>
 8007e20:	3401      	adds	r4, #1
 8007e22:	2102      	movs	r1, #2
 8007e24:	e000      	b.n	8007e28 <__cvt+0x44>
 8007e26:	2103      	movs	r1, #3
 8007e28:	ab03      	add	r3, sp, #12
 8007e2a:	9301      	str	r3, [sp, #4]
 8007e2c:	ab02      	add	r3, sp, #8
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	ec47 6b10 	vmov	d0, r6, r7
 8007e34:	4653      	mov	r3, sl
 8007e36:	4622      	mov	r2, r4
 8007e38:	f000 fe8e 	bl	8008b58 <_dtoa_r>
 8007e3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007e40:	4605      	mov	r5, r0
 8007e42:	d119      	bne.n	8007e78 <__cvt+0x94>
 8007e44:	f019 0f01 	tst.w	r9, #1
 8007e48:	d00e      	beq.n	8007e68 <__cvt+0x84>
 8007e4a:	eb00 0904 	add.w	r9, r0, r4
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2300      	movs	r3, #0
 8007e52:	4630      	mov	r0, r6
 8007e54:	4639      	mov	r1, r7
 8007e56:	f7f8 fe67 	bl	8000b28 <__aeabi_dcmpeq>
 8007e5a:	b108      	cbz	r0, 8007e60 <__cvt+0x7c>
 8007e5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e60:	2230      	movs	r2, #48	@ 0x30
 8007e62:	9b03      	ldr	r3, [sp, #12]
 8007e64:	454b      	cmp	r3, r9
 8007e66:	d31e      	bcc.n	8007ea6 <__cvt+0xc2>
 8007e68:	9b03      	ldr	r3, [sp, #12]
 8007e6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e6c:	1b5b      	subs	r3, r3, r5
 8007e6e:	4628      	mov	r0, r5
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	b004      	add	sp, #16
 8007e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007e7c:	eb00 0904 	add.w	r9, r0, r4
 8007e80:	d1e5      	bne.n	8007e4e <__cvt+0x6a>
 8007e82:	7803      	ldrb	r3, [r0, #0]
 8007e84:	2b30      	cmp	r3, #48	@ 0x30
 8007e86:	d10a      	bne.n	8007e9e <__cvt+0xba>
 8007e88:	2200      	movs	r2, #0
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	4639      	mov	r1, r7
 8007e90:	f7f8 fe4a 	bl	8000b28 <__aeabi_dcmpeq>
 8007e94:	b918      	cbnz	r0, 8007e9e <__cvt+0xba>
 8007e96:	f1c4 0401 	rsb	r4, r4, #1
 8007e9a:	f8ca 4000 	str.w	r4, [sl]
 8007e9e:	f8da 3000 	ldr.w	r3, [sl]
 8007ea2:	4499      	add	r9, r3
 8007ea4:	e7d3      	b.n	8007e4e <__cvt+0x6a>
 8007ea6:	1c59      	adds	r1, r3, #1
 8007ea8:	9103      	str	r1, [sp, #12]
 8007eaa:	701a      	strb	r2, [r3, #0]
 8007eac:	e7d9      	b.n	8007e62 <__cvt+0x7e>

08007eae <__exponent>:
 8007eae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007eb0:	2900      	cmp	r1, #0
 8007eb2:	bfba      	itte	lt
 8007eb4:	4249      	neglt	r1, r1
 8007eb6:	232d      	movlt	r3, #45	@ 0x2d
 8007eb8:	232b      	movge	r3, #43	@ 0x2b
 8007eba:	2909      	cmp	r1, #9
 8007ebc:	7002      	strb	r2, [r0, #0]
 8007ebe:	7043      	strb	r3, [r0, #1]
 8007ec0:	dd29      	ble.n	8007f16 <__exponent+0x68>
 8007ec2:	f10d 0307 	add.w	r3, sp, #7
 8007ec6:	461d      	mov	r5, r3
 8007ec8:	270a      	movs	r7, #10
 8007eca:	461a      	mov	r2, r3
 8007ecc:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ed0:	fb07 1416 	mls	r4, r7, r6, r1
 8007ed4:	3430      	adds	r4, #48	@ 0x30
 8007ed6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007eda:	460c      	mov	r4, r1
 8007edc:	2c63      	cmp	r4, #99	@ 0x63
 8007ede:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	dcf1      	bgt.n	8007eca <__exponent+0x1c>
 8007ee6:	3130      	adds	r1, #48	@ 0x30
 8007ee8:	1e94      	subs	r4, r2, #2
 8007eea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007eee:	1c41      	adds	r1, r0, #1
 8007ef0:	4623      	mov	r3, r4
 8007ef2:	42ab      	cmp	r3, r5
 8007ef4:	d30a      	bcc.n	8007f0c <__exponent+0x5e>
 8007ef6:	f10d 0309 	add.w	r3, sp, #9
 8007efa:	1a9b      	subs	r3, r3, r2
 8007efc:	42ac      	cmp	r4, r5
 8007efe:	bf88      	it	hi
 8007f00:	2300      	movhi	r3, #0
 8007f02:	3302      	adds	r3, #2
 8007f04:	4403      	add	r3, r0
 8007f06:	1a18      	subs	r0, r3, r0
 8007f08:	b003      	add	sp, #12
 8007f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007f10:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007f14:	e7ed      	b.n	8007ef2 <__exponent+0x44>
 8007f16:	2330      	movs	r3, #48	@ 0x30
 8007f18:	3130      	adds	r1, #48	@ 0x30
 8007f1a:	7083      	strb	r3, [r0, #2]
 8007f1c:	70c1      	strb	r1, [r0, #3]
 8007f1e:	1d03      	adds	r3, r0, #4
 8007f20:	e7f1      	b.n	8007f06 <__exponent+0x58>
	...

08007f24 <_printf_float>:
 8007f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f28:	b08d      	sub	sp, #52	@ 0x34
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007f30:	4616      	mov	r6, r2
 8007f32:	461f      	mov	r7, r3
 8007f34:	4605      	mov	r5, r0
 8007f36:	f000 fd01 	bl	800893c <_localeconv_r>
 8007f3a:	6803      	ldr	r3, [r0, #0]
 8007f3c:	9304      	str	r3, [sp, #16]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7f8 f9c6 	bl	80002d0 <strlen>
 8007f44:	2300      	movs	r3, #0
 8007f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f48:	f8d8 3000 	ldr.w	r3, [r8]
 8007f4c:	9005      	str	r0, [sp, #20]
 8007f4e:	3307      	adds	r3, #7
 8007f50:	f023 0307 	bic.w	r3, r3, #7
 8007f54:	f103 0208 	add.w	r2, r3, #8
 8007f58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007f5c:	f8d4 b000 	ldr.w	fp, [r4]
 8007f60:	f8c8 2000 	str.w	r2, [r8]
 8007f64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007f6c:	9307      	str	r3, [sp, #28]
 8007f6e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007f76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f7a:	4b9c      	ldr	r3, [pc, #624]	@ (80081ec <_printf_float+0x2c8>)
 8007f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f80:	f7f8 fe04 	bl	8000b8c <__aeabi_dcmpun>
 8007f84:	bb70      	cbnz	r0, 8007fe4 <_printf_float+0xc0>
 8007f86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f8a:	4b98      	ldr	r3, [pc, #608]	@ (80081ec <_printf_float+0x2c8>)
 8007f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f90:	f7f8 fdde 	bl	8000b50 <__aeabi_dcmple>
 8007f94:	bb30      	cbnz	r0, 8007fe4 <_printf_float+0xc0>
 8007f96:	2200      	movs	r2, #0
 8007f98:	2300      	movs	r3, #0
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	f7f8 fdcd 	bl	8000b3c <__aeabi_dcmplt>
 8007fa2:	b110      	cbz	r0, 8007faa <_printf_float+0x86>
 8007fa4:	232d      	movs	r3, #45	@ 0x2d
 8007fa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007faa:	4a91      	ldr	r2, [pc, #580]	@ (80081f0 <_printf_float+0x2cc>)
 8007fac:	4b91      	ldr	r3, [pc, #580]	@ (80081f4 <_printf_float+0x2d0>)
 8007fae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007fb2:	bf8c      	ite	hi
 8007fb4:	4690      	movhi	r8, r2
 8007fb6:	4698      	movls	r8, r3
 8007fb8:	2303      	movs	r3, #3
 8007fba:	6123      	str	r3, [r4, #16]
 8007fbc:	f02b 0304 	bic.w	r3, fp, #4
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	f04f 0900 	mov.w	r9, #0
 8007fc6:	9700      	str	r7, [sp, #0]
 8007fc8:	4633      	mov	r3, r6
 8007fca:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f000 f9d2 	bl	8008378 <_printf_common>
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	f040 808d 	bne.w	80080f4 <_printf_float+0x1d0>
 8007fda:	f04f 30ff 	mov.w	r0, #4294967295
 8007fde:	b00d      	add	sp, #52	@ 0x34
 8007fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe4:	4642      	mov	r2, r8
 8007fe6:	464b      	mov	r3, r9
 8007fe8:	4640      	mov	r0, r8
 8007fea:	4649      	mov	r1, r9
 8007fec:	f7f8 fdce 	bl	8000b8c <__aeabi_dcmpun>
 8007ff0:	b140      	cbz	r0, 8008004 <_printf_float+0xe0>
 8007ff2:	464b      	mov	r3, r9
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	bfbc      	itt	lt
 8007ff8:	232d      	movlt	r3, #45	@ 0x2d
 8007ffa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007ffe:	4a7e      	ldr	r2, [pc, #504]	@ (80081f8 <_printf_float+0x2d4>)
 8008000:	4b7e      	ldr	r3, [pc, #504]	@ (80081fc <_printf_float+0x2d8>)
 8008002:	e7d4      	b.n	8007fae <_printf_float+0x8a>
 8008004:	6863      	ldr	r3, [r4, #4]
 8008006:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800800a:	9206      	str	r2, [sp, #24]
 800800c:	1c5a      	adds	r2, r3, #1
 800800e:	d13b      	bne.n	8008088 <_printf_float+0x164>
 8008010:	2306      	movs	r3, #6
 8008012:	6063      	str	r3, [r4, #4]
 8008014:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008018:	2300      	movs	r3, #0
 800801a:	6022      	str	r2, [r4, #0]
 800801c:	9303      	str	r3, [sp, #12]
 800801e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008020:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008024:	ab09      	add	r3, sp, #36	@ 0x24
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	6861      	ldr	r1, [r4, #4]
 800802a:	ec49 8b10 	vmov	d0, r8, r9
 800802e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008032:	4628      	mov	r0, r5
 8008034:	f7ff fed6 	bl	8007de4 <__cvt>
 8008038:	9b06      	ldr	r3, [sp, #24]
 800803a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800803c:	2b47      	cmp	r3, #71	@ 0x47
 800803e:	4680      	mov	r8, r0
 8008040:	d129      	bne.n	8008096 <_printf_float+0x172>
 8008042:	1cc8      	adds	r0, r1, #3
 8008044:	db02      	blt.n	800804c <_printf_float+0x128>
 8008046:	6863      	ldr	r3, [r4, #4]
 8008048:	4299      	cmp	r1, r3
 800804a:	dd41      	ble.n	80080d0 <_printf_float+0x1ac>
 800804c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008050:	fa5f fa8a 	uxtb.w	sl, sl
 8008054:	3901      	subs	r1, #1
 8008056:	4652      	mov	r2, sl
 8008058:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800805c:	9109      	str	r1, [sp, #36]	@ 0x24
 800805e:	f7ff ff26 	bl	8007eae <__exponent>
 8008062:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008064:	1813      	adds	r3, r2, r0
 8008066:	2a01      	cmp	r2, #1
 8008068:	4681      	mov	r9, r0
 800806a:	6123      	str	r3, [r4, #16]
 800806c:	dc02      	bgt.n	8008074 <_printf_float+0x150>
 800806e:	6822      	ldr	r2, [r4, #0]
 8008070:	07d2      	lsls	r2, r2, #31
 8008072:	d501      	bpl.n	8008078 <_printf_float+0x154>
 8008074:	3301      	adds	r3, #1
 8008076:	6123      	str	r3, [r4, #16]
 8008078:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800807c:	2b00      	cmp	r3, #0
 800807e:	d0a2      	beq.n	8007fc6 <_printf_float+0xa2>
 8008080:	232d      	movs	r3, #45	@ 0x2d
 8008082:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008086:	e79e      	b.n	8007fc6 <_printf_float+0xa2>
 8008088:	9a06      	ldr	r2, [sp, #24]
 800808a:	2a47      	cmp	r2, #71	@ 0x47
 800808c:	d1c2      	bne.n	8008014 <_printf_float+0xf0>
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1c0      	bne.n	8008014 <_printf_float+0xf0>
 8008092:	2301      	movs	r3, #1
 8008094:	e7bd      	b.n	8008012 <_printf_float+0xee>
 8008096:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800809a:	d9db      	bls.n	8008054 <_printf_float+0x130>
 800809c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80080a0:	d118      	bne.n	80080d4 <_printf_float+0x1b0>
 80080a2:	2900      	cmp	r1, #0
 80080a4:	6863      	ldr	r3, [r4, #4]
 80080a6:	dd0b      	ble.n	80080c0 <_printf_float+0x19c>
 80080a8:	6121      	str	r1, [r4, #16]
 80080aa:	b913      	cbnz	r3, 80080b2 <_printf_float+0x18e>
 80080ac:	6822      	ldr	r2, [r4, #0]
 80080ae:	07d0      	lsls	r0, r2, #31
 80080b0:	d502      	bpl.n	80080b8 <_printf_float+0x194>
 80080b2:	3301      	adds	r3, #1
 80080b4:	440b      	add	r3, r1
 80080b6:	6123      	str	r3, [r4, #16]
 80080b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80080ba:	f04f 0900 	mov.w	r9, #0
 80080be:	e7db      	b.n	8008078 <_printf_float+0x154>
 80080c0:	b913      	cbnz	r3, 80080c8 <_printf_float+0x1a4>
 80080c2:	6822      	ldr	r2, [r4, #0]
 80080c4:	07d2      	lsls	r2, r2, #31
 80080c6:	d501      	bpl.n	80080cc <_printf_float+0x1a8>
 80080c8:	3302      	adds	r3, #2
 80080ca:	e7f4      	b.n	80080b6 <_printf_float+0x192>
 80080cc:	2301      	movs	r3, #1
 80080ce:	e7f2      	b.n	80080b6 <_printf_float+0x192>
 80080d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80080d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080d6:	4299      	cmp	r1, r3
 80080d8:	db05      	blt.n	80080e6 <_printf_float+0x1c2>
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	6121      	str	r1, [r4, #16]
 80080de:	07d8      	lsls	r0, r3, #31
 80080e0:	d5ea      	bpl.n	80080b8 <_printf_float+0x194>
 80080e2:	1c4b      	adds	r3, r1, #1
 80080e4:	e7e7      	b.n	80080b6 <_printf_float+0x192>
 80080e6:	2900      	cmp	r1, #0
 80080e8:	bfd4      	ite	le
 80080ea:	f1c1 0202 	rsble	r2, r1, #2
 80080ee:	2201      	movgt	r2, #1
 80080f0:	4413      	add	r3, r2
 80080f2:	e7e0      	b.n	80080b6 <_printf_float+0x192>
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	055a      	lsls	r2, r3, #21
 80080f8:	d407      	bmi.n	800810a <_printf_float+0x1e6>
 80080fa:	6923      	ldr	r3, [r4, #16]
 80080fc:	4642      	mov	r2, r8
 80080fe:	4631      	mov	r1, r6
 8008100:	4628      	mov	r0, r5
 8008102:	47b8      	blx	r7
 8008104:	3001      	adds	r0, #1
 8008106:	d12b      	bne.n	8008160 <_printf_float+0x23c>
 8008108:	e767      	b.n	8007fda <_printf_float+0xb6>
 800810a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800810e:	f240 80dd 	bls.w	80082cc <_printf_float+0x3a8>
 8008112:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008116:	2200      	movs	r2, #0
 8008118:	2300      	movs	r3, #0
 800811a:	f7f8 fd05 	bl	8000b28 <__aeabi_dcmpeq>
 800811e:	2800      	cmp	r0, #0
 8008120:	d033      	beq.n	800818a <_printf_float+0x266>
 8008122:	4a37      	ldr	r2, [pc, #220]	@ (8008200 <_printf_float+0x2dc>)
 8008124:	2301      	movs	r3, #1
 8008126:	4631      	mov	r1, r6
 8008128:	4628      	mov	r0, r5
 800812a:	47b8      	blx	r7
 800812c:	3001      	adds	r0, #1
 800812e:	f43f af54 	beq.w	8007fda <_printf_float+0xb6>
 8008132:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008136:	4543      	cmp	r3, r8
 8008138:	db02      	blt.n	8008140 <_printf_float+0x21c>
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	07d8      	lsls	r0, r3, #31
 800813e:	d50f      	bpl.n	8008160 <_printf_float+0x23c>
 8008140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008144:	4631      	mov	r1, r6
 8008146:	4628      	mov	r0, r5
 8008148:	47b8      	blx	r7
 800814a:	3001      	adds	r0, #1
 800814c:	f43f af45 	beq.w	8007fda <_printf_float+0xb6>
 8008150:	f04f 0900 	mov.w	r9, #0
 8008154:	f108 38ff 	add.w	r8, r8, #4294967295
 8008158:	f104 0a1a 	add.w	sl, r4, #26
 800815c:	45c8      	cmp	r8, r9
 800815e:	dc09      	bgt.n	8008174 <_printf_float+0x250>
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	079b      	lsls	r3, r3, #30
 8008164:	f100 8103 	bmi.w	800836e <_printf_float+0x44a>
 8008168:	68e0      	ldr	r0, [r4, #12]
 800816a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800816c:	4298      	cmp	r0, r3
 800816e:	bfb8      	it	lt
 8008170:	4618      	movlt	r0, r3
 8008172:	e734      	b.n	8007fde <_printf_float+0xba>
 8008174:	2301      	movs	r3, #1
 8008176:	4652      	mov	r2, sl
 8008178:	4631      	mov	r1, r6
 800817a:	4628      	mov	r0, r5
 800817c:	47b8      	blx	r7
 800817e:	3001      	adds	r0, #1
 8008180:	f43f af2b 	beq.w	8007fda <_printf_float+0xb6>
 8008184:	f109 0901 	add.w	r9, r9, #1
 8008188:	e7e8      	b.n	800815c <_printf_float+0x238>
 800818a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800818c:	2b00      	cmp	r3, #0
 800818e:	dc39      	bgt.n	8008204 <_printf_float+0x2e0>
 8008190:	4a1b      	ldr	r2, [pc, #108]	@ (8008200 <_printf_float+0x2dc>)
 8008192:	2301      	movs	r3, #1
 8008194:	4631      	mov	r1, r6
 8008196:	4628      	mov	r0, r5
 8008198:	47b8      	blx	r7
 800819a:	3001      	adds	r0, #1
 800819c:	f43f af1d 	beq.w	8007fda <_printf_float+0xb6>
 80081a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80081a4:	ea59 0303 	orrs.w	r3, r9, r3
 80081a8:	d102      	bne.n	80081b0 <_printf_float+0x28c>
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	07d9      	lsls	r1, r3, #31
 80081ae:	d5d7      	bpl.n	8008160 <_printf_float+0x23c>
 80081b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081b4:	4631      	mov	r1, r6
 80081b6:	4628      	mov	r0, r5
 80081b8:	47b8      	blx	r7
 80081ba:	3001      	adds	r0, #1
 80081bc:	f43f af0d 	beq.w	8007fda <_printf_float+0xb6>
 80081c0:	f04f 0a00 	mov.w	sl, #0
 80081c4:	f104 0b1a 	add.w	fp, r4, #26
 80081c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ca:	425b      	negs	r3, r3
 80081cc:	4553      	cmp	r3, sl
 80081ce:	dc01      	bgt.n	80081d4 <_printf_float+0x2b0>
 80081d0:	464b      	mov	r3, r9
 80081d2:	e793      	b.n	80080fc <_printf_float+0x1d8>
 80081d4:	2301      	movs	r3, #1
 80081d6:	465a      	mov	r2, fp
 80081d8:	4631      	mov	r1, r6
 80081da:	4628      	mov	r0, r5
 80081dc:	47b8      	blx	r7
 80081de:	3001      	adds	r0, #1
 80081e0:	f43f aefb 	beq.w	8007fda <_printf_float+0xb6>
 80081e4:	f10a 0a01 	add.w	sl, sl, #1
 80081e8:	e7ee      	b.n	80081c8 <_printf_float+0x2a4>
 80081ea:	bf00      	nop
 80081ec:	7fefffff 	.word	0x7fefffff
 80081f0:	0800af24 	.word	0x0800af24
 80081f4:	0800af20 	.word	0x0800af20
 80081f8:	0800af2c 	.word	0x0800af2c
 80081fc:	0800af28 	.word	0x0800af28
 8008200:	0800af30 	.word	0x0800af30
 8008204:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008206:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800820a:	4553      	cmp	r3, sl
 800820c:	bfa8      	it	ge
 800820e:	4653      	movge	r3, sl
 8008210:	2b00      	cmp	r3, #0
 8008212:	4699      	mov	r9, r3
 8008214:	dc36      	bgt.n	8008284 <_printf_float+0x360>
 8008216:	f04f 0b00 	mov.w	fp, #0
 800821a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800821e:	f104 021a 	add.w	r2, r4, #26
 8008222:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008224:	9306      	str	r3, [sp, #24]
 8008226:	eba3 0309 	sub.w	r3, r3, r9
 800822a:	455b      	cmp	r3, fp
 800822c:	dc31      	bgt.n	8008292 <_printf_float+0x36e>
 800822e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008230:	459a      	cmp	sl, r3
 8008232:	dc3a      	bgt.n	80082aa <_printf_float+0x386>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	07da      	lsls	r2, r3, #31
 8008238:	d437      	bmi.n	80082aa <_printf_float+0x386>
 800823a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800823c:	ebaa 0903 	sub.w	r9, sl, r3
 8008240:	9b06      	ldr	r3, [sp, #24]
 8008242:	ebaa 0303 	sub.w	r3, sl, r3
 8008246:	4599      	cmp	r9, r3
 8008248:	bfa8      	it	ge
 800824a:	4699      	movge	r9, r3
 800824c:	f1b9 0f00 	cmp.w	r9, #0
 8008250:	dc33      	bgt.n	80082ba <_printf_float+0x396>
 8008252:	f04f 0800 	mov.w	r8, #0
 8008256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800825a:	f104 0b1a 	add.w	fp, r4, #26
 800825e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008260:	ebaa 0303 	sub.w	r3, sl, r3
 8008264:	eba3 0309 	sub.w	r3, r3, r9
 8008268:	4543      	cmp	r3, r8
 800826a:	f77f af79 	ble.w	8008160 <_printf_float+0x23c>
 800826e:	2301      	movs	r3, #1
 8008270:	465a      	mov	r2, fp
 8008272:	4631      	mov	r1, r6
 8008274:	4628      	mov	r0, r5
 8008276:	47b8      	blx	r7
 8008278:	3001      	adds	r0, #1
 800827a:	f43f aeae 	beq.w	8007fda <_printf_float+0xb6>
 800827e:	f108 0801 	add.w	r8, r8, #1
 8008282:	e7ec      	b.n	800825e <_printf_float+0x33a>
 8008284:	4642      	mov	r2, r8
 8008286:	4631      	mov	r1, r6
 8008288:	4628      	mov	r0, r5
 800828a:	47b8      	blx	r7
 800828c:	3001      	adds	r0, #1
 800828e:	d1c2      	bne.n	8008216 <_printf_float+0x2f2>
 8008290:	e6a3      	b.n	8007fda <_printf_float+0xb6>
 8008292:	2301      	movs	r3, #1
 8008294:	4631      	mov	r1, r6
 8008296:	4628      	mov	r0, r5
 8008298:	9206      	str	r2, [sp, #24]
 800829a:	47b8      	blx	r7
 800829c:	3001      	adds	r0, #1
 800829e:	f43f ae9c 	beq.w	8007fda <_printf_float+0xb6>
 80082a2:	9a06      	ldr	r2, [sp, #24]
 80082a4:	f10b 0b01 	add.w	fp, fp, #1
 80082a8:	e7bb      	b.n	8008222 <_printf_float+0x2fe>
 80082aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082ae:	4631      	mov	r1, r6
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b8      	blx	r7
 80082b4:	3001      	adds	r0, #1
 80082b6:	d1c0      	bne.n	800823a <_printf_float+0x316>
 80082b8:	e68f      	b.n	8007fda <_printf_float+0xb6>
 80082ba:	9a06      	ldr	r2, [sp, #24]
 80082bc:	464b      	mov	r3, r9
 80082be:	4442      	add	r2, r8
 80082c0:	4631      	mov	r1, r6
 80082c2:	4628      	mov	r0, r5
 80082c4:	47b8      	blx	r7
 80082c6:	3001      	adds	r0, #1
 80082c8:	d1c3      	bne.n	8008252 <_printf_float+0x32e>
 80082ca:	e686      	b.n	8007fda <_printf_float+0xb6>
 80082cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80082d0:	f1ba 0f01 	cmp.w	sl, #1
 80082d4:	dc01      	bgt.n	80082da <_printf_float+0x3b6>
 80082d6:	07db      	lsls	r3, r3, #31
 80082d8:	d536      	bpl.n	8008348 <_printf_float+0x424>
 80082da:	2301      	movs	r3, #1
 80082dc:	4642      	mov	r2, r8
 80082de:	4631      	mov	r1, r6
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b8      	blx	r7
 80082e4:	3001      	adds	r0, #1
 80082e6:	f43f ae78 	beq.w	8007fda <_printf_float+0xb6>
 80082ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082ee:	4631      	mov	r1, r6
 80082f0:	4628      	mov	r0, r5
 80082f2:	47b8      	blx	r7
 80082f4:	3001      	adds	r0, #1
 80082f6:	f43f ae70 	beq.w	8007fda <_printf_float+0xb6>
 80082fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80082fe:	2200      	movs	r2, #0
 8008300:	2300      	movs	r3, #0
 8008302:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008306:	f7f8 fc0f 	bl	8000b28 <__aeabi_dcmpeq>
 800830a:	b9c0      	cbnz	r0, 800833e <_printf_float+0x41a>
 800830c:	4653      	mov	r3, sl
 800830e:	f108 0201 	add.w	r2, r8, #1
 8008312:	4631      	mov	r1, r6
 8008314:	4628      	mov	r0, r5
 8008316:	47b8      	blx	r7
 8008318:	3001      	adds	r0, #1
 800831a:	d10c      	bne.n	8008336 <_printf_float+0x412>
 800831c:	e65d      	b.n	8007fda <_printf_float+0xb6>
 800831e:	2301      	movs	r3, #1
 8008320:	465a      	mov	r2, fp
 8008322:	4631      	mov	r1, r6
 8008324:	4628      	mov	r0, r5
 8008326:	47b8      	blx	r7
 8008328:	3001      	adds	r0, #1
 800832a:	f43f ae56 	beq.w	8007fda <_printf_float+0xb6>
 800832e:	f108 0801 	add.w	r8, r8, #1
 8008332:	45d0      	cmp	r8, sl
 8008334:	dbf3      	blt.n	800831e <_printf_float+0x3fa>
 8008336:	464b      	mov	r3, r9
 8008338:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800833c:	e6df      	b.n	80080fe <_printf_float+0x1da>
 800833e:	f04f 0800 	mov.w	r8, #0
 8008342:	f104 0b1a 	add.w	fp, r4, #26
 8008346:	e7f4      	b.n	8008332 <_printf_float+0x40e>
 8008348:	2301      	movs	r3, #1
 800834a:	4642      	mov	r2, r8
 800834c:	e7e1      	b.n	8008312 <_printf_float+0x3ee>
 800834e:	2301      	movs	r3, #1
 8008350:	464a      	mov	r2, r9
 8008352:	4631      	mov	r1, r6
 8008354:	4628      	mov	r0, r5
 8008356:	47b8      	blx	r7
 8008358:	3001      	adds	r0, #1
 800835a:	f43f ae3e 	beq.w	8007fda <_printf_float+0xb6>
 800835e:	f108 0801 	add.w	r8, r8, #1
 8008362:	68e3      	ldr	r3, [r4, #12]
 8008364:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008366:	1a5b      	subs	r3, r3, r1
 8008368:	4543      	cmp	r3, r8
 800836a:	dcf0      	bgt.n	800834e <_printf_float+0x42a>
 800836c:	e6fc      	b.n	8008168 <_printf_float+0x244>
 800836e:	f04f 0800 	mov.w	r8, #0
 8008372:	f104 0919 	add.w	r9, r4, #25
 8008376:	e7f4      	b.n	8008362 <_printf_float+0x43e>

08008378 <_printf_common>:
 8008378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800837c:	4616      	mov	r6, r2
 800837e:	4698      	mov	r8, r3
 8008380:	688a      	ldr	r2, [r1, #8]
 8008382:	690b      	ldr	r3, [r1, #16]
 8008384:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008388:	4293      	cmp	r3, r2
 800838a:	bfb8      	it	lt
 800838c:	4613      	movlt	r3, r2
 800838e:	6033      	str	r3, [r6, #0]
 8008390:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008394:	4607      	mov	r7, r0
 8008396:	460c      	mov	r4, r1
 8008398:	b10a      	cbz	r2, 800839e <_printf_common+0x26>
 800839a:	3301      	adds	r3, #1
 800839c:	6033      	str	r3, [r6, #0]
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	0699      	lsls	r1, r3, #26
 80083a2:	bf42      	ittt	mi
 80083a4:	6833      	ldrmi	r3, [r6, #0]
 80083a6:	3302      	addmi	r3, #2
 80083a8:	6033      	strmi	r3, [r6, #0]
 80083aa:	6825      	ldr	r5, [r4, #0]
 80083ac:	f015 0506 	ands.w	r5, r5, #6
 80083b0:	d106      	bne.n	80083c0 <_printf_common+0x48>
 80083b2:	f104 0a19 	add.w	sl, r4, #25
 80083b6:	68e3      	ldr	r3, [r4, #12]
 80083b8:	6832      	ldr	r2, [r6, #0]
 80083ba:	1a9b      	subs	r3, r3, r2
 80083bc:	42ab      	cmp	r3, r5
 80083be:	dc26      	bgt.n	800840e <_printf_common+0x96>
 80083c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083c4:	6822      	ldr	r2, [r4, #0]
 80083c6:	3b00      	subs	r3, #0
 80083c8:	bf18      	it	ne
 80083ca:	2301      	movne	r3, #1
 80083cc:	0692      	lsls	r2, r2, #26
 80083ce:	d42b      	bmi.n	8008428 <_printf_common+0xb0>
 80083d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083d4:	4641      	mov	r1, r8
 80083d6:	4638      	mov	r0, r7
 80083d8:	47c8      	blx	r9
 80083da:	3001      	adds	r0, #1
 80083dc:	d01e      	beq.n	800841c <_printf_common+0xa4>
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	6922      	ldr	r2, [r4, #16]
 80083e2:	f003 0306 	and.w	r3, r3, #6
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	bf02      	ittt	eq
 80083ea:	68e5      	ldreq	r5, [r4, #12]
 80083ec:	6833      	ldreq	r3, [r6, #0]
 80083ee:	1aed      	subeq	r5, r5, r3
 80083f0:	68a3      	ldr	r3, [r4, #8]
 80083f2:	bf0c      	ite	eq
 80083f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083f8:	2500      	movne	r5, #0
 80083fa:	4293      	cmp	r3, r2
 80083fc:	bfc4      	itt	gt
 80083fe:	1a9b      	subgt	r3, r3, r2
 8008400:	18ed      	addgt	r5, r5, r3
 8008402:	2600      	movs	r6, #0
 8008404:	341a      	adds	r4, #26
 8008406:	42b5      	cmp	r5, r6
 8008408:	d11a      	bne.n	8008440 <_printf_common+0xc8>
 800840a:	2000      	movs	r0, #0
 800840c:	e008      	b.n	8008420 <_printf_common+0xa8>
 800840e:	2301      	movs	r3, #1
 8008410:	4652      	mov	r2, sl
 8008412:	4641      	mov	r1, r8
 8008414:	4638      	mov	r0, r7
 8008416:	47c8      	blx	r9
 8008418:	3001      	adds	r0, #1
 800841a:	d103      	bne.n	8008424 <_printf_common+0xac>
 800841c:	f04f 30ff 	mov.w	r0, #4294967295
 8008420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008424:	3501      	adds	r5, #1
 8008426:	e7c6      	b.n	80083b6 <_printf_common+0x3e>
 8008428:	18e1      	adds	r1, r4, r3
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	2030      	movs	r0, #48	@ 0x30
 800842e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008432:	4422      	add	r2, r4
 8008434:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008438:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800843c:	3302      	adds	r3, #2
 800843e:	e7c7      	b.n	80083d0 <_printf_common+0x58>
 8008440:	2301      	movs	r3, #1
 8008442:	4622      	mov	r2, r4
 8008444:	4641      	mov	r1, r8
 8008446:	4638      	mov	r0, r7
 8008448:	47c8      	blx	r9
 800844a:	3001      	adds	r0, #1
 800844c:	d0e6      	beq.n	800841c <_printf_common+0xa4>
 800844e:	3601      	adds	r6, #1
 8008450:	e7d9      	b.n	8008406 <_printf_common+0x8e>
	...

08008454 <_printf_i>:
 8008454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008458:	7e0f      	ldrb	r7, [r1, #24]
 800845a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800845c:	2f78      	cmp	r7, #120	@ 0x78
 800845e:	4691      	mov	r9, r2
 8008460:	4680      	mov	r8, r0
 8008462:	460c      	mov	r4, r1
 8008464:	469a      	mov	sl, r3
 8008466:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800846a:	d807      	bhi.n	800847c <_printf_i+0x28>
 800846c:	2f62      	cmp	r7, #98	@ 0x62
 800846e:	d80a      	bhi.n	8008486 <_printf_i+0x32>
 8008470:	2f00      	cmp	r7, #0
 8008472:	f000 80d1 	beq.w	8008618 <_printf_i+0x1c4>
 8008476:	2f58      	cmp	r7, #88	@ 0x58
 8008478:	f000 80b8 	beq.w	80085ec <_printf_i+0x198>
 800847c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008480:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008484:	e03a      	b.n	80084fc <_printf_i+0xa8>
 8008486:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800848a:	2b15      	cmp	r3, #21
 800848c:	d8f6      	bhi.n	800847c <_printf_i+0x28>
 800848e:	a101      	add	r1, pc, #4	@ (adr r1, 8008494 <_printf_i+0x40>)
 8008490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008494:	080084ed 	.word	0x080084ed
 8008498:	08008501 	.word	0x08008501
 800849c:	0800847d 	.word	0x0800847d
 80084a0:	0800847d 	.word	0x0800847d
 80084a4:	0800847d 	.word	0x0800847d
 80084a8:	0800847d 	.word	0x0800847d
 80084ac:	08008501 	.word	0x08008501
 80084b0:	0800847d 	.word	0x0800847d
 80084b4:	0800847d 	.word	0x0800847d
 80084b8:	0800847d 	.word	0x0800847d
 80084bc:	0800847d 	.word	0x0800847d
 80084c0:	080085ff 	.word	0x080085ff
 80084c4:	0800852b 	.word	0x0800852b
 80084c8:	080085b9 	.word	0x080085b9
 80084cc:	0800847d 	.word	0x0800847d
 80084d0:	0800847d 	.word	0x0800847d
 80084d4:	08008621 	.word	0x08008621
 80084d8:	0800847d 	.word	0x0800847d
 80084dc:	0800852b 	.word	0x0800852b
 80084e0:	0800847d 	.word	0x0800847d
 80084e4:	0800847d 	.word	0x0800847d
 80084e8:	080085c1 	.word	0x080085c1
 80084ec:	6833      	ldr	r3, [r6, #0]
 80084ee:	1d1a      	adds	r2, r3, #4
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6032      	str	r2, [r6, #0]
 80084f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084fc:	2301      	movs	r3, #1
 80084fe:	e09c      	b.n	800863a <_printf_i+0x1e6>
 8008500:	6833      	ldr	r3, [r6, #0]
 8008502:	6820      	ldr	r0, [r4, #0]
 8008504:	1d19      	adds	r1, r3, #4
 8008506:	6031      	str	r1, [r6, #0]
 8008508:	0606      	lsls	r6, r0, #24
 800850a:	d501      	bpl.n	8008510 <_printf_i+0xbc>
 800850c:	681d      	ldr	r5, [r3, #0]
 800850e:	e003      	b.n	8008518 <_printf_i+0xc4>
 8008510:	0645      	lsls	r5, r0, #25
 8008512:	d5fb      	bpl.n	800850c <_printf_i+0xb8>
 8008514:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008518:	2d00      	cmp	r5, #0
 800851a:	da03      	bge.n	8008524 <_printf_i+0xd0>
 800851c:	232d      	movs	r3, #45	@ 0x2d
 800851e:	426d      	negs	r5, r5
 8008520:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008524:	4858      	ldr	r0, [pc, #352]	@ (8008688 <_printf_i+0x234>)
 8008526:	230a      	movs	r3, #10
 8008528:	e011      	b.n	800854e <_printf_i+0xfa>
 800852a:	6821      	ldr	r1, [r4, #0]
 800852c:	6833      	ldr	r3, [r6, #0]
 800852e:	0608      	lsls	r0, r1, #24
 8008530:	f853 5b04 	ldr.w	r5, [r3], #4
 8008534:	d402      	bmi.n	800853c <_printf_i+0xe8>
 8008536:	0649      	lsls	r1, r1, #25
 8008538:	bf48      	it	mi
 800853a:	b2ad      	uxthmi	r5, r5
 800853c:	2f6f      	cmp	r7, #111	@ 0x6f
 800853e:	4852      	ldr	r0, [pc, #328]	@ (8008688 <_printf_i+0x234>)
 8008540:	6033      	str	r3, [r6, #0]
 8008542:	bf14      	ite	ne
 8008544:	230a      	movne	r3, #10
 8008546:	2308      	moveq	r3, #8
 8008548:	2100      	movs	r1, #0
 800854a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800854e:	6866      	ldr	r6, [r4, #4]
 8008550:	60a6      	str	r6, [r4, #8]
 8008552:	2e00      	cmp	r6, #0
 8008554:	db05      	blt.n	8008562 <_printf_i+0x10e>
 8008556:	6821      	ldr	r1, [r4, #0]
 8008558:	432e      	orrs	r6, r5
 800855a:	f021 0104 	bic.w	r1, r1, #4
 800855e:	6021      	str	r1, [r4, #0]
 8008560:	d04b      	beq.n	80085fa <_printf_i+0x1a6>
 8008562:	4616      	mov	r6, r2
 8008564:	fbb5 f1f3 	udiv	r1, r5, r3
 8008568:	fb03 5711 	mls	r7, r3, r1, r5
 800856c:	5dc7      	ldrb	r7, [r0, r7]
 800856e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008572:	462f      	mov	r7, r5
 8008574:	42bb      	cmp	r3, r7
 8008576:	460d      	mov	r5, r1
 8008578:	d9f4      	bls.n	8008564 <_printf_i+0x110>
 800857a:	2b08      	cmp	r3, #8
 800857c:	d10b      	bne.n	8008596 <_printf_i+0x142>
 800857e:	6823      	ldr	r3, [r4, #0]
 8008580:	07df      	lsls	r7, r3, #31
 8008582:	d508      	bpl.n	8008596 <_printf_i+0x142>
 8008584:	6923      	ldr	r3, [r4, #16]
 8008586:	6861      	ldr	r1, [r4, #4]
 8008588:	4299      	cmp	r1, r3
 800858a:	bfde      	ittt	le
 800858c:	2330      	movle	r3, #48	@ 0x30
 800858e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008592:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008596:	1b92      	subs	r2, r2, r6
 8008598:	6122      	str	r2, [r4, #16]
 800859a:	f8cd a000 	str.w	sl, [sp]
 800859e:	464b      	mov	r3, r9
 80085a0:	aa03      	add	r2, sp, #12
 80085a2:	4621      	mov	r1, r4
 80085a4:	4640      	mov	r0, r8
 80085a6:	f7ff fee7 	bl	8008378 <_printf_common>
 80085aa:	3001      	adds	r0, #1
 80085ac:	d14a      	bne.n	8008644 <_printf_i+0x1f0>
 80085ae:	f04f 30ff 	mov.w	r0, #4294967295
 80085b2:	b004      	add	sp, #16
 80085b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b8:	6823      	ldr	r3, [r4, #0]
 80085ba:	f043 0320 	orr.w	r3, r3, #32
 80085be:	6023      	str	r3, [r4, #0]
 80085c0:	4832      	ldr	r0, [pc, #200]	@ (800868c <_printf_i+0x238>)
 80085c2:	2778      	movs	r7, #120	@ 0x78
 80085c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	6831      	ldr	r1, [r6, #0]
 80085cc:	061f      	lsls	r7, r3, #24
 80085ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80085d2:	d402      	bmi.n	80085da <_printf_i+0x186>
 80085d4:	065f      	lsls	r7, r3, #25
 80085d6:	bf48      	it	mi
 80085d8:	b2ad      	uxthmi	r5, r5
 80085da:	6031      	str	r1, [r6, #0]
 80085dc:	07d9      	lsls	r1, r3, #31
 80085de:	bf44      	itt	mi
 80085e0:	f043 0320 	orrmi.w	r3, r3, #32
 80085e4:	6023      	strmi	r3, [r4, #0]
 80085e6:	b11d      	cbz	r5, 80085f0 <_printf_i+0x19c>
 80085e8:	2310      	movs	r3, #16
 80085ea:	e7ad      	b.n	8008548 <_printf_i+0xf4>
 80085ec:	4826      	ldr	r0, [pc, #152]	@ (8008688 <_printf_i+0x234>)
 80085ee:	e7e9      	b.n	80085c4 <_printf_i+0x170>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	f023 0320 	bic.w	r3, r3, #32
 80085f6:	6023      	str	r3, [r4, #0]
 80085f8:	e7f6      	b.n	80085e8 <_printf_i+0x194>
 80085fa:	4616      	mov	r6, r2
 80085fc:	e7bd      	b.n	800857a <_printf_i+0x126>
 80085fe:	6833      	ldr	r3, [r6, #0]
 8008600:	6825      	ldr	r5, [r4, #0]
 8008602:	6961      	ldr	r1, [r4, #20]
 8008604:	1d18      	adds	r0, r3, #4
 8008606:	6030      	str	r0, [r6, #0]
 8008608:	062e      	lsls	r6, r5, #24
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	d501      	bpl.n	8008612 <_printf_i+0x1be>
 800860e:	6019      	str	r1, [r3, #0]
 8008610:	e002      	b.n	8008618 <_printf_i+0x1c4>
 8008612:	0668      	lsls	r0, r5, #25
 8008614:	d5fb      	bpl.n	800860e <_printf_i+0x1ba>
 8008616:	8019      	strh	r1, [r3, #0]
 8008618:	2300      	movs	r3, #0
 800861a:	6123      	str	r3, [r4, #16]
 800861c:	4616      	mov	r6, r2
 800861e:	e7bc      	b.n	800859a <_printf_i+0x146>
 8008620:	6833      	ldr	r3, [r6, #0]
 8008622:	1d1a      	adds	r2, r3, #4
 8008624:	6032      	str	r2, [r6, #0]
 8008626:	681e      	ldr	r6, [r3, #0]
 8008628:	6862      	ldr	r2, [r4, #4]
 800862a:	2100      	movs	r1, #0
 800862c:	4630      	mov	r0, r6
 800862e:	f7f7 fdff 	bl	8000230 <memchr>
 8008632:	b108      	cbz	r0, 8008638 <_printf_i+0x1e4>
 8008634:	1b80      	subs	r0, r0, r6
 8008636:	6060      	str	r0, [r4, #4]
 8008638:	6863      	ldr	r3, [r4, #4]
 800863a:	6123      	str	r3, [r4, #16]
 800863c:	2300      	movs	r3, #0
 800863e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008642:	e7aa      	b.n	800859a <_printf_i+0x146>
 8008644:	6923      	ldr	r3, [r4, #16]
 8008646:	4632      	mov	r2, r6
 8008648:	4649      	mov	r1, r9
 800864a:	4640      	mov	r0, r8
 800864c:	47d0      	blx	sl
 800864e:	3001      	adds	r0, #1
 8008650:	d0ad      	beq.n	80085ae <_printf_i+0x15a>
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	079b      	lsls	r3, r3, #30
 8008656:	d413      	bmi.n	8008680 <_printf_i+0x22c>
 8008658:	68e0      	ldr	r0, [r4, #12]
 800865a:	9b03      	ldr	r3, [sp, #12]
 800865c:	4298      	cmp	r0, r3
 800865e:	bfb8      	it	lt
 8008660:	4618      	movlt	r0, r3
 8008662:	e7a6      	b.n	80085b2 <_printf_i+0x15e>
 8008664:	2301      	movs	r3, #1
 8008666:	4632      	mov	r2, r6
 8008668:	4649      	mov	r1, r9
 800866a:	4640      	mov	r0, r8
 800866c:	47d0      	blx	sl
 800866e:	3001      	adds	r0, #1
 8008670:	d09d      	beq.n	80085ae <_printf_i+0x15a>
 8008672:	3501      	adds	r5, #1
 8008674:	68e3      	ldr	r3, [r4, #12]
 8008676:	9903      	ldr	r1, [sp, #12]
 8008678:	1a5b      	subs	r3, r3, r1
 800867a:	42ab      	cmp	r3, r5
 800867c:	dcf2      	bgt.n	8008664 <_printf_i+0x210>
 800867e:	e7eb      	b.n	8008658 <_printf_i+0x204>
 8008680:	2500      	movs	r5, #0
 8008682:	f104 0619 	add.w	r6, r4, #25
 8008686:	e7f5      	b.n	8008674 <_printf_i+0x220>
 8008688:	0800af32 	.word	0x0800af32
 800868c:	0800af43 	.word	0x0800af43

08008690 <std>:
 8008690:	2300      	movs	r3, #0
 8008692:	b510      	push	{r4, lr}
 8008694:	4604      	mov	r4, r0
 8008696:	e9c0 3300 	strd	r3, r3, [r0]
 800869a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800869e:	6083      	str	r3, [r0, #8]
 80086a0:	8181      	strh	r1, [r0, #12]
 80086a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80086a4:	81c2      	strh	r2, [r0, #14]
 80086a6:	6183      	str	r3, [r0, #24]
 80086a8:	4619      	mov	r1, r3
 80086aa:	2208      	movs	r2, #8
 80086ac:	305c      	adds	r0, #92	@ 0x5c
 80086ae:	f000 f92a 	bl	8008906 <memset>
 80086b2:	4b0d      	ldr	r3, [pc, #52]	@ (80086e8 <std+0x58>)
 80086b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80086b6:	4b0d      	ldr	r3, [pc, #52]	@ (80086ec <std+0x5c>)
 80086b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80086ba:	4b0d      	ldr	r3, [pc, #52]	@ (80086f0 <std+0x60>)
 80086bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80086be:	4b0d      	ldr	r3, [pc, #52]	@ (80086f4 <std+0x64>)
 80086c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80086c2:	4b0d      	ldr	r3, [pc, #52]	@ (80086f8 <std+0x68>)
 80086c4:	6224      	str	r4, [r4, #32]
 80086c6:	429c      	cmp	r4, r3
 80086c8:	d006      	beq.n	80086d8 <std+0x48>
 80086ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80086ce:	4294      	cmp	r4, r2
 80086d0:	d002      	beq.n	80086d8 <std+0x48>
 80086d2:	33d0      	adds	r3, #208	@ 0xd0
 80086d4:	429c      	cmp	r4, r3
 80086d6:	d105      	bne.n	80086e4 <std+0x54>
 80086d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80086dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086e0:	f000 b9a0 	b.w	8008a24 <__retarget_lock_init_recursive>
 80086e4:	bd10      	pop	{r4, pc}
 80086e6:	bf00      	nop
 80086e8:	08008881 	.word	0x08008881
 80086ec:	080088a3 	.word	0x080088a3
 80086f0:	080088db 	.word	0x080088db
 80086f4:	080088ff 	.word	0x080088ff
 80086f8:	20000b60 	.word	0x20000b60

080086fc <stdio_exit_handler>:
 80086fc:	4a02      	ldr	r2, [pc, #8]	@ (8008708 <stdio_exit_handler+0xc>)
 80086fe:	4903      	ldr	r1, [pc, #12]	@ (800870c <stdio_exit_handler+0x10>)
 8008700:	4803      	ldr	r0, [pc, #12]	@ (8008710 <stdio_exit_handler+0x14>)
 8008702:	f000 b869 	b.w	80087d8 <_fwalk_sglue>
 8008706:	bf00      	nop
 8008708:	2000000c 	.word	0x2000000c
 800870c:	0800a3a5 	.word	0x0800a3a5
 8008710:	2000001c 	.word	0x2000001c

08008714 <cleanup_stdio>:
 8008714:	6841      	ldr	r1, [r0, #4]
 8008716:	4b0c      	ldr	r3, [pc, #48]	@ (8008748 <cleanup_stdio+0x34>)
 8008718:	4299      	cmp	r1, r3
 800871a:	b510      	push	{r4, lr}
 800871c:	4604      	mov	r4, r0
 800871e:	d001      	beq.n	8008724 <cleanup_stdio+0x10>
 8008720:	f001 fe40 	bl	800a3a4 <_fflush_r>
 8008724:	68a1      	ldr	r1, [r4, #8]
 8008726:	4b09      	ldr	r3, [pc, #36]	@ (800874c <cleanup_stdio+0x38>)
 8008728:	4299      	cmp	r1, r3
 800872a:	d002      	beq.n	8008732 <cleanup_stdio+0x1e>
 800872c:	4620      	mov	r0, r4
 800872e:	f001 fe39 	bl	800a3a4 <_fflush_r>
 8008732:	68e1      	ldr	r1, [r4, #12]
 8008734:	4b06      	ldr	r3, [pc, #24]	@ (8008750 <cleanup_stdio+0x3c>)
 8008736:	4299      	cmp	r1, r3
 8008738:	d004      	beq.n	8008744 <cleanup_stdio+0x30>
 800873a:	4620      	mov	r0, r4
 800873c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008740:	f001 be30 	b.w	800a3a4 <_fflush_r>
 8008744:	bd10      	pop	{r4, pc}
 8008746:	bf00      	nop
 8008748:	20000b60 	.word	0x20000b60
 800874c:	20000bc8 	.word	0x20000bc8
 8008750:	20000c30 	.word	0x20000c30

08008754 <global_stdio_init.part.0>:
 8008754:	b510      	push	{r4, lr}
 8008756:	4b0b      	ldr	r3, [pc, #44]	@ (8008784 <global_stdio_init.part.0+0x30>)
 8008758:	4c0b      	ldr	r4, [pc, #44]	@ (8008788 <global_stdio_init.part.0+0x34>)
 800875a:	4a0c      	ldr	r2, [pc, #48]	@ (800878c <global_stdio_init.part.0+0x38>)
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	4620      	mov	r0, r4
 8008760:	2200      	movs	r2, #0
 8008762:	2104      	movs	r1, #4
 8008764:	f7ff ff94 	bl	8008690 <std>
 8008768:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800876c:	2201      	movs	r2, #1
 800876e:	2109      	movs	r1, #9
 8008770:	f7ff ff8e 	bl	8008690 <std>
 8008774:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008778:	2202      	movs	r2, #2
 800877a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800877e:	2112      	movs	r1, #18
 8008780:	f7ff bf86 	b.w	8008690 <std>
 8008784:	20000c98 	.word	0x20000c98
 8008788:	20000b60 	.word	0x20000b60
 800878c:	080086fd 	.word	0x080086fd

08008790 <__sfp_lock_acquire>:
 8008790:	4801      	ldr	r0, [pc, #4]	@ (8008798 <__sfp_lock_acquire+0x8>)
 8008792:	f000 b948 	b.w	8008a26 <__retarget_lock_acquire_recursive>
 8008796:	bf00      	nop
 8008798:	20000ca1 	.word	0x20000ca1

0800879c <__sfp_lock_release>:
 800879c:	4801      	ldr	r0, [pc, #4]	@ (80087a4 <__sfp_lock_release+0x8>)
 800879e:	f000 b943 	b.w	8008a28 <__retarget_lock_release_recursive>
 80087a2:	bf00      	nop
 80087a4:	20000ca1 	.word	0x20000ca1

080087a8 <__sinit>:
 80087a8:	b510      	push	{r4, lr}
 80087aa:	4604      	mov	r4, r0
 80087ac:	f7ff fff0 	bl	8008790 <__sfp_lock_acquire>
 80087b0:	6a23      	ldr	r3, [r4, #32]
 80087b2:	b11b      	cbz	r3, 80087bc <__sinit+0x14>
 80087b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087b8:	f7ff bff0 	b.w	800879c <__sfp_lock_release>
 80087bc:	4b04      	ldr	r3, [pc, #16]	@ (80087d0 <__sinit+0x28>)
 80087be:	6223      	str	r3, [r4, #32]
 80087c0:	4b04      	ldr	r3, [pc, #16]	@ (80087d4 <__sinit+0x2c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1f5      	bne.n	80087b4 <__sinit+0xc>
 80087c8:	f7ff ffc4 	bl	8008754 <global_stdio_init.part.0>
 80087cc:	e7f2      	b.n	80087b4 <__sinit+0xc>
 80087ce:	bf00      	nop
 80087d0:	08008715 	.word	0x08008715
 80087d4:	20000c98 	.word	0x20000c98

080087d8 <_fwalk_sglue>:
 80087d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087dc:	4607      	mov	r7, r0
 80087de:	4688      	mov	r8, r1
 80087e0:	4614      	mov	r4, r2
 80087e2:	2600      	movs	r6, #0
 80087e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087e8:	f1b9 0901 	subs.w	r9, r9, #1
 80087ec:	d505      	bpl.n	80087fa <_fwalk_sglue+0x22>
 80087ee:	6824      	ldr	r4, [r4, #0]
 80087f0:	2c00      	cmp	r4, #0
 80087f2:	d1f7      	bne.n	80087e4 <_fwalk_sglue+0xc>
 80087f4:	4630      	mov	r0, r6
 80087f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087fa:	89ab      	ldrh	r3, [r5, #12]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d907      	bls.n	8008810 <_fwalk_sglue+0x38>
 8008800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008804:	3301      	adds	r3, #1
 8008806:	d003      	beq.n	8008810 <_fwalk_sglue+0x38>
 8008808:	4629      	mov	r1, r5
 800880a:	4638      	mov	r0, r7
 800880c:	47c0      	blx	r8
 800880e:	4306      	orrs	r6, r0
 8008810:	3568      	adds	r5, #104	@ 0x68
 8008812:	e7e9      	b.n	80087e8 <_fwalk_sglue+0x10>

08008814 <sniprintf>:
 8008814:	b40c      	push	{r2, r3}
 8008816:	b530      	push	{r4, r5, lr}
 8008818:	4b18      	ldr	r3, [pc, #96]	@ (800887c <sniprintf+0x68>)
 800881a:	1e0c      	subs	r4, r1, #0
 800881c:	681d      	ldr	r5, [r3, #0]
 800881e:	b09d      	sub	sp, #116	@ 0x74
 8008820:	da08      	bge.n	8008834 <sniprintf+0x20>
 8008822:	238b      	movs	r3, #139	@ 0x8b
 8008824:	602b      	str	r3, [r5, #0]
 8008826:	f04f 30ff 	mov.w	r0, #4294967295
 800882a:	b01d      	add	sp, #116	@ 0x74
 800882c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008830:	b002      	add	sp, #8
 8008832:	4770      	bx	lr
 8008834:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008838:	f8ad 3014 	strh.w	r3, [sp, #20]
 800883c:	f04f 0300 	mov.w	r3, #0
 8008840:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008842:	bf14      	ite	ne
 8008844:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008848:	4623      	moveq	r3, r4
 800884a:	9304      	str	r3, [sp, #16]
 800884c:	9307      	str	r3, [sp, #28]
 800884e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008852:	9002      	str	r0, [sp, #8]
 8008854:	9006      	str	r0, [sp, #24]
 8008856:	f8ad 3016 	strh.w	r3, [sp, #22]
 800885a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800885c:	ab21      	add	r3, sp, #132	@ 0x84
 800885e:	a902      	add	r1, sp, #8
 8008860:	4628      	mov	r0, r5
 8008862:	9301      	str	r3, [sp, #4]
 8008864:	f001 fc1e 	bl	800a0a4 <_svfiprintf_r>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	bfbc      	itt	lt
 800886c:	238b      	movlt	r3, #139	@ 0x8b
 800886e:	602b      	strlt	r3, [r5, #0]
 8008870:	2c00      	cmp	r4, #0
 8008872:	d0da      	beq.n	800882a <sniprintf+0x16>
 8008874:	9b02      	ldr	r3, [sp, #8]
 8008876:	2200      	movs	r2, #0
 8008878:	701a      	strb	r2, [r3, #0]
 800887a:	e7d6      	b.n	800882a <sniprintf+0x16>
 800887c:	20000018 	.word	0x20000018

08008880 <__sread>:
 8008880:	b510      	push	{r4, lr}
 8008882:	460c      	mov	r4, r1
 8008884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008888:	f000 f87e 	bl	8008988 <_read_r>
 800888c:	2800      	cmp	r0, #0
 800888e:	bfab      	itete	ge
 8008890:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008892:	89a3      	ldrhlt	r3, [r4, #12]
 8008894:	181b      	addge	r3, r3, r0
 8008896:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800889a:	bfac      	ite	ge
 800889c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800889e:	81a3      	strhlt	r3, [r4, #12]
 80088a0:	bd10      	pop	{r4, pc}

080088a2 <__swrite>:
 80088a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a6:	461f      	mov	r7, r3
 80088a8:	898b      	ldrh	r3, [r1, #12]
 80088aa:	05db      	lsls	r3, r3, #23
 80088ac:	4605      	mov	r5, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	4616      	mov	r6, r2
 80088b2:	d505      	bpl.n	80088c0 <__swrite+0x1e>
 80088b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b8:	2302      	movs	r3, #2
 80088ba:	2200      	movs	r2, #0
 80088bc:	f000 f852 	bl	8008964 <_lseek_r>
 80088c0:	89a3      	ldrh	r3, [r4, #12]
 80088c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088ca:	81a3      	strh	r3, [r4, #12]
 80088cc:	4632      	mov	r2, r6
 80088ce:	463b      	mov	r3, r7
 80088d0:	4628      	mov	r0, r5
 80088d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088d6:	f000 b869 	b.w	80089ac <_write_r>

080088da <__sseek>:
 80088da:	b510      	push	{r4, lr}
 80088dc:	460c      	mov	r4, r1
 80088de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e2:	f000 f83f 	bl	8008964 <_lseek_r>
 80088e6:	1c43      	adds	r3, r0, #1
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	bf15      	itete	ne
 80088ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80088ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80088f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80088f6:	81a3      	strheq	r3, [r4, #12]
 80088f8:	bf18      	it	ne
 80088fa:	81a3      	strhne	r3, [r4, #12]
 80088fc:	bd10      	pop	{r4, pc}

080088fe <__sclose>:
 80088fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008902:	f000 b81f 	b.w	8008944 <_close_r>

08008906 <memset>:
 8008906:	4402      	add	r2, r0
 8008908:	4603      	mov	r3, r0
 800890a:	4293      	cmp	r3, r2
 800890c:	d100      	bne.n	8008910 <memset+0xa>
 800890e:	4770      	bx	lr
 8008910:	f803 1b01 	strb.w	r1, [r3], #1
 8008914:	e7f9      	b.n	800890a <memset+0x4>

08008916 <strncpy>:
 8008916:	b510      	push	{r4, lr}
 8008918:	3901      	subs	r1, #1
 800891a:	4603      	mov	r3, r0
 800891c:	b132      	cbz	r2, 800892c <strncpy+0x16>
 800891e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008922:	f803 4b01 	strb.w	r4, [r3], #1
 8008926:	3a01      	subs	r2, #1
 8008928:	2c00      	cmp	r4, #0
 800892a:	d1f7      	bne.n	800891c <strncpy+0x6>
 800892c:	441a      	add	r2, r3
 800892e:	2100      	movs	r1, #0
 8008930:	4293      	cmp	r3, r2
 8008932:	d100      	bne.n	8008936 <strncpy+0x20>
 8008934:	bd10      	pop	{r4, pc}
 8008936:	f803 1b01 	strb.w	r1, [r3], #1
 800893a:	e7f9      	b.n	8008930 <strncpy+0x1a>

0800893c <_localeconv_r>:
 800893c:	4800      	ldr	r0, [pc, #0]	@ (8008940 <_localeconv_r+0x4>)
 800893e:	4770      	bx	lr
 8008940:	20000158 	.word	0x20000158

08008944 <_close_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4d06      	ldr	r5, [pc, #24]	@ (8008960 <_close_r+0x1c>)
 8008948:	2300      	movs	r3, #0
 800894a:	4604      	mov	r4, r0
 800894c:	4608      	mov	r0, r1
 800894e:	602b      	str	r3, [r5, #0]
 8008950:	f7f9 ff66 	bl	8002820 <_close>
 8008954:	1c43      	adds	r3, r0, #1
 8008956:	d102      	bne.n	800895e <_close_r+0x1a>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	b103      	cbz	r3, 800895e <_close_r+0x1a>
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	bd38      	pop	{r3, r4, r5, pc}
 8008960:	20000c9c 	.word	0x20000c9c

08008964 <_lseek_r>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	4d07      	ldr	r5, [pc, #28]	@ (8008984 <_lseek_r+0x20>)
 8008968:	4604      	mov	r4, r0
 800896a:	4608      	mov	r0, r1
 800896c:	4611      	mov	r1, r2
 800896e:	2200      	movs	r2, #0
 8008970:	602a      	str	r2, [r5, #0]
 8008972:	461a      	mov	r2, r3
 8008974:	f7f9 ff7b 	bl	800286e <_lseek>
 8008978:	1c43      	adds	r3, r0, #1
 800897a:	d102      	bne.n	8008982 <_lseek_r+0x1e>
 800897c:	682b      	ldr	r3, [r5, #0]
 800897e:	b103      	cbz	r3, 8008982 <_lseek_r+0x1e>
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	bd38      	pop	{r3, r4, r5, pc}
 8008984:	20000c9c 	.word	0x20000c9c

08008988 <_read_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	4d07      	ldr	r5, [pc, #28]	@ (80089a8 <_read_r+0x20>)
 800898c:	4604      	mov	r4, r0
 800898e:	4608      	mov	r0, r1
 8008990:	4611      	mov	r1, r2
 8008992:	2200      	movs	r2, #0
 8008994:	602a      	str	r2, [r5, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	f7f9 ff09 	bl	80027ae <_read>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_read_r+0x1e>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_read_r+0x1e>
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	20000c9c 	.word	0x20000c9c

080089ac <_write_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	4d07      	ldr	r5, [pc, #28]	@ (80089cc <_write_r+0x20>)
 80089b0:	4604      	mov	r4, r0
 80089b2:	4608      	mov	r0, r1
 80089b4:	4611      	mov	r1, r2
 80089b6:	2200      	movs	r2, #0
 80089b8:	602a      	str	r2, [r5, #0]
 80089ba:	461a      	mov	r2, r3
 80089bc:	f7f9 ff14 	bl	80027e8 <_write>
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	d102      	bne.n	80089ca <_write_r+0x1e>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	b103      	cbz	r3, 80089ca <_write_r+0x1e>
 80089c8:	6023      	str	r3, [r4, #0]
 80089ca:	bd38      	pop	{r3, r4, r5, pc}
 80089cc:	20000c9c 	.word	0x20000c9c

080089d0 <__errno>:
 80089d0:	4b01      	ldr	r3, [pc, #4]	@ (80089d8 <__errno+0x8>)
 80089d2:	6818      	ldr	r0, [r3, #0]
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	20000018 	.word	0x20000018

080089dc <__libc_init_array>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	4d0d      	ldr	r5, [pc, #52]	@ (8008a14 <__libc_init_array+0x38>)
 80089e0:	4c0d      	ldr	r4, [pc, #52]	@ (8008a18 <__libc_init_array+0x3c>)
 80089e2:	1b64      	subs	r4, r4, r5
 80089e4:	10a4      	asrs	r4, r4, #2
 80089e6:	2600      	movs	r6, #0
 80089e8:	42a6      	cmp	r6, r4
 80089ea:	d109      	bne.n	8008a00 <__libc_init_array+0x24>
 80089ec:	4d0b      	ldr	r5, [pc, #44]	@ (8008a1c <__libc_init_array+0x40>)
 80089ee:	4c0c      	ldr	r4, [pc, #48]	@ (8008a20 <__libc_init_array+0x44>)
 80089f0:	f002 f868 	bl	800aac4 <_init>
 80089f4:	1b64      	subs	r4, r4, r5
 80089f6:	10a4      	asrs	r4, r4, #2
 80089f8:	2600      	movs	r6, #0
 80089fa:	42a6      	cmp	r6, r4
 80089fc:	d105      	bne.n	8008a0a <__libc_init_array+0x2e>
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a04:	4798      	blx	r3
 8008a06:	3601      	adds	r6, #1
 8008a08:	e7ee      	b.n	80089e8 <__libc_init_array+0xc>
 8008a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a0e:	4798      	blx	r3
 8008a10:	3601      	adds	r6, #1
 8008a12:	e7f2      	b.n	80089fa <__libc_init_array+0x1e>
 8008a14:	0800b29c 	.word	0x0800b29c
 8008a18:	0800b29c 	.word	0x0800b29c
 8008a1c:	0800b29c 	.word	0x0800b29c
 8008a20:	0800b2a0 	.word	0x0800b2a0

08008a24 <__retarget_lock_init_recursive>:
 8008a24:	4770      	bx	lr

08008a26 <__retarget_lock_acquire_recursive>:
 8008a26:	4770      	bx	lr

08008a28 <__retarget_lock_release_recursive>:
 8008a28:	4770      	bx	lr

08008a2a <memcpy>:
 8008a2a:	440a      	add	r2, r1
 8008a2c:	4291      	cmp	r1, r2
 8008a2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a32:	d100      	bne.n	8008a36 <memcpy+0xc>
 8008a34:	4770      	bx	lr
 8008a36:	b510      	push	{r4, lr}
 8008a38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a40:	4291      	cmp	r1, r2
 8008a42:	d1f9      	bne.n	8008a38 <memcpy+0xe>
 8008a44:	bd10      	pop	{r4, pc}

08008a46 <quorem>:
 8008a46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a4a:	6903      	ldr	r3, [r0, #16]
 8008a4c:	690c      	ldr	r4, [r1, #16]
 8008a4e:	42a3      	cmp	r3, r4
 8008a50:	4607      	mov	r7, r0
 8008a52:	db7e      	blt.n	8008b52 <quorem+0x10c>
 8008a54:	3c01      	subs	r4, #1
 8008a56:	f101 0814 	add.w	r8, r1, #20
 8008a5a:	00a3      	lsls	r3, r4, #2
 8008a5c:	f100 0514 	add.w	r5, r0, #20
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a66:	9301      	str	r3, [sp, #4]
 8008a68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a70:	3301      	adds	r3, #1
 8008a72:	429a      	cmp	r2, r3
 8008a74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a78:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a7c:	d32e      	bcc.n	8008adc <quorem+0x96>
 8008a7e:	f04f 0a00 	mov.w	sl, #0
 8008a82:	46c4      	mov	ip, r8
 8008a84:	46ae      	mov	lr, r5
 8008a86:	46d3      	mov	fp, sl
 8008a88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a8c:	b298      	uxth	r0, r3
 8008a8e:	fb06 a000 	mla	r0, r6, r0, sl
 8008a92:	0c02      	lsrs	r2, r0, #16
 8008a94:	0c1b      	lsrs	r3, r3, #16
 8008a96:	fb06 2303 	mla	r3, r6, r3, r2
 8008a9a:	f8de 2000 	ldr.w	r2, [lr]
 8008a9e:	b280      	uxth	r0, r0
 8008aa0:	b292      	uxth	r2, r2
 8008aa2:	1a12      	subs	r2, r2, r0
 8008aa4:	445a      	add	r2, fp
 8008aa6:	f8de 0000 	ldr.w	r0, [lr]
 8008aaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008ab4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008ab8:	b292      	uxth	r2, r2
 8008aba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008abe:	45e1      	cmp	r9, ip
 8008ac0:	f84e 2b04 	str.w	r2, [lr], #4
 8008ac4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008ac8:	d2de      	bcs.n	8008a88 <quorem+0x42>
 8008aca:	9b00      	ldr	r3, [sp, #0]
 8008acc:	58eb      	ldr	r3, [r5, r3]
 8008ace:	b92b      	cbnz	r3, 8008adc <quorem+0x96>
 8008ad0:	9b01      	ldr	r3, [sp, #4]
 8008ad2:	3b04      	subs	r3, #4
 8008ad4:	429d      	cmp	r5, r3
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	d32f      	bcc.n	8008b3a <quorem+0xf4>
 8008ada:	613c      	str	r4, [r7, #16]
 8008adc:	4638      	mov	r0, r7
 8008ade:	f001 f97d 	bl	8009ddc <__mcmp>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	db25      	blt.n	8008b32 <quorem+0xec>
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	2000      	movs	r0, #0
 8008aea:	f858 2b04 	ldr.w	r2, [r8], #4
 8008aee:	f8d1 c000 	ldr.w	ip, [r1]
 8008af2:	fa1f fe82 	uxth.w	lr, r2
 8008af6:	fa1f f38c 	uxth.w	r3, ip
 8008afa:	eba3 030e 	sub.w	r3, r3, lr
 8008afe:	4403      	add	r3, r0
 8008b00:	0c12      	lsrs	r2, r2, #16
 8008b02:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008b06:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b10:	45c1      	cmp	r9, r8
 8008b12:	f841 3b04 	str.w	r3, [r1], #4
 8008b16:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b1a:	d2e6      	bcs.n	8008aea <quorem+0xa4>
 8008b1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b24:	b922      	cbnz	r2, 8008b30 <quorem+0xea>
 8008b26:	3b04      	subs	r3, #4
 8008b28:	429d      	cmp	r5, r3
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	d30b      	bcc.n	8008b46 <quorem+0x100>
 8008b2e:	613c      	str	r4, [r7, #16]
 8008b30:	3601      	adds	r6, #1
 8008b32:	4630      	mov	r0, r6
 8008b34:	b003      	add	sp, #12
 8008b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3a:	6812      	ldr	r2, [r2, #0]
 8008b3c:	3b04      	subs	r3, #4
 8008b3e:	2a00      	cmp	r2, #0
 8008b40:	d1cb      	bne.n	8008ada <quorem+0x94>
 8008b42:	3c01      	subs	r4, #1
 8008b44:	e7c6      	b.n	8008ad4 <quorem+0x8e>
 8008b46:	6812      	ldr	r2, [r2, #0]
 8008b48:	3b04      	subs	r3, #4
 8008b4a:	2a00      	cmp	r2, #0
 8008b4c:	d1ef      	bne.n	8008b2e <quorem+0xe8>
 8008b4e:	3c01      	subs	r4, #1
 8008b50:	e7ea      	b.n	8008b28 <quorem+0xe2>
 8008b52:	2000      	movs	r0, #0
 8008b54:	e7ee      	b.n	8008b34 <quorem+0xee>
	...

08008b58 <_dtoa_r>:
 8008b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	69c7      	ldr	r7, [r0, #28]
 8008b5e:	b097      	sub	sp, #92	@ 0x5c
 8008b60:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008b64:	ec55 4b10 	vmov	r4, r5, d0
 8008b68:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008b6a:	9107      	str	r1, [sp, #28]
 8008b6c:	4681      	mov	r9, r0
 8008b6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008b70:	9311      	str	r3, [sp, #68]	@ 0x44
 8008b72:	b97f      	cbnz	r7, 8008b94 <_dtoa_r+0x3c>
 8008b74:	2010      	movs	r0, #16
 8008b76:	f000 fe09 	bl	800978c <malloc>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008b80:	b920      	cbnz	r0, 8008b8c <_dtoa_r+0x34>
 8008b82:	4ba9      	ldr	r3, [pc, #676]	@ (8008e28 <_dtoa_r+0x2d0>)
 8008b84:	21ef      	movs	r1, #239	@ 0xef
 8008b86:	48a9      	ldr	r0, [pc, #676]	@ (8008e2c <_dtoa_r+0x2d4>)
 8008b88:	f001 fc5e 	bl	800a448 <__assert_func>
 8008b8c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008b90:	6007      	str	r7, [r0, #0]
 8008b92:	60c7      	str	r7, [r0, #12]
 8008b94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008b98:	6819      	ldr	r1, [r3, #0]
 8008b9a:	b159      	cbz	r1, 8008bb4 <_dtoa_r+0x5c>
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	604a      	str	r2, [r1, #4]
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	4093      	lsls	r3, r2
 8008ba4:	608b      	str	r3, [r1, #8]
 8008ba6:	4648      	mov	r0, r9
 8008ba8:	f000 fee6 	bl	8009978 <_Bfree>
 8008bac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	1e2b      	subs	r3, r5, #0
 8008bb6:	bfb9      	ittee	lt
 8008bb8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008bbc:	9305      	strlt	r3, [sp, #20]
 8008bbe:	2300      	movge	r3, #0
 8008bc0:	6033      	strge	r3, [r6, #0]
 8008bc2:	9f05      	ldr	r7, [sp, #20]
 8008bc4:	4b9a      	ldr	r3, [pc, #616]	@ (8008e30 <_dtoa_r+0x2d8>)
 8008bc6:	bfbc      	itt	lt
 8008bc8:	2201      	movlt	r2, #1
 8008bca:	6032      	strlt	r2, [r6, #0]
 8008bcc:	43bb      	bics	r3, r7
 8008bce:	d112      	bne.n	8008bf6 <_dtoa_r+0x9e>
 8008bd0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008bd2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bdc:	4323      	orrs	r3, r4
 8008bde:	f000 855a 	beq.w	8009696 <_dtoa_r+0xb3e>
 8008be2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008be4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008e44 <_dtoa_r+0x2ec>
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f000 855c 	beq.w	80096a6 <_dtoa_r+0xb4e>
 8008bee:	f10a 0303 	add.w	r3, sl, #3
 8008bf2:	f000 bd56 	b.w	80096a2 <_dtoa_r+0xb4a>
 8008bf6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	ec51 0b17 	vmov	r0, r1, d7
 8008c00:	2300      	movs	r3, #0
 8008c02:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008c06:	f7f7 ff8f 	bl	8000b28 <__aeabi_dcmpeq>
 8008c0a:	4680      	mov	r8, r0
 8008c0c:	b158      	cbz	r0, 8008c26 <_dtoa_r+0xce>
 8008c0e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008c10:	2301      	movs	r3, #1
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c16:	b113      	cbz	r3, 8008c1e <_dtoa_r+0xc6>
 8008c18:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008c1a:	4b86      	ldr	r3, [pc, #536]	@ (8008e34 <_dtoa_r+0x2dc>)
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008e48 <_dtoa_r+0x2f0>
 8008c22:	f000 bd40 	b.w	80096a6 <_dtoa_r+0xb4e>
 8008c26:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008c2a:	aa14      	add	r2, sp, #80	@ 0x50
 8008c2c:	a915      	add	r1, sp, #84	@ 0x54
 8008c2e:	4648      	mov	r0, r9
 8008c30:	f001 f984 	bl	8009f3c <__d2b>
 8008c34:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008c38:	9002      	str	r0, [sp, #8]
 8008c3a:	2e00      	cmp	r6, #0
 8008c3c:	d078      	beq.n	8008d30 <_dtoa_r+0x1d8>
 8008c3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c40:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c4c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008c50:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008c54:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008c58:	4619      	mov	r1, r3
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	4b76      	ldr	r3, [pc, #472]	@ (8008e38 <_dtoa_r+0x2e0>)
 8008c5e:	f7f7 fb43 	bl	80002e8 <__aeabi_dsub>
 8008c62:	a36b      	add	r3, pc, #428	@ (adr r3, 8008e10 <_dtoa_r+0x2b8>)
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	f7f7 fcf6 	bl	8000658 <__aeabi_dmul>
 8008c6c:	a36a      	add	r3, pc, #424	@ (adr r3, 8008e18 <_dtoa_r+0x2c0>)
 8008c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c72:	f7f7 fb3b 	bl	80002ec <__adddf3>
 8008c76:	4604      	mov	r4, r0
 8008c78:	4630      	mov	r0, r6
 8008c7a:	460d      	mov	r5, r1
 8008c7c:	f7f7 fc82 	bl	8000584 <__aeabi_i2d>
 8008c80:	a367      	add	r3, pc, #412	@ (adr r3, 8008e20 <_dtoa_r+0x2c8>)
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	f7f7 fce7 	bl	8000658 <__aeabi_dmul>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4620      	mov	r0, r4
 8008c90:	4629      	mov	r1, r5
 8008c92:	f7f7 fb2b 	bl	80002ec <__adddf3>
 8008c96:	4604      	mov	r4, r0
 8008c98:	460d      	mov	r5, r1
 8008c9a:	f7f7 ff8d 	bl	8000bb8 <__aeabi_d2iz>
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	4607      	mov	r7, r0
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	f7f7 ff48 	bl	8000b3c <__aeabi_dcmplt>
 8008cac:	b140      	cbz	r0, 8008cc0 <_dtoa_r+0x168>
 8008cae:	4638      	mov	r0, r7
 8008cb0:	f7f7 fc68 	bl	8000584 <__aeabi_i2d>
 8008cb4:	4622      	mov	r2, r4
 8008cb6:	462b      	mov	r3, r5
 8008cb8:	f7f7 ff36 	bl	8000b28 <__aeabi_dcmpeq>
 8008cbc:	b900      	cbnz	r0, 8008cc0 <_dtoa_r+0x168>
 8008cbe:	3f01      	subs	r7, #1
 8008cc0:	2f16      	cmp	r7, #22
 8008cc2:	d852      	bhi.n	8008d6a <_dtoa_r+0x212>
 8008cc4:	4b5d      	ldr	r3, [pc, #372]	@ (8008e3c <_dtoa_r+0x2e4>)
 8008cc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008cd2:	f7f7 ff33 	bl	8000b3c <__aeabi_dcmplt>
 8008cd6:	2800      	cmp	r0, #0
 8008cd8:	d049      	beq.n	8008d6e <_dtoa_r+0x216>
 8008cda:	3f01      	subs	r7, #1
 8008cdc:	2300      	movs	r3, #0
 8008cde:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ce0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008ce2:	1b9b      	subs	r3, r3, r6
 8008ce4:	1e5a      	subs	r2, r3, #1
 8008ce6:	bf45      	ittet	mi
 8008ce8:	f1c3 0301 	rsbmi	r3, r3, #1
 8008cec:	9300      	strmi	r3, [sp, #0]
 8008cee:	2300      	movpl	r3, #0
 8008cf0:	2300      	movmi	r3, #0
 8008cf2:	9206      	str	r2, [sp, #24]
 8008cf4:	bf54      	ite	pl
 8008cf6:	9300      	strpl	r3, [sp, #0]
 8008cf8:	9306      	strmi	r3, [sp, #24]
 8008cfa:	2f00      	cmp	r7, #0
 8008cfc:	db39      	blt.n	8008d72 <_dtoa_r+0x21a>
 8008cfe:	9b06      	ldr	r3, [sp, #24]
 8008d00:	970d      	str	r7, [sp, #52]	@ 0x34
 8008d02:	443b      	add	r3, r7
 8008d04:	9306      	str	r3, [sp, #24]
 8008d06:	2300      	movs	r3, #0
 8008d08:	9308      	str	r3, [sp, #32]
 8008d0a:	9b07      	ldr	r3, [sp, #28]
 8008d0c:	2b09      	cmp	r3, #9
 8008d0e:	d863      	bhi.n	8008dd8 <_dtoa_r+0x280>
 8008d10:	2b05      	cmp	r3, #5
 8008d12:	bfc4      	itt	gt
 8008d14:	3b04      	subgt	r3, #4
 8008d16:	9307      	strgt	r3, [sp, #28]
 8008d18:	9b07      	ldr	r3, [sp, #28]
 8008d1a:	f1a3 0302 	sub.w	r3, r3, #2
 8008d1e:	bfcc      	ite	gt
 8008d20:	2400      	movgt	r4, #0
 8008d22:	2401      	movle	r4, #1
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d863      	bhi.n	8008df0 <_dtoa_r+0x298>
 8008d28:	e8df f003 	tbb	[pc, r3]
 8008d2c:	2b375452 	.word	0x2b375452
 8008d30:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008d34:	441e      	add	r6, r3
 8008d36:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008d3a:	2b20      	cmp	r3, #32
 8008d3c:	bfc1      	itttt	gt
 8008d3e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008d42:	409f      	lslgt	r7, r3
 8008d44:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008d48:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008d4c:	bfd6      	itet	le
 8008d4e:	f1c3 0320 	rsble	r3, r3, #32
 8008d52:	ea47 0003 	orrgt.w	r0, r7, r3
 8008d56:	fa04 f003 	lslle.w	r0, r4, r3
 8008d5a:	f7f7 fc03 	bl	8000564 <__aeabi_ui2d>
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008d64:	3e01      	subs	r6, #1
 8008d66:	9212      	str	r2, [sp, #72]	@ 0x48
 8008d68:	e776      	b.n	8008c58 <_dtoa_r+0x100>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e7b7      	b.n	8008cde <_dtoa_r+0x186>
 8008d6e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008d70:	e7b6      	b.n	8008ce0 <_dtoa_r+0x188>
 8008d72:	9b00      	ldr	r3, [sp, #0]
 8008d74:	1bdb      	subs	r3, r3, r7
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	427b      	negs	r3, r7
 8008d7a:	9308      	str	r3, [sp, #32]
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d80:	e7c3      	b.n	8008d0a <_dtoa_r+0x1b2>
 8008d82:	2301      	movs	r3, #1
 8008d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d88:	eb07 0b03 	add.w	fp, r7, r3
 8008d8c:	f10b 0301 	add.w	r3, fp, #1
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	9303      	str	r3, [sp, #12]
 8008d94:	bfb8      	it	lt
 8008d96:	2301      	movlt	r3, #1
 8008d98:	e006      	b.n	8008da8 <_dtoa_r+0x250>
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	dd28      	ble.n	8008df6 <_dtoa_r+0x29e>
 8008da4:	469b      	mov	fp, r3
 8008da6:	9303      	str	r3, [sp, #12]
 8008da8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008dac:	2100      	movs	r1, #0
 8008dae:	2204      	movs	r2, #4
 8008db0:	f102 0514 	add.w	r5, r2, #20
 8008db4:	429d      	cmp	r5, r3
 8008db6:	d926      	bls.n	8008e06 <_dtoa_r+0x2ae>
 8008db8:	6041      	str	r1, [r0, #4]
 8008dba:	4648      	mov	r0, r9
 8008dbc:	f000 fd9c 	bl	80098f8 <_Balloc>
 8008dc0:	4682      	mov	sl, r0
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d142      	bne.n	8008e4c <_dtoa_r+0x2f4>
 8008dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8008e40 <_dtoa_r+0x2e8>)
 8008dc8:	4602      	mov	r2, r0
 8008dca:	f240 11af 	movw	r1, #431	@ 0x1af
 8008dce:	e6da      	b.n	8008b86 <_dtoa_r+0x2e>
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	e7e3      	b.n	8008d9c <_dtoa_r+0x244>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	e7d5      	b.n	8008d84 <_dtoa_r+0x22c>
 8008dd8:	2401      	movs	r4, #1
 8008dda:	2300      	movs	r3, #0
 8008ddc:	9307      	str	r3, [sp, #28]
 8008dde:	9409      	str	r4, [sp, #36]	@ 0x24
 8008de0:	f04f 3bff 	mov.w	fp, #4294967295
 8008de4:	2200      	movs	r2, #0
 8008de6:	f8cd b00c 	str.w	fp, [sp, #12]
 8008dea:	2312      	movs	r3, #18
 8008dec:	920c      	str	r2, [sp, #48]	@ 0x30
 8008dee:	e7db      	b.n	8008da8 <_dtoa_r+0x250>
 8008df0:	2301      	movs	r3, #1
 8008df2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008df4:	e7f4      	b.n	8008de0 <_dtoa_r+0x288>
 8008df6:	f04f 0b01 	mov.w	fp, #1
 8008dfa:	f8cd b00c 	str.w	fp, [sp, #12]
 8008dfe:	465b      	mov	r3, fp
 8008e00:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008e04:	e7d0      	b.n	8008da8 <_dtoa_r+0x250>
 8008e06:	3101      	adds	r1, #1
 8008e08:	0052      	lsls	r2, r2, #1
 8008e0a:	e7d1      	b.n	8008db0 <_dtoa_r+0x258>
 8008e0c:	f3af 8000 	nop.w
 8008e10:	636f4361 	.word	0x636f4361
 8008e14:	3fd287a7 	.word	0x3fd287a7
 8008e18:	8b60c8b3 	.word	0x8b60c8b3
 8008e1c:	3fc68a28 	.word	0x3fc68a28
 8008e20:	509f79fb 	.word	0x509f79fb
 8008e24:	3fd34413 	.word	0x3fd34413
 8008e28:	0800af61 	.word	0x0800af61
 8008e2c:	0800af78 	.word	0x0800af78
 8008e30:	7ff00000 	.word	0x7ff00000
 8008e34:	0800af31 	.word	0x0800af31
 8008e38:	3ff80000 	.word	0x3ff80000
 8008e3c:	0800b0c8 	.word	0x0800b0c8
 8008e40:	0800afd0 	.word	0x0800afd0
 8008e44:	0800af5d 	.word	0x0800af5d
 8008e48:	0800af30 	.word	0x0800af30
 8008e4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008e50:	6018      	str	r0, [r3, #0]
 8008e52:	9b03      	ldr	r3, [sp, #12]
 8008e54:	2b0e      	cmp	r3, #14
 8008e56:	f200 80a1 	bhi.w	8008f9c <_dtoa_r+0x444>
 8008e5a:	2c00      	cmp	r4, #0
 8008e5c:	f000 809e 	beq.w	8008f9c <_dtoa_r+0x444>
 8008e60:	2f00      	cmp	r7, #0
 8008e62:	dd33      	ble.n	8008ecc <_dtoa_r+0x374>
 8008e64:	4b9c      	ldr	r3, [pc, #624]	@ (80090d8 <_dtoa_r+0x580>)
 8008e66:	f007 020f 	and.w	r2, r7, #15
 8008e6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e6e:	ed93 7b00 	vldr	d7, [r3]
 8008e72:	05f8      	lsls	r0, r7, #23
 8008e74:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008e78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008e7c:	d516      	bpl.n	8008eac <_dtoa_r+0x354>
 8008e7e:	4b97      	ldr	r3, [pc, #604]	@ (80090dc <_dtoa_r+0x584>)
 8008e80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e88:	f7f7 fd10 	bl	80008ac <__aeabi_ddiv>
 8008e8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e90:	f004 040f 	and.w	r4, r4, #15
 8008e94:	2603      	movs	r6, #3
 8008e96:	4d91      	ldr	r5, [pc, #580]	@ (80090dc <_dtoa_r+0x584>)
 8008e98:	b954      	cbnz	r4, 8008eb0 <_dtoa_r+0x358>
 8008e9a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008e9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ea2:	f7f7 fd03 	bl	80008ac <__aeabi_ddiv>
 8008ea6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008eaa:	e028      	b.n	8008efe <_dtoa_r+0x3a6>
 8008eac:	2602      	movs	r6, #2
 8008eae:	e7f2      	b.n	8008e96 <_dtoa_r+0x33e>
 8008eb0:	07e1      	lsls	r1, r4, #31
 8008eb2:	d508      	bpl.n	8008ec6 <_dtoa_r+0x36e>
 8008eb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008eb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ebc:	f7f7 fbcc 	bl	8000658 <__aeabi_dmul>
 8008ec0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ec4:	3601      	adds	r6, #1
 8008ec6:	1064      	asrs	r4, r4, #1
 8008ec8:	3508      	adds	r5, #8
 8008eca:	e7e5      	b.n	8008e98 <_dtoa_r+0x340>
 8008ecc:	f000 80af 	beq.w	800902e <_dtoa_r+0x4d6>
 8008ed0:	427c      	negs	r4, r7
 8008ed2:	4b81      	ldr	r3, [pc, #516]	@ (80090d8 <_dtoa_r+0x580>)
 8008ed4:	4d81      	ldr	r5, [pc, #516]	@ (80090dc <_dtoa_r+0x584>)
 8008ed6:	f004 020f 	and.w	r2, r4, #15
 8008eda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ee6:	f7f7 fbb7 	bl	8000658 <__aeabi_dmul>
 8008eea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008eee:	1124      	asrs	r4, r4, #4
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	2602      	movs	r6, #2
 8008ef4:	2c00      	cmp	r4, #0
 8008ef6:	f040 808f 	bne.w	8009018 <_dtoa_r+0x4c0>
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1d3      	bne.n	8008ea6 <_dtoa_r+0x34e>
 8008efe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008f00:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f000 8094 	beq.w	8009032 <_dtoa_r+0x4da>
 8008f0a:	4b75      	ldr	r3, [pc, #468]	@ (80090e0 <_dtoa_r+0x588>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	4620      	mov	r0, r4
 8008f10:	4629      	mov	r1, r5
 8008f12:	f7f7 fe13 	bl	8000b3c <__aeabi_dcmplt>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	f000 808b 	beq.w	8009032 <_dtoa_r+0x4da>
 8008f1c:	9b03      	ldr	r3, [sp, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 8087 	beq.w	8009032 <_dtoa_r+0x4da>
 8008f24:	f1bb 0f00 	cmp.w	fp, #0
 8008f28:	dd34      	ble.n	8008f94 <_dtoa_r+0x43c>
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	4b6d      	ldr	r3, [pc, #436]	@ (80090e4 <_dtoa_r+0x58c>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	4629      	mov	r1, r5
 8008f32:	f7f7 fb91 	bl	8000658 <__aeabi_dmul>
 8008f36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f3a:	f107 38ff 	add.w	r8, r7, #4294967295
 8008f3e:	3601      	adds	r6, #1
 8008f40:	465c      	mov	r4, fp
 8008f42:	4630      	mov	r0, r6
 8008f44:	f7f7 fb1e 	bl	8000584 <__aeabi_i2d>
 8008f48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f4c:	f7f7 fb84 	bl	8000658 <__aeabi_dmul>
 8008f50:	4b65      	ldr	r3, [pc, #404]	@ (80090e8 <_dtoa_r+0x590>)
 8008f52:	2200      	movs	r2, #0
 8008f54:	f7f7 f9ca 	bl	80002ec <__adddf3>
 8008f58:	4605      	mov	r5, r0
 8008f5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008f5e:	2c00      	cmp	r4, #0
 8008f60:	d16a      	bne.n	8009038 <_dtoa_r+0x4e0>
 8008f62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f66:	4b61      	ldr	r3, [pc, #388]	@ (80090ec <_dtoa_r+0x594>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f7f7 f9bd 	bl	80002e8 <__aeabi_dsub>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f76:	462a      	mov	r2, r5
 8008f78:	4633      	mov	r3, r6
 8008f7a:	f7f7 fdfd 	bl	8000b78 <__aeabi_dcmpgt>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	f040 8298 	bne.w	80094b4 <_dtoa_r+0x95c>
 8008f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f88:	462a      	mov	r2, r5
 8008f8a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008f8e:	f7f7 fdd5 	bl	8000b3c <__aeabi_dcmplt>
 8008f92:	bb38      	cbnz	r0, 8008fe4 <_dtoa_r+0x48c>
 8008f94:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008f98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008f9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f2c0 8157 	blt.w	8009252 <_dtoa_r+0x6fa>
 8008fa4:	2f0e      	cmp	r7, #14
 8008fa6:	f300 8154 	bgt.w	8009252 <_dtoa_r+0x6fa>
 8008faa:	4b4b      	ldr	r3, [pc, #300]	@ (80090d8 <_dtoa_r+0x580>)
 8008fac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008fb0:	ed93 7b00 	vldr	d7, [r3]
 8008fb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	ed8d 7b00 	vstr	d7, [sp]
 8008fbc:	f280 80e5 	bge.w	800918a <_dtoa_r+0x632>
 8008fc0:	9b03      	ldr	r3, [sp, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f300 80e1 	bgt.w	800918a <_dtoa_r+0x632>
 8008fc8:	d10c      	bne.n	8008fe4 <_dtoa_r+0x48c>
 8008fca:	4b48      	ldr	r3, [pc, #288]	@ (80090ec <_dtoa_r+0x594>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	ec51 0b17 	vmov	r0, r1, d7
 8008fd2:	f7f7 fb41 	bl	8000658 <__aeabi_dmul>
 8008fd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fda:	f7f7 fdc3 	bl	8000b64 <__aeabi_dcmpge>
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	f000 8266 	beq.w	80094b0 <_dtoa_r+0x958>
 8008fe4:	2400      	movs	r4, #0
 8008fe6:	4625      	mov	r5, r4
 8008fe8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008fea:	4656      	mov	r6, sl
 8008fec:	ea6f 0803 	mvn.w	r8, r3
 8008ff0:	2700      	movs	r7, #0
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	4648      	mov	r0, r9
 8008ff6:	f000 fcbf 	bl	8009978 <_Bfree>
 8008ffa:	2d00      	cmp	r5, #0
 8008ffc:	f000 80bd 	beq.w	800917a <_dtoa_r+0x622>
 8009000:	b12f      	cbz	r7, 800900e <_dtoa_r+0x4b6>
 8009002:	42af      	cmp	r7, r5
 8009004:	d003      	beq.n	800900e <_dtoa_r+0x4b6>
 8009006:	4639      	mov	r1, r7
 8009008:	4648      	mov	r0, r9
 800900a:	f000 fcb5 	bl	8009978 <_Bfree>
 800900e:	4629      	mov	r1, r5
 8009010:	4648      	mov	r0, r9
 8009012:	f000 fcb1 	bl	8009978 <_Bfree>
 8009016:	e0b0      	b.n	800917a <_dtoa_r+0x622>
 8009018:	07e2      	lsls	r2, r4, #31
 800901a:	d505      	bpl.n	8009028 <_dtoa_r+0x4d0>
 800901c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009020:	f7f7 fb1a 	bl	8000658 <__aeabi_dmul>
 8009024:	3601      	adds	r6, #1
 8009026:	2301      	movs	r3, #1
 8009028:	1064      	asrs	r4, r4, #1
 800902a:	3508      	adds	r5, #8
 800902c:	e762      	b.n	8008ef4 <_dtoa_r+0x39c>
 800902e:	2602      	movs	r6, #2
 8009030:	e765      	b.n	8008efe <_dtoa_r+0x3a6>
 8009032:	9c03      	ldr	r4, [sp, #12]
 8009034:	46b8      	mov	r8, r7
 8009036:	e784      	b.n	8008f42 <_dtoa_r+0x3ea>
 8009038:	4b27      	ldr	r3, [pc, #156]	@ (80090d8 <_dtoa_r+0x580>)
 800903a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800903c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009040:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009044:	4454      	add	r4, sl
 8009046:	2900      	cmp	r1, #0
 8009048:	d054      	beq.n	80090f4 <_dtoa_r+0x59c>
 800904a:	4929      	ldr	r1, [pc, #164]	@ (80090f0 <_dtoa_r+0x598>)
 800904c:	2000      	movs	r0, #0
 800904e:	f7f7 fc2d 	bl	80008ac <__aeabi_ddiv>
 8009052:	4633      	mov	r3, r6
 8009054:	462a      	mov	r2, r5
 8009056:	f7f7 f947 	bl	80002e8 <__aeabi_dsub>
 800905a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800905e:	4656      	mov	r6, sl
 8009060:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009064:	f7f7 fda8 	bl	8000bb8 <__aeabi_d2iz>
 8009068:	4605      	mov	r5, r0
 800906a:	f7f7 fa8b 	bl	8000584 <__aeabi_i2d>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009076:	f7f7 f937 	bl	80002e8 <__aeabi_dsub>
 800907a:	3530      	adds	r5, #48	@ 0x30
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009084:	f806 5b01 	strb.w	r5, [r6], #1
 8009088:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800908c:	f7f7 fd56 	bl	8000b3c <__aeabi_dcmplt>
 8009090:	2800      	cmp	r0, #0
 8009092:	d172      	bne.n	800917a <_dtoa_r+0x622>
 8009094:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009098:	4911      	ldr	r1, [pc, #68]	@ (80090e0 <_dtoa_r+0x588>)
 800909a:	2000      	movs	r0, #0
 800909c:	f7f7 f924 	bl	80002e8 <__aeabi_dsub>
 80090a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80090a4:	f7f7 fd4a 	bl	8000b3c <__aeabi_dcmplt>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	f040 80b4 	bne.w	8009216 <_dtoa_r+0x6be>
 80090ae:	42a6      	cmp	r6, r4
 80090b0:	f43f af70 	beq.w	8008f94 <_dtoa_r+0x43c>
 80090b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80090b8:	4b0a      	ldr	r3, [pc, #40]	@ (80090e4 <_dtoa_r+0x58c>)
 80090ba:	2200      	movs	r2, #0
 80090bc:	f7f7 facc 	bl	8000658 <__aeabi_dmul>
 80090c0:	4b08      	ldr	r3, [pc, #32]	@ (80090e4 <_dtoa_r+0x58c>)
 80090c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80090c6:	2200      	movs	r2, #0
 80090c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090cc:	f7f7 fac4 	bl	8000658 <__aeabi_dmul>
 80090d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090d4:	e7c4      	b.n	8009060 <_dtoa_r+0x508>
 80090d6:	bf00      	nop
 80090d8:	0800b0c8 	.word	0x0800b0c8
 80090dc:	0800b0a0 	.word	0x0800b0a0
 80090e0:	3ff00000 	.word	0x3ff00000
 80090e4:	40240000 	.word	0x40240000
 80090e8:	401c0000 	.word	0x401c0000
 80090ec:	40140000 	.word	0x40140000
 80090f0:	3fe00000 	.word	0x3fe00000
 80090f4:	4631      	mov	r1, r6
 80090f6:	4628      	mov	r0, r5
 80090f8:	f7f7 faae 	bl	8000658 <__aeabi_dmul>
 80090fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009100:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009102:	4656      	mov	r6, sl
 8009104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009108:	f7f7 fd56 	bl	8000bb8 <__aeabi_d2iz>
 800910c:	4605      	mov	r5, r0
 800910e:	f7f7 fa39 	bl	8000584 <__aeabi_i2d>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800911a:	f7f7 f8e5 	bl	80002e8 <__aeabi_dsub>
 800911e:	3530      	adds	r5, #48	@ 0x30
 8009120:	f806 5b01 	strb.w	r5, [r6], #1
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	42a6      	cmp	r6, r4
 800912a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800912e:	f04f 0200 	mov.w	r2, #0
 8009132:	d124      	bne.n	800917e <_dtoa_r+0x626>
 8009134:	4baf      	ldr	r3, [pc, #700]	@ (80093f4 <_dtoa_r+0x89c>)
 8009136:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800913a:	f7f7 f8d7 	bl	80002ec <__adddf3>
 800913e:	4602      	mov	r2, r0
 8009140:	460b      	mov	r3, r1
 8009142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009146:	f7f7 fd17 	bl	8000b78 <__aeabi_dcmpgt>
 800914a:	2800      	cmp	r0, #0
 800914c:	d163      	bne.n	8009216 <_dtoa_r+0x6be>
 800914e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009152:	49a8      	ldr	r1, [pc, #672]	@ (80093f4 <_dtoa_r+0x89c>)
 8009154:	2000      	movs	r0, #0
 8009156:	f7f7 f8c7 	bl	80002e8 <__aeabi_dsub>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009162:	f7f7 fceb 	bl	8000b3c <__aeabi_dcmplt>
 8009166:	2800      	cmp	r0, #0
 8009168:	f43f af14 	beq.w	8008f94 <_dtoa_r+0x43c>
 800916c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800916e:	1e73      	subs	r3, r6, #1
 8009170:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009172:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009176:	2b30      	cmp	r3, #48	@ 0x30
 8009178:	d0f8      	beq.n	800916c <_dtoa_r+0x614>
 800917a:	4647      	mov	r7, r8
 800917c:	e03b      	b.n	80091f6 <_dtoa_r+0x69e>
 800917e:	4b9e      	ldr	r3, [pc, #632]	@ (80093f8 <_dtoa_r+0x8a0>)
 8009180:	f7f7 fa6a 	bl	8000658 <__aeabi_dmul>
 8009184:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009188:	e7bc      	b.n	8009104 <_dtoa_r+0x5ac>
 800918a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800918e:	4656      	mov	r6, sl
 8009190:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009194:	4620      	mov	r0, r4
 8009196:	4629      	mov	r1, r5
 8009198:	f7f7 fb88 	bl	80008ac <__aeabi_ddiv>
 800919c:	f7f7 fd0c 	bl	8000bb8 <__aeabi_d2iz>
 80091a0:	4680      	mov	r8, r0
 80091a2:	f7f7 f9ef 	bl	8000584 <__aeabi_i2d>
 80091a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091aa:	f7f7 fa55 	bl	8000658 <__aeabi_dmul>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	4620      	mov	r0, r4
 80091b4:	4629      	mov	r1, r5
 80091b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80091ba:	f7f7 f895 	bl	80002e8 <__aeabi_dsub>
 80091be:	f806 4b01 	strb.w	r4, [r6], #1
 80091c2:	9d03      	ldr	r5, [sp, #12]
 80091c4:	eba6 040a 	sub.w	r4, r6, sl
 80091c8:	42a5      	cmp	r5, r4
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	d133      	bne.n	8009238 <_dtoa_r+0x6e0>
 80091d0:	f7f7 f88c 	bl	80002ec <__adddf3>
 80091d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091d8:	4604      	mov	r4, r0
 80091da:	460d      	mov	r5, r1
 80091dc:	f7f7 fccc 	bl	8000b78 <__aeabi_dcmpgt>
 80091e0:	b9c0      	cbnz	r0, 8009214 <_dtoa_r+0x6bc>
 80091e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091e6:	4620      	mov	r0, r4
 80091e8:	4629      	mov	r1, r5
 80091ea:	f7f7 fc9d 	bl	8000b28 <__aeabi_dcmpeq>
 80091ee:	b110      	cbz	r0, 80091f6 <_dtoa_r+0x69e>
 80091f0:	f018 0f01 	tst.w	r8, #1
 80091f4:	d10e      	bne.n	8009214 <_dtoa_r+0x6bc>
 80091f6:	9902      	ldr	r1, [sp, #8]
 80091f8:	4648      	mov	r0, r9
 80091fa:	f000 fbbd 	bl	8009978 <_Bfree>
 80091fe:	2300      	movs	r3, #0
 8009200:	7033      	strb	r3, [r6, #0]
 8009202:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009204:	3701      	adds	r7, #1
 8009206:	601f      	str	r7, [r3, #0]
 8009208:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800920a:	2b00      	cmp	r3, #0
 800920c:	f000 824b 	beq.w	80096a6 <_dtoa_r+0xb4e>
 8009210:	601e      	str	r6, [r3, #0]
 8009212:	e248      	b.n	80096a6 <_dtoa_r+0xb4e>
 8009214:	46b8      	mov	r8, r7
 8009216:	4633      	mov	r3, r6
 8009218:	461e      	mov	r6, r3
 800921a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800921e:	2a39      	cmp	r2, #57	@ 0x39
 8009220:	d106      	bne.n	8009230 <_dtoa_r+0x6d8>
 8009222:	459a      	cmp	sl, r3
 8009224:	d1f8      	bne.n	8009218 <_dtoa_r+0x6c0>
 8009226:	2230      	movs	r2, #48	@ 0x30
 8009228:	f108 0801 	add.w	r8, r8, #1
 800922c:	f88a 2000 	strb.w	r2, [sl]
 8009230:	781a      	ldrb	r2, [r3, #0]
 8009232:	3201      	adds	r2, #1
 8009234:	701a      	strb	r2, [r3, #0]
 8009236:	e7a0      	b.n	800917a <_dtoa_r+0x622>
 8009238:	4b6f      	ldr	r3, [pc, #444]	@ (80093f8 <_dtoa_r+0x8a0>)
 800923a:	2200      	movs	r2, #0
 800923c:	f7f7 fa0c 	bl	8000658 <__aeabi_dmul>
 8009240:	2200      	movs	r2, #0
 8009242:	2300      	movs	r3, #0
 8009244:	4604      	mov	r4, r0
 8009246:	460d      	mov	r5, r1
 8009248:	f7f7 fc6e 	bl	8000b28 <__aeabi_dcmpeq>
 800924c:	2800      	cmp	r0, #0
 800924e:	d09f      	beq.n	8009190 <_dtoa_r+0x638>
 8009250:	e7d1      	b.n	80091f6 <_dtoa_r+0x69e>
 8009252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009254:	2a00      	cmp	r2, #0
 8009256:	f000 80ea 	beq.w	800942e <_dtoa_r+0x8d6>
 800925a:	9a07      	ldr	r2, [sp, #28]
 800925c:	2a01      	cmp	r2, #1
 800925e:	f300 80cd 	bgt.w	80093fc <_dtoa_r+0x8a4>
 8009262:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009264:	2a00      	cmp	r2, #0
 8009266:	f000 80c1 	beq.w	80093ec <_dtoa_r+0x894>
 800926a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800926e:	9c08      	ldr	r4, [sp, #32]
 8009270:	9e00      	ldr	r6, [sp, #0]
 8009272:	9a00      	ldr	r2, [sp, #0]
 8009274:	441a      	add	r2, r3
 8009276:	9200      	str	r2, [sp, #0]
 8009278:	9a06      	ldr	r2, [sp, #24]
 800927a:	2101      	movs	r1, #1
 800927c:	441a      	add	r2, r3
 800927e:	4648      	mov	r0, r9
 8009280:	9206      	str	r2, [sp, #24]
 8009282:	f000 fc2d 	bl	8009ae0 <__i2b>
 8009286:	4605      	mov	r5, r0
 8009288:	b166      	cbz	r6, 80092a4 <_dtoa_r+0x74c>
 800928a:	9b06      	ldr	r3, [sp, #24]
 800928c:	2b00      	cmp	r3, #0
 800928e:	dd09      	ble.n	80092a4 <_dtoa_r+0x74c>
 8009290:	42b3      	cmp	r3, r6
 8009292:	9a00      	ldr	r2, [sp, #0]
 8009294:	bfa8      	it	ge
 8009296:	4633      	movge	r3, r6
 8009298:	1ad2      	subs	r2, r2, r3
 800929a:	9200      	str	r2, [sp, #0]
 800929c:	9a06      	ldr	r2, [sp, #24]
 800929e:	1af6      	subs	r6, r6, r3
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	9306      	str	r3, [sp, #24]
 80092a4:	9b08      	ldr	r3, [sp, #32]
 80092a6:	b30b      	cbz	r3, 80092ec <_dtoa_r+0x794>
 80092a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 80c6 	beq.w	800943c <_dtoa_r+0x8e4>
 80092b0:	2c00      	cmp	r4, #0
 80092b2:	f000 80c0 	beq.w	8009436 <_dtoa_r+0x8de>
 80092b6:	4629      	mov	r1, r5
 80092b8:	4622      	mov	r2, r4
 80092ba:	4648      	mov	r0, r9
 80092bc:	f000 fcc8 	bl	8009c50 <__pow5mult>
 80092c0:	9a02      	ldr	r2, [sp, #8]
 80092c2:	4601      	mov	r1, r0
 80092c4:	4605      	mov	r5, r0
 80092c6:	4648      	mov	r0, r9
 80092c8:	f000 fc20 	bl	8009b0c <__multiply>
 80092cc:	9902      	ldr	r1, [sp, #8]
 80092ce:	4680      	mov	r8, r0
 80092d0:	4648      	mov	r0, r9
 80092d2:	f000 fb51 	bl	8009978 <_Bfree>
 80092d6:	9b08      	ldr	r3, [sp, #32]
 80092d8:	1b1b      	subs	r3, r3, r4
 80092da:	9308      	str	r3, [sp, #32]
 80092dc:	f000 80b1 	beq.w	8009442 <_dtoa_r+0x8ea>
 80092e0:	9a08      	ldr	r2, [sp, #32]
 80092e2:	4641      	mov	r1, r8
 80092e4:	4648      	mov	r0, r9
 80092e6:	f000 fcb3 	bl	8009c50 <__pow5mult>
 80092ea:	9002      	str	r0, [sp, #8]
 80092ec:	2101      	movs	r1, #1
 80092ee:	4648      	mov	r0, r9
 80092f0:	f000 fbf6 	bl	8009ae0 <__i2b>
 80092f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80092f6:	4604      	mov	r4, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 81d8 	beq.w	80096ae <_dtoa_r+0xb56>
 80092fe:	461a      	mov	r2, r3
 8009300:	4601      	mov	r1, r0
 8009302:	4648      	mov	r0, r9
 8009304:	f000 fca4 	bl	8009c50 <__pow5mult>
 8009308:	9b07      	ldr	r3, [sp, #28]
 800930a:	2b01      	cmp	r3, #1
 800930c:	4604      	mov	r4, r0
 800930e:	f300 809f 	bgt.w	8009450 <_dtoa_r+0x8f8>
 8009312:	9b04      	ldr	r3, [sp, #16]
 8009314:	2b00      	cmp	r3, #0
 8009316:	f040 8097 	bne.w	8009448 <_dtoa_r+0x8f0>
 800931a:	9b05      	ldr	r3, [sp, #20]
 800931c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009320:	2b00      	cmp	r3, #0
 8009322:	f040 8093 	bne.w	800944c <_dtoa_r+0x8f4>
 8009326:	9b05      	ldr	r3, [sp, #20]
 8009328:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800932c:	0d1b      	lsrs	r3, r3, #20
 800932e:	051b      	lsls	r3, r3, #20
 8009330:	b133      	cbz	r3, 8009340 <_dtoa_r+0x7e8>
 8009332:	9b00      	ldr	r3, [sp, #0]
 8009334:	3301      	adds	r3, #1
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	9b06      	ldr	r3, [sp, #24]
 800933a:	3301      	adds	r3, #1
 800933c:	9306      	str	r3, [sp, #24]
 800933e:	2301      	movs	r3, #1
 8009340:	9308      	str	r3, [sp, #32]
 8009342:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009344:	2b00      	cmp	r3, #0
 8009346:	f000 81b8 	beq.w	80096ba <_dtoa_r+0xb62>
 800934a:	6923      	ldr	r3, [r4, #16]
 800934c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009350:	6918      	ldr	r0, [r3, #16]
 8009352:	f000 fb79 	bl	8009a48 <__hi0bits>
 8009356:	f1c0 0020 	rsb	r0, r0, #32
 800935a:	9b06      	ldr	r3, [sp, #24]
 800935c:	4418      	add	r0, r3
 800935e:	f010 001f 	ands.w	r0, r0, #31
 8009362:	f000 8082 	beq.w	800946a <_dtoa_r+0x912>
 8009366:	f1c0 0320 	rsb	r3, r0, #32
 800936a:	2b04      	cmp	r3, #4
 800936c:	dd73      	ble.n	8009456 <_dtoa_r+0x8fe>
 800936e:	9b00      	ldr	r3, [sp, #0]
 8009370:	f1c0 001c 	rsb	r0, r0, #28
 8009374:	4403      	add	r3, r0
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	9b06      	ldr	r3, [sp, #24]
 800937a:	4403      	add	r3, r0
 800937c:	4406      	add	r6, r0
 800937e:	9306      	str	r3, [sp, #24]
 8009380:	9b00      	ldr	r3, [sp, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	dd05      	ble.n	8009392 <_dtoa_r+0x83a>
 8009386:	9902      	ldr	r1, [sp, #8]
 8009388:	461a      	mov	r2, r3
 800938a:	4648      	mov	r0, r9
 800938c:	f000 fcba 	bl	8009d04 <__lshift>
 8009390:	9002      	str	r0, [sp, #8]
 8009392:	9b06      	ldr	r3, [sp, #24]
 8009394:	2b00      	cmp	r3, #0
 8009396:	dd05      	ble.n	80093a4 <_dtoa_r+0x84c>
 8009398:	4621      	mov	r1, r4
 800939a:	461a      	mov	r2, r3
 800939c:	4648      	mov	r0, r9
 800939e:	f000 fcb1 	bl	8009d04 <__lshift>
 80093a2:	4604      	mov	r4, r0
 80093a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d061      	beq.n	800946e <_dtoa_r+0x916>
 80093aa:	9802      	ldr	r0, [sp, #8]
 80093ac:	4621      	mov	r1, r4
 80093ae:	f000 fd15 	bl	8009ddc <__mcmp>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	da5b      	bge.n	800946e <_dtoa_r+0x916>
 80093b6:	2300      	movs	r3, #0
 80093b8:	9902      	ldr	r1, [sp, #8]
 80093ba:	220a      	movs	r2, #10
 80093bc:	4648      	mov	r0, r9
 80093be:	f000 fafd 	bl	80099bc <__multadd>
 80093c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c4:	9002      	str	r0, [sp, #8]
 80093c6:	f107 38ff 	add.w	r8, r7, #4294967295
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f000 8177 	beq.w	80096be <_dtoa_r+0xb66>
 80093d0:	4629      	mov	r1, r5
 80093d2:	2300      	movs	r3, #0
 80093d4:	220a      	movs	r2, #10
 80093d6:	4648      	mov	r0, r9
 80093d8:	f000 faf0 	bl	80099bc <__multadd>
 80093dc:	f1bb 0f00 	cmp.w	fp, #0
 80093e0:	4605      	mov	r5, r0
 80093e2:	dc6f      	bgt.n	80094c4 <_dtoa_r+0x96c>
 80093e4:	9b07      	ldr	r3, [sp, #28]
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	dc49      	bgt.n	800947e <_dtoa_r+0x926>
 80093ea:	e06b      	b.n	80094c4 <_dtoa_r+0x96c>
 80093ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80093ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80093f2:	e73c      	b.n	800926e <_dtoa_r+0x716>
 80093f4:	3fe00000 	.word	0x3fe00000
 80093f8:	40240000 	.word	0x40240000
 80093fc:	9b03      	ldr	r3, [sp, #12]
 80093fe:	1e5c      	subs	r4, r3, #1
 8009400:	9b08      	ldr	r3, [sp, #32]
 8009402:	42a3      	cmp	r3, r4
 8009404:	db09      	blt.n	800941a <_dtoa_r+0x8c2>
 8009406:	1b1c      	subs	r4, r3, r4
 8009408:	9b03      	ldr	r3, [sp, #12]
 800940a:	2b00      	cmp	r3, #0
 800940c:	f6bf af30 	bge.w	8009270 <_dtoa_r+0x718>
 8009410:	9b00      	ldr	r3, [sp, #0]
 8009412:	9a03      	ldr	r2, [sp, #12]
 8009414:	1a9e      	subs	r6, r3, r2
 8009416:	2300      	movs	r3, #0
 8009418:	e72b      	b.n	8009272 <_dtoa_r+0x71a>
 800941a:	9b08      	ldr	r3, [sp, #32]
 800941c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800941e:	9408      	str	r4, [sp, #32]
 8009420:	1ae3      	subs	r3, r4, r3
 8009422:	441a      	add	r2, r3
 8009424:	9e00      	ldr	r6, [sp, #0]
 8009426:	9b03      	ldr	r3, [sp, #12]
 8009428:	920d      	str	r2, [sp, #52]	@ 0x34
 800942a:	2400      	movs	r4, #0
 800942c:	e721      	b.n	8009272 <_dtoa_r+0x71a>
 800942e:	9c08      	ldr	r4, [sp, #32]
 8009430:	9e00      	ldr	r6, [sp, #0]
 8009432:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009434:	e728      	b.n	8009288 <_dtoa_r+0x730>
 8009436:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800943a:	e751      	b.n	80092e0 <_dtoa_r+0x788>
 800943c:	9a08      	ldr	r2, [sp, #32]
 800943e:	9902      	ldr	r1, [sp, #8]
 8009440:	e750      	b.n	80092e4 <_dtoa_r+0x78c>
 8009442:	f8cd 8008 	str.w	r8, [sp, #8]
 8009446:	e751      	b.n	80092ec <_dtoa_r+0x794>
 8009448:	2300      	movs	r3, #0
 800944a:	e779      	b.n	8009340 <_dtoa_r+0x7e8>
 800944c:	9b04      	ldr	r3, [sp, #16]
 800944e:	e777      	b.n	8009340 <_dtoa_r+0x7e8>
 8009450:	2300      	movs	r3, #0
 8009452:	9308      	str	r3, [sp, #32]
 8009454:	e779      	b.n	800934a <_dtoa_r+0x7f2>
 8009456:	d093      	beq.n	8009380 <_dtoa_r+0x828>
 8009458:	9a00      	ldr	r2, [sp, #0]
 800945a:	331c      	adds	r3, #28
 800945c:	441a      	add	r2, r3
 800945e:	9200      	str	r2, [sp, #0]
 8009460:	9a06      	ldr	r2, [sp, #24]
 8009462:	441a      	add	r2, r3
 8009464:	441e      	add	r6, r3
 8009466:	9206      	str	r2, [sp, #24]
 8009468:	e78a      	b.n	8009380 <_dtoa_r+0x828>
 800946a:	4603      	mov	r3, r0
 800946c:	e7f4      	b.n	8009458 <_dtoa_r+0x900>
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	46b8      	mov	r8, r7
 8009474:	dc20      	bgt.n	80094b8 <_dtoa_r+0x960>
 8009476:	469b      	mov	fp, r3
 8009478:	9b07      	ldr	r3, [sp, #28]
 800947a:	2b02      	cmp	r3, #2
 800947c:	dd1e      	ble.n	80094bc <_dtoa_r+0x964>
 800947e:	f1bb 0f00 	cmp.w	fp, #0
 8009482:	f47f adb1 	bne.w	8008fe8 <_dtoa_r+0x490>
 8009486:	4621      	mov	r1, r4
 8009488:	465b      	mov	r3, fp
 800948a:	2205      	movs	r2, #5
 800948c:	4648      	mov	r0, r9
 800948e:	f000 fa95 	bl	80099bc <__multadd>
 8009492:	4601      	mov	r1, r0
 8009494:	4604      	mov	r4, r0
 8009496:	9802      	ldr	r0, [sp, #8]
 8009498:	f000 fca0 	bl	8009ddc <__mcmp>
 800949c:	2800      	cmp	r0, #0
 800949e:	f77f ada3 	ble.w	8008fe8 <_dtoa_r+0x490>
 80094a2:	4656      	mov	r6, sl
 80094a4:	2331      	movs	r3, #49	@ 0x31
 80094a6:	f806 3b01 	strb.w	r3, [r6], #1
 80094aa:	f108 0801 	add.w	r8, r8, #1
 80094ae:	e59f      	b.n	8008ff0 <_dtoa_r+0x498>
 80094b0:	9c03      	ldr	r4, [sp, #12]
 80094b2:	46b8      	mov	r8, r7
 80094b4:	4625      	mov	r5, r4
 80094b6:	e7f4      	b.n	80094a2 <_dtoa_r+0x94a>
 80094b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80094bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f000 8101 	beq.w	80096c6 <_dtoa_r+0xb6e>
 80094c4:	2e00      	cmp	r6, #0
 80094c6:	dd05      	ble.n	80094d4 <_dtoa_r+0x97c>
 80094c8:	4629      	mov	r1, r5
 80094ca:	4632      	mov	r2, r6
 80094cc:	4648      	mov	r0, r9
 80094ce:	f000 fc19 	bl	8009d04 <__lshift>
 80094d2:	4605      	mov	r5, r0
 80094d4:	9b08      	ldr	r3, [sp, #32]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d05c      	beq.n	8009594 <_dtoa_r+0xa3c>
 80094da:	6869      	ldr	r1, [r5, #4]
 80094dc:	4648      	mov	r0, r9
 80094de:	f000 fa0b 	bl	80098f8 <_Balloc>
 80094e2:	4606      	mov	r6, r0
 80094e4:	b928      	cbnz	r0, 80094f2 <_dtoa_r+0x99a>
 80094e6:	4b82      	ldr	r3, [pc, #520]	@ (80096f0 <_dtoa_r+0xb98>)
 80094e8:	4602      	mov	r2, r0
 80094ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80094ee:	f7ff bb4a 	b.w	8008b86 <_dtoa_r+0x2e>
 80094f2:	692a      	ldr	r2, [r5, #16]
 80094f4:	3202      	adds	r2, #2
 80094f6:	0092      	lsls	r2, r2, #2
 80094f8:	f105 010c 	add.w	r1, r5, #12
 80094fc:	300c      	adds	r0, #12
 80094fe:	f7ff fa94 	bl	8008a2a <memcpy>
 8009502:	2201      	movs	r2, #1
 8009504:	4631      	mov	r1, r6
 8009506:	4648      	mov	r0, r9
 8009508:	f000 fbfc 	bl	8009d04 <__lshift>
 800950c:	f10a 0301 	add.w	r3, sl, #1
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	eb0a 030b 	add.w	r3, sl, fp
 8009516:	9308      	str	r3, [sp, #32]
 8009518:	9b04      	ldr	r3, [sp, #16]
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	462f      	mov	r7, r5
 8009520:	9306      	str	r3, [sp, #24]
 8009522:	4605      	mov	r5, r0
 8009524:	9b00      	ldr	r3, [sp, #0]
 8009526:	9802      	ldr	r0, [sp, #8]
 8009528:	4621      	mov	r1, r4
 800952a:	f103 3bff 	add.w	fp, r3, #4294967295
 800952e:	f7ff fa8a 	bl	8008a46 <quorem>
 8009532:	4603      	mov	r3, r0
 8009534:	3330      	adds	r3, #48	@ 0x30
 8009536:	9003      	str	r0, [sp, #12]
 8009538:	4639      	mov	r1, r7
 800953a:	9802      	ldr	r0, [sp, #8]
 800953c:	9309      	str	r3, [sp, #36]	@ 0x24
 800953e:	f000 fc4d 	bl	8009ddc <__mcmp>
 8009542:	462a      	mov	r2, r5
 8009544:	9004      	str	r0, [sp, #16]
 8009546:	4621      	mov	r1, r4
 8009548:	4648      	mov	r0, r9
 800954a:	f000 fc63 	bl	8009e14 <__mdiff>
 800954e:	68c2      	ldr	r2, [r0, #12]
 8009550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009552:	4606      	mov	r6, r0
 8009554:	bb02      	cbnz	r2, 8009598 <_dtoa_r+0xa40>
 8009556:	4601      	mov	r1, r0
 8009558:	9802      	ldr	r0, [sp, #8]
 800955a:	f000 fc3f 	bl	8009ddc <__mcmp>
 800955e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009560:	4602      	mov	r2, r0
 8009562:	4631      	mov	r1, r6
 8009564:	4648      	mov	r0, r9
 8009566:	920c      	str	r2, [sp, #48]	@ 0x30
 8009568:	9309      	str	r3, [sp, #36]	@ 0x24
 800956a:	f000 fa05 	bl	8009978 <_Bfree>
 800956e:	9b07      	ldr	r3, [sp, #28]
 8009570:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009572:	9e00      	ldr	r6, [sp, #0]
 8009574:	ea42 0103 	orr.w	r1, r2, r3
 8009578:	9b06      	ldr	r3, [sp, #24]
 800957a:	4319      	orrs	r1, r3
 800957c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800957e:	d10d      	bne.n	800959c <_dtoa_r+0xa44>
 8009580:	2b39      	cmp	r3, #57	@ 0x39
 8009582:	d027      	beq.n	80095d4 <_dtoa_r+0xa7c>
 8009584:	9a04      	ldr	r2, [sp, #16]
 8009586:	2a00      	cmp	r2, #0
 8009588:	dd01      	ble.n	800958e <_dtoa_r+0xa36>
 800958a:	9b03      	ldr	r3, [sp, #12]
 800958c:	3331      	adds	r3, #49	@ 0x31
 800958e:	f88b 3000 	strb.w	r3, [fp]
 8009592:	e52e      	b.n	8008ff2 <_dtoa_r+0x49a>
 8009594:	4628      	mov	r0, r5
 8009596:	e7b9      	b.n	800950c <_dtoa_r+0x9b4>
 8009598:	2201      	movs	r2, #1
 800959a:	e7e2      	b.n	8009562 <_dtoa_r+0xa0a>
 800959c:	9904      	ldr	r1, [sp, #16]
 800959e:	2900      	cmp	r1, #0
 80095a0:	db04      	blt.n	80095ac <_dtoa_r+0xa54>
 80095a2:	9807      	ldr	r0, [sp, #28]
 80095a4:	4301      	orrs	r1, r0
 80095a6:	9806      	ldr	r0, [sp, #24]
 80095a8:	4301      	orrs	r1, r0
 80095aa:	d120      	bne.n	80095ee <_dtoa_r+0xa96>
 80095ac:	2a00      	cmp	r2, #0
 80095ae:	ddee      	ble.n	800958e <_dtoa_r+0xa36>
 80095b0:	9902      	ldr	r1, [sp, #8]
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	2201      	movs	r2, #1
 80095b6:	4648      	mov	r0, r9
 80095b8:	f000 fba4 	bl	8009d04 <__lshift>
 80095bc:	4621      	mov	r1, r4
 80095be:	9002      	str	r0, [sp, #8]
 80095c0:	f000 fc0c 	bl	8009ddc <__mcmp>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	9b00      	ldr	r3, [sp, #0]
 80095c8:	dc02      	bgt.n	80095d0 <_dtoa_r+0xa78>
 80095ca:	d1e0      	bne.n	800958e <_dtoa_r+0xa36>
 80095cc:	07da      	lsls	r2, r3, #31
 80095ce:	d5de      	bpl.n	800958e <_dtoa_r+0xa36>
 80095d0:	2b39      	cmp	r3, #57	@ 0x39
 80095d2:	d1da      	bne.n	800958a <_dtoa_r+0xa32>
 80095d4:	2339      	movs	r3, #57	@ 0x39
 80095d6:	f88b 3000 	strb.w	r3, [fp]
 80095da:	4633      	mov	r3, r6
 80095dc:	461e      	mov	r6, r3
 80095de:	3b01      	subs	r3, #1
 80095e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80095e4:	2a39      	cmp	r2, #57	@ 0x39
 80095e6:	d04e      	beq.n	8009686 <_dtoa_r+0xb2e>
 80095e8:	3201      	adds	r2, #1
 80095ea:	701a      	strb	r2, [r3, #0]
 80095ec:	e501      	b.n	8008ff2 <_dtoa_r+0x49a>
 80095ee:	2a00      	cmp	r2, #0
 80095f0:	dd03      	ble.n	80095fa <_dtoa_r+0xaa2>
 80095f2:	2b39      	cmp	r3, #57	@ 0x39
 80095f4:	d0ee      	beq.n	80095d4 <_dtoa_r+0xa7c>
 80095f6:	3301      	adds	r3, #1
 80095f8:	e7c9      	b.n	800958e <_dtoa_r+0xa36>
 80095fa:	9a00      	ldr	r2, [sp, #0]
 80095fc:	9908      	ldr	r1, [sp, #32]
 80095fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009602:	428a      	cmp	r2, r1
 8009604:	d028      	beq.n	8009658 <_dtoa_r+0xb00>
 8009606:	9902      	ldr	r1, [sp, #8]
 8009608:	2300      	movs	r3, #0
 800960a:	220a      	movs	r2, #10
 800960c:	4648      	mov	r0, r9
 800960e:	f000 f9d5 	bl	80099bc <__multadd>
 8009612:	42af      	cmp	r7, r5
 8009614:	9002      	str	r0, [sp, #8]
 8009616:	f04f 0300 	mov.w	r3, #0
 800961a:	f04f 020a 	mov.w	r2, #10
 800961e:	4639      	mov	r1, r7
 8009620:	4648      	mov	r0, r9
 8009622:	d107      	bne.n	8009634 <_dtoa_r+0xadc>
 8009624:	f000 f9ca 	bl	80099bc <__multadd>
 8009628:	4607      	mov	r7, r0
 800962a:	4605      	mov	r5, r0
 800962c:	9b00      	ldr	r3, [sp, #0]
 800962e:	3301      	adds	r3, #1
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	e777      	b.n	8009524 <_dtoa_r+0x9cc>
 8009634:	f000 f9c2 	bl	80099bc <__multadd>
 8009638:	4629      	mov	r1, r5
 800963a:	4607      	mov	r7, r0
 800963c:	2300      	movs	r3, #0
 800963e:	220a      	movs	r2, #10
 8009640:	4648      	mov	r0, r9
 8009642:	f000 f9bb 	bl	80099bc <__multadd>
 8009646:	4605      	mov	r5, r0
 8009648:	e7f0      	b.n	800962c <_dtoa_r+0xad4>
 800964a:	f1bb 0f00 	cmp.w	fp, #0
 800964e:	bfcc      	ite	gt
 8009650:	465e      	movgt	r6, fp
 8009652:	2601      	movle	r6, #1
 8009654:	4456      	add	r6, sl
 8009656:	2700      	movs	r7, #0
 8009658:	9902      	ldr	r1, [sp, #8]
 800965a:	9300      	str	r3, [sp, #0]
 800965c:	2201      	movs	r2, #1
 800965e:	4648      	mov	r0, r9
 8009660:	f000 fb50 	bl	8009d04 <__lshift>
 8009664:	4621      	mov	r1, r4
 8009666:	9002      	str	r0, [sp, #8]
 8009668:	f000 fbb8 	bl	8009ddc <__mcmp>
 800966c:	2800      	cmp	r0, #0
 800966e:	dcb4      	bgt.n	80095da <_dtoa_r+0xa82>
 8009670:	d102      	bne.n	8009678 <_dtoa_r+0xb20>
 8009672:	9b00      	ldr	r3, [sp, #0]
 8009674:	07db      	lsls	r3, r3, #31
 8009676:	d4b0      	bmi.n	80095da <_dtoa_r+0xa82>
 8009678:	4633      	mov	r3, r6
 800967a:	461e      	mov	r6, r3
 800967c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009680:	2a30      	cmp	r2, #48	@ 0x30
 8009682:	d0fa      	beq.n	800967a <_dtoa_r+0xb22>
 8009684:	e4b5      	b.n	8008ff2 <_dtoa_r+0x49a>
 8009686:	459a      	cmp	sl, r3
 8009688:	d1a8      	bne.n	80095dc <_dtoa_r+0xa84>
 800968a:	2331      	movs	r3, #49	@ 0x31
 800968c:	f108 0801 	add.w	r8, r8, #1
 8009690:	f88a 3000 	strb.w	r3, [sl]
 8009694:	e4ad      	b.n	8008ff2 <_dtoa_r+0x49a>
 8009696:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009698:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80096f4 <_dtoa_r+0xb9c>
 800969c:	b11b      	cbz	r3, 80096a6 <_dtoa_r+0xb4e>
 800969e:	f10a 0308 	add.w	r3, sl, #8
 80096a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80096a4:	6013      	str	r3, [r2, #0]
 80096a6:	4650      	mov	r0, sl
 80096a8:	b017      	add	sp, #92	@ 0x5c
 80096aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ae:	9b07      	ldr	r3, [sp, #28]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	f77f ae2e 	ble.w	8009312 <_dtoa_r+0x7ba>
 80096b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096b8:	9308      	str	r3, [sp, #32]
 80096ba:	2001      	movs	r0, #1
 80096bc:	e64d      	b.n	800935a <_dtoa_r+0x802>
 80096be:	f1bb 0f00 	cmp.w	fp, #0
 80096c2:	f77f aed9 	ble.w	8009478 <_dtoa_r+0x920>
 80096c6:	4656      	mov	r6, sl
 80096c8:	9802      	ldr	r0, [sp, #8]
 80096ca:	4621      	mov	r1, r4
 80096cc:	f7ff f9bb 	bl	8008a46 <quorem>
 80096d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80096d4:	f806 3b01 	strb.w	r3, [r6], #1
 80096d8:	eba6 020a 	sub.w	r2, r6, sl
 80096dc:	4593      	cmp	fp, r2
 80096de:	ddb4      	ble.n	800964a <_dtoa_r+0xaf2>
 80096e0:	9902      	ldr	r1, [sp, #8]
 80096e2:	2300      	movs	r3, #0
 80096e4:	220a      	movs	r2, #10
 80096e6:	4648      	mov	r0, r9
 80096e8:	f000 f968 	bl	80099bc <__multadd>
 80096ec:	9002      	str	r0, [sp, #8]
 80096ee:	e7eb      	b.n	80096c8 <_dtoa_r+0xb70>
 80096f0:	0800afd0 	.word	0x0800afd0
 80096f4:	0800af54 	.word	0x0800af54

080096f8 <_free_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4605      	mov	r5, r0
 80096fc:	2900      	cmp	r1, #0
 80096fe:	d041      	beq.n	8009784 <_free_r+0x8c>
 8009700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009704:	1f0c      	subs	r4, r1, #4
 8009706:	2b00      	cmp	r3, #0
 8009708:	bfb8      	it	lt
 800970a:	18e4      	addlt	r4, r4, r3
 800970c:	f000 f8e8 	bl	80098e0 <__malloc_lock>
 8009710:	4a1d      	ldr	r2, [pc, #116]	@ (8009788 <_free_r+0x90>)
 8009712:	6813      	ldr	r3, [r2, #0]
 8009714:	b933      	cbnz	r3, 8009724 <_free_r+0x2c>
 8009716:	6063      	str	r3, [r4, #4]
 8009718:	6014      	str	r4, [r2, #0]
 800971a:	4628      	mov	r0, r5
 800971c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009720:	f000 b8e4 	b.w	80098ec <__malloc_unlock>
 8009724:	42a3      	cmp	r3, r4
 8009726:	d908      	bls.n	800973a <_free_r+0x42>
 8009728:	6820      	ldr	r0, [r4, #0]
 800972a:	1821      	adds	r1, r4, r0
 800972c:	428b      	cmp	r3, r1
 800972e:	bf01      	itttt	eq
 8009730:	6819      	ldreq	r1, [r3, #0]
 8009732:	685b      	ldreq	r3, [r3, #4]
 8009734:	1809      	addeq	r1, r1, r0
 8009736:	6021      	streq	r1, [r4, #0]
 8009738:	e7ed      	b.n	8009716 <_free_r+0x1e>
 800973a:	461a      	mov	r2, r3
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	b10b      	cbz	r3, 8009744 <_free_r+0x4c>
 8009740:	42a3      	cmp	r3, r4
 8009742:	d9fa      	bls.n	800973a <_free_r+0x42>
 8009744:	6811      	ldr	r1, [r2, #0]
 8009746:	1850      	adds	r0, r2, r1
 8009748:	42a0      	cmp	r0, r4
 800974a:	d10b      	bne.n	8009764 <_free_r+0x6c>
 800974c:	6820      	ldr	r0, [r4, #0]
 800974e:	4401      	add	r1, r0
 8009750:	1850      	adds	r0, r2, r1
 8009752:	4283      	cmp	r3, r0
 8009754:	6011      	str	r1, [r2, #0]
 8009756:	d1e0      	bne.n	800971a <_free_r+0x22>
 8009758:	6818      	ldr	r0, [r3, #0]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	6053      	str	r3, [r2, #4]
 800975e:	4408      	add	r0, r1
 8009760:	6010      	str	r0, [r2, #0]
 8009762:	e7da      	b.n	800971a <_free_r+0x22>
 8009764:	d902      	bls.n	800976c <_free_r+0x74>
 8009766:	230c      	movs	r3, #12
 8009768:	602b      	str	r3, [r5, #0]
 800976a:	e7d6      	b.n	800971a <_free_r+0x22>
 800976c:	6820      	ldr	r0, [r4, #0]
 800976e:	1821      	adds	r1, r4, r0
 8009770:	428b      	cmp	r3, r1
 8009772:	bf04      	itt	eq
 8009774:	6819      	ldreq	r1, [r3, #0]
 8009776:	685b      	ldreq	r3, [r3, #4]
 8009778:	6063      	str	r3, [r4, #4]
 800977a:	bf04      	itt	eq
 800977c:	1809      	addeq	r1, r1, r0
 800977e:	6021      	streq	r1, [r4, #0]
 8009780:	6054      	str	r4, [r2, #4]
 8009782:	e7ca      	b.n	800971a <_free_r+0x22>
 8009784:	bd38      	pop	{r3, r4, r5, pc}
 8009786:	bf00      	nop
 8009788:	20000ca8 	.word	0x20000ca8

0800978c <malloc>:
 800978c:	4b02      	ldr	r3, [pc, #8]	@ (8009798 <malloc+0xc>)
 800978e:	4601      	mov	r1, r0
 8009790:	6818      	ldr	r0, [r3, #0]
 8009792:	f000 b825 	b.w	80097e0 <_malloc_r>
 8009796:	bf00      	nop
 8009798:	20000018 	.word	0x20000018

0800979c <sbrk_aligned>:
 800979c:	b570      	push	{r4, r5, r6, lr}
 800979e:	4e0f      	ldr	r6, [pc, #60]	@ (80097dc <sbrk_aligned+0x40>)
 80097a0:	460c      	mov	r4, r1
 80097a2:	6831      	ldr	r1, [r6, #0]
 80097a4:	4605      	mov	r5, r0
 80097a6:	b911      	cbnz	r1, 80097ae <sbrk_aligned+0x12>
 80097a8:	f000 fe3e 	bl	800a428 <_sbrk_r>
 80097ac:	6030      	str	r0, [r6, #0]
 80097ae:	4621      	mov	r1, r4
 80097b0:	4628      	mov	r0, r5
 80097b2:	f000 fe39 	bl	800a428 <_sbrk_r>
 80097b6:	1c43      	adds	r3, r0, #1
 80097b8:	d103      	bne.n	80097c2 <sbrk_aligned+0x26>
 80097ba:	f04f 34ff 	mov.w	r4, #4294967295
 80097be:	4620      	mov	r0, r4
 80097c0:	bd70      	pop	{r4, r5, r6, pc}
 80097c2:	1cc4      	adds	r4, r0, #3
 80097c4:	f024 0403 	bic.w	r4, r4, #3
 80097c8:	42a0      	cmp	r0, r4
 80097ca:	d0f8      	beq.n	80097be <sbrk_aligned+0x22>
 80097cc:	1a21      	subs	r1, r4, r0
 80097ce:	4628      	mov	r0, r5
 80097d0:	f000 fe2a 	bl	800a428 <_sbrk_r>
 80097d4:	3001      	adds	r0, #1
 80097d6:	d1f2      	bne.n	80097be <sbrk_aligned+0x22>
 80097d8:	e7ef      	b.n	80097ba <sbrk_aligned+0x1e>
 80097da:	bf00      	nop
 80097dc:	20000ca4 	.word	0x20000ca4

080097e0 <_malloc_r>:
 80097e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097e4:	1ccd      	adds	r5, r1, #3
 80097e6:	f025 0503 	bic.w	r5, r5, #3
 80097ea:	3508      	adds	r5, #8
 80097ec:	2d0c      	cmp	r5, #12
 80097ee:	bf38      	it	cc
 80097f0:	250c      	movcc	r5, #12
 80097f2:	2d00      	cmp	r5, #0
 80097f4:	4606      	mov	r6, r0
 80097f6:	db01      	blt.n	80097fc <_malloc_r+0x1c>
 80097f8:	42a9      	cmp	r1, r5
 80097fa:	d904      	bls.n	8009806 <_malloc_r+0x26>
 80097fc:	230c      	movs	r3, #12
 80097fe:	6033      	str	r3, [r6, #0]
 8009800:	2000      	movs	r0, #0
 8009802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009806:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80098dc <_malloc_r+0xfc>
 800980a:	f000 f869 	bl	80098e0 <__malloc_lock>
 800980e:	f8d8 3000 	ldr.w	r3, [r8]
 8009812:	461c      	mov	r4, r3
 8009814:	bb44      	cbnz	r4, 8009868 <_malloc_r+0x88>
 8009816:	4629      	mov	r1, r5
 8009818:	4630      	mov	r0, r6
 800981a:	f7ff ffbf 	bl	800979c <sbrk_aligned>
 800981e:	1c43      	adds	r3, r0, #1
 8009820:	4604      	mov	r4, r0
 8009822:	d158      	bne.n	80098d6 <_malloc_r+0xf6>
 8009824:	f8d8 4000 	ldr.w	r4, [r8]
 8009828:	4627      	mov	r7, r4
 800982a:	2f00      	cmp	r7, #0
 800982c:	d143      	bne.n	80098b6 <_malloc_r+0xd6>
 800982e:	2c00      	cmp	r4, #0
 8009830:	d04b      	beq.n	80098ca <_malloc_r+0xea>
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	4639      	mov	r1, r7
 8009836:	4630      	mov	r0, r6
 8009838:	eb04 0903 	add.w	r9, r4, r3
 800983c:	f000 fdf4 	bl	800a428 <_sbrk_r>
 8009840:	4581      	cmp	r9, r0
 8009842:	d142      	bne.n	80098ca <_malloc_r+0xea>
 8009844:	6821      	ldr	r1, [r4, #0]
 8009846:	1a6d      	subs	r5, r5, r1
 8009848:	4629      	mov	r1, r5
 800984a:	4630      	mov	r0, r6
 800984c:	f7ff ffa6 	bl	800979c <sbrk_aligned>
 8009850:	3001      	adds	r0, #1
 8009852:	d03a      	beq.n	80098ca <_malloc_r+0xea>
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	442b      	add	r3, r5
 8009858:	6023      	str	r3, [r4, #0]
 800985a:	f8d8 3000 	ldr.w	r3, [r8]
 800985e:	685a      	ldr	r2, [r3, #4]
 8009860:	bb62      	cbnz	r2, 80098bc <_malloc_r+0xdc>
 8009862:	f8c8 7000 	str.w	r7, [r8]
 8009866:	e00f      	b.n	8009888 <_malloc_r+0xa8>
 8009868:	6822      	ldr	r2, [r4, #0]
 800986a:	1b52      	subs	r2, r2, r5
 800986c:	d420      	bmi.n	80098b0 <_malloc_r+0xd0>
 800986e:	2a0b      	cmp	r2, #11
 8009870:	d917      	bls.n	80098a2 <_malloc_r+0xc2>
 8009872:	1961      	adds	r1, r4, r5
 8009874:	42a3      	cmp	r3, r4
 8009876:	6025      	str	r5, [r4, #0]
 8009878:	bf18      	it	ne
 800987a:	6059      	strne	r1, [r3, #4]
 800987c:	6863      	ldr	r3, [r4, #4]
 800987e:	bf08      	it	eq
 8009880:	f8c8 1000 	streq.w	r1, [r8]
 8009884:	5162      	str	r2, [r4, r5]
 8009886:	604b      	str	r3, [r1, #4]
 8009888:	4630      	mov	r0, r6
 800988a:	f000 f82f 	bl	80098ec <__malloc_unlock>
 800988e:	f104 000b 	add.w	r0, r4, #11
 8009892:	1d23      	adds	r3, r4, #4
 8009894:	f020 0007 	bic.w	r0, r0, #7
 8009898:	1ac2      	subs	r2, r0, r3
 800989a:	bf1c      	itt	ne
 800989c:	1a1b      	subne	r3, r3, r0
 800989e:	50a3      	strne	r3, [r4, r2]
 80098a0:	e7af      	b.n	8009802 <_malloc_r+0x22>
 80098a2:	6862      	ldr	r2, [r4, #4]
 80098a4:	42a3      	cmp	r3, r4
 80098a6:	bf0c      	ite	eq
 80098a8:	f8c8 2000 	streq.w	r2, [r8]
 80098ac:	605a      	strne	r2, [r3, #4]
 80098ae:	e7eb      	b.n	8009888 <_malloc_r+0xa8>
 80098b0:	4623      	mov	r3, r4
 80098b2:	6864      	ldr	r4, [r4, #4]
 80098b4:	e7ae      	b.n	8009814 <_malloc_r+0x34>
 80098b6:	463c      	mov	r4, r7
 80098b8:	687f      	ldr	r7, [r7, #4]
 80098ba:	e7b6      	b.n	800982a <_malloc_r+0x4a>
 80098bc:	461a      	mov	r2, r3
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	42a3      	cmp	r3, r4
 80098c2:	d1fb      	bne.n	80098bc <_malloc_r+0xdc>
 80098c4:	2300      	movs	r3, #0
 80098c6:	6053      	str	r3, [r2, #4]
 80098c8:	e7de      	b.n	8009888 <_malloc_r+0xa8>
 80098ca:	230c      	movs	r3, #12
 80098cc:	6033      	str	r3, [r6, #0]
 80098ce:	4630      	mov	r0, r6
 80098d0:	f000 f80c 	bl	80098ec <__malloc_unlock>
 80098d4:	e794      	b.n	8009800 <_malloc_r+0x20>
 80098d6:	6005      	str	r5, [r0, #0]
 80098d8:	e7d6      	b.n	8009888 <_malloc_r+0xa8>
 80098da:	bf00      	nop
 80098dc:	20000ca8 	.word	0x20000ca8

080098e0 <__malloc_lock>:
 80098e0:	4801      	ldr	r0, [pc, #4]	@ (80098e8 <__malloc_lock+0x8>)
 80098e2:	f7ff b8a0 	b.w	8008a26 <__retarget_lock_acquire_recursive>
 80098e6:	bf00      	nop
 80098e8:	20000ca0 	.word	0x20000ca0

080098ec <__malloc_unlock>:
 80098ec:	4801      	ldr	r0, [pc, #4]	@ (80098f4 <__malloc_unlock+0x8>)
 80098ee:	f7ff b89b 	b.w	8008a28 <__retarget_lock_release_recursive>
 80098f2:	bf00      	nop
 80098f4:	20000ca0 	.word	0x20000ca0

080098f8 <_Balloc>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	69c6      	ldr	r6, [r0, #28]
 80098fc:	4604      	mov	r4, r0
 80098fe:	460d      	mov	r5, r1
 8009900:	b976      	cbnz	r6, 8009920 <_Balloc+0x28>
 8009902:	2010      	movs	r0, #16
 8009904:	f7ff ff42 	bl	800978c <malloc>
 8009908:	4602      	mov	r2, r0
 800990a:	61e0      	str	r0, [r4, #28]
 800990c:	b920      	cbnz	r0, 8009918 <_Balloc+0x20>
 800990e:	4b18      	ldr	r3, [pc, #96]	@ (8009970 <_Balloc+0x78>)
 8009910:	4818      	ldr	r0, [pc, #96]	@ (8009974 <_Balloc+0x7c>)
 8009912:	216b      	movs	r1, #107	@ 0x6b
 8009914:	f000 fd98 	bl	800a448 <__assert_func>
 8009918:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800991c:	6006      	str	r6, [r0, #0]
 800991e:	60c6      	str	r6, [r0, #12]
 8009920:	69e6      	ldr	r6, [r4, #28]
 8009922:	68f3      	ldr	r3, [r6, #12]
 8009924:	b183      	cbz	r3, 8009948 <_Balloc+0x50>
 8009926:	69e3      	ldr	r3, [r4, #28]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800992e:	b9b8      	cbnz	r0, 8009960 <_Balloc+0x68>
 8009930:	2101      	movs	r1, #1
 8009932:	fa01 f605 	lsl.w	r6, r1, r5
 8009936:	1d72      	adds	r2, r6, #5
 8009938:	0092      	lsls	r2, r2, #2
 800993a:	4620      	mov	r0, r4
 800993c:	f000 fda2 	bl	800a484 <_calloc_r>
 8009940:	b160      	cbz	r0, 800995c <_Balloc+0x64>
 8009942:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009946:	e00e      	b.n	8009966 <_Balloc+0x6e>
 8009948:	2221      	movs	r2, #33	@ 0x21
 800994a:	2104      	movs	r1, #4
 800994c:	4620      	mov	r0, r4
 800994e:	f000 fd99 	bl	800a484 <_calloc_r>
 8009952:	69e3      	ldr	r3, [r4, #28]
 8009954:	60f0      	str	r0, [r6, #12]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1e4      	bne.n	8009926 <_Balloc+0x2e>
 800995c:	2000      	movs	r0, #0
 800995e:	bd70      	pop	{r4, r5, r6, pc}
 8009960:	6802      	ldr	r2, [r0, #0]
 8009962:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009966:	2300      	movs	r3, #0
 8009968:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800996c:	e7f7      	b.n	800995e <_Balloc+0x66>
 800996e:	bf00      	nop
 8009970:	0800af61 	.word	0x0800af61
 8009974:	0800afe1 	.word	0x0800afe1

08009978 <_Bfree>:
 8009978:	b570      	push	{r4, r5, r6, lr}
 800997a:	69c6      	ldr	r6, [r0, #28]
 800997c:	4605      	mov	r5, r0
 800997e:	460c      	mov	r4, r1
 8009980:	b976      	cbnz	r6, 80099a0 <_Bfree+0x28>
 8009982:	2010      	movs	r0, #16
 8009984:	f7ff ff02 	bl	800978c <malloc>
 8009988:	4602      	mov	r2, r0
 800998a:	61e8      	str	r0, [r5, #28]
 800998c:	b920      	cbnz	r0, 8009998 <_Bfree+0x20>
 800998e:	4b09      	ldr	r3, [pc, #36]	@ (80099b4 <_Bfree+0x3c>)
 8009990:	4809      	ldr	r0, [pc, #36]	@ (80099b8 <_Bfree+0x40>)
 8009992:	218f      	movs	r1, #143	@ 0x8f
 8009994:	f000 fd58 	bl	800a448 <__assert_func>
 8009998:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800999c:	6006      	str	r6, [r0, #0]
 800999e:	60c6      	str	r6, [r0, #12]
 80099a0:	b13c      	cbz	r4, 80099b2 <_Bfree+0x3a>
 80099a2:	69eb      	ldr	r3, [r5, #28]
 80099a4:	6862      	ldr	r2, [r4, #4]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099ac:	6021      	str	r1, [r4, #0]
 80099ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099b2:	bd70      	pop	{r4, r5, r6, pc}
 80099b4:	0800af61 	.word	0x0800af61
 80099b8:	0800afe1 	.word	0x0800afe1

080099bc <__multadd>:
 80099bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c0:	690d      	ldr	r5, [r1, #16]
 80099c2:	4607      	mov	r7, r0
 80099c4:	460c      	mov	r4, r1
 80099c6:	461e      	mov	r6, r3
 80099c8:	f101 0c14 	add.w	ip, r1, #20
 80099cc:	2000      	movs	r0, #0
 80099ce:	f8dc 3000 	ldr.w	r3, [ip]
 80099d2:	b299      	uxth	r1, r3
 80099d4:	fb02 6101 	mla	r1, r2, r1, r6
 80099d8:	0c1e      	lsrs	r6, r3, #16
 80099da:	0c0b      	lsrs	r3, r1, #16
 80099dc:	fb02 3306 	mla	r3, r2, r6, r3
 80099e0:	b289      	uxth	r1, r1
 80099e2:	3001      	adds	r0, #1
 80099e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099e8:	4285      	cmp	r5, r0
 80099ea:	f84c 1b04 	str.w	r1, [ip], #4
 80099ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099f2:	dcec      	bgt.n	80099ce <__multadd+0x12>
 80099f4:	b30e      	cbz	r6, 8009a3a <__multadd+0x7e>
 80099f6:	68a3      	ldr	r3, [r4, #8]
 80099f8:	42ab      	cmp	r3, r5
 80099fa:	dc19      	bgt.n	8009a30 <__multadd+0x74>
 80099fc:	6861      	ldr	r1, [r4, #4]
 80099fe:	4638      	mov	r0, r7
 8009a00:	3101      	adds	r1, #1
 8009a02:	f7ff ff79 	bl	80098f8 <_Balloc>
 8009a06:	4680      	mov	r8, r0
 8009a08:	b928      	cbnz	r0, 8009a16 <__multadd+0x5a>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8009a40 <__multadd+0x84>)
 8009a0e:	480d      	ldr	r0, [pc, #52]	@ (8009a44 <__multadd+0x88>)
 8009a10:	21ba      	movs	r1, #186	@ 0xba
 8009a12:	f000 fd19 	bl	800a448 <__assert_func>
 8009a16:	6922      	ldr	r2, [r4, #16]
 8009a18:	3202      	adds	r2, #2
 8009a1a:	f104 010c 	add.w	r1, r4, #12
 8009a1e:	0092      	lsls	r2, r2, #2
 8009a20:	300c      	adds	r0, #12
 8009a22:	f7ff f802 	bl	8008a2a <memcpy>
 8009a26:	4621      	mov	r1, r4
 8009a28:	4638      	mov	r0, r7
 8009a2a:	f7ff ffa5 	bl	8009978 <_Bfree>
 8009a2e:	4644      	mov	r4, r8
 8009a30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a34:	3501      	adds	r5, #1
 8009a36:	615e      	str	r6, [r3, #20]
 8009a38:	6125      	str	r5, [r4, #16]
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a40:	0800afd0 	.word	0x0800afd0
 8009a44:	0800afe1 	.word	0x0800afe1

08009a48 <__hi0bits>:
 8009a48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	bf36      	itet	cc
 8009a50:	0403      	lslcc	r3, r0, #16
 8009a52:	2000      	movcs	r0, #0
 8009a54:	2010      	movcc	r0, #16
 8009a56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a5a:	bf3c      	itt	cc
 8009a5c:	021b      	lslcc	r3, r3, #8
 8009a5e:	3008      	addcc	r0, #8
 8009a60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a64:	bf3c      	itt	cc
 8009a66:	011b      	lslcc	r3, r3, #4
 8009a68:	3004      	addcc	r0, #4
 8009a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a6e:	bf3c      	itt	cc
 8009a70:	009b      	lslcc	r3, r3, #2
 8009a72:	3002      	addcc	r0, #2
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	db05      	blt.n	8009a84 <__hi0bits+0x3c>
 8009a78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009a7c:	f100 0001 	add.w	r0, r0, #1
 8009a80:	bf08      	it	eq
 8009a82:	2020      	moveq	r0, #32
 8009a84:	4770      	bx	lr

08009a86 <__lo0bits>:
 8009a86:	6803      	ldr	r3, [r0, #0]
 8009a88:	4602      	mov	r2, r0
 8009a8a:	f013 0007 	ands.w	r0, r3, #7
 8009a8e:	d00b      	beq.n	8009aa8 <__lo0bits+0x22>
 8009a90:	07d9      	lsls	r1, r3, #31
 8009a92:	d421      	bmi.n	8009ad8 <__lo0bits+0x52>
 8009a94:	0798      	lsls	r0, r3, #30
 8009a96:	bf49      	itett	mi
 8009a98:	085b      	lsrmi	r3, r3, #1
 8009a9a:	089b      	lsrpl	r3, r3, #2
 8009a9c:	2001      	movmi	r0, #1
 8009a9e:	6013      	strmi	r3, [r2, #0]
 8009aa0:	bf5c      	itt	pl
 8009aa2:	6013      	strpl	r3, [r2, #0]
 8009aa4:	2002      	movpl	r0, #2
 8009aa6:	4770      	bx	lr
 8009aa8:	b299      	uxth	r1, r3
 8009aaa:	b909      	cbnz	r1, 8009ab0 <__lo0bits+0x2a>
 8009aac:	0c1b      	lsrs	r3, r3, #16
 8009aae:	2010      	movs	r0, #16
 8009ab0:	b2d9      	uxtb	r1, r3
 8009ab2:	b909      	cbnz	r1, 8009ab8 <__lo0bits+0x32>
 8009ab4:	3008      	adds	r0, #8
 8009ab6:	0a1b      	lsrs	r3, r3, #8
 8009ab8:	0719      	lsls	r1, r3, #28
 8009aba:	bf04      	itt	eq
 8009abc:	091b      	lsreq	r3, r3, #4
 8009abe:	3004      	addeq	r0, #4
 8009ac0:	0799      	lsls	r1, r3, #30
 8009ac2:	bf04      	itt	eq
 8009ac4:	089b      	lsreq	r3, r3, #2
 8009ac6:	3002      	addeq	r0, #2
 8009ac8:	07d9      	lsls	r1, r3, #31
 8009aca:	d403      	bmi.n	8009ad4 <__lo0bits+0x4e>
 8009acc:	085b      	lsrs	r3, r3, #1
 8009ace:	f100 0001 	add.w	r0, r0, #1
 8009ad2:	d003      	beq.n	8009adc <__lo0bits+0x56>
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	4770      	bx	lr
 8009ad8:	2000      	movs	r0, #0
 8009ada:	4770      	bx	lr
 8009adc:	2020      	movs	r0, #32
 8009ade:	4770      	bx	lr

08009ae0 <__i2b>:
 8009ae0:	b510      	push	{r4, lr}
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	f7ff ff07 	bl	80098f8 <_Balloc>
 8009aea:	4602      	mov	r2, r0
 8009aec:	b928      	cbnz	r0, 8009afa <__i2b+0x1a>
 8009aee:	4b05      	ldr	r3, [pc, #20]	@ (8009b04 <__i2b+0x24>)
 8009af0:	4805      	ldr	r0, [pc, #20]	@ (8009b08 <__i2b+0x28>)
 8009af2:	f240 1145 	movw	r1, #325	@ 0x145
 8009af6:	f000 fca7 	bl	800a448 <__assert_func>
 8009afa:	2301      	movs	r3, #1
 8009afc:	6144      	str	r4, [r0, #20]
 8009afe:	6103      	str	r3, [r0, #16]
 8009b00:	bd10      	pop	{r4, pc}
 8009b02:	bf00      	nop
 8009b04:	0800afd0 	.word	0x0800afd0
 8009b08:	0800afe1 	.word	0x0800afe1

08009b0c <__multiply>:
 8009b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b10:	4617      	mov	r7, r2
 8009b12:	690a      	ldr	r2, [r1, #16]
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	bfa8      	it	ge
 8009b1a:	463b      	movge	r3, r7
 8009b1c:	4689      	mov	r9, r1
 8009b1e:	bfa4      	itt	ge
 8009b20:	460f      	movge	r7, r1
 8009b22:	4699      	movge	r9, r3
 8009b24:	693d      	ldr	r5, [r7, #16]
 8009b26:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	6879      	ldr	r1, [r7, #4]
 8009b2e:	eb05 060a 	add.w	r6, r5, sl
 8009b32:	42b3      	cmp	r3, r6
 8009b34:	b085      	sub	sp, #20
 8009b36:	bfb8      	it	lt
 8009b38:	3101      	addlt	r1, #1
 8009b3a:	f7ff fedd 	bl	80098f8 <_Balloc>
 8009b3e:	b930      	cbnz	r0, 8009b4e <__multiply+0x42>
 8009b40:	4602      	mov	r2, r0
 8009b42:	4b41      	ldr	r3, [pc, #260]	@ (8009c48 <__multiply+0x13c>)
 8009b44:	4841      	ldr	r0, [pc, #260]	@ (8009c4c <__multiply+0x140>)
 8009b46:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009b4a:	f000 fc7d 	bl	800a448 <__assert_func>
 8009b4e:	f100 0414 	add.w	r4, r0, #20
 8009b52:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009b56:	4623      	mov	r3, r4
 8009b58:	2200      	movs	r2, #0
 8009b5a:	4573      	cmp	r3, lr
 8009b5c:	d320      	bcc.n	8009ba0 <__multiply+0x94>
 8009b5e:	f107 0814 	add.w	r8, r7, #20
 8009b62:	f109 0114 	add.w	r1, r9, #20
 8009b66:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009b6a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009b6e:	9302      	str	r3, [sp, #8]
 8009b70:	1beb      	subs	r3, r5, r7
 8009b72:	3b15      	subs	r3, #21
 8009b74:	f023 0303 	bic.w	r3, r3, #3
 8009b78:	3304      	adds	r3, #4
 8009b7a:	3715      	adds	r7, #21
 8009b7c:	42bd      	cmp	r5, r7
 8009b7e:	bf38      	it	cc
 8009b80:	2304      	movcc	r3, #4
 8009b82:	9301      	str	r3, [sp, #4]
 8009b84:	9b02      	ldr	r3, [sp, #8]
 8009b86:	9103      	str	r1, [sp, #12]
 8009b88:	428b      	cmp	r3, r1
 8009b8a:	d80c      	bhi.n	8009ba6 <__multiply+0x9a>
 8009b8c:	2e00      	cmp	r6, #0
 8009b8e:	dd03      	ble.n	8009b98 <__multiply+0x8c>
 8009b90:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d055      	beq.n	8009c44 <__multiply+0x138>
 8009b98:	6106      	str	r6, [r0, #16]
 8009b9a:	b005      	add	sp, #20
 8009b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba0:	f843 2b04 	str.w	r2, [r3], #4
 8009ba4:	e7d9      	b.n	8009b5a <__multiply+0x4e>
 8009ba6:	f8b1 a000 	ldrh.w	sl, [r1]
 8009baa:	f1ba 0f00 	cmp.w	sl, #0
 8009bae:	d01f      	beq.n	8009bf0 <__multiply+0xe4>
 8009bb0:	46c4      	mov	ip, r8
 8009bb2:	46a1      	mov	r9, r4
 8009bb4:	2700      	movs	r7, #0
 8009bb6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009bba:	f8d9 3000 	ldr.w	r3, [r9]
 8009bbe:	fa1f fb82 	uxth.w	fp, r2
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	fb0a 330b 	mla	r3, sl, fp, r3
 8009bc8:	443b      	add	r3, r7
 8009bca:	f8d9 7000 	ldr.w	r7, [r9]
 8009bce:	0c12      	lsrs	r2, r2, #16
 8009bd0:	0c3f      	lsrs	r7, r7, #16
 8009bd2:	fb0a 7202 	mla	r2, sl, r2, r7
 8009bd6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009be0:	4565      	cmp	r5, ip
 8009be2:	f849 3b04 	str.w	r3, [r9], #4
 8009be6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009bea:	d8e4      	bhi.n	8009bb6 <__multiply+0xaa>
 8009bec:	9b01      	ldr	r3, [sp, #4]
 8009bee:	50e7      	str	r7, [r4, r3]
 8009bf0:	9b03      	ldr	r3, [sp, #12]
 8009bf2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009bf6:	3104      	adds	r1, #4
 8009bf8:	f1b9 0f00 	cmp.w	r9, #0
 8009bfc:	d020      	beq.n	8009c40 <__multiply+0x134>
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	4647      	mov	r7, r8
 8009c02:	46a4      	mov	ip, r4
 8009c04:	f04f 0a00 	mov.w	sl, #0
 8009c08:	f8b7 b000 	ldrh.w	fp, [r7]
 8009c0c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009c10:	fb09 220b 	mla	r2, r9, fp, r2
 8009c14:	4452      	add	r2, sl
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c1c:	f84c 3b04 	str.w	r3, [ip], #4
 8009c20:	f857 3b04 	ldr.w	r3, [r7], #4
 8009c24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c28:	f8bc 3000 	ldrh.w	r3, [ip]
 8009c2c:	fb09 330a 	mla	r3, r9, sl, r3
 8009c30:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009c34:	42bd      	cmp	r5, r7
 8009c36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c3a:	d8e5      	bhi.n	8009c08 <__multiply+0xfc>
 8009c3c:	9a01      	ldr	r2, [sp, #4]
 8009c3e:	50a3      	str	r3, [r4, r2]
 8009c40:	3404      	adds	r4, #4
 8009c42:	e79f      	b.n	8009b84 <__multiply+0x78>
 8009c44:	3e01      	subs	r6, #1
 8009c46:	e7a1      	b.n	8009b8c <__multiply+0x80>
 8009c48:	0800afd0 	.word	0x0800afd0
 8009c4c:	0800afe1 	.word	0x0800afe1

08009c50 <__pow5mult>:
 8009c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c54:	4615      	mov	r5, r2
 8009c56:	f012 0203 	ands.w	r2, r2, #3
 8009c5a:	4607      	mov	r7, r0
 8009c5c:	460e      	mov	r6, r1
 8009c5e:	d007      	beq.n	8009c70 <__pow5mult+0x20>
 8009c60:	4c25      	ldr	r4, [pc, #148]	@ (8009cf8 <__pow5mult+0xa8>)
 8009c62:	3a01      	subs	r2, #1
 8009c64:	2300      	movs	r3, #0
 8009c66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c6a:	f7ff fea7 	bl	80099bc <__multadd>
 8009c6e:	4606      	mov	r6, r0
 8009c70:	10ad      	asrs	r5, r5, #2
 8009c72:	d03d      	beq.n	8009cf0 <__pow5mult+0xa0>
 8009c74:	69fc      	ldr	r4, [r7, #28]
 8009c76:	b97c      	cbnz	r4, 8009c98 <__pow5mult+0x48>
 8009c78:	2010      	movs	r0, #16
 8009c7a:	f7ff fd87 	bl	800978c <malloc>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	61f8      	str	r0, [r7, #28]
 8009c82:	b928      	cbnz	r0, 8009c90 <__pow5mult+0x40>
 8009c84:	4b1d      	ldr	r3, [pc, #116]	@ (8009cfc <__pow5mult+0xac>)
 8009c86:	481e      	ldr	r0, [pc, #120]	@ (8009d00 <__pow5mult+0xb0>)
 8009c88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009c8c:	f000 fbdc 	bl	800a448 <__assert_func>
 8009c90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c94:	6004      	str	r4, [r0, #0]
 8009c96:	60c4      	str	r4, [r0, #12]
 8009c98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009c9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ca0:	b94c      	cbnz	r4, 8009cb6 <__pow5mult+0x66>
 8009ca2:	f240 2171 	movw	r1, #625	@ 0x271
 8009ca6:	4638      	mov	r0, r7
 8009ca8:	f7ff ff1a 	bl	8009ae0 <__i2b>
 8009cac:	2300      	movs	r3, #0
 8009cae:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	6003      	str	r3, [r0, #0]
 8009cb6:	f04f 0900 	mov.w	r9, #0
 8009cba:	07eb      	lsls	r3, r5, #31
 8009cbc:	d50a      	bpl.n	8009cd4 <__pow5mult+0x84>
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	4622      	mov	r2, r4
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	f7ff ff22 	bl	8009b0c <__multiply>
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4680      	mov	r8, r0
 8009ccc:	4638      	mov	r0, r7
 8009cce:	f7ff fe53 	bl	8009978 <_Bfree>
 8009cd2:	4646      	mov	r6, r8
 8009cd4:	106d      	asrs	r5, r5, #1
 8009cd6:	d00b      	beq.n	8009cf0 <__pow5mult+0xa0>
 8009cd8:	6820      	ldr	r0, [r4, #0]
 8009cda:	b938      	cbnz	r0, 8009cec <__pow5mult+0x9c>
 8009cdc:	4622      	mov	r2, r4
 8009cde:	4621      	mov	r1, r4
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	f7ff ff13 	bl	8009b0c <__multiply>
 8009ce6:	6020      	str	r0, [r4, #0]
 8009ce8:	f8c0 9000 	str.w	r9, [r0]
 8009cec:	4604      	mov	r4, r0
 8009cee:	e7e4      	b.n	8009cba <__pow5mult+0x6a>
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cf6:	bf00      	nop
 8009cf8:	0800b094 	.word	0x0800b094
 8009cfc:	0800af61 	.word	0x0800af61
 8009d00:	0800afe1 	.word	0x0800afe1

08009d04 <__lshift>:
 8009d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d08:	460c      	mov	r4, r1
 8009d0a:	6849      	ldr	r1, [r1, #4]
 8009d0c:	6923      	ldr	r3, [r4, #16]
 8009d0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d12:	68a3      	ldr	r3, [r4, #8]
 8009d14:	4607      	mov	r7, r0
 8009d16:	4691      	mov	r9, r2
 8009d18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d1c:	f108 0601 	add.w	r6, r8, #1
 8009d20:	42b3      	cmp	r3, r6
 8009d22:	db0b      	blt.n	8009d3c <__lshift+0x38>
 8009d24:	4638      	mov	r0, r7
 8009d26:	f7ff fde7 	bl	80098f8 <_Balloc>
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	b948      	cbnz	r0, 8009d42 <__lshift+0x3e>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	4b28      	ldr	r3, [pc, #160]	@ (8009dd4 <__lshift+0xd0>)
 8009d32:	4829      	ldr	r0, [pc, #164]	@ (8009dd8 <__lshift+0xd4>)
 8009d34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009d38:	f000 fb86 	bl	800a448 <__assert_func>
 8009d3c:	3101      	adds	r1, #1
 8009d3e:	005b      	lsls	r3, r3, #1
 8009d40:	e7ee      	b.n	8009d20 <__lshift+0x1c>
 8009d42:	2300      	movs	r3, #0
 8009d44:	f100 0114 	add.w	r1, r0, #20
 8009d48:	f100 0210 	add.w	r2, r0, #16
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	4553      	cmp	r3, sl
 8009d50:	db33      	blt.n	8009dba <__lshift+0xb6>
 8009d52:	6920      	ldr	r0, [r4, #16]
 8009d54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d58:	f104 0314 	add.w	r3, r4, #20
 8009d5c:	f019 091f 	ands.w	r9, r9, #31
 8009d60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d68:	d02b      	beq.n	8009dc2 <__lshift+0xbe>
 8009d6a:	f1c9 0e20 	rsb	lr, r9, #32
 8009d6e:	468a      	mov	sl, r1
 8009d70:	2200      	movs	r2, #0
 8009d72:	6818      	ldr	r0, [r3, #0]
 8009d74:	fa00 f009 	lsl.w	r0, r0, r9
 8009d78:	4310      	orrs	r0, r2
 8009d7a:	f84a 0b04 	str.w	r0, [sl], #4
 8009d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d82:	459c      	cmp	ip, r3
 8009d84:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d88:	d8f3      	bhi.n	8009d72 <__lshift+0x6e>
 8009d8a:	ebac 0304 	sub.w	r3, ip, r4
 8009d8e:	3b15      	subs	r3, #21
 8009d90:	f023 0303 	bic.w	r3, r3, #3
 8009d94:	3304      	adds	r3, #4
 8009d96:	f104 0015 	add.w	r0, r4, #21
 8009d9a:	4560      	cmp	r0, ip
 8009d9c:	bf88      	it	hi
 8009d9e:	2304      	movhi	r3, #4
 8009da0:	50ca      	str	r2, [r1, r3]
 8009da2:	b10a      	cbz	r2, 8009da8 <__lshift+0xa4>
 8009da4:	f108 0602 	add.w	r6, r8, #2
 8009da8:	3e01      	subs	r6, #1
 8009daa:	4638      	mov	r0, r7
 8009dac:	612e      	str	r6, [r5, #16]
 8009dae:	4621      	mov	r1, r4
 8009db0:	f7ff fde2 	bl	8009978 <_Bfree>
 8009db4:	4628      	mov	r0, r5
 8009db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dba:	f842 0f04 	str.w	r0, [r2, #4]!
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	e7c5      	b.n	8009d4e <__lshift+0x4a>
 8009dc2:	3904      	subs	r1, #4
 8009dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009dcc:	459c      	cmp	ip, r3
 8009dce:	d8f9      	bhi.n	8009dc4 <__lshift+0xc0>
 8009dd0:	e7ea      	b.n	8009da8 <__lshift+0xa4>
 8009dd2:	bf00      	nop
 8009dd4:	0800afd0 	.word	0x0800afd0
 8009dd8:	0800afe1 	.word	0x0800afe1

08009ddc <__mcmp>:
 8009ddc:	690a      	ldr	r2, [r1, #16]
 8009dde:	4603      	mov	r3, r0
 8009de0:	6900      	ldr	r0, [r0, #16]
 8009de2:	1a80      	subs	r0, r0, r2
 8009de4:	b530      	push	{r4, r5, lr}
 8009de6:	d10e      	bne.n	8009e06 <__mcmp+0x2a>
 8009de8:	3314      	adds	r3, #20
 8009dea:	3114      	adds	r1, #20
 8009dec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009df0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009df4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009df8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009dfc:	4295      	cmp	r5, r2
 8009dfe:	d003      	beq.n	8009e08 <__mcmp+0x2c>
 8009e00:	d205      	bcs.n	8009e0e <__mcmp+0x32>
 8009e02:	f04f 30ff 	mov.w	r0, #4294967295
 8009e06:	bd30      	pop	{r4, r5, pc}
 8009e08:	42a3      	cmp	r3, r4
 8009e0a:	d3f3      	bcc.n	8009df4 <__mcmp+0x18>
 8009e0c:	e7fb      	b.n	8009e06 <__mcmp+0x2a>
 8009e0e:	2001      	movs	r0, #1
 8009e10:	e7f9      	b.n	8009e06 <__mcmp+0x2a>
	...

08009e14 <__mdiff>:
 8009e14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e18:	4689      	mov	r9, r1
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	4648      	mov	r0, r9
 8009e20:	4614      	mov	r4, r2
 8009e22:	f7ff ffdb 	bl	8009ddc <__mcmp>
 8009e26:	1e05      	subs	r5, r0, #0
 8009e28:	d112      	bne.n	8009e50 <__mdiff+0x3c>
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	f7ff fd63 	bl	80098f8 <_Balloc>
 8009e32:	4602      	mov	r2, r0
 8009e34:	b928      	cbnz	r0, 8009e42 <__mdiff+0x2e>
 8009e36:	4b3f      	ldr	r3, [pc, #252]	@ (8009f34 <__mdiff+0x120>)
 8009e38:	f240 2137 	movw	r1, #567	@ 0x237
 8009e3c:	483e      	ldr	r0, [pc, #248]	@ (8009f38 <__mdiff+0x124>)
 8009e3e:	f000 fb03 	bl	800a448 <__assert_func>
 8009e42:	2301      	movs	r3, #1
 8009e44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e48:	4610      	mov	r0, r2
 8009e4a:	b003      	add	sp, #12
 8009e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e50:	bfbc      	itt	lt
 8009e52:	464b      	movlt	r3, r9
 8009e54:	46a1      	movlt	r9, r4
 8009e56:	4630      	mov	r0, r6
 8009e58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e5c:	bfba      	itte	lt
 8009e5e:	461c      	movlt	r4, r3
 8009e60:	2501      	movlt	r5, #1
 8009e62:	2500      	movge	r5, #0
 8009e64:	f7ff fd48 	bl	80098f8 <_Balloc>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	b918      	cbnz	r0, 8009e74 <__mdiff+0x60>
 8009e6c:	4b31      	ldr	r3, [pc, #196]	@ (8009f34 <__mdiff+0x120>)
 8009e6e:	f240 2145 	movw	r1, #581	@ 0x245
 8009e72:	e7e3      	b.n	8009e3c <__mdiff+0x28>
 8009e74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009e78:	6926      	ldr	r6, [r4, #16]
 8009e7a:	60c5      	str	r5, [r0, #12]
 8009e7c:	f109 0310 	add.w	r3, r9, #16
 8009e80:	f109 0514 	add.w	r5, r9, #20
 8009e84:	f104 0e14 	add.w	lr, r4, #20
 8009e88:	f100 0b14 	add.w	fp, r0, #20
 8009e8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009e90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009e94:	9301      	str	r3, [sp, #4]
 8009e96:	46d9      	mov	r9, fp
 8009e98:	f04f 0c00 	mov.w	ip, #0
 8009e9c:	9b01      	ldr	r3, [sp, #4]
 8009e9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009ea2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009ea6:	9301      	str	r3, [sp, #4]
 8009ea8:	fa1f f38a 	uxth.w	r3, sl
 8009eac:	4619      	mov	r1, r3
 8009eae:	b283      	uxth	r3, r0
 8009eb0:	1acb      	subs	r3, r1, r3
 8009eb2:	0c00      	lsrs	r0, r0, #16
 8009eb4:	4463      	add	r3, ip
 8009eb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009eba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009ec4:	4576      	cmp	r6, lr
 8009ec6:	f849 3b04 	str.w	r3, [r9], #4
 8009eca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ece:	d8e5      	bhi.n	8009e9c <__mdiff+0x88>
 8009ed0:	1b33      	subs	r3, r6, r4
 8009ed2:	3b15      	subs	r3, #21
 8009ed4:	f023 0303 	bic.w	r3, r3, #3
 8009ed8:	3415      	adds	r4, #21
 8009eda:	3304      	adds	r3, #4
 8009edc:	42a6      	cmp	r6, r4
 8009ede:	bf38      	it	cc
 8009ee0:	2304      	movcc	r3, #4
 8009ee2:	441d      	add	r5, r3
 8009ee4:	445b      	add	r3, fp
 8009ee6:	461e      	mov	r6, r3
 8009ee8:	462c      	mov	r4, r5
 8009eea:	4544      	cmp	r4, r8
 8009eec:	d30e      	bcc.n	8009f0c <__mdiff+0xf8>
 8009eee:	f108 0103 	add.w	r1, r8, #3
 8009ef2:	1b49      	subs	r1, r1, r5
 8009ef4:	f021 0103 	bic.w	r1, r1, #3
 8009ef8:	3d03      	subs	r5, #3
 8009efa:	45a8      	cmp	r8, r5
 8009efc:	bf38      	it	cc
 8009efe:	2100      	movcc	r1, #0
 8009f00:	440b      	add	r3, r1
 8009f02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f06:	b191      	cbz	r1, 8009f2e <__mdiff+0x11a>
 8009f08:	6117      	str	r7, [r2, #16]
 8009f0a:	e79d      	b.n	8009e48 <__mdiff+0x34>
 8009f0c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009f10:	46e6      	mov	lr, ip
 8009f12:	0c08      	lsrs	r0, r1, #16
 8009f14:	fa1c fc81 	uxtah	ip, ip, r1
 8009f18:	4471      	add	r1, lr
 8009f1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009f1e:	b289      	uxth	r1, r1
 8009f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009f24:	f846 1b04 	str.w	r1, [r6], #4
 8009f28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f2c:	e7dd      	b.n	8009eea <__mdiff+0xd6>
 8009f2e:	3f01      	subs	r7, #1
 8009f30:	e7e7      	b.n	8009f02 <__mdiff+0xee>
 8009f32:	bf00      	nop
 8009f34:	0800afd0 	.word	0x0800afd0
 8009f38:	0800afe1 	.word	0x0800afe1

08009f3c <__d2b>:
 8009f3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f40:	460f      	mov	r7, r1
 8009f42:	2101      	movs	r1, #1
 8009f44:	ec59 8b10 	vmov	r8, r9, d0
 8009f48:	4616      	mov	r6, r2
 8009f4a:	f7ff fcd5 	bl	80098f8 <_Balloc>
 8009f4e:	4604      	mov	r4, r0
 8009f50:	b930      	cbnz	r0, 8009f60 <__d2b+0x24>
 8009f52:	4602      	mov	r2, r0
 8009f54:	4b23      	ldr	r3, [pc, #140]	@ (8009fe4 <__d2b+0xa8>)
 8009f56:	4824      	ldr	r0, [pc, #144]	@ (8009fe8 <__d2b+0xac>)
 8009f58:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f5c:	f000 fa74 	bl	800a448 <__assert_func>
 8009f60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f68:	b10d      	cbz	r5, 8009f6e <__d2b+0x32>
 8009f6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f6e:	9301      	str	r3, [sp, #4]
 8009f70:	f1b8 0300 	subs.w	r3, r8, #0
 8009f74:	d023      	beq.n	8009fbe <__d2b+0x82>
 8009f76:	4668      	mov	r0, sp
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	f7ff fd84 	bl	8009a86 <__lo0bits>
 8009f7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f82:	b1d0      	cbz	r0, 8009fba <__d2b+0x7e>
 8009f84:	f1c0 0320 	rsb	r3, r0, #32
 8009f88:	fa02 f303 	lsl.w	r3, r2, r3
 8009f8c:	430b      	orrs	r3, r1
 8009f8e:	40c2      	lsrs	r2, r0
 8009f90:	6163      	str	r3, [r4, #20]
 8009f92:	9201      	str	r2, [sp, #4]
 8009f94:	9b01      	ldr	r3, [sp, #4]
 8009f96:	61a3      	str	r3, [r4, #24]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	bf0c      	ite	eq
 8009f9c:	2201      	moveq	r2, #1
 8009f9e:	2202      	movne	r2, #2
 8009fa0:	6122      	str	r2, [r4, #16]
 8009fa2:	b1a5      	cbz	r5, 8009fce <__d2b+0x92>
 8009fa4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009fa8:	4405      	add	r5, r0
 8009faa:	603d      	str	r5, [r7, #0]
 8009fac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009fb0:	6030      	str	r0, [r6, #0]
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	b003      	add	sp, #12
 8009fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fba:	6161      	str	r1, [r4, #20]
 8009fbc:	e7ea      	b.n	8009f94 <__d2b+0x58>
 8009fbe:	a801      	add	r0, sp, #4
 8009fc0:	f7ff fd61 	bl	8009a86 <__lo0bits>
 8009fc4:	9b01      	ldr	r3, [sp, #4]
 8009fc6:	6163      	str	r3, [r4, #20]
 8009fc8:	3020      	adds	r0, #32
 8009fca:	2201      	movs	r2, #1
 8009fcc:	e7e8      	b.n	8009fa0 <__d2b+0x64>
 8009fce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009fd6:	6038      	str	r0, [r7, #0]
 8009fd8:	6918      	ldr	r0, [r3, #16]
 8009fda:	f7ff fd35 	bl	8009a48 <__hi0bits>
 8009fde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fe2:	e7e5      	b.n	8009fb0 <__d2b+0x74>
 8009fe4:	0800afd0 	.word	0x0800afd0
 8009fe8:	0800afe1 	.word	0x0800afe1

08009fec <__ssputs_r>:
 8009fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff0:	688e      	ldr	r6, [r1, #8]
 8009ff2:	461f      	mov	r7, r3
 8009ff4:	42be      	cmp	r6, r7
 8009ff6:	680b      	ldr	r3, [r1, #0]
 8009ff8:	4682      	mov	sl, r0
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	4690      	mov	r8, r2
 8009ffe:	d82d      	bhi.n	800a05c <__ssputs_r+0x70>
 800a000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a004:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a008:	d026      	beq.n	800a058 <__ssputs_r+0x6c>
 800a00a:	6965      	ldr	r5, [r4, #20]
 800a00c:	6909      	ldr	r1, [r1, #16]
 800a00e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a012:	eba3 0901 	sub.w	r9, r3, r1
 800a016:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a01a:	1c7b      	adds	r3, r7, #1
 800a01c:	444b      	add	r3, r9
 800a01e:	106d      	asrs	r5, r5, #1
 800a020:	429d      	cmp	r5, r3
 800a022:	bf38      	it	cc
 800a024:	461d      	movcc	r5, r3
 800a026:	0553      	lsls	r3, r2, #21
 800a028:	d527      	bpl.n	800a07a <__ssputs_r+0x8e>
 800a02a:	4629      	mov	r1, r5
 800a02c:	f7ff fbd8 	bl	80097e0 <_malloc_r>
 800a030:	4606      	mov	r6, r0
 800a032:	b360      	cbz	r0, 800a08e <__ssputs_r+0xa2>
 800a034:	6921      	ldr	r1, [r4, #16]
 800a036:	464a      	mov	r2, r9
 800a038:	f7fe fcf7 	bl	8008a2a <memcpy>
 800a03c:	89a3      	ldrh	r3, [r4, #12]
 800a03e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a046:	81a3      	strh	r3, [r4, #12]
 800a048:	6126      	str	r6, [r4, #16]
 800a04a:	6165      	str	r5, [r4, #20]
 800a04c:	444e      	add	r6, r9
 800a04e:	eba5 0509 	sub.w	r5, r5, r9
 800a052:	6026      	str	r6, [r4, #0]
 800a054:	60a5      	str	r5, [r4, #8]
 800a056:	463e      	mov	r6, r7
 800a058:	42be      	cmp	r6, r7
 800a05a:	d900      	bls.n	800a05e <__ssputs_r+0x72>
 800a05c:	463e      	mov	r6, r7
 800a05e:	6820      	ldr	r0, [r4, #0]
 800a060:	4632      	mov	r2, r6
 800a062:	4641      	mov	r1, r8
 800a064:	f000 f9c6 	bl	800a3f4 <memmove>
 800a068:	68a3      	ldr	r3, [r4, #8]
 800a06a:	1b9b      	subs	r3, r3, r6
 800a06c:	60a3      	str	r3, [r4, #8]
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	4433      	add	r3, r6
 800a072:	6023      	str	r3, [r4, #0]
 800a074:	2000      	movs	r0, #0
 800a076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a07a:	462a      	mov	r2, r5
 800a07c:	f000 fa28 	bl	800a4d0 <_realloc_r>
 800a080:	4606      	mov	r6, r0
 800a082:	2800      	cmp	r0, #0
 800a084:	d1e0      	bne.n	800a048 <__ssputs_r+0x5c>
 800a086:	6921      	ldr	r1, [r4, #16]
 800a088:	4650      	mov	r0, sl
 800a08a:	f7ff fb35 	bl	80096f8 <_free_r>
 800a08e:	230c      	movs	r3, #12
 800a090:	f8ca 3000 	str.w	r3, [sl]
 800a094:	89a3      	ldrh	r3, [r4, #12]
 800a096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a09a:	81a3      	strh	r3, [r4, #12]
 800a09c:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a0:	e7e9      	b.n	800a076 <__ssputs_r+0x8a>
	...

0800a0a4 <_svfiprintf_r>:
 800a0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a8:	4698      	mov	r8, r3
 800a0aa:	898b      	ldrh	r3, [r1, #12]
 800a0ac:	061b      	lsls	r3, r3, #24
 800a0ae:	b09d      	sub	sp, #116	@ 0x74
 800a0b0:	4607      	mov	r7, r0
 800a0b2:	460d      	mov	r5, r1
 800a0b4:	4614      	mov	r4, r2
 800a0b6:	d510      	bpl.n	800a0da <_svfiprintf_r+0x36>
 800a0b8:	690b      	ldr	r3, [r1, #16]
 800a0ba:	b973      	cbnz	r3, 800a0da <_svfiprintf_r+0x36>
 800a0bc:	2140      	movs	r1, #64	@ 0x40
 800a0be:	f7ff fb8f 	bl	80097e0 <_malloc_r>
 800a0c2:	6028      	str	r0, [r5, #0]
 800a0c4:	6128      	str	r0, [r5, #16]
 800a0c6:	b930      	cbnz	r0, 800a0d6 <_svfiprintf_r+0x32>
 800a0c8:	230c      	movs	r3, #12
 800a0ca:	603b      	str	r3, [r7, #0]
 800a0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d0:	b01d      	add	sp, #116	@ 0x74
 800a0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d6:	2340      	movs	r3, #64	@ 0x40
 800a0d8:	616b      	str	r3, [r5, #20]
 800a0da:	2300      	movs	r3, #0
 800a0dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0de:	2320      	movs	r3, #32
 800a0e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a0e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0e8:	2330      	movs	r3, #48	@ 0x30
 800a0ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a288 <_svfiprintf_r+0x1e4>
 800a0ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a0f2:	f04f 0901 	mov.w	r9, #1
 800a0f6:	4623      	mov	r3, r4
 800a0f8:	469a      	mov	sl, r3
 800a0fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0fe:	b10a      	cbz	r2, 800a104 <_svfiprintf_r+0x60>
 800a100:	2a25      	cmp	r2, #37	@ 0x25
 800a102:	d1f9      	bne.n	800a0f8 <_svfiprintf_r+0x54>
 800a104:	ebba 0b04 	subs.w	fp, sl, r4
 800a108:	d00b      	beq.n	800a122 <_svfiprintf_r+0x7e>
 800a10a:	465b      	mov	r3, fp
 800a10c:	4622      	mov	r2, r4
 800a10e:	4629      	mov	r1, r5
 800a110:	4638      	mov	r0, r7
 800a112:	f7ff ff6b 	bl	8009fec <__ssputs_r>
 800a116:	3001      	adds	r0, #1
 800a118:	f000 80a7 	beq.w	800a26a <_svfiprintf_r+0x1c6>
 800a11c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a11e:	445a      	add	r2, fp
 800a120:	9209      	str	r2, [sp, #36]	@ 0x24
 800a122:	f89a 3000 	ldrb.w	r3, [sl]
 800a126:	2b00      	cmp	r3, #0
 800a128:	f000 809f 	beq.w	800a26a <_svfiprintf_r+0x1c6>
 800a12c:	2300      	movs	r3, #0
 800a12e:	f04f 32ff 	mov.w	r2, #4294967295
 800a132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a136:	f10a 0a01 	add.w	sl, sl, #1
 800a13a:	9304      	str	r3, [sp, #16]
 800a13c:	9307      	str	r3, [sp, #28]
 800a13e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a142:	931a      	str	r3, [sp, #104]	@ 0x68
 800a144:	4654      	mov	r4, sl
 800a146:	2205      	movs	r2, #5
 800a148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a14c:	484e      	ldr	r0, [pc, #312]	@ (800a288 <_svfiprintf_r+0x1e4>)
 800a14e:	f7f6 f86f 	bl	8000230 <memchr>
 800a152:	9a04      	ldr	r2, [sp, #16]
 800a154:	b9d8      	cbnz	r0, 800a18e <_svfiprintf_r+0xea>
 800a156:	06d0      	lsls	r0, r2, #27
 800a158:	bf44      	itt	mi
 800a15a:	2320      	movmi	r3, #32
 800a15c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a160:	0711      	lsls	r1, r2, #28
 800a162:	bf44      	itt	mi
 800a164:	232b      	movmi	r3, #43	@ 0x2b
 800a166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a16a:	f89a 3000 	ldrb.w	r3, [sl]
 800a16e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a170:	d015      	beq.n	800a19e <_svfiprintf_r+0xfa>
 800a172:	9a07      	ldr	r2, [sp, #28]
 800a174:	4654      	mov	r4, sl
 800a176:	2000      	movs	r0, #0
 800a178:	f04f 0c0a 	mov.w	ip, #10
 800a17c:	4621      	mov	r1, r4
 800a17e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a182:	3b30      	subs	r3, #48	@ 0x30
 800a184:	2b09      	cmp	r3, #9
 800a186:	d94b      	bls.n	800a220 <_svfiprintf_r+0x17c>
 800a188:	b1b0      	cbz	r0, 800a1b8 <_svfiprintf_r+0x114>
 800a18a:	9207      	str	r2, [sp, #28]
 800a18c:	e014      	b.n	800a1b8 <_svfiprintf_r+0x114>
 800a18e:	eba0 0308 	sub.w	r3, r0, r8
 800a192:	fa09 f303 	lsl.w	r3, r9, r3
 800a196:	4313      	orrs	r3, r2
 800a198:	9304      	str	r3, [sp, #16]
 800a19a:	46a2      	mov	sl, r4
 800a19c:	e7d2      	b.n	800a144 <_svfiprintf_r+0xa0>
 800a19e:	9b03      	ldr	r3, [sp, #12]
 800a1a0:	1d19      	adds	r1, r3, #4
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	9103      	str	r1, [sp, #12]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	bfbb      	ittet	lt
 800a1aa:	425b      	neglt	r3, r3
 800a1ac:	f042 0202 	orrlt.w	r2, r2, #2
 800a1b0:	9307      	strge	r3, [sp, #28]
 800a1b2:	9307      	strlt	r3, [sp, #28]
 800a1b4:	bfb8      	it	lt
 800a1b6:	9204      	strlt	r2, [sp, #16]
 800a1b8:	7823      	ldrb	r3, [r4, #0]
 800a1ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1bc:	d10a      	bne.n	800a1d4 <_svfiprintf_r+0x130>
 800a1be:	7863      	ldrb	r3, [r4, #1]
 800a1c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1c2:	d132      	bne.n	800a22a <_svfiprintf_r+0x186>
 800a1c4:	9b03      	ldr	r3, [sp, #12]
 800a1c6:	1d1a      	adds	r2, r3, #4
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	9203      	str	r2, [sp, #12]
 800a1cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1d0:	3402      	adds	r4, #2
 800a1d2:	9305      	str	r3, [sp, #20]
 800a1d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a298 <_svfiprintf_r+0x1f4>
 800a1d8:	7821      	ldrb	r1, [r4, #0]
 800a1da:	2203      	movs	r2, #3
 800a1dc:	4650      	mov	r0, sl
 800a1de:	f7f6 f827 	bl	8000230 <memchr>
 800a1e2:	b138      	cbz	r0, 800a1f4 <_svfiprintf_r+0x150>
 800a1e4:	9b04      	ldr	r3, [sp, #16]
 800a1e6:	eba0 000a 	sub.w	r0, r0, sl
 800a1ea:	2240      	movs	r2, #64	@ 0x40
 800a1ec:	4082      	lsls	r2, r0
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	3401      	adds	r4, #1
 800a1f2:	9304      	str	r3, [sp, #16]
 800a1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f8:	4824      	ldr	r0, [pc, #144]	@ (800a28c <_svfiprintf_r+0x1e8>)
 800a1fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a1fe:	2206      	movs	r2, #6
 800a200:	f7f6 f816 	bl	8000230 <memchr>
 800a204:	2800      	cmp	r0, #0
 800a206:	d036      	beq.n	800a276 <_svfiprintf_r+0x1d2>
 800a208:	4b21      	ldr	r3, [pc, #132]	@ (800a290 <_svfiprintf_r+0x1ec>)
 800a20a:	bb1b      	cbnz	r3, 800a254 <_svfiprintf_r+0x1b0>
 800a20c:	9b03      	ldr	r3, [sp, #12]
 800a20e:	3307      	adds	r3, #7
 800a210:	f023 0307 	bic.w	r3, r3, #7
 800a214:	3308      	adds	r3, #8
 800a216:	9303      	str	r3, [sp, #12]
 800a218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a21a:	4433      	add	r3, r6
 800a21c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a21e:	e76a      	b.n	800a0f6 <_svfiprintf_r+0x52>
 800a220:	fb0c 3202 	mla	r2, ip, r2, r3
 800a224:	460c      	mov	r4, r1
 800a226:	2001      	movs	r0, #1
 800a228:	e7a8      	b.n	800a17c <_svfiprintf_r+0xd8>
 800a22a:	2300      	movs	r3, #0
 800a22c:	3401      	adds	r4, #1
 800a22e:	9305      	str	r3, [sp, #20]
 800a230:	4619      	mov	r1, r3
 800a232:	f04f 0c0a 	mov.w	ip, #10
 800a236:	4620      	mov	r0, r4
 800a238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a23c:	3a30      	subs	r2, #48	@ 0x30
 800a23e:	2a09      	cmp	r2, #9
 800a240:	d903      	bls.n	800a24a <_svfiprintf_r+0x1a6>
 800a242:	2b00      	cmp	r3, #0
 800a244:	d0c6      	beq.n	800a1d4 <_svfiprintf_r+0x130>
 800a246:	9105      	str	r1, [sp, #20]
 800a248:	e7c4      	b.n	800a1d4 <_svfiprintf_r+0x130>
 800a24a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a24e:	4604      	mov	r4, r0
 800a250:	2301      	movs	r3, #1
 800a252:	e7f0      	b.n	800a236 <_svfiprintf_r+0x192>
 800a254:	ab03      	add	r3, sp, #12
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	462a      	mov	r2, r5
 800a25a:	4b0e      	ldr	r3, [pc, #56]	@ (800a294 <_svfiprintf_r+0x1f0>)
 800a25c:	a904      	add	r1, sp, #16
 800a25e:	4638      	mov	r0, r7
 800a260:	f7fd fe60 	bl	8007f24 <_printf_float>
 800a264:	1c42      	adds	r2, r0, #1
 800a266:	4606      	mov	r6, r0
 800a268:	d1d6      	bne.n	800a218 <_svfiprintf_r+0x174>
 800a26a:	89ab      	ldrh	r3, [r5, #12]
 800a26c:	065b      	lsls	r3, r3, #25
 800a26e:	f53f af2d 	bmi.w	800a0cc <_svfiprintf_r+0x28>
 800a272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a274:	e72c      	b.n	800a0d0 <_svfiprintf_r+0x2c>
 800a276:	ab03      	add	r3, sp, #12
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	462a      	mov	r2, r5
 800a27c:	4b05      	ldr	r3, [pc, #20]	@ (800a294 <_svfiprintf_r+0x1f0>)
 800a27e:	a904      	add	r1, sp, #16
 800a280:	4638      	mov	r0, r7
 800a282:	f7fe f8e7 	bl	8008454 <_printf_i>
 800a286:	e7ed      	b.n	800a264 <_svfiprintf_r+0x1c0>
 800a288:	0800b03a 	.word	0x0800b03a
 800a28c:	0800b044 	.word	0x0800b044
 800a290:	08007f25 	.word	0x08007f25
 800a294:	08009fed 	.word	0x08009fed
 800a298:	0800b040 	.word	0x0800b040

0800a29c <__sflush_r>:
 800a29c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a4:	0716      	lsls	r6, r2, #28
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	460c      	mov	r4, r1
 800a2aa:	d454      	bmi.n	800a356 <__sflush_r+0xba>
 800a2ac:	684b      	ldr	r3, [r1, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	dc02      	bgt.n	800a2b8 <__sflush_r+0x1c>
 800a2b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	dd48      	ble.n	800a34a <__sflush_r+0xae>
 800a2b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2ba:	2e00      	cmp	r6, #0
 800a2bc:	d045      	beq.n	800a34a <__sflush_r+0xae>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a2c4:	682f      	ldr	r7, [r5, #0]
 800a2c6:	6a21      	ldr	r1, [r4, #32]
 800a2c8:	602b      	str	r3, [r5, #0]
 800a2ca:	d030      	beq.n	800a32e <__sflush_r+0x92>
 800a2cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a2ce:	89a3      	ldrh	r3, [r4, #12]
 800a2d0:	0759      	lsls	r1, r3, #29
 800a2d2:	d505      	bpl.n	800a2e0 <__sflush_r+0x44>
 800a2d4:	6863      	ldr	r3, [r4, #4]
 800a2d6:	1ad2      	subs	r2, r2, r3
 800a2d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a2da:	b10b      	cbz	r3, 800a2e0 <__sflush_r+0x44>
 800a2dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a2de:	1ad2      	subs	r2, r2, r3
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2e4:	6a21      	ldr	r1, [r4, #32]
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	47b0      	blx	r6
 800a2ea:	1c43      	adds	r3, r0, #1
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	d106      	bne.n	800a2fe <__sflush_r+0x62>
 800a2f0:	6829      	ldr	r1, [r5, #0]
 800a2f2:	291d      	cmp	r1, #29
 800a2f4:	d82b      	bhi.n	800a34e <__sflush_r+0xb2>
 800a2f6:	4a2a      	ldr	r2, [pc, #168]	@ (800a3a0 <__sflush_r+0x104>)
 800a2f8:	40ca      	lsrs	r2, r1
 800a2fa:	07d6      	lsls	r6, r2, #31
 800a2fc:	d527      	bpl.n	800a34e <__sflush_r+0xb2>
 800a2fe:	2200      	movs	r2, #0
 800a300:	6062      	str	r2, [r4, #4]
 800a302:	04d9      	lsls	r1, r3, #19
 800a304:	6922      	ldr	r2, [r4, #16]
 800a306:	6022      	str	r2, [r4, #0]
 800a308:	d504      	bpl.n	800a314 <__sflush_r+0x78>
 800a30a:	1c42      	adds	r2, r0, #1
 800a30c:	d101      	bne.n	800a312 <__sflush_r+0x76>
 800a30e:	682b      	ldr	r3, [r5, #0]
 800a310:	b903      	cbnz	r3, 800a314 <__sflush_r+0x78>
 800a312:	6560      	str	r0, [r4, #84]	@ 0x54
 800a314:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a316:	602f      	str	r7, [r5, #0]
 800a318:	b1b9      	cbz	r1, 800a34a <__sflush_r+0xae>
 800a31a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a31e:	4299      	cmp	r1, r3
 800a320:	d002      	beq.n	800a328 <__sflush_r+0x8c>
 800a322:	4628      	mov	r0, r5
 800a324:	f7ff f9e8 	bl	80096f8 <_free_r>
 800a328:	2300      	movs	r3, #0
 800a32a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a32c:	e00d      	b.n	800a34a <__sflush_r+0xae>
 800a32e:	2301      	movs	r3, #1
 800a330:	4628      	mov	r0, r5
 800a332:	47b0      	blx	r6
 800a334:	4602      	mov	r2, r0
 800a336:	1c50      	adds	r0, r2, #1
 800a338:	d1c9      	bne.n	800a2ce <__sflush_r+0x32>
 800a33a:	682b      	ldr	r3, [r5, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d0c6      	beq.n	800a2ce <__sflush_r+0x32>
 800a340:	2b1d      	cmp	r3, #29
 800a342:	d001      	beq.n	800a348 <__sflush_r+0xac>
 800a344:	2b16      	cmp	r3, #22
 800a346:	d11e      	bne.n	800a386 <__sflush_r+0xea>
 800a348:	602f      	str	r7, [r5, #0]
 800a34a:	2000      	movs	r0, #0
 800a34c:	e022      	b.n	800a394 <__sflush_r+0xf8>
 800a34e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a352:	b21b      	sxth	r3, r3
 800a354:	e01b      	b.n	800a38e <__sflush_r+0xf2>
 800a356:	690f      	ldr	r7, [r1, #16]
 800a358:	2f00      	cmp	r7, #0
 800a35a:	d0f6      	beq.n	800a34a <__sflush_r+0xae>
 800a35c:	0793      	lsls	r3, r2, #30
 800a35e:	680e      	ldr	r6, [r1, #0]
 800a360:	bf08      	it	eq
 800a362:	694b      	ldreq	r3, [r1, #20]
 800a364:	600f      	str	r7, [r1, #0]
 800a366:	bf18      	it	ne
 800a368:	2300      	movne	r3, #0
 800a36a:	eba6 0807 	sub.w	r8, r6, r7
 800a36e:	608b      	str	r3, [r1, #8]
 800a370:	f1b8 0f00 	cmp.w	r8, #0
 800a374:	dde9      	ble.n	800a34a <__sflush_r+0xae>
 800a376:	6a21      	ldr	r1, [r4, #32]
 800a378:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a37a:	4643      	mov	r3, r8
 800a37c:	463a      	mov	r2, r7
 800a37e:	4628      	mov	r0, r5
 800a380:	47b0      	blx	r6
 800a382:	2800      	cmp	r0, #0
 800a384:	dc08      	bgt.n	800a398 <__sflush_r+0xfc>
 800a386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a38a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a38e:	81a3      	strh	r3, [r4, #12]
 800a390:	f04f 30ff 	mov.w	r0, #4294967295
 800a394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a398:	4407      	add	r7, r0
 800a39a:	eba8 0800 	sub.w	r8, r8, r0
 800a39e:	e7e7      	b.n	800a370 <__sflush_r+0xd4>
 800a3a0:	20400001 	.word	0x20400001

0800a3a4 <_fflush_r>:
 800a3a4:	b538      	push	{r3, r4, r5, lr}
 800a3a6:	690b      	ldr	r3, [r1, #16]
 800a3a8:	4605      	mov	r5, r0
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	b913      	cbnz	r3, 800a3b4 <_fflush_r+0x10>
 800a3ae:	2500      	movs	r5, #0
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	bd38      	pop	{r3, r4, r5, pc}
 800a3b4:	b118      	cbz	r0, 800a3be <_fflush_r+0x1a>
 800a3b6:	6a03      	ldr	r3, [r0, #32]
 800a3b8:	b90b      	cbnz	r3, 800a3be <_fflush_r+0x1a>
 800a3ba:	f7fe f9f5 	bl	80087a8 <__sinit>
 800a3be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d0f3      	beq.n	800a3ae <_fflush_r+0xa>
 800a3c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a3c8:	07d0      	lsls	r0, r2, #31
 800a3ca:	d404      	bmi.n	800a3d6 <_fflush_r+0x32>
 800a3cc:	0599      	lsls	r1, r3, #22
 800a3ce:	d402      	bmi.n	800a3d6 <_fflush_r+0x32>
 800a3d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3d2:	f7fe fb28 	bl	8008a26 <__retarget_lock_acquire_recursive>
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	4621      	mov	r1, r4
 800a3da:	f7ff ff5f 	bl	800a29c <__sflush_r>
 800a3de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3e0:	07da      	lsls	r2, r3, #31
 800a3e2:	4605      	mov	r5, r0
 800a3e4:	d4e4      	bmi.n	800a3b0 <_fflush_r+0xc>
 800a3e6:	89a3      	ldrh	r3, [r4, #12]
 800a3e8:	059b      	lsls	r3, r3, #22
 800a3ea:	d4e1      	bmi.n	800a3b0 <_fflush_r+0xc>
 800a3ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3ee:	f7fe fb1b 	bl	8008a28 <__retarget_lock_release_recursive>
 800a3f2:	e7dd      	b.n	800a3b0 <_fflush_r+0xc>

0800a3f4 <memmove>:
 800a3f4:	4288      	cmp	r0, r1
 800a3f6:	b510      	push	{r4, lr}
 800a3f8:	eb01 0402 	add.w	r4, r1, r2
 800a3fc:	d902      	bls.n	800a404 <memmove+0x10>
 800a3fe:	4284      	cmp	r4, r0
 800a400:	4623      	mov	r3, r4
 800a402:	d807      	bhi.n	800a414 <memmove+0x20>
 800a404:	1e43      	subs	r3, r0, #1
 800a406:	42a1      	cmp	r1, r4
 800a408:	d008      	beq.n	800a41c <memmove+0x28>
 800a40a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a40e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a412:	e7f8      	b.n	800a406 <memmove+0x12>
 800a414:	4402      	add	r2, r0
 800a416:	4601      	mov	r1, r0
 800a418:	428a      	cmp	r2, r1
 800a41a:	d100      	bne.n	800a41e <memmove+0x2a>
 800a41c:	bd10      	pop	{r4, pc}
 800a41e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a426:	e7f7      	b.n	800a418 <memmove+0x24>

0800a428 <_sbrk_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4d06      	ldr	r5, [pc, #24]	@ (800a444 <_sbrk_r+0x1c>)
 800a42c:	2300      	movs	r3, #0
 800a42e:	4604      	mov	r4, r0
 800a430:	4608      	mov	r0, r1
 800a432:	602b      	str	r3, [r5, #0]
 800a434:	f7f8 fa28 	bl	8002888 <_sbrk>
 800a438:	1c43      	adds	r3, r0, #1
 800a43a:	d102      	bne.n	800a442 <_sbrk_r+0x1a>
 800a43c:	682b      	ldr	r3, [r5, #0]
 800a43e:	b103      	cbz	r3, 800a442 <_sbrk_r+0x1a>
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	bd38      	pop	{r3, r4, r5, pc}
 800a444:	20000c9c 	.word	0x20000c9c

0800a448 <__assert_func>:
 800a448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a44a:	4614      	mov	r4, r2
 800a44c:	461a      	mov	r2, r3
 800a44e:	4b09      	ldr	r3, [pc, #36]	@ (800a474 <__assert_func+0x2c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4605      	mov	r5, r0
 800a454:	68d8      	ldr	r0, [r3, #12]
 800a456:	b14c      	cbz	r4, 800a46c <__assert_func+0x24>
 800a458:	4b07      	ldr	r3, [pc, #28]	@ (800a478 <__assert_func+0x30>)
 800a45a:	9100      	str	r1, [sp, #0]
 800a45c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a460:	4906      	ldr	r1, [pc, #24]	@ (800a47c <__assert_func+0x34>)
 800a462:	462b      	mov	r3, r5
 800a464:	f000 f870 	bl	800a548 <fiprintf>
 800a468:	f000 f880 	bl	800a56c <abort>
 800a46c:	4b04      	ldr	r3, [pc, #16]	@ (800a480 <__assert_func+0x38>)
 800a46e:	461c      	mov	r4, r3
 800a470:	e7f3      	b.n	800a45a <__assert_func+0x12>
 800a472:	bf00      	nop
 800a474:	20000018 	.word	0x20000018
 800a478:	0800b055 	.word	0x0800b055
 800a47c:	0800b062 	.word	0x0800b062
 800a480:	0800b090 	.word	0x0800b090

0800a484 <_calloc_r>:
 800a484:	b570      	push	{r4, r5, r6, lr}
 800a486:	fba1 5402 	umull	r5, r4, r1, r2
 800a48a:	b934      	cbnz	r4, 800a49a <_calloc_r+0x16>
 800a48c:	4629      	mov	r1, r5
 800a48e:	f7ff f9a7 	bl	80097e0 <_malloc_r>
 800a492:	4606      	mov	r6, r0
 800a494:	b928      	cbnz	r0, 800a4a2 <_calloc_r+0x1e>
 800a496:	4630      	mov	r0, r6
 800a498:	bd70      	pop	{r4, r5, r6, pc}
 800a49a:	220c      	movs	r2, #12
 800a49c:	6002      	str	r2, [r0, #0]
 800a49e:	2600      	movs	r6, #0
 800a4a0:	e7f9      	b.n	800a496 <_calloc_r+0x12>
 800a4a2:	462a      	mov	r2, r5
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	f7fe fa2e 	bl	8008906 <memset>
 800a4aa:	e7f4      	b.n	800a496 <_calloc_r+0x12>

0800a4ac <__ascii_mbtowc>:
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	b901      	cbnz	r1, 800a4b2 <__ascii_mbtowc+0x6>
 800a4b0:	a901      	add	r1, sp, #4
 800a4b2:	b142      	cbz	r2, 800a4c6 <__ascii_mbtowc+0x1a>
 800a4b4:	b14b      	cbz	r3, 800a4ca <__ascii_mbtowc+0x1e>
 800a4b6:	7813      	ldrb	r3, [r2, #0]
 800a4b8:	600b      	str	r3, [r1, #0]
 800a4ba:	7812      	ldrb	r2, [r2, #0]
 800a4bc:	1e10      	subs	r0, r2, #0
 800a4be:	bf18      	it	ne
 800a4c0:	2001      	movne	r0, #1
 800a4c2:	b002      	add	sp, #8
 800a4c4:	4770      	bx	lr
 800a4c6:	4610      	mov	r0, r2
 800a4c8:	e7fb      	b.n	800a4c2 <__ascii_mbtowc+0x16>
 800a4ca:	f06f 0001 	mvn.w	r0, #1
 800a4ce:	e7f8      	b.n	800a4c2 <__ascii_mbtowc+0x16>

0800a4d0 <_realloc_r>:
 800a4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d4:	4607      	mov	r7, r0
 800a4d6:	4614      	mov	r4, r2
 800a4d8:	460d      	mov	r5, r1
 800a4da:	b921      	cbnz	r1, 800a4e6 <_realloc_r+0x16>
 800a4dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e0:	4611      	mov	r1, r2
 800a4e2:	f7ff b97d 	b.w	80097e0 <_malloc_r>
 800a4e6:	b92a      	cbnz	r2, 800a4f4 <_realloc_r+0x24>
 800a4e8:	f7ff f906 	bl	80096f8 <_free_r>
 800a4ec:	4625      	mov	r5, r4
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f4:	f000 f841 	bl	800a57a <_malloc_usable_size_r>
 800a4f8:	4284      	cmp	r4, r0
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	d802      	bhi.n	800a504 <_realloc_r+0x34>
 800a4fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a502:	d8f4      	bhi.n	800a4ee <_realloc_r+0x1e>
 800a504:	4621      	mov	r1, r4
 800a506:	4638      	mov	r0, r7
 800a508:	f7ff f96a 	bl	80097e0 <_malloc_r>
 800a50c:	4680      	mov	r8, r0
 800a50e:	b908      	cbnz	r0, 800a514 <_realloc_r+0x44>
 800a510:	4645      	mov	r5, r8
 800a512:	e7ec      	b.n	800a4ee <_realloc_r+0x1e>
 800a514:	42b4      	cmp	r4, r6
 800a516:	4622      	mov	r2, r4
 800a518:	4629      	mov	r1, r5
 800a51a:	bf28      	it	cs
 800a51c:	4632      	movcs	r2, r6
 800a51e:	f7fe fa84 	bl	8008a2a <memcpy>
 800a522:	4629      	mov	r1, r5
 800a524:	4638      	mov	r0, r7
 800a526:	f7ff f8e7 	bl	80096f8 <_free_r>
 800a52a:	e7f1      	b.n	800a510 <_realloc_r+0x40>

0800a52c <__ascii_wctomb>:
 800a52c:	4603      	mov	r3, r0
 800a52e:	4608      	mov	r0, r1
 800a530:	b141      	cbz	r1, 800a544 <__ascii_wctomb+0x18>
 800a532:	2aff      	cmp	r2, #255	@ 0xff
 800a534:	d904      	bls.n	800a540 <__ascii_wctomb+0x14>
 800a536:	228a      	movs	r2, #138	@ 0x8a
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	f04f 30ff 	mov.w	r0, #4294967295
 800a53e:	4770      	bx	lr
 800a540:	700a      	strb	r2, [r1, #0]
 800a542:	2001      	movs	r0, #1
 800a544:	4770      	bx	lr
	...

0800a548 <fiprintf>:
 800a548:	b40e      	push	{r1, r2, r3}
 800a54a:	b503      	push	{r0, r1, lr}
 800a54c:	4601      	mov	r1, r0
 800a54e:	ab03      	add	r3, sp, #12
 800a550:	4805      	ldr	r0, [pc, #20]	@ (800a568 <fiprintf+0x20>)
 800a552:	f853 2b04 	ldr.w	r2, [r3], #4
 800a556:	6800      	ldr	r0, [r0, #0]
 800a558:	9301      	str	r3, [sp, #4]
 800a55a:	f000 f83f 	bl	800a5dc <_vfiprintf_r>
 800a55e:	b002      	add	sp, #8
 800a560:	f85d eb04 	ldr.w	lr, [sp], #4
 800a564:	b003      	add	sp, #12
 800a566:	4770      	bx	lr
 800a568:	20000018 	.word	0x20000018

0800a56c <abort>:
 800a56c:	b508      	push	{r3, lr}
 800a56e:	2006      	movs	r0, #6
 800a570:	f000 fa08 	bl	800a984 <raise>
 800a574:	2001      	movs	r0, #1
 800a576:	f7f8 f90f 	bl	8002798 <_exit>

0800a57a <_malloc_usable_size_r>:
 800a57a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a57e:	1f18      	subs	r0, r3, #4
 800a580:	2b00      	cmp	r3, #0
 800a582:	bfbc      	itt	lt
 800a584:	580b      	ldrlt	r3, [r1, r0]
 800a586:	18c0      	addlt	r0, r0, r3
 800a588:	4770      	bx	lr

0800a58a <__sfputc_r>:
 800a58a:	6893      	ldr	r3, [r2, #8]
 800a58c:	3b01      	subs	r3, #1
 800a58e:	2b00      	cmp	r3, #0
 800a590:	b410      	push	{r4}
 800a592:	6093      	str	r3, [r2, #8]
 800a594:	da08      	bge.n	800a5a8 <__sfputc_r+0x1e>
 800a596:	6994      	ldr	r4, [r2, #24]
 800a598:	42a3      	cmp	r3, r4
 800a59a:	db01      	blt.n	800a5a0 <__sfputc_r+0x16>
 800a59c:	290a      	cmp	r1, #10
 800a59e:	d103      	bne.n	800a5a8 <__sfputc_r+0x1e>
 800a5a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5a4:	f000 b932 	b.w	800a80c <__swbuf_r>
 800a5a8:	6813      	ldr	r3, [r2, #0]
 800a5aa:	1c58      	adds	r0, r3, #1
 800a5ac:	6010      	str	r0, [r2, #0]
 800a5ae:	7019      	strb	r1, [r3, #0]
 800a5b0:	4608      	mov	r0, r1
 800a5b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <__sfputs_r>:
 800a5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ba:	4606      	mov	r6, r0
 800a5bc:	460f      	mov	r7, r1
 800a5be:	4614      	mov	r4, r2
 800a5c0:	18d5      	adds	r5, r2, r3
 800a5c2:	42ac      	cmp	r4, r5
 800a5c4:	d101      	bne.n	800a5ca <__sfputs_r+0x12>
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	e007      	b.n	800a5da <__sfputs_r+0x22>
 800a5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ce:	463a      	mov	r2, r7
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f7ff ffda 	bl	800a58a <__sfputc_r>
 800a5d6:	1c43      	adds	r3, r0, #1
 800a5d8:	d1f3      	bne.n	800a5c2 <__sfputs_r+0xa>
 800a5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a5dc <_vfiprintf_r>:
 800a5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e0:	460d      	mov	r5, r1
 800a5e2:	b09d      	sub	sp, #116	@ 0x74
 800a5e4:	4614      	mov	r4, r2
 800a5e6:	4698      	mov	r8, r3
 800a5e8:	4606      	mov	r6, r0
 800a5ea:	b118      	cbz	r0, 800a5f4 <_vfiprintf_r+0x18>
 800a5ec:	6a03      	ldr	r3, [r0, #32]
 800a5ee:	b90b      	cbnz	r3, 800a5f4 <_vfiprintf_r+0x18>
 800a5f0:	f7fe f8da 	bl	80087a8 <__sinit>
 800a5f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5f6:	07d9      	lsls	r1, r3, #31
 800a5f8:	d405      	bmi.n	800a606 <_vfiprintf_r+0x2a>
 800a5fa:	89ab      	ldrh	r3, [r5, #12]
 800a5fc:	059a      	lsls	r2, r3, #22
 800a5fe:	d402      	bmi.n	800a606 <_vfiprintf_r+0x2a>
 800a600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a602:	f7fe fa10 	bl	8008a26 <__retarget_lock_acquire_recursive>
 800a606:	89ab      	ldrh	r3, [r5, #12]
 800a608:	071b      	lsls	r3, r3, #28
 800a60a:	d501      	bpl.n	800a610 <_vfiprintf_r+0x34>
 800a60c:	692b      	ldr	r3, [r5, #16]
 800a60e:	b99b      	cbnz	r3, 800a638 <_vfiprintf_r+0x5c>
 800a610:	4629      	mov	r1, r5
 800a612:	4630      	mov	r0, r6
 800a614:	f000 f938 	bl	800a888 <__swsetup_r>
 800a618:	b170      	cbz	r0, 800a638 <_vfiprintf_r+0x5c>
 800a61a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a61c:	07dc      	lsls	r4, r3, #31
 800a61e:	d504      	bpl.n	800a62a <_vfiprintf_r+0x4e>
 800a620:	f04f 30ff 	mov.w	r0, #4294967295
 800a624:	b01d      	add	sp, #116	@ 0x74
 800a626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62a:	89ab      	ldrh	r3, [r5, #12]
 800a62c:	0598      	lsls	r0, r3, #22
 800a62e:	d4f7      	bmi.n	800a620 <_vfiprintf_r+0x44>
 800a630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a632:	f7fe f9f9 	bl	8008a28 <__retarget_lock_release_recursive>
 800a636:	e7f3      	b.n	800a620 <_vfiprintf_r+0x44>
 800a638:	2300      	movs	r3, #0
 800a63a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a63c:	2320      	movs	r3, #32
 800a63e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a642:	f8cd 800c 	str.w	r8, [sp, #12]
 800a646:	2330      	movs	r3, #48	@ 0x30
 800a648:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a7f8 <_vfiprintf_r+0x21c>
 800a64c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a650:	f04f 0901 	mov.w	r9, #1
 800a654:	4623      	mov	r3, r4
 800a656:	469a      	mov	sl, r3
 800a658:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a65c:	b10a      	cbz	r2, 800a662 <_vfiprintf_r+0x86>
 800a65e:	2a25      	cmp	r2, #37	@ 0x25
 800a660:	d1f9      	bne.n	800a656 <_vfiprintf_r+0x7a>
 800a662:	ebba 0b04 	subs.w	fp, sl, r4
 800a666:	d00b      	beq.n	800a680 <_vfiprintf_r+0xa4>
 800a668:	465b      	mov	r3, fp
 800a66a:	4622      	mov	r2, r4
 800a66c:	4629      	mov	r1, r5
 800a66e:	4630      	mov	r0, r6
 800a670:	f7ff ffa2 	bl	800a5b8 <__sfputs_r>
 800a674:	3001      	adds	r0, #1
 800a676:	f000 80a7 	beq.w	800a7c8 <_vfiprintf_r+0x1ec>
 800a67a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a67c:	445a      	add	r2, fp
 800a67e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a680:	f89a 3000 	ldrb.w	r3, [sl]
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 809f 	beq.w	800a7c8 <_vfiprintf_r+0x1ec>
 800a68a:	2300      	movs	r3, #0
 800a68c:	f04f 32ff 	mov.w	r2, #4294967295
 800a690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a694:	f10a 0a01 	add.w	sl, sl, #1
 800a698:	9304      	str	r3, [sp, #16]
 800a69a:	9307      	str	r3, [sp, #28]
 800a69c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6a2:	4654      	mov	r4, sl
 800a6a4:	2205      	movs	r2, #5
 800a6a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6aa:	4853      	ldr	r0, [pc, #332]	@ (800a7f8 <_vfiprintf_r+0x21c>)
 800a6ac:	f7f5 fdc0 	bl	8000230 <memchr>
 800a6b0:	9a04      	ldr	r2, [sp, #16]
 800a6b2:	b9d8      	cbnz	r0, 800a6ec <_vfiprintf_r+0x110>
 800a6b4:	06d1      	lsls	r1, r2, #27
 800a6b6:	bf44      	itt	mi
 800a6b8:	2320      	movmi	r3, #32
 800a6ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6be:	0713      	lsls	r3, r2, #28
 800a6c0:	bf44      	itt	mi
 800a6c2:	232b      	movmi	r3, #43	@ 0x2b
 800a6c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a6c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6ce:	d015      	beq.n	800a6fc <_vfiprintf_r+0x120>
 800a6d0:	9a07      	ldr	r2, [sp, #28]
 800a6d2:	4654      	mov	r4, sl
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	f04f 0c0a 	mov.w	ip, #10
 800a6da:	4621      	mov	r1, r4
 800a6dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6e0:	3b30      	subs	r3, #48	@ 0x30
 800a6e2:	2b09      	cmp	r3, #9
 800a6e4:	d94b      	bls.n	800a77e <_vfiprintf_r+0x1a2>
 800a6e6:	b1b0      	cbz	r0, 800a716 <_vfiprintf_r+0x13a>
 800a6e8:	9207      	str	r2, [sp, #28]
 800a6ea:	e014      	b.n	800a716 <_vfiprintf_r+0x13a>
 800a6ec:	eba0 0308 	sub.w	r3, r0, r8
 800a6f0:	fa09 f303 	lsl.w	r3, r9, r3
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	9304      	str	r3, [sp, #16]
 800a6f8:	46a2      	mov	sl, r4
 800a6fa:	e7d2      	b.n	800a6a2 <_vfiprintf_r+0xc6>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	1d19      	adds	r1, r3, #4
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	9103      	str	r1, [sp, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	bfbb      	ittet	lt
 800a708:	425b      	neglt	r3, r3
 800a70a:	f042 0202 	orrlt.w	r2, r2, #2
 800a70e:	9307      	strge	r3, [sp, #28]
 800a710:	9307      	strlt	r3, [sp, #28]
 800a712:	bfb8      	it	lt
 800a714:	9204      	strlt	r2, [sp, #16]
 800a716:	7823      	ldrb	r3, [r4, #0]
 800a718:	2b2e      	cmp	r3, #46	@ 0x2e
 800a71a:	d10a      	bne.n	800a732 <_vfiprintf_r+0x156>
 800a71c:	7863      	ldrb	r3, [r4, #1]
 800a71e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a720:	d132      	bne.n	800a788 <_vfiprintf_r+0x1ac>
 800a722:	9b03      	ldr	r3, [sp, #12]
 800a724:	1d1a      	adds	r2, r3, #4
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	9203      	str	r2, [sp, #12]
 800a72a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a72e:	3402      	adds	r4, #2
 800a730:	9305      	str	r3, [sp, #20]
 800a732:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a808 <_vfiprintf_r+0x22c>
 800a736:	7821      	ldrb	r1, [r4, #0]
 800a738:	2203      	movs	r2, #3
 800a73a:	4650      	mov	r0, sl
 800a73c:	f7f5 fd78 	bl	8000230 <memchr>
 800a740:	b138      	cbz	r0, 800a752 <_vfiprintf_r+0x176>
 800a742:	9b04      	ldr	r3, [sp, #16]
 800a744:	eba0 000a 	sub.w	r0, r0, sl
 800a748:	2240      	movs	r2, #64	@ 0x40
 800a74a:	4082      	lsls	r2, r0
 800a74c:	4313      	orrs	r3, r2
 800a74e:	3401      	adds	r4, #1
 800a750:	9304      	str	r3, [sp, #16]
 800a752:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a756:	4829      	ldr	r0, [pc, #164]	@ (800a7fc <_vfiprintf_r+0x220>)
 800a758:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a75c:	2206      	movs	r2, #6
 800a75e:	f7f5 fd67 	bl	8000230 <memchr>
 800a762:	2800      	cmp	r0, #0
 800a764:	d03f      	beq.n	800a7e6 <_vfiprintf_r+0x20a>
 800a766:	4b26      	ldr	r3, [pc, #152]	@ (800a800 <_vfiprintf_r+0x224>)
 800a768:	bb1b      	cbnz	r3, 800a7b2 <_vfiprintf_r+0x1d6>
 800a76a:	9b03      	ldr	r3, [sp, #12]
 800a76c:	3307      	adds	r3, #7
 800a76e:	f023 0307 	bic.w	r3, r3, #7
 800a772:	3308      	adds	r3, #8
 800a774:	9303      	str	r3, [sp, #12]
 800a776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a778:	443b      	add	r3, r7
 800a77a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a77c:	e76a      	b.n	800a654 <_vfiprintf_r+0x78>
 800a77e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a782:	460c      	mov	r4, r1
 800a784:	2001      	movs	r0, #1
 800a786:	e7a8      	b.n	800a6da <_vfiprintf_r+0xfe>
 800a788:	2300      	movs	r3, #0
 800a78a:	3401      	adds	r4, #1
 800a78c:	9305      	str	r3, [sp, #20]
 800a78e:	4619      	mov	r1, r3
 800a790:	f04f 0c0a 	mov.w	ip, #10
 800a794:	4620      	mov	r0, r4
 800a796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a79a:	3a30      	subs	r2, #48	@ 0x30
 800a79c:	2a09      	cmp	r2, #9
 800a79e:	d903      	bls.n	800a7a8 <_vfiprintf_r+0x1cc>
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d0c6      	beq.n	800a732 <_vfiprintf_r+0x156>
 800a7a4:	9105      	str	r1, [sp, #20]
 800a7a6:	e7c4      	b.n	800a732 <_vfiprintf_r+0x156>
 800a7a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e7f0      	b.n	800a794 <_vfiprintf_r+0x1b8>
 800a7b2:	ab03      	add	r3, sp, #12
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	462a      	mov	r2, r5
 800a7b8:	4b12      	ldr	r3, [pc, #72]	@ (800a804 <_vfiprintf_r+0x228>)
 800a7ba:	a904      	add	r1, sp, #16
 800a7bc:	4630      	mov	r0, r6
 800a7be:	f7fd fbb1 	bl	8007f24 <_printf_float>
 800a7c2:	4607      	mov	r7, r0
 800a7c4:	1c78      	adds	r0, r7, #1
 800a7c6:	d1d6      	bne.n	800a776 <_vfiprintf_r+0x19a>
 800a7c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7ca:	07d9      	lsls	r1, r3, #31
 800a7cc:	d405      	bmi.n	800a7da <_vfiprintf_r+0x1fe>
 800a7ce:	89ab      	ldrh	r3, [r5, #12]
 800a7d0:	059a      	lsls	r2, r3, #22
 800a7d2:	d402      	bmi.n	800a7da <_vfiprintf_r+0x1fe>
 800a7d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7d6:	f7fe f927 	bl	8008a28 <__retarget_lock_release_recursive>
 800a7da:	89ab      	ldrh	r3, [r5, #12]
 800a7dc:	065b      	lsls	r3, r3, #25
 800a7de:	f53f af1f 	bmi.w	800a620 <_vfiprintf_r+0x44>
 800a7e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7e4:	e71e      	b.n	800a624 <_vfiprintf_r+0x48>
 800a7e6:	ab03      	add	r3, sp, #12
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	462a      	mov	r2, r5
 800a7ec:	4b05      	ldr	r3, [pc, #20]	@ (800a804 <_vfiprintf_r+0x228>)
 800a7ee:	a904      	add	r1, sp, #16
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f7fd fe2f 	bl	8008454 <_printf_i>
 800a7f6:	e7e4      	b.n	800a7c2 <_vfiprintf_r+0x1e6>
 800a7f8:	0800b03a 	.word	0x0800b03a
 800a7fc:	0800b044 	.word	0x0800b044
 800a800:	08007f25 	.word	0x08007f25
 800a804:	0800a5b9 	.word	0x0800a5b9
 800a808:	0800b040 	.word	0x0800b040

0800a80c <__swbuf_r>:
 800a80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80e:	460e      	mov	r6, r1
 800a810:	4614      	mov	r4, r2
 800a812:	4605      	mov	r5, r0
 800a814:	b118      	cbz	r0, 800a81e <__swbuf_r+0x12>
 800a816:	6a03      	ldr	r3, [r0, #32]
 800a818:	b90b      	cbnz	r3, 800a81e <__swbuf_r+0x12>
 800a81a:	f7fd ffc5 	bl	80087a8 <__sinit>
 800a81e:	69a3      	ldr	r3, [r4, #24]
 800a820:	60a3      	str	r3, [r4, #8]
 800a822:	89a3      	ldrh	r3, [r4, #12]
 800a824:	071a      	lsls	r2, r3, #28
 800a826:	d501      	bpl.n	800a82c <__swbuf_r+0x20>
 800a828:	6923      	ldr	r3, [r4, #16]
 800a82a:	b943      	cbnz	r3, 800a83e <__swbuf_r+0x32>
 800a82c:	4621      	mov	r1, r4
 800a82e:	4628      	mov	r0, r5
 800a830:	f000 f82a 	bl	800a888 <__swsetup_r>
 800a834:	b118      	cbz	r0, 800a83e <__swbuf_r+0x32>
 800a836:	f04f 37ff 	mov.w	r7, #4294967295
 800a83a:	4638      	mov	r0, r7
 800a83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a83e:	6823      	ldr	r3, [r4, #0]
 800a840:	6922      	ldr	r2, [r4, #16]
 800a842:	1a98      	subs	r0, r3, r2
 800a844:	6963      	ldr	r3, [r4, #20]
 800a846:	b2f6      	uxtb	r6, r6
 800a848:	4283      	cmp	r3, r0
 800a84a:	4637      	mov	r7, r6
 800a84c:	dc05      	bgt.n	800a85a <__swbuf_r+0x4e>
 800a84e:	4621      	mov	r1, r4
 800a850:	4628      	mov	r0, r5
 800a852:	f7ff fda7 	bl	800a3a4 <_fflush_r>
 800a856:	2800      	cmp	r0, #0
 800a858:	d1ed      	bne.n	800a836 <__swbuf_r+0x2a>
 800a85a:	68a3      	ldr	r3, [r4, #8]
 800a85c:	3b01      	subs	r3, #1
 800a85e:	60a3      	str	r3, [r4, #8]
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	1c5a      	adds	r2, r3, #1
 800a864:	6022      	str	r2, [r4, #0]
 800a866:	701e      	strb	r6, [r3, #0]
 800a868:	6962      	ldr	r2, [r4, #20]
 800a86a:	1c43      	adds	r3, r0, #1
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d004      	beq.n	800a87a <__swbuf_r+0x6e>
 800a870:	89a3      	ldrh	r3, [r4, #12]
 800a872:	07db      	lsls	r3, r3, #31
 800a874:	d5e1      	bpl.n	800a83a <__swbuf_r+0x2e>
 800a876:	2e0a      	cmp	r6, #10
 800a878:	d1df      	bne.n	800a83a <__swbuf_r+0x2e>
 800a87a:	4621      	mov	r1, r4
 800a87c:	4628      	mov	r0, r5
 800a87e:	f7ff fd91 	bl	800a3a4 <_fflush_r>
 800a882:	2800      	cmp	r0, #0
 800a884:	d0d9      	beq.n	800a83a <__swbuf_r+0x2e>
 800a886:	e7d6      	b.n	800a836 <__swbuf_r+0x2a>

0800a888 <__swsetup_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	4b29      	ldr	r3, [pc, #164]	@ (800a930 <__swsetup_r+0xa8>)
 800a88c:	4605      	mov	r5, r0
 800a88e:	6818      	ldr	r0, [r3, #0]
 800a890:	460c      	mov	r4, r1
 800a892:	b118      	cbz	r0, 800a89c <__swsetup_r+0x14>
 800a894:	6a03      	ldr	r3, [r0, #32]
 800a896:	b90b      	cbnz	r3, 800a89c <__swsetup_r+0x14>
 800a898:	f7fd ff86 	bl	80087a8 <__sinit>
 800a89c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8a0:	0719      	lsls	r1, r3, #28
 800a8a2:	d422      	bmi.n	800a8ea <__swsetup_r+0x62>
 800a8a4:	06da      	lsls	r2, r3, #27
 800a8a6:	d407      	bmi.n	800a8b8 <__swsetup_r+0x30>
 800a8a8:	2209      	movs	r2, #9
 800a8aa:	602a      	str	r2, [r5, #0]
 800a8ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8b0:	81a3      	strh	r3, [r4, #12]
 800a8b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b6:	e033      	b.n	800a920 <__swsetup_r+0x98>
 800a8b8:	0758      	lsls	r0, r3, #29
 800a8ba:	d512      	bpl.n	800a8e2 <__swsetup_r+0x5a>
 800a8bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8be:	b141      	cbz	r1, 800a8d2 <__swsetup_r+0x4a>
 800a8c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8c4:	4299      	cmp	r1, r3
 800a8c6:	d002      	beq.n	800a8ce <__swsetup_r+0x46>
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f7fe ff15 	bl	80096f8 <_free_r>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8d2:	89a3      	ldrh	r3, [r4, #12]
 800a8d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a8d8:	81a3      	strh	r3, [r4, #12]
 800a8da:	2300      	movs	r3, #0
 800a8dc:	6063      	str	r3, [r4, #4]
 800a8de:	6923      	ldr	r3, [r4, #16]
 800a8e0:	6023      	str	r3, [r4, #0]
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	f043 0308 	orr.w	r3, r3, #8
 800a8e8:	81a3      	strh	r3, [r4, #12]
 800a8ea:	6923      	ldr	r3, [r4, #16]
 800a8ec:	b94b      	cbnz	r3, 800a902 <__swsetup_r+0x7a>
 800a8ee:	89a3      	ldrh	r3, [r4, #12]
 800a8f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a8f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8f8:	d003      	beq.n	800a902 <__swsetup_r+0x7a>
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	f000 f883 	bl	800aa08 <__smakebuf_r>
 800a902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a906:	f013 0201 	ands.w	r2, r3, #1
 800a90a:	d00a      	beq.n	800a922 <__swsetup_r+0x9a>
 800a90c:	2200      	movs	r2, #0
 800a90e:	60a2      	str	r2, [r4, #8]
 800a910:	6962      	ldr	r2, [r4, #20]
 800a912:	4252      	negs	r2, r2
 800a914:	61a2      	str	r2, [r4, #24]
 800a916:	6922      	ldr	r2, [r4, #16]
 800a918:	b942      	cbnz	r2, 800a92c <__swsetup_r+0xa4>
 800a91a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a91e:	d1c5      	bne.n	800a8ac <__swsetup_r+0x24>
 800a920:	bd38      	pop	{r3, r4, r5, pc}
 800a922:	0799      	lsls	r1, r3, #30
 800a924:	bf58      	it	pl
 800a926:	6962      	ldrpl	r2, [r4, #20]
 800a928:	60a2      	str	r2, [r4, #8]
 800a92a:	e7f4      	b.n	800a916 <__swsetup_r+0x8e>
 800a92c:	2000      	movs	r0, #0
 800a92e:	e7f7      	b.n	800a920 <__swsetup_r+0x98>
 800a930:	20000018 	.word	0x20000018

0800a934 <_raise_r>:
 800a934:	291f      	cmp	r1, #31
 800a936:	b538      	push	{r3, r4, r5, lr}
 800a938:	4605      	mov	r5, r0
 800a93a:	460c      	mov	r4, r1
 800a93c:	d904      	bls.n	800a948 <_raise_r+0x14>
 800a93e:	2316      	movs	r3, #22
 800a940:	6003      	str	r3, [r0, #0]
 800a942:	f04f 30ff 	mov.w	r0, #4294967295
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a94a:	b112      	cbz	r2, 800a952 <_raise_r+0x1e>
 800a94c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a950:	b94b      	cbnz	r3, 800a966 <_raise_r+0x32>
 800a952:	4628      	mov	r0, r5
 800a954:	f000 f830 	bl	800a9b8 <_getpid_r>
 800a958:	4622      	mov	r2, r4
 800a95a:	4601      	mov	r1, r0
 800a95c:	4628      	mov	r0, r5
 800a95e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a962:	f000 b817 	b.w	800a994 <_kill_r>
 800a966:	2b01      	cmp	r3, #1
 800a968:	d00a      	beq.n	800a980 <_raise_r+0x4c>
 800a96a:	1c59      	adds	r1, r3, #1
 800a96c:	d103      	bne.n	800a976 <_raise_r+0x42>
 800a96e:	2316      	movs	r3, #22
 800a970:	6003      	str	r3, [r0, #0]
 800a972:	2001      	movs	r0, #1
 800a974:	e7e7      	b.n	800a946 <_raise_r+0x12>
 800a976:	2100      	movs	r1, #0
 800a978:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a97c:	4620      	mov	r0, r4
 800a97e:	4798      	blx	r3
 800a980:	2000      	movs	r0, #0
 800a982:	e7e0      	b.n	800a946 <_raise_r+0x12>

0800a984 <raise>:
 800a984:	4b02      	ldr	r3, [pc, #8]	@ (800a990 <raise+0xc>)
 800a986:	4601      	mov	r1, r0
 800a988:	6818      	ldr	r0, [r3, #0]
 800a98a:	f7ff bfd3 	b.w	800a934 <_raise_r>
 800a98e:	bf00      	nop
 800a990:	20000018 	.word	0x20000018

0800a994 <_kill_r>:
 800a994:	b538      	push	{r3, r4, r5, lr}
 800a996:	4d07      	ldr	r5, [pc, #28]	@ (800a9b4 <_kill_r+0x20>)
 800a998:	2300      	movs	r3, #0
 800a99a:	4604      	mov	r4, r0
 800a99c:	4608      	mov	r0, r1
 800a99e:	4611      	mov	r1, r2
 800a9a0:	602b      	str	r3, [r5, #0]
 800a9a2:	f7f7 fee9 	bl	8002778 <_kill>
 800a9a6:	1c43      	adds	r3, r0, #1
 800a9a8:	d102      	bne.n	800a9b0 <_kill_r+0x1c>
 800a9aa:	682b      	ldr	r3, [r5, #0]
 800a9ac:	b103      	cbz	r3, 800a9b0 <_kill_r+0x1c>
 800a9ae:	6023      	str	r3, [r4, #0]
 800a9b0:	bd38      	pop	{r3, r4, r5, pc}
 800a9b2:	bf00      	nop
 800a9b4:	20000c9c 	.word	0x20000c9c

0800a9b8 <_getpid_r>:
 800a9b8:	f7f7 bed6 	b.w	8002768 <_getpid>

0800a9bc <__swhatbuf_r>:
 800a9bc:	b570      	push	{r4, r5, r6, lr}
 800a9be:	460c      	mov	r4, r1
 800a9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c4:	2900      	cmp	r1, #0
 800a9c6:	b096      	sub	sp, #88	@ 0x58
 800a9c8:	4615      	mov	r5, r2
 800a9ca:	461e      	mov	r6, r3
 800a9cc:	da0d      	bge.n	800a9ea <__swhatbuf_r+0x2e>
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9d4:	f04f 0100 	mov.w	r1, #0
 800a9d8:	bf14      	ite	ne
 800a9da:	2340      	movne	r3, #64	@ 0x40
 800a9dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	6031      	str	r1, [r6, #0]
 800a9e4:	602b      	str	r3, [r5, #0]
 800a9e6:	b016      	add	sp, #88	@ 0x58
 800a9e8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ea:	466a      	mov	r2, sp
 800a9ec:	f000 f848 	bl	800aa80 <_fstat_r>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	dbec      	blt.n	800a9ce <__swhatbuf_r+0x12>
 800a9f4:	9901      	ldr	r1, [sp, #4]
 800a9f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a9fe:	4259      	negs	r1, r3
 800aa00:	4159      	adcs	r1, r3
 800aa02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa06:	e7eb      	b.n	800a9e0 <__swhatbuf_r+0x24>

0800aa08 <__smakebuf_r>:
 800aa08:	898b      	ldrh	r3, [r1, #12]
 800aa0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa0c:	079d      	lsls	r5, r3, #30
 800aa0e:	4606      	mov	r6, r0
 800aa10:	460c      	mov	r4, r1
 800aa12:	d507      	bpl.n	800aa24 <__smakebuf_r+0x1c>
 800aa14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa18:	6023      	str	r3, [r4, #0]
 800aa1a:	6123      	str	r3, [r4, #16]
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	6163      	str	r3, [r4, #20]
 800aa20:	b003      	add	sp, #12
 800aa22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa24:	ab01      	add	r3, sp, #4
 800aa26:	466a      	mov	r2, sp
 800aa28:	f7ff ffc8 	bl	800a9bc <__swhatbuf_r>
 800aa2c:	9f00      	ldr	r7, [sp, #0]
 800aa2e:	4605      	mov	r5, r0
 800aa30:	4639      	mov	r1, r7
 800aa32:	4630      	mov	r0, r6
 800aa34:	f7fe fed4 	bl	80097e0 <_malloc_r>
 800aa38:	b948      	cbnz	r0, 800aa4e <__smakebuf_r+0x46>
 800aa3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa3e:	059a      	lsls	r2, r3, #22
 800aa40:	d4ee      	bmi.n	800aa20 <__smakebuf_r+0x18>
 800aa42:	f023 0303 	bic.w	r3, r3, #3
 800aa46:	f043 0302 	orr.w	r3, r3, #2
 800aa4a:	81a3      	strh	r3, [r4, #12]
 800aa4c:	e7e2      	b.n	800aa14 <__smakebuf_r+0xc>
 800aa4e:	89a3      	ldrh	r3, [r4, #12]
 800aa50:	6020      	str	r0, [r4, #0]
 800aa52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa56:	81a3      	strh	r3, [r4, #12]
 800aa58:	9b01      	ldr	r3, [sp, #4]
 800aa5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa5e:	b15b      	cbz	r3, 800aa78 <__smakebuf_r+0x70>
 800aa60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa64:	4630      	mov	r0, r6
 800aa66:	f000 f81d 	bl	800aaa4 <_isatty_r>
 800aa6a:	b128      	cbz	r0, 800aa78 <__smakebuf_r+0x70>
 800aa6c:	89a3      	ldrh	r3, [r4, #12]
 800aa6e:	f023 0303 	bic.w	r3, r3, #3
 800aa72:	f043 0301 	orr.w	r3, r3, #1
 800aa76:	81a3      	strh	r3, [r4, #12]
 800aa78:	89a3      	ldrh	r3, [r4, #12]
 800aa7a:	431d      	orrs	r5, r3
 800aa7c:	81a5      	strh	r5, [r4, #12]
 800aa7e:	e7cf      	b.n	800aa20 <__smakebuf_r+0x18>

0800aa80 <_fstat_r>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	4d07      	ldr	r5, [pc, #28]	@ (800aaa0 <_fstat_r+0x20>)
 800aa84:	2300      	movs	r3, #0
 800aa86:	4604      	mov	r4, r0
 800aa88:	4608      	mov	r0, r1
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	602b      	str	r3, [r5, #0]
 800aa8e:	f7f7 fed3 	bl	8002838 <_fstat>
 800aa92:	1c43      	adds	r3, r0, #1
 800aa94:	d102      	bne.n	800aa9c <_fstat_r+0x1c>
 800aa96:	682b      	ldr	r3, [r5, #0]
 800aa98:	b103      	cbz	r3, 800aa9c <_fstat_r+0x1c>
 800aa9a:	6023      	str	r3, [r4, #0]
 800aa9c:	bd38      	pop	{r3, r4, r5, pc}
 800aa9e:	bf00      	nop
 800aaa0:	20000c9c 	.word	0x20000c9c

0800aaa4 <_isatty_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	4d06      	ldr	r5, [pc, #24]	@ (800aac0 <_isatty_r+0x1c>)
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	4604      	mov	r4, r0
 800aaac:	4608      	mov	r0, r1
 800aaae:	602b      	str	r3, [r5, #0]
 800aab0:	f7f7 fed2 	bl	8002858 <_isatty>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	d102      	bne.n	800aabe <_isatty_r+0x1a>
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	b103      	cbz	r3, 800aabe <_isatty_r+0x1a>
 800aabc:	6023      	str	r3, [r4, #0]
 800aabe:	bd38      	pop	{r3, r4, r5, pc}
 800aac0:	20000c9c 	.word	0x20000c9c

0800aac4 <_init>:
 800aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac6:	bf00      	nop
 800aac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaca:	bc08      	pop	{r3}
 800aacc:	469e      	mov	lr, r3
 800aace:	4770      	bx	lr

0800aad0 <_fini>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	bf00      	nop
 800aad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad6:	bc08      	pop	{r3}
 800aad8:	469e      	mov	lr, r3
 800aada:	4770      	bx	lr
