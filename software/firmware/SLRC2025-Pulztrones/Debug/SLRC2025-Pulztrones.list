
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0fc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  0800b2d0  0800b2d0  0000c2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bab4  0800bab4  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bab4  0800bab4  0000cab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800babc  0800babc  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800babc  0800babc  0000cabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bac0  0800bac0  0000cac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800bac4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b6c  200001d4  0800bc98  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d40  0800bc98  0000dd40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001773a  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a9e  00000000  00000000  0002493e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  000283e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a5  00000000  00000000  00029ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006bbe  00000000  00000000  0002ac75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e53b  00000000  00000000  00031833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7cfa  00000000  00000000  0004fd6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137a68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007064  00000000  00000000  00137aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  0013eb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b2b4 	.word	0x0800b2b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800b2b4 	.word	0x0800b2b4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b988 	b.w	8000fd0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	468e      	mov	lr, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4688      	mov	r8, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d962      	bls.n	8000db4 <__udivmoddi4+0xdc>
 8000cee:	fab2 f682 	clz	r6, r2
 8000cf2:	b14e      	cbz	r6, 8000d08 <__udivmoddi4+0x30>
 8000cf4:	f1c6 0320 	rsb	r3, r6, #32
 8000cf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	ea43 0808 	orr.w	r8, r3, r8
 8000d06:	40b4      	lsls	r4, r6
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d14:	0c23      	lsrs	r3, r4, #16
 8000d16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d2c:	f080 80ea 	bcs.w	8000f04 <__udivmoddi4+0x22c>
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f240 80e7 	bls.w	8000f04 <__udivmoddi4+0x22c>
 8000d36:	3902      	subs	r1, #2
 8000d38:	443b      	add	r3, r7
 8000d3a:	1a9a      	subs	r2, r3, r2
 8000d3c:	b2a3      	uxth	r3, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4e:	459c      	cmp	ip, r3
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x8e>
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d58:	f080 80d6 	bcs.w	8000f08 <__udivmoddi4+0x230>
 8000d5c:	459c      	cmp	ip, r3
 8000d5e:	f240 80d3 	bls.w	8000f08 <__udivmoddi4+0x230>
 8000d62:	443b      	add	r3, r7
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6a:	eba3 030c 	sub.w	r3, r3, ip
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40f3      	lsrs	r3, r6
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xb6>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb0>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x14c>
 8000d96:	4573      	cmp	r3, lr
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xc8>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	f200 8105 	bhi.w	8000faa <__udivmoddi4+0x2d2>
 8000da0:	1a84      	subs	r4, r0, r2
 8000da2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	4690      	mov	r8, r2
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d0e5      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000dae:	e9c5 4800 	strd	r4, r8, [r5]
 8000db2:	e7e2      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f000 8090 	beq.w	8000eda <__udivmoddi4+0x202>
 8000dba:	fab2 f682 	clz	r6, r2
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	f040 80a4 	bne.w	8000f0c <__udivmoddi4+0x234>
 8000dc4:	1a8a      	subs	r2, r1, r2
 8000dc6:	0c03      	lsrs	r3, r0, #16
 8000dc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dcc:	b280      	uxth	r0, r0
 8000dce:	b2bc      	uxth	r4, r7
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dde:	fb04 f20c 	mul.w	r2, r4, ip
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x11e>
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x11c>
 8000dee:	429a      	cmp	r2, r3
 8000df0:	f200 80e0 	bhi.w	8000fb4 <__udivmoddi4+0x2dc>
 8000df4:	46c4      	mov	ip, r8
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e04:	fb02 f404 	mul.w	r4, r2, r4
 8000e08:	429c      	cmp	r4, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x144>
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x142>
 8000e14:	429c      	cmp	r4, r3
 8000e16:	f200 80ca 	bhi.w	8000fae <__udivmoddi4+0x2d6>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	1b1b      	subs	r3, r3, r4
 8000e1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa0e f401 	lsl.w	r4, lr, r1
 8000e34:	fa20 f306 	lsr.w	r3, r0, r6
 8000e38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e40:	4323      	orrs	r3, r4
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	fa1f fc87 	uxth.w	ip, r7
 8000e4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e4e:	0c1c      	lsrs	r4, r3, #16
 8000e50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d909      	bls.n	8000e78 <__udivmoddi4+0x1a0>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e6a:	f080 809c 	bcs.w	8000fa6 <__udivmoddi4+0x2ce>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f240 8099 	bls.w	8000fa6 <__udivmoddi4+0x2ce>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	eba4 040e 	sub.w	r4, r4, lr
 8000e7c:	fa1f fe83 	uxth.w	lr, r3
 8000e80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e84:	fb09 4413 	mls	r4, r9, r3, r4
 8000e88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e90:	45a4      	cmp	ip, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1ce>
 8000e94:	193c      	adds	r4, r7, r4
 8000e96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e9a:	f080 8082 	bcs.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d97f      	bls.n	8000fa2 <__udivmoddi4+0x2ca>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eaa:	eba4 040c 	sub.w	r4, r4, ip
 8000eae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000eb2:	4564      	cmp	r4, ip
 8000eb4:	4673      	mov	r3, lr
 8000eb6:	46e1      	mov	r9, ip
 8000eb8:	d362      	bcc.n	8000f80 <__udivmoddi4+0x2a8>
 8000eba:	d05f      	beq.n	8000f7c <__udivmoddi4+0x2a4>
 8000ebc:	b15d      	cbz	r5, 8000ed6 <__udivmoddi4+0x1fe>
 8000ebe:	ebb8 0203 	subs.w	r2, r8, r3
 8000ec2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	fa22 f301 	lsr.w	r3, r2, r1
 8000ece:	431e      	orrs	r6, r3
 8000ed0:	40cc      	lsrs	r4, r1
 8000ed2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e74f      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000eda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ede:	0c01      	lsrs	r1, r0, #16
 8000ee0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eea:	463b      	mov	r3, r7
 8000eec:	4638      	mov	r0, r7
 8000eee:	463c      	mov	r4, r7
 8000ef0:	46b8      	mov	r8, r7
 8000ef2:	46be      	mov	lr, r7
 8000ef4:	2620      	movs	r6, #32
 8000ef6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000efa:	eba2 0208 	sub.w	r2, r2, r8
 8000efe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f02:	e766      	b.n	8000dd2 <__udivmoddi4+0xfa>
 8000f04:	4601      	mov	r1, r0
 8000f06:	e718      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	e72c      	b.n	8000d66 <__udivmoddi4+0x8e>
 8000f0c:	f1c6 0220 	rsb	r2, r6, #32
 8000f10:	fa2e f302 	lsr.w	r3, lr, r2
 8000f14:	40b7      	lsls	r7, r6
 8000f16:	40b1      	lsls	r1, r6
 8000f18:	fa20 f202 	lsr.w	r2, r0, r2
 8000f1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f20:	430a      	orrs	r2, r1
 8000f22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f26:	b2bc      	uxth	r4, r7
 8000f28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb08 f904 	mul.w	r9, r8, r4
 8000f36:	40b0      	lsls	r0, r6
 8000f38:	4589      	cmp	r9, r1
 8000f3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f3e:	b280      	uxth	r0, r0
 8000f40:	d93e      	bls.n	8000fc0 <__udivmoddi4+0x2e8>
 8000f42:	1879      	adds	r1, r7, r1
 8000f44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f48:	d201      	bcs.n	8000f4e <__udivmoddi4+0x276>
 8000f4a:	4589      	cmp	r9, r1
 8000f4c:	d81f      	bhi.n	8000f8e <__udivmoddi4+0x2b6>
 8000f4e:	eba1 0109 	sub.w	r1, r1, r9
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fb09 f804 	mul.w	r8, r9, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	b292      	uxth	r2, r2
 8000f60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f64:	4542      	cmp	r2, r8
 8000f66:	d229      	bcs.n	8000fbc <__udivmoddi4+0x2e4>
 8000f68:	18ba      	adds	r2, r7, r2
 8000f6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f6e:	d2c4      	bcs.n	8000efa <__udivmoddi4+0x222>
 8000f70:	4542      	cmp	r2, r8
 8000f72:	d2c2      	bcs.n	8000efa <__udivmoddi4+0x222>
 8000f74:	f1a9 0102 	sub.w	r1, r9, #2
 8000f78:	443a      	add	r2, r7
 8000f7a:	e7be      	b.n	8000efa <__udivmoddi4+0x222>
 8000f7c:	45f0      	cmp	r8, lr
 8000f7e:	d29d      	bcs.n	8000ebc <__udivmoddi4+0x1e4>
 8000f80:	ebbe 0302 	subs.w	r3, lr, r2
 8000f84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f88:	3801      	subs	r0, #1
 8000f8a:	46e1      	mov	r9, ip
 8000f8c:	e796      	b.n	8000ebc <__udivmoddi4+0x1e4>
 8000f8e:	eba7 0909 	sub.w	r9, r7, r9
 8000f92:	4449      	add	r1, r9
 8000f94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9c:	fb09 f804 	mul.w	r8, r9, r4
 8000fa0:	e7db      	b.n	8000f5a <__udivmoddi4+0x282>
 8000fa2:	4673      	mov	r3, lr
 8000fa4:	e77f      	b.n	8000ea6 <__udivmoddi4+0x1ce>
 8000fa6:	4650      	mov	r0, sl
 8000fa8:	e766      	b.n	8000e78 <__udivmoddi4+0x1a0>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e6fd      	b.n	8000daa <__udivmoddi4+0xd2>
 8000fae:	443b      	add	r3, r7
 8000fb0:	3a02      	subs	r2, #2
 8000fb2:	e733      	b.n	8000e1c <__udivmoddi4+0x144>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	443b      	add	r3, r7
 8000fba:	e71c      	b.n	8000df6 <__udivmoddi4+0x11e>
 8000fbc:	4649      	mov	r1, r9
 8000fbe:	e79c      	b.n	8000efa <__udivmoddi4+0x222>
 8000fc0:	eba1 0109 	sub.w	r1, r1, r9
 8000fc4:	46c4      	mov	ip, r8
 8000fc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fca:	fb09 f804 	mul.w	r8, r9, r4
 8000fce:	e7c4      	b.n	8000f5a <__udivmoddi4+0x282>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <Buzzer_On>:
#include "buzzer.h"
#include "main.h"

// Turn on the buzzer (PC15 high)
void Buzzer_On(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2120      	movs	r1, #32
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <Buzzer_On+0x14>)
 8000fde:	f003 fcab 	bl	8004938 <HAL_GPIO_WritePin>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40020000 	.word	0x40020000

08000fec <Buzzer_Off>:

// Turn off the buzzer (PC15 low)
void Buzzer_Off(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2120      	movs	r1, #32
 8000ff4:	4802      	ldr	r0, [pc, #8]	@ (8001000 <Buzzer_Off+0x14>)
 8000ff6:	f003 fc9f 	bl	8004938 <HAL_GPIO_WritePin>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40020000 	.word	0x40020000

08001004 <Buzzer_Toggle>:

// Toggle the buzzer state with a specified delay
void Buzzer_Toggle(uint32_t delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    Buzzer_On();
 800100c:	f7ff ffe2 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(delay);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f002 fbd9 	bl	80037c8 <HAL_Delay>
    Buzzer_Off();
 8001016:	f7ff ffe9 	bl	8000fec <Buzzer_Off>
    HAL_Delay(delay);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f002 fbd4 	bl	80037c8 <HAL_Delay>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <Buzzer_UniquePattern>:

void Buzzer_UniquePattern(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
    // Pattern: Short-Short-Long-Short-Long
    // Total duration: 1000ms (1 second)

    Buzzer_On();
 800102c:	f7ff ffd2 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 8001030:	2064      	movs	r0, #100	@ 0x64
 8001032:	f002 fbc9 	bl	80037c8 <HAL_Delay>
    Buzzer_Off();
 8001036:	f7ff ffd9 	bl	8000fec <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800103a:	2064      	movs	r0, #100	@ 0x64
 800103c:	f002 fbc4 	bl	80037c8 <HAL_Delay>

    Buzzer_On();
 8001040:	f7ff ffc8 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 8001044:	2064      	movs	r0, #100	@ 0x64
 8001046:	f002 fbbf 	bl	80037c8 <HAL_Delay>
    Buzzer_Off();
 800104a:	f7ff ffcf 	bl	8000fec <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800104e:	2064      	movs	r0, #100	@ 0x64
 8001050:	f002 fbba 	bl	80037c8 <HAL_Delay>

    Buzzer_On();
 8001054:	f7ff ffbe 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 8001058:	20c8      	movs	r0, #200	@ 0xc8
 800105a:	f002 fbb5 	bl	80037c8 <HAL_Delay>
    Buzzer_Off();
 800105e:	f7ff ffc5 	bl	8000fec <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 8001062:	2064      	movs	r0, #100	@ 0x64
 8001064:	f002 fbb0 	bl	80037c8 <HAL_Delay>

    Buzzer_On();
 8001068:	f7ff ffb4 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 800106c:	2064      	movs	r0, #100	@ 0x64
 800106e:	f002 fbab 	bl	80037c8 <HAL_Delay>
    Buzzer_Off();
 8001072:	f7ff ffbb 	bl	8000fec <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 8001076:	2064      	movs	r0, #100	@ 0x64
 8001078:	f002 fba6 	bl	80037c8 <HAL_Delay>

    Buzzer_On();
 800107c:	f7ff ffaa 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 8001080:	20c8      	movs	r0, #200	@ 0xc8
 8001082:	f002 fba1 	bl	80037c8 <HAL_Delay>
    Buzzer_Off();
 8001086:	f7ff ffb1 	bl	8000fec <Buzzer_Off>
    // No delay at the end to make it exactly 1 second
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <UpdateControllers>:


/**
 * Update motor controllers based on velocity, angular velocity, and steering adjustment.
 */
void UpdateControllers(Controller *controller, float velocity, float omega, float steering_adjustment) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b090      	sub	sp, #64	@ 0x40
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	ed87 0a02 	vstr	s0, [r7, #8]
 800109c:	edc7 0a01 	vstr	s1, [r7, #4]
 80010a0:	ed87 1a00 	vstr	s2, [r7]
    float forward_output, rotational_output, left_output, right_output;
    //float left_speed, right_speed, left_ff, right_ff;

    controller->velocity = velocity;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	611a      	str	r2, [r3, #16]
    controller->omega = omega;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	615a      	str	r2, [r3, #20]

    // Forward motion control
    float forward_increment = velocity * LOOP_INTERVAL;//
 80010b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001264 <UpdateControllers+0x1d4>)
 80010b2:	edd3 7a00 	vldr	s15, [r3]
 80010b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80010ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010be:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    controller->forward_error += forward_increment - robot_fwd_change();
 80010c2:	f000 fa87 	bl	80015d4 <robot_fwd_change>
 80010c6:	eeb0 7a40 	vmov.f32	s14, s0
 80010ca:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80010ce:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	edc3 7a00 	vstr	s15, [r3]
    float forward_diff = controller->forward_error - controller->previous_forward_error;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	ed93 7a00 	vldr	s14, [r3]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80010ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    controller->previous_forward_error = controller->forward_error;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	609a      	str	r2, [r3, #8]
    forward_output = FWD_KP * controller->forward_error + FWD_KD * forward_diff;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	ed93 7a00 	vldr	s14, [r3]
 8001104:	4b58      	ldr	r3, [pc, #352]	@ (8001268 <UpdateControllers+0x1d8>)
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110e:	4b57      	ldr	r3, [pc, #348]	@ (800126c <UpdateControllers+0x1dc>)
 8001110:	edd3 6a00 	vldr	s13, [r3]
 8001114:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800111c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001120:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Rotational control
    float rotational_increment = omega * LOOP_INTERVAL;
 8001124:	4b4f      	ldr	r3, [pc, #316]	@ (8001264 <UpdateControllers+0x1d4>)
 8001126:	edd3 7a00 	vldr	s15, [r3]
 800112a:	ed97 7a01 	vldr	s14, [r7, #4]
 800112e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001132:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    controller->rotational_error += rotational_increment - robot_rot_change();
 8001136:	f000 fa5f 	bl	80015f8 <robot_rot_change>
 800113a:	eeb0 7a40 	vmov.f32	s14, s0
 800113e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001142:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	edd3 7a01 	vldr	s15, [r3, #4]
 800114c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	edc3 7a01 	vstr	s15, [r3, #4]
    controller->rotational_error -= steering_adjustment;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	ed93 7a01 	vldr	s14, [r3, #4]
 800115c:	edd7 7a00 	vldr	s15, [r7]
 8001160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	edc3 7a01 	vstr	s15, [r3, #4]
    float rotational_diff = controller->rotational_error - controller->previous_rotational_error;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	edd3 7a03 	vldr	s15, [r3, #12]
 8001176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800117a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    controller->previous_rotational_error = controller->rotational_error;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	60da      	str	r2, [r3, #12]
    rotational_output = ROT_KP * controller->rotational_error + ROT_KD * rotational_diff;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	ed93 7a01 	vldr	s14, [r3, #4]
 800118c:	4b38      	ldr	r3, [pc, #224]	@ (8001270 <UpdateControllers+0x1e0>)
 800118e:	edd3 7a00 	vldr	s15, [r3]
 8001192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001196:	4b37      	ldr	r3, [pc, #220]	@ (8001274 <UpdateControllers+0x1e4>)
 8001198:	edd3 6a00 	vldr	s13, [r3]
 800119c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80011a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a8:	edc7 7a08 	vstr	s15, [r7, #32]

    // Combine forward and rotational outputs
    left_output = forward_output - rotational_output;
 80011ac:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80011b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80011b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    right_output = forward_output + rotational_output;
 80011bc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80011c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80011c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    float tangent_speed = omega * ROBOT_RADIUS * RADIANS_PER_DEGREE;
 80011cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001278 <UpdateControllers+0x1e8>)
 80011ce:	ed93 7a00 	vldr	s14, [r3]
 80011d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011da:	4b28      	ldr	r3, [pc, #160]	@ (800127c <UpdateControllers+0x1ec>)
 80011dc:	edd3 7a00 	vldr	s15, [r3]
 80011e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e4:	edc7 7a07 	vstr	s15, [r7, #28]

	float left_speed = velocity - tangent_speed;
 80011e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80011ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80011f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f4:	edc7 7a06 	vstr	s15, [r7, #24]
	float right_speed = velocity + tangent_speed;
 80011f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80011fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001204:	edc7 7a05 	vstr	s15, [r7, #20]

	if (controller->feedforward_enabled) {
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <UpdateControllers+0x1b2>
		// Feedforward calculation
		left_output += leftFeedForward(left_speed);
 8001212:	ed97 0a06 	vldr	s0, [r7, #24]
 8001216:	f000 f833 	bl	8001280 <leftFeedForward>
 800121a:	eeb0 7a40 	vmov.f32	s14, s0
 800121e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001222:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001226:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		right_output += rightFeedForward(right_speed);
 800122a:	ed97 0a05 	vldr	s0, [r7, #20]
 800122e:	f000 f88d 	bl	800134c <rightFeedForward>
 8001232:	eeb0 7a40 	vmov.f32	s14, s0
 8001236:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800123a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800123e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	}

    if (controller->controllers_enabled) {
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d007      	beq.n	800125c <UpdateControllers+0x1cc>
    	setMotorLPWM(left_output);
 800124c:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8001250:	f000 fe76 	bl	8001f40 <setMotorLPWM>
        setMotorRPWM(right_output);
 8001254:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8001258:	f000 feb8 	bl	8001fcc <setMotorRPWM>
    }


}
 800125c:	bf00      	nop
 800125e:	3740      	adds	r7, #64	@ 0x40
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	0800b2fc 	.word	0x0800b2fc
 8001268:	0800b300 	.word	0x0800b300
 800126c:	0800b304 	.word	0x0800b304
 8001270:	0800b308 	.word	0x0800b308
 8001274:	0800b30c 	.word	0x0800b30c
 8001278:	0800b2ec 	.word	0x0800b2ec
 800127c:	0800b2f4 	.word	0x0800b2f4

08001280 <leftFeedForward>:


float leftFeedForward(float speed) {
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	ed87 0a01 	vstr	s0, [r7, #4]
//  static float oldSpeed = speed;
  float leftFF = speed * SPEED_FF;
 800128a:	4b2b      	ldr	r3, [pc, #172]	@ (8001338 <leftFeedForward+0xb8>)
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	ed97 7a01 	vldr	s14, [r7, #4]
 8001294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001298:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 800129c:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a8:	dd09      	ble.n	80012be <leftFeedForward+0x3e>
    leftFF += BIAS_FF;
 80012aa:	4b24      	ldr	r3, [pc, #144]	@ (800133c <leftFeedForward+0xbc>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80012b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b8:	edc7 7a05 	vstr	s15, [r7, #20]
 80012bc:	e00f      	b.n	80012de <leftFeedForward+0x5e>
  } else if (speed < 0) {
 80012be:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ca:	d508      	bpl.n	80012de <leftFeedForward+0x5e>
    leftFF -= BIAS_FF;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <leftFeedForward+0xbc>)
 80012ce:	edd3 7a00 	vldr	s15, [r3]
 80012d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80012d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012da:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 80012de:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <leftFeedForward+0xc0>)
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80012e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012ec:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <leftFeedForward+0xc4>)
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f6:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 80012fa:	4a11      	ldr	r2, [pc, #68]	@ (8001340 <leftFeedForward+0xc0>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <leftFeedForward+0xc8>)
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	ed97 7a04 	vldr	s14, [r7, #16]
 800130a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130e:	edc7 7a03 	vstr	s15, [r7, #12]
  leftFF += accFF;
 8001312:	ed97 7a05 	vldr	s14, [r7, #20]
 8001316:	edd7 7a03 	vldr	s15, [r7, #12]
 800131a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131e:	edc7 7a05 	vstr	s15, [r7, #20]
  return leftFF;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	ee07 3a90 	vmov	s15, r3
}
 8001328:	eeb0 0a67 	vmov.f32	s0, s15
 800132c:	371c      	adds	r7, #28
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	0800b310 	.word	0x0800b310
 800133c:	0800b318 	.word	0x0800b318
 8001340:	200001f0 	.word	0x200001f0
 8001344:	0800b2f8 	.word	0x0800b2f8
 8001348:	0800b314 	.word	0x0800b314

0800134c <rightFeedForward>:

float rightFeedForward(float speed) {
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	ed87 0a01 	vstr	s0, [r7, #4]
  //static float oldSpeed = speed;
  float rightFF = speed * SPEED_FF;
 8001356:	4b2b      	ldr	r3, [pc, #172]	@ (8001404 <rightFeedForward+0xb8>)
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001364:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 8001368:	edd7 7a01 	vldr	s15, [r7, #4]
 800136c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	dd09      	ble.n	800138a <rightFeedForward+0x3e>
    rightFF += BIAS_FF;
 8001376:	4b24      	ldr	r3, [pc, #144]	@ (8001408 <rightFeedForward+0xbc>)
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001384:	edc7 7a05 	vstr	s15, [r7, #20]
 8001388:	e00f      	b.n	80013aa <rightFeedForward+0x5e>
  } else if (speed < 0) {
 800138a:	edd7 7a01 	vldr	s15, [r7, #4]
 800138e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d508      	bpl.n	80013aa <rightFeedForward+0x5e>
    rightFF -= BIAS_FF;
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <rightFeedForward+0xbc>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	ed97 7a05 	vldr	s14, [r7, #20]
 80013a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a6:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 80013aa:	4b18      	ldr	r3, [pc, #96]	@ (800140c <rightFeedForward+0xc0>)
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80013b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013b8:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <rightFeedForward+0xc4>)
 80013ba:	edd3 7a00 	vldr	s15, [r3]
 80013be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c2:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 80013c6:	4a11      	ldr	r2, [pc, #68]	@ (800140c <rightFeedForward+0xc0>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <rightFeedForward+0xc8>)
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80013d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013da:	edc7 7a03 	vstr	s15, [r7, #12]
  rightFF += accFF;
 80013de:	ed97 7a05 	vldr	s14, [r7, #20]
 80013e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ea:	edc7 7a05 	vstr	s15, [r7, #20]
  return rightFF;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	ee07 3a90 	vmov	s15, r3
}
 80013f4:	eeb0 0a67 	vmov.f32	s0, s15
 80013f8:	371c      	adds	r7, #28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	0800b310 	.word	0x0800b310
 8001408:	0800b318 	.word	0x0800b318
 800140c:	200001f0 	.word	0x200001f0
 8001410:	0800b2f8 	.word	0x0800b2f8
 8001414:	0800b314 	.word	0x0800b314

08001418 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <Delay_Init+0x38>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10e      	bne.n	8001446 <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <Delay_Init+0x38>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <Delay_Init+0x38>)
 800142e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001432:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001434:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <Delay_Init+0x3c>)
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <Delay_Init+0x3c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a05      	ldr	r2, [pc, #20]	@ (8001454 <Delay_Init+0x3c>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6013      	str	r3, [r2, #0]
    }
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000edf0 	.word	0xe000edf0
 8001454:	e0001000 	.word	0xe0001000

08001458 <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 800145c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	b21b      	sxth	r3, r3
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 8001474:	4b03      	ldr	r3, [pc, #12]	@ (8001484 <getLeftEncoderCounts+0x14>)
 8001476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001478:	b21b      	sxth	r3, r3
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	40010000 	.word	0x40010000

08001488 <resetEncodersinSystick>:
	previous_left_count = 0;
	previous_right_count = 0;

}

void resetEncodersinSystick() {
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <resetEncodersinSystick+0x1c>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 8001492:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	40010000 	.word	0x40010000

080014a8 <update_Encoder_Data>:

void update_Encoder_Data(){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
	int16_t left_count = getLeftEncoderCounts();
 80014ae:	f7ff ffdf 	bl	8001470 <getLeftEncoderCounts>
 80014b2:	4603      	mov	r3, r0
 80014b4:	81fb      	strh	r3, [r7, #14]
	int16_t right_count = getRightEncoderCounts();
 80014b6:	f7ff ffcf 	bl	8001458 <getRightEncoderCounts>
 80014ba:	4603      	mov	r3, r0
 80014bc:	81bb      	strh	r3, [r7, #12]

	left_delta = left_count - previous_left_count;
 80014be:	89fa      	ldrh	r2, [r7, #14]
 80014c0:	4b3b      	ldr	r3, [pc, #236]	@ (80015b0 <update_Encoder_Data+0x108>)
 80014c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	4b39      	ldr	r3, [pc, #228]	@ (80015b4 <update_Encoder_Data+0x10c>)
 80014d0:	801a      	strh	r2, [r3, #0]
	previous_left_count = left_count;
 80014d2:	4a37      	ldr	r2, [pc, #220]	@ (80015b0 <update_Encoder_Data+0x108>)
 80014d4:	89fb      	ldrh	r3, [r7, #14]
 80014d6:	8013      	strh	r3, [r2, #0]

	right_delta = right_count - previous_right_count;
 80014d8:	89ba      	ldrh	r2, [r7, #12]
 80014da:	4b37      	ldr	r3, [pc, #220]	@ (80015b8 <update_Encoder_Data+0x110>)
 80014dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	4b34      	ldr	r3, [pc, #208]	@ (80015bc <update_Encoder_Data+0x114>)
 80014ea:	801a      	strh	r2, [r3, #0]
	previous_right_count = right_count;
 80014ec:	4a32      	ldr	r2, [pc, #200]	@ (80015b8 <update_Encoder_Data+0x110>)
 80014ee:	89bb      	ldrh	r3, [r7, #12]
 80014f0:	8013      	strh	r3, [r2, #0]

	float left_change = left_delta * MM_PER_COUNT_LEFT;
 80014f2:	4b30      	ldr	r3, [pc, #192]	@ (80015b4 <update_Encoder_Data+0x10c>)
 80014f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff f843 	bl	8000584 <__aeabi_i2d>
 80014fe:	a32a      	add	r3, pc, #168	@ (adr r3, 80015a8 <update_Encoder_Data+0x100>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7ff f8a8 	bl	8000658 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fb7a 	bl	8000c08 <__aeabi_d2f>
 8001514:	4603      	mov	r3, r0
 8001516:	60bb      	str	r3, [r7, #8]
	float right_change = right_delta * MM_PER_COUNT_RIGHT;
 8001518:	4b28      	ldr	r3, [pc, #160]	@ (80015bc <update_Encoder_Data+0x114>)
 800151a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f830 	bl	8000584 <__aeabi_i2d>
 8001524:	a320      	add	r3, pc, #128	@ (adr r3, 80015a8 <update_Encoder_Data+0x100>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7ff f895 	bl	8000658 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff fb67 	bl	8000c08 <__aeabi_d2f>
 800153a:	4603      	mov	r3, r0
 800153c:	607b      	str	r3, [r7, #4]

	m_fwd_change = 0.5 * (right_change + left_change);
 800153e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001542:	edd7 7a02 	vldr	s15, [r7, #8]
 8001546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800154e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001552:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <update_Encoder_Data+0x118>)
 8001554:	edc3 7a00 	vstr	s15, [r3]
	m_robot_distance += m_fwd_change;
 8001558:	4b1a      	ldr	r3, [pc, #104]	@ (80015c4 <update_Encoder_Data+0x11c>)
 800155a:	ed93 7a00 	vldr	s14, [r3]
 800155e:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <update_Encoder_Data+0x118>)
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001568:	4b16      	ldr	r3, [pc, #88]	@ (80015c4 <update_Encoder_Data+0x11c>)
 800156a:	edc3 7a00 	vstr	s15, [r3]
	m_rot_change = (right_change - left_change) * DEG_PER_MM_DIFFERENCE;
 800156e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001572:	edd7 7a02 	vldr	s15, [r7, #8]
 8001576:	ee37 7a67 	vsub.f32	s14, s14, s15
 800157a:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <update_Encoder_Data+0x120>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <update_Encoder_Data+0x124>)
 8001586:	edc3 7a00 	vstr	s15, [r3]
	m_robot_angle += m_rot_change;
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <update_Encoder_Data+0x128>)
 800158c:	ed93 7a00 	vldr	s14, [r3]
 8001590:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <update_Encoder_Data+0x124>)
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159a:	4b0d      	ldr	r3, [pc, #52]	@ (80015d0 <update_Encoder_Data+0x128>)
 800159c:	edc3 7a00 	vstr	s15, [r3]


}
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	58e4ab66 	.word	0x58e4ab66
 80015ac:	3fb0cd2e 	.word	0x3fb0cd2e
 80015b0:	20000200 	.word	0x20000200
 80015b4:	200001fc 	.word	0x200001fc
 80015b8:	20000202 	.word	0x20000202
 80015bc:	200001fe 	.word	0x200001fe
 80015c0:	20000204 	.word	0x20000204
 80015c4:	200001f4 	.word	0x200001f4
 80015c8:	0800b2f0 	.word	0x0800b2f0
 80015cc:	20000208 	.word	0x20000208
 80015d0:	200001f8 	.word	0x200001f8

080015d4 <robot_fwd_change>:
	float omega;
	omega = LOOP_FREQUENCY * m_rot_change;
	return omega;
}

float robot_fwd_change() {
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
	float distance;
	distance = m_fwd_change;
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <robot_fwd_change+0x20>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	607b      	str	r3, [r7, #4]
	return distance;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	ee07 3a90 	vmov	s15, r3
}
 80015e6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	20000204 	.word	0x20000204

080015f8 <robot_rot_change>:

float robot_rot_change() {
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
	float distance;
	distance = m_rot_change;
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <robot_rot_change+0x20>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	607b      	str	r3, [r7, #4]
	return distance;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	ee07 3a90 	vmov	s15, r3
}
 800160a:	eeb0 0a67 	vmov.f32	s0, s15
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	20000208 	.word	0x20000208

0800161c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001622:	f002 f85f 	bl	80036e4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001626:	f000 f895 	bl	8001754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162a:	f000 fb77 	bl	8001d1c <MX_GPIO_Init>
  MX_DMA_Init();
 800162e:	f000 fb55 	bl	8001cdc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001632:	f000 fad5 	bl	8001be0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001636:	f000 f9ad 	bl	8001994 <MX_TIM1_Init>
  MX_TIM2_Init();
 800163a:	f000 fa03 	bl	8001a44 <MX_TIM2_Init>
  MX_I2C2_Init();
 800163e:	f000 f97b 	bl	8001938 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8001642:	f000 faf7 	bl	8001c34 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001646:	f000 fb1f 	bl	8001c88 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800164a:	f000 f8f5 	bl	8001838 <MX_ADC1_Init>
  MX_I2C1_Init();
 800164e:	f000 f945 	bl	80018dc <MX_I2C1_Init>
  MX_TIM3_Init();
 8001652:	f000 fa4b 	bl	8001aec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001656:	213c      	movs	r1, #60	@ 0x3c
 8001658:	4831      	ldr	r0, [pc, #196]	@ (8001720 <main+0x104>)
 800165a:	f005 fc4f 	bl	8006efc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800165e:	213c      	movs	r1, #60	@ 0x3c
 8001660:	4830      	ldr	r0, [pc, #192]	@ (8001724 <main+0x108>)
 8001662:	f005 fc4b 	bl	8006efc <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001666:	2100      	movs	r1, #0
 8001668:	482f      	ldr	r0, [pc, #188]	@ (8001728 <main+0x10c>)
 800166a:	f005 fad9 	bl	8006c20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800166e:	2104      	movs	r1, #4
 8001670:	482d      	ldr	r0, [pc, #180]	@ (8001728 <main+0x10c>)
 8001672:	f005 fad5 	bl	8006c20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001676:	2108      	movs	r1, #8
 8001678:	482b      	ldr	r0, [pc, #172]	@ (8001728 <main+0x10c>)
 800167a:	f005 fad1 	bl	8006c20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800167e:	210c      	movs	r1, #12
 8001680:	4829      	ldr	r0, [pc, #164]	@ (8001728 <main+0x10c>)
 8001682:	f005 facd 	bl	8006c20 <HAL_TIM_PWM_Start>

  SSD1306_Init();
 8001686:	f001 fdc1 	bl	800320c <SSD1306_Init>
    SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 800168a:	2301      	movs	r3, #1
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	2340      	movs	r3, #64	@ 0x40
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2380      	movs	r3, #128	@ 0x80
 8001694:	4a25      	ldr	r2, [pc, #148]	@ (800172c <main+0x110>)
 8001696:	2100      	movs	r1, #0
 8001698:	2000      	movs	r0, #0
 800169a:	f001 ff21 	bl	80034e0 <SSD1306_DrawBitmap>
    SSD1306_UpdateScreen(); // update screen
 800169e:	f001 fe79 	bl	8003394 <SSD1306_UpdateScreen>




	  Buzzer_UniquePattern();
 80016a2:	f7ff fcc1 	bl	8001028 <Buzzer_UniquePattern>

  /*---------------------Delay--------------------------------*/
  Delay_Init();
 80016a6:	f7ff feb7 	bl	8001418 <Delay_Init>
  /*-------------------------------------------------------------------*/

  //AnalogMux_Init();

  UART_Init(&huart3);
 80016aa:	4821      	ldr	r0, [pc, #132]	@ (8001730 <main+0x114>)
 80016ac:	f001 fd78 	bl	80031a0 <UART_Init>

  /*---------------------Servo--------------------------------*/
  Servo_Init(50);  // 50Hz for standard servos
 80016b0:	2032      	movs	r0, #50	@ 0x32
 80016b2:	f000 fef9 	bl	80024a8 <Servo_Init>

  //Examples
  // Register servos (do this once)
  int claw = Servo_Register(11, "claw", 0, 180);
 80016b6:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8001734 <main+0x118>
 80016ba:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8001738 <main+0x11c>
 80016be:	491f      	ldr	r1, [pc, #124]	@ (800173c <main+0x120>)
 80016c0:	200b      	movs	r0, #11
 80016c2:	f000 ff15 	bl	80024f0 <Servo_Register>
 80016c6:	60f8      	str	r0, [r7, #12]
  int arm = Servo_Register(13, "arm", 0, 180);
 80016c8:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8001734 <main+0x118>
 80016cc:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8001738 <main+0x11c>
 80016d0:	491b      	ldr	r1, [pc, #108]	@ (8001740 <main+0x124>)
 80016d2:	200d      	movs	r0, #13
 80016d4:	f000 ff0c 	bl	80024f0 <Servo_Register>
 80016d8:	60b8      	str	r0, [r7, #8]
  int base = Servo_Register(15, "base", 0, 180);
 80016da:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8001734 <main+0x118>
 80016de:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8001738 <main+0x11c>
 80016e2:	4918      	ldr	r1, [pc, #96]	@ (8001744 <main+0x128>)
 80016e4:	200f      	movs	r0, #15
 80016e6:	f000 ff03 	bl	80024f0 <Servo_Register>
 80016ea:	6078      	str	r0, [r7, #4]

  // Later in your code, use the servos by ID
  Servo_SetAngle(claw, 35);   // Set claw to 45 degrees
 80016ec:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8001748 <main+0x12c>
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f000 fff1 	bl	80026d8 <Servo_SetAngle>
  Servo_SetAngle(arm,100);    // Set arm to 90 degrees
 80016f6:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800174c <main+0x130>
 80016fa:	68b8      	ldr	r0, [r7, #8]
 80016fc:	f000 ffec 	bl	80026d8 <Servo_SetAngle>

  // Or use them by name
  Servo_SetAngleByName("base", 90);  // Set base to 120 degrees
 8001700:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001750 <main+0x134>
 8001704:	480f      	ldr	r0, [pc, #60]	@ (8001744 <main+0x128>)
 8001706:	f001 f85b 	bl	80027c0 <Servo_SetAngleByName>

  // Reset all servos to center position
  //Servo_ResetAll();

  Buzzer_Toggle(100);
 800170a:	2064      	movs	r0, #100	@ 0x64
 800170c:	f7ff fc7a 	bl	8001004 <Buzzer_Toggle>
  //HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Enable UART interrupt

 // HAL_Delay(2000);
  //RAYKHA_Calibrate(&raykha_calibration, RAYKHA_LINE_WHITE);

  Buzzer_Toggle(100);
 8001710:	2064      	movs	r0, #100	@ 0x64
 8001712:	f7ff fc77 	bl	8001004 <Buzzer_Toggle>



  EnableSysTickFunction();
 8001716:	f001 fcfd 	bl	8003114 <EnableSysTickFunction>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800171a:	bf00      	nop
 800171c:	e7fd      	b.n	800171a <main+0xfe>
 800171e:	bf00      	nop
 8001720:	200002fc 	.word	0x200002fc
 8001724:	20000344 	.word	0x20000344
 8001728:	2000038c 	.word	0x2000038c
 800172c:	0800b334 	.word	0x0800b334
 8001730:	2000041c 	.word	0x2000041c
 8001734:	43340000 	.word	0x43340000
 8001738:	00000000 	.word	0x00000000
 800173c:	0800b2d0 	.word	0x0800b2d0
 8001740:	0800b2d8 	.word	0x0800b2d8
 8001744:	0800b2dc 	.word	0x0800b2dc
 8001748:	420c0000 	.word	0x420c0000
 800174c:	42c80000 	.word	0x42c80000
 8001750:	42b40000 	.word	0x42b40000

08001754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b094      	sub	sp, #80	@ 0x50
 8001758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	2234      	movs	r2, #52	@ 0x34
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f007 fcc7 	bl	80090f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	4b2c      	ldr	r3, [pc, #176]	@ (8001830 <SystemClock_Config+0xdc>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	4a2b      	ldr	r2, [pc, #172]	@ (8001830 <SystemClock_Config+0xdc>)
 8001782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001786:	6413      	str	r3, [r2, #64]	@ 0x40
 8001788:	4b29      	ldr	r3, [pc, #164]	@ (8001830 <SystemClock_Config+0xdc>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001794:	2300      	movs	r3, #0
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <SystemClock_Config+0xe0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a25      	ldr	r2, [pc, #148]	@ (8001834 <SystemClock_Config+0xe0>)
 800179e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <SystemClock_Config+0xe0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b0:	2302      	movs	r3, #2
 80017b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b4:	2301      	movs	r3, #1
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b8:	2310      	movs	r3, #16
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017bc:	2302      	movs	r3, #2
 80017be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017c4:	2308      	movs	r3, #8
 80017c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80017c8:	23b4      	movs	r3, #180	@ 0xb4
 80017ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017cc:	2302      	movs	r3, #2
 80017ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 ff31 	bl	8006644 <HAL_RCC_OscConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017e8:	f000 fb3e 	bl	8001e68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80017ec:	f004 fb90 	bl	8005f10 <HAL_PWREx_EnableOverDrive>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017f6:	f000 fb37 	bl	8001e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fa:	230f      	movs	r3, #15
 80017fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fe:	2302      	movs	r3, #2
 8001800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001806:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800180a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800180c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001810:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	2105      	movs	r1, #5
 8001818:	4618      	mov	r0, r3
 800181a:	f004 fbc9 	bl	8005fb0 <HAL_RCC_ClockConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001824:	f000 fb20 	bl	8001e68 <Error_Handler>
  }
}
 8001828:	bf00      	nop
 800182a:	3750      	adds	r7, #80	@ 0x50
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40007000 	.word	0x40007000

08001838 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800183e:	463b      	mov	r3, r7
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800184a:	4b21      	ldr	r3, [pc, #132]	@ (80018d0 <MX_ADC1_Init+0x98>)
 800184c:	4a21      	ldr	r2, [pc, #132]	@ (80018d4 <MX_ADC1_Init+0x9c>)
 800184e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001850:	4b1f      	ldr	r3, [pc, #124]	@ (80018d0 <MX_ADC1_Init+0x98>)
 8001852:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001856:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001858:	4b1d      	ldr	r3, [pc, #116]	@ (80018d0 <MX_ADC1_Init+0x98>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800185e:	4b1c      	ldr	r3, [pc, #112]	@ (80018d0 <MX_ADC1_Init+0x98>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001864:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <MX_ADC1_Init+0x98>)
 8001866:	2201      	movs	r2, #1
 8001868:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800186a:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <MX_ADC1_Init+0x98>)
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001872:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <MX_ADC1_Init+0x98>)
 8001874:	2200      	movs	r2, #0
 8001876:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001878:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <MX_ADC1_Init+0x98>)
 800187a:	4a17      	ldr	r2, [pc, #92]	@ (80018d8 <MX_ADC1_Init+0xa0>)
 800187c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800187e:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <MX_ADC1_Init+0x98>)
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <MX_ADC1_Init+0x98>)
 8001886:	2201      	movs	r2, #1
 8001888:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <MX_ADC1_Init+0x98>)
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001892:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <MX_ADC1_Init+0x98>)
 8001894:	2201      	movs	r2, #1
 8001896:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001898:	480d      	ldr	r0, [pc, #52]	@ (80018d0 <MX_ADC1_Init+0x98>)
 800189a:	f001 ffb9 	bl	8003810 <HAL_ADC_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018a4:	f000 fae0 	bl	8001e68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80018a8:	230a      	movs	r3, #10
 80018aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018ac:	2301      	movs	r3, #1
 80018ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b4:	463b      	mov	r3, r7
 80018b6:	4619      	mov	r1, r3
 80018b8:	4805      	ldr	r0, [pc, #20]	@ (80018d0 <MX_ADC1_Init+0x98>)
 80018ba:	f001 ffed 	bl	8003898 <HAL_ADC_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018c4:	f000 fad0 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	2000020c 	.word	0x2000020c
 80018d4:	40012000 	.word	0x40012000
 80018d8:	0f000001 	.word	0x0f000001

080018dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <MX_I2C1_Init+0x50>)
 80018e2:	4a13      	ldr	r2, [pc, #76]	@ (8001930 <MX_I2C1_Init+0x54>)
 80018e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018e6:	4b11      	ldr	r3, [pc, #68]	@ (800192c <MX_I2C1_Init+0x50>)
 80018e8:	4a12      	ldr	r2, [pc, #72]	@ (8001934 <MX_I2C1_Init+0x58>)
 80018ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <MX_I2C1_Init+0x50>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	@ (800192c <MX_I2C1_Init+0x50>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <MX_I2C1_Init+0x50>)
 80018fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001900:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <MX_I2C1_Init+0x50>)
 8001902:	2200      	movs	r2, #0
 8001904:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <MX_I2C1_Init+0x50>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800190c:	4b07      	ldr	r3, [pc, #28]	@ (800192c <MX_I2C1_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <MX_I2C1_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	@ (800192c <MX_I2C1_Init+0x50>)
 800191a:	f003 f827 	bl	800496c <HAL_I2C_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001924:	f000 faa0 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000254 	.word	0x20000254
 8001930:	40005400 	.word	0x40005400
 8001934:	00061a80 	.word	0x00061a80

08001938 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <MX_I2C2_Init+0x50>)
 800193e:	4a13      	ldr	r2, [pc, #76]	@ (800198c <MX_I2C2_Init+0x54>)
 8001940:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001942:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <MX_I2C2_Init+0x50>)
 8001944:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <MX_I2C2_Init+0x58>)
 8001946:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <MX_I2C2_Init+0x50>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <MX_I2C2_Init+0x50>)
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001954:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <MX_I2C2_Init+0x50>)
 8001956:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800195a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800195c:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <MX_I2C2_Init+0x50>)
 800195e:	2200      	movs	r2, #0
 8001960:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <MX_I2C2_Init+0x50>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001968:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <MX_I2C2_Init+0x50>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <MX_I2C2_Init+0x50>)
 8001970:	2200      	movs	r2, #0
 8001972:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001974:	4804      	ldr	r0, [pc, #16]	@ (8001988 <MX_I2C2_Init+0x50>)
 8001976:	f002 fff9 	bl	800496c <HAL_I2C_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001980:	f000 fa72 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200002a8 	.word	0x200002a8
 800198c:	40005800 	.word	0x40005800
 8001990:	000186a0 	.word	0x000186a0

08001994 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	@ 0x30
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	2224      	movs	r2, #36	@ 0x24
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f007 fba7 	bl	80090f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019b0:	4b22      	ldr	r3, [pc, #136]	@ (8001a3c <MX_TIM1_Init+0xa8>)
 80019b2:	4a23      	ldr	r2, [pc, #140]	@ (8001a40 <MX_TIM1_Init+0xac>)
 80019b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019b6:	4b21      	ldr	r3, [pc, #132]	@ (8001a3c <MX_TIM1_Init+0xa8>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <MX_TIM1_Init+0xa8>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019c2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <MX_TIM1_Init+0xa8>)
 80019c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ca:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <MX_TIM1_Init+0xa8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <MX_TIM1_Init+0xa8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d6:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <MX_TIM1_Init+0xa8>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019dc:	2303      	movs	r3, #3
 80019de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019e4:	2301      	movs	r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019f4:	2301      	movs	r3, #1
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	4619      	mov	r1, r3
 8001a06:	480d      	ldr	r0, [pc, #52]	@ (8001a3c <MX_TIM1_Init+0xa8>)
 8001a08:	f005 f9d2 	bl	8006db0 <HAL_TIM_Encoder_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001a12:	f000 fa29 	bl	8001e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	4619      	mov	r1, r3
 8001a22:	4806      	ldr	r0, [pc, #24]	@ (8001a3c <MX_TIM1_Init+0xa8>)
 8001a24:	f005 fe3c 	bl	80076a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001a2e:	f000 fa1b 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	3730      	adds	r7, #48	@ 0x30
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200002fc 	.word	0x200002fc
 8001a40:	40010000 	.word	0x40010000

08001a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	@ 0x30
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	2224      	movs	r2, #36	@ 0x24
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f007 fb4f 	bl	80090f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a60:	4b21      	ldr	r3, [pc, #132]	@ (8001ae8 <MX_TIM2_Init+0xa4>)
 8001a62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <MX_TIM2_Init+0xa4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae8 <MX_TIM2_Init+0xa4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001a74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <MX_TIM2_Init+0xa4>)
 8001a76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae8 <MX_TIM2_Init+0xa4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a82:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <MX_TIM2_Init+0xa4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a90:	2301      	movs	r3, #1
 8001a92:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480d      	ldr	r0, [pc, #52]	@ (8001ae8 <MX_TIM2_Init+0xa4>)
 8001ab4:	f005 f97c 	bl	8006db0 <HAL_TIM_Encoder_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001abe:	f000 f9d3 	bl	8001e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	4806      	ldr	r0, [pc, #24]	@ (8001ae8 <MX_TIM2_Init+0xa4>)
 8001ad0:	f005 fde6 	bl	80076a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ada:	f000 f9c5 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	3730      	adds	r7, #48	@ 0x30
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000344 	.word	0x20000344

08001aec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	@ 0x28
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af2:	f107 0320 	add.w	r3, r7, #32
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
 8001b08:	611a      	str	r2, [r3, #16]
 8001b0a:	615a      	str	r2, [r3, #20]
 8001b0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b0e:	4b32      	ldr	r3, [pc, #200]	@ (8001bd8 <MX_TIM3_Init+0xec>)
 8001b10:	4a32      	ldr	r2, [pc, #200]	@ (8001bdc <MX_TIM3_Init+0xf0>)
 8001b12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b14:	4b30      	ldr	r3, [pc, #192]	@ (8001bd8 <MX_TIM3_Init+0xec>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd8 <MX_TIM3_Init+0xec>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8001b20:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd8 <MX_TIM3_Init+0xec>)
 8001b22:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001b26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b28:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd8 <MX_TIM3_Init+0xec>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd8 <MX_TIM3_Init+0xec>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b34:	4828      	ldr	r0, [pc, #160]	@ (8001bd8 <MX_TIM3_Init+0xec>)
 8001b36:	f005 f823 	bl	8006b80 <HAL_TIM_PWM_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001b40:	f000 f992 	bl	8001e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b44:	2300      	movs	r3, #0
 8001b46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b4c:	f107 0320 	add.w	r3, r7, #32
 8001b50:	4619      	mov	r1, r3
 8001b52:	4821      	ldr	r0, [pc, #132]	@ (8001bd8 <MX_TIM3_Init+0xec>)
 8001b54:	f005 fda4 	bl	80076a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001b5e:	f000 f983 	bl	8001e68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b62:	2360      	movs	r3, #96	@ 0x60
 8001b64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	2200      	movs	r2, #0
 8001b76:	4619      	mov	r1, r3
 8001b78:	4817      	ldr	r0, [pc, #92]	@ (8001bd8 <MX_TIM3_Init+0xec>)
 8001b7a:	f005 fa4d 	bl	8007018 <HAL_TIM_PWM_ConfigChannel>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001b84:	f000 f970 	bl	8001e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4812      	ldr	r0, [pc, #72]	@ (8001bd8 <MX_TIM3_Init+0xec>)
 8001b90:	f005 fa42 	bl	8007018 <HAL_TIM_PWM_ConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b9a:	f000 f965 	bl	8001e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2208      	movs	r2, #8
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <MX_TIM3_Init+0xec>)
 8001ba6:	f005 fa37 	bl	8007018 <HAL_TIM_PWM_ConfigChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001bb0:	f000 f95a 	bl	8001e68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4807      	ldr	r0, [pc, #28]	@ (8001bd8 <MX_TIM3_Init+0xec>)
 8001bbc:	f005 fa2c 	bl	8007018 <HAL_TIM_PWM_ConfigChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001bc6:	f000 f94f 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bca:	4803      	ldr	r0, [pc, #12]	@ (8001bd8 <MX_TIM3_Init+0xec>)
 8001bcc:	f000 fffc 	bl	8002bc8 <HAL_TIM_MspPostInit>

}
 8001bd0:	bf00      	nop
 8001bd2:	3728      	adds	r7, #40	@ 0x28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	2000038c 	.word	0x2000038c
 8001bdc:	40000400 	.word	0x40000400

08001be0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001be4:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	@ (8001c30 <MX_USART2_UART_Init+0x50>)
 8001be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bea:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001bec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c04:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c06:	220c      	movs	r2, #12
 8001c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c16:	4805      	ldr	r0, [pc, #20]	@ (8001c2c <MX_USART2_UART_Init+0x4c>)
 8001c18:	f005 fdbe 	bl	8007798 <HAL_UART_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c22:	f000 f921 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200003d4 	.word	0x200003d4
 8001c30:	40004400 	.word	0x40004400

08001c34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c38:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <MX_USART3_UART_Init+0x4c>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	@ (8001c84 <MX_USART3_UART_Init+0x50>)
 8001c3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001c3e:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <MX_USART3_UART_Init+0x4c>)
 8001c40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <MX_USART3_UART_Init+0x4c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <MX_USART3_UART_Init+0x4c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <MX_USART3_UART_Init+0x4c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <MX_USART3_UART_Init+0x4c>)
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <MX_USART3_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <MX_USART3_UART_Init+0x4c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c6a:	4805      	ldr	r0, [pc, #20]	@ (8001c80 <MX_USART3_UART_Init+0x4c>)
 8001c6c:	f005 fd94 	bl	8007798 <HAL_UART_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c76:	f000 f8f7 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000041c 	.word	0x2000041c
 8001c84:	40004800 	.word	0x40004800

08001c88 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	@ (8001cd8 <MX_USART6_UART_Init+0x50>)
 8001c90:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001c92:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001c94:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c98:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001cac:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001cae:	220c      	movs	r2, #12
 8001cb0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cb2:	4b08      	ldr	r3, [pc, #32]	@ (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001cbe:	4805      	ldr	r0, [pc, #20]	@ (8001cd4 <MX_USART6_UART_Init+0x4c>)
 8001cc0:	f005 fd6a 	bl	8007798 <HAL_UART_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001cca:	f000 f8cd 	bl	8001e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000464 	.word	0x20000464
 8001cd8:	40011400 	.word	0x40011400

08001cdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <MX_DMA_Init+0x3c>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a0b      	ldr	r2, [pc, #44]	@ (8001d18 <MX_DMA_Init+0x3c>)
 8001cec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <MX_DMA_Init+0x3c>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	2039      	movs	r0, #57	@ 0x39
 8001d04:	f002 f8d1 	bl	8003eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001d08:	2039      	movs	r0, #57	@ 0x39
 8001d0a:	f002 f8ea 	bl	8003ee2 <HAL_NVIC_EnableIRQ>

}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800

08001d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	@ 0x28
 8001d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
 8001d30:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b48      	ldr	r3, [pc, #288]	@ (8001e58 <MX_GPIO_Init+0x13c>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a47      	ldr	r2, [pc, #284]	@ (8001e58 <MX_GPIO_Init+0x13c>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b45      	ldr	r3, [pc, #276]	@ (8001e58 <MX_GPIO_Init+0x13c>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b41      	ldr	r3, [pc, #260]	@ (8001e58 <MX_GPIO_Init+0x13c>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	4a40      	ldr	r2, [pc, #256]	@ (8001e58 <MX_GPIO_Init+0x13c>)
 8001d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e58 <MX_GPIO_Init+0x13c>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e58 <MX_GPIO_Init+0x13c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a39      	ldr	r2, [pc, #228]	@ (8001e58 <MX_GPIO_Init+0x13c>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b37      	ldr	r3, [pc, #220]	@ (8001e58 <MX_GPIO_Init+0x13c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	4b33      	ldr	r3, [pc, #204]	@ (8001e58 <MX_GPIO_Init+0x13c>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	4a32      	ldr	r2, [pc, #200]	@ (8001e58 <MX_GPIO_Init+0x13c>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d96:	4b30      	ldr	r3, [pc, #192]	@ (8001e58 <MX_GPIO_Init+0x13c>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIRPUMP_Pin|WATERPUMP_Pin, GPIO_PIN_SET);
 8001da2:	2201      	movs	r2, #1
 8001da4:	2106      	movs	r1, #6
 8001da6:	482d      	ldr	r0, [pc, #180]	@ (8001e5c <MX_GPIO_Init+0x140>)
 8001da8:	f002 fdc6 	bl	8004938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2120      	movs	r1, #32
 8001db0:	482b      	ldr	r0, [pc, #172]	@ (8001e60 <MX_GPIO_Init+0x144>)
 8001db2:	f002 fdc1 	bl	8004938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001dbc:	4829      	ldr	r0, [pc, #164]	@ (8001e64 <MX_GPIO_Init+0x148>)
 8001dbe:	f002 fdbb 	bl	8004938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dc8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4820      	ldr	r0, [pc, #128]	@ (8001e5c <MX_GPIO_Init+0x140>)
 8001dda:	f002 fc19 	bl	8004610 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIRPUMP_Pin WATERPUMP_Pin */
  GPIO_InitStruct.Pin = AIRPUMP_Pin|WATERPUMP_Pin;
 8001dde:	2306      	movs	r3, #6
 8001de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de2:	2301      	movs	r3, #1
 8001de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de6:	2301      	movs	r3, #1
 8001de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	4819      	ldr	r0, [pc, #100]	@ (8001e5c <MX_GPIO_Init+0x140>)
 8001df6:	f002 fc0b 	bl	8004610 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001dfa:	2320      	movs	r3, #32
 8001dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4813      	ldr	r0, [pc, #76]	@ (8001e60 <MX_GPIO_Init+0x144>)
 8001e12:	f002 fbfd 	bl	8004610 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 8001e16:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480d      	ldr	r0, [pc, #52]	@ (8001e64 <MX_GPIO_Init+0x148>)
 8001e30:	f002 fbee 	bl	8004610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	4804      	ldr	r0, [pc, #16]	@ (8001e5c <MX_GPIO_Init+0x140>)
 8001e4a:	f002 fbe1 	bl	8004610 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001e4e:	bf00      	nop
 8001e50:	3728      	adds	r7, #40	@ 0x28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020800 	.word	0x40020800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40020400 	.word	0x40020400

08001e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e6c:	b672      	cpsid	i
}
 8001e6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <Error_Handler+0x8>

08001e74 <Motion_Velocity>:

float Motion_Position(Motion *motion) {
    return Profile_GetPosition(&(motion->forward));
}

float Motion_Velocity(Motion *motion) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->forward));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3324      	adds	r3, #36	@ 0x24
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fa3b 	bl	80022fc <Profile_GetSpeed>
 8001e86:	eef0 7a40 	vmov.f32	s15, s0
}
 8001e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <Motion_Omega>:

float Motion_Angle(Motion *motion) {
    return Profile_GetPosition(&(motion->rotation));
}

float Motion_Omega(Motion *motion) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->rotation));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3348      	adds	r3, #72	@ 0x48
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 fa2b 	bl	80022fc <Profile_GetSpeed>
 8001ea6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <Motion_Update>:

void Motion_Turn_(Motion *motion, float angle, float omega, float final_speed, float alpha){
	Profile_Move(&(motion->rotation), angle, omega, final_speed, alpha);
}

void Motion_Update(Motion *motion) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
    Profile_Update(&(motion->forward));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3324      	adds	r3, #36	@ 0x24
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 fa2b 	bl	800231c <Profile_Update>
    Profile_Update(&(motion->rotation));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3348      	adds	r3, #72	@ 0x48
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fa26 	bl	800231c <Profile_Update>
    //UART_Transmit_Float(&huart6, ">V", motion->forward.speed, 2);
    //UART_Transmit_Float(&huart6, ">W", robot_speed(), 2);
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm > PWM_MAX)
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7fe fb60 	bl	80005a8 <__aeabi_f2d>
 8001ee8:	a313      	add	r3, pc, #76	@ (adr r3, 8001f38 <limitPWM+0x60>)
 8001eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eee:	f7fe fe43 	bl	8000b78 <__aeabi_dcmpgt>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <limitPWM+0x24>
		return PWM_MAX;
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <limitPWM+0x58>)
 8001efa:	e00d      	b.n	8001f18 <limitPWM+0x40>
	else if (pwm < -PWM_MAX)
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7fe fb53 	bl	80005a8 <__aeabi_f2d>
 8001f02:	a309      	add	r3, pc, #36	@ (adr r3, 8001f28 <limitPWM+0x50>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	f7fe fe18 	bl	8000b3c <__aeabi_dcmplt>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <limitPWM+0x3e>
		return -PWM_MAX;
 8001f12:	4b08      	ldr	r3, [pc, #32]	@ (8001f34 <limitPWM+0x5c>)
 8001f14:	e000      	b.n	8001f18 <limitPWM+0x40>
	return pwm;
 8001f16:	687b      	ldr	r3, [r7, #4]
}
 8001f18:	ee07 3a90 	vmov	s15, r3
 8001f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	66666666 	.word	0x66666666
 8001f2c:	bfee6666 	.word	0xbfee6666
 8001f30:	3f733333 	.word	0x3f733333
 8001f34:	bf733333 	.word	0xbf733333
 8001f38:	66666666 	.word	0x66666666
 8001f3c:	3fee6666 	.word	0x3fee6666

08001f40 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8001f4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f56:	db13      	blt.n	8001f80 <setMotorLPWM+0x40>
		TIM3->CCR4 = 0;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc4 <setMotorLPWM+0x84>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001f5e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f62:	f7ff ffb9 	bl	8001ed8 <limitPWM>
 8001f66:	eef0 7a40 	vmov.f32	s15, s0
 8001f6a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001fc8 <setMotorLPWM+0x88>
 8001f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f72:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <setMotorLPWM+0x84>)
 8001f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f78:	ee17 2a90 	vmov	r2, s15
 8001f7c:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else if (pwm < 0) {
		TIM3->CCR3 = 0;
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8001f7e:	e01c      	b.n	8001fba <setMotorLPWM+0x7a>
	else if (pwm < 0) {
 8001f80:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8c:	d400      	bmi.n	8001f90 <setMotorLPWM+0x50>
}
 8001f8e:	e014      	b.n	8001fba <setMotorLPWM+0x7a>
		TIM3->CCR3 = 0;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <setMotorLPWM+0x84>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001f96:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f9a:	f7ff ff9d 	bl	8001ed8 <limitPWM>
 8001f9e:	eef0 7a40 	vmov.f32	s15, s0
 8001fa2:	eef1 7a67 	vneg.f32	s15, s15
 8001fa6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001fc8 <setMotorLPWM+0x88>
 8001faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fae:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <setMotorLPWM+0x84>)
 8001fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb4:	ee17 2a90 	vmov	r2, s15
 8001fb8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	45e0f800 	.word	0x45e0f800

08001fcc <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8001fd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe2:	db13      	blt.n	800200c <setMotorRPWM+0x40>
		TIM3->CCR2 = 0;
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8002050 <setMotorRPWM+0x84>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR1 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8001fea:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fee:	f7ff ff73 	bl	8001ed8 <limitPWM>
 8001ff2:	eef0 7a40 	vmov.f32	s15, s0
 8001ff6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002054 <setMotorRPWM+0x88>
 8001ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ffe:	4b14      	ldr	r3, [pc, #80]	@ (8002050 <setMotorRPWM+0x84>)
 8002000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002004:	ee17 2a90 	vmov	r2, s15
 8002008:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else if (pwm < 0) {
		TIM3->CCR1 = 0;
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 800200a:	e01c      	b.n	8002046 <setMotorRPWM+0x7a>
	else if (pwm < 0) {
 800200c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002010:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002018:	d400      	bmi.n	800201c <setMotorRPWM+0x50>
}
 800201a:	e014      	b.n	8002046 <setMotorRPWM+0x7a>
		TIM3->CCR1 = 0;
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <setMotorRPWM+0x84>)
 800201e:	2200      	movs	r2, #0
 8002020:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002022:	ed97 0a01 	vldr	s0, [r7, #4]
 8002026:	f7ff ff57 	bl	8001ed8 <limitPWM>
 800202a:	eef0 7a40 	vmov.f32	s15, s0
 800202e:	eef1 7a67 	vneg.f32	s15, s15
 8002032:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002054 <setMotorRPWM+0x88>
 8002036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800203a:	4b05      	ldr	r3, [pc, #20]	@ (8002050 <setMotorRPWM+0x84>)
 800203c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002040:	ee17 2a90 	vmov	r2, s15
 8002044:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40000400 	.word	0x40000400
 8002054:	45e0f800 	.word	0x45e0f800

08002058 <PCA9685_SetBit>:
  * @param  Bit: Bit position to modify (0-7)
  * @param  Value: Value to set (0 or 1)
  * @retval None
  */
void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af04      	add	r7, sp, #16
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
 8002062:	460b      	mov	r3, r1
 8002064:	71bb      	strb	r3, [r7, #6]
 8002066:	4613      	mov	r3, r2
 8002068:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	b29a      	uxth	r2, r3
 800206e:	230a      	movs	r3, #10
 8002070:	9302      	str	r3, [sp, #8]
 8002072:	2301      	movs	r3, #1
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	f107 030f 	add.w	r3, r7, #15
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	2301      	movs	r3, #1
 800207e:	2180      	movs	r1, #128	@ 0x80
 8002080:	4819      	ldr	r0, [pc, #100]	@ (80020e8 <PCA9685_SetBit+0x90>)
 8002082:	f002 ffaf 	bl	8004fe4 <HAL_I2C_Mem_Read>
  if (Value == 0)
 8002086:	797b      	ldrb	r3, [r7, #5]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10d      	bne.n	80020a8 <PCA9685_SetBit+0x50>
    readValue &= ~(1 << Bit);
 800208c:	79bb      	ldrb	r3, [r7, #6]
 800208e:	2201      	movs	r2, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	b25b      	sxtb	r3, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	b25a      	sxtb	r2, r3
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	b25b      	sxtb	r3, r3
 800209e:	4013      	ands	r3, r2
 80020a0:	b25b      	sxtb	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	73fb      	strb	r3, [r7, #15]
 80020a6:	e00a      	b.n	80020be <PCA9685_SetBit+0x66>
  else
    readValue |= (1 << Bit);
 80020a8:	79bb      	ldrb	r3, [r7, #6]
 80020aa:	2201      	movs	r2, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	b25a      	sxtb	r2, r3
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	b25b      	sxtb	r3, r3
 80020b6:	4313      	orrs	r3, r2
 80020b8:	b25b      	sxtb	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	230a      	movs	r3, #10
 80020c4:	9302      	str	r3, [sp, #8]
 80020c6:	2301      	movs	r3, #1
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	f107 030f 	add.w	r3, r7, #15
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2301      	movs	r3, #1
 80020d2:	2180      	movs	r1, #128	@ 0x80
 80020d4:	4804      	ldr	r0, [pc, #16]	@ (80020e8 <PCA9685_SetBit+0x90>)
 80020d6:	f002 fe8b 	bl	8004df0 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 80020da:	2001      	movs	r0, #1
 80020dc:	f001 fb74 	bl	80037c8 <HAL_Delay>
}
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200002a8 	.word	0x200002a8

080020ec <PCA9685_SetPWMFrequency>:
  * @brief  Set PWM frequency (24Hz to 1526Hz)
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af04      	add	r7, sp, #16
 80020f2:	4603      	mov	r3, r0
 80020f4:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;

  // Ensure frequency is within valid range
  if(frequency >= 1526)
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d902      	bls.n	8002106 <PCA9685_SetPWMFrequency+0x1a>
    prescale = 0x03;  // Maximum frequency (1526Hz)
 8002100:	2303      	movs	r3, #3
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	e00c      	b.n	8002120 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24)
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	2b18      	cmp	r3, #24
 800210a:	d802      	bhi.n	8002112 <PCA9685_SetPWMFrequency+0x26>
    prescale = 0xFF;  // Minimum frequency (24Hz)
 800210c:	23ff      	movs	r3, #255	@ 0xff
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e006      	b.n	8002120 <PCA9685_SetPWMFrequency+0x34>
  else
    // Calculate prescale value based on 25MHz internal oscillator
    prescale = (uint8_t)(25000000 / (4096 * frequency));
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	031b      	lsls	r3, r3, #12
 8002116:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <PCA9685_SetPWMFrequency+0x74>)
 8002118:	fb92 f3f3 	sdiv	r3, r2, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	73fb      	strb	r3, [r7, #15]

  // Enter sleep mode before changing the frequency
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8002120:	2201      	movs	r2, #1
 8002122:	2104      	movs	r1, #4
 8002124:	2000      	movs	r0, #0
 8002126:	f7ff ff97 	bl	8002058 <PCA9685_SetBit>

  // Set the prescale value
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 800212a:	230a      	movs	r3, #10
 800212c:	9302      	str	r3, [sp, #8]
 800212e:	2301      	movs	r3, #1
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	f107 030f 	add.w	r3, r7, #15
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2301      	movs	r3, #1
 800213a:	22fe      	movs	r2, #254	@ 0xfe
 800213c:	2180      	movs	r1, #128	@ 0x80
 800213e:	4809      	ldr	r0, [pc, #36]	@ (8002164 <PCA9685_SetPWMFrequency+0x78>)
 8002140:	f002 fe56 	bl	8004df0 <HAL_I2C_Mem_Write>

  // Exit sleep mode
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8002144:	2200      	movs	r2, #0
 8002146:	2104      	movs	r1, #4
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff ff85 	bl	8002058 <PCA9685_SetBit>

  // Restart all PWM channels
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 800214e:	2201      	movs	r2, #1
 8002150:	2107      	movs	r1, #7
 8002152:	2000      	movs	r0, #0
 8002154:	f7ff ff80 	bl	8002058 <PCA9685_SetBit>
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	017d7840 	.word	0x017d7840
 8002164:	200002a8 	.word	0x200002a8

08002168 <PCA9685_Init>:
  * @brief  Initialize PCA9685 with specified frequency
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_Init(uint16_t frequency)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
  // Set desired PWM frequency (usually 50Hz for standard servos)
  PCA9685_SetPWMFrequency(frequency);
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ffb9 	bl	80020ec <PCA9685_SetPWMFrequency>

  // Enable Auto-Increment for efficient register writing
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 800217a:	2201      	movs	r2, #1
 800217c:	2105      	movs	r1, #5
 800217e:	2000      	movs	r0, #0
 8002180:	f7ff ff6a 	bl	8002058 <PCA9685_SetBit>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <PCA9685_SetPWM>:
  * @param  OnTime: Value between 0-4095 for ON time
  * @param  OffTime: Value between 0-4095 for OFF time
  * @retval None
  */
void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af04      	add	r7, sp, #16
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
 8002196:	460b      	mov	r3, r1
 8002198:	80bb      	strh	r3, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];

  // Calculate register address for the specified channel
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	3306      	adds	r3, #6
 80021a6:	73fb      	strb	r3, [r7, #15]

  // Prepare data bytes for ON and OFF times
  pwm[0] = OnTime & 0xFF;         // ON Low byte
 80021a8:	88bb      	ldrh	r3, [r7, #4]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	723b      	strb	r3, [r7, #8]
  pwm[1] = (OnTime >> 8) & 0xFF;  // ON High byte
 80021ae:	88bb      	ldrh	r3, [r7, #4]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;        // OFF Low byte
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	72bb      	strb	r3, [r7, #10]
  pwm[3] = (OffTime >> 8) & 0xFF; // OFF High byte
 80021be:	887b      	ldrh	r3, [r7, #2]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	72fb      	strb	r3, [r7, #11]

  // Write all 4 bytes in a single I2C transaction
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	230a      	movs	r3, #10
 80021ce:	9302      	str	r3, [sp, #8]
 80021d0:	2304      	movs	r3, #4
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	f107 0308 	add.w	r3, r7, #8
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2301      	movs	r3, #1
 80021dc:	2180      	movs	r1, #128	@ 0x80
 80021de:	4803      	ldr	r0, [pc, #12]	@ (80021ec <PCA9685_SetPWM+0x60>)
 80021e0:	f002 fe06 	bl	8004df0 <HAL_I2C_Mem_Write>
}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	200002a8 	.word	0x200002a8

080021f0 <PCA9685_SetServoAngle>:
  * @param  Channel: Channel number (0-15)
  * @param  Angle: Desired angle (0-180 degrees)
  * @retval None
  */
void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	ed87 0a00 	vstr	s0, [r7]
 80021fc:	71fb      	strb	r3, [r7, #7]
  float pwmValue;

  // Limit angle to 0-180 range
  if (Angle < 0) Angle = 0;
 80021fe:	edd7 7a00 	vldr	s15, [r7]
 8002202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220a:	d502      	bpl.n	8002212 <PCA9685_SetServoAngle+0x22>
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	603b      	str	r3, [r7, #0]
  if (Angle > 180) Angle = 180;
 8002212:	edd7 7a00 	vldr	s15, [r7]
 8002216:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80022a0 <PCA9685_SetServoAngle+0xb0>
 800221a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800221e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002222:	dd01      	ble.n	8002228 <PCA9685_SetServoAngle+0x38>
 8002224:	4b1f      	ldr	r3, [pc, #124]	@ (80022a4 <PCA9685_SetServoAngle+0xb4>)
 8002226:	603b      	str	r3, [r7, #0]

  // Convert angle to PWM value
  // At 50Hz: 0° = 102.4 value (0.5ms), 180° = 511.9 value (2.5ms)
  pwmValue = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8002228:	6838      	ldr	r0, [r7, #0]
 800222a:	f7fe f9bd 	bl	80005a8 <__aeabi_f2d>
 800222e:	a318      	add	r3, pc, #96	@ (adr r3, 8002290 <PCA9685_SetServoAngle+0xa0>)
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	f7fe fa10 	bl	8000658 <__aeabi_dmul>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	4b18      	ldr	r3, [pc, #96]	@ (80022a8 <PCA9685_SetServoAngle+0xb8>)
 8002246:	f7fe fb31 	bl	80008ac <__aeabi_ddiv>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4610      	mov	r0, r2
 8002250:	4619      	mov	r1, r3
 8002252:	a311      	add	r3, pc, #68	@ (adr r3, 8002298 <PCA9685_SetServoAngle+0xa8>)
 8002254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002258:	f7fe f848 	bl	80002ec <__adddf3>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4610      	mov	r0, r2
 8002262:	4619      	mov	r1, r3
 8002264:	f7fe fcd0 	bl	8000c08 <__aeabi_d2f>
 8002268:	4603      	mov	r3, r0
 800226a:	60fb      	str	r3, [r7, #12]

  // Set PWM with calculated value
  PCA9685_SetPWM(Channel, 0, (uint16_t)pwmValue);
 800226c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002274:	ee17 3a90 	vmov	r3, s15
 8002278:	b29a      	uxth	r2, r3
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff84 	bl	800218c <PCA9685_SetPWM>
}
 8002284:	bf00      	nop
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	f3af 8000 	nop.w
 8002290:	00000000 	.word	0x00000000
 8002294:	40799800 	.word	0x40799800
 8002298:	9999999a 	.word	0x9999999a
 800229c:	40599999 	.word	0x40599999
 80022a0:	43340000 	.word	0x43340000
 80022a4:	43340000 	.word	0x43340000
 80022a8:	40668000 	.word	0x40668000

080022ac <Profile_GetBrakingDistance>:
        HAL_Delay(2);
    }
}

// Get the braking distance
float Profile_GetBrakingDistance(const Profile *profile) {
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
    return fabsf(profile->speed * profile->speed - profile->final_speed * profile->final_speed) * 0.5f * profile->one_over_acc;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80022c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	edd3 6a07 	vldr	s13, [r3, #28]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80022d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d8:	eef0 7ae7 	vabs.f32	s15, s15
 80022dc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80022e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80022ea:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80022ee:	eeb0 0a67 	vmov.f32	s0, s15
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <Profile_GetSpeed>:
float Profile_GetPosition(const Profile *profile) {
    return profile->position;
}

// Get the current speed
float Profile_GetSpeed(const Profile *profile) {
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    return profile->speed;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	ee07 3a90 	vmov	s15, r3
}
 800230c:	eeb0 0a67 	vmov.f32	s0, s15
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <Profile_Update>:
void Profile_SetPosition(Profile *profile, float position) {
    profile->position = position;
}

// Update the profile
void Profile_Update(Profile *profile) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
    if (profile->state == PS_IDLE) return;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 80b5 	beq.w	800249a <Profile_Update+0x17e>

    float delta_v = profile->acceleration * LOOP_INTERVAL;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	ed93 7a04 	vldr	s14, [r3, #16]
 8002336:	4b5b      	ldr	r3, [pc, #364]	@ (80024a4 <Profile_Update+0x188>)
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002340:	edc7 7a03 	vstr	s15, [r7, #12]
    float remaining = fabsf(profile->final_position) - fabsf(profile->position);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	edd3 7a08 	vldr	s15, [r3, #32]
 800234a:	eeb0 7ae7 	vabs.f32	s14, s15
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	edd3 7a02 	vldr	s15, [r3, #8]
 8002354:	eef0 7ae7 	vabs.f32	s15, s15
 8002358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (profile->state == PS_ACCELERATING) {
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d128      	bne.n	80023bc <Profile_Update+0xa0>
        if (remaining < Profile_GetBrakingDistance(profile)) {
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ff9e 	bl	80022ac <Profile_GetBrakingDistance>
 8002370:	eeb0 7a40 	vmov.f32	s14, s0
 8002374:	edd7 7a02 	vldr	s15, [r7, #8]
 8002378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800237c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002380:	d51c      	bpl.n	80023bc <Profile_Update+0xa0>
            profile->state = PS_BRAKING;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2202      	movs	r2, #2
 8002386:	701a      	strb	r2, [r3, #0]
            profile->target_speed = (profile->final_speed == 0) ? (profile->sign * 5.0f) : profile->final_speed;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	edd3 7a07 	vldr	s15, [r3, #28]
 800238e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002396:	d10b      	bne.n	80023b0 <Profile_Update+0x94>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80023aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ae:	e002      	b.n	80023b6 <Profile_Update+0x9a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	edc3 7a06 	vstr	s15, [r3, #24]
        }
    }

    if (profile->speed < profile->target_speed) {
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	ed93 7a01 	vldr	s14, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	edd3 7a06 	vldr	s15, [r3, #24]
 80023c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d0:	d519      	bpl.n	8002406 <Profile_Update+0xea>
        profile->speed += delta_v;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80023d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80023dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed > profile->target_speed) profile->speed = profile->target_speed;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80023f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fa:	dd28      	ble.n	800244e <Profile_Update+0x132>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	e023      	b.n	800244e <Profile_Update+0x132>
    } else if (profile->speed > profile->target_speed) {
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	ed93 7a01 	vldr	s14, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241a:	dd18      	ble.n	800244e <Profile_Update+0x132>
        profile->speed -= delta_v;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002422:	edd7 7a03 	vldr	s15, [r7, #12]
 8002426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed < profile->target_speed) profile->speed = profile->target_speed;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	ed93 7a01 	vldr	s14, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	edd3 7a06 	vldr	s15, [r3, #24]
 800243c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002444:	d503      	bpl.n	800244e <Profile_Update+0x132>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	605a      	str	r2, [r3, #4]
    }

    profile->position += profile->speed * LOOP_INTERVAL;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	ed93 7a01 	vldr	s14, [r3, #4]
 8002454:	4b13      	ldr	r3, [pc, #76]	@ (80024a4 <Profile_Update+0x188>)
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	edd3 7a02 	vldr	s15, [r3, #8]
 8002464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	edc3 7a02 	vstr	s15, [r3, #8]

    if (profile->state != PS_FINISHED && remaining < 0.125f) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b03      	cmp	r3, #3
 8002476:	d011      	beq.n	800249c <Profile_Update+0x180>
 8002478:	edd7 7a02 	vldr	s15, [r7, #8]
 800247c:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8002480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002488:	d508      	bpl.n	800249c <Profile_Update+0x180>
        profile->state = PS_FINISHED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2203      	movs	r2, #3
 800248e:	701a      	strb	r2, [r3, #0]
        profile->target_speed = profile->final_speed;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69da      	ldr	r2, [r3, #28]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	619a      	str	r2, [r3, #24]
 8002498:	e000      	b.n	800249c <Profile_Update+0x180>
    if (profile->state == PS_IDLE) return;
 800249a:	bf00      	nop
    }

}
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	0800b2fc 	.word	0x0800b2fc

080024a8 <Servo_Init>:
  * @brief  Initialize the servo control system
  * @param  frequency: PWM frequency for the servos (typically 50Hz)
  * @retval None
  */
void Servo_Init(uint16_t frequency)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	80fb      	strh	r3, [r7, #6]
    if (isInitialized)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <Servo_Init+0x3c>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d110      	bne.n	80024dc <Servo_Init+0x34>
        return;

    // Initialize PCA9685 with the specified frequency
    PCA9685_Init(frequency);
 80024ba:	88fb      	ldrh	r3, [r7, #6]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fe53 	bl	8002168 <PCA9685_Init>

    // Clear the servo array
    memset(servos, 0, sizeof(servos));
 80024c2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80024c6:	2100      	movs	r1, #0
 80024c8:	4807      	ldr	r0, [pc, #28]	@ (80024e8 <Servo_Init+0x40>)
 80024ca:	f006 fe14 	bl	80090f6 <memset>
    servoCount = 0;
 80024ce:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <Servo_Init+0x44>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
    isInitialized = 1;
 80024d4:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <Servo_Init+0x3c>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	e000      	b.n	80024de <Servo_Init+0x36>
        return;
 80024dc:	bf00      	nop
}
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200007e1 	.word	0x200007e1
 80024e8:	200005a0 	.word	0x200005a0
 80024ec:	200007e0 	.word	0x200007e0

080024f0 <Servo_Register>:
  * @param  minAngle: Minimum angle limit (0-180)
  * @param  maxAngle: Maximum angle limit (0-180)
  * @retval int: Servo ID (0 to MAX_SERVOS-1) or -1 if error
  */
int Servo_Register(uint8_t channel, const char* name, float minAngle, float maxAngle)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80024fe:	edc7 0a00 	vstr	s1, [r7]
 8002502:	73fb      	strb	r3, [r7, #15]
    // Check if initialized
    if (!isInitialized)
 8002504:	4b6e      	ldr	r3, [pc, #440]	@ (80026c0 <Servo_Register+0x1d0>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d102      	bne.n	8002512 <Servo_Register+0x22>
        return -1;
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
 8002510:	e0d1      	b.n	80026b6 <Servo_Register+0x1c6>

    // Check if we've reached maximum servo count
    if (servoCount >= MAX_SERVOS)
 8002512:	4b6c      	ldr	r3, [pc, #432]	@ (80026c4 <Servo_Register+0x1d4>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b0f      	cmp	r3, #15
 8002518:	d902      	bls.n	8002520 <Servo_Register+0x30>
        return -1;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
 800251e:	e0ca      	b.n	80026b6 <Servo_Register+0x1c6>

    // Check if channel is valid
    if (channel >= MAX_SERVOS)
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b0f      	cmp	r3, #15
 8002524:	d902      	bls.n	800252c <Servo_Register+0x3c>
        return -1;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
 800252a:	e0c4      	b.n	80026b6 <Servo_Register+0x1c6>

    // Check if the channel is already in use
    for (int i = 0; i < servoCount; i++) {
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	e01b      	b.n	800256a <Servo_Register+0x7a>
        if (servos[i].initialized && servos[i].channel == channel)
 8002532:	4965      	ldr	r1, [pc, #404]	@ (80026c8 <Servo_Register+0x1d8>)
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	4613      	mov	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	3310      	adds	r3, #16
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00d      	beq.n	8002564 <Servo_Register+0x74>
 8002548:	495f      	ldr	r1, [pc, #380]	@ (80026c8 <Servo_Register+0x1d8>)
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	429a      	cmp	r2, r3
 800255c:	d102      	bne.n	8002564 <Servo_Register+0x74>
            return -1;
 800255e:	f04f 33ff 	mov.w	r3, #4294967295
 8002562:	e0a8      	b.n	80026b6 <Servo_Register+0x1c6>
    for (int i = 0; i < servoCount; i++) {
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3301      	adds	r3, #1
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	4b56      	ldr	r3, [pc, #344]	@ (80026c4 <Servo_Register+0x1d4>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	4293      	cmp	r3, r2
 8002574:	dbdd      	blt.n	8002532 <Servo_Register+0x42>
    }

    // Validate angle limits
    if (minAngle < SERVO_ANGLE_MIN) minAngle = SERVO_ANGLE_MIN;
 8002576:	edd7 7a01 	vldr	s15, [r7, #4]
 800257a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002582:	d502      	bpl.n	800258a <Servo_Register+0x9a>
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	607b      	str	r3, [r7, #4]
    if (maxAngle > SERVO_ANGLE_MAX) maxAngle = SERVO_ANGLE_MAX;
 800258a:	edd7 7a00 	vldr	s15, [r7]
 800258e:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80026cc <Servo_Register+0x1dc>
 8002592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259a:	dd01      	ble.n	80025a0 <Servo_Register+0xb0>
 800259c:	4b4c      	ldr	r3, [pc, #304]	@ (80026d0 <Servo_Register+0x1e0>)
 800259e:	603b      	str	r3, [r7, #0]
    if (minAngle >= maxAngle) return -1;
 80025a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80025a4:	edd7 7a00 	vldr	s15, [r7]
 80025a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b0:	db02      	blt.n	80025b8 <Servo_Register+0xc8>
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	e07e      	b.n	80026b6 <Servo_Register+0x1c6>

    // Register the servo
    int servoId = servoCount;
 80025b8:	4b42      	ldr	r3, [pc, #264]	@ (80026c4 <Servo_Register+0x1d4>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	613b      	str	r3, [r7, #16]
    servos[servoId].channel = channel;
 80025be:	4942      	ldr	r1, [pc, #264]	@ (80026c8 <Servo_Register+0x1d8>)
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	701a      	strb	r2, [r3, #0]
    servos[servoId].minAngle = minAngle;
 80025d0:	493d      	ldr	r1, [pc, #244]	@ (80026c8 <Servo_Register+0x1d8>)
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	3304      	adds	r3, #4
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	601a      	str	r2, [r3, #0]
    servos[servoId].maxAngle = maxAngle;
 80025e4:	4938      	ldr	r1, [pc, #224]	@ (80026c8 <Servo_Register+0x1d8>)
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	3308      	adds	r3, #8
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	601a      	str	r2, [r3, #0]
    servos[servoId].currentAngle = (minAngle + maxAngle) / 2.0f;  // Center position
 80025f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80025fc:	edd7 7a00 	vldr	s15, [r7]
 8002600:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002604:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002608:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800260c:	492e      	ldr	r1, [pc, #184]	@ (80026c8 <Servo_Register+0x1d8>)
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	330c      	adds	r3, #12
 800261c:	edc3 7a00 	vstr	s15, [r3]
    servos[servoId].initialized = 1;
 8002620:	4929      	ldr	r1, [pc, #164]	@ (80026c8 <Servo_Register+0x1d8>)
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	3310      	adds	r3, #16
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]

    // Set optional name
    if (name != NULL) {
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d018      	beq.n	800266c <Servo_Register+0x17c>
        strncpy(servos[servoId].name, name, sizeof(servos[servoId].name) - 1);
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	3310      	adds	r3, #16
 8002646:	4a20      	ldr	r2, [pc, #128]	@ (80026c8 <Servo_Register+0x1d8>)
 8002648:	4413      	add	r3, r2
 800264a:	3301      	adds	r3, #1
 800264c:	220f      	movs	r2, #15
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	4618      	mov	r0, r3
 8002652:	f006 fd58 	bl	8009106 <strncpy>
        servos[servoId].name[sizeof(servos[servoId].name) - 1] = '\0';  // Ensure null termination
 8002656:	491c      	ldr	r1, [pc, #112]	@ (80026c8 <Servo_Register+0x1d8>)
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	3320      	adds	r3, #32
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e00d      	b.n	8002688 <Servo_Register+0x198>
    } else {
        snprintf(servos[servoId].name, sizeof(servos[servoId].name), "Servo%d", servoId);
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	3310      	adds	r3, #16
 8002678:	4a13      	ldr	r2, [pc, #76]	@ (80026c8 <Servo_Register+0x1d8>)
 800267a:	4413      	add	r3, r2
 800267c:	1c58      	adds	r0, r3, #1
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4a14      	ldr	r2, [pc, #80]	@ (80026d4 <Servo_Register+0x1e4>)
 8002682:	2110      	movs	r1, #16
 8002684:	f006 fcbe 	bl	8009004 <sniprintf>
    }

    // Update servo count
    servoCount++;
 8002688:	4b0e      	ldr	r3, [pc, #56]	@ (80026c4 <Servo_Register+0x1d4>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	3301      	adds	r3, #1
 800268e:	b2da      	uxtb	r2, r3
 8002690:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <Servo_Register+0x1d4>)
 8002692:	701a      	strb	r2, [r3, #0]

    // Move servo to center position
    PCA9685_SetServoAngle(channel, servos[servoId].currentAngle);
 8002694:	490c      	ldr	r1, [pc, #48]	@ (80026c8 <Servo_Register+0x1d8>)
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	330c      	adds	r3, #12
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	eeb0 0a67 	vmov.f32	s0, s15
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fd9e 	bl	80021f0 <PCA9685_SetServoAngle>

    return servoId;
 80026b4:	693b      	ldr	r3, [r7, #16]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200007e1 	.word	0x200007e1
 80026c4:	200007e0 	.word	0x200007e0
 80026c8:	200005a0 	.word	0x200005a0
 80026cc:	43340000 	.word	0x43340000
 80026d0:	43340000 	.word	0x43340000
 80026d4:	0800b2e4 	.word	0x0800b2e4

080026d8 <Servo_SetAngle>:
  * @param  servoId: ID returned from Servo_Register
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngle(int servoId, float angle)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	ed87 0a00 	vstr	s0, [r7]
    // Check if servo ID is valid
    if (servoId < 0 || servoId >= servoCount || !servos[servoId].initialized)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	db10      	blt.n	800270c <Servo_SetAngle+0x34>
 80026ea:	4b33      	ldr	r3, [pc, #204]	@ (80027b8 <Servo_SetAngle+0xe0>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4293      	cmp	r3, r2
 80026f4:	da0a      	bge.n	800270c <Servo_SetAngle+0x34>
 80026f6:	4931      	ldr	r1, [pc, #196]	@ (80027bc <Servo_SetAngle+0xe4>)
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	3310      	adds	r3, #16
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d102      	bne.n	8002712 <Servo_SetAngle+0x3a>
        return -1;
 800270c:	f04f 33ff 	mov.w	r3, #4294967295
 8002710:	e04d      	b.n	80027ae <Servo_SetAngle+0xd6>

    // Clamp angle to servo limits
    if (angle < servos[servoId].minAngle)
 8002712:	492a      	ldr	r1, [pc, #168]	@ (80027bc <Servo_SetAngle+0xe4>)
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	3304      	adds	r3, #4
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	ed97 7a00 	vldr	s14, [r7]
 800272a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800272e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002732:	d509      	bpl.n	8002748 <Servo_SetAngle+0x70>
        angle = servos[servoId].minAngle;
 8002734:	4921      	ldr	r1, [pc, #132]	@ (80027bc <Servo_SetAngle+0xe4>)
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	3304      	adds	r3, #4
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	603b      	str	r3, [r7, #0]
    if (angle > servos[servoId].maxAngle)
 8002748:	491c      	ldr	r1, [pc, #112]	@ (80027bc <Servo_SetAngle+0xe4>)
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3308      	adds	r3, #8
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	ed97 7a00 	vldr	s14, [r7]
 8002760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002768:	dd09      	ble.n	800277e <Servo_SetAngle+0xa6>
        angle = servos[servoId].maxAngle;
 800276a:	4914      	ldr	r1, [pc, #80]	@ (80027bc <Servo_SetAngle+0xe4>)
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	3308      	adds	r3, #8
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	603b      	str	r3, [r7, #0]

    // Update current angle
    servos[servoId].currentAngle = angle;
 800277e:	490f      	ldr	r1, [pc, #60]	@ (80027bc <Servo_SetAngle+0xe4>)
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	330c      	adds	r3, #12
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	601a      	str	r2, [r3, #0]

    // Set servo position
    PCA9685_SetServoAngle(servos[servoId].channel, angle);
 8002792:	490a      	ldr	r1, [pc, #40]	@ (80027bc <Servo_SetAngle+0xe4>)
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	ed97 0a00 	vldr	s0, [r7]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fd22 	bl	80021f0 <PCA9685_SetServoAngle>

    return 0;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200007e0 	.word	0x200007e0
 80027bc:	200005a0 	.word	0x200005a0

080027c0 <Servo_SetAngleByName>:
  * @param  name: Name of the servo
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngleByName(const char* name, float angle)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	ed87 0a00 	vstr	s0, [r7]
    if (name == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d102      	bne.n	80027d8 <Servo_SetAngleByName+0x18>
        return -1;
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295
 80027d6:	e00f      	b.n	80027f8 <Servo_SetAngleByName+0x38>

    int servoId = Servo_GetIdByName(name);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f811 	bl	8002800 <Servo_GetIdByName>
 80027de:	60f8      	str	r0, [r7, #12]

    if (servoId >= 0)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	db06      	blt.n	80027f4 <Servo_SetAngleByName+0x34>
        return Servo_SetAngle(servoId, angle);
 80027e6:	ed97 0a00 	vldr	s0, [r7]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f7ff ff74 	bl	80026d8 <Servo_SetAngle>
 80027f0:	4603      	mov	r3, r0
 80027f2:	e001      	b.n	80027f8 <Servo_SetAngleByName+0x38>
    else
        return -1;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <Servo_GetIdByName>:
  * @brief  Get servo ID by name
  * @param  name: Name of the servo
  * @retval int: Servo ID or -1 if not found
  */
int Servo_GetIdByName(const char* name)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
    if (name == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <Servo_GetIdByName+0x14>
        return -1;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295
 8002812:	e02a      	b.n	800286a <Servo_GetIdByName+0x6a>

    // Search for servo with the given name
    for (int i = 0; i < servoCount; i++) {
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	e01f      	b.n	800285a <Servo_GetIdByName+0x5a>
        if (servos[i].initialized && strcmp(servos[i].name, name) == 0)
 800281a:	4916      	ldr	r1, [pc, #88]	@ (8002874 <Servo_GetIdByName+0x74>)
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	3310      	adds	r3, #16
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d011      	beq.n	8002854 <Servo_GetIdByName+0x54>
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	3310      	adds	r3, #16
 800283c:	4a0d      	ldr	r2, [pc, #52]	@ (8002874 <Servo_GetIdByName+0x74>)
 800283e:	4413      	add	r3, r2
 8002840:	3301      	adds	r3, #1
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4618      	mov	r0, r3
 8002846:	f7fd fce3 	bl	8000210 <strcmp>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <Servo_GetIdByName+0x54>
            return i;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	e00a      	b.n	800286a <Servo_GetIdByName+0x6a>
    for (int i = 0; i < servoCount; i++) {
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	3301      	adds	r3, #1
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b07      	ldr	r3, [pc, #28]	@ (8002878 <Servo_GetIdByName+0x78>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4293      	cmp	r3, r2
 8002864:	dbd9      	blt.n	800281a <Servo_GetIdByName+0x1a>
    }

    return -1;
 8002866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200005a0 	.word	0x200005a0
 8002878:	200007e0 	.word	0x200007e0

0800287c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <HAL_MspInit+0x4c>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	4a0f      	ldr	r2, [pc, #60]	@ (80028c8 <HAL_MspInit+0x4c>)
 800288c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002890:	6453      	str	r3, [r2, #68]	@ 0x44
 8002892:	4b0d      	ldr	r3, [pc, #52]	@ (80028c8 <HAL_MspInit+0x4c>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	4b09      	ldr	r3, [pc, #36]	@ (80028c8 <HAL_MspInit+0x4c>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	4a08      	ldr	r2, [pc, #32]	@ (80028c8 <HAL_MspInit+0x4c>)
 80028a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_MspInit+0x4c>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028ba:	2007      	movs	r0, #7
 80028bc:	f001 faea 	bl	8003e94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028c0:	bf00      	nop
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40023800 	.word	0x40023800

080028cc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	@ 0x28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a17      	ldr	r2, [pc, #92]	@ (8002948 <HAL_ADC_MspInit+0x7c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d127      	bne.n	800293e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	4b16      	ldr	r3, [pc, #88]	@ (800294c <HAL_ADC_MspInit+0x80>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	4a15      	ldr	r2, [pc, #84]	@ (800294c <HAL_ADC_MspInit+0x80>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80028fe:	4b13      	ldr	r3, [pc, #76]	@ (800294c <HAL_ADC_MspInit+0x80>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b0f      	ldr	r3, [pc, #60]	@ (800294c <HAL_ADC_MspInit+0x80>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	4a0e      	ldr	r2, [pc, #56]	@ (800294c <HAL_ADC_MspInit+0x80>)
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	6313      	str	r3, [r2, #48]	@ 0x30
 800291a:	4b0c      	ldr	r3, [pc, #48]	@ (800294c <HAL_ADC_MspInit+0x80>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_ADC_Pin;
 8002926:	2301      	movs	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800292a:	2303      	movs	r3, #3
 800292c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_ADC_GPIO_Port, &GPIO_InitStruct);
 8002932:	f107 0314 	add.w	r3, r7, #20
 8002936:	4619      	mov	r1, r3
 8002938:	4805      	ldr	r0, [pc, #20]	@ (8002950 <HAL_ADC_MspInit+0x84>)
 800293a:	f001 fe69 	bl	8004610 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800293e:	bf00      	nop
 8002940:	3728      	adds	r7, #40	@ 0x28
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40012000 	.word	0x40012000
 800294c:	40023800 	.word	0x40023800
 8002950:	40020800 	.word	0x40020800

08002954 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08c      	sub	sp, #48	@ 0x30
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 031c 	add.w	r3, r7, #28
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a42      	ldr	r2, [pc, #264]	@ (8002a7c <HAL_I2C_MspInit+0x128>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d12c      	bne.n	80029d0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	4b41      	ldr	r3, [pc, #260]	@ (8002a80 <HAL_I2C_MspInit+0x12c>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	4a40      	ldr	r2, [pc, #256]	@ (8002a80 <HAL_I2C_MspInit+0x12c>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	6313      	str	r3, [r2, #48]	@ 0x30
 8002986:	4b3e      	ldr	r3, [pc, #248]	@ (8002a80 <HAL_I2C_MspInit+0x12c>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	61bb      	str	r3, [r7, #24]
 8002990:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002992:	23c0      	movs	r3, #192	@ 0xc0
 8002994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002996:	2312      	movs	r3, #18
 8002998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299e:	2303      	movs	r3, #3
 80029a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029a2:	2304      	movs	r3, #4
 80029a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a6:	f107 031c 	add.w	r3, r7, #28
 80029aa:	4619      	mov	r1, r3
 80029ac:	4835      	ldr	r0, [pc, #212]	@ (8002a84 <HAL_I2C_MspInit+0x130>)
 80029ae:	f001 fe2f 	bl	8004610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	4b32      	ldr	r3, [pc, #200]	@ (8002a80 <HAL_I2C_MspInit+0x12c>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	4a31      	ldr	r2, [pc, #196]	@ (8002a80 <HAL_I2C_MspInit+0x12c>)
 80029bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002a80 <HAL_I2C_MspInit+0x12c>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80029ce:	e050      	b.n	8002a72 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002a88 <HAL_I2C_MspInit+0x134>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d14b      	bne.n	8002a72 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	4b28      	ldr	r3, [pc, #160]	@ (8002a80 <HAL_I2C_MspInit+0x12c>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	4a27      	ldr	r2, [pc, #156]	@ (8002a80 <HAL_I2C_MspInit+0x12c>)
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ea:	4b25      	ldr	r3, [pc, #148]	@ (8002a80 <HAL_I2C_MspInit+0x12c>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	4b21      	ldr	r3, [pc, #132]	@ (8002a80 <HAL_I2C_MspInit+0x12c>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	4a20      	ldr	r2, [pc, #128]	@ (8002a80 <HAL_I2C_MspInit+0x12c>)
 8002a00:	f043 0304 	orr.w	r3, r3, #4
 8002a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a06:	4b1e      	ldr	r3, [pc, #120]	@ (8002a80 <HAL_I2C_MspInit+0x12c>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a18:	2312      	movs	r3, #18
 8002a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a24:	2304      	movs	r3, #4
 8002a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a28:	f107 031c 	add.w	r3, r7, #28
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4815      	ldr	r0, [pc, #84]	@ (8002a84 <HAL_I2C_MspInit+0x130>)
 8002a30:	f001 fdee 	bl	8004610 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a3a:	2312      	movs	r3, #18
 8002a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a42:	2303      	movs	r3, #3
 8002a44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a46:	2304      	movs	r3, #4
 8002a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	4619      	mov	r1, r3
 8002a50:	480e      	ldr	r0, [pc, #56]	@ (8002a8c <HAL_I2C_MspInit+0x138>)
 8002a52:	f001 fddd 	bl	8004610 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	4b09      	ldr	r3, [pc, #36]	@ (8002a80 <HAL_I2C_MspInit+0x12c>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	4a08      	ldr	r2, [pc, #32]	@ (8002a80 <HAL_I2C_MspInit+0x12c>)
 8002a60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a66:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <HAL_I2C_MspInit+0x12c>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
}
 8002a72:	bf00      	nop
 8002a74:	3730      	adds	r7, #48	@ 0x30
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40005400 	.word	0x40005400
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40020400 	.word	0x40020400
 8002a88:	40005800 	.word	0x40005800
 8002a8c:	40020800 	.word	0x40020800

08002a90 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08c      	sub	sp, #48	@ 0x30
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 031c 	add.w	r3, r7, #28
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a32      	ldr	r2, [pc, #200]	@ (8002b78 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d12d      	bne.n	8002b0e <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	4b31      	ldr	r3, [pc, #196]	@ (8002b7c <HAL_TIM_Encoder_MspInit+0xec>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aba:	4a30      	ldr	r2, [pc, #192]	@ (8002b7c <HAL_TIM_Encoder_MspInit+0xec>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8002b7c <HAL_TIM_Encoder_MspInit+0xec>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b7c <HAL_TIM_Encoder_MspInit+0xec>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	4a29      	ldr	r2, [pc, #164]	@ (8002b7c <HAL_TIM_Encoder_MspInit+0xec>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ade:	4b27      	ldr	r3, [pc, #156]	@ (8002b7c <HAL_TIM_Encoder_MspInit+0xec>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8002aea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002afc:	2301      	movs	r3, #1
 8002afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b00:	f107 031c 	add.w	r3, r7, #28
 8002b04:	4619      	mov	r1, r3
 8002b06:	481e      	ldr	r0, [pc, #120]	@ (8002b80 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002b08:	f001 fd82 	bl	8004610 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b0c:	e030      	b.n	8002b70 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b16:	d12b      	bne.n	8002b70 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <HAL_TIM_Encoder_MspInit+0xec>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	4a16      	ldr	r2, [pc, #88]	@ (8002b7c <HAL_TIM_Encoder_MspInit+0xec>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b28:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <HAL_TIM_Encoder_MspInit+0xec>)
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <HAL_TIM_Encoder_MspInit+0xec>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8002b7c <HAL_TIM_Encoder_MspInit+0xec>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b44:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <HAL_TIM_Encoder_MspInit+0xec>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8002b50:	2303      	movs	r3, #3
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b60:	2301      	movs	r3, #1
 8002b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f107 031c 	add.w	r3, r7, #28
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4805      	ldr	r0, [pc, #20]	@ (8002b80 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002b6c:	f001 fd50 	bl	8004610 <HAL_GPIO_Init>
}
 8002b70:	bf00      	nop
 8002b72:	3730      	adds	r7, #48	@ 0x30
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40010000 	.word	0x40010000
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40020000 	.word	0x40020000

08002b84 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d10d      	bne.n	8002bb2 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <HAL_TIM_PWM_MspInit+0x40>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	4a09      	ldr	r2, [pc, #36]	@ (8002bc4 <HAL_TIM_PWM_MspInit+0x40>)
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba6:	4b07      	ldr	r3, [pc, #28]	@ (8002bc4 <HAL_TIM_PWM_MspInit+0x40>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40000400 	.word	0x40000400
 8002bc4:	40023800 	.word	0x40023800

08002bc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	@ 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a21      	ldr	r2, [pc, #132]	@ (8002c6c <HAL_TIM_MspPostInit+0xa4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d13b      	bne.n	8002c62 <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	4b20      	ldr	r3, [pc, #128]	@ (8002c70 <HAL_TIM_MspPostInit+0xa8>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c70 <HAL_TIM_MspPostInit+0xa8>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002c70 <HAL_TIM_MspPostInit+0xa8>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b19      	ldr	r3, [pc, #100]	@ (8002c70 <HAL_TIM_MspPostInit+0xa8>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	4a18      	ldr	r2, [pc, #96]	@ (8002c70 <HAL_TIM_MspPostInit+0xa8>)
 8002c10:	f043 0302 	orr.w	r3, r3, #2
 8002c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c16:	4b16      	ldr	r3, [pc, #88]	@ (8002c70 <HAL_TIM_MspPostInit+0xa8>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c22:	23c0      	movs	r3, #192	@ 0xc0
 8002c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c32:	2302      	movs	r3, #2
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c36:	f107 0314 	add.w	r3, r7, #20
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	480d      	ldr	r0, [pc, #52]	@ (8002c74 <HAL_TIM_MspPostInit+0xac>)
 8002c3e:	f001 fce7 	bl	8004610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c42:	2303      	movs	r3, #3
 8002c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	2302      	movs	r3, #2
 8002c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c52:	2302      	movs	r3, #2
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c56:	f107 0314 	add.w	r3, r7, #20
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4806      	ldr	r0, [pc, #24]	@ (8002c78 <HAL_TIM_MspPostInit+0xb0>)
 8002c5e:	f001 fcd7 	bl	8004610 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c62:	bf00      	nop
 8002c64:	3728      	adds	r7, #40	@ 0x28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40020000 	.word	0x40020000
 8002c78:	40020400 	.word	0x40020400

08002c7c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08e      	sub	sp, #56	@ 0x38
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a66      	ldr	r2, [pc, #408]	@ (8002e34 <HAL_UART_MspInit+0x1b8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d12c      	bne.n	8002cf8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	623b      	str	r3, [r7, #32]
 8002ca2:	4b65      	ldr	r3, [pc, #404]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	4a64      	ldr	r2, [pc, #400]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cae:	4b62      	ldr	r3, [pc, #392]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb6:	623b      	str	r3, [r7, #32]
 8002cb8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	4b5e      	ldr	r3, [pc, #376]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	4a5d      	ldr	r2, [pc, #372]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cca:	4b5b      	ldr	r3, [pc, #364]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002cd6:	230c      	movs	r3, #12
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ce6:	2307      	movs	r3, #7
 8002ce8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4852      	ldr	r0, [pc, #328]	@ (8002e3c <HAL_UART_MspInit+0x1c0>)
 8002cf2:	f001 fc8d 	bl	8004610 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002cf6:	e099      	b.n	8002e2c <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a50      	ldr	r2, [pc, #320]	@ (8002e40 <HAL_UART_MspInit+0x1c4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d12d      	bne.n	8002d5e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	4b4c      	ldr	r3, [pc, #304]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	4a4b      	ldr	r2, [pc, #300]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d12:	4b49      	ldr	r3, [pc, #292]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	4b45      	ldr	r3, [pc, #276]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	4a44      	ldr	r2, [pc, #272]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002d28:	f043 0304 	orr.w	r3, r3, #4
 8002d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d2e:	4b42      	ldr	r3, [pc, #264]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8002d3a:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8002d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d40:	2302      	movs	r3, #2
 8002d42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d4c:	2307      	movs	r3, #7
 8002d4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d54:	4619      	mov	r1, r3
 8002d56:	483b      	ldr	r0, [pc, #236]	@ (8002e44 <HAL_UART_MspInit+0x1c8>)
 8002d58:	f001 fc5a 	bl	8004610 <HAL_GPIO_Init>
}
 8002d5c:	e066      	b.n	8002e2c <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a39      	ldr	r2, [pc, #228]	@ (8002e48 <HAL_UART_MspInit+0x1cc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d161      	bne.n	8002e2c <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d68:	2300      	movs	r3, #0
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	4b32      	ldr	r3, [pc, #200]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d70:	4a31      	ldr	r2, [pc, #196]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002d72:	f043 0320 	orr.w	r3, r3, #32
 8002d76:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d78:	4b2f      	ldr	r3, [pc, #188]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	4b2b      	ldr	r3, [pc, #172]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002d8e:	f043 0304 	orr.w	r3, r3, #4
 8002d92:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d94:	4b28      	ldr	r3, [pc, #160]	@ (8002e38 <HAL_UART_MspInit+0x1bc>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002da0:	23c0      	movs	r3, #192	@ 0xc0
 8002da2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dac:	2303      	movs	r3, #3
 8002dae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002db0:	2308      	movs	r3, #8
 8002db2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002db8:	4619      	mov	r1, r3
 8002dba:	4822      	ldr	r0, [pc, #136]	@ (8002e44 <HAL_UART_MspInit+0x1c8>)
 8002dbc:	f001 fc28 	bl	8004610 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002dc0:	4b22      	ldr	r3, [pc, #136]	@ (8002e4c <HAL_UART_MspInit+0x1d0>)
 8002dc2:	4a23      	ldr	r2, [pc, #140]	@ (8002e50 <HAL_UART_MspInit+0x1d4>)
 8002dc4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002dc6:	4b21      	ldr	r3, [pc, #132]	@ (8002e4c <HAL_UART_MspInit+0x1d0>)
 8002dc8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002dcc:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dce:	4b1f      	ldr	r3, [pc, #124]	@ (8002e4c <HAL_UART_MspInit+0x1d0>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <HAL_UART_MspInit+0x1d0>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dda:	4b1c      	ldr	r3, [pc, #112]	@ (8002e4c <HAL_UART_MspInit+0x1d0>)
 8002ddc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002de0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002de2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e4c <HAL_UART_MspInit+0x1d0>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002de8:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <HAL_UART_MspInit+0x1d0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002dee:	4b17      	ldr	r3, [pc, #92]	@ (8002e4c <HAL_UART_MspInit+0x1d0>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002df4:	4b15      	ldr	r3, [pc, #84]	@ (8002e4c <HAL_UART_MspInit+0x1d0>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dfa:	4b14      	ldr	r3, [pc, #80]	@ (8002e4c <HAL_UART_MspInit+0x1d0>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002e00:	4812      	ldr	r0, [pc, #72]	@ (8002e4c <HAL_UART_MspInit+0x1d0>)
 8002e02:	f001 f889 	bl	8003f18 <HAL_DMA_Init>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_UART_MspInit+0x194>
      Error_Handler();
 8002e0c:	f7ff f82c 	bl	8001e68 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a0e      	ldr	r2, [pc, #56]	@ (8002e4c <HAL_UART_MspInit+0x1d0>)
 8002e14:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e16:	4a0d      	ldr	r2, [pc, #52]	@ (8002e4c <HAL_UART_MspInit+0x1d0>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2100      	movs	r1, #0
 8002e20:	2047      	movs	r0, #71	@ 0x47
 8002e22:	f001 f842 	bl	8003eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002e26:	2047      	movs	r0, #71	@ 0x47
 8002e28:	f001 f85b 	bl	8003ee2 <HAL_NVIC_EnableIRQ>
}
 8002e2c:	bf00      	nop
 8002e2e:	3738      	adds	r7, #56	@ 0x38
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40004400 	.word	0x40004400
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40020000 	.word	0x40020000
 8002e40:	40004800 	.word	0x40004800
 8002e44:	40020800 	.word	0x40020800
 8002e48:	40011400 	.word	0x40011400
 8002e4c:	200004ac 	.word	0x200004ac
 8002e50:	40026428 	.word	0x40026428

08002e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e58:	bf00      	nop
 8002e5a:	e7fd      	b.n	8002e58 <NMI_Handler+0x4>

08002e5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e60:	bf00      	nop
 8002e62:	e7fd      	b.n	8002e60 <HardFault_Handler+0x4>

08002e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e68:	bf00      	nop
 8002e6a:	e7fd      	b.n	8002e68 <MemManage_Handler+0x4>

08002e6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e70:	bf00      	nop
 8002e72:	e7fd      	b.n	8002e70 <BusFault_Handler+0x4>

08002e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e78:	bf00      	nop
 8002e7a:	e7fd      	b.n	8002e78 <UsageFault_Handler+0x4>

08002e7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eac:	f000 fc6c 	bl	8003788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick_accumulator += 1;  // Increment by 1 ms
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee4 <SysTick_Handler+0x3c>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee4 <SysTick_Handler+0x3c>)
 8002ebc:	701a      	strb	r2, [r3, #0]
  if(systick_function_enabled){
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee8 <SysTick_Handler+0x40>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d009      	beq.n	8002edc <SysTick_Handler+0x34>
	  if (tick_accumulator >= TICK_INTERVAL) {
 8002ec8:	4b06      	ldr	r3, [pc, #24]	@ (8002ee4 <SysTick_Handler+0x3c>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b13      	cmp	r3, #19
 8002ed0:	d904      	bls.n	8002edc <SysTick_Handler+0x34>
	        tick_accumulator = 0;  // Accumulate remainder
 8002ed2:	4b04      	ldr	r3, [pc, #16]	@ (8002ee4 <SysTick_Handler+0x3c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
	        SysTickFunction();
 8002ed8:	f000 f8f4 	bl	80030c4 <SysTickFunction>
	      }
  }

  CheckEncoderCounts();
 8002edc:	f000 f926 	bl	800312c <CheckEncoderCounts>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002ee0:	bf00      	nop
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	200007e2 	.word	0x200007e2
 8002ee8:	2000050c 	.word	0x2000050c

08002eec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002ef0:	4802      	ldr	r0, [pc, #8]	@ (8002efc <DMA2_Stream1_IRQHandler+0x10>)
 8002ef2:	f001 f951 	bl	8004198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200004ac 	.word	0x200004ac

08002f00 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002f04:	4802      	ldr	r0, [pc, #8]	@ (8002f10 <USART6_IRQHandler+0x10>)
 8002f06:	f004 fc97 	bl	8007838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000464 	.word	0x20000464

08002f14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return 1;
 8002f18:	2301      	movs	r3, #1
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <_kill>:

int _kill(int pid, int sig)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f2e:	f006 f947 	bl	80091c0 <__errno>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2216      	movs	r2, #22
 8002f36:	601a      	str	r2, [r3, #0]
  return -1;
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_exit>:

void _exit (int status)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ffe7 	bl	8002f24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f56:	bf00      	nop
 8002f58:	e7fd      	b.n	8002f56 <_exit+0x12>

08002f5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	e00a      	b.n	8002f82 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f6c:	f3af 8000 	nop.w
 8002f70:	4601      	mov	r1, r0
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	60ba      	str	r2, [r7, #8]
 8002f78:	b2ca      	uxtb	r2, r1
 8002f7a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	dbf0      	blt.n	8002f6c <_read+0x12>
  }

  return len;
 8002f8a:	687b      	ldr	r3, [r7, #4]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	e009      	b.n	8002fba <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	60ba      	str	r2, [r7, #8]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	dbf1      	blt.n	8002fa6 <_write+0x12>
  }
  return len;
 8002fc2:	687b      	ldr	r3, [r7, #4]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <_close>:

int _close(int file)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ff4:	605a      	str	r2, [r3, #4]
  return 0;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <_isatty>:

int _isatty(int file)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800300c:	2301      	movs	r3, #1
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800303c:	4a14      	ldr	r2, [pc, #80]	@ (8003090 <_sbrk+0x5c>)
 800303e:	4b15      	ldr	r3, [pc, #84]	@ (8003094 <_sbrk+0x60>)
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003048:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <_sbrk+0x64>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003050:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <_sbrk+0x64>)
 8003052:	4a12      	ldr	r2, [pc, #72]	@ (800309c <_sbrk+0x68>)
 8003054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003056:	4b10      	ldr	r3, [pc, #64]	@ (8003098 <_sbrk+0x64>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	429a      	cmp	r2, r3
 8003062:	d207      	bcs.n	8003074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003064:	f006 f8ac 	bl	80091c0 <__errno>
 8003068:	4603      	mov	r3, r0
 800306a:	220c      	movs	r2, #12
 800306c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800306e:	f04f 33ff 	mov.w	r3, #4294967295
 8003072:	e009      	b.n	8003088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003074:	4b08      	ldr	r3, [pc, #32]	@ (8003098 <_sbrk+0x64>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800307a:	4b07      	ldr	r3, [pc, #28]	@ (8003098 <_sbrk+0x64>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	4a05      	ldr	r2, [pc, #20]	@ (8003098 <_sbrk+0x64>)
 8003084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003086:	68fb      	ldr	r3, [r7, #12]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20020000 	.word	0x20020000
 8003094:	00000400 	.word	0x00000400
 8003098:	200007e4 	.word	0x200007e4
 800309c:	20000d40 	.word	0x20000d40

080030a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030a4:	4b06      	ldr	r3, [pc, #24]	@ (80030c0 <SystemInit+0x20>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030aa:	4a05      	ldr	r2, [pc, #20]	@ (80030c0 <SystemInit+0x20>)
 80030ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <SysTickFunction>:
extern Motion motion;

extern volatile uint8_t systick_function_enabled;
extern UART_HandleTypeDef huart3;

void SysTickFunction(void) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	ed2d 8b02 	vpush	{d8}
 80030ca:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */
	//--------------------------------------------------------------------
		update_Encoder_Data();
 80030cc:	f7fe f9ec 	bl	80014a8 <update_Encoder_Data>
		Motion_Update(&motion);
 80030d0:	480d      	ldr	r0, [pc, #52]	@ (8003108 <SysTickFunction+0x44>)
 80030d2:	f7fe feef 	bl	8001eb4 <Motion_Update>
		//Sensors_Update(&tof_sensors);

		//UpdateControllers(&controller, Motion_Velocity(&motion), Motion_Omega(&motion), get_steering_feedback());
		UpdateControllers(&controller, Motion_Velocity(&motion), Motion_Omega(&motion), 0);
 80030d6:	480c      	ldr	r0, [pc, #48]	@ (8003108 <SysTickFunction+0x44>)
 80030d8:	f7fe fecc 	bl	8001e74 <Motion_Velocity>
 80030dc:	eeb0 8a40 	vmov.f32	s16, s0
 80030e0:	4809      	ldr	r0, [pc, #36]	@ (8003108 <SysTickFunction+0x44>)
 80030e2:	f7fe fed7 	bl	8001e94 <Motion_Omega>
 80030e6:	eef0 7a40 	vmov.f32	s15, s0
 80030ea:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 800310c <SysTickFunction+0x48>
 80030ee:	eef0 0a67 	vmov.f32	s1, s15
 80030f2:	eeb0 0a48 	vmov.f32	s0, s16
 80030f6:	4806      	ldr	r0, [pc, #24]	@ (8003110 <SysTickFunction+0x4c>)
 80030f8:	f7fd ffca 	bl	8001090 <UpdateControllers>
	//--------------------------------------------------------------------
		//UART_Transmit_EncoderData(&huart3);



}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	ecbd 8b02 	vpop	{d8}
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000510 	.word	0x20000510
 800310c:	00000000 	.word	0x00000000
 8003110:	2000057c 	.word	0x2000057c

08003114 <EnableSysTickFunction>:



void EnableSysTickFunction(void) {
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  //HAL_Delay(10);
  systick_function_enabled = 1;
 8003118:	4b03      	ldr	r3, [pc, #12]	@ (8003128 <EnableSysTickFunction+0x14>)
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10);
 800311e:	200a      	movs	r0, #10
 8003120:	f000 fb52 	bl	80037c8 <HAL_Delay>
}
 8003124:	bf00      	nop
 8003126:	bd80      	pop	{r7, pc}
 8003128:	2000050c 	.word	0x2000050c

0800312c <CheckEncoderCounts>:
	//HAL_Delay(10);
  systick_function_enabled = 0;
  HAL_Delay(10);
}

void CheckEncoderCounts(void){
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
		 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
		 *
		 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
		 * turning. But that'll be approximately never in Micromouse :)
		 */
		if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8003132:	f7fe f991 	bl	8001458 <getRightEncoderCounts>
 8003136:	4603      	mov	r3, r0
 8003138:	461a      	mov	r2, r3
 800313a:	f647 1318 	movw	r3, #31000	@ 0x7918
 800313e:	429a      	cmp	r2, r3
 8003140:	dc15      	bgt.n	800316e <CheckEncoderCounts+0x42>
 8003142:	f7fe f995 	bl	8001470 <getLeftEncoderCounts>
 8003146:	4603      	mov	r3, r0
 8003148:	461a      	mov	r2, r3
 800314a:	f647 1318 	movw	r3, #31000	@ 0x7918
 800314e:	429a      	cmp	r2, r3
 8003150:	dc0d      	bgt.n	800316e <CheckEncoderCounts+0x42>
				|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8003152:	f7fe f981 	bl	8001458 <getRightEncoderCounts>
 8003156:	4603      	mov	r3, r0
 8003158:	461a      	mov	r2, r3
 800315a:	4b0f      	ldr	r3, [pc, #60]	@ (8003198 <CheckEncoderCounts+0x6c>)
 800315c:	429a      	cmp	r2, r3
 800315e:	db06      	blt.n	800316e <CheckEncoderCounts+0x42>
 8003160:	f7fe f986 	bl	8001470 <getLeftEncoderCounts>
 8003164:	4603      	mov	r3, r0
 8003166:	461a      	mov	r2, r3
 8003168:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <CheckEncoderCounts+0x6c>)
 800316a:	429a      	cmp	r2, r3
 800316c:	da10      	bge.n	8003190 <CheckEncoderCounts+0x64>
			int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 800316e:	f7fe f973 	bl	8001458 <getRightEncoderCounts>
 8003172:	4603      	mov	r3, r0
 8003174:	b29c      	uxth	r4, r3
 8003176:	f7fe f97b 	bl	8001470 <getLeftEncoderCounts>
 800317a:	4603      	mov	r3, r0
 800317c:	b29b      	uxth	r3, r3
 800317e:	1ae3      	subs	r3, r4, r3
 8003180:	b29b      	uxth	r3, r3
 8003182:	80fb      	strh	r3, [r7, #6]
			resetEncodersinSystick();
 8003184:	f7fe f980 	bl	8001488 <resetEncodersinSystick>
			TIM1->CNT = (int16_t) difference;
 8003188:	4a04      	ldr	r2, [pc, #16]	@ (800319c <CheckEncoderCounts+0x70>)
 800318a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800318e:	6253      	str	r3, [r2, #36]	@ 0x24
		}
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bd90      	pop	{r4, r7, pc}
 8003198:	ffff86e8 	.word	0xffff86e8
 800319c:	40010000 	.word	0x40010000

080031a0 <UART_Init>:
#include "string.h"
#include "encoders.h"

// UART Initialization function
void UART_Init(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
    // You can customize this function depending on your UART configuration
    // Initialize UART with the desired configuration (baud rate, parity, stop bits, etc.)
    HAL_UART_Init(huart);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f004 faf5 	bl	8007798 <HAL_UART_Init>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80031bc:	f7ff ff70 	bl	80030a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031c0:	480c      	ldr	r0, [pc, #48]	@ (80031f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031c2:	490d      	ldr	r1, [pc, #52]	@ (80031f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031c4:	4a0d      	ldr	r2, [pc, #52]	@ (80031fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031c8:	e002      	b.n	80031d0 <LoopCopyDataInit>

080031ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ce:	3304      	adds	r3, #4

080031d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031d4:	d3f9      	bcc.n	80031ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003200 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031d8:	4c0a      	ldr	r4, [pc, #40]	@ (8003204 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031dc:	e001      	b.n	80031e2 <LoopFillZerobss>

080031de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031e0:	3204      	adds	r2, #4

080031e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031e4:	d3fb      	bcc.n	80031de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80031e6:	f005 fff1 	bl	80091cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031ea:	f7fe fa17 	bl	800161c <main>
  bx  lr    
 80031ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031f8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80031fc:	0800bac4 	.word	0x0800bac4
  ldr r2, =_sbss
 8003200:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003204:	20000d40 	.word	0x20000d40

08003208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003208:	e7fe      	b.n	8003208 <ADC_IRQHandler>
	...

0800320c <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003212:	f000 f9cd 	bl	80035b0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003216:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800321a:	2201      	movs	r2, #1
 800321c:	2178      	movs	r1, #120	@ 0x78
 800321e:	485b      	ldr	r0, [pc, #364]	@ (800338c <SSD1306_Init+0x180>)
 8003220:	f002 f912 	bl	8005448 <HAL_I2C_IsDeviceReady>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800322a:	2300      	movs	r3, #0
 800322c:	e0a9      	b.n	8003382 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800322e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8003232:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003234:	e002      	b.n	800323c <SSD1306_Init+0x30>
		p--;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3b01      	subs	r3, #1
 800323a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f9      	bne.n	8003236 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003242:	22ae      	movs	r2, #174	@ 0xae
 8003244:	2100      	movs	r1, #0
 8003246:	2078      	movs	r0, #120	@ 0x78
 8003248:	f000 fa2e 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800324c:	2220      	movs	r2, #32
 800324e:	2100      	movs	r1, #0
 8003250:	2078      	movs	r0, #120	@ 0x78
 8003252:	f000 fa29 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003256:	2210      	movs	r2, #16
 8003258:	2100      	movs	r1, #0
 800325a:	2078      	movs	r0, #120	@ 0x78
 800325c:	f000 fa24 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003260:	22b0      	movs	r2, #176	@ 0xb0
 8003262:	2100      	movs	r1, #0
 8003264:	2078      	movs	r0, #120	@ 0x78
 8003266:	f000 fa1f 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800326a:	22c8      	movs	r2, #200	@ 0xc8
 800326c:	2100      	movs	r1, #0
 800326e:	2078      	movs	r0, #120	@ 0x78
 8003270:	f000 fa1a 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003274:	2200      	movs	r2, #0
 8003276:	2100      	movs	r1, #0
 8003278:	2078      	movs	r0, #120	@ 0x78
 800327a:	f000 fa15 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800327e:	2210      	movs	r2, #16
 8003280:	2100      	movs	r1, #0
 8003282:	2078      	movs	r0, #120	@ 0x78
 8003284:	f000 fa10 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003288:	2240      	movs	r2, #64	@ 0x40
 800328a:	2100      	movs	r1, #0
 800328c:	2078      	movs	r0, #120	@ 0x78
 800328e:	f000 fa0b 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003292:	2281      	movs	r2, #129	@ 0x81
 8003294:	2100      	movs	r1, #0
 8003296:	2078      	movs	r0, #120	@ 0x78
 8003298:	f000 fa06 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800329c:	22ff      	movs	r2, #255	@ 0xff
 800329e:	2100      	movs	r1, #0
 80032a0:	2078      	movs	r0, #120	@ 0x78
 80032a2:	f000 fa01 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80032a6:	22a1      	movs	r2, #161	@ 0xa1
 80032a8:	2100      	movs	r1, #0
 80032aa:	2078      	movs	r0, #120	@ 0x78
 80032ac:	f000 f9fc 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80032b0:	22a6      	movs	r2, #166	@ 0xa6
 80032b2:	2100      	movs	r1, #0
 80032b4:	2078      	movs	r0, #120	@ 0x78
 80032b6:	f000 f9f7 	bl	80036a8 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80032ba:	22a8      	movs	r2, #168	@ 0xa8
 80032bc:	2100      	movs	r1, #0
 80032be:	2078      	movs	r0, #120	@ 0x78
 80032c0:	f000 f9f2 	bl	80036a8 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 80032c4:	223f      	movs	r2, #63	@ 0x3f
 80032c6:	2100      	movs	r1, #0
 80032c8:	2078      	movs	r0, #120	@ 0x78
 80032ca:	f000 f9ed 	bl	80036a8 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80032ce:	22a4      	movs	r2, #164	@ 0xa4
 80032d0:	2100      	movs	r1, #0
 80032d2:	2078      	movs	r0, #120	@ 0x78
 80032d4:	f000 f9e8 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80032d8:	22d3      	movs	r2, #211	@ 0xd3
 80032da:	2100      	movs	r1, #0
 80032dc:	2078      	movs	r0, #120	@ 0x78
 80032de:	f000 f9e3 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80032e2:	2200      	movs	r2, #0
 80032e4:	2100      	movs	r1, #0
 80032e6:	2078      	movs	r0, #120	@ 0x78
 80032e8:	f000 f9de 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80032ec:	22d5      	movs	r2, #213	@ 0xd5
 80032ee:	2100      	movs	r1, #0
 80032f0:	2078      	movs	r0, #120	@ 0x78
 80032f2:	f000 f9d9 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80032f6:	22f0      	movs	r2, #240	@ 0xf0
 80032f8:	2100      	movs	r1, #0
 80032fa:	2078      	movs	r0, #120	@ 0x78
 80032fc:	f000 f9d4 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003300:	22d9      	movs	r2, #217	@ 0xd9
 8003302:	2100      	movs	r1, #0
 8003304:	2078      	movs	r0, #120	@ 0x78
 8003306:	f000 f9cf 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800330a:	2222      	movs	r2, #34	@ 0x22
 800330c:	2100      	movs	r1, #0
 800330e:	2078      	movs	r0, #120	@ 0x78
 8003310:	f000 f9ca 	bl	80036a8 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003314:	22da      	movs	r2, #218	@ 0xda
 8003316:	2100      	movs	r1, #0
 8003318:	2078      	movs	r0, #120	@ 0x78
 800331a:	f000 f9c5 	bl	80036a8 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 800331e:	2212      	movs	r2, #18
 8003320:	2100      	movs	r1, #0
 8003322:	2078      	movs	r0, #120	@ 0x78
 8003324:	f000 f9c0 	bl	80036a8 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003328:	22db      	movs	r2, #219	@ 0xdb
 800332a:	2100      	movs	r1, #0
 800332c:	2078      	movs	r0, #120	@ 0x78
 800332e:	f000 f9bb 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003332:	2220      	movs	r2, #32
 8003334:	2100      	movs	r1, #0
 8003336:	2078      	movs	r0, #120	@ 0x78
 8003338:	f000 f9b6 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800333c:	228d      	movs	r2, #141	@ 0x8d
 800333e:	2100      	movs	r1, #0
 8003340:	2078      	movs	r0, #120	@ 0x78
 8003342:	f000 f9b1 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003346:	2214      	movs	r2, #20
 8003348:	2100      	movs	r1, #0
 800334a:	2078      	movs	r0, #120	@ 0x78
 800334c:	f000 f9ac 	bl	80036a8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003350:	22af      	movs	r2, #175	@ 0xaf
 8003352:	2100      	movs	r1, #0
 8003354:	2078      	movs	r0, #120	@ 0x78
 8003356:	f000 f9a7 	bl	80036a8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800335a:	222e      	movs	r2, #46	@ 0x2e
 800335c:	2100      	movs	r1, #0
 800335e:	2078      	movs	r0, #120	@ 0x78
 8003360:	f000 f9a2 	bl	80036a8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003364:	2000      	movs	r0, #0
 8003366:	f000 f843 	bl	80033f0 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800336a:	f000 f813 	bl	8003394 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800336e:	4b08      	ldr	r3, [pc, #32]	@ (8003390 <SSD1306_Init+0x184>)
 8003370:	2200      	movs	r2, #0
 8003372:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003374:	4b06      	ldr	r3, [pc, #24]	@ (8003390 <SSD1306_Init+0x184>)
 8003376:	2200      	movs	r2, #0
 8003378:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800337a:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <SSD1306_Init+0x184>)
 800337c:	2201      	movs	r2, #1
 800337e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8003380:	2301      	movs	r3, #1
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000254 	.word	0x20000254
 8003390:	20000be8 	.word	0x20000be8

08003394 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800339a:	2300      	movs	r3, #0
 800339c:	71fb      	strb	r3, [r7, #7]
 800339e:	e01d      	b.n	80033dc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	3b50      	subs	r3, #80	@ 0x50
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	2100      	movs	r1, #0
 80033aa:	2078      	movs	r0, #120	@ 0x78
 80033ac:	f000 f97c 	bl	80036a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80033b0:	2200      	movs	r2, #0
 80033b2:	2100      	movs	r1, #0
 80033b4:	2078      	movs	r0, #120	@ 0x78
 80033b6:	f000 f977 	bl	80036a8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80033ba:	2210      	movs	r2, #16
 80033bc:	2100      	movs	r1, #0
 80033be:	2078      	movs	r0, #120	@ 0x78
 80033c0:	f000 f972 	bl	80036a8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	01db      	lsls	r3, r3, #7
 80033c8:	4a08      	ldr	r2, [pc, #32]	@ (80033ec <SSD1306_UpdateScreen+0x58>)
 80033ca:	441a      	add	r2, r3
 80033cc:	2380      	movs	r3, #128	@ 0x80
 80033ce:	2140      	movs	r1, #64	@ 0x40
 80033d0:	2078      	movs	r0, #120	@ 0x78
 80033d2:	f000 f903 	bl	80035dc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	3301      	adds	r3, #1
 80033da:	71fb      	strb	r3, [r7, #7]
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	2b07      	cmp	r3, #7
 80033e0:	d9de      	bls.n	80033a0 <SSD1306_UpdateScreen+0xc>
	}
}
 80033e2:	bf00      	nop
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	200007e8 	.word	0x200007e8

080033f0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <SSD1306_Fill+0x14>
 8003400:	2300      	movs	r3, #0
 8003402:	e000      	b.n	8003406 <SSD1306_Fill+0x16>
 8003404:	23ff      	movs	r3, #255	@ 0xff
 8003406:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800340a:	4619      	mov	r1, r3
 800340c:	4803      	ldr	r0, [pc, #12]	@ (800341c <SSD1306_Fill+0x2c>)
 800340e:	f005 fe72 	bl	80090f6 <memset>
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200007e8 	.word	0x200007e8

08003420 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	80fb      	strh	r3, [r7, #6]
 800342a:	460b      	mov	r3, r1
 800342c:	80bb      	strh	r3, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	70fb      	strb	r3, [r7, #3]
	if (
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	2b7f      	cmp	r3, #127	@ 0x7f
 8003436:	d848      	bhi.n	80034ca <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003438:	88bb      	ldrh	r3, [r7, #4]
 800343a:	2b3f      	cmp	r3, #63	@ 0x3f
 800343c:	d845      	bhi.n	80034ca <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800343e:	4b26      	ldr	r3, [pc, #152]	@ (80034d8 <SSD1306_DrawPixel+0xb8>)
 8003440:	791b      	ldrb	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d006      	beq.n	8003454 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf0c      	ite	eq
 800344c:	2301      	moveq	r3, #1
 800344e:	2300      	movne	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d11a      	bne.n	8003490 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800345a:	88fa      	ldrh	r2, [r7, #6]
 800345c:	88bb      	ldrh	r3, [r7, #4]
 800345e:	08db      	lsrs	r3, r3, #3
 8003460:	b298      	uxth	r0, r3
 8003462:	4603      	mov	r3, r0
 8003464:	01db      	lsls	r3, r3, #7
 8003466:	4413      	add	r3, r2
 8003468:	4a1c      	ldr	r2, [pc, #112]	@ (80034dc <SSD1306_DrawPixel+0xbc>)
 800346a:	5cd3      	ldrb	r3, [r2, r3]
 800346c:	b25a      	sxtb	r2, r3
 800346e:	88bb      	ldrh	r3, [r7, #4]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	2101      	movs	r1, #1
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	b25b      	sxtb	r3, r3
 800347c:	4313      	orrs	r3, r2
 800347e:	b259      	sxtb	r1, r3
 8003480:	88fa      	ldrh	r2, [r7, #6]
 8003482:	4603      	mov	r3, r0
 8003484:	01db      	lsls	r3, r3, #7
 8003486:	4413      	add	r3, r2
 8003488:	b2c9      	uxtb	r1, r1
 800348a:	4a14      	ldr	r2, [pc, #80]	@ (80034dc <SSD1306_DrawPixel+0xbc>)
 800348c:	54d1      	strb	r1, [r2, r3]
 800348e:	e01d      	b.n	80034cc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003490:	88fa      	ldrh	r2, [r7, #6]
 8003492:	88bb      	ldrh	r3, [r7, #4]
 8003494:	08db      	lsrs	r3, r3, #3
 8003496:	b298      	uxth	r0, r3
 8003498:	4603      	mov	r3, r0
 800349a:	01db      	lsls	r3, r3, #7
 800349c:	4413      	add	r3, r2
 800349e:	4a0f      	ldr	r2, [pc, #60]	@ (80034dc <SSD1306_DrawPixel+0xbc>)
 80034a0:	5cd3      	ldrb	r3, [r2, r3]
 80034a2:	b25a      	sxtb	r2, r3
 80034a4:	88bb      	ldrh	r3, [r7, #4]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	2101      	movs	r1, #1
 80034ac:	fa01 f303 	lsl.w	r3, r1, r3
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	b25b      	sxtb	r3, r3
 80034b6:	4013      	ands	r3, r2
 80034b8:	b259      	sxtb	r1, r3
 80034ba:	88fa      	ldrh	r2, [r7, #6]
 80034bc:	4603      	mov	r3, r0
 80034be:	01db      	lsls	r3, r3, #7
 80034c0:	4413      	add	r3, r2
 80034c2:	b2c9      	uxtb	r1, r1
 80034c4:	4a05      	ldr	r2, [pc, #20]	@ (80034dc <SSD1306_DrawPixel+0xbc>)
 80034c6:	54d1      	strb	r1, [r2, r3]
 80034c8:	e000      	b.n	80034cc <SSD1306_DrawPixel+0xac>
		return;
 80034ca:	bf00      	nop
	}
}
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000be8 	.word	0x20000be8
 80034dc:	200007e8 	.word	0x200007e8

080034e0 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60ba      	str	r2, [r7, #8]
 80034e8:	461a      	mov	r2, r3
 80034ea:	4603      	mov	r3, r0
 80034ec:	81fb      	strh	r3, [r7, #14]
 80034ee:	460b      	mov	r3, r1
 80034f0:	81bb      	strh	r3, [r7, #12]
 80034f2:	4613      	mov	r3, r2
 80034f4:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80034f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034fa:	3307      	adds	r3, #7
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	da00      	bge.n	8003502 <SSD1306_DrawBitmap+0x22>
 8003500:	3307      	adds	r3, #7
 8003502:	10db      	asrs	r3, r3, #3
 8003504:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 800350a:	2300      	movs	r3, #0
 800350c:	82bb      	strh	r3, [r7, #20]
 800350e:	e044      	b.n	800359a <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8003510:	2300      	movs	r3, #0
 8003512:	827b      	strh	r3, [r7, #18]
 8003514:	e02f      	b.n	8003576 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8003516:	8a7b      	ldrh	r3, [r7, #18]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8003520:	7dfb      	ldrb	r3, [r7, #23]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
 8003526:	e012      	b.n	800354e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8003528:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800352c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003530:	fb03 f202 	mul.w	r2, r3, r2
 8003534:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003538:	2b00      	cmp	r3, #0
 800353a:	da00      	bge.n	800353e <SSD1306_DrawBitmap+0x5e>
 800353c:	3307      	adds	r3, #7
 800353e:	10db      	asrs	r3, r3, #3
 8003540:	b21b      	sxth	r3, r3
 8003542:	4413      	add	r3, r2
 8003544:	461a      	mov	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4413      	add	r3, r2
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800354e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003552:	2b00      	cmp	r3, #0
 8003554:	da09      	bge.n	800356a <SSD1306_DrawBitmap+0x8a>
 8003556:	89fa      	ldrh	r2, [r7, #14]
 8003558:	8a7b      	ldrh	r3, [r7, #18]
 800355a:	4413      	add	r3, r2
 800355c:	b29b      	uxth	r3, r3
 800355e:	89b9      	ldrh	r1, [r7, #12]
 8003560:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff5b 	bl	8003420 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800356a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800356e:	b29b      	uxth	r3, r3
 8003570:	3301      	adds	r3, #1
 8003572:	b29b      	uxth	r3, r3
 8003574:	827b      	strh	r3, [r7, #18]
 8003576:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800357a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800357e:	429a      	cmp	r2, r3
 8003580:	dbc9      	blt.n	8003516 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8003582:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003586:	b29b      	uxth	r3, r3
 8003588:	3301      	adds	r3, #1
 800358a:	b29b      	uxth	r3, r3
 800358c:	82bb      	strh	r3, [r7, #20]
 800358e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003592:	b29b      	uxth	r3, r3
 8003594:	3301      	adds	r3, #1
 8003596:	b29b      	uxth	r3, r3
 8003598:	81bb      	strh	r3, [r7, #12]
 800359a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800359e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	dbb4      	blt.n	8003510 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80035a6:	bf00      	nop
 80035a8:	bf00      	nop
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80035b6:	4b08      	ldr	r3, [pc, #32]	@ (80035d8 <ssd1306_I2C_Init+0x28>)
 80035b8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80035ba:	e002      	b.n	80035c2 <ssd1306_I2C_Init+0x12>
		p--;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3b01      	subs	r3, #1
 80035c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f9      	bne.n	80035bc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	0003d090 	.word	0x0003d090

080035dc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b0c7      	sub	sp, #284	@ 0x11c
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	4604      	mov	r4, r0
 80035e4:	4608      	mov	r0, r1
 80035e6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80035ea:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80035ee:	600a      	str	r2, [r1, #0]
 80035f0:	4619      	mov	r1, r3
 80035f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80035f6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80035fa:	4622      	mov	r2, r4
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003602:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003606:	4602      	mov	r2, r0
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800360e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003612:	460a      	mov	r2, r1
 8003614:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003616:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800361a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800361e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003622:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8003626:	7812      	ldrb	r2, [r2, #0]
 8003628:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800362a:	2300      	movs	r3, #0
 800362c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003630:	e015      	b.n	800365e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8003632:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003636:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800363a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	441a      	add	r2, r3
 8003642:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003646:	3301      	adds	r3, #1
 8003648:	7811      	ldrb	r1, [r2, #0]
 800364a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800364e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8003652:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003654:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003658:	3301      	adds	r3, #1
 800365a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800365e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003662:	b29b      	uxth	r3, r3
 8003664:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003668:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800366c:	8812      	ldrh	r2, [r2, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d8df      	bhi.n	8003632 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8003672:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003676:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	b299      	uxth	r1, r3
 800367e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003682:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	3301      	adds	r3, #1
 800368a:	b29b      	uxth	r3, r3
 800368c:	f107 020c 	add.w	r2, r7, #12
 8003690:	200a      	movs	r0, #10
 8003692:	9000      	str	r0, [sp, #0]
 8003694:	4803      	ldr	r0, [pc, #12]	@ (80036a4 <ssd1306_I2C_WriteMulti+0xc8>)
 8003696:	f001 faad 	bl	8004bf4 <HAL_I2C_Master_Transmit>
}
 800369a:	bf00      	nop
 800369c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd90      	pop	{r4, r7, pc}
 80036a4:	20000254 	.word	0x20000254

080036a8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
 80036b2:	460b      	mov	r3, r1
 80036b4:	71bb      	strb	r3, [r7, #6]
 80036b6:	4613      	mov	r3, r2
 80036b8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80036ba:	79bb      	ldrb	r3, [r7, #6]
 80036bc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80036be:	797b      	ldrb	r3, [r7, #5]
 80036c0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	b299      	uxth	r1, r3
 80036c6:	f107 020c 	add.w	r2, r7, #12
 80036ca:	230a      	movs	r3, #10
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	2302      	movs	r3, #2
 80036d0:	4803      	ldr	r0, [pc, #12]	@ (80036e0 <ssd1306_I2C_Write+0x38>)
 80036d2:	f001 fa8f 	bl	8004bf4 <HAL_I2C_Master_Transmit>
}
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000254 	.word	0x20000254

080036e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003724 <HAL_Init+0x40>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003724 <HAL_Init+0x40>)
 80036ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <HAL_Init+0x40>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003724 <HAL_Init+0x40>)
 80036fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003700:	4b08      	ldr	r3, [pc, #32]	@ (8003724 <HAL_Init+0x40>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a07      	ldr	r2, [pc, #28]	@ (8003724 <HAL_Init+0x40>)
 8003706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800370a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800370c:	2003      	movs	r0, #3
 800370e:	f000 fbc1 	bl	8003e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003712:	2000      	movs	r0, #0
 8003714:	f000 f808 	bl	8003728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003718:	f7ff f8b0 	bl	800287c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40023c00 	.word	0x40023c00

08003728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003730:	4b12      	ldr	r3, [pc, #72]	@ (800377c <HAL_InitTick+0x54>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4b12      	ldr	r3, [pc, #72]	@ (8003780 <HAL_InitTick+0x58>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	4619      	mov	r1, r3
 800373a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800373e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003742:	fbb2 f3f3 	udiv	r3, r2, r3
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fbd9 	bl	8003efe <HAL_SYSTICK_Config>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e00e      	b.n	8003774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b0f      	cmp	r3, #15
 800375a:	d80a      	bhi.n	8003772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800375c:	2200      	movs	r2, #0
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	f04f 30ff 	mov.w	r0, #4294967295
 8003764:	f000 fba1 	bl	8003eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003768:	4a06      	ldr	r2, [pc, #24]	@ (8003784 <HAL_InitTick+0x5c>)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	e000      	b.n	8003774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	20000000 	.word	0x20000000
 8003780:	20000008 	.word	0x20000008
 8003784:	20000004 	.word	0x20000004

08003788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800378c:	4b06      	ldr	r3, [pc, #24]	@ (80037a8 <HAL_IncTick+0x20>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	4b06      	ldr	r3, [pc, #24]	@ (80037ac <HAL_IncTick+0x24>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4413      	add	r3, r2
 8003798:	4a04      	ldr	r2, [pc, #16]	@ (80037ac <HAL_IncTick+0x24>)
 800379a:	6013      	str	r3, [r2, #0]
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20000008 	.word	0x20000008
 80037ac:	20000bf0 	.word	0x20000bf0

080037b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  return uwTick;
 80037b4:	4b03      	ldr	r3, [pc, #12]	@ (80037c4 <HAL_GetTick+0x14>)
 80037b6:	681b      	ldr	r3, [r3, #0]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	20000bf0 	.word	0x20000bf0

080037c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037d0:	f7ff ffee 	bl	80037b0 <HAL_GetTick>
 80037d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d005      	beq.n	80037ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037e2:	4b0a      	ldr	r3, [pc, #40]	@ (800380c <HAL_Delay+0x44>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037ee:	bf00      	nop
 80037f0:	f7ff ffde 	bl	80037b0 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d8f7      	bhi.n	80037f0 <HAL_Delay+0x28>
  {
  }
}
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000008 	.word	0x20000008

08003810 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e033      	b.n	800388e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff f84c 	bl	80028cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	d118      	bne.n	8003880 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003856:	f023 0302 	bic.w	r3, r3, #2
 800385a:	f043 0202 	orr.w	r2, r3, #2
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f94a 	bl	8003afc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	f023 0303 	bic.w	r3, r3, #3
 8003876:	f043 0201 	orr.w	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	641a      	str	r2, [r3, #64]	@ 0x40
 800387e:	e001      	b.n	8003884 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800388c:	7bfb      	ldrb	r3, [r7, #15]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x1c>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e113      	b.n	8003adc <HAL_ADC_ConfigChannel+0x244>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b09      	cmp	r3, #9
 80038c2:	d925      	bls.n	8003910 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68d9      	ldr	r1, [r3, #12]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	4613      	mov	r3, r2
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	4413      	add	r3, r2
 80038d8:	3b1e      	subs	r3, #30
 80038da:	2207      	movs	r2, #7
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43da      	mvns	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	400a      	ands	r2, r1
 80038e8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68d9      	ldr	r1, [r3, #12]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	4618      	mov	r0, r3
 80038fc:	4603      	mov	r3, r0
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	4403      	add	r3, r0
 8003902:	3b1e      	subs	r3, #30
 8003904:	409a      	lsls	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	e022      	b.n	8003956 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6919      	ldr	r1, [r3, #16]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	4613      	mov	r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	4413      	add	r3, r2
 8003924:	2207      	movs	r2, #7
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43da      	mvns	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	400a      	ands	r2, r1
 8003932:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6919      	ldr	r1, [r3, #16]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	b29b      	uxth	r3, r3
 8003944:	4618      	mov	r0, r3
 8003946:	4603      	mov	r3, r0
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	4403      	add	r3, r0
 800394c:	409a      	lsls	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b06      	cmp	r3, #6
 800395c:	d824      	bhi.n	80039a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	3b05      	subs	r3, #5
 8003970:	221f      	movs	r2, #31
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43da      	mvns	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	400a      	ands	r2, r1
 800397e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	4618      	mov	r0, r3
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	3b05      	subs	r3, #5
 800399a:	fa00 f203 	lsl.w	r2, r0, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80039a6:	e04c      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d824      	bhi.n	80039fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	3b23      	subs	r3, #35	@ 0x23
 80039c2:	221f      	movs	r2, #31
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43da      	mvns	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	400a      	ands	r2, r1
 80039d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	4618      	mov	r0, r3
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	3b23      	subs	r3, #35	@ 0x23
 80039ec:	fa00 f203 	lsl.w	r2, r0, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80039f8:	e023      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	3b41      	subs	r3, #65	@ 0x41
 8003a0c:	221f      	movs	r2, #31
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43da      	mvns	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	400a      	ands	r2, r1
 8003a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	4618      	mov	r0, r3
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	3b41      	subs	r3, #65	@ 0x41
 8003a36:	fa00 f203 	lsl.w	r2, r0, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a42:	4b29      	ldr	r3, [pc, #164]	@ (8003ae8 <HAL_ADC_ConfigChannel+0x250>)
 8003a44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a28      	ldr	r2, [pc, #160]	@ (8003aec <HAL_ADC_ConfigChannel+0x254>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d10f      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x1d8>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b12      	cmp	r3, #18
 8003a56:	d10b      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1d      	ldr	r2, [pc, #116]	@ (8003aec <HAL_ADC_ConfigChannel+0x254>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d12b      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x23a>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003af0 <HAL_ADC_ConfigChannel+0x258>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d003      	beq.n	8003a8c <HAL_ADC_ConfigChannel+0x1f4>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b11      	cmp	r3, #17
 8003a8a:	d122      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a11      	ldr	r2, [pc, #68]	@ (8003af0 <HAL_ADC_ConfigChannel+0x258>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d111      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003aae:	4b11      	ldr	r3, [pc, #68]	@ (8003af4 <HAL_ADC_ConfigChannel+0x25c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a11      	ldr	r2, [pc, #68]	@ (8003af8 <HAL_ADC_ConfigChannel+0x260>)
 8003ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab8:	0c9a      	lsrs	r2, r3, #18
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ac4:	e002      	b.n	8003acc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f9      	bne.n	8003ac6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	40012300 	.word	0x40012300
 8003aec:	40012000 	.word	0x40012000
 8003af0:	10000012 	.word	0x10000012
 8003af4:	20000000 	.word	0x20000000
 8003af8:	431bde83 	.word	0x431bde83

08003afc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b04:	4b79      	ldr	r3, [pc, #484]	@ (8003cec <ADC_Init+0x1f0>)
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6859      	ldr	r1, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	021a      	lsls	r2, r3, #8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003b54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6899      	ldr	r1, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8e:	4a58      	ldr	r2, [pc, #352]	@ (8003cf0 <ADC_Init+0x1f4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d022      	beq.n	8003bda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ba2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6899      	ldr	r1, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003bc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6899      	ldr	r1, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	e00f      	b.n	8003bfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003be8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003bf8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0202 	bic.w	r2, r2, #2
 8003c08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6899      	ldr	r1, [r3, #8]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	7e1b      	ldrb	r3, [r3, #24]
 8003c14:	005a      	lsls	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01b      	beq.n	8003c60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c36:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003c46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6859      	ldr	r1, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	3b01      	subs	r3, #1
 8003c54:	035a      	lsls	r2, r3, #13
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]
 8003c5e:	e007      	b.n	8003c70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c6e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	051a      	lsls	r2, r3, #20
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003ca4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6899      	ldr	r1, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003cb2:	025a      	lsls	r2, r3, #9
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6899      	ldr	r1, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	029a      	lsls	r2, r3, #10
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	609a      	str	r2, [r3, #8]
}
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	40012300 	.word	0x40012300
 8003cf0:	0f000001 	.word	0x0f000001

08003cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d04:	4b0c      	ldr	r3, [pc, #48]	@ (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d10:	4013      	ands	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d26:	4a04      	ldr	r2, [pc, #16]	@ (8003d38 <__NVIC_SetPriorityGrouping+0x44>)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	60d3      	str	r3, [r2, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d40:	4b04      	ldr	r3, [pc, #16]	@ (8003d54 <__NVIC_GetPriorityGrouping+0x18>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	0a1b      	lsrs	r3, r3, #8
 8003d46:	f003 0307 	and.w	r3, r3, #7
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000ed00 	.word	0xe000ed00

08003d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	db0b      	blt.n	8003d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	f003 021f 	and.w	r2, r3, #31
 8003d70:	4907      	ldr	r1, [pc, #28]	@ (8003d90 <__NVIC_EnableIRQ+0x38>)
 8003d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	2001      	movs	r0, #1
 8003d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	e000e100 	.word	0xe000e100

08003d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	6039      	str	r1, [r7, #0]
 8003d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	db0a      	blt.n	8003dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	490c      	ldr	r1, [pc, #48]	@ (8003de0 <__NVIC_SetPriority+0x4c>)
 8003dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db2:	0112      	lsls	r2, r2, #4
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	440b      	add	r3, r1
 8003db8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dbc:	e00a      	b.n	8003dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	4908      	ldr	r1, [pc, #32]	@ (8003de4 <__NVIC_SetPriority+0x50>)
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	3b04      	subs	r3, #4
 8003dcc:	0112      	lsls	r2, r2, #4
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	761a      	strb	r2, [r3, #24]
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	e000e100 	.word	0xe000e100
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	@ 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f1c3 0307 	rsb	r3, r3, #7
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	bf28      	it	cs
 8003e06:	2304      	movcs	r3, #4
 8003e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d902      	bls.n	8003e18 <NVIC_EncodePriority+0x30>
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3b03      	subs	r3, #3
 8003e16:	e000      	b.n	8003e1a <NVIC_EncodePriority+0x32>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	fa02 f303 	lsl.w	r3, r2, r3
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e30:	f04f 31ff 	mov.w	r1, #4294967295
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3a:	43d9      	mvns	r1, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e40:	4313      	orrs	r3, r2
         );
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3724      	adds	r7, #36	@ 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e60:	d301      	bcc.n	8003e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00f      	b.n	8003e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e66:	4a0a      	ldr	r2, [pc, #40]	@ (8003e90 <SysTick_Config+0x40>)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e6e:	210f      	movs	r1, #15
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	f7ff ff8e 	bl	8003d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e78:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <SysTick_Config+0x40>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e7e:	4b04      	ldr	r3, [pc, #16]	@ (8003e90 <SysTick_Config+0x40>)
 8003e80:	2207      	movs	r2, #7
 8003e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	e000e010 	.word	0xe000e010

08003e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff ff29 	bl	8003cf4 <__NVIC_SetPriorityGrouping>
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ebc:	f7ff ff3e 	bl	8003d3c <__NVIC_GetPriorityGrouping>
 8003ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	6978      	ldr	r0, [r7, #20]
 8003ec8:	f7ff ff8e 	bl	8003de8 <NVIC_EncodePriority>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ff5d 	bl	8003d94 <__NVIC_SetPriority>
}
 8003eda:	bf00      	nop
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b082      	sub	sp, #8
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ff31 	bl	8003d58 <__NVIC_EnableIRQ>
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b082      	sub	sp, #8
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff ffa2 	bl	8003e50 <SysTick_Config>
 8003f0c:	4603      	mov	r3, r0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f24:	f7ff fc44 	bl	80037b0 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e099      	b.n	8004068 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f54:	e00f      	b.n	8003f76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f56:	f7ff fc2b 	bl	80037b0 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b05      	cmp	r3, #5
 8003f62:	d908      	bls.n	8003f76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e078      	b.n	8004068 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e8      	bne.n	8003f56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4b38      	ldr	r3, [pc, #224]	@ (8004070 <HAL_DMA_Init+0x158>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d107      	bne.n	8003fe0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0307 	bic.w	r3, r3, #7
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	2b04      	cmp	r3, #4
 8004008:	d117      	bne.n	800403a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00e      	beq.n	800403a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fa7b 	bl	8004518 <DMA_CheckFifoParam>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2240      	movs	r2, #64	@ 0x40
 800402c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004036:	2301      	movs	r3, #1
 8004038:	e016      	b.n	8004068 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa32 	bl	80044ac <DMA_CalcBaseAndBitshift>
 8004048:	4603      	mov	r3, r0
 800404a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004050:	223f      	movs	r2, #63	@ 0x3f
 8004052:	409a      	lsls	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	f010803f 	.word	0xf010803f

08004074 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004080:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004082:	f7ff fb95 	bl	80037b0 <HAL_GetTick>
 8004086:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d008      	beq.n	80040a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2280      	movs	r2, #128	@ 0x80
 8004098:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e052      	b.n	800414c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0216 	bic.w	r2, r2, #22
 80040b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d103      	bne.n	80040d6 <HAL_DMA_Abort+0x62>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0208 	bic.w	r2, r2, #8
 80040e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0201 	bic.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040f6:	e013      	b.n	8004120 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040f8:	f7ff fb5a 	bl	80037b0 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b05      	cmp	r3, #5
 8004104:	d90c      	bls.n	8004120 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2203      	movs	r2, #3
 8004110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e015      	b.n	800414c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e4      	bne.n	80040f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004132:	223f      	movs	r2, #63	@ 0x3f
 8004134:	409a      	lsls	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d004      	beq.n	8004172 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2280      	movs	r2, #128	@ 0x80
 800416c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e00c      	b.n	800418c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2205      	movs	r2, #5
 8004176:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041a4:	4b8e      	ldr	r3, [pc, #568]	@ (80043e0 <HAL_DMA_IRQHandler+0x248>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a8e      	ldr	r2, [pc, #568]	@ (80043e4 <HAL_DMA_IRQHandler+0x24c>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	0a9b      	lsrs	r3, r3, #10
 80041b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c2:	2208      	movs	r2, #8
 80041c4:	409a      	lsls	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01a      	beq.n	8004204 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d013      	beq.n	8004204 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0204 	bic.w	r2, r2, #4
 80041ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f0:	2208      	movs	r2, #8
 80041f2:	409a      	lsls	r2, r3
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fc:	f043 0201 	orr.w	r2, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004208:	2201      	movs	r2, #1
 800420a:	409a      	lsls	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4013      	ands	r3, r2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d012      	beq.n	800423a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004226:	2201      	movs	r2, #1
 8004228:	409a      	lsls	r2, r3
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004232:	f043 0202 	orr.w	r2, r3, #2
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423e:	2204      	movs	r2, #4
 8004240:	409a      	lsls	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4013      	ands	r3, r2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d012      	beq.n	8004270 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00b      	beq.n	8004270 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800425c:	2204      	movs	r2, #4
 800425e:	409a      	lsls	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004268:	f043 0204 	orr.w	r2, r3, #4
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004274:	2210      	movs	r2, #16
 8004276:	409a      	lsls	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d043      	beq.n	8004308 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d03c      	beq.n	8004308 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004292:	2210      	movs	r2, #16
 8004294:	409a      	lsls	r2, r3
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d018      	beq.n	80042da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d108      	bne.n	80042c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d024      	beq.n	8004308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	4798      	blx	r3
 80042c6:	e01f      	b.n	8004308 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d01b      	beq.n	8004308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4798      	blx	r3
 80042d8:	e016      	b.n	8004308 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d107      	bne.n	80042f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0208 	bic.w	r2, r2, #8
 80042f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800430c:	2220      	movs	r2, #32
 800430e:	409a      	lsls	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 808f 	beq.w	8004438 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 8087 	beq.w	8004438 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800432e:	2220      	movs	r2, #32
 8004330:	409a      	lsls	r2, r3
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b05      	cmp	r3, #5
 8004340:	d136      	bne.n	80043b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0216 	bic.w	r2, r2, #22
 8004350:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004360:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d103      	bne.n	8004372 <HAL_DMA_IRQHandler+0x1da>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800436e:	2b00      	cmp	r3, #0
 8004370:	d007      	beq.n	8004382 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0208 	bic.w	r2, r2, #8
 8004380:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004386:	223f      	movs	r2, #63	@ 0x3f
 8004388:	409a      	lsls	r2, r3
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d07e      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	4798      	blx	r3
        }
        return;
 80043ae:	e079      	b.n	80044a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01d      	beq.n	80043fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10d      	bne.n	80043e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d031      	beq.n	8004438 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
 80043dc:	e02c      	b.n	8004438 <HAL_DMA_IRQHandler+0x2a0>
 80043de:	bf00      	nop
 80043e0:	20000000 	.word	0x20000000
 80043e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d023      	beq.n	8004438 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	4798      	blx	r3
 80043f8:	e01e      	b.n	8004438 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10f      	bne.n	8004428 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0210 	bic.w	r2, r2, #16
 8004416:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800443c:	2b00      	cmp	r3, #0
 800443e:	d032      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d022      	beq.n	8004492 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2205      	movs	r2, #5
 8004450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0201 	bic.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	3301      	adds	r3, #1
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	429a      	cmp	r2, r3
 800446e:	d307      	bcc.n	8004480 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f2      	bne.n	8004464 <HAL_DMA_IRQHandler+0x2cc>
 800447e:	e000      	b.n	8004482 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004480:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	4798      	blx	r3
 80044a2:	e000      	b.n	80044a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80044a4:	bf00      	nop
    }
  }
}
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	3b10      	subs	r3, #16
 80044bc:	4a14      	ldr	r2, [pc, #80]	@ (8004510 <DMA_CalcBaseAndBitshift+0x64>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044c6:	4a13      	ldr	r2, [pc, #76]	@ (8004514 <DMA_CalcBaseAndBitshift+0x68>)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4413      	add	r3, r2
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d909      	bls.n	80044ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044e2:	f023 0303 	bic.w	r3, r3, #3
 80044e6:	1d1a      	adds	r2, r3, #4
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80044ec:	e007      	b.n	80044fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80044f6:	f023 0303 	bic.w	r3, r3, #3
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	aaaaaaab 	.word	0xaaaaaaab
 8004514:	0800b734 	.word	0x0800b734

08004518 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004528:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d11f      	bne.n	8004572 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d856      	bhi.n	80045e6 <DMA_CheckFifoParam+0xce>
 8004538:	a201      	add	r2, pc, #4	@ (adr r2, 8004540 <DMA_CheckFifoParam+0x28>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004551 	.word	0x08004551
 8004544:	08004563 	.word	0x08004563
 8004548:	08004551 	.word	0x08004551
 800454c:	080045e7 	.word	0x080045e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004554:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d046      	beq.n	80045ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004560:	e043      	b.n	80045ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004566:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800456a:	d140      	bne.n	80045ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004570:	e03d      	b.n	80045ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800457a:	d121      	bne.n	80045c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b03      	cmp	r3, #3
 8004580:	d837      	bhi.n	80045f2 <DMA_CheckFifoParam+0xda>
 8004582:	a201      	add	r2, pc, #4	@ (adr r2, 8004588 <DMA_CheckFifoParam+0x70>)
 8004584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004588:	08004599 	.word	0x08004599
 800458c:	0800459f 	.word	0x0800459f
 8004590:	08004599 	.word	0x08004599
 8004594:	080045b1 	.word	0x080045b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	73fb      	strb	r3, [r7, #15]
      break;
 800459c:	e030      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d025      	beq.n	80045f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045ae:	e022      	b.n	80045f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045b8:	d11f      	bne.n	80045fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045be:	e01c      	b.n	80045fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d903      	bls.n	80045ce <DMA_CheckFifoParam+0xb6>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b03      	cmp	r3, #3
 80045ca:	d003      	beq.n	80045d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045cc:	e018      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]
      break;
 80045d2:	e015      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00e      	beq.n	80045fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	73fb      	strb	r3, [r7, #15]
      break;
 80045e4:	e00b      	b.n	80045fe <DMA_CheckFifoParam+0xe6>
      break;
 80045e6:	bf00      	nop
 80045e8:	e00a      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;
 80045ea:	bf00      	nop
 80045ec:	e008      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;
 80045ee:	bf00      	nop
 80045f0:	e006      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;
 80045f2:	bf00      	nop
 80045f4:	e004      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;
 80045f6:	bf00      	nop
 80045f8:	e002      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;   
 80045fa:	bf00      	nop
 80045fc:	e000      	b.n	8004600 <DMA_CheckFifoParam+0xe8>
      break;
 80045fe:	bf00      	nop
    }
  } 
  
  return status; 
 8004600:	7bfb      	ldrb	r3, [r7, #15]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop

08004610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004610:	b480      	push	{r7}
 8004612:	b089      	sub	sp, #36	@ 0x24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004622:	2300      	movs	r3, #0
 8004624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	e165      	b.n	80048f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800462c:	2201      	movs	r2, #1
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4013      	ands	r3, r2
 800463e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	429a      	cmp	r2, r3
 8004646:	f040 8154 	bne.w	80048f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	2b01      	cmp	r3, #1
 8004654:	d005      	beq.n	8004662 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800465e:	2b02      	cmp	r3, #2
 8004660:	d130      	bne.n	80046c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	2203      	movs	r2, #3
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43db      	mvns	r3, r3
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	4013      	ands	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4313      	orrs	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004698:	2201      	movs	r2, #1
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	4013      	ands	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	f003 0201 	and.w	r2, r3, #1
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d017      	beq.n	8004700 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	2203      	movs	r2, #3
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4013      	ands	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d123      	bne.n	8004754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	08da      	lsrs	r2, r3, #3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3208      	adds	r2, #8
 8004714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	220f      	movs	r2, #15
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4013      	ands	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	08da      	lsrs	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3208      	adds	r2, #8
 800474e:	69b9      	ldr	r1, [r7, #24]
 8004750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	2203      	movs	r2, #3
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	43db      	mvns	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 0203 	and.w	r2, r3, #3
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4313      	orrs	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 80ae 	beq.w	80048f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	4b5d      	ldr	r3, [pc, #372]	@ (8004910 <HAL_GPIO_Init+0x300>)
 800479c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479e:	4a5c      	ldr	r2, [pc, #368]	@ (8004910 <HAL_GPIO_Init+0x300>)
 80047a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80047a6:	4b5a      	ldr	r3, [pc, #360]	@ (8004910 <HAL_GPIO_Init+0x300>)
 80047a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047b2:	4a58      	ldr	r2, [pc, #352]	@ (8004914 <HAL_GPIO_Init+0x304>)
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	089b      	lsrs	r3, r3, #2
 80047b8:	3302      	adds	r3, #2
 80047ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	220f      	movs	r2, #15
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43db      	mvns	r3, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4013      	ands	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a4f      	ldr	r2, [pc, #316]	@ (8004918 <HAL_GPIO_Init+0x308>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d025      	beq.n	800482a <HAL_GPIO_Init+0x21a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a4e      	ldr	r2, [pc, #312]	@ (800491c <HAL_GPIO_Init+0x30c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d01f      	beq.n	8004826 <HAL_GPIO_Init+0x216>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a4d      	ldr	r2, [pc, #308]	@ (8004920 <HAL_GPIO_Init+0x310>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d019      	beq.n	8004822 <HAL_GPIO_Init+0x212>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a4c      	ldr	r2, [pc, #304]	@ (8004924 <HAL_GPIO_Init+0x314>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d013      	beq.n	800481e <HAL_GPIO_Init+0x20e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004928 <HAL_GPIO_Init+0x318>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00d      	beq.n	800481a <HAL_GPIO_Init+0x20a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a4a      	ldr	r2, [pc, #296]	@ (800492c <HAL_GPIO_Init+0x31c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d007      	beq.n	8004816 <HAL_GPIO_Init+0x206>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a49      	ldr	r2, [pc, #292]	@ (8004930 <HAL_GPIO_Init+0x320>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d101      	bne.n	8004812 <HAL_GPIO_Init+0x202>
 800480e:	2306      	movs	r3, #6
 8004810:	e00c      	b.n	800482c <HAL_GPIO_Init+0x21c>
 8004812:	2307      	movs	r3, #7
 8004814:	e00a      	b.n	800482c <HAL_GPIO_Init+0x21c>
 8004816:	2305      	movs	r3, #5
 8004818:	e008      	b.n	800482c <HAL_GPIO_Init+0x21c>
 800481a:	2304      	movs	r3, #4
 800481c:	e006      	b.n	800482c <HAL_GPIO_Init+0x21c>
 800481e:	2303      	movs	r3, #3
 8004820:	e004      	b.n	800482c <HAL_GPIO_Init+0x21c>
 8004822:	2302      	movs	r3, #2
 8004824:	e002      	b.n	800482c <HAL_GPIO_Init+0x21c>
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <HAL_GPIO_Init+0x21c>
 800482a:	2300      	movs	r3, #0
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	f002 0203 	and.w	r2, r2, #3
 8004832:	0092      	lsls	r2, r2, #2
 8004834:	4093      	lsls	r3, r2
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4313      	orrs	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800483c:	4935      	ldr	r1, [pc, #212]	@ (8004914 <HAL_GPIO_Init+0x304>)
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	089b      	lsrs	r3, r3, #2
 8004842:	3302      	adds	r3, #2
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800484a:	4b3a      	ldr	r3, [pc, #232]	@ (8004934 <HAL_GPIO_Init+0x324>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	43db      	mvns	r3, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800486e:	4a31      	ldr	r2, [pc, #196]	@ (8004934 <HAL_GPIO_Init+0x324>)
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004874:	4b2f      	ldr	r3, [pc, #188]	@ (8004934 <HAL_GPIO_Init+0x324>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	43db      	mvns	r3, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004898:	4a26      	ldr	r2, [pc, #152]	@ (8004934 <HAL_GPIO_Init+0x324>)
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800489e:	4b25      	ldr	r3, [pc, #148]	@ (8004934 <HAL_GPIO_Init+0x324>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	43db      	mvns	r3, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004934 <HAL_GPIO_Init+0x324>)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004934 <HAL_GPIO_Init+0x324>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048ec:	4a11      	ldr	r2, [pc, #68]	@ (8004934 <HAL_GPIO_Init+0x324>)
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	3301      	adds	r3, #1
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	2b0f      	cmp	r3, #15
 80048fc:	f67f ae96 	bls.w	800462c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	3724      	adds	r7, #36	@ 0x24
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40023800 	.word	0x40023800
 8004914:	40013800 	.word	0x40013800
 8004918:	40020000 	.word	0x40020000
 800491c:	40020400 	.word	0x40020400
 8004920:	40020800 	.word	0x40020800
 8004924:	40020c00 	.word	0x40020c00
 8004928:	40021000 	.word	0x40021000
 800492c:	40021400 	.word	0x40021400
 8004930:	40021800 	.word	0x40021800
 8004934:	40013c00 	.word	0x40013c00

08004938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	807b      	strh	r3, [r7, #2]
 8004944:	4613      	mov	r3, r2
 8004946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004948:	787b      	ldrb	r3, [r7, #1]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800494e:	887a      	ldrh	r2, [r7, #2]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004954:	e003      	b.n	800495e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004956:	887b      	ldrh	r3, [r7, #2]
 8004958:	041a      	lsls	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	619a      	str	r2, [r3, #24]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e12b      	b.n	8004bd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fd ffde 	bl	8002954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2224      	movs	r2, #36	@ 0x24
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0201 	bic.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049d0:	f001 fbe0 	bl	8006194 <HAL_RCC_GetPCLK1Freq>
 80049d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4a81      	ldr	r2, [pc, #516]	@ (8004be0 <HAL_I2C_Init+0x274>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d807      	bhi.n	80049f0 <HAL_I2C_Init+0x84>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a80      	ldr	r2, [pc, #512]	@ (8004be4 <HAL_I2C_Init+0x278>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	bf94      	ite	ls
 80049e8:	2301      	movls	r3, #1
 80049ea:	2300      	movhi	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	e006      	b.n	80049fe <HAL_I2C_Init+0x92>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a7d      	ldr	r2, [pc, #500]	@ (8004be8 <HAL_I2C_Init+0x27c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	bf94      	ite	ls
 80049f8:	2301      	movls	r3, #1
 80049fa:	2300      	movhi	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e0e7      	b.n	8004bd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4a78      	ldr	r2, [pc, #480]	@ (8004bec <HAL_I2C_Init+0x280>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	0c9b      	lsrs	r3, r3, #18
 8004a10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4a6a      	ldr	r2, [pc, #424]	@ (8004be0 <HAL_I2C_Init+0x274>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d802      	bhi.n	8004a40 <HAL_I2C_Init+0xd4>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	e009      	b.n	8004a54 <HAL_I2C_Init+0xe8>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a46:	fb02 f303 	mul.w	r3, r2, r3
 8004a4a:	4a69      	ldr	r2, [pc, #420]	@ (8004bf0 <HAL_I2C_Init+0x284>)
 8004a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a50:	099b      	lsrs	r3, r3, #6
 8004a52:	3301      	adds	r3, #1
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004a66:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	495c      	ldr	r1, [pc, #368]	@ (8004be0 <HAL_I2C_Init+0x274>)
 8004a70:	428b      	cmp	r3, r1
 8004a72:	d819      	bhi.n	8004aa8 <HAL_I2C_Init+0x13c>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	1e59      	subs	r1, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a82:	1c59      	adds	r1, r3, #1
 8004a84:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a88:	400b      	ands	r3, r1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_I2C_Init+0x138>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1e59      	subs	r1, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa2:	e051      	b.n	8004b48 <HAL_I2C_Init+0x1dc>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	e04f      	b.n	8004b48 <HAL_I2C_Init+0x1dc>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d111      	bne.n	8004ad4 <HAL_I2C_Init+0x168>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	1e58      	subs	r0, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6859      	ldr	r1, [r3, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	440b      	add	r3, r1
 8004abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf0c      	ite	eq
 8004acc:	2301      	moveq	r3, #1
 8004ace:	2300      	movne	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	e012      	b.n	8004afa <HAL_I2C_Init+0x18e>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1e58      	subs	r0, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6859      	ldr	r1, [r3, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	0099      	lsls	r1, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aea:	3301      	adds	r3, #1
 8004aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_I2C_Init+0x196>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e022      	b.n	8004b48 <HAL_I2C_Init+0x1dc>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10e      	bne.n	8004b28 <HAL_I2C_Init+0x1bc>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	1e58      	subs	r0, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6859      	ldr	r1, [r3, #4]
 8004b12:	460b      	mov	r3, r1
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	440b      	add	r3, r1
 8004b18:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b26:	e00f      	b.n	8004b48 <HAL_I2C_Init+0x1dc>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	1e58      	subs	r0, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6859      	ldr	r1, [r3, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	0099      	lsls	r1, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	6809      	ldr	r1, [r1, #0]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69da      	ldr	r2, [r3, #28]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004b76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6911      	ldr	r1, [r2, #16]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68d2      	ldr	r2, [r2, #12]
 8004b82:	4311      	orrs	r1, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	000186a0 	.word	0x000186a0
 8004be4:	001e847f 	.word	0x001e847f
 8004be8:	003d08ff 	.word	0x003d08ff
 8004bec:	431bde83 	.word	0x431bde83
 8004bf0:	10624dd3 	.word	0x10624dd3

08004bf4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b088      	sub	sp, #32
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	607a      	str	r2, [r7, #4]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	460b      	mov	r3, r1
 8004c02:	817b      	strh	r3, [r7, #10]
 8004c04:	4613      	mov	r3, r2
 8004c06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c08:	f7fe fdd2 	bl	80037b0 <HAL_GetTick>
 8004c0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	f040 80e0 	bne.w	8004ddc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	2319      	movs	r3, #25
 8004c22:	2201      	movs	r2, #1
 8004c24:	4970      	ldr	r1, [pc, #448]	@ (8004de8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 ff3c 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c32:	2302      	movs	r3, #2
 8004c34:	e0d3      	b.n	8004dde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_I2C_Master_Transmit+0x50>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e0cc      	b.n	8004dde <HAL_I2C_Master_Transmit+0x1ea>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d007      	beq.n	8004c6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0201 	orr.w	r2, r2, #1
 8004c68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2221      	movs	r2, #33	@ 0x21
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2210      	movs	r2, #16
 8004c86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	893a      	ldrh	r2, [r7, #8]
 8004c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4a50      	ldr	r2, [pc, #320]	@ (8004dec <HAL_I2C_Master_Transmit+0x1f8>)
 8004caa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004cac:	8979      	ldrh	r1, [r7, #10]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	6a3a      	ldr	r2, [r7, #32]
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 fcf6 	bl	80056a4 <I2C_MasterRequestWrite>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e08d      	b.n	8004dde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004cd8:	e066      	b.n	8004da8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	6a39      	ldr	r1, [r7, #32]
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 fffa 	bl	8005cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00d      	beq.n	8004d06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d107      	bne.n	8004d02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e06b      	b.n	8004dde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	781a      	ldrb	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d11b      	bne.n	8004d7c <HAL_I2C_Master_Transmit+0x188>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d017      	beq.n	8004d7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d50:	781a      	ldrb	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	6a39      	ldr	r1, [r7, #32]
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 fff1 	bl	8005d68 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00d      	beq.n	8004da8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d107      	bne.n	8004da4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004da2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e01a      	b.n	8004dde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d194      	bne.n	8004cda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	e000      	b.n	8004dde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ddc:	2302      	movs	r3, #2
  }
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	00100002 	.word	0x00100002
 8004dec:	ffff0000 	.word	0xffff0000

08004df0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	4608      	mov	r0, r1
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	4603      	mov	r3, r0
 8004e00:	817b      	strh	r3, [r7, #10]
 8004e02:	460b      	mov	r3, r1
 8004e04:	813b      	strh	r3, [r7, #8]
 8004e06:	4613      	mov	r3, r2
 8004e08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e0a:	f7fe fcd1 	bl	80037b0 <HAL_GetTick>
 8004e0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	f040 80d9 	bne.w	8004fd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	2319      	movs	r3, #25
 8004e24:	2201      	movs	r2, #1
 8004e26:	496d      	ldr	r1, [pc, #436]	@ (8004fdc <HAL_I2C_Mem_Write+0x1ec>)
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fe3b 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
 8004e36:	e0cc      	b.n	8004fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_I2C_Mem_Write+0x56>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e0c5      	b.n	8004fd2 <HAL_I2C_Mem_Write+0x1e2>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d007      	beq.n	8004e6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2221      	movs	r2, #33	@ 0x21
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2240      	movs	r2, #64	@ 0x40
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a3a      	ldr	r2, [r7, #32]
 8004e96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4a4d      	ldr	r2, [pc, #308]	@ (8004fe0 <HAL_I2C_Mem_Write+0x1f0>)
 8004eac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004eae:	88f8      	ldrh	r0, [r7, #6]
 8004eb0:	893a      	ldrh	r2, [r7, #8]
 8004eb2:	8979      	ldrh	r1, [r7, #10]
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 fc72 	bl	80057a8 <I2C_RequestMemoryWrite>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d052      	beq.n	8004f70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e081      	b.n	8004fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 ff00 	bl	8005cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00d      	beq.n	8004efa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d107      	bne.n	8004ef6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ef4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e06b      	b.n	8004fd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efe:	781a      	ldrb	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d11b      	bne.n	8004f70 <HAL_I2C_Mem_Write+0x180>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d017      	beq.n	8004f70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f44:	781a      	ldrb	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1aa      	bne.n	8004ece <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fef3 	bl	8005d68 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00d      	beq.n	8004fa4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d107      	bne.n	8004fa0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e016      	b.n	8004fd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e000      	b.n	8004fd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
  }
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	00100002 	.word	0x00100002
 8004fe0:	ffff0000 	.word	0xffff0000

08004fe4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08c      	sub	sp, #48	@ 0x30
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	4608      	mov	r0, r1
 8004fee:	4611      	mov	r1, r2
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	817b      	strh	r3, [r7, #10]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	813b      	strh	r3, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ffe:	f7fe fbd7 	bl	80037b0 <HAL_GetTick>
 8005002:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b20      	cmp	r3, #32
 800500e:	f040 8214 	bne.w	800543a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	2319      	movs	r3, #25
 8005018:	2201      	movs	r2, #1
 800501a:	497b      	ldr	r1, [pc, #492]	@ (8005208 <HAL_I2C_Mem_Read+0x224>)
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 fd41 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005028:	2302      	movs	r3, #2
 800502a:	e207      	b.n	800543c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_I2C_Mem_Read+0x56>
 8005036:	2302      	movs	r3, #2
 8005038:	e200      	b.n	800543c <HAL_I2C_Mem_Read+0x458>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b01      	cmp	r3, #1
 800504e:	d007      	beq.n	8005060 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800506e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2222      	movs	r2, #34	@ 0x22
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2240      	movs	r2, #64	@ 0x40
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800508a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005090:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4a5b      	ldr	r2, [pc, #364]	@ (800520c <HAL_I2C_Mem_Read+0x228>)
 80050a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050a2:	88f8      	ldrh	r0, [r7, #6]
 80050a4:	893a      	ldrh	r2, [r7, #8]
 80050a6:	8979      	ldrh	r1, [r7, #10]
 80050a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	4603      	mov	r3, r0
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f000 fc0e 	bl	80058d4 <I2C_RequestMemoryRead>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e1bc      	b.n	800543c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d113      	bne.n	80050f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ca:	2300      	movs	r3, #0
 80050cc:	623b      	str	r3, [r7, #32]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	623b      	str	r3, [r7, #32]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	623b      	str	r3, [r7, #32]
 80050de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	e190      	b.n	8005414 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d11b      	bne.n	8005132 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005108:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	e170      	b.n	8005414 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005136:	2b02      	cmp	r3, #2
 8005138:	d11b      	bne.n	8005172 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005148:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005158:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800515a:	2300      	movs	r3, #0
 800515c:	61bb      	str	r3, [r7, #24]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	61bb      	str	r3, [r7, #24]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	e150      	b.n	8005414 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005188:	e144      	b.n	8005414 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800518e:	2b03      	cmp	r3, #3
 8005190:	f200 80f1 	bhi.w	8005376 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005198:	2b01      	cmp	r3, #1
 800519a:	d123      	bne.n	80051e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800519c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800519e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f000 fe29 	bl	8005df8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e145      	b.n	800543c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80051e2:	e117      	b.n	8005414 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d14e      	bne.n	800528a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f2:	2200      	movs	r2, #0
 80051f4:	4906      	ldr	r1, [pc, #24]	@ (8005210 <HAL_I2C_Mem_Read+0x22c>)
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fc54 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d008      	beq.n	8005214 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e11a      	b.n	800543c <HAL_I2C_Mem_Read+0x458>
 8005206:	bf00      	nop
 8005208:	00100002 	.word	0x00100002
 800520c:	ffff0000 	.word	0xffff0000
 8005210:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691a      	ldr	r2, [r3, #16]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005240:	3b01      	subs	r3, #1
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005288:	e0c4      	b.n	8005414 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005290:	2200      	movs	r2, #0
 8005292:	496c      	ldr	r1, [pc, #432]	@ (8005444 <HAL_I2C_Mem_Read+0x460>)
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fc05 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e0cb      	b.n	800543c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c6:	1c5a      	adds	r2, r3, #1
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ec:	2200      	movs	r2, #0
 80052ee:	4955      	ldr	r1, [pc, #340]	@ (8005444 <HAL_I2C_Mem_Read+0x460>)
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 fbd7 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e09d      	b.n	800543c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800530e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691a      	ldr	r2, [r3, #16]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691a      	ldr	r2, [r3, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534c:	b2d2      	uxtb	r2, r2
 800534e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005374:	e04e      	b.n	8005414 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005378:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fd3c 	bl	8005df8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e058      	b.n	800543c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d124      	bne.n	8005414 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d107      	bne.n	80053e2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053e0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005418:	2b00      	cmp	r3, #0
 800541a:	f47f aeb6 	bne.w	800518a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	e000      	b.n	800543c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800543a:	2302      	movs	r3, #2
  }
}
 800543c:	4618      	mov	r0, r3
 800543e:	3728      	adds	r7, #40	@ 0x28
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	00010004 	.word	0x00010004

08005448 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b08a      	sub	sp, #40	@ 0x28
 800544c:	af02      	add	r7, sp, #8
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	607a      	str	r2, [r7, #4]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	460b      	mov	r3, r1
 8005456:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005458:	f7fe f9aa 	bl	80037b0 <HAL_GetTick>
 800545c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b20      	cmp	r3, #32
 800546c:	f040 8111 	bne.w	8005692 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	2319      	movs	r3, #25
 8005476:	2201      	movs	r2, #1
 8005478:	4988      	ldr	r1, [pc, #544]	@ (800569c <HAL_I2C_IsDeviceReady+0x254>)
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 fb12 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005486:	2302      	movs	r3, #2
 8005488:	e104      	b.n	8005694 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_I2C_IsDeviceReady+0x50>
 8005494:	2302      	movs	r3, #2
 8005496:	e0fd      	b.n	8005694 <HAL_I2C_IsDeviceReady+0x24c>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d007      	beq.n	80054be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0201 	orr.w	r2, r2, #1
 80054bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2224      	movs	r2, #36	@ 0x24
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4a70      	ldr	r2, [pc, #448]	@ (80056a0 <HAL_I2C_IsDeviceReady+0x258>)
 80054e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 fad0 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00d      	beq.n	8005526 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005518:	d103      	bne.n	8005522 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005520:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e0b6      	b.n	8005694 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005526:	897b      	ldrh	r3, [r7, #10]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005534:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005536:	f7fe f93b 	bl	80037b0 <HAL_GetTick>
 800553a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b02      	cmp	r3, #2
 8005548:	bf0c      	ite	eq
 800554a:	2301      	moveq	r3, #1
 800554c:	2300      	movne	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800555c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005560:	bf0c      	ite	eq
 8005562:	2301      	moveq	r3, #1
 8005564:	2300      	movne	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800556a:	e025      	b.n	80055b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800556c:	f7fe f920 	bl	80037b0 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	429a      	cmp	r2, r3
 800557a:	d302      	bcc.n	8005582 <HAL_I2C_IsDeviceReady+0x13a>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	22a0      	movs	r2, #160	@ 0xa0
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b02      	cmp	r3, #2
 8005596:	bf0c      	ite	eq
 8005598:	2301      	moveq	r3, #1
 800559a:	2300      	movne	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055ae:	bf0c      	ite	eq
 80055b0:	2301      	moveq	r3, #1
 80055b2:	2300      	movne	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2ba0      	cmp	r3, #160	@ 0xa0
 80055c2:	d005      	beq.n	80055d0 <HAL_I2C_IsDeviceReady+0x188>
 80055c4:	7dfb      	ldrb	r3, [r7, #23]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d102      	bne.n	80055d0 <HAL_I2C_IsDeviceReady+0x188>
 80055ca:	7dbb      	ldrb	r3, [r7, #22]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0cd      	beq.n	800556c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d129      	bne.n	800563a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f6:	2300      	movs	r3, #0
 80055f8:	613b      	str	r3, [r7, #16]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	2319      	movs	r3, #25
 8005612:	2201      	movs	r2, #1
 8005614:	4921      	ldr	r1, [pc, #132]	@ (800569c <HAL_I2C_IsDeviceReady+0x254>)
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 fa44 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e036      	b.n	8005694 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	e02c      	b.n	8005694 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005648:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005652:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	2319      	movs	r3, #25
 800565a:	2201      	movs	r2, #1
 800565c:	490f      	ldr	r1, [pc, #60]	@ (800569c <HAL_I2C_IsDeviceReady+0x254>)
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 fa20 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e012      	b.n	8005694 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	3301      	adds	r3, #1
 8005672:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	429a      	cmp	r2, r3
 800567a:	f4ff af32 	bcc.w	80054e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2220      	movs	r2, #32
 8005682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005692:	2302      	movs	r3, #2
  }
}
 8005694:	4618      	mov	r0, r3
 8005696:	3720      	adds	r7, #32
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	00100002 	.word	0x00100002
 80056a0:	ffff0000 	.word	0xffff0000

080056a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b088      	sub	sp, #32
 80056a8:	af02      	add	r7, sp, #8
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	607a      	str	r2, [r7, #4]
 80056ae:	603b      	str	r3, [r7, #0]
 80056b0:	460b      	mov	r3, r1
 80056b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d006      	beq.n	80056ce <I2C_MasterRequestWrite+0x2a>
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d003      	beq.n	80056ce <I2C_MasterRequestWrite+0x2a>
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056cc:	d108      	bne.n	80056e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e00b      	b.n	80056f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e4:	2b12      	cmp	r3, #18
 80056e6:	d107      	bne.n	80056f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 f9cd 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00d      	beq.n	800572c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800571a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800571e:	d103      	bne.n	8005728 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005726:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e035      	b.n	8005798 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005734:	d108      	bne.n	8005748 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005736:	897b      	ldrh	r3, [r7, #10]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005744:	611a      	str	r2, [r3, #16]
 8005746:	e01b      	b.n	8005780 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005748:	897b      	ldrh	r3, [r7, #10]
 800574a:	11db      	asrs	r3, r3, #7
 800574c:	b2db      	uxtb	r3, r3
 800574e:	f003 0306 	and.w	r3, r3, #6
 8005752:	b2db      	uxtb	r3, r3
 8005754:	f063 030f 	orn	r3, r3, #15
 8005758:	b2da      	uxtb	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	490e      	ldr	r1, [pc, #56]	@ (80057a0 <I2C_MasterRequestWrite+0xfc>)
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 fa16 	bl	8005b98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e010      	b.n	8005798 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005776:	897b      	ldrh	r3, [r7, #10]
 8005778:	b2da      	uxtb	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	4907      	ldr	r1, [pc, #28]	@ (80057a4 <I2C_MasterRequestWrite+0x100>)
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 fa06 	bl	8005b98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e000      	b.n	8005798 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	00010008 	.word	0x00010008
 80057a4:	00010002 	.word	0x00010002

080057a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	4608      	mov	r0, r1
 80057b2:	4611      	mov	r1, r2
 80057b4:	461a      	mov	r2, r3
 80057b6:	4603      	mov	r3, r0
 80057b8:	817b      	strh	r3, [r7, #10]
 80057ba:	460b      	mov	r3, r1
 80057bc:	813b      	strh	r3, [r7, #8]
 80057be:	4613      	mov	r3, r2
 80057c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	2200      	movs	r2, #0
 80057da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 f960 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00d      	beq.n	8005806 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057f8:	d103      	bne.n	8005802 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005800:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e05f      	b.n	80058c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005806:	897b      	ldrh	r3, [r7, #10]
 8005808:	b2db      	uxtb	r3, r3
 800580a:	461a      	mov	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005814:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	6a3a      	ldr	r2, [r7, #32]
 800581a:	492d      	ldr	r1, [pc, #180]	@ (80058d0 <I2C_RequestMemoryWrite+0x128>)
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 f9bb 	bl	8005b98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e04c      	b.n	80058c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005844:	6a39      	ldr	r1, [r7, #32]
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 fa46 	bl	8005cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00d      	beq.n	800586e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005856:	2b04      	cmp	r3, #4
 8005858:	d107      	bne.n	800586a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005868:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e02b      	b.n	80058c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800586e:	88fb      	ldrh	r3, [r7, #6]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d105      	bne.n	8005880 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005874:	893b      	ldrh	r3, [r7, #8]
 8005876:	b2da      	uxtb	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	611a      	str	r2, [r3, #16]
 800587e:	e021      	b.n	80058c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005880:	893b      	ldrh	r3, [r7, #8]
 8005882:	0a1b      	lsrs	r3, r3, #8
 8005884:	b29b      	uxth	r3, r3
 8005886:	b2da      	uxtb	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800588e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005890:	6a39      	ldr	r1, [r7, #32]
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 fa20 	bl	8005cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00d      	beq.n	80058ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d107      	bne.n	80058b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e005      	b.n	80058c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058ba:	893b      	ldrh	r3, [r7, #8]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	00010002 	.word	0x00010002

080058d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af02      	add	r7, sp, #8
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	4608      	mov	r0, r1
 80058de:	4611      	mov	r1, r2
 80058e0:	461a      	mov	r2, r3
 80058e2:	4603      	mov	r3, r0
 80058e4:	817b      	strh	r3, [r7, #10]
 80058e6:	460b      	mov	r3, r1
 80058e8:	813b      	strh	r3, [r7, #8]
 80058ea:	4613      	mov	r3, r2
 80058ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800590c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	2200      	movs	r2, #0
 8005916:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 f8c2 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00d      	beq.n	8005942 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005934:	d103      	bne.n	800593e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800593c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e0aa      	b.n	8005a98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005942:	897b      	ldrh	r3, [r7, #10]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005950:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	6a3a      	ldr	r2, [r7, #32]
 8005956:	4952      	ldr	r1, [pc, #328]	@ (8005aa0 <I2C_RequestMemoryRead+0x1cc>)
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f91d 	bl	8005b98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e097      	b.n	8005a98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800597e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005980:	6a39      	ldr	r1, [r7, #32]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 f9a8 	bl	8005cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00d      	beq.n	80059aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005992:	2b04      	cmp	r3, #4
 8005994:	d107      	bne.n	80059a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e076      	b.n	8005a98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059aa:	88fb      	ldrh	r3, [r7, #6]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d105      	bne.n	80059bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059b0:	893b      	ldrh	r3, [r7, #8]
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	611a      	str	r2, [r3, #16]
 80059ba:	e021      	b.n	8005a00 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059bc:	893b      	ldrh	r3, [r7, #8]
 80059be:	0a1b      	lsrs	r3, r3, #8
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059cc:	6a39      	ldr	r1, [r7, #32]
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 f982 	bl	8005cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00d      	beq.n	80059f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d107      	bne.n	80059f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e050      	b.n	8005a98 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059f6:	893b      	ldrh	r3, [r7, #8]
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a02:	6a39      	ldr	r1, [r7, #32]
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 f967 	bl	8005cd8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00d      	beq.n	8005a2c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d107      	bne.n	8005a28 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a26:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e035      	b.n	8005a98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a3a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f82b 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00d      	beq.n	8005a70 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a62:	d103      	bne.n	8005a6c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e013      	b.n	8005a98 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a70:	897b      	ldrh	r3, [r7, #10]
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	f043 0301 	orr.w	r3, r3, #1
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	6a3a      	ldr	r2, [r7, #32]
 8005a84:	4906      	ldr	r1, [pc, #24]	@ (8005aa0 <I2C_RequestMemoryRead+0x1cc>)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f886 	bl	8005b98 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	00010002 	.word	0x00010002

08005aa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ab4:	e048      	b.n	8005b48 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abc:	d044      	beq.n	8005b48 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005abe:	f7fd fe77 	bl	80037b0 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d302      	bcc.n	8005ad4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d139      	bne.n	8005b48 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	0c1b      	lsrs	r3, r3, #16
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d10d      	bne.n	8005afa <I2C_WaitOnFlagUntilTimeout+0x56>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	43da      	mvns	r2, r3
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	bf0c      	ite	eq
 8005af0:	2301      	moveq	r3, #1
 8005af2:	2300      	movne	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	461a      	mov	r2, r3
 8005af8:	e00c      	b.n	8005b14 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	43da      	mvns	r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	4013      	ands	r3, r2
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bf0c      	ite	eq
 8005b0c:	2301      	moveq	r3, #1
 8005b0e:	2300      	movne	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	461a      	mov	r2, r3
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d116      	bne.n	8005b48 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b34:	f043 0220 	orr.w	r2, r3, #32
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e023      	b.n	8005b90 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	0c1b      	lsrs	r3, r3, #16
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d10d      	bne.n	8005b6e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	43da      	mvns	r2, r3
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	bf0c      	ite	eq
 8005b64:	2301      	moveq	r3, #1
 8005b66:	2300      	movne	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	e00c      	b.n	8005b88 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	43da      	mvns	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	bf0c      	ite	eq
 8005b80:	2301      	moveq	r3, #1
 8005b82:	2300      	movne	r3, #0
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	79fb      	ldrb	r3, [r7, #7]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d093      	beq.n	8005ab6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ba6:	e071      	b.n	8005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb6:	d123      	bne.n	8005c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bc6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005bd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bec:	f043 0204 	orr.w	r2, r3, #4
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e067      	b.n	8005cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c06:	d041      	beq.n	8005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c08:	f7fd fdd2 	bl	80037b0 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d302      	bcc.n	8005c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d136      	bne.n	8005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	0c1b      	lsrs	r3, r3, #16
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d10c      	bne.n	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	43da      	mvns	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4013      	ands	r3, r2
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bf14      	ite	ne
 8005c3a:	2301      	movne	r3, #1
 8005c3c:	2300      	moveq	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	e00b      	b.n	8005c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	43da      	mvns	r2, r3
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bf14      	ite	ne
 8005c54:	2301      	movne	r3, #1
 8005c56:	2300      	moveq	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d016      	beq.n	8005c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c78:	f043 0220 	orr.w	r2, r3, #32
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e021      	b.n	8005cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	0c1b      	lsrs	r3, r3, #16
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d10c      	bne.n	8005cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	43da      	mvns	r2, r3
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bf14      	ite	ne
 8005ca8:	2301      	movne	r3, #1
 8005caa:	2300      	moveq	r3, #0
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	e00b      	b.n	8005cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	43da      	mvns	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	bf14      	ite	ne
 8005cc2:	2301      	movne	r3, #1
 8005cc4:	2300      	moveq	r3, #0
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f47f af6d 	bne.w	8005ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ce4:	e034      	b.n	8005d50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f8e3 	bl	8005eb2 <I2C_IsAcknowledgeFailed>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e034      	b.n	8005d60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfc:	d028      	beq.n	8005d50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cfe:	f7fd fd57 	bl	80037b0 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d302      	bcc.n	8005d14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d11d      	bne.n	8005d50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d1e:	2b80      	cmp	r3, #128	@ 0x80
 8005d20:	d016      	beq.n	8005d50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3c:	f043 0220 	orr.w	r2, r3, #32
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e007      	b.n	8005d60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d5a:	2b80      	cmp	r3, #128	@ 0x80
 8005d5c:	d1c3      	bne.n	8005ce6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d74:	e034      	b.n	8005de0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 f89b 	bl	8005eb2 <I2C_IsAcknowledgeFailed>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e034      	b.n	8005df0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d028      	beq.n	8005de0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d8e:	f7fd fd0f 	bl	80037b0 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d302      	bcc.n	8005da4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d11d      	bne.n	8005de0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d016      	beq.n	8005de0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dcc:	f043 0220 	orr.w	r2, r3, #32
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e007      	b.n	8005df0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d1c3      	bne.n	8005d76 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e04:	e049      	b.n	8005e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2b10      	cmp	r3, #16
 8005e12:	d119      	bne.n	8005e48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0210 	mvn.w	r2, #16
 8005e1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e030      	b.n	8005eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e48:	f7fd fcb2 	bl	80037b0 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d302      	bcc.n	8005e5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d11d      	bne.n	8005e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e68:	2b40      	cmp	r3, #64	@ 0x40
 8005e6a:	d016      	beq.n	8005e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e86:	f043 0220 	orr.w	r2, r3, #32
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e007      	b.n	8005eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea4:	2b40      	cmp	r3, #64	@ 0x40
 8005ea6:	d1ae      	bne.n	8005e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ec8:	d11b      	bne.n	8005f02 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ed2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eee:	f043 0204 	orr.w	r2, r3, #4
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	603b      	str	r3, [r7, #0]
 8005f1e:	4b20      	ldr	r3, [pc, #128]	@ (8005fa0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f22:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005f36:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa4 <HAL_PWREx_EnableOverDrive+0x94>)
 8005f38:	2201      	movs	r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f3c:	f7fd fc38 	bl	80037b0 <HAL_GetTick>
 8005f40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f42:	e009      	b.n	8005f58 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f44:	f7fd fc34 	bl	80037b0 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f52:	d901      	bls.n	8005f58 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e01f      	b.n	8005f98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f58:	4b13      	ldr	r3, [pc, #76]	@ (8005fa8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f64:	d1ee      	bne.n	8005f44 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005f66:	4b11      	ldr	r3, [pc, #68]	@ (8005fac <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f68:	2201      	movs	r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f6c:	f7fd fc20 	bl	80037b0 <HAL_GetTick>
 8005f70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f72:	e009      	b.n	8005f88 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f74:	f7fd fc1c 	bl	80037b0 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f82:	d901      	bls.n	8005f88 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e007      	b.n	8005f98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f88:	4b07      	ldr	r3, [pc, #28]	@ (8005fa8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f94:	d1ee      	bne.n	8005f74 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	40023800 	.word	0x40023800
 8005fa4:	420e0040 	.word	0x420e0040
 8005fa8:	40007000 	.word	0x40007000
 8005fac:	420e0044 	.word	0x420e0044

08005fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e0cc      	b.n	800615e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fc4:	4b68      	ldr	r3, [pc, #416]	@ (8006168 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 030f 	and.w	r3, r3, #15
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d90c      	bls.n	8005fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd2:	4b65      	ldr	r3, [pc, #404]	@ (8006168 <HAL_RCC_ClockConfig+0x1b8>)
 8005fd4:	683a      	ldr	r2, [r7, #0]
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fda:	4b63      	ldr	r3, [pc, #396]	@ (8006168 <HAL_RCC_ClockConfig+0x1b8>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d001      	beq.n	8005fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e0b8      	b.n	800615e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d020      	beq.n	800603a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006004:	4b59      	ldr	r3, [pc, #356]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	4a58      	ldr	r2, [pc, #352]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 800600a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800600e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0308 	and.w	r3, r3, #8
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800601c:	4b53      	ldr	r3, [pc, #332]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	4a52      	ldr	r2, [pc, #328]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 8006022:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006028:	4b50      	ldr	r3, [pc, #320]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	494d      	ldr	r1, [pc, #308]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	4313      	orrs	r3, r2
 8006038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d044      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d107      	bne.n	800605e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800604e:	4b47      	ldr	r3, [pc, #284]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d119      	bne.n	800608e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e07f      	b.n	800615e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2b02      	cmp	r3, #2
 8006064:	d003      	beq.n	800606e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800606a:	2b03      	cmp	r3, #3
 800606c:	d107      	bne.n	800607e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800606e:	4b3f      	ldr	r3, [pc, #252]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d109      	bne.n	800608e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e06f      	b.n	800615e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800607e:	4b3b      	ldr	r3, [pc, #236]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e067      	b.n	800615e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800608e:	4b37      	ldr	r3, [pc, #220]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f023 0203 	bic.w	r2, r3, #3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	4934      	ldr	r1, [pc, #208]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 800609c:	4313      	orrs	r3, r2
 800609e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060a0:	f7fd fb86 	bl	80037b0 <HAL_GetTick>
 80060a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a6:	e00a      	b.n	80060be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a8:	f7fd fb82 	bl	80037b0 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e04f      	b.n	800615e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060be:	4b2b      	ldr	r3, [pc, #172]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 020c 	and.w	r2, r3, #12
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d1eb      	bne.n	80060a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060d0:	4b25      	ldr	r3, [pc, #148]	@ (8006168 <HAL_RCC_ClockConfig+0x1b8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d20c      	bcs.n	80060f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060de:	4b22      	ldr	r3, [pc, #136]	@ (8006168 <HAL_RCC_ClockConfig+0x1b8>)
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060e6:	4b20      	ldr	r3, [pc, #128]	@ (8006168 <HAL_RCC_ClockConfig+0x1b8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d001      	beq.n	80060f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e032      	b.n	800615e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d008      	beq.n	8006116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006104:	4b19      	ldr	r3, [pc, #100]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	4916      	ldr	r1, [pc, #88]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 8006112:	4313      	orrs	r3, r2
 8006114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006122:	4b12      	ldr	r3, [pc, #72]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	490e      	ldr	r1, [pc, #56]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	4313      	orrs	r3, r2
 8006134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006136:	f000 f855 	bl	80061e4 <HAL_RCC_GetSysClockFreq>
 800613a:	4602      	mov	r2, r0
 800613c:	4b0b      	ldr	r3, [pc, #44]	@ (800616c <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	091b      	lsrs	r3, r3, #4
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	490a      	ldr	r1, [pc, #40]	@ (8006170 <HAL_RCC_ClockConfig+0x1c0>)
 8006148:	5ccb      	ldrb	r3, [r1, r3]
 800614a:	fa22 f303 	lsr.w	r3, r2, r3
 800614e:	4a09      	ldr	r2, [pc, #36]	@ (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 8006150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006152:	4b09      	ldr	r3, [pc, #36]	@ (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4618      	mov	r0, r3
 8006158:	f7fd fae6 	bl	8003728 <HAL_InitTick>

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	40023c00 	.word	0x40023c00
 800616c:	40023800 	.word	0x40023800
 8006170:	0800b31c 	.word	0x0800b31c
 8006174:	20000000 	.word	0x20000000
 8006178:	20000004 	.word	0x20000004

0800617c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006180:	4b03      	ldr	r3, [pc, #12]	@ (8006190 <HAL_RCC_GetHCLKFreq+0x14>)
 8006182:	681b      	ldr	r3, [r3, #0]
}
 8006184:	4618      	mov	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20000000 	.word	0x20000000

08006194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006198:	f7ff fff0 	bl	800617c <HAL_RCC_GetHCLKFreq>
 800619c:	4602      	mov	r2, r0
 800619e:	4b05      	ldr	r3, [pc, #20]	@ (80061b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	0a9b      	lsrs	r3, r3, #10
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	4903      	ldr	r1, [pc, #12]	@ (80061b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061aa:	5ccb      	ldrb	r3, [r1, r3]
 80061ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	40023800 	.word	0x40023800
 80061b8:	0800b32c 	.word	0x0800b32c

080061bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061c0:	f7ff ffdc 	bl	800617c <HAL_RCC_GetHCLKFreq>
 80061c4:	4602      	mov	r2, r0
 80061c6:	4b05      	ldr	r3, [pc, #20]	@ (80061dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	0b5b      	lsrs	r3, r3, #13
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	4903      	ldr	r1, [pc, #12]	@ (80061e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061d2:	5ccb      	ldrb	r3, [r1, r3]
 80061d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061d8:	4618      	mov	r0, r3
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40023800 	.word	0x40023800
 80061e0:	0800b32c 	.word	0x0800b32c

080061e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061e8:	b0ae      	sub	sp, #184	@ 0xb8
 80061ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006204:	2300      	movs	r3, #0
 8006206:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800620a:	4bcb      	ldr	r3, [pc, #812]	@ (8006538 <HAL_RCC_GetSysClockFreq+0x354>)
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f003 030c 	and.w	r3, r3, #12
 8006212:	2b0c      	cmp	r3, #12
 8006214:	f200 8206 	bhi.w	8006624 <HAL_RCC_GetSysClockFreq+0x440>
 8006218:	a201      	add	r2, pc, #4	@ (adr r2, 8006220 <HAL_RCC_GetSysClockFreq+0x3c>)
 800621a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621e:	bf00      	nop
 8006220:	08006255 	.word	0x08006255
 8006224:	08006625 	.word	0x08006625
 8006228:	08006625 	.word	0x08006625
 800622c:	08006625 	.word	0x08006625
 8006230:	0800625d 	.word	0x0800625d
 8006234:	08006625 	.word	0x08006625
 8006238:	08006625 	.word	0x08006625
 800623c:	08006625 	.word	0x08006625
 8006240:	08006265 	.word	0x08006265
 8006244:	08006625 	.word	0x08006625
 8006248:	08006625 	.word	0x08006625
 800624c:	08006625 	.word	0x08006625
 8006250:	08006455 	.word	0x08006455
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006254:	4bb9      	ldr	r3, [pc, #740]	@ (800653c <HAL_RCC_GetSysClockFreq+0x358>)
 8006256:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800625a:	e1e7      	b.n	800662c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800625c:	4bb8      	ldr	r3, [pc, #736]	@ (8006540 <HAL_RCC_GetSysClockFreq+0x35c>)
 800625e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006262:	e1e3      	b.n	800662c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006264:	4bb4      	ldr	r3, [pc, #720]	@ (8006538 <HAL_RCC_GetSysClockFreq+0x354>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800626c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006270:	4bb1      	ldr	r3, [pc, #708]	@ (8006538 <HAL_RCC_GetSysClockFreq+0x354>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d071      	beq.n	8006360 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800627c:	4bae      	ldr	r3, [pc, #696]	@ (8006538 <HAL_RCC_GetSysClockFreq+0x354>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	099b      	lsrs	r3, r3, #6
 8006282:	2200      	movs	r2, #0
 8006284:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006288:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800628c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006294:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006298:	2300      	movs	r3, #0
 800629a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800629e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80062a2:	4622      	mov	r2, r4
 80062a4:	462b      	mov	r3, r5
 80062a6:	f04f 0000 	mov.w	r0, #0
 80062aa:	f04f 0100 	mov.w	r1, #0
 80062ae:	0159      	lsls	r1, r3, #5
 80062b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062b4:	0150      	lsls	r0, r2, #5
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4621      	mov	r1, r4
 80062bc:	1a51      	subs	r1, r2, r1
 80062be:	6439      	str	r1, [r7, #64]	@ 0x40
 80062c0:	4629      	mov	r1, r5
 80062c2:	eb63 0301 	sbc.w	r3, r3, r1
 80062c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80062d4:	4649      	mov	r1, r9
 80062d6:	018b      	lsls	r3, r1, #6
 80062d8:	4641      	mov	r1, r8
 80062da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062de:	4641      	mov	r1, r8
 80062e0:	018a      	lsls	r2, r1, #6
 80062e2:	4641      	mov	r1, r8
 80062e4:	1a51      	subs	r1, r2, r1
 80062e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062e8:	4649      	mov	r1, r9
 80062ea:	eb63 0301 	sbc.w	r3, r3, r1
 80062ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80062fc:	4649      	mov	r1, r9
 80062fe:	00cb      	lsls	r3, r1, #3
 8006300:	4641      	mov	r1, r8
 8006302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006306:	4641      	mov	r1, r8
 8006308:	00ca      	lsls	r2, r1, #3
 800630a:	4610      	mov	r0, r2
 800630c:	4619      	mov	r1, r3
 800630e:	4603      	mov	r3, r0
 8006310:	4622      	mov	r2, r4
 8006312:	189b      	adds	r3, r3, r2
 8006314:	633b      	str	r3, [r7, #48]	@ 0x30
 8006316:	462b      	mov	r3, r5
 8006318:	460a      	mov	r2, r1
 800631a:	eb42 0303 	adc.w	r3, r2, r3
 800631e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800632c:	4629      	mov	r1, r5
 800632e:	024b      	lsls	r3, r1, #9
 8006330:	4621      	mov	r1, r4
 8006332:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006336:	4621      	mov	r1, r4
 8006338:	024a      	lsls	r2, r1, #9
 800633a:	4610      	mov	r0, r2
 800633c:	4619      	mov	r1, r3
 800633e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006342:	2200      	movs	r2, #0
 8006344:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006348:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800634c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006350:	f7fa fcaa 	bl	8000ca8 <__aeabi_uldivmod>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4613      	mov	r3, r2
 800635a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800635e:	e067      	b.n	8006430 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006360:	4b75      	ldr	r3, [pc, #468]	@ (8006538 <HAL_RCC_GetSysClockFreq+0x354>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	099b      	lsrs	r3, r3, #6
 8006366:	2200      	movs	r2, #0
 8006368:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800636c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006370:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006378:	67bb      	str	r3, [r7, #120]	@ 0x78
 800637a:	2300      	movs	r3, #0
 800637c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800637e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006382:	4622      	mov	r2, r4
 8006384:	462b      	mov	r3, r5
 8006386:	f04f 0000 	mov.w	r0, #0
 800638a:	f04f 0100 	mov.w	r1, #0
 800638e:	0159      	lsls	r1, r3, #5
 8006390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006394:	0150      	lsls	r0, r2, #5
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4621      	mov	r1, r4
 800639c:	1a51      	subs	r1, r2, r1
 800639e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80063a0:	4629      	mov	r1, r5
 80063a2:	eb63 0301 	sbc.w	r3, r3, r1
 80063a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063a8:	f04f 0200 	mov.w	r2, #0
 80063ac:	f04f 0300 	mov.w	r3, #0
 80063b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80063b4:	4649      	mov	r1, r9
 80063b6:	018b      	lsls	r3, r1, #6
 80063b8:	4641      	mov	r1, r8
 80063ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063be:	4641      	mov	r1, r8
 80063c0:	018a      	lsls	r2, r1, #6
 80063c2:	4641      	mov	r1, r8
 80063c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80063c8:	4649      	mov	r1, r9
 80063ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	f04f 0300 	mov.w	r3, #0
 80063d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063e2:	4692      	mov	sl, r2
 80063e4:	469b      	mov	fp, r3
 80063e6:	4623      	mov	r3, r4
 80063e8:	eb1a 0303 	adds.w	r3, sl, r3
 80063ec:	623b      	str	r3, [r7, #32]
 80063ee:	462b      	mov	r3, r5
 80063f0:	eb4b 0303 	adc.w	r3, fp, r3
 80063f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80063f6:	f04f 0200 	mov.w	r2, #0
 80063fa:	f04f 0300 	mov.w	r3, #0
 80063fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006402:	4629      	mov	r1, r5
 8006404:	028b      	lsls	r3, r1, #10
 8006406:	4621      	mov	r1, r4
 8006408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800640c:	4621      	mov	r1, r4
 800640e:	028a      	lsls	r2, r1, #10
 8006410:	4610      	mov	r0, r2
 8006412:	4619      	mov	r1, r3
 8006414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006418:	2200      	movs	r2, #0
 800641a:	673b      	str	r3, [r7, #112]	@ 0x70
 800641c:	677a      	str	r2, [r7, #116]	@ 0x74
 800641e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006422:	f7fa fc41 	bl	8000ca8 <__aeabi_uldivmod>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4613      	mov	r3, r2
 800642c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006430:	4b41      	ldr	r3, [pc, #260]	@ (8006538 <HAL_RCC_GetSysClockFreq+0x354>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	0c1b      	lsrs	r3, r3, #16
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	3301      	adds	r3, #1
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006442:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800644a:	fbb2 f3f3 	udiv	r3, r2, r3
 800644e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006452:	e0eb      	b.n	800662c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006454:	4b38      	ldr	r3, [pc, #224]	@ (8006538 <HAL_RCC_GetSysClockFreq+0x354>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800645c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006460:	4b35      	ldr	r3, [pc, #212]	@ (8006538 <HAL_RCC_GetSysClockFreq+0x354>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d06b      	beq.n	8006544 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800646c:	4b32      	ldr	r3, [pc, #200]	@ (8006538 <HAL_RCC_GetSysClockFreq+0x354>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	099b      	lsrs	r3, r3, #6
 8006472:	2200      	movs	r2, #0
 8006474:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006476:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006478:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800647a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006480:	2300      	movs	r3, #0
 8006482:	667b      	str	r3, [r7, #100]	@ 0x64
 8006484:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006488:	4622      	mov	r2, r4
 800648a:	462b      	mov	r3, r5
 800648c:	f04f 0000 	mov.w	r0, #0
 8006490:	f04f 0100 	mov.w	r1, #0
 8006494:	0159      	lsls	r1, r3, #5
 8006496:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800649a:	0150      	lsls	r0, r2, #5
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4621      	mov	r1, r4
 80064a2:	1a51      	subs	r1, r2, r1
 80064a4:	61b9      	str	r1, [r7, #24]
 80064a6:	4629      	mov	r1, r5
 80064a8:	eb63 0301 	sbc.w	r3, r3, r1
 80064ac:	61fb      	str	r3, [r7, #28]
 80064ae:	f04f 0200 	mov.w	r2, #0
 80064b2:	f04f 0300 	mov.w	r3, #0
 80064b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80064ba:	4659      	mov	r1, fp
 80064bc:	018b      	lsls	r3, r1, #6
 80064be:	4651      	mov	r1, sl
 80064c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064c4:	4651      	mov	r1, sl
 80064c6:	018a      	lsls	r2, r1, #6
 80064c8:	4651      	mov	r1, sl
 80064ca:	ebb2 0801 	subs.w	r8, r2, r1
 80064ce:	4659      	mov	r1, fp
 80064d0:	eb63 0901 	sbc.w	r9, r3, r1
 80064d4:	f04f 0200 	mov.w	r2, #0
 80064d8:	f04f 0300 	mov.w	r3, #0
 80064dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064e8:	4690      	mov	r8, r2
 80064ea:	4699      	mov	r9, r3
 80064ec:	4623      	mov	r3, r4
 80064ee:	eb18 0303 	adds.w	r3, r8, r3
 80064f2:	613b      	str	r3, [r7, #16]
 80064f4:	462b      	mov	r3, r5
 80064f6:	eb49 0303 	adc.w	r3, r9, r3
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006508:	4629      	mov	r1, r5
 800650a:	024b      	lsls	r3, r1, #9
 800650c:	4621      	mov	r1, r4
 800650e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006512:	4621      	mov	r1, r4
 8006514:	024a      	lsls	r2, r1, #9
 8006516:	4610      	mov	r0, r2
 8006518:	4619      	mov	r1, r3
 800651a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800651e:	2200      	movs	r2, #0
 8006520:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006522:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006524:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006528:	f7fa fbbe 	bl	8000ca8 <__aeabi_uldivmod>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	4613      	mov	r3, r2
 8006532:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006536:	e065      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x420>
 8006538:	40023800 	.word	0x40023800
 800653c:	00f42400 	.word	0x00f42400
 8006540:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006544:	4b3d      	ldr	r3, [pc, #244]	@ (800663c <HAL_RCC_GetSysClockFreq+0x458>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	099b      	lsrs	r3, r3, #6
 800654a:	2200      	movs	r2, #0
 800654c:	4618      	mov	r0, r3
 800654e:	4611      	mov	r1, r2
 8006550:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006554:	653b      	str	r3, [r7, #80]	@ 0x50
 8006556:	2300      	movs	r3, #0
 8006558:	657b      	str	r3, [r7, #84]	@ 0x54
 800655a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800655e:	4642      	mov	r2, r8
 8006560:	464b      	mov	r3, r9
 8006562:	f04f 0000 	mov.w	r0, #0
 8006566:	f04f 0100 	mov.w	r1, #0
 800656a:	0159      	lsls	r1, r3, #5
 800656c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006570:	0150      	lsls	r0, r2, #5
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	4641      	mov	r1, r8
 8006578:	1a51      	subs	r1, r2, r1
 800657a:	60b9      	str	r1, [r7, #8]
 800657c:	4649      	mov	r1, r9
 800657e:	eb63 0301 	sbc.w	r3, r3, r1
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	f04f 0300 	mov.w	r3, #0
 800658c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006590:	4659      	mov	r1, fp
 8006592:	018b      	lsls	r3, r1, #6
 8006594:	4651      	mov	r1, sl
 8006596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800659a:	4651      	mov	r1, sl
 800659c:	018a      	lsls	r2, r1, #6
 800659e:	4651      	mov	r1, sl
 80065a0:	1a54      	subs	r4, r2, r1
 80065a2:	4659      	mov	r1, fp
 80065a4:	eb63 0501 	sbc.w	r5, r3, r1
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	f04f 0300 	mov.w	r3, #0
 80065b0:	00eb      	lsls	r3, r5, #3
 80065b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065b6:	00e2      	lsls	r2, r4, #3
 80065b8:	4614      	mov	r4, r2
 80065ba:	461d      	mov	r5, r3
 80065bc:	4643      	mov	r3, r8
 80065be:	18e3      	adds	r3, r4, r3
 80065c0:	603b      	str	r3, [r7, #0]
 80065c2:	464b      	mov	r3, r9
 80065c4:	eb45 0303 	adc.w	r3, r5, r3
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	f04f 0200 	mov.w	r2, #0
 80065ce:	f04f 0300 	mov.w	r3, #0
 80065d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065d6:	4629      	mov	r1, r5
 80065d8:	028b      	lsls	r3, r1, #10
 80065da:	4621      	mov	r1, r4
 80065dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065e0:	4621      	mov	r1, r4
 80065e2:	028a      	lsls	r2, r1, #10
 80065e4:	4610      	mov	r0, r2
 80065e6:	4619      	mov	r1, r3
 80065e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065ec:	2200      	movs	r2, #0
 80065ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80065f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80065f6:	f7fa fb57 	bl	8000ca8 <__aeabi_uldivmod>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4613      	mov	r3, r2
 8006600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006604:	4b0d      	ldr	r3, [pc, #52]	@ (800663c <HAL_RCC_GetSysClockFreq+0x458>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	0f1b      	lsrs	r3, r3, #28
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006612:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006616:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800661a:	fbb2 f3f3 	udiv	r3, r2, r3
 800661e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006622:	e003      	b.n	800662c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006624:	4b06      	ldr	r3, [pc, #24]	@ (8006640 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006626:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800662a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800662c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006630:	4618      	mov	r0, r3
 8006632:	37b8      	adds	r7, #184	@ 0xb8
 8006634:	46bd      	mov	sp, r7
 8006636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800663a:	bf00      	nop
 800663c:	40023800 	.word	0x40023800
 8006640:	00f42400 	.word	0x00f42400

08006644 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e28d      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 8083 	beq.w	800676a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006664:	4b94      	ldr	r3, [pc, #592]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 030c 	and.w	r3, r3, #12
 800666c:	2b04      	cmp	r3, #4
 800666e:	d019      	beq.n	80066a4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006670:	4b91      	ldr	r3, [pc, #580]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 030c 	and.w	r3, r3, #12
        || \
 8006678:	2b08      	cmp	r3, #8
 800667a:	d106      	bne.n	800668a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800667c:	4b8e      	ldr	r3, [pc, #568]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006684:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006688:	d00c      	beq.n	80066a4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800668a:	4b8b      	ldr	r3, [pc, #556]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006692:	2b0c      	cmp	r3, #12
 8006694:	d112      	bne.n	80066bc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006696:	4b88      	ldr	r3, [pc, #544]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800669e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066a2:	d10b      	bne.n	80066bc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066a4:	4b84      	ldr	r3, [pc, #528]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d05b      	beq.n	8006768 <HAL_RCC_OscConfig+0x124>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d157      	bne.n	8006768 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e25a      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066c4:	d106      	bne.n	80066d4 <HAL_RCC_OscConfig+0x90>
 80066c6:	4b7c      	ldr	r3, [pc, #496]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a7b      	ldr	r2, [pc, #492]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 80066cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066d0:	6013      	str	r3, [r2, #0]
 80066d2:	e01d      	b.n	8006710 <HAL_RCC_OscConfig+0xcc>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066dc:	d10c      	bne.n	80066f8 <HAL_RCC_OscConfig+0xb4>
 80066de:	4b76      	ldr	r3, [pc, #472]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a75      	ldr	r2, [pc, #468]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 80066e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	4b73      	ldr	r3, [pc, #460]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a72      	ldr	r2, [pc, #456]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 80066f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	e00b      	b.n	8006710 <HAL_RCC_OscConfig+0xcc>
 80066f8:	4b6f      	ldr	r3, [pc, #444]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a6e      	ldr	r2, [pc, #440]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 80066fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	4b6c      	ldr	r3, [pc, #432]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a6b      	ldr	r2, [pc, #428]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 800670a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800670e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d013      	beq.n	8006740 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006718:	f7fd f84a 	bl	80037b0 <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006720:	f7fd f846 	bl	80037b0 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b64      	cmp	r3, #100	@ 0x64
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e21f      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006732:	4b61      	ldr	r3, [pc, #388]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0f0      	beq.n	8006720 <HAL_RCC_OscConfig+0xdc>
 800673e:	e014      	b.n	800676a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006740:	f7fd f836 	bl	80037b0 <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006748:	f7fd f832 	bl	80037b0 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b64      	cmp	r3, #100	@ 0x64
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e20b      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800675a:	4b57      	ldr	r3, [pc, #348]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1f0      	bne.n	8006748 <HAL_RCC_OscConfig+0x104>
 8006766:	e000      	b.n	800676a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d06f      	beq.n	8006856 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006776:	4b50      	ldr	r3, [pc, #320]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f003 030c 	and.w	r3, r3, #12
 800677e:	2b00      	cmp	r3, #0
 8006780:	d017      	beq.n	80067b2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006782:	4b4d      	ldr	r3, [pc, #308]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 030c 	and.w	r3, r3, #12
        || \
 800678a:	2b08      	cmp	r3, #8
 800678c:	d105      	bne.n	800679a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800678e:	4b4a      	ldr	r3, [pc, #296]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00b      	beq.n	80067b2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800679a:	4b47      	ldr	r3, [pc, #284]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80067a2:	2b0c      	cmp	r3, #12
 80067a4:	d11c      	bne.n	80067e0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067a6:	4b44      	ldr	r3, [pc, #272]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d116      	bne.n	80067e0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067b2:	4b41      	ldr	r3, [pc, #260]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d005      	beq.n	80067ca <HAL_RCC_OscConfig+0x186>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d001      	beq.n	80067ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e1d3      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ca:	4b3b      	ldr	r3, [pc, #236]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	4937      	ldr	r1, [pc, #220]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067de:	e03a      	b.n	8006856 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d020      	beq.n	800682a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067e8:	4b34      	ldr	r3, [pc, #208]	@ (80068bc <HAL_RCC_OscConfig+0x278>)
 80067ea:	2201      	movs	r2, #1
 80067ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ee:	f7fc ffdf 	bl	80037b0 <HAL_GetTick>
 80067f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067f4:	e008      	b.n	8006808 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067f6:	f7fc ffdb 	bl	80037b0 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d901      	bls.n	8006808 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e1b4      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006808:	4b2b      	ldr	r3, [pc, #172]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0f0      	beq.n	80067f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006814:	4b28      	ldr	r3, [pc, #160]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	4925      	ldr	r1, [pc, #148]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 8006824:	4313      	orrs	r3, r2
 8006826:	600b      	str	r3, [r1, #0]
 8006828:	e015      	b.n	8006856 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800682a:	4b24      	ldr	r3, [pc, #144]	@ (80068bc <HAL_RCC_OscConfig+0x278>)
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006830:	f7fc ffbe 	bl	80037b0 <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006836:	e008      	b.n	800684a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006838:	f7fc ffba 	bl	80037b0 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b02      	cmp	r3, #2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e193      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800684a:	4b1b      	ldr	r3, [pc, #108]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1f0      	bne.n	8006838 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d036      	beq.n	80068d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d016      	beq.n	8006898 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800686a:	4b15      	ldr	r3, [pc, #84]	@ (80068c0 <HAL_RCC_OscConfig+0x27c>)
 800686c:	2201      	movs	r2, #1
 800686e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006870:	f7fc ff9e 	bl	80037b0 <HAL_GetTick>
 8006874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006876:	e008      	b.n	800688a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006878:	f7fc ff9a 	bl	80037b0 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e173      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800688a:	4b0b      	ldr	r3, [pc, #44]	@ (80068b8 <HAL_RCC_OscConfig+0x274>)
 800688c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0f0      	beq.n	8006878 <HAL_RCC_OscConfig+0x234>
 8006896:	e01b      	b.n	80068d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006898:	4b09      	ldr	r3, [pc, #36]	@ (80068c0 <HAL_RCC_OscConfig+0x27c>)
 800689a:	2200      	movs	r2, #0
 800689c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800689e:	f7fc ff87 	bl	80037b0 <HAL_GetTick>
 80068a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068a4:	e00e      	b.n	80068c4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068a6:	f7fc ff83 	bl	80037b0 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d907      	bls.n	80068c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e15c      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
 80068b8:	40023800 	.word	0x40023800
 80068bc:	42470000 	.word	0x42470000
 80068c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068c4:	4b8a      	ldr	r3, [pc, #552]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 80068c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1ea      	bne.n	80068a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8097 	beq.w	8006a0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068de:	2300      	movs	r3, #0
 80068e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068e2:	4b83      	ldr	r3, [pc, #524]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 80068e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10f      	bne.n	800690e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ee:	2300      	movs	r3, #0
 80068f0:	60bb      	str	r3, [r7, #8]
 80068f2:	4b7f      	ldr	r3, [pc, #508]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 80068f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f6:	4a7e      	ldr	r2, [pc, #504]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 80068f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80068fe:	4b7c      	ldr	r3, [pc, #496]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 8006900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006906:	60bb      	str	r3, [r7, #8]
 8006908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800690a:	2301      	movs	r3, #1
 800690c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800690e:	4b79      	ldr	r3, [pc, #484]	@ (8006af4 <HAL_RCC_OscConfig+0x4b0>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006916:	2b00      	cmp	r3, #0
 8006918:	d118      	bne.n	800694c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800691a:	4b76      	ldr	r3, [pc, #472]	@ (8006af4 <HAL_RCC_OscConfig+0x4b0>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a75      	ldr	r2, [pc, #468]	@ (8006af4 <HAL_RCC_OscConfig+0x4b0>)
 8006920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006926:	f7fc ff43 	bl	80037b0 <HAL_GetTick>
 800692a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800692c:	e008      	b.n	8006940 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800692e:	f7fc ff3f 	bl	80037b0 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d901      	bls.n	8006940 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e118      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006940:	4b6c      	ldr	r3, [pc, #432]	@ (8006af4 <HAL_RCC_OscConfig+0x4b0>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006948:	2b00      	cmp	r3, #0
 800694a:	d0f0      	beq.n	800692e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d106      	bne.n	8006962 <HAL_RCC_OscConfig+0x31e>
 8006954:	4b66      	ldr	r3, [pc, #408]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 8006956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006958:	4a65      	ldr	r2, [pc, #404]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 800695a:	f043 0301 	orr.w	r3, r3, #1
 800695e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006960:	e01c      	b.n	800699c <HAL_RCC_OscConfig+0x358>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	2b05      	cmp	r3, #5
 8006968:	d10c      	bne.n	8006984 <HAL_RCC_OscConfig+0x340>
 800696a:	4b61      	ldr	r3, [pc, #388]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 800696c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696e:	4a60      	ldr	r2, [pc, #384]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 8006970:	f043 0304 	orr.w	r3, r3, #4
 8006974:	6713      	str	r3, [r2, #112]	@ 0x70
 8006976:	4b5e      	ldr	r3, [pc, #376]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 8006978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697a:	4a5d      	ldr	r2, [pc, #372]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 800697c:	f043 0301 	orr.w	r3, r3, #1
 8006980:	6713      	str	r3, [r2, #112]	@ 0x70
 8006982:	e00b      	b.n	800699c <HAL_RCC_OscConfig+0x358>
 8006984:	4b5a      	ldr	r3, [pc, #360]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 8006986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006988:	4a59      	ldr	r2, [pc, #356]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 800698a:	f023 0301 	bic.w	r3, r3, #1
 800698e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006990:	4b57      	ldr	r3, [pc, #348]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 8006992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006994:	4a56      	ldr	r2, [pc, #344]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 8006996:	f023 0304 	bic.w	r3, r3, #4
 800699a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d015      	beq.n	80069d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a4:	f7fc ff04 	bl	80037b0 <HAL_GetTick>
 80069a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069aa:	e00a      	b.n	80069c2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ac:	f7fc ff00 	bl	80037b0 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e0d7      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c2:	4b4b      	ldr	r3, [pc, #300]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 80069c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069c6:	f003 0302 	and.w	r3, r3, #2
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0ee      	beq.n	80069ac <HAL_RCC_OscConfig+0x368>
 80069ce:	e014      	b.n	80069fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d0:	f7fc feee 	bl	80037b0 <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069d6:	e00a      	b.n	80069ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069d8:	f7fc feea 	bl	80037b0 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e0c1      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ee:	4b40      	ldr	r3, [pc, #256]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 80069f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1ee      	bne.n	80069d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d105      	bne.n	8006a0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a00:	4b3b      	ldr	r3, [pc, #236]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 8006a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a04:	4a3a      	ldr	r2, [pc, #232]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 8006a06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 80ad 	beq.w	8006b70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a16:	4b36      	ldr	r3, [pc, #216]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f003 030c 	and.w	r3, r3, #12
 8006a1e:	2b08      	cmp	r3, #8
 8006a20:	d060      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d145      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a2a:	4b33      	ldr	r3, [pc, #204]	@ (8006af8 <HAL_RCC_OscConfig+0x4b4>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a30:	f7fc febe 	bl	80037b0 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a38:	f7fc feba 	bl	80037b0 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e093      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a4a:	4b29      	ldr	r3, [pc, #164]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1f0      	bne.n	8006a38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69da      	ldr	r2, [r3, #28]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a64:	019b      	lsls	r3, r3, #6
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6c:	085b      	lsrs	r3, r3, #1
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	041b      	lsls	r3, r3, #16
 8006a72:	431a      	orrs	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a78:	061b      	lsls	r3, r3, #24
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a80:	071b      	lsls	r3, r3, #28
 8006a82:	491b      	ldr	r1, [pc, #108]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a88:	4b1b      	ldr	r3, [pc, #108]	@ (8006af8 <HAL_RCC_OscConfig+0x4b4>)
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8e:	f7fc fe8f 	bl	80037b0 <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a94:	e008      	b.n	8006aa8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a96:	f7fc fe8b 	bl	80037b0 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e064      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aa8:	4b11      	ldr	r3, [pc, #68]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0f0      	beq.n	8006a96 <HAL_RCC_OscConfig+0x452>
 8006ab4:	e05c      	b.n	8006b70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ab6:	4b10      	ldr	r3, [pc, #64]	@ (8006af8 <HAL_RCC_OscConfig+0x4b4>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006abc:	f7fc fe78 	bl	80037b0 <HAL_GetTick>
 8006ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ac2:	e008      	b.n	8006ad6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ac4:	f7fc fe74 	bl	80037b0 <HAL_GetTick>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d901      	bls.n	8006ad6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e04d      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ad6:	4b06      	ldr	r3, [pc, #24]	@ (8006af0 <HAL_RCC_OscConfig+0x4ac>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1f0      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x480>
 8006ae2:	e045      	b.n	8006b70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d107      	bne.n	8006afc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e040      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
 8006af0:	40023800 	.word	0x40023800
 8006af4:	40007000 	.word	0x40007000
 8006af8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006afc:	4b1f      	ldr	r3, [pc, #124]	@ (8006b7c <HAL_RCC_OscConfig+0x538>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d030      	beq.n	8006b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d129      	bne.n	8006b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d122      	bne.n	8006b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d119      	bne.n	8006b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b42:	085b      	lsrs	r3, r3, #1
 8006b44:	3b01      	subs	r3, #1
 8006b46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d10f      	bne.n	8006b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d107      	bne.n	8006b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d001      	beq.n	8006b70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e000      	b.n	8006b72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40023800 	.word	0x40023800

08006b80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e041      	b.n	8006c16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7fb ffec 	bl	8002b84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	f000 faec 	bl	800719c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d109      	bne.n	8006c44 <HAL_TIM_PWM_Start+0x24>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	bf14      	ite	ne
 8006c3c:	2301      	movne	r3, #1
 8006c3e:	2300      	moveq	r3, #0
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	e022      	b.n	8006c8a <HAL_TIM_PWM_Start+0x6a>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b04      	cmp	r3, #4
 8006c48:	d109      	bne.n	8006c5e <HAL_TIM_PWM_Start+0x3e>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	bf14      	ite	ne
 8006c56:	2301      	movne	r3, #1
 8006c58:	2300      	moveq	r3, #0
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	e015      	b.n	8006c8a <HAL_TIM_PWM_Start+0x6a>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d109      	bne.n	8006c78 <HAL_TIM_PWM_Start+0x58>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	bf14      	ite	ne
 8006c70:	2301      	movne	r3, #1
 8006c72:	2300      	moveq	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	e008      	b.n	8006c8a <HAL_TIM_PWM_Start+0x6a>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	bf14      	ite	ne
 8006c84:	2301      	movne	r3, #1
 8006c86:	2300      	moveq	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e07c      	b.n	8006d8c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d104      	bne.n	8006ca2 <HAL_TIM_PWM_Start+0x82>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ca0:	e013      	b.n	8006cca <HAL_TIM_PWM_Start+0xaa>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	d104      	bne.n	8006cb2 <HAL_TIM_PWM_Start+0x92>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cb0:	e00b      	b.n	8006cca <HAL_TIM_PWM_Start+0xaa>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d104      	bne.n	8006cc2 <HAL_TIM_PWM_Start+0xa2>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cc0:	e003      	b.n	8006cca <HAL_TIM_PWM_Start+0xaa>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fcbe 	bl	8007654 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8006d94 <HAL_TIM_PWM_Start+0x174>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d004      	beq.n	8006cec <HAL_TIM_PWM_Start+0xcc>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d98 <HAL_TIM_PWM_Start+0x178>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d101      	bne.n	8006cf0 <HAL_TIM_PWM_Start+0xd0>
 8006cec:	2301      	movs	r3, #1
 8006cee:	e000      	b.n	8006cf2 <HAL_TIM_PWM_Start+0xd2>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d007      	beq.n	8006d06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a22      	ldr	r2, [pc, #136]	@ (8006d94 <HAL_TIM_PWM_Start+0x174>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d022      	beq.n	8006d56 <HAL_TIM_PWM_Start+0x136>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d18:	d01d      	beq.n	8006d56 <HAL_TIM_PWM_Start+0x136>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8006d9c <HAL_TIM_PWM_Start+0x17c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d018      	beq.n	8006d56 <HAL_TIM_PWM_Start+0x136>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a1d      	ldr	r2, [pc, #116]	@ (8006da0 <HAL_TIM_PWM_Start+0x180>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d013      	beq.n	8006d56 <HAL_TIM_PWM_Start+0x136>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a1c      	ldr	r2, [pc, #112]	@ (8006da4 <HAL_TIM_PWM_Start+0x184>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d00e      	beq.n	8006d56 <HAL_TIM_PWM_Start+0x136>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a16      	ldr	r2, [pc, #88]	@ (8006d98 <HAL_TIM_PWM_Start+0x178>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d009      	beq.n	8006d56 <HAL_TIM_PWM_Start+0x136>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a18      	ldr	r2, [pc, #96]	@ (8006da8 <HAL_TIM_PWM_Start+0x188>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d004      	beq.n	8006d56 <HAL_TIM_PWM_Start+0x136>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a16      	ldr	r2, [pc, #88]	@ (8006dac <HAL_TIM_PWM_Start+0x18c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d111      	bne.n	8006d7a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2b06      	cmp	r3, #6
 8006d66:	d010      	beq.n	8006d8a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0201 	orr.w	r2, r2, #1
 8006d76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d78:	e007      	b.n	8006d8a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f042 0201 	orr.w	r2, r2, #1
 8006d88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40010000 	.word	0x40010000
 8006d98:	40010400 	.word	0x40010400
 8006d9c:	40000400 	.word	0x40000400
 8006da0:	40000800 	.word	0x40000800
 8006da4:	40000c00 	.word	0x40000c00
 8006da8:	40014000 	.word	0x40014000
 8006dac:	40001800 	.word	0x40001800

08006db0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e097      	b.n	8006ef4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d106      	bne.n	8006dde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7fb fe59 	bl	8002a90 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2202      	movs	r2, #2
 8006de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6812      	ldr	r2, [r2, #0]
 8006df0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006df4:	f023 0307 	bic.w	r3, r3, #7
 8006df8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f000 f9c9 	bl	800719c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e32:	f023 0303 	bic.w	r3, r3, #3
 8006e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	021b      	lsls	r3, r3, #8
 8006e42:	4313      	orrs	r3, r2
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006e50:	f023 030c 	bic.w	r3, r3, #12
 8006e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	011a      	lsls	r2, r3, #4
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	031b      	lsls	r3, r3, #12
 8006e80:	4313      	orrs	r3, r2
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006e8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006e96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	011b      	lsls	r3, r3, #4
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006f24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d110      	bne.n	8006f4e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f2c:	7bfb      	ldrb	r3, [r7, #15]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d102      	bne.n	8006f38 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f32:	7b7b      	ldrb	r3, [r7, #13]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d001      	beq.n	8006f3c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e069      	b.n	8007010 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f4c:	e031      	b.n	8006fb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b04      	cmp	r3, #4
 8006f52:	d110      	bne.n	8006f76 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d102      	bne.n	8006f60 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f5a:	7b3b      	ldrb	r3, [r7, #12]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d001      	beq.n	8006f64 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e055      	b.n	8007010 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2202      	movs	r2, #2
 8006f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f74:	e01d      	b.n	8006fb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d108      	bne.n	8006f8e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f7c:	7bbb      	ldrb	r3, [r7, #14]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d105      	bne.n	8006f8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f82:	7b7b      	ldrb	r3, [r7, #13]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d102      	bne.n	8006f8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f88:	7b3b      	ldrb	r3, [r7, #12]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d001      	beq.n	8006f92 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e03e      	b.n	8007010 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2202      	movs	r2, #2
 8006f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2202      	movs	r2, #2
 8006fae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <HAL_TIM_Encoder_Start+0xc4>
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	d008      	beq.n	8006fd0 <HAL_TIM_Encoder_Start+0xd4>
 8006fbe:	e00f      	b.n	8006fe0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fb43 	bl	8007654 <TIM_CCxChannelCmd>
      break;
 8006fce:	e016      	b.n	8006ffe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	2104      	movs	r1, #4
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 fb3b 	bl	8007654 <TIM_CCxChannelCmd>
      break;
 8006fde:	e00e      	b.n	8006ffe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fb33 	bl	8007654 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	2104      	movs	r1, #4
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fb2c 	bl	8007654 <TIM_CCxChannelCmd>
      break;
 8006ffc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0201 	orr.w	r2, r2, #1
 800700c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800702e:	2b01      	cmp	r3, #1
 8007030:	d101      	bne.n	8007036 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007032:	2302      	movs	r3, #2
 8007034:	e0ae      	b.n	8007194 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b0c      	cmp	r3, #12
 8007042:	f200 809f 	bhi.w	8007184 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007046:	a201      	add	r2, pc, #4	@ (adr r2, 800704c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	08007081 	.word	0x08007081
 8007050:	08007185 	.word	0x08007185
 8007054:	08007185 	.word	0x08007185
 8007058:	08007185 	.word	0x08007185
 800705c:	080070c1 	.word	0x080070c1
 8007060:	08007185 	.word	0x08007185
 8007064:	08007185 	.word	0x08007185
 8007068:	08007185 	.word	0x08007185
 800706c:	08007103 	.word	0x08007103
 8007070:	08007185 	.word	0x08007185
 8007074:	08007185 	.word	0x08007185
 8007078:	08007185 	.word	0x08007185
 800707c:	08007143 	.word	0x08007143
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68b9      	ldr	r1, [r7, #8]
 8007086:	4618      	mov	r0, r3
 8007088:	f000 f934 	bl	80072f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699a      	ldr	r2, [r3, #24]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0208 	orr.w	r2, r2, #8
 800709a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699a      	ldr	r2, [r3, #24]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0204 	bic.w	r2, r2, #4
 80070aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6999      	ldr	r1, [r3, #24]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	691a      	ldr	r2, [r3, #16]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	619a      	str	r2, [r3, #24]
      break;
 80070be:	e064      	b.n	800718a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68b9      	ldr	r1, [r7, #8]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 f984 	bl	80073d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699a      	ldr	r2, [r3, #24]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6999      	ldr	r1, [r3, #24]
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	021a      	lsls	r2, r3, #8
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	619a      	str	r2, [r3, #24]
      break;
 8007100:	e043      	b.n	800718a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	4618      	mov	r0, r3
 800710a:	f000 f9d9 	bl	80074c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	69da      	ldr	r2, [r3, #28]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f042 0208 	orr.w	r2, r2, #8
 800711c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69da      	ldr	r2, [r3, #28]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0204 	bic.w	r2, r2, #4
 800712c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69d9      	ldr	r1, [r3, #28]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	691a      	ldr	r2, [r3, #16]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	61da      	str	r2, [r3, #28]
      break;
 8007140:	e023      	b.n	800718a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68b9      	ldr	r1, [r7, #8]
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fa2d 	bl	80075a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	69da      	ldr	r2, [r3, #28]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800715c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	69da      	ldr	r2, [r3, #28]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800716c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69d9      	ldr	r1, [r3, #28]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	021a      	lsls	r2, r3, #8
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	61da      	str	r2, [r3, #28]
      break;
 8007182:	e002      	b.n	800718a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	75fb      	strb	r3, [r7, #23]
      break;
 8007188:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007192:	7dfb      	ldrb	r3, [r7, #23]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a46      	ldr	r2, [pc, #280]	@ (80072c8 <TIM_Base_SetConfig+0x12c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d013      	beq.n	80071dc <TIM_Base_SetConfig+0x40>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071ba:	d00f      	beq.n	80071dc <TIM_Base_SetConfig+0x40>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a43      	ldr	r2, [pc, #268]	@ (80072cc <TIM_Base_SetConfig+0x130>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d00b      	beq.n	80071dc <TIM_Base_SetConfig+0x40>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a42      	ldr	r2, [pc, #264]	@ (80072d0 <TIM_Base_SetConfig+0x134>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d007      	beq.n	80071dc <TIM_Base_SetConfig+0x40>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a41      	ldr	r2, [pc, #260]	@ (80072d4 <TIM_Base_SetConfig+0x138>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d003      	beq.n	80071dc <TIM_Base_SetConfig+0x40>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a40      	ldr	r2, [pc, #256]	@ (80072d8 <TIM_Base_SetConfig+0x13c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d108      	bne.n	80071ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a35      	ldr	r2, [pc, #212]	@ (80072c8 <TIM_Base_SetConfig+0x12c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d02b      	beq.n	800724e <TIM_Base_SetConfig+0xb2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071fc:	d027      	beq.n	800724e <TIM_Base_SetConfig+0xb2>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a32      	ldr	r2, [pc, #200]	@ (80072cc <TIM_Base_SetConfig+0x130>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d023      	beq.n	800724e <TIM_Base_SetConfig+0xb2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a31      	ldr	r2, [pc, #196]	@ (80072d0 <TIM_Base_SetConfig+0x134>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d01f      	beq.n	800724e <TIM_Base_SetConfig+0xb2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a30      	ldr	r2, [pc, #192]	@ (80072d4 <TIM_Base_SetConfig+0x138>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d01b      	beq.n	800724e <TIM_Base_SetConfig+0xb2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a2f      	ldr	r2, [pc, #188]	@ (80072d8 <TIM_Base_SetConfig+0x13c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d017      	beq.n	800724e <TIM_Base_SetConfig+0xb2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a2e      	ldr	r2, [pc, #184]	@ (80072dc <TIM_Base_SetConfig+0x140>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d013      	beq.n	800724e <TIM_Base_SetConfig+0xb2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a2d      	ldr	r2, [pc, #180]	@ (80072e0 <TIM_Base_SetConfig+0x144>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d00f      	beq.n	800724e <TIM_Base_SetConfig+0xb2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a2c      	ldr	r2, [pc, #176]	@ (80072e4 <TIM_Base_SetConfig+0x148>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d00b      	beq.n	800724e <TIM_Base_SetConfig+0xb2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a2b      	ldr	r2, [pc, #172]	@ (80072e8 <TIM_Base_SetConfig+0x14c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d007      	beq.n	800724e <TIM_Base_SetConfig+0xb2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a2a      	ldr	r2, [pc, #168]	@ (80072ec <TIM_Base_SetConfig+0x150>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d003      	beq.n	800724e <TIM_Base_SetConfig+0xb2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a29      	ldr	r2, [pc, #164]	@ (80072f0 <TIM_Base_SetConfig+0x154>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d108      	bne.n	8007260 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	4313      	orrs	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a10      	ldr	r2, [pc, #64]	@ (80072c8 <TIM_Base_SetConfig+0x12c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d003      	beq.n	8007294 <TIM_Base_SetConfig+0xf8>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a12      	ldr	r2, [pc, #72]	@ (80072d8 <TIM_Base_SetConfig+0x13c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d103      	bne.n	800729c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	691a      	ldr	r2, [r3, #16]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d105      	bne.n	80072ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	f023 0201 	bic.w	r2, r3, #1
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	611a      	str	r2, [r3, #16]
  }
}
 80072ba:	bf00      	nop
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	40010000 	.word	0x40010000
 80072cc:	40000400 	.word	0x40000400
 80072d0:	40000800 	.word	0x40000800
 80072d4:	40000c00 	.word	0x40000c00
 80072d8:	40010400 	.word	0x40010400
 80072dc:	40014000 	.word	0x40014000
 80072e0:	40014400 	.word	0x40014400
 80072e4:	40014800 	.word	0x40014800
 80072e8:	40001800 	.word	0x40001800
 80072ec:	40001c00 	.word	0x40001c00
 80072f0:	40002000 	.word	0x40002000

080072f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	f023 0201 	bic.w	r2, r3, #1
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0303 	bic.w	r3, r3, #3
 800732a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f023 0302 	bic.w	r3, r3, #2
 800733c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	4313      	orrs	r3, r2
 8007346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a20      	ldr	r2, [pc, #128]	@ (80073cc <TIM_OC1_SetConfig+0xd8>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d003      	beq.n	8007358 <TIM_OC1_SetConfig+0x64>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a1f      	ldr	r2, [pc, #124]	@ (80073d0 <TIM_OC1_SetConfig+0xdc>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d10c      	bne.n	8007372 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f023 0308 	bic.w	r3, r3, #8
 800735e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f023 0304 	bic.w	r3, r3, #4
 8007370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a15      	ldr	r2, [pc, #84]	@ (80073cc <TIM_OC1_SetConfig+0xd8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d003      	beq.n	8007382 <TIM_OC1_SetConfig+0x8e>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a14      	ldr	r2, [pc, #80]	@ (80073d0 <TIM_OC1_SetConfig+0xdc>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d111      	bne.n	80073a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	4313      	orrs	r3, r2
 800739a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	621a      	str	r2, [r3, #32]
}
 80073c0:	bf00      	nop
 80073c2:	371c      	adds	r7, #28
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	40010000 	.word	0x40010000
 80073d0:	40010400 	.word	0x40010400

080073d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	f023 0210 	bic.w	r2, r3, #16
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800740a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	021b      	lsls	r3, r3, #8
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f023 0320 	bic.w	r3, r3, #32
 800741e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	011b      	lsls	r3, r3, #4
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	4313      	orrs	r3, r2
 800742a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a22      	ldr	r2, [pc, #136]	@ (80074b8 <TIM_OC2_SetConfig+0xe4>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d003      	beq.n	800743c <TIM_OC2_SetConfig+0x68>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a21      	ldr	r2, [pc, #132]	@ (80074bc <TIM_OC2_SetConfig+0xe8>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d10d      	bne.n	8007458 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	011b      	lsls	r3, r3, #4
 800744a:	697a      	ldr	r2, [r7, #20]
 800744c:	4313      	orrs	r3, r2
 800744e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007456:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a17      	ldr	r2, [pc, #92]	@ (80074b8 <TIM_OC2_SetConfig+0xe4>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d003      	beq.n	8007468 <TIM_OC2_SetConfig+0x94>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a16      	ldr	r2, [pc, #88]	@ (80074bc <TIM_OC2_SetConfig+0xe8>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d113      	bne.n	8007490 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800746e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007476:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	4313      	orrs	r3, r2
 8007482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	4313      	orrs	r3, r2
 800748e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	621a      	str	r2, [r3, #32]
}
 80074aa:	bf00      	nop
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	40010000 	.word	0x40010000
 80074bc:	40010400 	.word	0x40010400

080074c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f023 0303 	bic.w	r3, r3, #3
 80074f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	4313      	orrs	r3, r2
 8007500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a21      	ldr	r2, [pc, #132]	@ (80075a0 <TIM_OC3_SetConfig+0xe0>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d003      	beq.n	8007526 <TIM_OC3_SetConfig+0x66>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a20      	ldr	r2, [pc, #128]	@ (80075a4 <TIM_OC3_SetConfig+0xe4>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d10d      	bne.n	8007542 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800752c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	021b      	lsls	r3, r3, #8
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a16      	ldr	r2, [pc, #88]	@ (80075a0 <TIM_OC3_SetConfig+0xe0>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d003      	beq.n	8007552 <TIM_OC3_SetConfig+0x92>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a15      	ldr	r2, [pc, #84]	@ (80075a4 <TIM_OC3_SetConfig+0xe4>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d113      	bne.n	800757a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	4313      	orrs	r3, r2
 8007578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	621a      	str	r2, [r3, #32]
}
 8007594:	bf00      	nop
 8007596:	371c      	adds	r7, #28
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	40010000 	.word	0x40010000
 80075a4:	40010400 	.word	0x40010400

080075a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	021b      	lsls	r3, r3, #8
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80075f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	031b      	lsls	r3, r3, #12
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a12      	ldr	r2, [pc, #72]	@ (800764c <TIM_OC4_SetConfig+0xa4>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d003      	beq.n	8007610 <TIM_OC4_SetConfig+0x68>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a11      	ldr	r2, [pc, #68]	@ (8007650 <TIM_OC4_SetConfig+0xa8>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d109      	bne.n	8007624 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007616:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	695b      	ldr	r3, [r3, #20]
 800761c:	019b      	lsls	r3, r3, #6
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	4313      	orrs	r3, r2
 8007622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	621a      	str	r2, [r3, #32]
}
 800763e:	bf00      	nop
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40010000 	.word	0x40010000
 8007650:	40010400 	.word	0x40010400

08007654 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f003 031f 	and.w	r3, r3, #31
 8007666:	2201      	movs	r2, #1
 8007668:	fa02 f303 	lsl.w	r3, r2, r3
 800766c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6a1a      	ldr	r2, [r3, #32]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	43db      	mvns	r3, r3
 8007676:	401a      	ands	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6a1a      	ldr	r2, [r3, #32]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f003 031f 	and.w	r3, r3, #31
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	fa01 f303 	lsl.w	r3, r1, r3
 800768c:	431a      	orrs	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	621a      	str	r2, [r3, #32]
}
 8007692:	bf00      	nop
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
	...

080076a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d101      	bne.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076b4:	2302      	movs	r3, #2
 80076b6:	e05a      	b.n	800776e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2202      	movs	r2, #2
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a21      	ldr	r2, [pc, #132]	@ (800777c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d022      	beq.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007704:	d01d      	beq.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a1d      	ldr	r2, [pc, #116]	@ (8007780 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d018      	beq.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1b      	ldr	r2, [pc, #108]	@ (8007784 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d013      	beq.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1a      	ldr	r2, [pc, #104]	@ (8007788 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d00e      	beq.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a18      	ldr	r2, [pc, #96]	@ (800778c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d009      	beq.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a17      	ldr	r2, [pc, #92]	@ (8007790 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d004      	beq.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a15      	ldr	r2, [pc, #84]	@ (8007794 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d10c      	bne.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	4313      	orrs	r3, r2
 8007752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40010000 	.word	0x40010000
 8007780:	40000400 	.word	0x40000400
 8007784:	40000800 	.word	0x40000800
 8007788:	40000c00 	.word	0x40000c00
 800778c:	40010400 	.word	0x40010400
 8007790:	40014000 	.word	0x40014000
 8007794:	40001800 	.word	0x40001800

08007798 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e042      	b.n	8007830 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d106      	bne.n	80077c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7fb fa5c 	bl	8002c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2224      	movs	r2, #36	@ 0x24
 80077c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68da      	ldr	r2, [r3, #12]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fc85 	bl	80080ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	691a      	ldr	r2, [r3, #16]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	695a      	ldr	r2, [r3, #20]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2220      	movs	r2, #32
 800781c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2220      	movs	r2, #32
 8007824:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b0ba      	sub	sp, #232	@ 0xe8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800785e:	2300      	movs	r3, #0
 8007860:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007864:	2300      	movs	r3, #0
 8007866:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800786a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800786e:	f003 030f 	and.w	r3, r3, #15
 8007872:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10f      	bne.n	800789e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800787e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b00      	cmp	r3, #0
 8007888:	d009      	beq.n	800789e <HAL_UART_IRQHandler+0x66>
 800788a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fb69 	bl	8007f6e <UART_Receive_IT>
      return;
 800789c:	e25b      	b.n	8007d56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800789e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 80de 	beq.w	8007a64 <HAL_UART_IRQHandler+0x22c>
 80078a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d106      	bne.n	80078c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 80d1 	beq.w	8007a64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00b      	beq.n	80078e6 <HAL_UART_IRQHandler+0xae>
 80078ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d005      	beq.n	80078e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078de:	f043 0201 	orr.w	r2, r3, #1
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00b      	beq.n	800790a <HAL_UART_IRQHandler+0xd2>
 80078f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007902:	f043 0202 	orr.w	r2, r3, #2
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800790a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00b      	beq.n	800792e <HAL_UART_IRQHandler+0xf6>
 8007916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d005      	beq.n	800792e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007926:	f043 0204 	orr.w	r2, r3, #4
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800792e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d011      	beq.n	800795e <HAL_UART_IRQHandler+0x126>
 800793a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800793e:	f003 0320 	and.w	r3, r3, #32
 8007942:	2b00      	cmp	r3, #0
 8007944:	d105      	bne.n	8007952 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d005      	beq.n	800795e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007956:	f043 0208 	orr.w	r2, r3, #8
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007962:	2b00      	cmp	r3, #0
 8007964:	f000 81f2 	beq.w	8007d4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800796c:	f003 0320 	and.w	r3, r3, #32
 8007970:	2b00      	cmp	r3, #0
 8007972:	d008      	beq.n	8007986 <HAL_UART_IRQHandler+0x14e>
 8007974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007978:	f003 0320 	and.w	r3, r3, #32
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 faf4 	bl	8007f6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007990:	2b40      	cmp	r3, #64	@ 0x40
 8007992:	bf0c      	ite	eq
 8007994:	2301      	moveq	r3, #1
 8007996:	2300      	movne	r3, #0
 8007998:	b2db      	uxtb	r3, r3
 800799a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079a2:	f003 0308 	and.w	r3, r3, #8
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d103      	bne.n	80079b2 <HAL_UART_IRQHandler+0x17a>
 80079aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d04f      	beq.n	8007a52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f9fc 	bl	8007db0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c2:	2b40      	cmp	r3, #64	@ 0x40
 80079c4:	d141      	bne.n	8007a4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3314      	adds	r3, #20
 80079cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80079dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3314      	adds	r3, #20
 80079ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80079f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80079f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80079fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1d9      	bne.n	80079c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d013      	beq.n	8007a42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a1e:	4a7e      	ldr	r2, [pc, #504]	@ (8007c18 <HAL_UART_IRQHandler+0x3e0>)
 8007a20:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fc fb94 	bl	8004154 <HAL_DMA_Abort_IT>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d016      	beq.n	8007a60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a40:	e00e      	b.n	8007a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f99e 	bl	8007d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a48:	e00a      	b.n	8007a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f99a 	bl	8007d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a50:	e006      	b.n	8007a60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f996 	bl	8007d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007a5e:	e175      	b.n	8007d4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a60:	bf00      	nop
    return;
 8007a62:	e173      	b.n	8007d4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	f040 814f 	bne.w	8007d0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a72:	f003 0310 	and.w	r3, r3, #16
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 8148 	beq.w	8007d0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 8141 	beq.w	8007d0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60bb      	str	r3, [r7, #8]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	60bb      	str	r3, [r7, #8]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	60bb      	str	r3, [r7, #8]
 8007a9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aaa:	2b40      	cmp	r3, #64	@ 0x40
 8007aac:	f040 80b6 	bne.w	8007c1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007abc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f000 8145 	beq.w	8007d50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	f080 813e 	bcs.w	8007d50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ada:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ae6:	f000 8088 	beq.w	8007bfa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	330c      	adds	r3, #12
 8007af0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	330c      	adds	r3, #12
 8007b12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007b16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b26:	e841 2300 	strex	r3, r2, [r1]
 8007b2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1d9      	bne.n	8007aea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3314      	adds	r3, #20
 8007b3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b48:	f023 0301 	bic.w	r3, r3, #1
 8007b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3314      	adds	r3, #20
 8007b56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b66:	e841 2300 	strex	r3, r2, [r1]
 8007b6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1e1      	bne.n	8007b36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3314      	adds	r3, #20
 8007b78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b7c:	e853 3f00 	ldrex	r3, [r3]
 8007b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3314      	adds	r3, #20
 8007b92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b9e:	e841 2300 	strex	r3, r2, [r1]
 8007ba2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ba4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1e3      	bne.n	8007b72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2220      	movs	r2, #32
 8007bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	330c      	adds	r3, #12
 8007bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bc2:	e853 3f00 	ldrex	r3, [r3]
 8007bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bca:	f023 0310 	bic.w	r3, r3, #16
 8007bce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	330c      	adds	r3, #12
 8007bd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007bdc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007bde:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007be2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e3      	bne.n	8007bb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fc fa3d 	bl	8004074 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f8c1 	bl	8007d98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c16:	e09b      	b.n	8007d50 <HAL_UART_IRQHandler+0x518>
 8007c18:	08007e77 	.word	0x08007e77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 808e 	beq.w	8007d54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 8089 	beq.w	8007d54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	330c      	adds	r3, #12
 8007c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4c:	e853 3f00 	ldrex	r3, [r3]
 8007c50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	330c      	adds	r3, #12
 8007c62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007c66:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c6e:	e841 2300 	strex	r3, r2, [r1]
 8007c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1e3      	bne.n	8007c42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3314      	adds	r3, #20
 8007c80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c84:	e853 3f00 	ldrex	r3, [r3]
 8007c88:	623b      	str	r3, [r7, #32]
   return(result);
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	f023 0301 	bic.w	r3, r3, #1
 8007c90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3314      	adds	r3, #20
 8007c9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ca6:	e841 2300 	strex	r3, r2, [r1]
 8007caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1e3      	bne.n	8007c7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2220      	movs	r2, #32
 8007cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	330c      	adds	r3, #12
 8007cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	e853 3f00 	ldrex	r3, [r3]
 8007cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0310 	bic.w	r3, r3, #16
 8007cd6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	330c      	adds	r3, #12
 8007ce0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007ce4:	61fa      	str	r2, [r7, #28]
 8007ce6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce8:	69b9      	ldr	r1, [r7, #24]
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	e841 2300 	strex	r3, r2, [r1]
 8007cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e3      	bne.n	8007cc0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cfe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f847 	bl	8007d98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d0a:	e023      	b.n	8007d54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d009      	beq.n	8007d2c <HAL_UART_IRQHandler+0x4f4>
 8007d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d003      	beq.n	8007d2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f8ba 	bl	8007e9e <UART_Transmit_IT>
    return;
 8007d2a:	e014      	b.n	8007d56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00e      	beq.n	8007d56 <HAL_UART_IRQHandler+0x51e>
 8007d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d008      	beq.n	8007d56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f8fa 	bl	8007f3e <UART_EndTransmit_IT>
    return;
 8007d4a:	e004      	b.n	8007d56 <HAL_UART_IRQHandler+0x51e>
    return;
 8007d4c:	bf00      	nop
 8007d4e:	e002      	b.n	8007d56 <HAL_UART_IRQHandler+0x51e>
      return;
 8007d50:	bf00      	nop
 8007d52:	e000      	b.n	8007d56 <HAL_UART_IRQHandler+0x51e>
      return;
 8007d54:	bf00      	nop
  }
}
 8007d56:	37e8      	adds	r7, #232	@ 0xe8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b095      	sub	sp, #84	@ 0x54
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	330c      	adds	r3, #12
 8007dbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	330c      	adds	r3, #12
 8007dd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007dd8:	643a      	str	r2, [r7, #64]	@ 0x40
 8007dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007dde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007de0:	e841 2300 	strex	r3, r2, [r1]
 8007de4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e5      	bne.n	8007db8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3314      	adds	r3, #20
 8007df2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	e853 3f00 	ldrex	r3, [r3]
 8007dfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	f023 0301 	bic.w	r3, r3, #1
 8007e02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3314      	adds	r3, #20
 8007e0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e14:	e841 2300 	strex	r3, r2, [r1]
 8007e18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e5      	bne.n	8007dec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d119      	bne.n	8007e5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	330c      	adds	r3, #12
 8007e2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	e853 3f00 	ldrex	r3, [r3]
 8007e36:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f023 0310 	bic.w	r3, r3, #16
 8007e3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	330c      	adds	r3, #12
 8007e46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e48:	61ba      	str	r2, [r7, #24]
 8007e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4c:	6979      	ldr	r1, [r7, #20]
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	e841 2300 	strex	r3, r2, [r1]
 8007e54:	613b      	str	r3, [r7, #16]
   return(result);
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e5      	bne.n	8007e28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2220      	movs	r2, #32
 8007e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007e6a:	bf00      	nop
 8007e6c:	3754      	adds	r7, #84	@ 0x54
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2200      	movs	r2, #0
 8007e88:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f7ff ff77 	bl	8007d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e96:	bf00      	nop
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b085      	sub	sp, #20
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b21      	cmp	r3, #33	@ 0x21
 8007eb0:	d13e      	bne.n	8007f30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eba:	d114      	bne.n	8007ee6 <UART_Transmit_IT+0x48>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d110      	bne.n	8007ee6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ed8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	1c9a      	adds	r2, r3, #2
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	621a      	str	r2, [r3, #32]
 8007ee4:	e008      	b.n	8007ef8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	1c59      	adds	r1, r3, #1
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	6211      	str	r1, [r2, #32]
 8007ef0:	781a      	ldrb	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	3b01      	subs	r3, #1
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	4619      	mov	r1, r3
 8007f06:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10f      	bne.n	8007f2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68da      	ldr	r2, [r3, #12]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	e000      	b.n	8007f32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f30:	2302      	movs	r3, #2
  }
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68da      	ldr	r2, [r3, #12]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7ff fefc 	bl	8007d5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b08c      	sub	sp, #48	@ 0x30
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b22      	cmp	r3, #34	@ 0x22
 8007f80:	f040 80ae 	bne.w	80080e0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f8c:	d117      	bne.n	8007fbe <UART_Receive_IT+0x50>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d113      	bne.n	8007fbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f96:	2300      	movs	r3, #0
 8007f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb6:	1c9a      	adds	r2, r3, #2
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	629a      	str	r2, [r3, #40]	@ 0x28
 8007fbc:	e026      	b.n	800800c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fd0:	d007      	beq.n	8007fe2 <UART_Receive_IT+0x74>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <UART_Receive_IT+0x82>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d106      	bne.n	8007ff0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fec:	701a      	strb	r2, [r3, #0]
 8007fee:	e008      	b.n	8008002 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008000:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008010:	b29b      	uxth	r3, r3
 8008012:	3b01      	subs	r3, #1
 8008014:	b29b      	uxth	r3, r3
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	4619      	mov	r1, r3
 800801a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800801c:	2b00      	cmp	r3, #0
 800801e:	d15d      	bne.n	80080dc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0220 	bic.w	r2, r2, #32
 800802e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800803e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	695a      	ldr	r2, [r3, #20]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0201 	bic.w	r2, r2, #1
 800804e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2220      	movs	r2, #32
 8008054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008062:	2b01      	cmp	r3, #1
 8008064:	d135      	bne.n	80080d2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	330c      	adds	r3, #12
 8008072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	e853 3f00 	ldrex	r3, [r3]
 800807a:	613b      	str	r3, [r7, #16]
   return(result);
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	f023 0310 	bic.w	r3, r3, #16
 8008082:	627b      	str	r3, [r7, #36]	@ 0x24
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	330c      	adds	r3, #12
 800808a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800808c:	623a      	str	r2, [r7, #32]
 800808e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008090:	69f9      	ldr	r1, [r7, #28]
 8008092:	6a3a      	ldr	r2, [r7, #32]
 8008094:	e841 2300 	strex	r3, r2, [r1]
 8008098:	61bb      	str	r3, [r7, #24]
   return(result);
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1e5      	bne.n	800806c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0310 	and.w	r3, r3, #16
 80080aa:	2b10      	cmp	r3, #16
 80080ac:	d10a      	bne.n	80080c4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	60fb      	str	r3, [r7, #12]
 80080c2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7ff fe64 	bl	8007d98 <HAL_UARTEx_RxEventCallback>
 80080d0:	e002      	b.n	80080d8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7ff fe4c 	bl	8007d70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	e002      	b.n	80080e2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	e000      	b.n	80080e2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80080e0:	2302      	movs	r3, #2
  }
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3730      	adds	r7, #48	@ 0x30
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080f0:	b0c0      	sub	sp, #256	@ 0x100
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008108:	68d9      	ldr	r1, [r3, #12]
 800810a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	ea40 0301 	orr.w	r3, r0, r1
 8008114:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	431a      	orrs	r2, r3
 8008124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	431a      	orrs	r2, r3
 800812c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	4313      	orrs	r3, r2
 8008134:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008144:	f021 010c 	bic.w	r1, r1, #12
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008152:	430b      	orrs	r3, r1
 8008154:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008166:	6999      	ldr	r1, [r3, #24]
 8008168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	ea40 0301 	orr.w	r3, r0, r1
 8008172:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	4b8f      	ldr	r3, [pc, #572]	@ (80083b8 <UART_SetConfig+0x2cc>)
 800817c:	429a      	cmp	r2, r3
 800817e:	d005      	beq.n	800818c <UART_SetConfig+0xa0>
 8008180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	4b8d      	ldr	r3, [pc, #564]	@ (80083bc <UART_SetConfig+0x2d0>)
 8008188:	429a      	cmp	r2, r3
 800818a:	d104      	bne.n	8008196 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800818c:	f7fe f816 	bl	80061bc <HAL_RCC_GetPCLK2Freq>
 8008190:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008194:	e003      	b.n	800819e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008196:	f7fd fffd 	bl	8006194 <HAL_RCC_GetPCLK1Freq>
 800819a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800819e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081a8:	f040 810c 	bne.w	80083c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081b0:	2200      	movs	r2, #0
 80081b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80081b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80081ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80081be:	4622      	mov	r2, r4
 80081c0:	462b      	mov	r3, r5
 80081c2:	1891      	adds	r1, r2, r2
 80081c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80081c6:	415b      	adcs	r3, r3
 80081c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80081ce:	4621      	mov	r1, r4
 80081d0:	eb12 0801 	adds.w	r8, r2, r1
 80081d4:	4629      	mov	r1, r5
 80081d6:	eb43 0901 	adc.w	r9, r3, r1
 80081da:	f04f 0200 	mov.w	r2, #0
 80081de:	f04f 0300 	mov.w	r3, #0
 80081e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081ee:	4690      	mov	r8, r2
 80081f0:	4699      	mov	r9, r3
 80081f2:	4623      	mov	r3, r4
 80081f4:	eb18 0303 	adds.w	r3, r8, r3
 80081f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80081fc:	462b      	mov	r3, r5
 80081fe:	eb49 0303 	adc.w	r3, r9, r3
 8008202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008212:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008216:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800821a:	460b      	mov	r3, r1
 800821c:	18db      	adds	r3, r3, r3
 800821e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008220:	4613      	mov	r3, r2
 8008222:	eb42 0303 	adc.w	r3, r2, r3
 8008226:	657b      	str	r3, [r7, #84]	@ 0x54
 8008228:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800822c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008230:	f7f8 fd3a 	bl	8000ca8 <__aeabi_uldivmod>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	4b61      	ldr	r3, [pc, #388]	@ (80083c0 <UART_SetConfig+0x2d4>)
 800823a:	fba3 2302 	umull	r2, r3, r3, r2
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	011c      	lsls	r4, r3, #4
 8008242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008246:	2200      	movs	r2, #0
 8008248:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800824c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008250:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008254:	4642      	mov	r2, r8
 8008256:	464b      	mov	r3, r9
 8008258:	1891      	adds	r1, r2, r2
 800825a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800825c:	415b      	adcs	r3, r3
 800825e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008260:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008264:	4641      	mov	r1, r8
 8008266:	eb12 0a01 	adds.w	sl, r2, r1
 800826a:	4649      	mov	r1, r9
 800826c:	eb43 0b01 	adc.w	fp, r3, r1
 8008270:	f04f 0200 	mov.w	r2, #0
 8008274:	f04f 0300 	mov.w	r3, #0
 8008278:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800827c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008280:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008284:	4692      	mov	sl, r2
 8008286:	469b      	mov	fp, r3
 8008288:	4643      	mov	r3, r8
 800828a:	eb1a 0303 	adds.w	r3, sl, r3
 800828e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008292:	464b      	mov	r3, r9
 8008294:	eb4b 0303 	adc.w	r3, fp, r3
 8008298:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800829c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80082ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80082b0:	460b      	mov	r3, r1
 80082b2:	18db      	adds	r3, r3, r3
 80082b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80082b6:	4613      	mov	r3, r2
 80082b8:	eb42 0303 	adc.w	r3, r2, r3
 80082bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80082be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80082c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80082c6:	f7f8 fcef 	bl	8000ca8 <__aeabi_uldivmod>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4611      	mov	r1, r2
 80082d0:	4b3b      	ldr	r3, [pc, #236]	@ (80083c0 <UART_SetConfig+0x2d4>)
 80082d2:	fba3 2301 	umull	r2, r3, r3, r1
 80082d6:	095b      	lsrs	r3, r3, #5
 80082d8:	2264      	movs	r2, #100	@ 0x64
 80082da:	fb02 f303 	mul.w	r3, r2, r3
 80082de:	1acb      	subs	r3, r1, r3
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80082e6:	4b36      	ldr	r3, [pc, #216]	@ (80083c0 <UART_SetConfig+0x2d4>)
 80082e8:	fba3 2302 	umull	r2, r3, r3, r2
 80082ec:	095b      	lsrs	r3, r3, #5
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80082f4:	441c      	add	r4, r3
 80082f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082fa:	2200      	movs	r2, #0
 80082fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008300:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008304:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008308:	4642      	mov	r2, r8
 800830a:	464b      	mov	r3, r9
 800830c:	1891      	adds	r1, r2, r2
 800830e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008310:	415b      	adcs	r3, r3
 8008312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008314:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008318:	4641      	mov	r1, r8
 800831a:	1851      	adds	r1, r2, r1
 800831c:	6339      	str	r1, [r7, #48]	@ 0x30
 800831e:	4649      	mov	r1, r9
 8008320:	414b      	adcs	r3, r1
 8008322:	637b      	str	r3, [r7, #52]	@ 0x34
 8008324:	f04f 0200 	mov.w	r2, #0
 8008328:	f04f 0300 	mov.w	r3, #0
 800832c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008330:	4659      	mov	r1, fp
 8008332:	00cb      	lsls	r3, r1, #3
 8008334:	4651      	mov	r1, sl
 8008336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800833a:	4651      	mov	r1, sl
 800833c:	00ca      	lsls	r2, r1, #3
 800833e:	4610      	mov	r0, r2
 8008340:	4619      	mov	r1, r3
 8008342:	4603      	mov	r3, r0
 8008344:	4642      	mov	r2, r8
 8008346:	189b      	adds	r3, r3, r2
 8008348:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800834c:	464b      	mov	r3, r9
 800834e:	460a      	mov	r2, r1
 8008350:	eb42 0303 	adc.w	r3, r2, r3
 8008354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008364:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008368:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800836c:	460b      	mov	r3, r1
 800836e:	18db      	adds	r3, r3, r3
 8008370:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008372:	4613      	mov	r3, r2
 8008374:	eb42 0303 	adc.w	r3, r2, r3
 8008378:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800837a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800837e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008382:	f7f8 fc91 	bl	8000ca8 <__aeabi_uldivmod>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4b0d      	ldr	r3, [pc, #52]	@ (80083c0 <UART_SetConfig+0x2d4>)
 800838c:	fba3 1302 	umull	r1, r3, r3, r2
 8008390:	095b      	lsrs	r3, r3, #5
 8008392:	2164      	movs	r1, #100	@ 0x64
 8008394:	fb01 f303 	mul.w	r3, r1, r3
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	3332      	adds	r3, #50	@ 0x32
 800839e:	4a08      	ldr	r2, [pc, #32]	@ (80083c0 <UART_SetConfig+0x2d4>)
 80083a0:	fba2 2303 	umull	r2, r3, r2, r3
 80083a4:	095b      	lsrs	r3, r3, #5
 80083a6:	f003 0207 	and.w	r2, r3, #7
 80083aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4422      	add	r2, r4
 80083b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083b4:	e106      	b.n	80085c4 <UART_SetConfig+0x4d8>
 80083b6:	bf00      	nop
 80083b8:	40011000 	.word	0x40011000
 80083bc:	40011400 	.word	0x40011400
 80083c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083c8:	2200      	movs	r2, #0
 80083ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80083ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80083d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80083d6:	4642      	mov	r2, r8
 80083d8:	464b      	mov	r3, r9
 80083da:	1891      	adds	r1, r2, r2
 80083dc:	6239      	str	r1, [r7, #32]
 80083de:	415b      	adcs	r3, r3
 80083e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80083e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083e6:	4641      	mov	r1, r8
 80083e8:	1854      	adds	r4, r2, r1
 80083ea:	4649      	mov	r1, r9
 80083ec:	eb43 0501 	adc.w	r5, r3, r1
 80083f0:	f04f 0200 	mov.w	r2, #0
 80083f4:	f04f 0300 	mov.w	r3, #0
 80083f8:	00eb      	lsls	r3, r5, #3
 80083fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083fe:	00e2      	lsls	r2, r4, #3
 8008400:	4614      	mov	r4, r2
 8008402:	461d      	mov	r5, r3
 8008404:	4643      	mov	r3, r8
 8008406:	18e3      	adds	r3, r4, r3
 8008408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800840c:	464b      	mov	r3, r9
 800840e:	eb45 0303 	adc.w	r3, r5, r3
 8008412:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008422:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008426:	f04f 0200 	mov.w	r2, #0
 800842a:	f04f 0300 	mov.w	r3, #0
 800842e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008432:	4629      	mov	r1, r5
 8008434:	008b      	lsls	r3, r1, #2
 8008436:	4621      	mov	r1, r4
 8008438:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800843c:	4621      	mov	r1, r4
 800843e:	008a      	lsls	r2, r1, #2
 8008440:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008444:	f7f8 fc30 	bl	8000ca8 <__aeabi_uldivmod>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	4b60      	ldr	r3, [pc, #384]	@ (80085d0 <UART_SetConfig+0x4e4>)
 800844e:	fba3 2302 	umull	r2, r3, r3, r2
 8008452:	095b      	lsrs	r3, r3, #5
 8008454:	011c      	lsls	r4, r3, #4
 8008456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800845a:	2200      	movs	r2, #0
 800845c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008460:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008464:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008468:	4642      	mov	r2, r8
 800846a:	464b      	mov	r3, r9
 800846c:	1891      	adds	r1, r2, r2
 800846e:	61b9      	str	r1, [r7, #24]
 8008470:	415b      	adcs	r3, r3
 8008472:	61fb      	str	r3, [r7, #28]
 8008474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008478:	4641      	mov	r1, r8
 800847a:	1851      	adds	r1, r2, r1
 800847c:	6139      	str	r1, [r7, #16]
 800847e:	4649      	mov	r1, r9
 8008480:	414b      	adcs	r3, r1
 8008482:	617b      	str	r3, [r7, #20]
 8008484:	f04f 0200 	mov.w	r2, #0
 8008488:	f04f 0300 	mov.w	r3, #0
 800848c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008490:	4659      	mov	r1, fp
 8008492:	00cb      	lsls	r3, r1, #3
 8008494:	4651      	mov	r1, sl
 8008496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800849a:	4651      	mov	r1, sl
 800849c:	00ca      	lsls	r2, r1, #3
 800849e:	4610      	mov	r0, r2
 80084a0:	4619      	mov	r1, r3
 80084a2:	4603      	mov	r3, r0
 80084a4:	4642      	mov	r2, r8
 80084a6:	189b      	adds	r3, r3, r2
 80084a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084ac:	464b      	mov	r3, r9
 80084ae:	460a      	mov	r2, r1
 80084b0:	eb42 0303 	adc.w	r3, r2, r3
 80084b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80084c4:	f04f 0200 	mov.w	r2, #0
 80084c8:	f04f 0300 	mov.w	r3, #0
 80084cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80084d0:	4649      	mov	r1, r9
 80084d2:	008b      	lsls	r3, r1, #2
 80084d4:	4641      	mov	r1, r8
 80084d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084da:	4641      	mov	r1, r8
 80084dc:	008a      	lsls	r2, r1, #2
 80084de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80084e2:	f7f8 fbe1 	bl	8000ca8 <__aeabi_uldivmod>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4611      	mov	r1, r2
 80084ec:	4b38      	ldr	r3, [pc, #224]	@ (80085d0 <UART_SetConfig+0x4e4>)
 80084ee:	fba3 2301 	umull	r2, r3, r3, r1
 80084f2:	095b      	lsrs	r3, r3, #5
 80084f4:	2264      	movs	r2, #100	@ 0x64
 80084f6:	fb02 f303 	mul.w	r3, r2, r3
 80084fa:	1acb      	subs	r3, r1, r3
 80084fc:	011b      	lsls	r3, r3, #4
 80084fe:	3332      	adds	r3, #50	@ 0x32
 8008500:	4a33      	ldr	r2, [pc, #204]	@ (80085d0 <UART_SetConfig+0x4e4>)
 8008502:	fba2 2303 	umull	r2, r3, r2, r3
 8008506:	095b      	lsrs	r3, r3, #5
 8008508:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800850c:	441c      	add	r4, r3
 800850e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008512:	2200      	movs	r2, #0
 8008514:	673b      	str	r3, [r7, #112]	@ 0x70
 8008516:	677a      	str	r2, [r7, #116]	@ 0x74
 8008518:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800851c:	4642      	mov	r2, r8
 800851e:	464b      	mov	r3, r9
 8008520:	1891      	adds	r1, r2, r2
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	415b      	adcs	r3, r3
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800852c:	4641      	mov	r1, r8
 800852e:	1851      	adds	r1, r2, r1
 8008530:	6039      	str	r1, [r7, #0]
 8008532:	4649      	mov	r1, r9
 8008534:	414b      	adcs	r3, r1
 8008536:	607b      	str	r3, [r7, #4]
 8008538:	f04f 0200 	mov.w	r2, #0
 800853c:	f04f 0300 	mov.w	r3, #0
 8008540:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008544:	4659      	mov	r1, fp
 8008546:	00cb      	lsls	r3, r1, #3
 8008548:	4651      	mov	r1, sl
 800854a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800854e:	4651      	mov	r1, sl
 8008550:	00ca      	lsls	r2, r1, #3
 8008552:	4610      	mov	r0, r2
 8008554:	4619      	mov	r1, r3
 8008556:	4603      	mov	r3, r0
 8008558:	4642      	mov	r2, r8
 800855a:	189b      	adds	r3, r3, r2
 800855c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800855e:	464b      	mov	r3, r9
 8008560:	460a      	mov	r2, r1
 8008562:	eb42 0303 	adc.w	r3, r2, r3
 8008566:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	663b      	str	r3, [r7, #96]	@ 0x60
 8008572:	667a      	str	r2, [r7, #100]	@ 0x64
 8008574:	f04f 0200 	mov.w	r2, #0
 8008578:	f04f 0300 	mov.w	r3, #0
 800857c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008580:	4649      	mov	r1, r9
 8008582:	008b      	lsls	r3, r1, #2
 8008584:	4641      	mov	r1, r8
 8008586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800858a:	4641      	mov	r1, r8
 800858c:	008a      	lsls	r2, r1, #2
 800858e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008592:	f7f8 fb89 	bl	8000ca8 <__aeabi_uldivmod>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4b0d      	ldr	r3, [pc, #52]	@ (80085d0 <UART_SetConfig+0x4e4>)
 800859c:	fba3 1302 	umull	r1, r3, r3, r2
 80085a0:	095b      	lsrs	r3, r3, #5
 80085a2:	2164      	movs	r1, #100	@ 0x64
 80085a4:	fb01 f303 	mul.w	r3, r1, r3
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	011b      	lsls	r3, r3, #4
 80085ac:	3332      	adds	r3, #50	@ 0x32
 80085ae:	4a08      	ldr	r2, [pc, #32]	@ (80085d0 <UART_SetConfig+0x4e4>)
 80085b0:	fba2 2303 	umull	r2, r3, r2, r3
 80085b4:	095b      	lsrs	r3, r3, #5
 80085b6:	f003 020f 	and.w	r2, r3, #15
 80085ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4422      	add	r2, r4
 80085c2:	609a      	str	r2, [r3, #8]
}
 80085c4:	bf00      	nop
 80085c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80085ca:	46bd      	mov	sp, r7
 80085cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085d0:	51eb851f 	.word	0x51eb851f

080085d4 <__cvt>:
 80085d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085d8:	ec57 6b10 	vmov	r6, r7, d0
 80085dc:	2f00      	cmp	r7, #0
 80085de:	460c      	mov	r4, r1
 80085e0:	4619      	mov	r1, r3
 80085e2:	463b      	mov	r3, r7
 80085e4:	bfbb      	ittet	lt
 80085e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80085ea:	461f      	movlt	r7, r3
 80085ec:	2300      	movge	r3, #0
 80085ee:	232d      	movlt	r3, #45	@ 0x2d
 80085f0:	700b      	strb	r3, [r1, #0]
 80085f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80085f8:	4691      	mov	r9, r2
 80085fa:	f023 0820 	bic.w	r8, r3, #32
 80085fe:	bfbc      	itt	lt
 8008600:	4632      	movlt	r2, r6
 8008602:	4616      	movlt	r6, r2
 8008604:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008608:	d005      	beq.n	8008616 <__cvt+0x42>
 800860a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800860e:	d100      	bne.n	8008612 <__cvt+0x3e>
 8008610:	3401      	adds	r4, #1
 8008612:	2102      	movs	r1, #2
 8008614:	e000      	b.n	8008618 <__cvt+0x44>
 8008616:	2103      	movs	r1, #3
 8008618:	ab03      	add	r3, sp, #12
 800861a:	9301      	str	r3, [sp, #4]
 800861c:	ab02      	add	r3, sp, #8
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	ec47 6b10 	vmov	d0, r6, r7
 8008624:	4653      	mov	r3, sl
 8008626:	4622      	mov	r2, r4
 8008628:	f000 fe8e 	bl	8009348 <_dtoa_r>
 800862c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008630:	4605      	mov	r5, r0
 8008632:	d119      	bne.n	8008668 <__cvt+0x94>
 8008634:	f019 0f01 	tst.w	r9, #1
 8008638:	d00e      	beq.n	8008658 <__cvt+0x84>
 800863a:	eb00 0904 	add.w	r9, r0, r4
 800863e:	2200      	movs	r2, #0
 8008640:	2300      	movs	r3, #0
 8008642:	4630      	mov	r0, r6
 8008644:	4639      	mov	r1, r7
 8008646:	f7f8 fa6f 	bl	8000b28 <__aeabi_dcmpeq>
 800864a:	b108      	cbz	r0, 8008650 <__cvt+0x7c>
 800864c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008650:	2230      	movs	r2, #48	@ 0x30
 8008652:	9b03      	ldr	r3, [sp, #12]
 8008654:	454b      	cmp	r3, r9
 8008656:	d31e      	bcc.n	8008696 <__cvt+0xc2>
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800865c:	1b5b      	subs	r3, r3, r5
 800865e:	4628      	mov	r0, r5
 8008660:	6013      	str	r3, [r2, #0]
 8008662:	b004      	add	sp, #16
 8008664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008668:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800866c:	eb00 0904 	add.w	r9, r0, r4
 8008670:	d1e5      	bne.n	800863e <__cvt+0x6a>
 8008672:	7803      	ldrb	r3, [r0, #0]
 8008674:	2b30      	cmp	r3, #48	@ 0x30
 8008676:	d10a      	bne.n	800868e <__cvt+0xba>
 8008678:	2200      	movs	r2, #0
 800867a:	2300      	movs	r3, #0
 800867c:	4630      	mov	r0, r6
 800867e:	4639      	mov	r1, r7
 8008680:	f7f8 fa52 	bl	8000b28 <__aeabi_dcmpeq>
 8008684:	b918      	cbnz	r0, 800868e <__cvt+0xba>
 8008686:	f1c4 0401 	rsb	r4, r4, #1
 800868a:	f8ca 4000 	str.w	r4, [sl]
 800868e:	f8da 3000 	ldr.w	r3, [sl]
 8008692:	4499      	add	r9, r3
 8008694:	e7d3      	b.n	800863e <__cvt+0x6a>
 8008696:	1c59      	adds	r1, r3, #1
 8008698:	9103      	str	r1, [sp, #12]
 800869a:	701a      	strb	r2, [r3, #0]
 800869c:	e7d9      	b.n	8008652 <__cvt+0x7e>

0800869e <__exponent>:
 800869e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086a0:	2900      	cmp	r1, #0
 80086a2:	bfba      	itte	lt
 80086a4:	4249      	neglt	r1, r1
 80086a6:	232d      	movlt	r3, #45	@ 0x2d
 80086a8:	232b      	movge	r3, #43	@ 0x2b
 80086aa:	2909      	cmp	r1, #9
 80086ac:	7002      	strb	r2, [r0, #0]
 80086ae:	7043      	strb	r3, [r0, #1]
 80086b0:	dd29      	ble.n	8008706 <__exponent+0x68>
 80086b2:	f10d 0307 	add.w	r3, sp, #7
 80086b6:	461d      	mov	r5, r3
 80086b8:	270a      	movs	r7, #10
 80086ba:	461a      	mov	r2, r3
 80086bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80086c0:	fb07 1416 	mls	r4, r7, r6, r1
 80086c4:	3430      	adds	r4, #48	@ 0x30
 80086c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80086ca:	460c      	mov	r4, r1
 80086cc:	2c63      	cmp	r4, #99	@ 0x63
 80086ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80086d2:	4631      	mov	r1, r6
 80086d4:	dcf1      	bgt.n	80086ba <__exponent+0x1c>
 80086d6:	3130      	adds	r1, #48	@ 0x30
 80086d8:	1e94      	subs	r4, r2, #2
 80086da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80086de:	1c41      	adds	r1, r0, #1
 80086e0:	4623      	mov	r3, r4
 80086e2:	42ab      	cmp	r3, r5
 80086e4:	d30a      	bcc.n	80086fc <__exponent+0x5e>
 80086e6:	f10d 0309 	add.w	r3, sp, #9
 80086ea:	1a9b      	subs	r3, r3, r2
 80086ec:	42ac      	cmp	r4, r5
 80086ee:	bf88      	it	hi
 80086f0:	2300      	movhi	r3, #0
 80086f2:	3302      	adds	r3, #2
 80086f4:	4403      	add	r3, r0
 80086f6:	1a18      	subs	r0, r3, r0
 80086f8:	b003      	add	sp, #12
 80086fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008700:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008704:	e7ed      	b.n	80086e2 <__exponent+0x44>
 8008706:	2330      	movs	r3, #48	@ 0x30
 8008708:	3130      	adds	r1, #48	@ 0x30
 800870a:	7083      	strb	r3, [r0, #2]
 800870c:	70c1      	strb	r1, [r0, #3]
 800870e:	1d03      	adds	r3, r0, #4
 8008710:	e7f1      	b.n	80086f6 <__exponent+0x58>
	...

08008714 <_printf_float>:
 8008714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008718:	b08d      	sub	sp, #52	@ 0x34
 800871a:	460c      	mov	r4, r1
 800871c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008720:	4616      	mov	r6, r2
 8008722:	461f      	mov	r7, r3
 8008724:	4605      	mov	r5, r0
 8008726:	f000 fd01 	bl	800912c <_localeconv_r>
 800872a:	6803      	ldr	r3, [r0, #0]
 800872c:	9304      	str	r3, [sp, #16]
 800872e:	4618      	mov	r0, r3
 8008730:	f7f7 fdce 	bl	80002d0 <strlen>
 8008734:	2300      	movs	r3, #0
 8008736:	930a      	str	r3, [sp, #40]	@ 0x28
 8008738:	f8d8 3000 	ldr.w	r3, [r8]
 800873c:	9005      	str	r0, [sp, #20]
 800873e:	3307      	adds	r3, #7
 8008740:	f023 0307 	bic.w	r3, r3, #7
 8008744:	f103 0208 	add.w	r2, r3, #8
 8008748:	f894 a018 	ldrb.w	sl, [r4, #24]
 800874c:	f8d4 b000 	ldr.w	fp, [r4]
 8008750:	f8c8 2000 	str.w	r2, [r8]
 8008754:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008758:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800875c:	9307      	str	r3, [sp, #28]
 800875e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008762:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800876a:	4b9c      	ldr	r3, [pc, #624]	@ (80089dc <_printf_float+0x2c8>)
 800876c:	f04f 32ff 	mov.w	r2, #4294967295
 8008770:	f7f8 fa0c 	bl	8000b8c <__aeabi_dcmpun>
 8008774:	bb70      	cbnz	r0, 80087d4 <_printf_float+0xc0>
 8008776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800877a:	4b98      	ldr	r3, [pc, #608]	@ (80089dc <_printf_float+0x2c8>)
 800877c:	f04f 32ff 	mov.w	r2, #4294967295
 8008780:	f7f8 f9e6 	bl	8000b50 <__aeabi_dcmple>
 8008784:	bb30      	cbnz	r0, 80087d4 <_printf_float+0xc0>
 8008786:	2200      	movs	r2, #0
 8008788:	2300      	movs	r3, #0
 800878a:	4640      	mov	r0, r8
 800878c:	4649      	mov	r1, r9
 800878e:	f7f8 f9d5 	bl	8000b3c <__aeabi_dcmplt>
 8008792:	b110      	cbz	r0, 800879a <_printf_float+0x86>
 8008794:	232d      	movs	r3, #45	@ 0x2d
 8008796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800879a:	4a91      	ldr	r2, [pc, #580]	@ (80089e0 <_printf_float+0x2cc>)
 800879c:	4b91      	ldr	r3, [pc, #580]	@ (80089e4 <_printf_float+0x2d0>)
 800879e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80087a2:	bf8c      	ite	hi
 80087a4:	4690      	movhi	r8, r2
 80087a6:	4698      	movls	r8, r3
 80087a8:	2303      	movs	r3, #3
 80087aa:	6123      	str	r3, [r4, #16]
 80087ac:	f02b 0304 	bic.w	r3, fp, #4
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	f04f 0900 	mov.w	r9, #0
 80087b6:	9700      	str	r7, [sp, #0]
 80087b8:	4633      	mov	r3, r6
 80087ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80087bc:	4621      	mov	r1, r4
 80087be:	4628      	mov	r0, r5
 80087c0:	f000 f9d2 	bl	8008b68 <_printf_common>
 80087c4:	3001      	adds	r0, #1
 80087c6:	f040 808d 	bne.w	80088e4 <_printf_float+0x1d0>
 80087ca:	f04f 30ff 	mov.w	r0, #4294967295
 80087ce:	b00d      	add	sp, #52	@ 0x34
 80087d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d4:	4642      	mov	r2, r8
 80087d6:	464b      	mov	r3, r9
 80087d8:	4640      	mov	r0, r8
 80087da:	4649      	mov	r1, r9
 80087dc:	f7f8 f9d6 	bl	8000b8c <__aeabi_dcmpun>
 80087e0:	b140      	cbz	r0, 80087f4 <_printf_float+0xe0>
 80087e2:	464b      	mov	r3, r9
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	bfbc      	itt	lt
 80087e8:	232d      	movlt	r3, #45	@ 0x2d
 80087ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80087ee:	4a7e      	ldr	r2, [pc, #504]	@ (80089e8 <_printf_float+0x2d4>)
 80087f0:	4b7e      	ldr	r3, [pc, #504]	@ (80089ec <_printf_float+0x2d8>)
 80087f2:	e7d4      	b.n	800879e <_printf_float+0x8a>
 80087f4:	6863      	ldr	r3, [r4, #4]
 80087f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80087fa:	9206      	str	r2, [sp, #24]
 80087fc:	1c5a      	adds	r2, r3, #1
 80087fe:	d13b      	bne.n	8008878 <_printf_float+0x164>
 8008800:	2306      	movs	r3, #6
 8008802:	6063      	str	r3, [r4, #4]
 8008804:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008808:	2300      	movs	r3, #0
 800880a:	6022      	str	r2, [r4, #0]
 800880c:	9303      	str	r3, [sp, #12]
 800880e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008810:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008814:	ab09      	add	r3, sp, #36	@ 0x24
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	6861      	ldr	r1, [r4, #4]
 800881a:	ec49 8b10 	vmov	d0, r8, r9
 800881e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008822:	4628      	mov	r0, r5
 8008824:	f7ff fed6 	bl	80085d4 <__cvt>
 8008828:	9b06      	ldr	r3, [sp, #24]
 800882a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800882c:	2b47      	cmp	r3, #71	@ 0x47
 800882e:	4680      	mov	r8, r0
 8008830:	d129      	bne.n	8008886 <_printf_float+0x172>
 8008832:	1cc8      	adds	r0, r1, #3
 8008834:	db02      	blt.n	800883c <_printf_float+0x128>
 8008836:	6863      	ldr	r3, [r4, #4]
 8008838:	4299      	cmp	r1, r3
 800883a:	dd41      	ble.n	80088c0 <_printf_float+0x1ac>
 800883c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008840:	fa5f fa8a 	uxtb.w	sl, sl
 8008844:	3901      	subs	r1, #1
 8008846:	4652      	mov	r2, sl
 8008848:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800884c:	9109      	str	r1, [sp, #36]	@ 0x24
 800884e:	f7ff ff26 	bl	800869e <__exponent>
 8008852:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008854:	1813      	adds	r3, r2, r0
 8008856:	2a01      	cmp	r2, #1
 8008858:	4681      	mov	r9, r0
 800885a:	6123      	str	r3, [r4, #16]
 800885c:	dc02      	bgt.n	8008864 <_printf_float+0x150>
 800885e:	6822      	ldr	r2, [r4, #0]
 8008860:	07d2      	lsls	r2, r2, #31
 8008862:	d501      	bpl.n	8008868 <_printf_float+0x154>
 8008864:	3301      	adds	r3, #1
 8008866:	6123      	str	r3, [r4, #16]
 8008868:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800886c:	2b00      	cmp	r3, #0
 800886e:	d0a2      	beq.n	80087b6 <_printf_float+0xa2>
 8008870:	232d      	movs	r3, #45	@ 0x2d
 8008872:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008876:	e79e      	b.n	80087b6 <_printf_float+0xa2>
 8008878:	9a06      	ldr	r2, [sp, #24]
 800887a:	2a47      	cmp	r2, #71	@ 0x47
 800887c:	d1c2      	bne.n	8008804 <_printf_float+0xf0>
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1c0      	bne.n	8008804 <_printf_float+0xf0>
 8008882:	2301      	movs	r3, #1
 8008884:	e7bd      	b.n	8008802 <_printf_float+0xee>
 8008886:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800888a:	d9db      	bls.n	8008844 <_printf_float+0x130>
 800888c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008890:	d118      	bne.n	80088c4 <_printf_float+0x1b0>
 8008892:	2900      	cmp	r1, #0
 8008894:	6863      	ldr	r3, [r4, #4]
 8008896:	dd0b      	ble.n	80088b0 <_printf_float+0x19c>
 8008898:	6121      	str	r1, [r4, #16]
 800889a:	b913      	cbnz	r3, 80088a2 <_printf_float+0x18e>
 800889c:	6822      	ldr	r2, [r4, #0]
 800889e:	07d0      	lsls	r0, r2, #31
 80088a0:	d502      	bpl.n	80088a8 <_printf_float+0x194>
 80088a2:	3301      	adds	r3, #1
 80088a4:	440b      	add	r3, r1
 80088a6:	6123      	str	r3, [r4, #16]
 80088a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80088aa:	f04f 0900 	mov.w	r9, #0
 80088ae:	e7db      	b.n	8008868 <_printf_float+0x154>
 80088b0:	b913      	cbnz	r3, 80088b8 <_printf_float+0x1a4>
 80088b2:	6822      	ldr	r2, [r4, #0]
 80088b4:	07d2      	lsls	r2, r2, #31
 80088b6:	d501      	bpl.n	80088bc <_printf_float+0x1a8>
 80088b8:	3302      	adds	r3, #2
 80088ba:	e7f4      	b.n	80088a6 <_printf_float+0x192>
 80088bc:	2301      	movs	r3, #1
 80088be:	e7f2      	b.n	80088a6 <_printf_float+0x192>
 80088c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80088c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088c6:	4299      	cmp	r1, r3
 80088c8:	db05      	blt.n	80088d6 <_printf_float+0x1c2>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	6121      	str	r1, [r4, #16]
 80088ce:	07d8      	lsls	r0, r3, #31
 80088d0:	d5ea      	bpl.n	80088a8 <_printf_float+0x194>
 80088d2:	1c4b      	adds	r3, r1, #1
 80088d4:	e7e7      	b.n	80088a6 <_printf_float+0x192>
 80088d6:	2900      	cmp	r1, #0
 80088d8:	bfd4      	ite	le
 80088da:	f1c1 0202 	rsble	r2, r1, #2
 80088de:	2201      	movgt	r2, #1
 80088e0:	4413      	add	r3, r2
 80088e2:	e7e0      	b.n	80088a6 <_printf_float+0x192>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	055a      	lsls	r2, r3, #21
 80088e8:	d407      	bmi.n	80088fa <_printf_float+0x1e6>
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	4642      	mov	r2, r8
 80088ee:	4631      	mov	r1, r6
 80088f0:	4628      	mov	r0, r5
 80088f2:	47b8      	blx	r7
 80088f4:	3001      	adds	r0, #1
 80088f6:	d12b      	bne.n	8008950 <_printf_float+0x23c>
 80088f8:	e767      	b.n	80087ca <_printf_float+0xb6>
 80088fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80088fe:	f240 80dd 	bls.w	8008abc <_printf_float+0x3a8>
 8008902:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008906:	2200      	movs	r2, #0
 8008908:	2300      	movs	r3, #0
 800890a:	f7f8 f90d 	bl	8000b28 <__aeabi_dcmpeq>
 800890e:	2800      	cmp	r0, #0
 8008910:	d033      	beq.n	800897a <_printf_float+0x266>
 8008912:	4a37      	ldr	r2, [pc, #220]	@ (80089f0 <_printf_float+0x2dc>)
 8008914:	2301      	movs	r3, #1
 8008916:	4631      	mov	r1, r6
 8008918:	4628      	mov	r0, r5
 800891a:	47b8      	blx	r7
 800891c:	3001      	adds	r0, #1
 800891e:	f43f af54 	beq.w	80087ca <_printf_float+0xb6>
 8008922:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008926:	4543      	cmp	r3, r8
 8008928:	db02      	blt.n	8008930 <_printf_float+0x21c>
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	07d8      	lsls	r0, r3, #31
 800892e:	d50f      	bpl.n	8008950 <_printf_float+0x23c>
 8008930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008934:	4631      	mov	r1, r6
 8008936:	4628      	mov	r0, r5
 8008938:	47b8      	blx	r7
 800893a:	3001      	adds	r0, #1
 800893c:	f43f af45 	beq.w	80087ca <_printf_float+0xb6>
 8008940:	f04f 0900 	mov.w	r9, #0
 8008944:	f108 38ff 	add.w	r8, r8, #4294967295
 8008948:	f104 0a1a 	add.w	sl, r4, #26
 800894c:	45c8      	cmp	r8, r9
 800894e:	dc09      	bgt.n	8008964 <_printf_float+0x250>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	079b      	lsls	r3, r3, #30
 8008954:	f100 8103 	bmi.w	8008b5e <_printf_float+0x44a>
 8008958:	68e0      	ldr	r0, [r4, #12]
 800895a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800895c:	4298      	cmp	r0, r3
 800895e:	bfb8      	it	lt
 8008960:	4618      	movlt	r0, r3
 8008962:	e734      	b.n	80087ce <_printf_float+0xba>
 8008964:	2301      	movs	r3, #1
 8008966:	4652      	mov	r2, sl
 8008968:	4631      	mov	r1, r6
 800896a:	4628      	mov	r0, r5
 800896c:	47b8      	blx	r7
 800896e:	3001      	adds	r0, #1
 8008970:	f43f af2b 	beq.w	80087ca <_printf_float+0xb6>
 8008974:	f109 0901 	add.w	r9, r9, #1
 8008978:	e7e8      	b.n	800894c <_printf_float+0x238>
 800897a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800897c:	2b00      	cmp	r3, #0
 800897e:	dc39      	bgt.n	80089f4 <_printf_float+0x2e0>
 8008980:	4a1b      	ldr	r2, [pc, #108]	@ (80089f0 <_printf_float+0x2dc>)
 8008982:	2301      	movs	r3, #1
 8008984:	4631      	mov	r1, r6
 8008986:	4628      	mov	r0, r5
 8008988:	47b8      	blx	r7
 800898a:	3001      	adds	r0, #1
 800898c:	f43f af1d 	beq.w	80087ca <_printf_float+0xb6>
 8008990:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008994:	ea59 0303 	orrs.w	r3, r9, r3
 8008998:	d102      	bne.n	80089a0 <_printf_float+0x28c>
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	07d9      	lsls	r1, r3, #31
 800899e:	d5d7      	bpl.n	8008950 <_printf_float+0x23c>
 80089a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089a4:	4631      	mov	r1, r6
 80089a6:	4628      	mov	r0, r5
 80089a8:	47b8      	blx	r7
 80089aa:	3001      	adds	r0, #1
 80089ac:	f43f af0d 	beq.w	80087ca <_printf_float+0xb6>
 80089b0:	f04f 0a00 	mov.w	sl, #0
 80089b4:	f104 0b1a 	add.w	fp, r4, #26
 80089b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ba:	425b      	negs	r3, r3
 80089bc:	4553      	cmp	r3, sl
 80089be:	dc01      	bgt.n	80089c4 <_printf_float+0x2b0>
 80089c0:	464b      	mov	r3, r9
 80089c2:	e793      	b.n	80088ec <_printf_float+0x1d8>
 80089c4:	2301      	movs	r3, #1
 80089c6:	465a      	mov	r2, fp
 80089c8:	4631      	mov	r1, r6
 80089ca:	4628      	mov	r0, r5
 80089cc:	47b8      	blx	r7
 80089ce:	3001      	adds	r0, #1
 80089d0:	f43f aefb 	beq.w	80087ca <_printf_float+0xb6>
 80089d4:	f10a 0a01 	add.w	sl, sl, #1
 80089d8:	e7ee      	b.n	80089b8 <_printf_float+0x2a4>
 80089da:	bf00      	nop
 80089dc:	7fefffff 	.word	0x7fefffff
 80089e0:	0800b740 	.word	0x0800b740
 80089e4:	0800b73c 	.word	0x0800b73c
 80089e8:	0800b748 	.word	0x0800b748
 80089ec:	0800b744 	.word	0x0800b744
 80089f0:	0800b74c 	.word	0x0800b74c
 80089f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80089f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80089fa:	4553      	cmp	r3, sl
 80089fc:	bfa8      	it	ge
 80089fe:	4653      	movge	r3, sl
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	4699      	mov	r9, r3
 8008a04:	dc36      	bgt.n	8008a74 <_printf_float+0x360>
 8008a06:	f04f 0b00 	mov.w	fp, #0
 8008a0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a0e:	f104 021a 	add.w	r2, r4, #26
 8008a12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a14:	9306      	str	r3, [sp, #24]
 8008a16:	eba3 0309 	sub.w	r3, r3, r9
 8008a1a:	455b      	cmp	r3, fp
 8008a1c:	dc31      	bgt.n	8008a82 <_printf_float+0x36e>
 8008a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a20:	459a      	cmp	sl, r3
 8008a22:	dc3a      	bgt.n	8008a9a <_printf_float+0x386>
 8008a24:	6823      	ldr	r3, [r4, #0]
 8008a26:	07da      	lsls	r2, r3, #31
 8008a28:	d437      	bmi.n	8008a9a <_printf_float+0x386>
 8008a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a2c:	ebaa 0903 	sub.w	r9, sl, r3
 8008a30:	9b06      	ldr	r3, [sp, #24]
 8008a32:	ebaa 0303 	sub.w	r3, sl, r3
 8008a36:	4599      	cmp	r9, r3
 8008a38:	bfa8      	it	ge
 8008a3a:	4699      	movge	r9, r3
 8008a3c:	f1b9 0f00 	cmp.w	r9, #0
 8008a40:	dc33      	bgt.n	8008aaa <_printf_float+0x396>
 8008a42:	f04f 0800 	mov.w	r8, #0
 8008a46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a4a:	f104 0b1a 	add.w	fp, r4, #26
 8008a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a50:	ebaa 0303 	sub.w	r3, sl, r3
 8008a54:	eba3 0309 	sub.w	r3, r3, r9
 8008a58:	4543      	cmp	r3, r8
 8008a5a:	f77f af79 	ble.w	8008950 <_printf_float+0x23c>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	465a      	mov	r2, fp
 8008a62:	4631      	mov	r1, r6
 8008a64:	4628      	mov	r0, r5
 8008a66:	47b8      	blx	r7
 8008a68:	3001      	adds	r0, #1
 8008a6a:	f43f aeae 	beq.w	80087ca <_printf_float+0xb6>
 8008a6e:	f108 0801 	add.w	r8, r8, #1
 8008a72:	e7ec      	b.n	8008a4e <_printf_float+0x33a>
 8008a74:	4642      	mov	r2, r8
 8008a76:	4631      	mov	r1, r6
 8008a78:	4628      	mov	r0, r5
 8008a7a:	47b8      	blx	r7
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d1c2      	bne.n	8008a06 <_printf_float+0x2f2>
 8008a80:	e6a3      	b.n	80087ca <_printf_float+0xb6>
 8008a82:	2301      	movs	r3, #1
 8008a84:	4631      	mov	r1, r6
 8008a86:	4628      	mov	r0, r5
 8008a88:	9206      	str	r2, [sp, #24]
 8008a8a:	47b8      	blx	r7
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	f43f ae9c 	beq.w	80087ca <_printf_float+0xb6>
 8008a92:	9a06      	ldr	r2, [sp, #24]
 8008a94:	f10b 0b01 	add.w	fp, fp, #1
 8008a98:	e7bb      	b.n	8008a12 <_printf_float+0x2fe>
 8008a9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a9e:	4631      	mov	r1, r6
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	47b8      	blx	r7
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d1c0      	bne.n	8008a2a <_printf_float+0x316>
 8008aa8:	e68f      	b.n	80087ca <_printf_float+0xb6>
 8008aaa:	9a06      	ldr	r2, [sp, #24]
 8008aac:	464b      	mov	r3, r9
 8008aae:	4442      	add	r2, r8
 8008ab0:	4631      	mov	r1, r6
 8008ab2:	4628      	mov	r0, r5
 8008ab4:	47b8      	blx	r7
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	d1c3      	bne.n	8008a42 <_printf_float+0x32e>
 8008aba:	e686      	b.n	80087ca <_printf_float+0xb6>
 8008abc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008ac0:	f1ba 0f01 	cmp.w	sl, #1
 8008ac4:	dc01      	bgt.n	8008aca <_printf_float+0x3b6>
 8008ac6:	07db      	lsls	r3, r3, #31
 8008ac8:	d536      	bpl.n	8008b38 <_printf_float+0x424>
 8008aca:	2301      	movs	r3, #1
 8008acc:	4642      	mov	r2, r8
 8008ace:	4631      	mov	r1, r6
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	47b8      	blx	r7
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	f43f ae78 	beq.w	80087ca <_printf_float+0xb6>
 8008ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ade:	4631      	mov	r1, r6
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	47b8      	blx	r7
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	f43f ae70 	beq.w	80087ca <_printf_float+0xb6>
 8008aea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008aee:	2200      	movs	r2, #0
 8008af0:	2300      	movs	r3, #0
 8008af2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008af6:	f7f8 f817 	bl	8000b28 <__aeabi_dcmpeq>
 8008afa:	b9c0      	cbnz	r0, 8008b2e <_printf_float+0x41a>
 8008afc:	4653      	mov	r3, sl
 8008afe:	f108 0201 	add.w	r2, r8, #1
 8008b02:	4631      	mov	r1, r6
 8008b04:	4628      	mov	r0, r5
 8008b06:	47b8      	blx	r7
 8008b08:	3001      	adds	r0, #1
 8008b0a:	d10c      	bne.n	8008b26 <_printf_float+0x412>
 8008b0c:	e65d      	b.n	80087ca <_printf_float+0xb6>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	465a      	mov	r2, fp
 8008b12:	4631      	mov	r1, r6
 8008b14:	4628      	mov	r0, r5
 8008b16:	47b8      	blx	r7
 8008b18:	3001      	adds	r0, #1
 8008b1a:	f43f ae56 	beq.w	80087ca <_printf_float+0xb6>
 8008b1e:	f108 0801 	add.w	r8, r8, #1
 8008b22:	45d0      	cmp	r8, sl
 8008b24:	dbf3      	blt.n	8008b0e <_printf_float+0x3fa>
 8008b26:	464b      	mov	r3, r9
 8008b28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008b2c:	e6df      	b.n	80088ee <_printf_float+0x1da>
 8008b2e:	f04f 0800 	mov.w	r8, #0
 8008b32:	f104 0b1a 	add.w	fp, r4, #26
 8008b36:	e7f4      	b.n	8008b22 <_printf_float+0x40e>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	4642      	mov	r2, r8
 8008b3c:	e7e1      	b.n	8008b02 <_printf_float+0x3ee>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	464a      	mov	r2, r9
 8008b42:	4631      	mov	r1, r6
 8008b44:	4628      	mov	r0, r5
 8008b46:	47b8      	blx	r7
 8008b48:	3001      	adds	r0, #1
 8008b4a:	f43f ae3e 	beq.w	80087ca <_printf_float+0xb6>
 8008b4e:	f108 0801 	add.w	r8, r8, #1
 8008b52:	68e3      	ldr	r3, [r4, #12]
 8008b54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b56:	1a5b      	subs	r3, r3, r1
 8008b58:	4543      	cmp	r3, r8
 8008b5a:	dcf0      	bgt.n	8008b3e <_printf_float+0x42a>
 8008b5c:	e6fc      	b.n	8008958 <_printf_float+0x244>
 8008b5e:	f04f 0800 	mov.w	r8, #0
 8008b62:	f104 0919 	add.w	r9, r4, #25
 8008b66:	e7f4      	b.n	8008b52 <_printf_float+0x43e>

08008b68 <_printf_common>:
 8008b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b6c:	4616      	mov	r6, r2
 8008b6e:	4698      	mov	r8, r3
 8008b70:	688a      	ldr	r2, [r1, #8]
 8008b72:	690b      	ldr	r3, [r1, #16]
 8008b74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	bfb8      	it	lt
 8008b7c:	4613      	movlt	r3, r2
 8008b7e:	6033      	str	r3, [r6, #0]
 8008b80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b84:	4607      	mov	r7, r0
 8008b86:	460c      	mov	r4, r1
 8008b88:	b10a      	cbz	r2, 8008b8e <_printf_common+0x26>
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	6033      	str	r3, [r6, #0]
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	0699      	lsls	r1, r3, #26
 8008b92:	bf42      	ittt	mi
 8008b94:	6833      	ldrmi	r3, [r6, #0]
 8008b96:	3302      	addmi	r3, #2
 8008b98:	6033      	strmi	r3, [r6, #0]
 8008b9a:	6825      	ldr	r5, [r4, #0]
 8008b9c:	f015 0506 	ands.w	r5, r5, #6
 8008ba0:	d106      	bne.n	8008bb0 <_printf_common+0x48>
 8008ba2:	f104 0a19 	add.w	sl, r4, #25
 8008ba6:	68e3      	ldr	r3, [r4, #12]
 8008ba8:	6832      	ldr	r2, [r6, #0]
 8008baa:	1a9b      	subs	r3, r3, r2
 8008bac:	42ab      	cmp	r3, r5
 8008bae:	dc26      	bgt.n	8008bfe <_printf_common+0x96>
 8008bb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008bb4:	6822      	ldr	r2, [r4, #0]
 8008bb6:	3b00      	subs	r3, #0
 8008bb8:	bf18      	it	ne
 8008bba:	2301      	movne	r3, #1
 8008bbc:	0692      	lsls	r2, r2, #26
 8008bbe:	d42b      	bmi.n	8008c18 <_printf_common+0xb0>
 8008bc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008bc4:	4641      	mov	r1, r8
 8008bc6:	4638      	mov	r0, r7
 8008bc8:	47c8      	blx	r9
 8008bca:	3001      	adds	r0, #1
 8008bcc:	d01e      	beq.n	8008c0c <_printf_common+0xa4>
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	6922      	ldr	r2, [r4, #16]
 8008bd2:	f003 0306 	and.w	r3, r3, #6
 8008bd6:	2b04      	cmp	r3, #4
 8008bd8:	bf02      	ittt	eq
 8008bda:	68e5      	ldreq	r5, [r4, #12]
 8008bdc:	6833      	ldreq	r3, [r6, #0]
 8008bde:	1aed      	subeq	r5, r5, r3
 8008be0:	68a3      	ldr	r3, [r4, #8]
 8008be2:	bf0c      	ite	eq
 8008be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008be8:	2500      	movne	r5, #0
 8008bea:	4293      	cmp	r3, r2
 8008bec:	bfc4      	itt	gt
 8008bee:	1a9b      	subgt	r3, r3, r2
 8008bf0:	18ed      	addgt	r5, r5, r3
 8008bf2:	2600      	movs	r6, #0
 8008bf4:	341a      	adds	r4, #26
 8008bf6:	42b5      	cmp	r5, r6
 8008bf8:	d11a      	bne.n	8008c30 <_printf_common+0xc8>
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	e008      	b.n	8008c10 <_printf_common+0xa8>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	4652      	mov	r2, sl
 8008c02:	4641      	mov	r1, r8
 8008c04:	4638      	mov	r0, r7
 8008c06:	47c8      	blx	r9
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d103      	bne.n	8008c14 <_printf_common+0xac>
 8008c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c14:	3501      	adds	r5, #1
 8008c16:	e7c6      	b.n	8008ba6 <_printf_common+0x3e>
 8008c18:	18e1      	adds	r1, r4, r3
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	2030      	movs	r0, #48	@ 0x30
 8008c1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008c22:	4422      	add	r2, r4
 8008c24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008c28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008c2c:	3302      	adds	r3, #2
 8008c2e:	e7c7      	b.n	8008bc0 <_printf_common+0x58>
 8008c30:	2301      	movs	r3, #1
 8008c32:	4622      	mov	r2, r4
 8008c34:	4641      	mov	r1, r8
 8008c36:	4638      	mov	r0, r7
 8008c38:	47c8      	blx	r9
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	d0e6      	beq.n	8008c0c <_printf_common+0xa4>
 8008c3e:	3601      	adds	r6, #1
 8008c40:	e7d9      	b.n	8008bf6 <_printf_common+0x8e>
	...

08008c44 <_printf_i>:
 8008c44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c48:	7e0f      	ldrb	r7, [r1, #24]
 8008c4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008c4c:	2f78      	cmp	r7, #120	@ 0x78
 8008c4e:	4691      	mov	r9, r2
 8008c50:	4680      	mov	r8, r0
 8008c52:	460c      	mov	r4, r1
 8008c54:	469a      	mov	sl, r3
 8008c56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008c5a:	d807      	bhi.n	8008c6c <_printf_i+0x28>
 8008c5c:	2f62      	cmp	r7, #98	@ 0x62
 8008c5e:	d80a      	bhi.n	8008c76 <_printf_i+0x32>
 8008c60:	2f00      	cmp	r7, #0
 8008c62:	f000 80d1 	beq.w	8008e08 <_printf_i+0x1c4>
 8008c66:	2f58      	cmp	r7, #88	@ 0x58
 8008c68:	f000 80b8 	beq.w	8008ddc <_printf_i+0x198>
 8008c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008c74:	e03a      	b.n	8008cec <_printf_i+0xa8>
 8008c76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c7a:	2b15      	cmp	r3, #21
 8008c7c:	d8f6      	bhi.n	8008c6c <_printf_i+0x28>
 8008c7e:	a101      	add	r1, pc, #4	@ (adr r1, 8008c84 <_printf_i+0x40>)
 8008c80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c84:	08008cdd 	.word	0x08008cdd
 8008c88:	08008cf1 	.word	0x08008cf1
 8008c8c:	08008c6d 	.word	0x08008c6d
 8008c90:	08008c6d 	.word	0x08008c6d
 8008c94:	08008c6d 	.word	0x08008c6d
 8008c98:	08008c6d 	.word	0x08008c6d
 8008c9c:	08008cf1 	.word	0x08008cf1
 8008ca0:	08008c6d 	.word	0x08008c6d
 8008ca4:	08008c6d 	.word	0x08008c6d
 8008ca8:	08008c6d 	.word	0x08008c6d
 8008cac:	08008c6d 	.word	0x08008c6d
 8008cb0:	08008def 	.word	0x08008def
 8008cb4:	08008d1b 	.word	0x08008d1b
 8008cb8:	08008da9 	.word	0x08008da9
 8008cbc:	08008c6d 	.word	0x08008c6d
 8008cc0:	08008c6d 	.word	0x08008c6d
 8008cc4:	08008e11 	.word	0x08008e11
 8008cc8:	08008c6d 	.word	0x08008c6d
 8008ccc:	08008d1b 	.word	0x08008d1b
 8008cd0:	08008c6d 	.word	0x08008c6d
 8008cd4:	08008c6d 	.word	0x08008c6d
 8008cd8:	08008db1 	.word	0x08008db1
 8008cdc:	6833      	ldr	r3, [r6, #0]
 8008cde:	1d1a      	adds	r2, r3, #4
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	6032      	str	r2, [r6, #0]
 8008ce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008cec:	2301      	movs	r3, #1
 8008cee:	e09c      	b.n	8008e2a <_printf_i+0x1e6>
 8008cf0:	6833      	ldr	r3, [r6, #0]
 8008cf2:	6820      	ldr	r0, [r4, #0]
 8008cf4:	1d19      	adds	r1, r3, #4
 8008cf6:	6031      	str	r1, [r6, #0]
 8008cf8:	0606      	lsls	r6, r0, #24
 8008cfa:	d501      	bpl.n	8008d00 <_printf_i+0xbc>
 8008cfc:	681d      	ldr	r5, [r3, #0]
 8008cfe:	e003      	b.n	8008d08 <_printf_i+0xc4>
 8008d00:	0645      	lsls	r5, r0, #25
 8008d02:	d5fb      	bpl.n	8008cfc <_printf_i+0xb8>
 8008d04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008d08:	2d00      	cmp	r5, #0
 8008d0a:	da03      	bge.n	8008d14 <_printf_i+0xd0>
 8008d0c:	232d      	movs	r3, #45	@ 0x2d
 8008d0e:	426d      	negs	r5, r5
 8008d10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d14:	4858      	ldr	r0, [pc, #352]	@ (8008e78 <_printf_i+0x234>)
 8008d16:	230a      	movs	r3, #10
 8008d18:	e011      	b.n	8008d3e <_printf_i+0xfa>
 8008d1a:	6821      	ldr	r1, [r4, #0]
 8008d1c:	6833      	ldr	r3, [r6, #0]
 8008d1e:	0608      	lsls	r0, r1, #24
 8008d20:	f853 5b04 	ldr.w	r5, [r3], #4
 8008d24:	d402      	bmi.n	8008d2c <_printf_i+0xe8>
 8008d26:	0649      	lsls	r1, r1, #25
 8008d28:	bf48      	it	mi
 8008d2a:	b2ad      	uxthmi	r5, r5
 8008d2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008d2e:	4852      	ldr	r0, [pc, #328]	@ (8008e78 <_printf_i+0x234>)
 8008d30:	6033      	str	r3, [r6, #0]
 8008d32:	bf14      	ite	ne
 8008d34:	230a      	movne	r3, #10
 8008d36:	2308      	moveq	r3, #8
 8008d38:	2100      	movs	r1, #0
 8008d3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008d3e:	6866      	ldr	r6, [r4, #4]
 8008d40:	60a6      	str	r6, [r4, #8]
 8008d42:	2e00      	cmp	r6, #0
 8008d44:	db05      	blt.n	8008d52 <_printf_i+0x10e>
 8008d46:	6821      	ldr	r1, [r4, #0]
 8008d48:	432e      	orrs	r6, r5
 8008d4a:	f021 0104 	bic.w	r1, r1, #4
 8008d4e:	6021      	str	r1, [r4, #0]
 8008d50:	d04b      	beq.n	8008dea <_printf_i+0x1a6>
 8008d52:	4616      	mov	r6, r2
 8008d54:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d58:	fb03 5711 	mls	r7, r3, r1, r5
 8008d5c:	5dc7      	ldrb	r7, [r0, r7]
 8008d5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d62:	462f      	mov	r7, r5
 8008d64:	42bb      	cmp	r3, r7
 8008d66:	460d      	mov	r5, r1
 8008d68:	d9f4      	bls.n	8008d54 <_printf_i+0x110>
 8008d6a:	2b08      	cmp	r3, #8
 8008d6c:	d10b      	bne.n	8008d86 <_printf_i+0x142>
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	07df      	lsls	r7, r3, #31
 8008d72:	d508      	bpl.n	8008d86 <_printf_i+0x142>
 8008d74:	6923      	ldr	r3, [r4, #16]
 8008d76:	6861      	ldr	r1, [r4, #4]
 8008d78:	4299      	cmp	r1, r3
 8008d7a:	bfde      	ittt	le
 8008d7c:	2330      	movle	r3, #48	@ 0x30
 8008d7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d86:	1b92      	subs	r2, r2, r6
 8008d88:	6122      	str	r2, [r4, #16]
 8008d8a:	f8cd a000 	str.w	sl, [sp]
 8008d8e:	464b      	mov	r3, r9
 8008d90:	aa03      	add	r2, sp, #12
 8008d92:	4621      	mov	r1, r4
 8008d94:	4640      	mov	r0, r8
 8008d96:	f7ff fee7 	bl	8008b68 <_printf_common>
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	d14a      	bne.n	8008e34 <_printf_i+0x1f0>
 8008d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008da2:	b004      	add	sp, #16
 8008da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	f043 0320 	orr.w	r3, r3, #32
 8008dae:	6023      	str	r3, [r4, #0]
 8008db0:	4832      	ldr	r0, [pc, #200]	@ (8008e7c <_printf_i+0x238>)
 8008db2:	2778      	movs	r7, #120	@ 0x78
 8008db4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	6831      	ldr	r1, [r6, #0]
 8008dbc:	061f      	lsls	r7, r3, #24
 8008dbe:	f851 5b04 	ldr.w	r5, [r1], #4
 8008dc2:	d402      	bmi.n	8008dca <_printf_i+0x186>
 8008dc4:	065f      	lsls	r7, r3, #25
 8008dc6:	bf48      	it	mi
 8008dc8:	b2ad      	uxthmi	r5, r5
 8008dca:	6031      	str	r1, [r6, #0]
 8008dcc:	07d9      	lsls	r1, r3, #31
 8008dce:	bf44      	itt	mi
 8008dd0:	f043 0320 	orrmi.w	r3, r3, #32
 8008dd4:	6023      	strmi	r3, [r4, #0]
 8008dd6:	b11d      	cbz	r5, 8008de0 <_printf_i+0x19c>
 8008dd8:	2310      	movs	r3, #16
 8008dda:	e7ad      	b.n	8008d38 <_printf_i+0xf4>
 8008ddc:	4826      	ldr	r0, [pc, #152]	@ (8008e78 <_printf_i+0x234>)
 8008dde:	e7e9      	b.n	8008db4 <_printf_i+0x170>
 8008de0:	6823      	ldr	r3, [r4, #0]
 8008de2:	f023 0320 	bic.w	r3, r3, #32
 8008de6:	6023      	str	r3, [r4, #0]
 8008de8:	e7f6      	b.n	8008dd8 <_printf_i+0x194>
 8008dea:	4616      	mov	r6, r2
 8008dec:	e7bd      	b.n	8008d6a <_printf_i+0x126>
 8008dee:	6833      	ldr	r3, [r6, #0]
 8008df0:	6825      	ldr	r5, [r4, #0]
 8008df2:	6961      	ldr	r1, [r4, #20]
 8008df4:	1d18      	adds	r0, r3, #4
 8008df6:	6030      	str	r0, [r6, #0]
 8008df8:	062e      	lsls	r6, r5, #24
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	d501      	bpl.n	8008e02 <_printf_i+0x1be>
 8008dfe:	6019      	str	r1, [r3, #0]
 8008e00:	e002      	b.n	8008e08 <_printf_i+0x1c4>
 8008e02:	0668      	lsls	r0, r5, #25
 8008e04:	d5fb      	bpl.n	8008dfe <_printf_i+0x1ba>
 8008e06:	8019      	strh	r1, [r3, #0]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	6123      	str	r3, [r4, #16]
 8008e0c:	4616      	mov	r6, r2
 8008e0e:	e7bc      	b.n	8008d8a <_printf_i+0x146>
 8008e10:	6833      	ldr	r3, [r6, #0]
 8008e12:	1d1a      	adds	r2, r3, #4
 8008e14:	6032      	str	r2, [r6, #0]
 8008e16:	681e      	ldr	r6, [r3, #0]
 8008e18:	6862      	ldr	r2, [r4, #4]
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	f7f7 fa07 	bl	8000230 <memchr>
 8008e22:	b108      	cbz	r0, 8008e28 <_printf_i+0x1e4>
 8008e24:	1b80      	subs	r0, r0, r6
 8008e26:	6060      	str	r0, [r4, #4]
 8008e28:	6863      	ldr	r3, [r4, #4]
 8008e2a:	6123      	str	r3, [r4, #16]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e32:	e7aa      	b.n	8008d8a <_printf_i+0x146>
 8008e34:	6923      	ldr	r3, [r4, #16]
 8008e36:	4632      	mov	r2, r6
 8008e38:	4649      	mov	r1, r9
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	47d0      	blx	sl
 8008e3e:	3001      	adds	r0, #1
 8008e40:	d0ad      	beq.n	8008d9e <_printf_i+0x15a>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	079b      	lsls	r3, r3, #30
 8008e46:	d413      	bmi.n	8008e70 <_printf_i+0x22c>
 8008e48:	68e0      	ldr	r0, [r4, #12]
 8008e4a:	9b03      	ldr	r3, [sp, #12]
 8008e4c:	4298      	cmp	r0, r3
 8008e4e:	bfb8      	it	lt
 8008e50:	4618      	movlt	r0, r3
 8008e52:	e7a6      	b.n	8008da2 <_printf_i+0x15e>
 8008e54:	2301      	movs	r3, #1
 8008e56:	4632      	mov	r2, r6
 8008e58:	4649      	mov	r1, r9
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	47d0      	blx	sl
 8008e5e:	3001      	adds	r0, #1
 8008e60:	d09d      	beq.n	8008d9e <_printf_i+0x15a>
 8008e62:	3501      	adds	r5, #1
 8008e64:	68e3      	ldr	r3, [r4, #12]
 8008e66:	9903      	ldr	r1, [sp, #12]
 8008e68:	1a5b      	subs	r3, r3, r1
 8008e6a:	42ab      	cmp	r3, r5
 8008e6c:	dcf2      	bgt.n	8008e54 <_printf_i+0x210>
 8008e6e:	e7eb      	b.n	8008e48 <_printf_i+0x204>
 8008e70:	2500      	movs	r5, #0
 8008e72:	f104 0619 	add.w	r6, r4, #25
 8008e76:	e7f5      	b.n	8008e64 <_printf_i+0x220>
 8008e78:	0800b74e 	.word	0x0800b74e
 8008e7c:	0800b75f 	.word	0x0800b75f

08008e80 <std>:
 8008e80:	2300      	movs	r3, #0
 8008e82:	b510      	push	{r4, lr}
 8008e84:	4604      	mov	r4, r0
 8008e86:	e9c0 3300 	strd	r3, r3, [r0]
 8008e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e8e:	6083      	str	r3, [r0, #8]
 8008e90:	8181      	strh	r1, [r0, #12]
 8008e92:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e94:	81c2      	strh	r2, [r0, #14]
 8008e96:	6183      	str	r3, [r0, #24]
 8008e98:	4619      	mov	r1, r3
 8008e9a:	2208      	movs	r2, #8
 8008e9c:	305c      	adds	r0, #92	@ 0x5c
 8008e9e:	f000 f92a 	bl	80090f6 <memset>
 8008ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ed8 <std+0x58>)
 8008ea4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8008edc <std+0x5c>)
 8008ea8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee0 <std+0x60>)
 8008eac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008eae:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee4 <std+0x64>)
 8008eb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ee8 <std+0x68>)
 8008eb4:	6224      	str	r4, [r4, #32]
 8008eb6:	429c      	cmp	r4, r3
 8008eb8:	d006      	beq.n	8008ec8 <std+0x48>
 8008eba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ebe:	4294      	cmp	r4, r2
 8008ec0:	d002      	beq.n	8008ec8 <std+0x48>
 8008ec2:	33d0      	adds	r3, #208	@ 0xd0
 8008ec4:	429c      	cmp	r4, r3
 8008ec6:	d105      	bne.n	8008ed4 <std+0x54>
 8008ec8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed0:	f000 b9a0 	b.w	8009214 <__retarget_lock_init_recursive>
 8008ed4:	bd10      	pop	{r4, pc}
 8008ed6:	bf00      	nop
 8008ed8:	08009071 	.word	0x08009071
 8008edc:	08009093 	.word	0x08009093
 8008ee0:	080090cb 	.word	0x080090cb
 8008ee4:	080090ef 	.word	0x080090ef
 8008ee8:	20000bf4 	.word	0x20000bf4

08008eec <stdio_exit_handler>:
 8008eec:	4a02      	ldr	r2, [pc, #8]	@ (8008ef8 <stdio_exit_handler+0xc>)
 8008eee:	4903      	ldr	r1, [pc, #12]	@ (8008efc <stdio_exit_handler+0x10>)
 8008ef0:	4803      	ldr	r0, [pc, #12]	@ (8008f00 <stdio_exit_handler+0x14>)
 8008ef2:	f000 b869 	b.w	8008fc8 <_fwalk_sglue>
 8008ef6:	bf00      	nop
 8008ef8:	2000000c 	.word	0x2000000c
 8008efc:	0800ab95 	.word	0x0800ab95
 8008f00:	2000001c 	.word	0x2000001c

08008f04 <cleanup_stdio>:
 8008f04:	6841      	ldr	r1, [r0, #4]
 8008f06:	4b0c      	ldr	r3, [pc, #48]	@ (8008f38 <cleanup_stdio+0x34>)
 8008f08:	4299      	cmp	r1, r3
 8008f0a:	b510      	push	{r4, lr}
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	d001      	beq.n	8008f14 <cleanup_stdio+0x10>
 8008f10:	f001 fe40 	bl	800ab94 <_fflush_r>
 8008f14:	68a1      	ldr	r1, [r4, #8]
 8008f16:	4b09      	ldr	r3, [pc, #36]	@ (8008f3c <cleanup_stdio+0x38>)
 8008f18:	4299      	cmp	r1, r3
 8008f1a:	d002      	beq.n	8008f22 <cleanup_stdio+0x1e>
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f001 fe39 	bl	800ab94 <_fflush_r>
 8008f22:	68e1      	ldr	r1, [r4, #12]
 8008f24:	4b06      	ldr	r3, [pc, #24]	@ (8008f40 <cleanup_stdio+0x3c>)
 8008f26:	4299      	cmp	r1, r3
 8008f28:	d004      	beq.n	8008f34 <cleanup_stdio+0x30>
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f30:	f001 be30 	b.w	800ab94 <_fflush_r>
 8008f34:	bd10      	pop	{r4, pc}
 8008f36:	bf00      	nop
 8008f38:	20000bf4 	.word	0x20000bf4
 8008f3c:	20000c5c 	.word	0x20000c5c
 8008f40:	20000cc4 	.word	0x20000cc4

08008f44 <global_stdio_init.part.0>:
 8008f44:	b510      	push	{r4, lr}
 8008f46:	4b0b      	ldr	r3, [pc, #44]	@ (8008f74 <global_stdio_init.part.0+0x30>)
 8008f48:	4c0b      	ldr	r4, [pc, #44]	@ (8008f78 <global_stdio_init.part.0+0x34>)
 8008f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8008f7c <global_stdio_init.part.0+0x38>)
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	4620      	mov	r0, r4
 8008f50:	2200      	movs	r2, #0
 8008f52:	2104      	movs	r1, #4
 8008f54:	f7ff ff94 	bl	8008e80 <std>
 8008f58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	2109      	movs	r1, #9
 8008f60:	f7ff ff8e 	bl	8008e80 <std>
 8008f64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f68:	2202      	movs	r2, #2
 8008f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f6e:	2112      	movs	r1, #18
 8008f70:	f7ff bf86 	b.w	8008e80 <std>
 8008f74:	20000d2c 	.word	0x20000d2c
 8008f78:	20000bf4 	.word	0x20000bf4
 8008f7c:	08008eed 	.word	0x08008eed

08008f80 <__sfp_lock_acquire>:
 8008f80:	4801      	ldr	r0, [pc, #4]	@ (8008f88 <__sfp_lock_acquire+0x8>)
 8008f82:	f000 b948 	b.w	8009216 <__retarget_lock_acquire_recursive>
 8008f86:	bf00      	nop
 8008f88:	20000d35 	.word	0x20000d35

08008f8c <__sfp_lock_release>:
 8008f8c:	4801      	ldr	r0, [pc, #4]	@ (8008f94 <__sfp_lock_release+0x8>)
 8008f8e:	f000 b943 	b.w	8009218 <__retarget_lock_release_recursive>
 8008f92:	bf00      	nop
 8008f94:	20000d35 	.word	0x20000d35

08008f98 <__sinit>:
 8008f98:	b510      	push	{r4, lr}
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	f7ff fff0 	bl	8008f80 <__sfp_lock_acquire>
 8008fa0:	6a23      	ldr	r3, [r4, #32]
 8008fa2:	b11b      	cbz	r3, 8008fac <__sinit+0x14>
 8008fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fa8:	f7ff bff0 	b.w	8008f8c <__sfp_lock_release>
 8008fac:	4b04      	ldr	r3, [pc, #16]	@ (8008fc0 <__sinit+0x28>)
 8008fae:	6223      	str	r3, [r4, #32]
 8008fb0:	4b04      	ldr	r3, [pc, #16]	@ (8008fc4 <__sinit+0x2c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1f5      	bne.n	8008fa4 <__sinit+0xc>
 8008fb8:	f7ff ffc4 	bl	8008f44 <global_stdio_init.part.0>
 8008fbc:	e7f2      	b.n	8008fa4 <__sinit+0xc>
 8008fbe:	bf00      	nop
 8008fc0:	08008f05 	.word	0x08008f05
 8008fc4:	20000d2c 	.word	0x20000d2c

08008fc8 <_fwalk_sglue>:
 8008fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fcc:	4607      	mov	r7, r0
 8008fce:	4688      	mov	r8, r1
 8008fd0:	4614      	mov	r4, r2
 8008fd2:	2600      	movs	r6, #0
 8008fd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fd8:	f1b9 0901 	subs.w	r9, r9, #1
 8008fdc:	d505      	bpl.n	8008fea <_fwalk_sglue+0x22>
 8008fde:	6824      	ldr	r4, [r4, #0]
 8008fe0:	2c00      	cmp	r4, #0
 8008fe2:	d1f7      	bne.n	8008fd4 <_fwalk_sglue+0xc>
 8008fe4:	4630      	mov	r0, r6
 8008fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fea:	89ab      	ldrh	r3, [r5, #12]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d907      	bls.n	8009000 <_fwalk_sglue+0x38>
 8008ff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	d003      	beq.n	8009000 <_fwalk_sglue+0x38>
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	47c0      	blx	r8
 8008ffe:	4306      	orrs	r6, r0
 8009000:	3568      	adds	r5, #104	@ 0x68
 8009002:	e7e9      	b.n	8008fd8 <_fwalk_sglue+0x10>

08009004 <sniprintf>:
 8009004:	b40c      	push	{r2, r3}
 8009006:	b530      	push	{r4, r5, lr}
 8009008:	4b18      	ldr	r3, [pc, #96]	@ (800906c <sniprintf+0x68>)
 800900a:	1e0c      	subs	r4, r1, #0
 800900c:	681d      	ldr	r5, [r3, #0]
 800900e:	b09d      	sub	sp, #116	@ 0x74
 8009010:	da08      	bge.n	8009024 <sniprintf+0x20>
 8009012:	238b      	movs	r3, #139	@ 0x8b
 8009014:	602b      	str	r3, [r5, #0]
 8009016:	f04f 30ff 	mov.w	r0, #4294967295
 800901a:	b01d      	add	sp, #116	@ 0x74
 800901c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009020:	b002      	add	sp, #8
 8009022:	4770      	bx	lr
 8009024:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009028:	f8ad 3014 	strh.w	r3, [sp, #20]
 800902c:	f04f 0300 	mov.w	r3, #0
 8009030:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009032:	bf14      	ite	ne
 8009034:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009038:	4623      	moveq	r3, r4
 800903a:	9304      	str	r3, [sp, #16]
 800903c:	9307      	str	r3, [sp, #28]
 800903e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009042:	9002      	str	r0, [sp, #8]
 8009044:	9006      	str	r0, [sp, #24]
 8009046:	f8ad 3016 	strh.w	r3, [sp, #22]
 800904a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800904c:	ab21      	add	r3, sp, #132	@ 0x84
 800904e:	a902      	add	r1, sp, #8
 8009050:	4628      	mov	r0, r5
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	f001 fc1e 	bl	800a894 <_svfiprintf_r>
 8009058:	1c43      	adds	r3, r0, #1
 800905a:	bfbc      	itt	lt
 800905c:	238b      	movlt	r3, #139	@ 0x8b
 800905e:	602b      	strlt	r3, [r5, #0]
 8009060:	2c00      	cmp	r4, #0
 8009062:	d0da      	beq.n	800901a <sniprintf+0x16>
 8009064:	9b02      	ldr	r3, [sp, #8]
 8009066:	2200      	movs	r2, #0
 8009068:	701a      	strb	r2, [r3, #0]
 800906a:	e7d6      	b.n	800901a <sniprintf+0x16>
 800906c:	20000018 	.word	0x20000018

08009070 <__sread>:
 8009070:	b510      	push	{r4, lr}
 8009072:	460c      	mov	r4, r1
 8009074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009078:	f000 f87e 	bl	8009178 <_read_r>
 800907c:	2800      	cmp	r0, #0
 800907e:	bfab      	itete	ge
 8009080:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009082:	89a3      	ldrhlt	r3, [r4, #12]
 8009084:	181b      	addge	r3, r3, r0
 8009086:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800908a:	bfac      	ite	ge
 800908c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800908e:	81a3      	strhlt	r3, [r4, #12]
 8009090:	bd10      	pop	{r4, pc}

08009092 <__swrite>:
 8009092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009096:	461f      	mov	r7, r3
 8009098:	898b      	ldrh	r3, [r1, #12]
 800909a:	05db      	lsls	r3, r3, #23
 800909c:	4605      	mov	r5, r0
 800909e:	460c      	mov	r4, r1
 80090a0:	4616      	mov	r6, r2
 80090a2:	d505      	bpl.n	80090b0 <__swrite+0x1e>
 80090a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a8:	2302      	movs	r3, #2
 80090aa:	2200      	movs	r2, #0
 80090ac:	f000 f852 	bl	8009154 <_lseek_r>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090ba:	81a3      	strh	r3, [r4, #12]
 80090bc:	4632      	mov	r2, r6
 80090be:	463b      	mov	r3, r7
 80090c0:	4628      	mov	r0, r5
 80090c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090c6:	f000 b869 	b.w	800919c <_write_r>

080090ca <__sseek>:
 80090ca:	b510      	push	{r4, lr}
 80090cc:	460c      	mov	r4, r1
 80090ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d2:	f000 f83f 	bl	8009154 <_lseek_r>
 80090d6:	1c43      	adds	r3, r0, #1
 80090d8:	89a3      	ldrh	r3, [r4, #12]
 80090da:	bf15      	itete	ne
 80090dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090e6:	81a3      	strheq	r3, [r4, #12]
 80090e8:	bf18      	it	ne
 80090ea:	81a3      	strhne	r3, [r4, #12]
 80090ec:	bd10      	pop	{r4, pc}

080090ee <__sclose>:
 80090ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f2:	f000 b81f 	b.w	8009134 <_close_r>

080090f6 <memset>:
 80090f6:	4402      	add	r2, r0
 80090f8:	4603      	mov	r3, r0
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d100      	bne.n	8009100 <memset+0xa>
 80090fe:	4770      	bx	lr
 8009100:	f803 1b01 	strb.w	r1, [r3], #1
 8009104:	e7f9      	b.n	80090fa <memset+0x4>

08009106 <strncpy>:
 8009106:	b510      	push	{r4, lr}
 8009108:	3901      	subs	r1, #1
 800910a:	4603      	mov	r3, r0
 800910c:	b132      	cbz	r2, 800911c <strncpy+0x16>
 800910e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009112:	f803 4b01 	strb.w	r4, [r3], #1
 8009116:	3a01      	subs	r2, #1
 8009118:	2c00      	cmp	r4, #0
 800911a:	d1f7      	bne.n	800910c <strncpy+0x6>
 800911c:	441a      	add	r2, r3
 800911e:	2100      	movs	r1, #0
 8009120:	4293      	cmp	r3, r2
 8009122:	d100      	bne.n	8009126 <strncpy+0x20>
 8009124:	bd10      	pop	{r4, pc}
 8009126:	f803 1b01 	strb.w	r1, [r3], #1
 800912a:	e7f9      	b.n	8009120 <strncpy+0x1a>

0800912c <_localeconv_r>:
 800912c:	4800      	ldr	r0, [pc, #0]	@ (8009130 <_localeconv_r+0x4>)
 800912e:	4770      	bx	lr
 8009130:	20000158 	.word	0x20000158

08009134 <_close_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4d06      	ldr	r5, [pc, #24]	@ (8009150 <_close_r+0x1c>)
 8009138:	2300      	movs	r3, #0
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	602b      	str	r3, [r5, #0]
 8009140:	f7f9 ff44 	bl	8002fcc <_close>
 8009144:	1c43      	adds	r3, r0, #1
 8009146:	d102      	bne.n	800914e <_close_r+0x1a>
 8009148:	682b      	ldr	r3, [r5, #0]
 800914a:	b103      	cbz	r3, 800914e <_close_r+0x1a>
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	bd38      	pop	{r3, r4, r5, pc}
 8009150:	20000d30 	.word	0x20000d30

08009154 <_lseek_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	4d07      	ldr	r5, [pc, #28]	@ (8009174 <_lseek_r+0x20>)
 8009158:	4604      	mov	r4, r0
 800915a:	4608      	mov	r0, r1
 800915c:	4611      	mov	r1, r2
 800915e:	2200      	movs	r2, #0
 8009160:	602a      	str	r2, [r5, #0]
 8009162:	461a      	mov	r2, r3
 8009164:	f7f9 ff59 	bl	800301a <_lseek>
 8009168:	1c43      	adds	r3, r0, #1
 800916a:	d102      	bne.n	8009172 <_lseek_r+0x1e>
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	b103      	cbz	r3, 8009172 <_lseek_r+0x1e>
 8009170:	6023      	str	r3, [r4, #0]
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	20000d30 	.word	0x20000d30

08009178 <_read_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4d07      	ldr	r5, [pc, #28]	@ (8009198 <_read_r+0x20>)
 800917c:	4604      	mov	r4, r0
 800917e:	4608      	mov	r0, r1
 8009180:	4611      	mov	r1, r2
 8009182:	2200      	movs	r2, #0
 8009184:	602a      	str	r2, [r5, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	f7f9 fee7 	bl	8002f5a <_read>
 800918c:	1c43      	adds	r3, r0, #1
 800918e:	d102      	bne.n	8009196 <_read_r+0x1e>
 8009190:	682b      	ldr	r3, [r5, #0]
 8009192:	b103      	cbz	r3, 8009196 <_read_r+0x1e>
 8009194:	6023      	str	r3, [r4, #0]
 8009196:	bd38      	pop	{r3, r4, r5, pc}
 8009198:	20000d30 	.word	0x20000d30

0800919c <_write_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4d07      	ldr	r5, [pc, #28]	@ (80091bc <_write_r+0x20>)
 80091a0:	4604      	mov	r4, r0
 80091a2:	4608      	mov	r0, r1
 80091a4:	4611      	mov	r1, r2
 80091a6:	2200      	movs	r2, #0
 80091a8:	602a      	str	r2, [r5, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	f7f9 fef2 	bl	8002f94 <_write>
 80091b0:	1c43      	adds	r3, r0, #1
 80091b2:	d102      	bne.n	80091ba <_write_r+0x1e>
 80091b4:	682b      	ldr	r3, [r5, #0]
 80091b6:	b103      	cbz	r3, 80091ba <_write_r+0x1e>
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	bd38      	pop	{r3, r4, r5, pc}
 80091bc:	20000d30 	.word	0x20000d30

080091c0 <__errno>:
 80091c0:	4b01      	ldr	r3, [pc, #4]	@ (80091c8 <__errno+0x8>)
 80091c2:	6818      	ldr	r0, [r3, #0]
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	20000018 	.word	0x20000018

080091cc <__libc_init_array>:
 80091cc:	b570      	push	{r4, r5, r6, lr}
 80091ce:	4d0d      	ldr	r5, [pc, #52]	@ (8009204 <__libc_init_array+0x38>)
 80091d0:	4c0d      	ldr	r4, [pc, #52]	@ (8009208 <__libc_init_array+0x3c>)
 80091d2:	1b64      	subs	r4, r4, r5
 80091d4:	10a4      	asrs	r4, r4, #2
 80091d6:	2600      	movs	r6, #0
 80091d8:	42a6      	cmp	r6, r4
 80091da:	d109      	bne.n	80091f0 <__libc_init_array+0x24>
 80091dc:	4d0b      	ldr	r5, [pc, #44]	@ (800920c <__libc_init_array+0x40>)
 80091de:	4c0c      	ldr	r4, [pc, #48]	@ (8009210 <__libc_init_array+0x44>)
 80091e0:	f002 f868 	bl	800b2b4 <_init>
 80091e4:	1b64      	subs	r4, r4, r5
 80091e6:	10a4      	asrs	r4, r4, #2
 80091e8:	2600      	movs	r6, #0
 80091ea:	42a6      	cmp	r6, r4
 80091ec:	d105      	bne.n	80091fa <__libc_init_array+0x2e>
 80091ee:	bd70      	pop	{r4, r5, r6, pc}
 80091f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f4:	4798      	blx	r3
 80091f6:	3601      	adds	r6, #1
 80091f8:	e7ee      	b.n	80091d8 <__libc_init_array+0xc>
 80091fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80091fe:	4798      	blx	r3
 8009200:	3601      	adds	r6, #1
 8009202:	e7f2      	b.n	80091ea <__libc_init_array+0x1e>
 8009204:	0800babc 	.word	0x0800babc
 8009208:	0800babc 	.word	0x0800babc
 800920c:	0800babc 	.word	0x0800babc
 8009210:	0800bac0 	.word	0x0800bac0

08009214 <__retarget_lock_init_recursive>:
 8009214:	4770      	bx	lr

08009216 <__retarget_lock_acquire_recursive>:
 8009216:	4770      	bx	lr

08009218 <__retarget_lock_release_recursive>:
 8009218:	4770      	bx	lr

0800921a <memcpy>:
 800921a:	440a      	add	r2, r1
 800921c:	4291      	cmp	r1, r2
 800921e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009222:	d100      	bne.n	8009226 <memcpy+0xc>
 8009224:	4770      	bx	lr
 8009226:	b510      	push	{r4, lr}
 8009228:	f811 4b01 	ldrb.w	r4, [r1], #1
 800922c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009230:	4291      	cmp	r1, r2
 8009232:	d1f9      	bne.n	8009228 <memcpy+0xe>
 8009234:	bd10      	pop	{r4, pc}

08009236 <quorem>:
 8009236:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923a:	6903      	ldr	r3, [r0, #16]
 800923c:	690c      	ldr	r4, [r1, #16]
 800923e:	42a3      	cmp	r3, r4
 8009240:	4607      	mov	r7, r0
 8009242:	db7e      	blt.n	8009342 <quorem+0x10c>
 8009244:	3c01      	subs	r4, #1
 8009246:	f101 0814 	add.w	r8, r1, #20
 800924a:	00a3      	lsls	r3, r4, #2
 800924c:	f100 0514 	add.w	r5, r0, #20
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800925c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009260:	3301      	adds	r3, #1
 8009262:	429a      	cmp	r2, r3
 8009264:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009268:	fbb2 f6f3 	udiv	r6, r2, r3
 800926c:	d32e      	bcc.n	80092cc <quorem+0x96>
 800926e:	f04f 0a00 	mov.w	sl, #0
 8009272:	46c4      	mov	ip, r8
 8009274:	46ae      	mov	lr, r5
 8009276:	46d3      	mov	fp, sl
 8009278:	f85c 3b04 	ldr.w	r3, [ip], #4
 800927c:	b298      	uxth	r0, r3
 800927e:	fb06 a000 	mla	r0, r6, r0, sl
 8009282:	0c02      	lsrs	r2, r0, #16
 8009284:	0c1b      	lsrs	r3, r3, #16
 8009286:	fb06 2303 	mla	r3, r6, r3, r2
 800928a:	f8de 2000 	ldr.w	r2, [lr]
 800928e:	b280      	uxth	r0, r0
 8009290:	b292      	uxth	r2, r2
 8009292:	1a12      	subs	r2, r2, r0
 8009294:	445a      	add	r2, fp
 8009296:	f8de 0000 	ldr.w	r0, [lr]
 800929a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800929e:	b29b      	uxth	r3, r3
 80092a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80092a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80092a8:	b292      	uxth	r2, r2
 80092aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80092ae:	45e1      	cmp	r9, ip
 80092b0:	f84e 2b04 	str.w	r2, [lr], #4
 80092b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80092b8:	d2de      	bcs.n	8009278 <quorem+0x42>
 80092ba:	9b00      	ldr	r3, [sp, #0]
 80092bc:	58eb      	ldr	r3, [r5, r3]
 80092be:	b92b      	cbnz	r3, 80092cc <quorem+0x96>
 80092c0:	9b01      	ldr	r3, [sp, #4]
 80092c2:	3b04      	subs	r3, #4
 80092c4:	429d      	cmp	r5, r3
 80092c6:	461a      	mov	r2, r3
 80092c8:	d32f      	bcc.n	800932a <quorem+0xf4>
 80092ca:	613c      	str	r4, [r7, #16]
 80092cc:	4638      	mov	r0, r7
 80092ce:	f001 f97d 	bl	800a5cc <__mcmp>
 80092d2:	2800      	cmp	r0, #0
 80092d4:	db25      	blt.n	8009322 <quorem+0xec>
 80092d6:	4629      	mov	r1, r5
 80092d8:	2000      	movs	r0, #0
 80092da:	f858 2b04 	ldr.w	r2, [r8], #4
 80092de:	f8d1 c000 	ldr.w	ip, [r1]
 80092e2:	fa1f fe82 	uxth.w	lr, r2
 80092e6:	fa1f f38c 	uxth.w	r3, ip
 80092ea:	eba3 030e 	sub.w	r3, r3, lr
 80092ee:	4403      	add	r3, r0
 80092f0:	0c12      	lsrs	r2, r2, #16
 80092f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80092f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009300:	45c1      	cmp	r9, r8
 8009302:	f841 3b04 	str.w	r3, [r1], #4
 8009306:	ea4f 4022 	mov.w	r0, r2, asr #16
 800930a:	d2e6      	bcs.n	80092da <quorem+0xa4>
 800930c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009310:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009314:	b922      	cbnz	r2, 8009320 <quorem+0xea>
 8009316:	3b04      	subs	r3, #4
 8009318:	429d      	cmp	r5, r3
 800931a:	461a      	mov	r2, r3
 800931c:	d30b      	bcc.n	8009336 <quorem+0x100>
 800931e:	613c      	str	r4, [r7, #16]
 8009320:	3601      	adds	r6, #1
 8009322:	4630      	mov	r0, r6
 8009324:	b003      	add	sp, #12
 8009326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800932a:	6812      	ldr	r2, [r2, #0]
 800932c:	3b04      	subs	r3, #4
 800932e:	2a00      	cmp	r2, #0
 8009330:	d1cb      	bne.n	80092ca <quorem+0x94>
 8009332:	3c01      	subs	r4, #1
 8009334:	e7c6      	b.n	80092c4 <quorem+0x8e>
 8009336:	6812      	ldr	r2, [r2, #0]
 8009338:	3b04      	subs	r3, #4
 800933a:	2a00      	cmp	r2, #0
 800933c:	d1ef      	bne.n	800931e <quorem+0xe8>
 800933e:	3c01      	subs	r4, #1
 8009340:	e7ea      	b.n	8009318 <quorem+0xe2>
 8009342:	2000      	movs	r0, #0
 8009344:	e7ee      	b.n	8009324 <quorem+0xee>
	...

08009348 <_dtoa_r>:
 8009348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934c:	69c7      	ldr	r7, [r0, #28]
 800934e:	b097      	sub	sp, #92	@ 0x5c
 8009350:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009354:	ec55 4b10 	vmov	r4, r5, d0
 8009358:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800935a:	9107      	str	r1, [sp, #28]
 800935c:	4681      	mov	r9, r0
 800935e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009360:	9311      	str	r3, [sp, #68]	@ 0x44
 8009362:	b97f      	cbnz	r7, 8009384 <_dtoa_r+0x3c>
 8009364:	2010      	movs	r0, #16
 8009366:	f000 fe09 	bl	8009f7c <malloc>
 800936a:	4602      	mov	r2, r0
 800936c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009370:	b920      	cbnz	r0, 800937c <_dtoa_r+0x34>
 8009372:	4ba9      	ldr	r3, [pc, #676]	@ (8009618 <_dtoa_r+0x2d0>)
 8009374:	21ef      	movs	r1, #239	@ 0xef
 8009376:	48a9      	ldr	r0, [pc, #676]	@ (800961c <_dtoa_r+0x2d4>)
 8009378:	f001 fc5e 	bl	800ac38 <__assert_func>
 800937c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009380:	6007      	str	r7, [r0, #0]
 8009382:	60c7      	str	r7, [r0, #12]
 8009384:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009388:	6819      	ldr	r1, [r3, #0]
 800938a:	b159      	cbz	r1, 80093a4 <_dtoa_r+0x5c>
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	604a      	str	r2, [r1, #4]
 8009390:	2301      	movs	r3, #1
 8009392:	4093      	lsls	r3, r2
 8009394:	608b      	str	r3, [r1, #8]
 8009396:	4648      	mov	r0, r9
 8009398:	f000 fee6 	bl	800a168 <_Bfree>
 800939c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80093a0:	2200      	movs	r2, #0
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	1e2b      	subs	r3, r5, #0
 80093a6:	bfb9      	ittee	lt
 80093a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80093ac:	9305      	strlt	r3, [sp, #20]
 80093ae:	2300      	movge	r3, #0
 80093b0:	6033      	strge	r3, [r6, #0]
 80093b2:	9f05      	ldr	r7, [sp, #20]
 80093b4:	4b9a      	ldr	r3, [pc, #616]	@ (8009620 <_dtoa_r+0x2d8>)
 80093b6:	bfbc      	itt	lt
 80093b8:	2201      	movlt	r2, #1
 80093ba:	6032      	strlt	r2, [r6, #0]
 80093bc:	43bb      	bics	r3, r7
 80093be:	d112      	bne.n	80093e6 <_dtoa_r+0x9e>
 80093c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80093c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093cc:	4323      	orrs	r3, r4
 80093ce:	f000 855a 	beq.w	8009e86 <_dtoa_r+0xb3e>
 80093d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80093d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009634 <_dtoa_r+0x2ec>
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 855c 	beq.w	8009e96 <_dtoa_r+0xb4e>
 80093de:	f10a 0303 	add.w	r3, sl, #3
 80093e2:	f000 bd56 	b.w	8009e92 <_dtoa_r+0xb4a>
 80093e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80093ea:	2200      	movs	r2, #0
 80093ec:	ec51 0b17 	vmov	r0, r1, d7
 80093f0:	2300      	movs	r3, #0
 80093f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80093f6:	f7f7 fb97 	bl	8000b28 <__aeabi_dcmpeq>
 80093fa:	4680      	mov	r8, r0
 80093fc:	b158      	cbz	r0, 8009416 <_dtoa_r+0xce>
 80093fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009400:	2301      	movs	r3, #1
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009406:	b113      	cbz	r3, 800940e <_dtoa_r+0xc6>
 8009408:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800940a:	4b86      	ldr	r3, [pc, #536]	@ (8009624 <_dtoa_r+0x2dc>)
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009638 <_dtoa_r+0x2f0>
 8009412:	f000 bd40 	b.w	8009e96 <_dtoa_r+0xb4e>
 8009416:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800941a:	aa14      	add	r2, sp, #80	@ 0x50
 800941c:	a915      	add	r1, sp, #84	@ 0x54
 800941e:	4648      	mov	r0, r9
 8009420:	f001 f984 	bl	800a72c <__d2b>
 8009424:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009428:	9002      	str	r0, [sp, #8]
 800942a:	2e00      	cmp	r6, #0
 800942c:	d078      	beq.n	8009520 <_dtoa_r+0x1d8>
 800942e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009430:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009438:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800943c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009440:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009444:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009448:	4619      	mov	r1, r3
 800944a:	2200      	movs	r2, #0
 800944c:	4b76      	ldr	r3, [pc, #472]	@ (8009628 <_dtoa_r+0x2e0>)
 800944e:	f7f6 ff4b 	bl	80002e8 <__aeabi_dsub>
 8009452:	a36b      	add	r3, pc, #428	@ (adr r3, 8009600 <_dtoa_r+0x2b8>)
 8009454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009458:	f7f7 f8fe 	bl	8000658 <__aeabi_dmul>
 800945c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009608 <_dtoa_r+0x2c0>)
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	f7f6 ff43 	bl	80002ec <__adddf3>
 8009466:	4604      	mov	r4, r0
 8009468:	4630      	mov	r0, r6
 800946a:	460d      	mov	r5, r1
 800946c:	f7f7 f88a 	bl	8000584 <__aeabi_i2d>
 8009470:	a367      	add	r3, pc, #412	@ (adr r3, 8009610 <_dtoa_r+0x2c8>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7f7 f8ef 	bl	8000658 <__aeabi_dmul>
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4620      	mov	r0, r4
 8009480:	4629      	mov	r1, r5
 8009482:	f7f6 ff33 	bl	80002ec <__adddf3>
 8009486:	4604      	mov	r4, r0
 8009488:	460d      	mov	r5, r1
 800948a:	f7f7 fb95 	bl	8000bb8 <__aeabi_d2iz>
 800948e:	2200      	movs	r2, #0
 8009490:	4607      	mov	r7, r0
 8009492:	2300      	movs	r3, #0
 8009494:	4620      	mov	r0, r4
 8009496:	4629      	mov	r1, r5
 8009498:	f7f7 fb50 	bl	8000b3c <__aeabi_dcmplt>
 800949c:	b140      	cbz	r0, 80094b0 <_dtoa_r+0x168>
 800949e:	4638      	mov	r0, r7
 80094a0:	f7f7 f870 	bl	8000584 <__aeabi_i2d>
 80094a4:	4622      	mov	r2, r4
 80094a6:	462b      	mov	r3, r5
 80094a8:	f7f7 fb3e 	bl	8000b28 <__aeabi_dcmpeq>
 80094ac:	b900      	cbnz	r0, 80094b0 <_dtoa_r+0x168>
 80094ae:	3f01      	subs	r7, #1
 80094b0:	2f16      	cmp	r7, #22
 80094b2:	d852      	bhi.n	800955a <_dtoa_r+0x212>
 80094b4:	4b5d      	ldr	r3, [pc, #372]	@ (800962c <_dtoa_r+0x2e4>)
 80094b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80094c2:	f7f7 fb3b 	bl	8000b3c <__aeabi_dcmplt>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d049      	beq.n	800955e <_dtoa_r+0x216>
 80094ca:	3f01      	subs	r7, #1
 80094cc:	2300      	movs	r3, #0
 80094ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80094d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80094d2:	1b9b      	subs	r3, r3, r6
 80094d4:	1e5a      	subs	r2, r3, #1
 80094d6:	bf45      	ittet	mi
 80094d8:	f1c3 0301 	rsbmi	r3, r3, #1
 80094dc:	9300      	strmi	r3, [sp, #0]
 80094de:	2300      	movpl	r3, #0
 80094e0:	2300      	movmi	r3, #0
 80094e2:	9206      	str	r2, [sp, #24]
 80094e4:	bf54      	ite	pl
 80094e6:	9300      	strpl	r3, [sp, #0]
 80094e8:	9306      	strmi	r3, [sp, #24]
 80094ea:	2f00      	cmp	r7, #0
 80094ec:	db39      	blt.n	8009562 <_dtoa_r+0x21a>
 80094ee:	9b06      	ldr	r3, [sp, #24]
 80094f0:	970d      	str	r7, [sp, #52]	@ 0x34
 80094f2:	443b      	add	r3, r7
 80094f4:	9306      	str	r3, [sp, #24]
 80094f6:	2300      	movs	r3, #0
 80094f8:	9308      	str	r3, [sp, #32]
 80094fa:	9b07      	ldr	r3, [sp, #28]
 80094fc:	2b09      	cmp	r3, #9
 80094fe:	d863      	bhi.n	80095c8 <_dtoa_r+0x280>
 8009500:	2b05      	cmp	r3, #5
 8009502:	bfc4      	itt	gt
 8009504:	3b04      	subgt	r3, #4
 8009506:	9307      	strgt	r3, [sp, #28]
 8009508:	9b07      	ldr	r3, [sp, #28]
 800950a:	f1a3 0302 	sub.w	r3, r3, #2
 800950e:	bfcc      	ite	gt
 8009510:	2400      	movgt	r4, #0
 8009512:	2401      	movle	r4, #1
 8009514:	2b03      	cmp	r3, #3
 8009516:	d863      	bhi.n	80095e0 <_dtoa_r+0x298>
 8009518:	e8df f003 	tbb	[pc, r3]
 800951c:	2b375452 	.word	0x2b375452
 8009520:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009524:	441e      	add	r6, r3
 8009526:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800952a:	2b20      	cmp	r3, #32
 800952c:	bfc1      	itttt	gt
 800952e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009532:	409f      	lslgt	r7, r3
 8009534:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009538:	fa24 f303 	lsrgt.w	r3, r4, r3
 800953c:	bfd6      	itet	le
 800953e:	f1c3 0320 	rsble	r3, r3, #32
 8009542:	ea47 0003 	orrgt.w	r0, r7, r3
 8009546:	fa04 f003 	lslle.w	r0, r4, r3
 800954a:	f7f7 f80b 	bl	8000564 <__aeabi_ui2d>
 800954e:	2201      	movs	r2, #1
 8009550:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009554:	3e01      	subs	r6, #1
 8009556:	9212      	str	r2, [sp, #72]	@ 0x48
 8009558:	e776      	b.n	8009448 <_dtoa_r+0x100>
 800955a:	2301      	movs	r3, #1
 800955c:	e7b7      	b.n	80094ce <_dtoa_r+0x186>
 800955e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009560:	e7b6      	b.n	80094d0 <_dtoa_r+0x188>
 8009562:	9b00      	ldr	r3, [sp, #0]
 8009564:	1bdb      	subs	r3, r3, r7
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	427b      	negs	r3, r7
 800956a:	9308      	str	r3, [sp, #32]
 800956c:	2300      	movs	r3, #0
 800956e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009570:	e7c3      	b.n	80094fa <_dtoa_r+0x1b2>
 8009572:	2301      	movs	r3, #1
 8009574:	9309      	str	r3, [sp, #36]	@ 0x24
 8009576:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009578:	eb07 0b03 	add.w	fp, r7, r3
 800957c:	f10b 0301 	add.w	r3, fp, #1
 8009580:	2b01      	cmp	r3, #1
 8009582:	9303      	str	r3, [sp, #12]
 8009584:	bfb8      	it	lt
 8009586:	2301      	movlt	r3, #1
 8009588:	e006      	b.n	8009598 <_dtoa_r+0x250>
 800958a:	2301      	movs	r3, #1
 800958c:	9309      	str	r3, [sp, #36]	@ 0x24
 800958e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009590:	2b00      	cmp	r3, #0
 8009592:	dd28      	ble.n	80095e6 <_dtoa_r+0x29e>
 8009594:	469b      	mov	fp, r3
 8009596:	9303      	str	r3, [sp, #12]
 8009598:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800959c:	2100      	movs	r1, #0
 800959e:	2204      	movs	r2, #4
 80095a0:	f102 0514 	add.w	r5, r2, #20
 80095a4:	429d      	cmp	r5, r3
 80095a6:	d926      	bls.n	80095f6 <_dtoa_r+0x2ae>
 80095a8:	6041      	str	r1, [r0, #4]
 80095aa:	4648      	mov	r0, r9
 80095ac:	f000 fd9c 	bl	800a0e8 <_Balloc>
 80095b0:	4682      	mov	sl, r0
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d142      	bne.n	800963c <_dtoa_r+0x2f4>
 80095b6:	4b1e      	ldr	r3, [pc, #120]	@ (8009630 <_dtoa_r+0x2e8>)
 80095b8:	4602      	mov	r2, r0
 80095ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80095be:	e6da      	b.n	8009376 <_dtoa_r+0x2e>
 80095c0:	2300      	movs	r3, #0
 80095c2:	e7e3      	b.n	800958c <_dtoa_r+0x244>
 80095c4:	2300      	movs	r3, #0
 80095c6:	e7d5      	b.n	8009574 <_dtoa_r+0x22c>
 80095c8:	2401      	movs	r4, #1
 80095ca:	2300      	movs	r3, #0
 80095cc:	9307      	str	r3, [sp, #28]
 80095ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80095d0:	f04f 3bff 	mov.w	fp, #4294967295
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80095da:	2312      	movs	r3, #18
 80095dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80095de:	e7db      	b.n	8009598 <_dtoa_r+0x250>
 80095e0:	2301      	movs	r3, #1
 80095e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80095e4:	e7f4      	b.n	80095d0 <_dtoa_r+0x288>
 80095e6:	f04f 0b01 	mov.w	fp, #1
 80095ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80095ee:	465b      	mov	r3, fp
 80095f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80095f4:	e7d0      	b.n	8009598 <_dtoa_r+0x250>
 80095f6:	3101      	adds	r1, #1
 80095f8:	0052      	lsls	r2, r2, #1
 80095fa:	e7d1      	b.n	80095a0 <_dtoa_r+0x258>
 80095fc:	f3af 8000 	nop.w
 8009600:	636f4361 	.word	0x636f4361
 8009604:	3fd287a7 	.word	0x3fd287a7
 8009608:	8b60c8b3 	.word	0x8b60c8b3
 800960c:	3fc68a28 	.word	0x3fc68a28
 8009610:	509f79fb 	.word	0x509f79fb
 8009614:	3fd34413 	.word	0x3fd34413
 8009618:	0800b77d 	.word	0x0800b77d
 800961c:	0800b794 	.word	0x0800b794
 8009620:	7ff00000 	.word	0x7ff00000
 8009624:	0800b74d 	.word	0x0800b74d
 8009628:	3ff80000 	.word	0x3ff80000
 800962c:	0800b8e8 	.word	0x0800b8e8
 8009630:	0800b7ec 	.word	0x0800b7ec
 8009634:	0800b779 	.word	0x0800b779
 8009638:	0800b74c 	.word	0x0800b74c
 800963c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009640:	6018      	str	r0, [r3, #0]
 8009642:	9b03      	ldr	r3, [sp, #12]
 8009644:	2b0e      	cmp	r3, #14
 8009646:	f200 80a1 	bhi.w	800978c <_dtoa_r+0x444>
 800964a:	2c00      	cmp	r4, #0
 800964c:	f000 809e 	beq.w	800978c <_dtoa_r+0x444>
 8009650:	2f00      	cmp	r7, #0
 8009652:	dd33      	ble.n	80096bc <_dtoa_r+0x374>
 8009654:	4b9c      	ldr	r3, [pc, #624]	@ (80098c8 <_dtoa_r+0x580>)
 8009656:	f007 020f 	and.w	r2, r7, #15
 800965a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800965e:	ed93 7b00 	vldr	d7, [r3]
 8009662:	05f8      	lsls	r0, r7, #23
 8009664:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009668:	ea4f 1427 	mov.w	r4, r7, asr #4
 800966c:	d516      	bpl.n	800969c <_dtoa_r+0x354>
 800966e:	4b97      	ldr	r3, [pc, #604]	@ (80098cc <_dtoa_r+0x584>)
 8009670:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009674:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009678:	f7f7 f918 	bl	80008ac <__aeabi_ddiv>
 800967c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009680:	f004 040f 	and.w	r4, r4, #15
 8009684:	2603      	movs	r6, #3
 8009686:	4d91      	ldr	r5, [pc, #580]	@ (80098cc <_dtoa_r+0x584>)
 8009688:	b954      	cbnz	r4, 80096a0 <_dtoa_r+0x358>
 800968a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800968e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009692:	f7f7 f90b 	bl	80008ac <__aeabi_ddiv>
 8009696:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800969a:	e028      	b.n	80096ee <_dtoa_r+0x3a6>
 800969c:	2602      	movs	r6, #2
 800969e:	e7f2      	b.n	8009686 <_dtoa_r+0x33e>
 80096a0:	07e1      	lsls	r1, r4, #31
 80096a2:	d508      	bpl.n	80096b6 <_dtoa_r+0x36e>
 80096a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80096a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096ac:	f7f6 ffd4 	bl	8000658 <__aeabi_dmul>
 80096b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80096b4:	3601      	adds	r6, #1
 80096b6:	1064      	asrs	r4, r4, #1
 80096b8:	3508      	adds	r5, #8
 80096ba:	e7e5      	b.n	8009688 <_dtoa_r+0x340>
 80096bc:	f000 80af 	beq.w	800981e <_dtoa_r+0x4d6>
 80096c0:	427c      	negs	r4, r7
 80096c2:	4b81      	ldr	r3, [pc, #516]	@ (80098c8 <_dtoa_r+0x580>)
 80096c4:	4d81      	ldr	r5, [pc, #516]	@ (80098cc <_dtoa_r+0x584>)
 80096c6:	f004 020f 	and.w	r2, r4, #15
 80096ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096d6:	f7f6 ffbf 	bl	8000658 <__aeabi_dmul>
 80096da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096de:	1124      	asrs	r4, r4, #4
 80096e0:	2300      	movs	r3, #0
 80096e2:	2602      	movs	r6, #2
 80096e4:	2c00      	cmp	r4, #0
 80096e6:	f040 808f 	bne.w	8009808 <_dtoa_r+0x4c0>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1d3      	bne.n	8009696 <_dtoa_r+0x34e>
 80096ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80096f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 8094 	beq.w	8009822 <_dtoa_r+0x4da>
 80096fa:	4b75      	ldr	r3, [pc, #468]	@ (80098d0 <_dtoa_r+0x588>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	4620      	mov	r0, r4
 8009700:	4629      	mov	r1, r5
 8009702:	f7f7 fa1b 	bl	8000b3c <__aeabi_dcmplt>
 8009706:	2800      	cmp	r0, #0
 8009708:	f000 808b 	beq.w	8009822 <_dtoa_r+0x4da>
 800970c:	9b03      	ldr	r3, [sp, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 8087 	beq.w	8009822 <_dtoa_r+0x4da>
 8009714:	f1bb 0f00 	cmp.w	fp, #0
 8009718:	dd34      	ble.n	8009784 <_dtoa_r+0x43c>
 800971a:	4620      	mov	r0, r4
 800971c:	4b6d      	ldr	r3, [pc, #436]	@ (80098d4 <_dtoa_r+0x58c>)
 800971e:	2200      	movs	r2, #0
 8009720:	4629      	mov	r1, r5
 8009722:	f7f6 ff99 	bl	8000658 <__aeabi_dmul>
 8009726:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800972a:	f107 38ff 	add.w	r8, r7, #4294967295
 800972e:	3601      	adds	r6, #1
 8009730:	465c      	mov	r4, fp
 8009732:	4630      	mov	r0, r6
 8009734:	f7f6 ff26 	bl	8000584 <__aeabi_i2d>
 8009738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800973c:	f7f6 ff8c 	bl	8000658 <__aeabi_dmul>
 8009740:	4b65      	ldr	r3, [pc, #404]	@ (80098d8 <_dtoa_r+0x590>)
 8009742:	2200      	movs	r2, #0
 8009744:	f7f6 fdd2 	bl	80002ec <__adddf3>
 8009748:	4605      	mov	r5, r0
 800974a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800974e:	2c00      	cmp	r4, #0
 8009750:	d16a      	bne.n	8009828 <_dtoa_r+0x4e0>
 8009752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009756:	4b61      	ldr	r3, [pc, #388]	@ (80098dc <_dtoa_r+0x594>)
 8009758:	2200      	movs	r2, #0
 800975a:	f7f6 fdc5 	bl	80002e8 <__aeabi_dsub>
 800975e:	4602      	mov	r2, r0
 8009760:	460b      	mov	r3, r1
 8009762:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009766:	462a      	mov	r2, r5
 8009768:	4633      	mov	r3, r6
 800976a:	f7f7 fa05 	bl	8000b78 <__aeabi_dcmpgt>
 800976e:	2800      	cmp	r0, #0
 8009770:	f040 8298 	bne.w	8009ca4 <_dtoa_r+0x95c>
 8009774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009778:	462a      	mov	r2, r5
 800977a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800977e:	f7f7 f9dd 	bl	8000b3c <__aeabi_dcmplt>
 8009782:	bb38      	cbnz	r0, 80097d4 <_dtoa_r+0x48c>
 8009784:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009788:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800978c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800978e:	2b00      	cmp	r3, #0
 8009790:	f2c0 8157 	blt.w	8009a42 <_dtoa_r+0x6fa>
 8009794:	2f0e      	cmp	r7, #14
 8009796:	f300 8154 	bgt.w	8009a42 <_dtoa_r+0x6fa>
 800979a:	4b4b      	ldr	r3, [pc, #300]	@ (80098c8 <_dtoa_r+0x580>)
 800979c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097a0:	ed93 7b00 	vldr	d7, [r3]
 80097a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	ed8d 7b00 	vstr	d7, [sp]
 80097ac:	f280 80e5 	bge.w	800997a <_dtoa_r+0x632>
 80097b0:	9b03      	ldr	r3, [sp, #12]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f300 80e1 	bgt.w	800997a <_dtoa_r+0x632>
 80097b8:	d10c      	bne.n	80097d4 <_dtoa_r+0x48c>
 80097ba:	4b48      	ldr	r3, [pc, #288]	@ (80098dc <_dtoa_r+0x594>)
 80097bc:	2200      	movs	r2, #0
 80097be:	ec51 0b17 	vmov	r0, r1, d7
 80097c2:	f7f6 ff49 	bl	8000658 <__aeabi_dmul>
 80097c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097ca:	f7f7 f9cb 	bl	8000b64 <__aeabi_dcmpge>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	f000 8266 	beq.w	8009ca0 <_dtoa_r+0x958>
 80097d4:	2400      	movs	r4, #0
 80097d6:	4625      	mov	r5, r4
 80097d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097da:	4656      	mov	r6, sl
 80097dc:	ea6f 0803 	mvn.w	r8, r3
 80097e0:	2700      	movs	r7, #0
 80097e2:	4621      	mov	r1, r4
 80097e4:	4648      	mov	r0, r9
 80097e6:	f000 fcbf 	bl	800a168 <_Bfree>
 80097ea:	2d00      	cmp	r5, #0
 80097ec:	f000 80bd 	beq.w	800996a <_dtoa_r+0x622>
 80097f0:	b12f      	cbz	r7, 80097fe <_dtoa_r+0x4b6>
 80097f2:	42af      	cmp	r7, r5
 80097f4:	d003      	beq.n	80097fe <_dtoa_r+0x4b6>
 80097f6:	4639      	mov	r1, r7
 80097f8:	4648      	mov	r0, r9
 80097fa:	f000 fcb5 	bl	800a168 <_Bfree>
 80097fe:	4629      	mov	r1, r5
 8009800:	4648      	mov	r0, r9
 8009802:	f000 fcb1 	bl	800a168 <_Bfree>
 8009806:	e0b0      	b.n	800996a <_dtoa_r+0x622>
 8009808:	07e2      	lsls	r2, r4, #31
 800980a:	d505      	bpl.n	8009818 <_dtoa_r+0x4d0>
 800980c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009810:	f7f6 ff22 	bl	8000658 <__aeabi_dmul>
 8009814:	3601      	adds	r6, #1
 8009816:	2301      	movs	r3, #1
 8009818:	1064      	asrs	r4, r4, #1
 800981a:	3508      	adds	r5, #8
 800981c:	e762      	b.n	80096e4 <_dtoa_r+0x39c>
 800981e:	2602      	movs	r6, #2
 8009820:	e765      	b.n	80096ee <_dtoa_r+0x3a6>
 8009822:	9c03      	ldr	r4, [sp, #12]
 8009824:	46b8      	mov	r8, r7
 8009826:	e784      	b.n	8009732 <_dtoa_r+0x3ea>
 8009828:	4b27      	ldr	r3, [pc, #156]	@ (80098c8 <_dtoa_r+0x580>)
 800982a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800982c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009830:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009834:	4454      	add	r4, sl
 8009836:	2900      	cmp	r1, #0
 8009838:	d054      	beq.n	80098e4 <_dtoa_r+0x59c>
 800983a:	4929      	ldr	r1, [pc, #164]	@ (80098e0 <_dtoa_r+0x598>)
 800983c:	2000      	movs	r0, #0
 800983e:	f7f7 f835 	bl	80008ac <__aeabi_ddiv>
 8009842:	4633      	mov	r3, r6
 8009844:	462a      	mov	r2, r5
 8009846:	f7f6 fd4f 	bl	80002e8 <__aeabi_dsub>
 800984a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800984e:	4656      	mov	r6, sl
 8009850:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009854:	f7f7 f9b0 	bl	8000bb8 <__aeabi_d2iz>
 8009858:	4605      	mov	r5, r0
 800985a:	f7f6 fe93 	bl	8000584 <__aeabi_i2d>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009866:	f7f6 fd3f 	bl	80002e8 <__aeabi_dsub>
 800986a:	3530      	adds	r5, #48	@ 0x30
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009874:	f806 5b01 	strb.w	r5, [r6], #1
 8009878:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800987c:	f7f7 f95e 	bl	8000b3c <__aeabi_dcmplt>
 8009880:	2800      	cmp	r0, #0
 8009882:	d172      	bne.n	800996a <_dtoa_r+0x622>
 8009884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009888:	4911      	ldr	r1, [pc, #68]	@ (80098d0 <_dtoa_r+0x588>)
 800988a:	2000      	movs	r0, #0
 800988c:	f7f6 fd2c 	bl	80002e8 <__aeabi_dsub>
 8009890:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009894:	f7f7 f952 	bl	8000b3c <__aeabi_dcmplt>
 8009898:	2800      	cmp	r0, #0
 800989a:	f040 80b4 	bne.w	8009a06 <_dtoa_r+0x6be>
 800989e:	42a6      	cmp	r6, r4
 80098a0:	f43f af70 	beq.w	8009784 <_dtoa_r+0x43c>
 80098a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80098a8:	4b0a      	ldr	r3, [pc, #40]	@ (80098d4 <_dtoa_r+0x58c>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	f7f6 fed4 	bl	8000658 <__aeabi_dmul>
 80098b0:	4b08      	ldr	r3, [pc, #32]	@ (80098d4 <_dtoa_r+0x58c>)
 80098b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80098b6:	2200      	movs	r2, #0
 80098b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098bc:	f7f6 fecc 	bl	8000658 <__aeabi_dmul>
 80098c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098c4:	e7c4      	b.n	8009850 <_dtoa_r+0x508>
 80098c6:	bf00      	nop
 80098c8:	0800b8e8 	.word	0x0800b8e8
 80098cc:	0800b8c0 	.word	0x0800b8c0
 80098d0:	3ff00000 	.word	0x3ff00000
 80098d4:	40240000 	.word	0x40240000
 80098d8:	401c0000 	.word	0x401c0000
 80098dc:	40140000 	.word	0x40140000
 80098e0:	3fe00000 	.word	0x3fe00000
 80098e4:	4631      	mov	r1, r6
 80098e6:	4628      	mov	r0, r5
 80098e8:	f7f6 feb6 	bl	8000658 <__aeabi_dmul>
 80098ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80098f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80098f2:	4656      	mov	r6, sl
 80098f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098f8:	f7f7 f95e 	bl	8000bb8 <__aeabi_d2iz>
 80098fc:	4605      	mov	r5, r0
 80098fe:	f7f6 fe41 	bl	8000584 <__aeabi_i2d>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800990a:	f7f6 fced 	bl	80002e8 <__aeabi_dsub>
 800990e:	3530      	adds	r5, #48	@ 0x30
 8009910:	f806 5b01 	strb.w	r5, [r6], #1
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	42a6      	cmp	r6, r4
 800991a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800991e:	f04f 0200 	mov.w	r2, #0
 8009922:	d124      	bne.n	800996e <_dtoa_r+0x626>
 8009924:	4baf      	ldr	r3, [pc, #700]	@ (8009be4 <_dtoa_r+0x89c>)
 8009926:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800992a:	f7f6 fcdf 	bl	80002ec <__adddf3>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009936:	f7f7 f91f 	bl	8000b78 <__aeabi_dcmpgt>
 800993a:	2800      	cmp	r0, #0
 800993c:	d163      	bne.n	8009a06 <_dtoa_r+0x6be>
 800993e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009942:	49a8      	ldr	r1, [pc, #672]	@ (8009be4 <_dtoa_r+0x89c>)
 8009944:	2000      	movs	r0, #0
 8009946:	f7f6 fccf 	bl	80002e8 <__aeabi_dsub>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009952:	f7f7 f8f3 	bl	8000b3c <__aeabi_dcmplt>
 8009956:	2800      	cmp	r0, #0
 8009958:	f43f af14 	beq.w	8009784 <_dtoa_r+0x43c>
 800995c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800995e:	1e73      	subs	r3, r6, #1
 8009960:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009962:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009966:	2b30      	cmp	r3, #48	@ 0x30
 8009968:	d0f8      	beq.n	800995c <_dtoa_r+0x614>
 800996a:	4647      	mov	r7, r8
 800996c:	e03b      	b.n	80099e6 <_dtoa_r+0x69e>
 800996e:	4b9e      	ldr	r3, [pc, #632]	@ (8009be8 <_dtoa_r+0x8a0>)
 8009970:	f7f6 fe72 	bl	8000658 <__aeabi_dmul>
 8009974:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009978:	e7bc      	b.n	80098f4 <_dtoa_r+0x5ac>
 800997a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800997e:	4656      	mov	r6, sl
 8009980:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009984:	4620      	mov	r0, r4
 8009986:	4629      	mov	r1, r5
 8009988:	f7f6 ff90 	bl	80008ac <__aeabi_ddiv>
 800998c:	f7f7 f914 	bl	8000bb8 <__aeabi_d2iz>
 8009990:	4680      	mov	r8, r0
 8009992:	f7f6 fdf7 	bl	8000584 <__aeabi_i2d>
 8009996:	e9dd 2300 	ldrd	r2, r3, [sp]
 800999a:	f7f6 fe5d 	bl	8000658 <__aeabi_dmul>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	4620      	mov	r0, r4
 80099a4:	4629      	mov	r1, r5
 80099a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80099aa:	f7f6 fc9d 	bl	80002e8 <__aeabi_dsub>
 80099ae:	f806 4b01 	strb.w	r4, [r6], #1
 80099b2:	9d03      	ldr	r5, [sp, #12]
 80099b4:	eba6 040a 	sub.w	r4, r6, sl
 80099b8:	42a5      	cmp	r5, r4
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	d133      	bne.n	8009a28 <_dtoa_r+0x6e0>
 80099c0:	f7f6 fc94 	bl	80002ec <__adddf3>
 80099c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099c8:	4604      	mov	r4, r0
 80099ca:	460d      	mov	r5, r1
 80099cc:	f7f7 f8d4 	bl	8000b78 <__aeabi_dcmpgt>
 80099d0:	b9c0      	cbnz	r0, 8009a04 <_dtoa_r+0x6bc>
 80099d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099d6:	4620      	mov	r0, r4
 80099d8:	4629      	mov	r1, r5
 80099da:	f7f7 f8a5 	bl	8000b28 <__aeabi_dcmpeq>
 80099de:	b110      	cbz	r0, 80099e6 <_dtoa_r+0x69e>
 80099e0:	f018 0f01 	tst.w	r8, #1
 80099e4:	d10e      	bne.n	8009a04 <_dtoa_r+0x6bc>
 80099e6:	9902      	ldr	r1, [sp, #8]
 80099e8:	4648      	mov	r0, r9
 80099ea:	f000 fbbd 	bl	800a168 <_Bfree>
 80099ee:	2300      	movs	r3, #0
 80099f0:	7033      	strb	r3, [r6, #0]
 80099f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099f4:	3701      	adds	r7, #1
 80099f6:	601f      	str	r7, [r3, #0]
 80099f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	f000 824b 	beq.w	8009e96 <_dtoa_r+0xb4e>
 8009a00:	601e      	str	r6, [r3, #0]
 8009a02:	e248      	b.n	8009e96 <_dtoa_r+0xb4e>
 8009a04:	46b8      	mov	r8, r7
 8009a06:	4633      	mov	r3, r6
 8009a08:	461e      	mov	r6, r3
 8009a0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a0e:	2a39      	cmp	r2, #57	@ 0x39
 8009a10:	d106      	bne.n	8009a20 <_dtoa_r+0x6d8>
 8009a12:	459a      	cmp	sl, r3
 8009a14:	d1f8      	bne.n	8009a08 <_dtoa_r+0x6c0>
 8009a16:	2230      	movs	r2, #48	@ 0x30
 8009a18:	f108 0801 	add.w	r8, r8, #1
 8009a1c:	f88a 2000 	strb.w	r2, [sl]
 8009a20:	781a      	ldrb	r2, [r3, #0]
 8009a22:	3201      	adds	r2, #1
 8009a24:	701a      	strb	r2, [r3, #0]
 8009a26:	e7a0      	b.n	800996a <_dtoa_r+0x622>
 8009a28:	4b6f      	ldr	r3, [pc, #444]	@ (8009be8 <_dtoa_r+0x8a0>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f7f6 fe14 	bl	8000658 <__aeabi_dmul>
 8009a30:	2200      	movs	r2, #0
 8009a32:	2300      	movs	r3, #0
 8009a34:	4604      	mov	r4, r0
 8009a36:	460d      	mov	r5, r1
 8009a38:	f7f7 f876 	bl	8000b28 <__aeabi_dcmpeq>
 8009a3c:	2800      	cmp	r0, #0
 8009a3e:	d09f      	beq.n	8009980 <_dtoa_r+0x638>
 8009a40:	e7d1      	b.n	80099e6 <_dtoa_r+0x69e>
 8009a42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a44:	2a00      	cmp	r2, #0
 8009a46:	f000 80ea 	beq.w	8009c1e <_dtoa_r+0x8d6>
 8009a4a:	9a07      	ldr	r2, [sp, #28]
 8009a4c:	2a01      	cmp	r2, #1
 8009a4e:	f300 80cd 	bgt.w	8009bec <_dtoa_r+0x8a4>
 8009a52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009a54:	2a00      	cmp	r2, #0
 8009a56:	f000 80c1 	beq.w	8009bdc <_dtoa_r+0x894>
 8009a5a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009a5e:	9c08      	ldr	r4, [sp, #32]
 8009a60:	9e00      	ldr	r6, [sp, #0]
 8009a62:	9a00      	ldr	r2, [sp, #0]
 8009a64:	441a      	add	r2, r3
 8009a66:	9200      	str	r2, [sp, #0]
 8009a68:	9a06      	ldr	r2, [sp, #24]
 8009a6a:	2101      	movs	r1, #1
 8009a6c:	441a      	add	r2, r3
 8009a6e:	4648      	mov	r0, r9
 8009a70:	9206      	str	r2, [sp, #24]
 8009a72:	f000 fc2d 	bl	800a2d0 <__i2b>
 8009a76:	4605      	mov	r5, r0
 8009a78:	b166      	cbz	r6, 8009a94 <_dtoa_r+0x74c>
 8009a7a:	9b06      	ldr	r3, [sp, #24]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	dd09      	ble.n	8009a94 <_dtoa_r+0x74c>
 8009a80:	42b3      	cmp	r3, r6
 8009a82:	9a00      	ldr	r2, [sp, #0]
 8009a84:	bfa8      	it	ge
 8009a86:	4633      	movge	r3, r6
 8009a88:	1ad2      	subs	r2, r2, r3
 8009a8a:	9200      	str	r2, [sp, #0]
 8009a8c:	9a06      	ldr	r2, [sp, #24]
 8009a8e:	1af6      	subs	r6, r6, r3
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	9306      	str	r3, [sp, #24]
 8009a94:	9b08      	ldr	r3, [sp, #32]
 8009a96:	b30b      	cbz	r3, 8009adc <_dtoa_r+0x794>
 8009a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 80c6 	beq.w	8009c2c <_dtoa_r+0x8e4>
 8009aa0:	2c00      	cmp	r4, #0
 8009aa2:	f000 80c0 	beq.w	8009c26 <_dtoa_r+0x8de>
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	4622      	mov	r2, r4
 8009aaa:	4648      	mov	r0, r9
 8009aac:	f000 fcc8 	bl	800a440 <__pow5mult>
 8009ab0:	9a02      	ldr	r2, [sp, #8]
 8009ab2:	4601      	mov	r1, r0
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	4648      	mov	r0, r9
 8009ab8:	f000 fc20 	bl	800a2fc <__multiply>
 8009abc:	9902      	ldr	r1, [sp, #8]
 8009abe:	4680      	mov	r8, r0
 8009ac0:	4648      	mov	r0, r9
 8009ac2:	f000 fb51 	bl	800a168 <_Bfree>
 8009ac6:	9b08      	ldr	r3, [sp, #32]
 8009ac8:	1b1b      	subs	r3, r3, r4
 8009aca:	9308      	str	r3, [sp, #32]
 8009acc:	f000 80b1 	beq.w	8009c32 <_dtoa_r+0x8ea>
 8009ad0:	9a08      	ldr	r2, [sp, #32]
 8009ad2:	4641      	mov	r1, r8
 8009ad4:	4648      	mov	r0, r9
 8009ad6:	f000 fcb3 	bl	800a440 <__pow5mult>
 8009ada:	9002      	str	r0, [sp, #8]
 8009adc:	2101      	movs	r1, #1
 8009ade:	4648      	mov	r0, r9
 8009ae0:	f000 fbf6 	bl	800a2d0 <__i2b>
 8009ae4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 81d8 	beq.w	8009e9e <_dtoa_r+0xb56>
 8009aee:	461a      	mov	r2, r3
 8009af0:	4601      	mov	r1, r0
 8009af2:	4648      	mov	r0, r9
 8009af4:	f000 fca4 	bl	800a440 <__pow5mult>
 8009af8:	9b07      	ldr	r3, [sp, #28]
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	4604      	mov	r4, r0
 8009afe:	f300 809f 	bgt.w	8009c40 <_dtoa_r+0x8f8>
 8009b02:	9b04      	ldr	r3, [sp, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f040 8097 	bne.w	8009c38 <_dtoa_r+0x8f0>
 8009b0a:	9b05      	ldr	r3, [sp, #20]
 8009b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f040 8093 	bne.w	8009c3c <_dtoa_r+0x8f4>
 8009b16:	9b05      	ldr	r3, [sp, #20]
 8009b18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b1c:	0d1b      	lsrs	r3, r3, #20
 8009b1e:	051b      	lsls	r3, r3, #20
 8009b20:	b133      	cbz	r3, 8009b30 <_dtoa_r+0x7e8>
 8009b22:	9b00      	ldr	r3, [sp, #0]
 8009b24:	3301      	adds	r3, #1
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	9b06      	ldr	r3, [sp, #24]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	9306      	str	r3, [sp, #24]
 8009b2e:	2301      	movs	r3, #1
 8009b30:	9308      	str	r3, [sp, #32]
 8009b32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 81b8 	beq.w	8009eaa <_dtoa_r+0xb62>
 8009b3a:	6923      	ldr	r3, [r4, #16]
 8009b3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b40:	6918      	ldr	r0, [r3, #16]
 8009b42:	f000 fb79 	bl	800a238 <__hi0bits>
 8009b46:	f1c0 0020 	rsb	r0, r0, #32
 8009b4a:	9b06      	ldr	r3, [sp, #24]
 8009b4c:	4418      	add	r0, r3
 8009b4e:	f010 001f 	ands.w	r0, r0, #31
 8009b52:	f000 8082 	beq.w	8009c5a <_dtoa_r+0x912>
 8009b56:	f1c0 0320 	rsb	r3, r0, #32
 8009b5a:	2b04      	cmp	r3, #4
 8009b5c:	dd73      	ble.n	8009c46 <_dtoa_r+0x8fe>
 8009b5e:	9b00      	ldr	r3, [sp, #0]
 8009b60:	f1c0 001c 	rsb	r0, r0, #28
 8009b64:	4403      	add	r3, r0
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	9b06      	ldr	r3, [sp, #24]
 8009b6a:	4403      	add	r3, r0
 8009b6c:	4406      	add	r6, r0
 8009b6e:	9306      	str	r3, [sp, #24]
 8009b70:	9b00      	ldr	r3, [sp, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	dd05      	ble.n	8009b82 <_dtoa_r+0x83a>
 8009b76:	9902      	ldr	r1, [sp, #8]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	4648      	mov	r0, r9
 8009b7c:	f000 fcba 	bl	800a4f4 <__lshift>
 8009b80:	9002      	str	r0, [sp, #8]
 8009b82:	9b06      	ldr	r3, [sp, #24]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	dd05      	ble.n	8009b94 <_dtoa_r+0x84c>
 8009b88:	4621      	mov	r1, r4
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	4648      	mov	r0, r9
 8009b8e:	f000 fcb1 	bl	800a4f4 <__lshift>
 8009b92:	4604      	mov	r4, r0
 8009b94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d061      	beq.n	8009c5e <_dtoa_r+0x916>
 8009b9a:	9802      	ldr	r0, [sp, #8]
 8009b9c:	4621      	mov	r1, r4
 8009b9e:	f000 fd15 	bl	800a5cc <__mcmp>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	da5b      	bge.n	8009c5e <_dtoa_r+0x916>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9902      	ldr	r1, [sp, #8]
 8009baa:	220a      	movs	r2, #10
 8009bac:	4648      	mov	r0, r9
 8009bae:	f000 fafd 	bl	800a1ac <__multadd>
 8009bb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb4:	9002      	str	r0, [sp, #8]
 8009bb6:	f107 38ff 	add.w	r8, r7, #4294967295
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f000 8177 	beq.w	8009eae <_dtoa_r+0xb66>
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	220a      	movs	r2, #10
 8009bc6:	4648      	mov	r0, r9
 8009bc8:	f000 faf0 	bl	800a1ac <__multadd>
 8009bcc:	f1bb 0f00 	cmp.w	fp, #0
 8009bd0:	4605      	mov	r5, r0
 8009bd2:	dc6f      	bgt.n	8009cb4 <_dtoa_r+0x96c>
 8009bd4:	9b07      	ldr	r3, [sp, #28]
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	dc49      	bgt.n	8009c6e <_dtoa_r+0x926>
 8009bda:	e06b      	b.n	8009cb4 <_dtoa_r+0x96c>
 8009bdc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009bde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009be2:	e73c      	b.n	8009a5e <_dtoa_r+0x716>
 8009be4:	3fe00000 	.word	0x3fe00000
 8009be8:	40240000 	.word	0x40240000
 8009bec:	9b03      	ldr	r3, [sp, #12]
 8009bee:	1e5c      	subs	r4, r3, #1
 8009bf0:	9b08      	ldr	r3, [sp, #32]
 8009bf2:	42a3      	cmp	r3, r4
 8009bf4:	db09      	blt.n	8009c0a <_dtoa_r+0x8c2>
 8009bf6:	1b1c      	subs	r4, r3, r4
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f6bf af30 	bge.w	8009a60 <_dtoa_r+0x718>
 8009c00:	9b00      	ldr	r3, [sp, #0]
 8009c02:	9a03      	ldr	r2, [sp, #12]
 8009c04:	1a9e      	subs	r6, r3, r2
 8009c06:	2300      	movs	r3, #0
 8009c08:	e72b      	b.n	8009a62 <_dtoa_r+0x71a>
 8009c0a:	9b08      	ldr	r3, [sp, #32]
 8009c0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c0e:	9408      	str	r4, [sp, #32]
 8009c10:	1ae3      	subs	r3, r4, r3
 8009c12:	441a      	add	r2, r3
 8009c14:	9e00      	ldr	r6, [sp, #0]
 8009c16:	9b03      	ldr	r3, [sp, #12]
 8009c18:	920d      	str	r2, [sp, #52]	@ 0x34
 8009c1a:	2400      	movs	r4, #0
 8009c1c:	e721      	b.n	8009a62 <_dtoa_r+0x71a>
 8009c1e:	9c08      	ldr	r4, [sp, #32]
 8009c20:	9e00      	ldr	r6, [sp, #0]
 8009c22:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009c24:	e728      	b.n	8009a78 <_dtoa_r+0x730>
 8009c26:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009c2a:	e751      	b.n	8009ad0 <_dtoa_r+0x788>
 8009c2c:	9a08      	ldr	r2, [sp, #32]
 8009c2e:	9902      	ldr	r1, [sp, #8]
 8009c30:	e750      	b.n	8009ad4 <_dtoa_r+0x78c>
 8009c32:	f8cd 8008 	str.w	r8, [sp, #8]
 8009c36:	e751      	b.n	8009adc <_dtoa_r+0x794>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	e779      	b.n	8009b30 <_dtoa_r+0x7e8>
 8009c3c:	9b04      	ldr	r3, [sp, #16]
 8009c3e:	e777      	b.n	8009b30 <_dtoa_r+0x7e8>
 8009c40:	2300      	movs	r3, #0
 8009c42:	9308      	str	r3, [sp, #32]
 8009c44:	e779      	b.n	8009b3a <_dtoa_r+0x7f2>
 8009c46:	d093      	beq.n	8009b70 <_dtoa_r+0x828>
 8009c48:	9a00      	ldr	r2, [sp, #0]
 8009c4a:	331c      	adds	r3, #28
 8009c4c:	441a      	add	r2, r3
 8009c4e:	9200      	str	r2, [sp, #0]
 8009c50:	9a06      	ldr	r2, [sp, #24]
 8009c52:	441a      	add	r2, r3
 8009c54:	441e      	add	r6, r3
 8009c56:	9206      	str	r2, [sp, #24]
 8009c58:	e78a      	b.n	8009b70 <_dtoa_r+0x828>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	e7f4      	b.n	8009c48 <_dtoa_r+0x900>
 8009c5e:	9b03      	ldr	r3, [sp, #12]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	46b8      	mov	r8, r7
 8009c64:	dc20      	bgt.n	8009ca8 <_dtoa_r+0x960>
 8009c66:	469b      	mov	fp, r3
 8009c68:	9b07      	ldr	r3, [sp, #28]
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	dd1e      	ble.n	8009cac <_dtoa_r+0x964>
 8009c6e:	f1bb 0f00 	cmp.w	fp, #0
 8009c72:	f47f adb1 	bne.w	80097d8 <_dtoa_r+0x490>
 8009c76:	4621      	mov	r1, r4
 8009c78:	465b      	mov	r3, fp
 8009c7a:	2205      	movs	r2, #5
 8009c7c:	4648      	mov	r0, r9
 8009c7e:	f000 fa95 	bl	800a1ac <__multadd>
 8009c82:	4601      	mov	r1, r0
 8009c84:	4604      	mov	r4, r0
 8009c86:	9802      	ldr	r0, [sp, #8]
 8009c88:	f000 fca0 	bl	800a5cc <__mcmp>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	f77f ada3 	ble.w	80097d8 <_dtoa_r+0x490>
 8009c92:	4656      	mov	r6, sl
 8009c94:	2331      	movs	r3, #49	@ 0x31
 8009c96:	f806 3b01 	strb.w	r3, [r6], #1
 8009c9a:	f108 0801 	add.w	r8, r8, #1
 8009c9e:	e59f      	b.n	80097e0 <_dtoa_r+0x498>
 8009ca0:	9c03      	ldr	r4, [sp, #12]
 8009ca2:	46b8      	mov	r8, r7
 8009ca4:	4625      	mov	r5, r4
 8009ca6:	e7f4      	b.n	8009c92 <_dtoa_r+0x94a>
 8009ca8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f000 8101 	beq.w	8009eb6 <_dtoa_r+0xb6e>
 8009cb4:	2e00      	cmp	r6, #0
 8009cb6:	dd05      	ble.n	8009cc4 <_dtoa_r+0x97c>
 8009cb8:	4629      	mov	r1, r5
 8009cba:	4632      	mov	r2, r6
 8009cbc:	4648      	mov	r0, r9
 8009cbe:	f000 fc19 	bl	800a4f4 <__lshift>
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	9b08      	ldr	r3, [sp, #32]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d05c      	beq.n	8009d84 <_dtoa_r+0xa3c>
 8009cca:	6869      	ldr	r1, [r5, #4]
 8009ccc:	4648      	mov	r0, r9
 8009cce:	f000 fa0b 	bl	800a0e8 <_Balloc>
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	b928      	cbnz	r0, 8009ce2 <_dtoa_r+0x99a>
 8009cd6:	4b82      	ldr	r3, [pc, #520]	@ (8009ee0 <_dtoa_r+0xb98>)
 8009cd8:	4602      	mov	r2, r0
 8009cda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009cde:	f7ff bb4a 	b.w	8009376 <_dtoa_r+0x2e>
 8009ce2:	692a      	ldr	r2, [r5, #16]
 8009ce4:	3202      	adds	r2, #2
 8009ce6:	0092      	lsls	r2, r2, #2
 8009ce8:	f105 010c 	add.w	r1, r5, #12
 8009cec:	300c      	adds	r0, #12
 8009cee:	f7ff fa94 	bl	800921a <memcpy>
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	4648      	mov	r0, r9
 8009cf8:	f000 fbfc 	bl	800a4f4 <__lshift>
 8009cfc:	f10a 0301 	add.w	r3, sl, #1
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	eb0a 030b 	add.w	r3, sl, fp
 8009d06:	9308      	str	r3, [sp, #32]
 8009d08:	9b04      	ldr	r3, [sp, #16]
 8009d0a:	f003 0301 	and.w	r3, r3, #1
 8009d0e:	462f      	mov	r7, r5
 8009d10:	9306      	str	r3, [sp, #24]
 8009d12:	4605      	mov	r5, r0
 8009d14:	9b00      	ldr	r3, [sp, #0]
 8009d16:	9802      	ldr	r0, [sp, #8]
 8009d18:	4621      	mov	r1, r4
 8009d1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8009d1e:	f7ff fa8a 	bl	8009236 <quorem>
 8009d22:	4603      	mov	r3, r0
 8009d24:	3330      	adds	r3, #48	@ 0x30
 8009d26:	9003      	str	r0, [sp, #12]
 8009d28:	4639      	mov	r1, r7
 8009d2a:	9802      	ldr	r0, [sp, #8]
 8009d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d2e:	f000 fc4d 	bl	800a5cc <__mcmp>
 8009d32:	462a      	mov	r2, r5
 8009d34:	9004      	str	r0, [sp, #16]
 8009d36:	4621      	mov	r1, r4
 8009d38:	4648      	mov	r0, r9
 8009d3a:	f000 fc63 	bl	800a604 <__mdiff>
 8009d3e:	68c2      	ldr	r2, [r0, #12]
 8009d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d42:	4606      	mov	r6, r0
 8009d44:	bb02      	cbnz	r2, 8009d88 <_dtoa_r+0xa40>
 8009d46:	4601      	mov	r1, r0
 8009d48:	9802      	ldr	r0, [sp, #8]
 8009d4a:	f000 fc3f 	bl	800a5cc <__mcmp>
 8009d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d50:	4602      	mov	r2, r0
 8009d52:	4631      	mov	r1, r6
 8009d54:	4648      	mov	r0, r9
 8009d56:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d5a:	f000 fa05 	bl	800a168 <_Bfree>
 8009d5e:	9b07      	ldr	r3, [sp, #28]
 8009d60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d62:	9e00      	ldr	r6, [sp, #0]
 8009d64:	ea42 0103 	orr.w	r1, r2, r3
 8009d68:	9b06      	ldr	r3, [sp, #24]
 8009d6a:	4319      	orrs	r1, r3
 8009d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d6e:	d10d      	bne.n	8009d8c <_dtoa_r+0xa44>
 8009d70:	2b39      	cmp	r3, #57	@ 0x39
 8009d72:	d027      	beq.n	8009dc4 <_dtoa_r+0xa7c>
 8009d74:	9a04      	ldr	r2, [sp, #16]
 8009d76:	2a00      	cmp	r2, #0
 8009d78:	dd01      	ble.n	8009d7e <_dtoa_r+0xa36>
 8009d7a:	9b03      	ldr	r3, [sp, #12]
 8009d7c:	3331      	adds	r3, #49	@ 0x31
 8009d7e:	f88b 3000 	strb.w	r3, [fp]
 8009d82:	e52e      	b.n	80097e2 <_dtoa_r+0x49a>
 8009d84:	4628      	mov	r0, r5
 8009d86:	e7b9      	b.n	8009cfc <_dtoa_r+0x9b4>
 8009d88:	2201      	movs	r2, #1
 8009d8a:	e7e2      	b.n	8009d52 <_dtoa_r+0xa0a>
 8009d8c:	9904      	ldr	r1, [sp, #16]
 8009d8e:	2900      	cmp	r1, #0
 8009d90:	db04      	blt.n	8009d9c <_dtoa_r+0xa54>
 8009d92:	9807      	ldr	r0, [sp, #28]
 8009d94:	4301      	orrs	r1, r0
 8009d96:	9806      	ldr	r0, [sp, #24]
 8009d98:	4301      	orrs	r1, r0
 8009d9a:	d120      	bne.n	8009dde <_dtoa_r+0xa96>
 8009d9c:	2a00      	cmp	r2, #0
 8009d9e:	ddee      	ble.n	8009d7e <_dtoa_r+0xa36>
 8009da0:	9902      	ldr	r1, [sp, #8]
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	2201      	movs	r2, #1
 8009da6:	4648      	mov	r0, r9
 8009da8:	f000 fba4 	bl	800a4f4 <__lshift>
 8009dac:	4621      	mov	r1, r4
 8009dae:	9002      	str	r0, [sp, #8]
 8009db0:	f000 fc0c 	bl	800a5cc <__mcmp>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	9b00      	ldr	r3, [sp, #0]
 8009db8:	dc02      	bgt.n	8009dc0 <_dtoa_r+0xa78>
 8009dba:	d1e0      	bne.n	8009d7e <_dtoa_r+0xa36>
 8009dbc:	07da      	lsls	r2, r3, #31
 8009dbe:	d5de      	bpl.n	8009d7e <_dtoa_r+0xa36>
 8009dc0:	2b39      	cmp	r3, #57	@ 0x39
 8009dc2:	d1da      	bne.n	8009d7a <_dtoa_r+0xa32>
 8009dc4:	2339      	movs	r3, #57	@ 0x39
 8009dc6:	f88b 3000 	strb.w	r3, [fp]
 8009dca:	4633      	mov	r3, r6
 8009dcc:	461e      	mov	r6, r3
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009dd4:	2a39      	cmp	r2, #57	@ 0x39
 8009dd6:	d04e      	beq.n	8009e76 <_dtoa_r+0xb2e>
 8009dd8:	3201      	adds	r2, #1
 8009dda:	701a      	strb	r2, [r3, #0]
 8009ddc:	e501      	b.n	80097e2 <_dtoa_r+0x49a>
 8009dde:	2a00      	cmp	r2, #0
 8009de0:	dd03      	ble.n	8009dea <_dtoa_r+0xaa2>
 8009de2:	2b39      	cmp	r3, #57	@ 0x39
 8009de4:	d0ee      	beq.n	8009dc4 <_dtoa_r+0xa7c>
 8009de6:	3301      	adds	r3, #1
 8009de8:	e7c9      	b.n	8009d7e <_dtoa_r+0xa36>
 8009dea:	9a00      	ldr	r2, [sp, #0]
 8009dec:	9908      	ldr	r1, [sp, #32]
 8009dee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009df2:	428a      	cmp	r2, r1
 8009df4:	d028      	beq.n	8009e48 <_dtoa_r+0xb00>
 8009df6:	9902      	ldr	r1, [sp, #8]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	220a      	movs	r2, #10
 8009dfc:	4648      	mov	r0, r9
 8009dfe:	f000 f9d5 	bl	800a1ac <__multadd>
 8009e02:	42af      	cmp	r7, r5
 8009e04:	9002      	str	r0, [sp, #8]
 8009e06:	f04f 0300 	mov.w	r3, #0
 8009e0a:	f04f 020a 	mov.w	r2, #10
 8009e0e:	4639      	mov	r1, r7
 8009e10:	4648      	mov	r0, r9
 8009e12:	d107      	bne.n	8009e24 <_dtoa_r+0xadc>
 8009e14:	f000 f9ca 	bl	800a1ac <__multadd>
 8009e18:	4607      	mov	r7, r0
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	9b00      	ldr	r3, [sp, #0]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	e777      	b.n	8009d14 <_dtoa_r+0x9cc>
 8009e24:	f000 f9c2 	bl	800a1ac <__multadd>
 8009e28:	4629      	mov	r1, r5
 8009e2a:	4607      	mov	r7, r0
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	220a      	movs	r2, #10
 8009e30:	4648      	mov	r0, r9
 8009e32:	f000 f9bb 	bl	800a1ac <__multadd>
 8009e36:	4605      	mov	r5, r0
 8009e38:	e7f0      	b.n	8009e1c <_dtoa_r+0xad4>
 8009e3a:	f1bb 0f00 	cmp.w	fp, #0
 8009e3e:	bfcc      	ite	gt
 8009e40:	465e      	movgt	r6, fp
 8009e42:	2601      	movle	r6, #1
 8009e44:	4456      	add	r6, sl
 8009e46:	2700      	movs	r7, #0
 8009e48:	9902      	ldr	r1, [sp, #8]
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	4648      	mov	r0, r9
 8009e50:	f000 fb50 	bl	800a4f4 <__lshift>
 8009e54:	4621      	mov	r1, r4
 8009e56:	9002      	str	r0, [sp, #8]
 8009e58:	f000 fbb8 	bl	800a5cc <__mcmp>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	dcb4      	bgt.n	8009dca <_dtoa_r+0xa82>
 8009e60:	d102      	bne.n	8009e68 <_dtoa_r+0xb20>
 8009e62:	9b00      	ldr	r3, [sp, #0]
 8009e64:	07db      	lsls	r3, r3, #31
 8009e66:	d4b0      	bmi.n	8009dca <_dtoa_r+0xa82>
 8009e68:	4633      	mov	r3, r6
 8009e6a:	461e      	mov	r6, r3
 8009e6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e70:	2a30      	cmp	r2, #48	@ 0x30
 8009e72:	d0fa      	beq.n	8009e6a <_dtoa_r+0xb22>
 8009e74:	e4b5      	b.n	80097e2 <_dtoa_r+0x49a>
 8009e76:	459a      	cmp	sl, r3
 8009e78:	d1a8      	bne.n	8009dcc <_dtoa_r+0xa84>
 8009e7a:	2331      	movs	r3, #49	@ 0x31
 8009e7c:	f108 0801 	add.w	r8, r8, #1
 8009e80:	f88a 3000 	strb.w	r3, [sl]
 8009e84:	e4ad      	b.n	80097e2 <_dtoa_r+0x49a>
 8009e86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009ee4 <_dtoa_r+0xb9c>
 8009e8c:	b11b      	cbz	r3, 8009e96 <_dtoa_r+0xb4e>
 8009e8e:	f10a 0308 	add.w	r3, sl, #8
 8009e92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009e94:	6013      	str	r3, [r2, #0]
 8009e96:	4650      	mov	r0, sl
 8009e98:	b017      	add	sp, #92	@ 0x5c
 8009e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9e:	9b07      	ldr	r3, [sp, #28]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	f77f ae2e 	ble.w	8009b02 <_dtoa_r+0x7ba>
 8009ea6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ea8:	9308      	str	r3, [sp, #32]
 8009eaa:	2001      	movs	r0, #1
 8009eac:	e64d      	b.n	8009b4a <_dtoa_r+0x802>
 8009eae:	f1bb 0f00 	cmp.w	fp, #0
 8009eb2:	f77f aed9 	ble.w	8009c68 <_dtoa_r+0x920>
 8009eb6:	4656      	mov	r6, sl
 8009eb8:	9802      	ldr	r0, [sp, #8]
 8009eba:	4621      	mov	r1, r4
 8009ebc:	f7ff f9bb 	bl	8009236 <quorem>
 8009ec0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009ec4:	f806 3b01 	strb.w	r3, [r6], #1
 8009ec8:	eba6 020a 	sub.w	r2, r6, sl
 8009ecc:	4593      	cmp	fp, r2
 8009ece:	ddb4      	ble.n	8009e3a <_dtoa_r+0xaf2>
 8009ed0:	9902      	ldr	r1, [sp, #8]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	220a      	movs	r2, #10
 8009ed6:	4648      	mov	r0, r9
 8009ed8:	f000 f968 	bl	800a1ac <__multadd>
 8009edc:	9002      	str	r0, [sp, #8]
 8009ede:	e7eb      	b.n	8009eb8 <_dtoa_r+0xb70>
 8009ee0:	0800b7ec 	.word	0x0800b7ec
 8009ee4:	0800b770 	.word	0x0800b770

08009ee8 <_free_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4605      	mov	r5, r0
 8009eec:	2900      	cmp	r1, #0
 8009eee:	d041      	beq.n	8009f74 <_free_r+0x8c>
 8009ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef4:	1f0c      	subs	r4, r1, #4
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	bfb8      	it	lt
 8009efa:	18e4      	addlt	r4, r4, r3
 8009efc:	f000 f8e8 	bl	800a0d0 <__malloc_lock>
 8009f00:	4a1d      	ldr	r2, [pc, #116]	@ (8009f78 <_free_r+0x90>)
 8009f02:	6813      	ldr	r3, [r2, #0]
 8009f04:	b933      	cbnz	r3, 8009f14 <_free_r+0x2c>
 8009f06:	6063      	str	r3, [r4, #4]
 8009f08:	6014      	str	r4, [r2, #0]
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f10:	f000 b8e4 	b.w	800a0dc <__malloc_unlock>
 8009f14:	42a3      	cmp	r3, r4
 8009f16:	d908      	bls.n	8009f2a <_free_r+0x42>
 8009f18:	6820      	ldr	r0, [r4, #0]
 8009f1a:	1821      	adds	r1, r4, r0
 8009f1c:	428b      	cmp	r3, r1
 8009f1e:	bf01      	itttt	eq
 8009f20:	6819      	ldreq	r1, [r3, #0]
 8009f22:	685b      	ldreq	r3, [r3, #4]
 8009f24:	1809      	addeq	r1, r1, r0
 8009f26:	6021      	streq	r1, [r4, #0]
 8009f28:	e7ed      	b.n	8009f06 <_free_r+0x1e>
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	b10b      	cbz	r3, 8009f34 <_free_r+0x4c>
 8009f30:	42a3      	cmp	r3, r4
 8009f32:	d9fa      	bls.n	8009f2a <_free_r+0x42>
 8009f34:	6811      	ldr	r1, [r2, #0]
 8009f36:	1850      	adds	r0, r2, r1
 8009f38:	42a0      	cmp	r0, r4
 8009f3a:	d10b      	bne.n	8009f54 <_free_r+0x6c>
 8009f3c:	6820      	ldr	r0, [r4, #0]
 8009f3e:	4401      	add	r1, r0
 8009f40:	1850      	adds	r0, r2, r1
 8009f42:	4283      	cmp	r3, r0
 8009f44:	6011      	str	r1, [r2, #0]
 8009f46:	d1e0      	bne.n	8009f0a <_free_r+0x22>
 8009f48:	6818      	ldr	r0, [r3, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	6053      	str	r3, [r2, #4]
 8009f4e:	4408      	add	r0, r1
 8009f50:	6010      	str	r0, [r2, #0]
 8009f52:	e7da      	b.n	8009f0a <_free_r+0x22>
 8009f54:	d902      	bls.n	8009f5c <_free_r+0x74>
 8009f56:	230c      	movs	r3, #12
 8009f58:	602b      	str	r3, [r5, #0]
 8009f5a:	e7d6      	b.n	8009f0a <_free_r+0x22>
 8009f5c:	6820      	ldr	r0, [r4, #0]
 8009f5e:	1821      	adds	r1, r4, r0
 8009f60:	428b      	cmp	r3, r1
 8009f62:	bf04      	itt	eq
 8009f64:	6819      	ldreq	r1, [r3, #0]
 8009f66:	685b      	ldreq	r3, [r3, #4]
 8009f68:	6063      	str	r3, [r4, #4]
 8009f6a:	bf04      	itt	eq
 8009f6c:	1809      	addeq	r1, r1, r0
 8009f6e:	6021      	streq	r1, [r4, #0]
 8009f70:	6054      	str	r4, [r2, #4]
 8009f72:	e7ca      	b.n	8009f0a <_free_r+0x22>
 8009f74:	bd38      	pop	{r3, r4, r5, pc}
 8009f76:	bf00      	nop
 8009f78:	20000d3c 	.word	0x20000d3c

08009f7c <malloc>:
 8009f7c:	4b02      	ldr	r3, [pc, #8]	@ (8009f88 <malloc+0xc>)
 8009f7e:	4601      	mov	r1, r0
 8009f80:	6818      	ldr	r0, [r3, #0]
 8009f82:	f000 b825 	b.w	8009fd0 <_malloc_r>
 8009f86:	bf00      	nop
 8009f88:	20000018 	.word	0x20000018

08009f8c <sbrk_aligned>:
 8009f8c:	b570      	push	{r4, r5, r6, lr}
 8009f8e:	4e0f      	ldr	r6, [pc, #60]	@ (8009fcc <sbrk_aligned+0x40>)
 8009f90:	460c      	mov	r4, r1
 8009f92:	6831      	ldr	r1, [r6, #0]
 8009f94:	4605      	mov	r5, r0
 8009f96:	b911      	cbnz	r1, 8009f9e <sbrk_aligned+0x12>
 8009f98:	f000 fe3e 	bl	800ac18 <_sbrk_r>
 8009f9c:	6030      	str	r0, [r6, #0]
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f000 fe39 	bl	800ac18 <_sbrk_r>
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	d103      	bne.n	8009fb2 <sbrk_aligned+0x26>
 8009faa:	f04f 34ff 	mov.w	r4, #4294967295
 8009fae:	4620      	mov	r0, r4
 8009fb0:	bd70      	pop	{r4, r5, r6, pc}
 8009fb2:	1cc4      	adds	r4, r0, #3
 8009fb4:	f024 0403 	bic.w	r4, r4, #3
 8009fb8:	42a0      	cmp	r0, r4
 8009fba:	d0f8      	beq.n	8009fae <sbrk_aligned+0x22>
 8009fbc:	1a21      	subs	r1, r4, r0
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f000 fe2a 	bl	800ac18 <_sbrk_r>
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	d1f2      	bne.n	8009fae <sbrk_aligned+0x22>
 8009fc8:	e7ef      	b.n	8009faa <sbrk_aligned+0x1e>
 8009fca:	bf00      	nop
 8009fcc:	20000d38 	.word	0x20000d38

08009fd0 <_malloc_r>:
 8009fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd4:	1ccd      	adds	r5, r1, #3
 8009fd6:	f025 0503 	bic.w	r5, r5, #3
 8009fda:	3508      	adds	r5, #8
 8009fdc:	2d0c      	cmp	r5, #12
 8009fde:	bf38      	it	cc
 8009fe0:	250c      	movcc	r5, #12
 8009fe2:	2d00      	cmp	r5, #0
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	db01      	blt.n	8009fec <_malloc_r+0x1c>
 8009fe8:	42a9      	cmp	r1, r5
 8009fea:	d904      	bls.n	8009ff6 <_malloc_r+0x26>
 8009fec:	230c      	movs	r3, #12
 8009fee:	6033      	str	r3, [r6, #0]
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ff6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0cc <_malloc_r+0xfc>
 8009ffa:	f000 f869 	bl	800a0d0 <__malloc_lock>
 8009ffe:	f8d8 3000 	ldr.w	r3, [r8]
 800a002:	461c      	mov	r4, r3
 800a004:	bb44      	cbnz	r4, 800a058 <_malloc_r+0x88>
 800a006:	4629      	mov	r1, r5
 800a008:	4630      	mov	r0, r6
 800a00a:	f7ff ffbf 	bl	8009f8c <sbrk_aligned>
 800a00e:	1c43      	adds	r3, r0, #1
 800a010:	4604      	mov	r4, r0
 800a012:	d158      	bne.n	800a0c6 <_malloc_r+0xf6>
 800a014:	f8d8 4000 	ldr.w	r4, [r8]
 800a018:	4627      	mov	r7, r4
 800a01a:	2f00      	cmp	r7, #0
 800a01c:	d143      	bne.n	800a0a6 <_malloc_r+0xd6>
 800a01e:	2c00      	cmp	r4, #0
 800a020:	d04b      	beq.n	800a0ba <_malloc_r+0xea>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	4639      	mov	r1, r7
 800a026:	4630      	mov	r0, r6
 800a028:	eb04 0903 	add.w	r9, r4, r3
 800a02c:	f000 fdf4 	bl	800ac18 <_sbrk_r>
 800a030:	4581      	cmp	r9, r0
 800a032:	d142      	bne.n	800a0ba <_malloc_r+0xea>
 800a034:	6821      	ldr	r1, [r4, #0]
 800a036:	1a6d      	subs	r5, r5, r1
 800a038:	4629      	mov	r1, r5
 800a03a:	4630      	mov	r0, r6
 800a03c:	f7ff ffa6 	bl	8009f8c <sbrk_aligned>
 800a040:	3001      	adds	r0, #1
 800a042:	d03a      	beq.n	800a0ba <_malloc_r+0xea>
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	442b      	add	r3, r5
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	f8d8 3000 	ldr.w	r3, [r8]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	bb62      	cbnz	r2, 800a0ac <_malloc_r+0xdc>
 800a052:	f8c8 7000 	str.w	r7, [r8]
 800a056:	e00f      	b.n	800a078 <_malloc_r+0xa8>
 800a058:	6822      	ldr	r2, [r4, #0]
 800a05a:	1b52      	subs	r2, r2, r5
 800a05c:	d420      	bmi.n	800a0a0 <_malloc_r+0xd0>
 800a05e:	2a0b      	cmp	r2, #11
 800a060:	d917      	bls.n	800a092 <_malloc_r+0xc2>
 800a062:	1961      	adds	r1, r4, r5
 800a064:	42a3      	cmp	r3, r4
 800a066:	6025      	str	r5, [r4, #0]
 800a068:	bf18      	it	ne
 800a06a:	6059      	strne	r1, [r3, #4]
 800a06c:	6863      	ldr	r3, [r4, #4]
 800a06e:	bf08      	it	eq
 800a070:	f8c8 1000 	streq.w	r1, [r8]
 800a074:	5162      	str	r2, [r4, r5]
 800a076:	604b      	str	r3, [r1, #4]
 800a078:	4630      	mov	r0, r6
 800a07a:	f000 f82f 	bl	800a0dc <__malloc_unlock>
 800a07e:	f104 000b 	add.w	r0, r4, #11
 800a082:	1d23      	adds	r3, r4, #4
 800a084:	f020 0007 	bic.w	r0, r0, #7
 800a088:	1ac2      	subs	r2, r0, r3
 800a08a:	bf1c      	itt	ne
 800a08c:	1a1b      	subne	r3, r3, r0
 800a08e:	50a3      	strne	r3, [r4, r2]
 800a090:	e7af      	b.n	8009ff2 <_malloc_r+0x22>
 800a092:	6862      	ldr	r2, [r4, #4]
 800a094:	42a3      	cmp	r3, r4
 800a096:	bf0c      	ite	eq
 800a098:	f8c8 2000 	streq.w	r2, [r8]
 800a09c:	605a      	strne	r2, [r3, #4]
 800a09e:	e7eb      	b.n	800a078 <_malloc_r+0xa8>
 800a0a0:	4623      	mov	r3, r4
 800a0a2:	6864      	ldr	r4, [r4, #4]
 800a0a4:	e7ae      	b.n	800a004 <_malloc_r+0x34>
 800a0a6:	463c      	mov	r4, r7
 800a0a8:	687f      	ldr	r7, [r7, #4]
 800a0aa:	e7b6      	b.n	800a01a <_malloc_r+0x4a>
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	42a3      	cmp	r3, r4
 800a0b2:	d1fb      	bne.n	800a0ac <_malloc_r+0xdc>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	6053      	str	r3, [r2, #4]
 800a0b8:	e7de      	b.n	800a078 <_malloc_r+0xa8>
 800a0ba:	230c      	movs	r3, #12
 800a0bc:	6033      	str	r3, [r6, #0]
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f000 f80c 	bl	800a0dc <__malloc_unlock>
 800a0c4:	e794      	b.n	8009ff0 <_malloc_r+0x20>
 800a0c6:	6005      	str	r5, [r0, #0]
 800a0c8:	e7d6      	b.n	800a078 <_malloc_r+0xa8>
 800a0ca:	bf00      	nop
 800a0cc:	20000d3c 	.word	0x20000d3c

0800a0d0 <__malloc_lock>:
 800a0d0:	4801      	ldr	r0, [pc, #4]	@ (800a0d8 <__malloc_lock+0x8>)
 800a0d2:	f7ff b8a0 	b.w	8009216 <__retarget_lock_acquire_recursive>
 800a0d6:	bf00      	nop
 800a0d8:	20000d34 	.word	0x20000d34

0800a0dc <__malloc_unlock>:
 800a0dc:	4801      	ldr	r0, [pc, #4]	@ (800a0e4 <__malloc_unlock+0x8>)
 800a0de:	f7ff b89b 	b.w	8009218 <__retarget_lock_release_recursive>
 800a0e2:	bf00      	nop
 800a0e4:	20000d34 	.word	0x20000d34

0800a0e8 <_Balloc>:
 800a0e8:	b570      	push	{r4, r5, r6, lr}
 800a0ea:	69c6      	ldr	r6, [r0, #28]
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	460d      	mov	r5, r1
 800a0f0:	b976      	cbnz	r6, 800a110 <_Balloc+0x28>
 800a0f2:	2010      	movs	r0, #16
 800a0f4:	f7ff ff42 	bl	8009f7c <malloc>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	61e0      	str	r0, [r4, #28]
 800a0fc:	b920      	cbnz	r0, 800a108 <_Balloc+0x20>
 800a0fe:	4b18      	ldr	r3, [pc, #96]	@ (800a160 <_Balloc+0x78>)
 800a100:	4818      	ldr	r0, [pc, #96]	@ (800a164 <_Balloc+0x7c>)
 800a102:	216b      	movs	r1, #107	@ 0x6b
 800a104:	f000 fd98 	bl	800ac38 <__assert_func>
 800a108:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a10c:	6006      	str	r6, [r0, #0]
 800a10e:	60c6      	str	r6, [r0, #12]
 800a110:	69e6      	ldr	r6, [r4, #28]
 800a112:	68f3      	ldr	r3, [r6, #12]
 800a114:	b183      	cbz	r3, 800a138 <_Balloc+0x50>
 800a116:	69e3      	ldr	r3, [r4, #28]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a11e:	b9b8      	cbnz	r0, 800a150 <_Balloc+0x68>
 800a120:	2101      	movs	r1, #1
 800a122:	fa01 f605 	lsl.w	r6, r1, r5
 800a126:	1d72      	adds	r2, r6, #5
 800a128:	0092      	lsls	r2, r2, #2
 800a12a:	4620      	mov	r0, r4
 800a12c:	f000 fda2 	bl	800ac74 <_calloc_r>
 800a130:	b160      	cbz	r0, 800a14c <_Balloc+0x64>
 800a132:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a136:	e00e      	b.n	800a156 <_Balloc+0x6e>
 800a138:	2221      	movs	r2, #33	@ 0x21
 800a13a:	2104      	movs	r1, #4
 800a13c:	4620      	mov	r0, r4
 800a13e:	f000 fd99 	bl	800ac74 <_calloc_r>
 800a142:	69e3      	ldr	r3, [r4, #28]
 800a144:	60f0      	str	r0, [r6, #12]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1e4      	bne.n	800a116 <_Balloc+0x2e>
 800a14c:	2000      	movs	r0, #0
 800a14e:	bd70      	pop	{r4, r5, r6, pc}
 800a150:	6802      	ldr	r2, [r0, #0]
 800a152:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a156:	2300      	movs	r3, #0
 800a158:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a15c:	e7f7      	b.n	800a14e <_Balloc+0x66>
 800a15e:	bf00      	nop
 800a160:	0800b77d 	.word	0x0800b77d
 800a164:	0800b7fd 	.word	0x0800b7fd

0800a168 <_Bfree>:
 800a168:	b570      	push	{r4, r5, r6, lr}
 800a16a:	69c6      	ldr	r6, [r0, #28]
 800a16c:	4605      	mov	r5, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	b976      	cbnz	r6, 800a190 <_Bfree+0x28>
 800a172:	2010      	movs	r0, #16
 800a174:	f7ff ff02 	bl	8009f7c <malloc>
 800a178:	4602      	mov	r2, r0
 800a17a:	61e8      	str	r0, [r5, #28]
 800a17c:	b920      	cbnz	r0, 800a188 <_Bfree+0x20>
 800a17e:	4b09      	ldr	r3, [pc, #36]	@ (800a1a4 <_Bfree+0x3c>)
 800a180:	4809      	ldr	r0, [pc, #36]	@ (800a1a8 <_Bfree+0x40>)
 800a182:	218f      	movs	r1, #143	@ 0x8f
 800a184:	f000 fd58 	bl	800ac38 <__assert_func>
 800a188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a18c:	6006      	str	r6, [r0, #0]
 800a18e:	60c6      	str	r6, [r0, #12]
 800a190:	b13c      	cbz	r4, 800a1a2 <_Bfree+0x3a>
 800a192:	69eb      	ldr	r3, [r5, #28]
 800a194:	6862      	ldr	r2, [r4, #4]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a19c:	6021      	str	r1, [r4, #0]
 800a19e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}
 800a1a4:	0800b77d 	.word	0x0800b77d
 800a1a8:	0800b7fd 	.word	0x0800b7fd

0800a1ac <__multadd>:
 800a1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b0:	690d      	ldr	r5, [r1, #16]
 800a1b2:	4607      	mov	r7, r0
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	461e      	mov	r6, r3
 800a1b8:	f101 0c14 	add.w	ip, r1, #20
 800a1bc:	2000      	movs	r0, #0
 800a1be:	f8dc 3000 	ldr.w	r3, [ip]
 800a1c2:	b299      	uxth	r1, r3
 800a1c4:	fb02 6101 	mla	r1, r2, r1, r6
 800a1c8:	0c1e      	lsrs	r6, r3, #16
 800a1ca:	0c0b      	lsrs	r3, r1, #16
 800a1cc:	fb02 3306 	mla	r3, r2, r6, r3
 800a1d0:	b289      	uxth	r1, r1
 800a1d2:	3001      	adds	r0, #1
 800a1d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1d8:	4285      	cmp	r5, r0
 800a1da:	f84c 1b04 	str.w	r1, [ip], #4
 800a1de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1e2:	dcec      	bgt.n	800a1be <__multadd+0x12>
 800a1e4:	b30e      	cbz	r6, 800a22a <__multadd+0x7e>
 800a1e6:	68a3      	ldr	r3, [r4, #8]
 800a1e8:	42ab      	cmp	r3, r5
 800a1ea:	dc19      	bgt.n	800a220 <__multadd+0x74>
 800a1ec:	6861      	ldr	r1, [r4, #4]
 800a1ee:	4638      	mov	r0, r7
 800a1f0:	3101      	adds	r1, #1
 800a1f2:	f7ff ff79 	bl	800a0e8 <_Balloc>
 800a1f6:	4680      	mov	r8, r0
 800a1f8:	b928      	cbnz	r0, 800a206 <__multadd+0x5a>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	4b0c      	ldr	r3, [pc, #48]	@ (800a230 <__multadd+0x84>)
 800a1fe:	480d      	ldr	r0, [pc, #52]	@ (800a234 <__multadd+0x88>)
 800a200:	21ba      	movs	r1, #186	@ 0xba
 800a202:	f000 fd19 	bl	800ac38 <__assert_func>
 800a206:	6922      	ldr	r2, [r4, #16]
 800a208:	3202      	adds	r2, #2
 800a20a:	f104 010c 	add.w	r1, r4, #12
 800a20e:	0092      	lsls	r2, r2, #2
 800a210:	300c      	adds	r0, #12
 800a212:	f7ff f802 	bl	800921a <memcpy>
 800a216:	4621      	mov	r1, r4
 800a218:	4638      	mov	r0, r7
 800a21a:	f7ff ffa5 	bl	800a168 <_Bfree>
 800a21e:	4644      	mov	r4, r8
 800a220:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a224:	3501      	adds	r5, #1
 800a226:	615e      	str	r6, [r3, #20]
 800a228:	6125      	str	r5, [r4, #16]
 800a22a:	4620      	mov	r0, r4
 800a22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a230:	0800b7ec 	.word	0x0800b7ec
 800a234:	0800b7fd 	.word	0x0800b7fd

0800a238 <__hi0bits>:
 800a238:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a23c:	4603      	mov	r3, r0
 800a23e:	bf36      	itet	cc
 800a240:	0403      	lslcc	r3, r0, #16
 800a242:	2000      	movcs	r0, #0
 800a244:	2010      	movcc	r0, #16
 800a246:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a24a:	bf3c      	itt	cc
 800a24c:	021b      	lslcc	r3, r3, #8
 800a24e:	3008      	addcc	r0, #8
 800a250:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a254:	bf3c      	itt	cc
 800a256:	011b      	lslcc	r3, r3, #4
 800a258:	3004      	addcc	r0, #4
 800a25a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a25e:	bf3c      	itt	cc
 800a260:	009b      	lslcc	r3, r3, #2
 800a262:	3002      	addcc	r0, #2
 800a264:	2b00      	cmp	r3, #0
 800a266:	db05      	blt.n	800a274 <__hi0bits+0x3c>
 800a268:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a26c:	f100 0001 	add.w	r0, r0, #1
 800a270:	bf08      	it	eq
 800a272:	2020      	moveq	r0, #32
 800a274:	4770      	bx	lr

0800a276 <__lo0bits>:
 800a276:	6803      	ldr	r3, [r0, #0]
 800a278:	4602      	mov	r2, r0
 800a27a:	f013 0007 	ands.w	r0, r3, #7
 800a27e:	d00b      	beq.n	800a298 <__lo0bits+0x22>
 800a280:	07d9      	lsls	r1, r3, #31
 800a282:	d421      	bmi.n	800a2c8 <__lo0bits+0x52>
 800a284:	0798      	lsls	r0, r3, #30
 800a286:	bf49      	itett	mi
 800a288:	085b      	lsrmi	r3, r3, #1
 800a28a:	089b      	lsrpl	r3, r3, #2
 800a28c:	2001      	movmi	r0, #1
 800a28e:	6013      	strmi	r3, [r2, #0]
 800a290:	bf5c      	itt	pl
 800a292:	6013      	strpl	r3, [r2, #0]
 800a294:	2002      	movpl	r0, #2
 800a296:	4770      	bx	lr
 800a298:	b299      	uxth	r1, r3
 800a29a:	b909      	cbnz	r1, 800a2a0 <__lo0bits+0x2a>
 800a29c:	0c1b      	lsrs	r3, r3, #16
 800a29e:	2010      	movs	r0, #16
 800a2a0:	b2d9      	uxtb	r1, r3
 800a2a2:	b909      	cbnz	r1, 800a2a8 <__lo0bits+0x32>
 800a2a4:	3008      	adds	r0, #8
 800a2a6:	0a1b      	lsrs	r3, r3, #8
 800a2a8:	0719      	lsls	r1, r3, #28
 800a2aa:	bf04      	itt	eq
 800a2ac:	091b      	lsreq	r3, r3, #4
 800a2ae:	3004      	addeq	r0, #4
 800a2b0:	0799      	lsls	r1, r3, #30
 800a2b2:	bf04      	itt	eq
 800a2b4:	089b      	lsreq	r3, r3, #2
 800a2b6:	3002      	addeq	r0, #2
 800a2b8:	07d9      	lsls	r1, r3, #31
 800a2ba:	d403      	bmi.n	800a2c4 <__lo0bits+0x4e>
 800a2bc:	085b      	lsrs	r3, r3, #1
 800a2be:	f100 0001 	add.w	r0, r0, #1
 800a2c2:	d003      	beq.n	800a2cc <__lo0bits+0x56>
 800a2c4:	6013      	str	r3, [r2, #0]
 800a2c6:	4770      	bx	lr
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	4770      	bx	lr
 800a2cc:	2020      	movs	r0, #32
 800a2ce:	4770      	bx	lr

0800a2d0 <__i2b>:
 800a2d0:	b510      	push	{r4, lr}
 800a2d2:	460c      	mov	r4, r1
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	f7ff ff07 	bl	800a0e8 <_Balloc>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	b928      	cbnz	r0, 800a2ea <__i2b+0x1a>
 800a2de:	4b05      	ldr	r3, [pc, #20]	@ (800a2f4 <__i2b+0x24>)
 800a2e0:	4805      	ldr	r0, [pc, #20]	@ (800a2f8 <__i2b+0x28>)
 800a2e2:	f240 1145 	movw	r1, #325	@ 0x145
 800a2e6:	f000 fca7 	bl	800ac38 <__assert_func>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	6144      	str	r4, [r0, #20]
 800a2ee:	6103      	str	r3, [r0, #16]
 800a2f0:	bd10      	pop	{r4, pc}
 800a2f2:	bf00      	nop
 800a2f4:	0800b7ec 	.word	0x0800b7ec
 800a2f8:	0800b7fd 	.word	0x0800b7fd

0800a2fc <__multiply>:
 800a2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a300:	4617      	mov	r7, r2
 800a302:	690a      	ldr	r2, [r1, #16]
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	429a      	cmp	r2, r3
 800a308:	bfa8      	it	ge
 800a30a:	463b      	movge	r3, r7
 800a30c:	4689      	mov	r9, r1
 800a30e:	bfa4      	itt	ge
 800a310:	460f      	movge	r7, r1
 800a312:	4699      	movge	r9, r3
 800a314:	693d      	ldr	r5, [r7, #16]
 800a316:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	6879      	ldr	r1, [r7, #4]
 800a31e:	eb05 060a 	add.w	r6, r5, sl
 800a322:	42b3      	cmp	r3, r6
 800a324:	b085      	sub	sp, #20
 800a326:	bfb8      	it	lt
 800a328:	3101      	addlt	r1, #1
 800a32a:	f7ff fedd 	bl	800a0e8 <_Balloc>
 800a32e:	b930      	cbnz	r0, 800a33e <__multiply+0x42>
 800a330:	4602      	mov	r2, r0
 800a332:	4b41      	ldr	r3, [pc, #260]	@ (800a438 <__multiply+0x13c>)
 800a334:	4841      	ldr	r0, [pc, #260]	@ (800a43c <__multiply+0x140>)
 800a336:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a33a:	f000 fc7d 	bl	800ac38 <__assert_func>
 800a33e:	f100 0414 	add.w	r4, r0, #20
 800a342:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a346:	4623      	mov	r3, r4
 800a348:	2200      	movs	r2, #0
 800a34a:	4573      	cmp	r3, lr
 800a34c:	d320      	bcc.n	800a390 <__multiply+0x94>
 800a34e:	f107 0814 	add.w	r8, r7, #20
 800a352:	f109 0114 	add.w	r1, r9, #20
 800a356:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a35a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a35e:	9302      	str	r3, [sp, #8]
 800a360:	1beb      	subs	r3, r5, r7
 800a362:	3b15      	subs	r3, #21
 800a364:	f023 0303 	bic.w	r3, r3, #3
 800a368:	3304      	adds	r3, #4
 800a36a:	3715      	adds	r7, #21
 800a36c:	42bd      	cmp	r5, r7
 800a36e:	bf38      	it	cc
 800a370:	2304      	movcc	r3, #4
 800a372:	9301      	str	r3, [sp, #4]
 800a374:	9b02      	ldr	r3, [sp, #8]
 800a376:	9103      	str	r1, [sp, #12]
 800a378:	428b      	cmp	r3, r1
 800a37a:	d80c      	bhi.n	800a396 <__multiply+0x9a>
 800a37c:	2e00      	cmp	r6, #0
 800a37e:	dd03      	ble.n	800a388 <__multiply+0x8c>
 800a380:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a384:	2b00      	cmp	r3, #0
 800a386:	d055      	beq.n	800a434 <__multiply+0x138>
 800a388:	6106      	str	r6, [r0, #16]
 800a38a:	b005      	add	sp, #20
 800a38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a390:	f843 2b04 	str.w	r2, [r3], #4
 800a394:	e7d9      	b.n	800a34a <__multiply+0x4e>
 800a396:	f8b1 a000 	ldrh.w	sl, [r1]
 800a39a:	f1ba 0f00 	cmp.w	sl, #0
 800a39e:	d01f      	beq.n	800a3e0 <__multiply+0xe4>
 800a3a0:	46c4      	mov	ip, r8
 800a3a2:	46a1      	mov	r9, r4
 800a3a4:	2700      	movs	r7, #0
 800a3a6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a3aa:	f8d9 3000 	ldr.w	r3, [r9]
 800a3ae:	fa1f fb82 	uxth.w	fp, r2
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a3b8:	443b      	add	r3, r7
 800a3ba:	f8d9 7000 	ldr.w	r7, [r9]
 800a3be:	0c12      	lsrs	r2, r2, #16
 800a3c0:	0c3f      	lsrs	r7, r7, #16
 800a3c2:	fb0a 7202 	mla	r2, sl, r2, r7
 800a3c6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3d0:	4565      	cmp	r5, ip
 800a3d2:	f849 3b04 	str.w	r3, [r9], #4
 800a3d6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a3da:	d8e4      	bhi.n	800a3a6 <__multiply+0xaa>
 800a3dc:	9b01      	ldr	r3, [sp, #4]
 800a3de:	50e7      	str	r7, [r4, r3]
 800a3e0:	9b03      	ldr	r3, [sp, #12]
 800a3e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a3e6:	3104      	adds	r1, #4
 800a3e8:	f1b9 0f00 	cmp.w	r9, #0
 800a3ec:	d020      	beq.n	800a430 <__multiply+0x134>
 800a3ee:	6823      	ldr	r3, [r4, #0]
 800a3f0:	4647      	mov	r7, r8
 800a3f2:	46a4      	mov	ip, r4
 800a3f4:	f04f 0a00 	mov.w	sl, #0
 800a3f8:	f8b7 b000 	ldrh.w	fp, [r7]
 800a3fc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a400:	fb09 220b 	mla	r2, r9, fp, r2
 800a404:	4452      	add	r2, sl
 800a406:	b29b      	uxth	r3, r3
 800a408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a40c:	f84c 3b04 	str.w	r3, [ip], #4
 800a410:	f857 3b04 	ldr.w	r3, [r7], #4
 800a414:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a418:	f8bc 3000 	ldrh.w	r3, [ip]
 800a41c:	fb09 330a 	mla	r3, r9, sl, r3
 800a420:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a424:	42bd      	cmp	r5, r7
 800a426:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a42a:	d8e5      	bhi.n	800a3f8 <__multiply+0xfc>
 800a42c:	9a01      	ldr	r2, [sp, #4]
 800a42e:	50a3      	str	r3, [r4, r2]
 800a430:	3404      	adds	r4, #4
 800a432:	e79f      	b.n	800a374 <__multiply+0x78>
 800a434:	3e01      	subs	r6, #1
 800a436:	e7a1      	b.n	800a37c <__multiply+0x80>
 800a438:	0800b7ec 	.word	0x0800b7ec
 800a43c:	0800b7fd 	.word	0x0800b7fd

0800a440 <__pow5mult>:
 800a440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a444:	4615      	mov	r5, r2
 800a446:	f012 0203 	ands.w	r2, r2, #3
 800a44a:	4607      	mov	r7, r0
 800a44c:	460e      	mov	r6, r1
 800a44e:	d007      	beq.n	800a460 <__pow5mult+0x20>
 800a450:	4c25      	ldr	r4, [pc, #148]	@ (800a4e8 <__pow5mult+0xa8>)
 800a452:	3a01      	subs	r2, #1
 800a454:	2300      	movs	r3, #0
 800a456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a45a:	f7ff fea7 	bl	800a1ac <__multadd>
 800a45e:	4606      	mov	r6, r0
 800a460:	10ad      	asrs	r5, r5, #2
 800a462:	d03d      	beq.n	800a4e0 <__pow5mult+0xa0>
 800a464:	69fc      	ldr	r4, [r7, #28]
 800a466:	b97c      	cbnz	r4, 800a488 <__pow5mult+0x48>
 800a468:	2010      	movs	r0, #16
 800a46a:	f7ff fd87 	bl	8009f7c <malloc>
 800a46e:	4602      	mov	r2, r0
 800a470:	61f8      	str	r0, [r7, #28]
 800a472:	b928      	cbnz	r0, 800a480 <__pow5mult+0x40>
 800a474:	4b1d      	ldr	r3, [pc, #116]	@ (800a4ec <__pow5mult+0xac>)
 800a476:	481e      	ldr	r0, [pc, #120]	@ (800a4f0 <__pow5mult+0xb0>)
 800a478:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a47c:	f000 fbdc 	bl	800ac38 <__assert_func>
 800a480:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a484:	6004      	str	r4, [r0, #0]
 800a486:	60c4      	str	r4, [r0, #12]
 800a488:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a48c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a490:	b94c      	cbnz	r4, 800a4a6 <__pow5mult+0x66>
 800a492:	f240 2171 	movw	r1, #625	@ 0x271
 800a496:	4638      	mov	r0, r7
 800a498:	f7ff ff1a 	bl	800a2d0 <__i2b>
 800a49c:	2300      	movs	r3, #0
 800a49e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	6003      	str	r3, [r0, #0]
 800a4a6:	f04f 0900 	mov.w	r9, #0
 800a4aa:	07eb      	lsls	r3, r5, #31
 800a4ac:	d50a      	bpl.n	800a4c4 <__pow5mult+0x84>
 800a4ae:	4631      	mov	r1, r6
 800a4b0:	4622      	mov	r2, r4
 800a4b2:	4638      	mov	r0, r7
 800a4b4:	f7ff ff22 	bl	800a2fc <__multiply>
 800a4b8:	4631      	mov	r1, r6
 800a4ba:	4680      	mov	r8, r0
 800a4bc:	4638      	mov	r0, r7
 800a4be:	f7ff fe53 	bl	800a168 <_Bfree>
 800a4c2:	4646      	mov	r6, r8
 800a4c4:	106d      	asrs	r5, r5, #1
 800a4c6:	d00b      	beq.n	800a4e0 <__pow5mult+0xa0>
 800a4c8:	6820      	ldr	r0, [r4, #0]
 800a4ca:	b938      	cbnz	r0, 800a4dc <__pow5mult+0x9c>
 800a4cc:	4622      	mov	r2, r4
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	f7ff ff13 	bl	800a2fc <__multiply>
 800a4d6:	6020      	str	r0, [r4, #0]
 800a4d8:	f8c0 9000 	str.w	r9, [r0]
 800a4dc:	4604      	mov	r4, r0
 800a4de:	e7e4      	b.n	800a4aa <__pow5mult+0x6a>
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4e6:	bf00      	nop
 800a4e8:	0800b8b0 	.word	0x0800b8b0
 800a4ec:	0800b77d 	.word	0x0800b77d
 800a4f0:	0800b7fd 	.word	0x0800b7fd

0800a4f4 <__lshift>:
 800a4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f8:	460c      	mov	r4, r1
 800a4fa:	6849      	ldr	r1, [r1, #4]
 800a4fc:	6923      	ldr	r3, [r4, #16]
 800a4fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a502:	68a3      	ldr	r3, [r4, #8]
 800a504:	4607      	mov	r7, r0
 800a506:	4691      	mov	r9, r2
 800a508:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a50c:	f108 0601 	add.w	r6, r8, #1
 800a510:	42b3      	cmp	r3, r6
 800a512:	db0b      	blt.n	800a52c <__lshift+0x38>
 800a514:	4638      	mov	r0, r7
 800a516:	f7ff fde7 	bl	800a0e8 <_Balloc>
 800a51a:	4605      	mov	r5, r0
 800a51c:	b948      	cbnz	r0, 800a532 <__lshift+0x3e>
 800a51e:	4602      	mov	r2, r0
 800a520:	4b28      	ldr	r3, [pc, #160]	@ (800a5c4 <__lshift+0xd0>)
 800a522:	4829      	ldr	r0, [pc, #164]	@ (800a5c8 <__lshift+0xd4>)
 800a524:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a528:	f000 fb86 	bl	800ac38 <__assert_func>
 800a52c:	3101      	adds	r1, #1
 800a52e:	005b      	lsls	r3, r3, #1
 800a530:	e7ee      	b.n	800a510 <__lshift+0x1c>
 800a532:	2300      	movs	r3, #0
 800a534:	f100 0114 	add.w	r1, r0, #20
 800a538:	f100 0210 	add.w	r2, r0, #16
 800a53c:	4618      	mov	r0, r3
 800a53e:	4553      	cmp	r3, sl
 800a540:	db33      	blt.n	800a5aa <__lshift+0xb6>
 800a542:	6920      	ldr	r0, [r4, #16]
 800a544:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a548:	f104 0314 	add.w	r3, r4, #20
 800a54c:	f019 091f 	ands.w	r9, r9, #31
 800a550:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a554:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a558:	d02b      	beq.n	800a5b2 <__lshift+0xbe>
 800a55a:	f1c9 0e20 	rsb	lr, r9, #32
 800a55e:	468a      	mov	sl, r1
 800a560:	2200      	movs	r2, #0
 800a562:	6818      	ldr	r0, [r3, #0]
 800a564:	fa00 f009 	lsl.w	r0, r0, r9
 800a568:	4310      	orrs	r0, r2
 800a56a:	f84a 0b04 	str.w	r0, [sl], #4
 800a56e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a572:	459c      	cmp	ip, r3
 800a574:	fa22 f20e 	lsr.w	r2, r2, lr
 800a578:	d8f3      	bhi.n	800a562 <__lshift+0x6e>
 800a57a:	ebac 0304 	sub.w	r3, ip, r4
 800a57e:	3b15      	subs	r3, #21
 800a580:	f023 0303 	bic.w	r3, r3, #3
 800a584:	3304      	adds	r3, #4
 800a586:	f104 0015 	add.w	r0, r4, #21
 800a58a:	4560      	cmp	r0, ip
 800a58c:	bf88      	it	hi
 800a58e:	2304      	movhi	r3, #4
 800a590:	50ca      	str	r2, [r1, r3]
 800a592:	b10a      	cbz	r2, 800a598 <__lshift+0xa4>
 800a594:	f108 0602 	add.w	r6, r8, #2
 800a598:	3e01      	subs	r6, #1
 800a59a:	4638      	mov	r0, r7
 800a59c:	612e      	str	r6, [r5, #16]
 800a59e:	4621      	mov	r1, r4
 800a5a0:	f7ff fde2 	bl	800a168 <_Bfree>
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	e7c5      	b.n	800a53e <__lshift+0x4a>
 800a5b2:	3904      	subs	r1, #4
 800a5b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5bc:	459c      	cmp	ip, r3
 800a5be:	d8f9      	bhi.n	800a5b4 <__lshift+0xc0>
 800a5c0:	e7ea      	b.n	800a598 <__lshift+0xa4>
 800a5c2:	bf00      	nop
 800a5c4:	0800b7ec 	.word	0x0800b7ec
 800a5c8:	0800b7fd 	.word	0x0800b7fd

0800a5cc <__mcmp>:
 800a5cc:	690a      	ldr	r2, [r1, #16]
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	6900      	ldr	r0, [r0, #16]
 800a5d2:	1a80      	subs	r0, r0, r2
 800a5d4:	b530      	push	{r4, r5, lr}
 800a5d6:	d10e      	bne.n	800a5f6 <__mcmp+0x2a>
 800a5d8:	3314      	adds	r3, #20
 800a5da:	3114      	adds	r1, #20
 800a5dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a5e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a5e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5ec:	4295      	cmp	r5, r2
 800a5ee:	d003      	beq.n	800a5f8 <__mcmp+0x2c>
 800a5f0:	d205      	bcs.n	800a5fe <__mcmp+0x32>
 800a5f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f6:	bd30      	pop	{r4, r5, pc}
 800a5f8:	42a3      	cmp	r3, r4
 800a5fa:	d3f3      	bcc.n	800a5e4 <__mcmp+0x18>
 800a5fc:	e7fb      	b.n	800a5f6 <__mcmp+0x2a>
 800a5fe:	2001      	movs	r0, #1
 800a600:	e7f9      	b.n	800a5f6 <__mcmp+0x2a>
	...

0800a604 <__mdiff>:
 800a604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a608:	4689      	mov	r9, r1
 800a60a:	4606      	mov	r6, r0
 800a60c:	4611      	mov	r1, r2
 800a60e:	4648      	mov	r0, r9
 800a610:	4614      	mov	r4, r2
 800a612:	f7ff ffdb 	bl	800a5cc <__mcmp>
 800a616:	1e05      	subs	r5, r0, #0
 800a618:	d112      	bne.n	800a640 <__mdiff+0x3c>
 800a61a:	4629      	mov	r1, r5
 800a61c:	4630      	mov	r0, r6
 800a61e:	f7ff fd63 	bl	800a0e8 <_Balloc>
 800a622:	4602      	mov	r2, r0
 800a624:	b928      	cbnz	r0, 800a632 <__mdiff+0x2e>
 800a626:	4b3f      	ldr	r3, [pc, #252]	@ (800a724 <__mdiff+0x120>)
 800a628:	f240 2137 	movw	r1, #567	@ 0x237
 800a62c:	483e      	ldr	r0, [pc, #248]	@ (800a728 <__mdiff+0x124>)
 800a62e:	f000 fb03 	bl	800ac38 <__assert_func>
 800a632:	2301      	movs	r3, #1
 800a634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a638:	4610      	mov	r0, r2
 800a63a:	b003      	add	sp, #12
 800a63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a640:	bfbc      	itt	lt
 800a642:	464b      	movlt	r3, r9
 800a644:	46a1      	movlt	r9, r4
 800a646:	4630      	mov	r0, r6
 800a648:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a64c:	bfba      	itte	lt
 800a64e:	461c      	movlt	r4, r3
 800a650:	2501      	movlt	r5, #1
 800a652:	2500      	movge	r5, #0
 800a654:	f7ff fd48 	bl	800a0e8 <_Balloc>
 800a658:	4602      	mov	r2, r0
 800a65a:	b918      	cbnz	r0, 800a664 <__mdiff+0x60>
 800a65c:	4b31      	ldr	r3, [pc, #196]	@ (800a724 <__mdiff+0x120>)
 800a65e:	f240 2145 	movw	r1, #581	@ 0x245
 800a662:	e7e3      	b.n	800a62c <__mdiff+0x28>
 800a664:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a668:	6926      	ldr	r6, [r4, #16]
 800a66a:	60c5      	str	r5, [r0, #12]
 800a66c:	f109 0310 	add.w	r3, r9, #16
 800a670:	f109 0514 	add.w	r5, r9, #20
 800a674:	f104 0e14 	add.w	lr, r4, #20
 800a678:	f100 0b14 	add.w	fp, r0, #20
 800a67c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a680:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	46d9      	mov	r9, fp
 800a688:	f04f 0c00 	mov.w	ip, #0
 800a68c:	9b01      	ldr	r3, [sp, #4]
 800a68e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a692:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a696:	9301      	str	r3, [sp, #4]
 800a698:	fa1f f38a 	uxth.w	r3, sl
 800a69c:	4619      	mov	r1, r3
 800a69e:	b283      	uxth	r3, r0
 800a6a0:	1acb      	subs	r3, r1, r3
 800a6a2:	0c00      	lsrs	r0, r0, #16
 800a6a4:	4463      	add	r3, ip
 800a6a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a6aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a6b4:	4576      	cmp	r6, lr
 800a6b6:	f849 3b04 	str.w	r3, [r9], #4
 800a6ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6be:	d8e5      	bhi.n	800a68c <__mdiff+0x88>
 800a6c0:	1b33      	subs	r3, r6, r4
 800a6c2:	3b15      	subs	r3, #21
 800a6c4:	f023 0303 	bic.w	r3, r3, #3
 800a6c8:	3415      	adds	r4, #21
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	42a6      	cmp	r6, r4
 800a6ce:	bf38      	it	cc
 800a6d0:	2304      	movcc	r3, #4
 800a6d2:	441d      	add	r5, r3
 800a6d4:	445b      	add	r3, fp
 800a6d6:	461e      	mov	r6, r3
 800a6d8:	462c      	mov	r4, r5
 800a6da:	4544      	cmp	r4, r8
 800a6dc:	d30e      	bcc.n	800a6fc <__mdiff+0xf8>
 800a6de:	f108 0103 	add.w	r1, r8, #3
 800a6e2:	1b49      	subs	r1, r1, r5
 800a6e4:	f021 0103 	bic.w	r1, r1, #3
 800a6e8:	3d03      	subs	r5, #3
 800a6ea:	45a8      	cmp	r8, r5
 800a6ec:	bf38      	it	cc
 800a6ee:	2100      	movcc	r1, #0
 800a6f0:	440b      	add	r3, r1
 800a6f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6f6:	b191      	cbz	r1, 800a71e <__mdiff+0x11a>
 800a6f8:	6117      	str	r7, [r2, #16]
 800a6fa:	e79d      	b.n	800a638 <__mdiff+0x34>
 800a6fc:	f854 1b04 	ldr.w	r1, [r4], #4
 800a700:	46e6      	mov	lr, ip
 800a702:	0c08      	lsrs	r0, r1, #16
 800a704:	fa1c fc81 	uxtah	ip, ip, r1
 800a708:	4471      	add	r1, lr
 800a70a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a70e:	b289      	uxth	r1, r1
 800a710:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a714:	f846 1b04 	str.w	r1, [r6], #4
 800a718:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a71c:	e7dd      	b.n	800a6da <__mdiff+0xd6>
 800a71e:	3f01      	subs	r7, #1
 800a720:	e7e7      	b.n	800a6f2 <__mdiff+0xee>
 800a722:	bf00      	nop
 800a724:	0800b7ec 	.word	0x0800b7ec
 800a728:	0800b7fd 	.word	0x0800b7fd

0800a72c <__d2b>:
 800a72c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a730:	460f      	mov	r7, r1
 800a732:	2101      	movs	r1, #1
 800a734:	ec59 8b10 	vmov	r8, r9, d0
 800a738:	4616      	mov	r6, r2
 800a73a:	f7ff fcd5 	bl	800a0e8 <_Balloc>
 800a73e:	4604      	mov	r4, r0
 800a740:	b930      	cbnz	r0, 800a750 <__d2b+0x24>
 800a742:	4602      	mov	r2, r0
 800a744:	4b23      	ldr	r3, [pc, #140]	@ (800a7d4 <__d2b+0xa8>)
 800a746:	4824      	ldr	r0, [pc, #144]	@ (800a7d8 <__d2b+0xac>)
 800a748:	f240 310f 	movw	r1, #783	@ 0x30f
 800a74c:	f000 fa74 	bl	800ac38 <__assert_func>
 800a750:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a754:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a758:	b10d      	cbz	r5, 800a75e <__d2b+0x32>
 800a75a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a75e:	9301      	str	r3, [sp, #4]
 800a760:	f1b8 0300 	subs.w	r3, r8, #0
 800a764:	d023      	beq.n	800a7ae <__d2b+0x82>
 800a766:	4668      	mov	r0, sp
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	f7ff fd84 	bl	800a276 <__lo0bits>
 800a76e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a772:	b1d0      	cbz	r0, 800a7aa <__d2b+0x7e>
 800a774:	f1c0 0320 	rsb	r3, r0, #32
 800a778:	fa02 f303 	lsl.w	r3, r2, r3
 800a77c:	430b      	orrs	r3, r1
 800a77e:	40c2      	lsrs	r2, r0
 800a780:	6163      	str	r3, [r4, #20]
 800a782:	9201      	str	r2, [sp, #4]
 800a784:	9b01      	ldr	r3, [sp, #4]
 800a786:	61a3      	str	r3, [r4, #24]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	bf0c      	ite	eq
 800a78c:	2201      	moveq	r2, #1
 800a78e:	2202      	movne	r2, #2
 800a790:	6122      	str	r2, [r4, #16]
 800a792:	b1a5      	cbz	r5, 800a7be <__d2b+0x92>
 800a794:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a798:	4405      	add	r5, r0
 800a79a:	603d      	str	r5, [r7, #0]
 800a79c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a7a0:	6030      	str	r0, [r6, #0]
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	b003      	add	sp, #12
 800a7a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7aa:	6161      	str	r1, [r4, #20]
 800a7ac:	e7ea      	b.n	800a784 <__d2b+0x58>
 800a7ae:	a801      	add	r0, sp, #4
 800a7b0:	f7ff fd61 	bl	800a276 <__lo0bits>
 800a7b4:	9b01      	ldr	r3, [sp, #4]
 800a7b6:	6163      	str	r3, [r4, #20]
 800a7b8:	3020      	adds	r0, #32
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	e7e8      	b.n	800a790 <__d2b+0x64>
 800a7be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a7c6:	6038      	str	r0, [r7, #0]
 800a7c8:	6918      	ldr	r0, [r3, #16]
 800a7ca:	f7ff fd35 	bl	800a238 <__hi0bits>
 800a7ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7d2:	e7e5      	b.n	800a7a0 <__d2b+0x74>
 800a7d4:	0800b7ec 	.word	0x0800b7ec
 800a7d8:	0800b7fd 	.word	0x0800b7fd

0800a7dc <__ssputs_r>:
 800a7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e0:	688e      	ldr	r6, [r1, #8]
 800a7e2:	461f      	mov	r7, r3
 800a7e4:	42be      	cmp	r6, r7
 800a7e6:	680b      	ldr	r3, [r1, #0]
 800a7e8:	4682      	mov	sl, r0
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	4690      	mov	r8, r2
 800a7ee:	d82d      	bhi.n	800a84c <__ssputs_r+0x70>
 800a7f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a7f8:	d026      	beq.n	800a848 <__ssputs_r+0x6c>
 800a7fa:	6965      	ldr	r5, [r4, #20]
 800a7fc:	6909      	ldr	r1, [r1, #16]
 800a7fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a802:	eba3 0901 	sub.w	r9, r3, r1
 800a806:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a80a:	1c7b      	adds	r3, r7, #1
 800a80c:	444b      	add	r3, r9
 800a80e:	106d      	asrs	r5, r5, #1
 800a810:	429d      	cmp	r5, r3
 800a812:	bf38      	it	cc
 800a814:	461d      	movcc	r5, r3
 800a816:	0553      	lsls	r3, r2, #21
 800a818:	d527      	bpl.n	800a86a <__ssputs_r+0x8e>
 800a81a:	4629      	mov	r1, r5
 800a81c:	f7ff fbd8 	bl	8009fd0 <_malloc_r>
 800a820:	4606      	mov	r6, r0
 800a822:	b360      	cbz	r0, 800a87e <__ssputs_r+0xa2>
 800a824:	6921      	ldr	r1, [r4, #16]
 800a826:	464a      	mov	r2, r9
 800a828:	f7fe fcf7 	bl	800921a <memcpy>
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a832:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a836:	81a3      	strh	r3, [r4, #12]
 800a838:	6126      	str	r6, [r4, #16]
 800a83a:	6165      	str	r5, [r4, #20]
 800a83c:	444e      	add	r6, r9
 800a83e:	eba5 0509 	sub.w	r5, r5, r9
 800a842:	6026      	str	r6, [r4, #0]
 800a844:	60a5      	str	r5, [r4, #8]
 800a846:	463e      	mov	r6, r7
 800a848:	42be      	cmp	r6, r7
 800a84a:	d900      	bls.n	800a84e <__ssputs_r+0x72>
 800a84c:	463e      	mov	r6, r7
 800a84e:	6820      	ldr	r0, [r4, #0]
 800a850:	4632      	mov	r2, r6
 800a852:	4641      	mov	r1, r8
 800a854:	f000 f9c6 	bl	800abe4 <memmove>
 800a858:	68a3      	ldr	r3, [r4, #8]
 800a85a:	1b9b      	subs	r3, r3, r6
 800a85c:	60a3      	str	r3, [r4, #8]
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	4433      	add	r3, r6
 800a862:	6023      	str	r3, [r4, #0]
 800a864:	2000      	movs	r0, #0
 800a866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a86a:	462a      	mov	r2, r5
 800a86c:	f000 fa28 	bl	800acc0 <_realloc_r>
 800a870:	4606      	mov	r6, r0
 800a872:	2800      	cmp	r0, #0
 800a874:	d1e0      	bne.n	800a838 <__ssputs_r+0x5c>
 800a876:	6921      	ldr	r1, [r4, #16]
 800a878:	4650      	mov	r0, sl
 800a87a:	f7ff fb35 	bl	8009ee8 <_free_r>
 800a87e:	230c      	movs	r3, #12
 800a880:	f8ca 3000 	str.w	r3, [sl]
 800a884:	89a3      	ldrh	r3, [r4, #12]
 800a886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a88a:	81a3      	strh	r3, [r4, #12]
 800a88c:	f04f 30ff 	mov.w	r0, #4294967295
 800a890:	e7e9      	b.n	800a866 <__ssputs_r+0x8a>
	...

0800a894 <_svfiprintf_r>:
 800a894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a898:	4698      	mov	r8, r3
 800a89a:	898b      	ldrh	r3, [r1, #12]
 800a89c:	061b      	lsls	r3, r3, #24
 800a89e:	b09d      	sub	sp, #116	@ 0x74
 800a8a0:	4607      	mov	r7, r0
 800a8a2:	460d      	mov	r5, r1
 800a8a4:	4614      	mov	r4, r2
 800a8a6:	d510      	bpl.n	800a8ca <_svfiprintf_r+0x36>
 800a8a8:	690b      	ldr	r3, [r1, #16]
 800a8aa:	b973      	cbnz	r3, 800a8ca <_svfiprintf_r+0x36>
 800a8ac:	2140      	movs	r1, #64	@ 0x40
 800a8ae:	f7ff fb8f 	bl	8009fd0 <_malloc_r>
 800a8b2:	6028      	str	r0, [r5, #0]
 800a8b4:	6128      	str	r0, [r5, #16]
 800a8b6:	b930      	cbnz	r0, 800a8c6 <_svfiprintf_r+0x32>
 800a8b8:	230c      	movs	r3, #12
 800a8ba:	603b      	str	r3, [r7, #0]
 800a8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c0:	b01d      	add	sp, #116	@ 0x74
 800a8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c6:	2340      	movs	r3, #64	@ 0x40
 800a8c8:	616b      	str	r3, [r5, #20]
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8ce:	2320      	movs	r3, #32
 800a8d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8d8:	2330      	movs	r3, #48	@ 0x30
 800a8da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aa78 <_svfiprintf_r+0x1e4>
 800a8de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8e2:	f04f 0901 	mov.w	r9, #1
 800a8e6:	4623      	mov	r3, r4
 800a8e8:	469a      	mov	sl, r3
 800a8ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8ee:	b10a      	cbz	r2, 800a8f4 <_svfiprintf_r+0x60>
 800a8f0:	2a25      	cmp	r2, #37	@ 0x25
 800a8f2:	d1f9      	bne.n	800a8e8 <_svfiprintf_r+0x54>
 800a8f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a8f8:	d00b      	beq.n	800a912 <_svfiprintf_r+0x7e>
 800a8fa:	465b      	mov	r3, fp
 800a8fc:	4622      	mov	r2, r4
 800a8fe:	4629      	mov	r1, r5
 800a900:	4638      	mov	r0, r7
 800a902:	f7ff ff6b 	bl	800a7dc <__ssputs_r>
 800a906:	3001      	adds	r0, #1
 800a908:	f000 80a7 	beq.w	800aa5a <_svfiprintf_r+0x1c6>
 800a90c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a90e:	445a      	add	r2, fp
 800a910:	9209      	str	r2, [sp, #36]	@ 0x24
 800a912:	f89a 3000 	ldrb.w	r3, [sl]
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 809f 	beq.w	800aa5a <_svfiprintf_r+0x1c6>
 800a91c:	2300      	movs	r3, #0
 800a91e:	f04f 32ff 	mov.w	r2, #4294967295
 800a922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a926:	f10a 0a01 	add.w	sl, sl, #1
 800a92a:	9304      	str	r3, [sp, #16]
 800a92c:	9307      	str	r3, [sp, #28]
 800a92e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a932:	931a      	str	r3, [sp, #104]	@ 0x68
 800a934:	4654      	mov	r4, sl
 800a936:	2205      	movs	r2, #5
 800a938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a93c:	484e      	ldr	r0, [pc, #312]	@ (800aa78 <_svfiprintf_r+0x1e4>)
 800a93e:	f7f5 fc77 	bl	8000230 <memchr>
 800a942:	9a04      	ldr	r2, [sp, #16]
 800a944:	b9d8      	cbnz	r0, 800a97e <_svfiprintf_r+0xea>
 800a946:	06d0      	lsls	r0, r2, #27
 800a948:	bf44      	itt	mi
 800a94a:	2320      	movmi	r3, #32
 800a94c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a950:	0711      	lsls	r1, r2, #28
 800a952:	bf44      	itt	mi
 800a954:	232b      	movmi	r3, #43	@ 0x2b
 800a956:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a95a:	f89a 3000 	ldrb.w	r3, [sl]
 800a95e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a960:	d015      	beq.n	800a98e <_svfiprintf_r+0xfa>
 800a962:	9a07      	ldr	r2, [sp, #28]
 800a964:	4654      	mov	r4, sl
 800a966:	2000      	movs	r0, #0
 800a968:	f04f 0c0a 	mov.w	ip, #10
 800a96c:	4621      	mov	r1, r4
 800a96e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a972:	3b30      	subs	r3, #48	@ 0x30
 800a974:	2b09      	cmp	r3, #9
 800a976:	d94b      	bls.n	800aa10 <_svfiprintf_r+0x17c>
 800a978:	b1b0      	cbz	r0, 800a9a8 <_svfiprintf_r+0x114>
 800a97a:	9207      	str	r2, [sp, #28]
 800a97c:	e014      	b.n	800a9a8 <_svfiprintf_r+0x114>
 800a97e:	eba0 0308 	sub.w	r3, r0, r8
 800a982:	fa09 f303 	lsl.w	r3, r9, r3
 800a986:	4313      	orrs	r3, r2
 800a988:	9304      	str	r3, [sp, #16]
 800a98a:	46a2      	mov	sl, r4
 800a98c:	e7d2      	b.n	800a934 <_svfiprintf_r+0xa0>
 800a98e:	9b03      	ldr	r3, [sp, #12]
 800a990:	1d19      	adds	r1, r3, #4
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	9103      	str	r1, [sp, #12]
 800a996:	2b00      	cmp	r3, #0
 800a998:	bfbb      	ittet	lt
 800a99a:	425b      	neglt	r3, r3
 800a99c:	f042 0202 	orrlt.w	r2, r2, #2
 800a9a0:	9307      	strge	r3, [sp, #28]
 800a9a2:	9307      	strlt	r3, [sp, #28]
 800a9a4:	bfb8      	it	lt
 800a9a6:	9204      	strlt	r2, [sp, #16]
 800a9a8:	7823      	ldrb	r3, [r4, #0]
 800a9aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9ac:	d10a      	bne.n	800a9c4 <_svfiprintf_r+0x130>
 800a9ae:	7863      	ldrb	r3, [r4, #1]
 800a9b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9b2:	d132      	bne.n	800aa1a <_svfiprintf_r+0x186>
 800a9b4:	9b03      	ldr	r3, [sp, #12]
 800a9b6:	1d1a      	adds	r2, r3, #4
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	9203      	str	r2, [sp, #12]
 800a9bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9c0:	3402      	adds	r4, #2
 800a9c2:	9305      	str	r3, [sp, #20]
 800a9c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aa88 <_svfiprintf_r+0x1f4>
 800a9c8:	7821      	ldrb	r1, [r4, #0]
 800a9ca:	2203      	movs	r2, #3
 800a9cc:	4650      	mov	r0, sl
 800a9ce:	f7f5 fc2f 	bl	8000230 <memchr>
 800a9d2:	b138      	cbz	r0, 800a9e4 <_svfiprintf_r+0x150>
 800a9d4:	9b04      	ldr	r3, [sp, #16]
 800a9d6:	eba0 000a 	sub.w	r0, r0, sl
 800a9da:	2240      	movs	r2, #64	@ 0x40
 800a9dc:	4082      	lsls	r2, r0
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	3401      	adds	r4, #1
 800a9e2:	9304      	str	r3, [sp, #16]
 800a9e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e8:	4824      	ldr	r0, [pc, #144]	@ (800aa7c <_svfiprintf_r+0x1e8>)
 800a9ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9ee:	2206      	movs	r2, #6
 800a9f0:	f7f5 fc1e 	bl	8000230 <memchr>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d036      	beq.n	800aa66 <_svfiprintf_r+0x1d2>
 800a9f8:	4b21      	ldr	r3, [pc, #132]	@ (800aa80 <_svfiprintf_r+0x1ec>)
 800a9fa:	bb1b      	cbnz	r3, 800aa44 <_svfiprintf_r+0x1b0>
 800a9fc:	9b03      	ldr	r3, [sp, #12]
 800a9fe:	3307      	adds	r3, #7
 800aa00:	f023 0307 	bic.w	r3, r3, #7
 800aa04:	3308      	adds	r3, #8
 800aa06:	9303      	str	r3, [sp, #12]
 800aa08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa0a:	4433      	add	r3, r6
 800aa0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa0e:	e76a      	b.n	800a8e6 <_svfiprintf_r+0x52>
 800aa10:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa14:	460c      	mov	r4, r1
 800aa16:	2001      	movs	r0, #1
 800aa18:	e7a8      	b.n	800a96c <_svfiprintf_r+0xd8>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	3401      	adds	r4, #1
 800aa1e:	9305      	str	r3, [sp, #20]
 800aa20:	4619      	mov	r1, r3
 800aa22:	f04f 0c0a 	mov.w	ip, #10
 800aa26:	4620      	mov	r0, r4
 800aa28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa2c:	3a30      	subs	r2, #48	@ 0x30
 800aa2e:	2a09      	cmp	r2, #9
 800aa30:	d903      	bls.n	800aa3a <_svfiprintf_r+0x1a6>
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d0c6      	beq.n	800a9c4 <_svfiprintf_r+0x130>
 800aa36:	9105      	str	r1, [sp, #20]
 800aa38:	e7c4      	b.n	800a9c4 <_svfiprintf_r+0x130>
 800aa3a:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa3e:	4604      	mov	r4, r0
 800aa40:	2301      	movs	r3, #1
 800aa42:	e7f0      	b.n	800aa26 <_svfiprintf_r+0x192>
 800aa44:	ab03      	add	r3, sp, #12
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	462a      	mov	r2, r5
 800aa4a:	4b0e      	ldr	r3, [pc, #56]	@ (800aa84 <_svfiprintf_r+0x1f0>)
 800aa4c:	a904      	add	r1, sp, #16
 800aa4e:	4638      	mov	r0, r7
 800aa50:	f7fd fe60 	bl	8008714 <_printf_float>
 800aa54:	1c42      	adds	r2, r0, #1
 800aa56:	4606      	mov	r6, r0
 800aa58:	d1d6      	bne.n	800aa08 <_svfiprintf_r+0x174>
 800aa5a:	89ab      	ldrh	r3, [r5, #12]
 800aa5c:	065b      	lsls	r3, r3, #25
 800aa5e:	f53f af2d 	bmi.w	800a8bc <_svfiprintf_r+0x28>
 800aa62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa64:	e72c      	b.n	800a8c0 <_svfiprintf_r+0x2c>
 800aa66:	ab03      	add	r3, sp, #12
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	462a      	mov	r2, r5
 800aa6c:	4b05      	ldr	r3, [pc, #20]	@ (800aa84 <_svfiprintf_r+0x1f0>)
 800aa6e:	a904      	add	r1, sp, #16
 800aa70:	4638      	mov	r0, r7
 800aa72:	f7fe f8e7 	bl	8008c44 <_printf_i>
 800aa76:	e7ed      	b.n	800aa54 <_svfiprintf_r+0x1c0>
 800aa78:	0800b856 	.word	0x0800b856
 800aa7c:	0800b860 	.word	0x0800b860
 800aa80:	08008715 	.word	0x08008715
 800aa84:	0800a7dd 	.word	0x0800a7dd
 800aa88:	0800b85c 	.word	0x0800b85c

0800aa8c <__sflush_r>:
 800aa8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa94:	0716      	lsls	r6, r2, #28
 800aa96:	4605      	mov	r5, r0
 800aa98:	460c      	mov	r4, r1
 800aa9a:	d454      	bmi.n	800ab46 <__sflush_r+0xba>
 800aa9c:	684b      	ldr	r3, [r1, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	dc02      	bgt.n	800aaa8 <__sflush_r+0x1c>
 800aaa2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	dd48      	ble.n	800ab3a <__sflush_r+0xae>
 800aaa8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aaaa:	2e00      	cmp	r6, #0
 800aaac:	d045      	beq.n	800ab3a <__sflush_r+0xae>
 800aaae:	2300      	movs	r3, #0
 800aab0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aab4:	682f      	ldr	r7, [r5, #0]
 800aab6:	6a21      	ldr	r1, [r4, #32]
 800aab8:	602b      	str	r3, [r5, #0]
 800aaba:	d030      	beq.n	800ab1e <__sflush_r+0x92>
 800aabc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	0759      	lsls	r1, r3, #29
 800aac2:	d505      	bpl.n	800aad0 <__sflush_r+0x44>
 800aac4:	6863      	ldr	r3, [r4, #4]
 800aac6:	1ad2      	subs	r2, r2, r3
 800aac8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aaca:	b10b      	cbz	r3, 800aad0 <__sflush_r+0x44>
 800aacc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aace:	1ad2      	subs	r2, r2, r3
 800aad0:	2300      	movs	r3, #0
 800aad2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aad4:	6a21      	ldr	r1, [r4, #32]
 800aad6:	4628      	mov	r0, r5
 800aad8:	47b0      	blx	r6
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	d106      	bne.n	800aaee <__sflush_r+0x62>
 800aae0:	6829      	ldr	r1, [r5, #0]
 800aae2:	291d      	cmp	r1, #29
 800aae4:	d82b      	bhi.n	800ab3e <__sflush_r+0xb2>
 800aae6:	4a2a      	ldr	r2, [pc, #168]	@ (800ab90 <__sflush_r+0x104>)
 800aae8:	40ca      	lsrs	r2, r1
 800aaea:	07d6      	lsls	r6, r2, #31
 800aaec:	d527      	bpl.n	800ab3e <__sflush_r+0xb2>
 800aaee:	2200      	movs	r2, #0
 800aaf0:	6062      	str	r2, [r4, #4]
 800aaf2:	04d9      	lsls	r1, r3, #19
 800aaf4:	6922      	ldr	r2, [r4, #16]
 800aaf6:	6022      	str	r2, [r4, #0]
 800aaf8:	d504      	bpl.n	800ab04 <__sflush_r+0x78>
 800aafa:	1c42      	adds	r2, r0, #1
 800aafc:	d101      	bne.n	800ab02 <__sflush_r+0x76>
 800aafe:	682b      	ldr	r3, [r5, #0]
 800ab00:	b903      	cbnz	r3, 800ab04 <__sflush_r+0x78>
 800ab02:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab06:	602f      	str	r7, [r5, #0]
 800ab08:	b1b9      	cbz	r1, 800ab3a <__sflush_r+0xae>
 800ab0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab0e:	4299      	cmp	r1, r3
 800ab10:	d002      	beq.n	800ab18 <__sflush_r+0x8c>
 800ab12:	4628      	mov	r0, r5
 800ab14:	f7ff f9e8 	bl	8009ee8 <_free_r>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab1c:	e00d      	b.n	800ab3a <__sflush_r+0xae>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	4628      	mov	r0, r5
 800ab22:	47b0      	blx	r6
 800ab24:	4602      	mov	r2, r0
 800ab26:	1c50      	adds	r0, r2, #1
 800ab28:	d1c9      	bne.n	800aabe <__sflush_r+0x32>
 800ab2a:	682b      	ldr	r3, [r5, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d0c6      	beq.n	800aabe <__sflush_r+0x32>
 800ab30:	2b1d      	cmp	r3, #29
 800ab32:	d001      	beq.n	800ab38 <__sflush_r+0xac>
 800ab34:	2b16      	cmp	r3, #22
 800ab36:	d11e      	bne.n	800ab76 <__sflush_r+0xea>
 800ab38:	602f      	str	r7, [r5, #0]
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	e022      	b.n	800ab84 <__sflush_r+0xf8>
 800ab3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab42:	b21b      	sxth	r3, r3
 800ab44:	e01b      	b.n	800ab7e <__sflush_r+0xf2>
 800ab46:	690f      	ldr	r7, [r1, #16]
 800ab48:	2f00      	cmp	r7, #0
 800ab4a:	d0f6      	beq.n	800ab3a <__sflush_r+0xae>
 800ab4c:	0793      	lsls	r3, r2, #30
 800ab4e:	680e      	ldr	r6, [r1, #0]
 800ab50:	bf08      	it	eq
 800ab52:	694b      	ldreq	r3, [r1, #20]
 800ab54:	600f      	str	r7, [r1, #0]
 800ab56:	bf18      	it	ne
 800ab58:	2300      	movne	r3, #0
 800ab5a:	eba6 0807 	sub.w	r8, r6, r7
 800ab5e:	608b      	str	r3, [r1, #8]
 800ab60:	f1b8 0f00 	cmp.w	r8, #0
 800ab64:	dde9      	ble.n	800ab3a <__sflush_r+0xae>
 800ab66:	6a21      	ldr	r1, [r4, #32]
 800ab68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ab6a:	4643      	mov	r3, r8
 800ab6c:	463a      	mov	r2, r7
 800ab6e:	4628      	mov	r0, r5
 800ab70:	47b0      	blx	r6
 800ab72:	2800      	cmp	r0, #0
 800ab74:	dc08      	bgt.n	800ab88 <__sflush_r+0xfc>
 800ab76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab7e:	81a3      	strh	r3, [r4, #12]
 800ab80:	f04f 30ff 	mov.w	r0, #4294967295
 800ab84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab88:	4407      	add	r7, r0
 800ab8a:	eba8 0800 	sub.w	r8, r8, r0
 800ab8e:	e7e7      	b.n	800ab60 <__sflush_r+0xd4>
 800ab90:	20400001 	.word	0x20400001

0800ab94 <_fflush_r>:
 800ab94:	b538      	push	{r3, r4, r5, lr}
 800ab96:	690b      	ldr	r3, [r1, #16]
 800ab98:	4605      	mov	r5, r0
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	b913      	cbnz	r3, 800aba4 <_fflush_r+0x10>
 800ab9e:	2500      	movs	r5, #0
 800aba0:	4628      	mov	r0, r5
 800aba2:	bd38      	pop	{r3, r4, r5, pc}
 800aba4:	b118      	cbz	r0, 800abae <_fflush_r+0x1a>
 800aba6:	6a03      	ldr	r3, [r0, #32]
 800aba8:	b90b      	cbnz	r3, 800abae <_fflush_r+0x1a>
 800abaa:	f7fe f9f5 	bl	8008f98 <__sinit>
 800abae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d0f3      	beq.n	800ab9e <_fflush_r+0xa>
 800abb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800abb8:	07d0      	lsls	r0, r2, #31
 800abba:	d404      	bmi.n	800abc6 <_fflush_r+0x32>
 800abbc:	0599      	lsls	r1, r3, #22
 800abbe:	d402      	bmi.n	800abc6 <_fflush_r+0x32>
 800abc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abc2:	f7fe fb28 	bl	8009216 <__retarget_lock_acquire_recursive>
 800abc6:	4628      	mov	r0, r5
 800abc8:	4621      	mov	r1, r4
 800abca:	f7ff ff5f 	bl	800aa8c <__sflush_r>
 800abce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abd0:	07da      	lsls	r2, r3, #31
 800abd2:	4605      	mov	r5, r0
 800abd4:	d4e4      	bmi.n	800aba0 <_fflush_r+0xc>
 800abd6:	89a3      	ldrh	r3, [r4, #12]
 800abd8:	059b      	lsls	r3, r3, #22
 800abda:	d4e1      	bmi.n	800aba0 <_fflush_r+0xc>
 800abdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abde:	f7fe fb1b 	bl	8009218 <__retarget_lock_release_recursive>
 800abe2:	e7dd      	b.n	800aba0 <_fflush_r+0xc>

0800abe4 <memmove>:
 800abe4:	4288      	cmp	r0, r1
 800abe6:	b510      	push	{r4, lr}
 800abe8:	eb01 0402 	add.w	r4, r1, r2
 800abec:	d902      	bls.n	800abf4 <memmove+0x10>
 800abee:	4284      	cmp	r4, r0
 800abf0:	4623      	mov	r3, r4
 800abf2:	d807      	bhi.n	800ac04 <memmove+0x20>
 800abf4:	1e43      	subs	r3, r0, #1
 800abf6:	42a1      	cmp	r1, r4
 800abf8:	d008      	beq.n	800ac0c <memmove+0x28>
 800abfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac02:	e7f8      	b.n	800abf6 <memmove+0x12>
 800ac04:	4402      	add	r2, r0
 800ac06:	4601      	mov	r1, r0
 800ac08:	428a      	cmp	r2, r1
 800ac0a:	d100      	bne.n	800ac0e <memmove+0x2a>
 800ac0c:	bd10      	pop	{r4, pc}
 800ac0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac16:	e7f7      	b.n	800ac08 <memmove+0x24>

0800ac18 <_sbrk_r>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	4d06      	ldr	r5, [pc, #24]	@ (800ac34 <_sbrk_r+0x1c>)
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	4604      	mov	r4, r0
 800ac20:	4608      	mov	r0, r1
 800ac22:	602b      	str	r3, [r5, #0]
 800ac24:	f7f8 fa06 	bl	8003034 <_sbrk>
 800ac28:	1c43      	adds	r3, r0, #1
 800ac2a:	d102      	bne.n	800ac32 <_sbrk_r+0x1a>
 800ac2c:	682b      	ldr	r3, [r5, #0]
 800ac2e:	b103      	cbz	r3, 800ac32 <_sbrk_r+0x1a>
 800ac30:	6023      	str	r3, [r4, #0]
 800ac32:	bd38      	pop	{r3, r4, r5, pc}
 800ac34:	20000d30 	.word	0x20000d30

0800ac38 <__assert_func>:
 800ac38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac3a:	4614      	mov	r4, r2
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	4b09      	ldr	r3, [pc, #36]	@ (800ac64 <__assert_func+0x2c>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4605      	mov	r5, r0
 800ac44:	68d8      	ldr	r0, [r3, #12]
 800ac46:	b14c      	cbz	r4, 800ac5c <__assert_func+0x24>
 800ac48:	4b07      	ldr	r3, [pc, #28]	@ (800ac68 <__assert_func+0x30>)
 800ac4a:	9100      	str	r1, [sp, #0]
 800ac4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac50:	4906      	ldr	r1, [pc, #24]	@ (800ac6c <__assert_func+0x34>)
 800ac52:	462b      	mov	r3, r5
 800ac54:	f000 f870 	bl	800ad38 <fiprintf>
 800ac58:	f000 f880 	bl	800ad5c <abort>
 800ac5c:	4b04      	ldr	r3, [pc, #16]	@ (800ac70 <__assert_func+0x38>)
 800ac5e:	461c      	mov	r4, r3
 800ac60:	e7f3      	b.n	800ac4a <__assert_func+0x12>
 800ac62:	bf00      	nop
 800ac64:	20000018 	.word	0x20000018
 800ac68:	0800b871 	.word	0x0800b871
 800ac6c:	0800b87e 	.word	0x0800b87e
 800ac70:	0800b8ac 	.word	0x0800b8ac

0800ac74 <_calloc_r>:
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	fba1 5402 	umull	r5, r4, r1, r2
 800ac7a:	b934      	cbnz	r4, 800ac8a <_calloc_r+0x16>
 800ac7c:	4629      	mov	r1, r5
 800ac7e:	f7ff f9a7 	bl	8009fd0 <_malloc_r>
 800ac82:	4606      	mov	r6, r0
 800ac84:	b928      	cbnz	r0, 800ac92 <_calloc_r+0x1e>
 800ac86:	4630      	mov	r0, r6
 800ac88:	bd70      	pop	{r4, r5, r6, pc}
 800ac8a:	220c      	movs	r2, #12
 800ac8c:	6002      	str	r2, [r0, #0]
 800ac8e:	2600      	movs	r6, #0
 800ac90:	e7f9      	b.n	800ac86 <_calloc_r+0x12>
 800ac92:	462a      	mov	r2, r5
 800ac94:	4621      	mov	r1, r4
 800ac96:	f7fe fa2e 	bl	80090f6 <memset>
 800ac9a:	e7f4      	b.n	800ac86 <_calloc_r+0x12>

0800ac9c <__ascii_mbtowc>:
 800ac9c:	b082      	sub	sp, #8
 800ac9e:	b901      	cbnz	r1, 800aca2 <__ascii_mbtowc+0x6>
 800aca0:	a901      	add	r1, sp, #4
 800aca2:	b142      	cbz	r2, 800acb6 <__ascii_mbtowc+0x1a>
 800aca4:	b14b      	cbz	r3, 800acba <__ascii_mbtowc+0x1e>
 800aca6:	7813      	ldrb	r3, [r2, #0]
 800aca8:	600b      	str	r3, [r1, #0]
 800acaa:	7812      	ldrb	r2, [r2, #0]
 800acac:	1e10      	subs	r0, r2, #0
 800acae:	bf18      	it	ne
 800acb0:	2001      	movne	r0, #1
 800acb2:	b002      	add	sp, #8
 800acb4:	4770      	bx	lr
 800acb6:	4610      	mov	r0, r2
 800acb8:	e7fb      	b.n	800acb2 <__ascii_mbtowc+0x16>
 800acba:	f06f 0001 	mvn.w	r0, #1
 800acbe:	e7f8      	b.n	800acb2 <__ascii_mbtowc+0x16>

0800acc0 <_realloc_r>:
 800acc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acc4:	4607      	mov	r7, r0
 800acc6:	4614      	mov	r4, r2
 800acc8:	460d      	mov	r5, r1
 800acca:	b921      	cbnz	r1, 800acd6 <_realloc_r+0x16>
 800accc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acd0:	4611      	mov	r1, r2
 800acd2:	f7ff b97d 	b.w	8009fd0 <_malloc_r>
 800acd6:	b92a      	cbnz	r2, 800ace4 <_realloc_r+0x24>
 800acd8:	f7ff f906 	bl	8009ee8 <_free_r>
 800acdc:	4625      	mov	r5, r4
 800acde:	4628      	mov	r0, r5
 800ace0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ace4:	f000 f841 	bl	800ad6a <_malloc_usable_size_r>
 800ace8:	4284      	cmp	r4, r0
 800acea:	4606      	mov	r6, r0
 800acec:	d802      	bhi.n	800acf4 <_realloc_r+0x34>
 800acee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800acf2:	d8f4      	bhi.n	800acde <_realloc_r+0x1e>
 800acf4:	4621      	mov	r1, r4
 800acf6:	4638      	mov	r0, r7
 800acf8:	f7ff f96a 	bl	8009fd0 <_malloc_r>
 800acfc:	4680      	mov	r8, r0
 800acfe:	b908      	cbnz	r0, 800ad04 <_realloc_r+0x44>
 800ad00:	4645      	mov	r5, r8
 800ad02:	e7ec      	b.n	800acde <_realloc_r+0x1e>
 800ad04:	42b4      	cmp	r4, r6
 800ad06:	4622      	mov	r2, r4
 800ad08:	4629      	mov	r1, r5
 800ad0a:	bf28      	it	cs
 800ad0c:	4632      	movcs	r2, r6
 800ad0e:	f7fe fa84 	bl	800921a <memcpy>
 800ad12:	4629      	mov	r1, r5
 800ad14:	4638      	mov	r0, r7
 800ad16:	f7ff f8e7 	bl	8009ee8 <_free_r>
 800ad1a:	e7f1      	b.n	800ad00 <_realloc_r+0x40>

0800ad1c <__ascii_wctomb>:
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	4608      	mov	r0, r1
 800ad20:	b141      	cbz	r1, 800ad34 <__ascii_wctomb+0x18>
 800ad22:	2aff      	cmp	r2, #255	@ 0xff
 800ad24:	d904      	bls.n	800ad30 <__ascii_wctomb+0x14>
 800ad26:	228a      	movs	r2, #138	@ 0x8a
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2e:	4770      	bx	lr
 800ad30:	700a      	strb	r2, [r1, #0]
 800ad32:	2001      	movs	r0, #1
 800ad34:	4770      	bx	lr
	...

0800ad38 <fiprintf>:
 800ad38:	b40e      	push	{r1, r2, r3}
 800ad3a:	b503      	push	{r0, r1, lr}
 800ad3c:	4601      	mov	r1, r0
 800ad3e:	ab03      	add	r3, sp, #12
 800ad40:	4805      	ldr	r0, [pc, #20]	@ (800ad58 <fiprintf+0x20>)
 800ad42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad46:	6800      	ldr	r0, [r0, #0]
 800ad48:	9301      	str	r3, [sp, #4]
 800ad4a:	f000 f83f 	bl	800adcc <_vfiprintf_r>
 800ad4e:	b002      	add	sp, #8
 800ad50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad54:	b003      	add	sp, #12
 800ad56:	4770      	bx	lr
 800ad58:	20000018 	.word	0x20000018

0800ad5c <abort>:
 800ad5c:	b508      	push	{r3, lr}
 800ad5e:	2006      	movs	r0, #6
 800ad60:	f000 fa08 	bl	800b174 <raise>
 800ad64:	2001      	movs	r0, #1
 800ad66:	f7f8 f8ed 	bl	8002f44 <_exit>

0800ad6a <_malloc_usable_size_r>:
 800ad6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad6e:	1f18      	subs	r0, r3, #4
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	bfbc      	itt	lt
 800ad74:	580b      	ldrlt	r3, [r1, r0]
 800ad76:	18c0      	addlt	r0, r0, r3
 800ad78:	4770      	bx	lr

0800ad7a <__sfputc_r>:
 800ad7a:	6893      	ldr	r3, [r2, #8]
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	b410      	push	{r4}
 800ad82:	6093      	str	r3, [r2, #8]
 800ad84:	da08      	bge.n	800ad98 <__sfputc_r+0x1e>
 800ad86:	6994      	ldr	r4, [r2, #24]
 800ad88:	42a3      	cmp	r3, r4
 800ad8a:	db01      	blt.n	800ad90 <__sfputc_r+0x16>
 800ad8c:	290a      	cmp	r1, #10
 800ad8e:	d103      	bne.n	800ad98 <__sfputc_r+0x1e>
 800ad90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad94:	f000 b932 	b.w	800affc <__swbuf_r>
 800ad98:	6813      	ldr	r3, [r2, #0]
 800ad9a:	1c58      	adds	r0, r3, #1
 800ad9c:	6010      	str	r0, [r2, #0]
 800ad9e:	7019      	strb	r1, [r3, #0]
 800ada0:	4608      	mov	r0, r1
 800ada2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <__sfputs_r>:
 800ada8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adaa:	4606      	mov	r6, r0
 800adac:	460f      	mov	r7, r1
 800adae:	4614      	mov	r4, r2
 800adb0:	18d5      	adds	r5, r2, r3
 800adb2:	42ac      	cmp	r4, r5
 800adb4:	d101      	bne.n	800adba <__sfputs_r+0x12>
 800adb6:	2000      	movs	r0, #0
 800adb8:	e007      	b.n	800adca <__sfputs_r+0x22>
 800adba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adbe:	463a      	mov	r2, r7
 800adc0:	4630      	mov	r0, r6
 800adc2:	f7ff ffda 	bl	800ad7a <__sfputc_r>
 800adc6:	1c43      	adds	r3, r0, #1
 800adc8:	d1f3      	bne.n	800adb2 <__sfputs_r+0xa>
 800adca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800adcc <_vfiprintf_r>:
 800adcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add0:	460d      	mov	r5, r1
 800add2:	b09d      	sub	sp, #116	@ 0x74
 800add4:	4614      	mov	r4, r2
 800add6:	4698      	mov	r8, r3
 800add8:	4606      	mov	r6, r0
 800adda:	b118      	cbz	r0, 800ade4 <_vfiprintf_r+0x18>
 800addc:	6a03      	ldr	r3, [r0, #32]
 800adde:	b90b      	cbnz	r3, 800ade4 <_vfiprintf_r+0x18>
 800ade0:	f7fe f8da 	bl	8008f98 <__sinit>
 800ade4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ade6:	07d9      	lsls	r1, r3, #31
 800ade8:	d405      	bmi.n	800adf6 <_vfiprintf_r+0x2a>
 800adea:	89ab      	ldrh	r3, [r5, #12]
 800adec:	059a      	lsls	r2, r3, #22
 800adee:	d402      	bmi.n	800adf6 <_vfiprintf_r+0x2a>
 800adf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adf2:	f7fe fa10 	bl	8009216 <__retarget_lock_acquire_recursive>
 800adf6:	89ab      	ldrh	r3, [r5, #12]
 800adf8:	071b      	lsls	r3, r3, #28
 800adfa:	d501      	bpl.n	800ae00 <_vfiprintf_r+0x34>
 800adfc:	692b      	ldr	r3, [r5, #16]
 800adfe:	b99b      	cbnz	r3, 800ae28 <_vfiprintf_r+0x5c>
 800ae00:	4629      	mov	r1, r5
 800ae02:	4630      	mov	r0, r6
 800ae04:	f000 f938 	bl	800b078 <__swsetup_r>
 800ae08:	b170      	cbz	r0, 800ae28 <_vfiprintf_r+0x5c>
 800ae0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae0c:	07dc      	lsls	r4, r3, #31
 800ae0e:	d504      	bpl.n	800ae1a <_vfiprintf_r+0x4e>
 800ae10:	f04f 30ff 	mov.w	r0, #4294967295
 800ae14:	b01d      	add	sp, #116	@ 0x74
 800ae16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1a:	89ab      	ldrh	r3, [r5, #12]
 800ae1c:	0598      	lsls	r0, r3, #22
 800ae1e:	d4f7      	bmi.n	800ae10 <_vfiprintf_r+0x44>
 800ae20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae22:	f7fe f9f9 	bl	8009218 <__retarget_lock_release_recursive>
 800ae26:	e7f3      	b.n	800ae10 <_vfiprintf_r+0x44>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae2c:	2320      	movs	r3, #32
 800ae2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae32:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae36:	2330      	movs	r3, #48	@ 0x30
 800ae38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800afe8 <_vfiprintf_r+0x21c>
 800ae3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae40:	f04f 0901 	mov.w	r9, #1
 800ae44:	4623      	mov	r3, r4
 800ae46:	469a      	mov	sl, r3
 800ae48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae4c:	b10a      	cbz	r2, 800ae52 <_vfiprintf_r+0x86>
 800ae4e:	2a25      	cmp	r2, #37	@ 0x25
 800ae50:	d1f9      	bne.n	800ae46 <_vfiprintf_r+0x7a>
 800ae52:	ebba 0b04 	subs.w	fp, sl, r4
 800ae56:	d00b      	beq.n	800ae70 <_vfiprintf_r+0xa4>
 800ae58:	465b      	mov	r3, fp
 800ae5a:	4622      	mov	r2, r4
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	4630      	mov	r0, r6
 800ae60:	f7ff ffa2 	bl	800ada8 <__sfputs_r>
 800ae64:	3001      	adds	r0, #1
 800ae66:	f000 80a7 	beq.w	800afb8 <_vfiprintf_r+0x1ec>
 800ae6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae6c:	445a      	add	r2, fp
 800ae6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae70:	f89a 3000 	ldrb.w	r3, [sl]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	f000 809f 	beq.w	800afb8 <_vfiprintf_r+0x1ec>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae84:	f10a 0a01 	add.w	sl, sl, #1
 800ae88:	9304      	str	r3, [sp, #16]
 800ae8a:	9307      	str	r3, [sp, #28]
 800ae8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae90:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae92:	4654      	mov	r4, sl
 800ae94:	2205      	movs	r2, #5
 800ae96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae9a:	4853      	ldr	r0, [pc, #332]	@ (800afe8 <_vfiprintf_r+0x21c>)
 800ae9c:	f7f5 f9c8 	bl	8000230 <memchr>
 800aea0:	9a04      	ldr	r2, [sp, #16]
 800aea2:	b9d8      	cbnz	r0, 800aedc <_vfiprintf_r+0x110>
 800aea4:	06d1      	lsls	r1, r2, #27
 800aea6:	bf44      	itt	mi
 800aea8:	2320      	movmi	r3, #32
 800aeaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeae:	0713      	lsls	r3, r2, #28
 800aeb0:	bf44      	itt	mi
 800aeb2:	232b      	movmi	r3, #43	@ 0x2b
 800aeb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeb8:	f89a 3000 	ldrb.w	r3, [sl]
 800aebc:	2b2a      	cmp	r3, #42	@ 0x2a
 800aebe:	d015      	beq.n	800aeec <_vfiprintf_r+0x120>
 800aec0:	9a07      	ldr	r2, [sp, #28]
 800aec2:	4654      	mov	r4, sl
 800aec4:	2000      	movs	r0, #0
 800aec6:	f04f 0c0a 	mov.w	ip, #10
 800aeca:	4621      	mov	r1, r4
 800aecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aed0:	3b30      	subs	r3, #48	@ 0x30
 800aed2:	2b09      	cmp	r3, #9
 800aed4:	d94b      	bls.n	800af6e <_vfiprintf_r+0x1a2>
 800aed6:	b1b0      	cbz	r0, 800af06 <_vfiprintf_r+0x13a>
 800aed8:	9207      	str	r2, [sp, #28]
 800aeda:	e014      	b.n	800af06 <_vfiprintf_r+0x13a>
 800aedc:	eba0 0308 	sub.w	r3, r0, r8
 800aee0:	fa09 f303 	lsl.w	r3, r9, r3
 800aee4:	4313      	orrs	r3, r2
 800aee6:	9304      	str	r3, [sp, #16]
 800aee8:	46a2      	mov	sl, r4
 800aeea:	e7d2      	b.n	800ae92 <_vfiprintf_r+0xc6>
 800aeec:	9b03      	ldr	r3, [sp, #12]
 800aeee:	1d19      	adds	r1, r3, #4
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	9103      	str	r1, [sp, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	bfbb      	ittet	lt
 800aef8:	425b      	neglt	r3, r3
 800aefa:	f042 0202 	orrlt.w	r2, r2, #2
 800aefe:	9307      	strge	r3, [sp, #28]
 800af00:	9307      	strlt	r3, [sp, #28]
 800af02:	bfb8      	it	lt
 800af04:	9204      	strlt	r2, [sp, #16]
 800af06:	7823      	ldrb	r3, [r4, #0]
 800af08:	2b2e      	cmp	r3, #46	@ 0x2e
 800af0a:	d10a      	bne.n	800af22 <_vfiprintf_r+0x156>
 800af0c:	7863      	ldrb	r3, [r4, #1]
 800af0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800af10:	d132      	bne.n	800af78 <_vfiprintf_r+0x1ac>
 800af12:	9b03      	ldr	r3, [sp, #12]
 800af14:	1d1a      	adds	r2, r3, #4
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	9203      	str	r2, [sp, #12]
 800af1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af1e:	3402      	adds	r4, #2
 800af20:	9305      	str	r3, [sp, #20]
 800af22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aff8 <_vfiprintf_r+0x22c>
 800af26:	7821      	ldrb	r1, [r4, #0]
 800af28:	2203      	movs	r2, #3
 800af2a:	4650      	mov	r0, sl
 800af2c:	f7f5 f980 	bl	8000230 <memchr>
 800af30:	b138      	cbz	r0, 800af42 <_vfiprintf_r+0x176>
 800af32:	9b04      	ldr	r3, [sp, #16]
 800af34:	eba0 000a 	sub.w	r0, r0, sl
 800af38:	2240      	movs	r2, #64	@ 0x40
 800af3a:	4082      	lsls	r2, r0
 800af3c:	4313      	orrs	r3, r2
 800af3e:	3401      	adds	r4, #1
 800af40:	9304      	str	r3, [sp, #16]
 800af42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af46:	4829      	ldr	r0, [pc, #164]	@ (800afec <_vfiprintf_r+0x220>)
 800af48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af4c:	2206      	movs	r2, #6
 800af4e:	f7f5 f96f 	bl	8000230 <memchr>
 800af52:	2800      	cmp	r0, #0
 800af54:	d03f      	beq.n	800afd6 <_vfiprintf_r+0x20a>
 800af56:	4b26      	ldr	r3, [pc, #152]	@ (800aff0 <_vfiprintf_r+0x224>)
 800af58:	bb1b      	cbnz	r3, 800afa2 <_vfiprintf_r+0x1d6>
 800af5a:	9b03      	ldr	r3, [sp, #12]
 800af5c:	3307      	adds	r3, #7
 800af5e:	f023 0307 	bic.w	r3, r3, #7
 800af62:	3308      	adds	r3, #8
 800af64:	9303      	str	r3, [sp, #12]
 800af66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af68:	443b      	add	r3, r7
 800af6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800af6c:	e76a      	b.n	800ae44 <_vfiprintf_r+0x78>
 800af6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800af72:	460c      	mov	r4, r1
 800af74:	2001      	movs	r0, #1
 800af76:	e7a8      	b.n	800aeca <_vfiprintf_r+0xfe>
 800af78:	2300      	movs	r3, #0
 800af7a:	3401      	adds	r4, #1
 800af7c:	9305      	str	r3, [sp, #20]
 800af7e:	4619      	mov	r1, r3
 800af80:	f04f 0c0a 	mov.w	ip, #10
 800af84:	4620      	mov	r0, r4
 800af86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af8a:	3a30      	subs	r2, #48	@ 0x30
 800af8c:	2a09      	cmp	r2, #9
 800af8e:	d903      	bls.n	800af98 <_vfiprintf_r+0x1cc>
 800af90:	2b00      	cmp	r3, #0
 800af92:	d0c6      	beq.n	800af22 <_vfiprintf_r+0x156>
 800af94:	9105      	str	r1, [sp, #20]
 800af96:	e7c4      	b.n	800af22 <_vfiprintf_r+0x156>
 800af98:	fb0c 2101 	mla	r1, ip, r1, r2
 800af9c:	4604      	mov	r4, r0
 800af9e:	2301      	movs	r3, #1
 800afa0:	e7f0      	b.n	800af84 <_vfiprintf_r+0x1b8>
 800afa2:	ab03      	add	r3, sp, #12
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	462a      	mov	r2, r5
 800afa8:	4b12      	ldr	r3, [pc, #72]	@ (800aff4 <_vfiprintf_r+0x228>)
 800afaa:	a904      	add	r1, sp, #16
 800afac:	4630      	mov	r0, r6
 800afae:	f7fd fbb1 	bl	8008714 <_printf_float>
 800afb2:	4607      	mov	r7, r0
 800afb4:	1c78      	adds	r0, r7, #1
 800afb6:	d1d6      	bne.n	800af66 <_vfiprintf_r+0x19a>
 800afb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afba:	07d9      	lsls	r1, r3, #31
 800afbc:	d405      	bmi.n	800afca <_vfiprintf_r+0x1fe>
 800afbe:	89ab      	ldrh	r3, [r5, #12]
 800afc0:	059a      	lsls	r2, r3, #22
 800afc2:	d402      	bmi.n	800afca <_vfiprintf_r+0x1fe>
 800afc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afc6:	f7fe f927 	bl	8009218 <__retarget_lock_release_recursive>
 800afca:	89ab      	ldrh	r3, [r5, #12]
 800afcc:	065b      	lsls	r3, r3, #25
 800afce:	f53f af1f 	bmi.w	800ae10 <_vfiprintf_r+0x44>
 800afd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afd4:	e71e      	b.n	800ae14 <_vfiprintf_r+0x48>
 800afd6:	ab03      	add	r3, sp, #12
 800afd8:	9300      	str	r3, [sp, #0]
 800afda:	462a      	mov	r2, r5
 800afdc:	4b05      	ldr	r3, [pc, #20]	@ (800aff4 <_vfiprintf_r+0x228>)
 800afde:	a904      	add	r1, sp, #16
 800afe0:	4630      	mov	r0, r6
 800afe2:	f7fd fe2f 	bl	8008c44 <_printf_i>
 800afe6:	e7e4      	b.n	800afb2 <_vfiprintf_r+0x1e6>
 800afe8:	0800b856 	.word	0x0800b856
 800afec:	0800b860 	.word	0x0800b860
 800aff0:	08008715 	.word	0x08008715
 800aff4:	0800ada9 	.word	0x0800ada9
 800aff8:	0800b85c 	.word	0x0800b85c

0800affc <__swbuf_r>:
 800affc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affe:	460e      	mov	r6, r1
 800b000:	4614      	mov	r4, r2
 800b002:	4605      	mov	r5, r0
 800b004:	b118      	cbz	r0, 800b00e <__swbuf_r+0x12>
 800b006:	6a03      	ldr	r3, [r0, #32]
 800b008:	b90b      	cbnz	r3, 800b00e <__swbuf_r+0x12>
 800b00a:	f7fd ffc5 	bl	8008f98 <__sinit>
 800b00e:	69a3      	ldr	r3, [r4, #24]
 800b010:	60a3      	str	r3, [r4, #8]
 800b012:	89a3      	ldrh	r3, [r4, #12]
 800b014:	071a      	lsls	r2, r3, #28
 800b016:	d501      	bpl.n	800b01c <__swbuf_r+0x20>
 800b018:	6923      	ldr	r3, [r4, #16]
 800b01a:	b943      	cbnz	r3, 800b02e <__swbuf_r+0x32>
 800b01c:	4621      	mov	r1, r4
 800b01e:	4628      	mov	r0, r5
 800b020:	f000 f82a 	bl	800b078 <__swsetup_r>
 800b024:	b118      	cbz	r0, 800b02e <__swbuf_r+0x32>
 800b026:	f04f 37ff 	mov.w	r7, #4294967295
 800b02a:	4638      	mov	r0, r7
 800b02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b02e:	6823      	ldr	r3, [r4, #0]
 800b030:	6922      	ldr	r2, [r4, #16]
 800b032:	1a98      	subs	r0, r3, r2
 800b034:	6963      	ldr	r3, [r4, #20]
 800b036:	b2f6      	uxtb	r6, r6
 800b038:	4283      	cmp	r3, r0
 800b03a:	4637      	mov	r7, r6
 800b03c:	dc05      	bgt.n	800b04a <__swbuf_r+0x4e>
 800b03e:	4621      	mov	r1, r4
 800b040:	4628      	mov	r0, r5
 800b042:	f7ff fda7 	bl	800ab94 <_fflush_r>
 800b046:	2800      	cmp	r0, #0
 800b048:	d1ed      	bne.n	800b026 <__swbuf_r+0x2a>
 800b04a:	68a3      	ldr	r3, [r4, #8]
 800b04c:	3b01      	subs	r3, #1
 800b04e:	60a3      	str	r3, [r4, #8]
 800b050:	6823      	ldr	r3, [r4, #0]
 800b052:	1c5a      	adds	r2, r3, #1
 800b054:	6022      	str	r2, [r4, #0]
 800b056:	701e      	strb	r6, [r3, #0]
 800b058:	6962      	ldr	r2, [r4, #20]
 800b05a:	1c43      	adds	r3, r0, #1
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d004      	beq.n	800b06a <__swbuf_r+0x6e>
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	07db      	lsls	r3, r3, #31
 800b064:	d5e1      	bpl.n	800b02a <__swbuf_r+0x2e>
 800b066:	2e0a      	cmp	r6, #10
 800b068:	d1df      	bne.n	800b02a <__swbuf_r+0x2e>
 800b06a:	4621      	mov	r1, r4
 800b06c:	4628      	mov	r0, r5
 800b06e:	f7ff fd91 	bl	800ab94 <_fflush_r>
 800b072:	2800      	cmp	r0, #0
 800b074:	d0d9      	beq.n	800b02a <__swbuf_r+0x2e>
 800b076:	e7d6      	b.n	800b026 <__swbuf_r+0x2a>

0800b078 <__swsetup_r>:
 800b078:	b538      	push	{r3, r4, r5, lr}
 800b07a:	4b29      	ldr	r3, [pc, #164]	@ (800b120 <__swsetup_r+0xa8>)
 800b07c:	4605      	mov	r5, r0
 800b07e:	6818      	ldr	r0, [r3, #0]
 800b080:	460c      	mov	r4, r1
 800b082:	b118      	cbz	r0, 800b08c <__swsetup_r+0x14>
 800b084:	6a03      	ldr	r3, [r0, #32]
 800b086:	b90b      	cbnz	r3, 800b08c <__swsetup_r+0x14>
 800b088:	f7fd ff86 	bl	8008f98 <__sinit>
 800b08c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b090:	0719      	lsls	r1, r3, #28
 800b092:	d422      	bmi.n	800b0da <__swsetup_r+0x62>
 800b094:	06da      	lsls	r2, r3, #27
 800b096:	d407      	bmi.n	800b0a8 <__swsetup_r+0x30>
 800b098:	2209      	movs	r2, #9
 800b09a:	602a      	str	r2, [r5, #0]
 800b09c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0a0:	81a3      	strh	r3, [r4, #12]
 800b0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a6:	e033      	b.n	800b110 <__swsetup_r+0x98>
 800b0a8:	0758      	lsls	r0, r3, #29
 800b0aa:	d512      	bpl.n	800b0d2 <__swsetup_r+0x5a>
 800b0ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0ae:	b141      	cbz	r1, 800b0c2 <__swsetup_r+0x4a>
 800b0b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0b4:	4299      	cmp	r1, r3
 800b0b6:	d002      	beq.n	800b0be <__swsetup_r+0x46>
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	f7fe ff15 	bl	8009ee8 <_free_r>
 800b0be:	2300      	movs	r3, #0
 800b0c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0c2:	89a3      	ldrh	r3, [r4, #12]
 800b0c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b0c8:	81a3      	strh	r3, [r4, #12]
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	6063      	str	r3, [r4, #4]
 800b0ce:	6923      	ldr	r3, [r4, #16]
 800b0d0:	6023      	str	r3, [r4, #0]
 800b0d2:	89a3      	ldrh	r3, [r4, #12]
 800b0d4:	f043 0308 	orr.w	r3, r3, #8
 800b0d8:	81a3      	strh	r3, [r4, #12]
 800b0da:	6923      	ldr	r3, [r4, #16]
 800b0dc:	b94b      	cbnz	r3, 800b0f2 <__swsetup_r+0x7a>
 800b0de:	89a3      	ldrh	r3, [r4, #12]
 800b0e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b0e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0e8:	d003      	beq.n	800b0f2 <__swsetup_r+0x7a>
 800b0ea:	4621      	mov	r1, r4
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	f000 f883 	bl	800b1f8 <__smakebuf_r>
 800b0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0f6:	f013 0201 	ands.w	r2, r3, #1
 800b0fa:	d00a      	beq.n	800b112 <__swsetup_r+0x9a>
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	60a2      	str	r2, [r4, #8]
 800b100:	6962      	ldr	r2, [r4, #20]
 800b102:	4252      	negs	r2, r2
 800b104:	61a2      	str	r2, [r4, #24]
 800b106:	6922      	ldr	r2, [r4, #16]
 800b108:	b942      	cbnz	r2, 800b11c <__swsetup_r+0xa4>
 800b10a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b10e:	d1c5      	bne.n	800b09c <__swsetup_r+0x24>
 800b110:	bd38      	pop	{r3, r4, r5, pc}
 800b112:	0799      	lsls	r1, r3, #30
 800b114:	bf58      	it	pl
 800b116:	6962      	ldrpl	r2, [r4, #20]
 800b118:	60a2      	str	r2, [r4, #8]
 800b11a:	e7f4      	b.n	800b106 <__swsetup_r+0x8e>
 800b11c:	2000      	movs	r0, #0
 800b11e:	e7f7      	b.n	800b110 <__swsetup_r+0x98>
 800b120:	20000018 	.word	0x20000018

0800b124 <_raise_r>:
 800b124:	291f      	cmp	r1, #31
 800b126:	b538      	push	{r3, r4, r5, lr}
 800b128:	4605      	mov	r5, r0
 800b12a:	460c      	mov	r4, r1
 800b12c:	d904      	bls.n	800b138 <_raise_r+0x14>
 800b12e:	2316      	movs	r3, #22
 800b130:	6003      	str	r3, [r0, #0]
 800b132:	f04f 30ff 	mov.w	r0, #4294967295
 800b136:	bd38      	pop	{r3, r4, r5, pc}
 800b138:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b13a:	b112      	cbz	r2, 800b142 <_raise_r+0x1e>
 800b13c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b140:	b94b      	cbnz	r3, 800b156 <_raise_r+0x32>
 800b142:	4628      	mov	r0, r5
 800b144:	f000 f830 	bl	800b1a8 <_getpid_r>
 800b148:	4622      	mov	r2, r4
 800b14a:	4601      	mov	r1, r0
 800b14c:	4628      	mov	r0, r5
 800b14e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b152:	f000 b817 	b.w	800b184 <_kill_r>
 800b156:	2b01      	cmp	r3, #1
 800b158:	d00a      	beq.n	800b170 <_raise_r+0x4c>
 800b15a:	1c59      	adds	r1, r3, #1
 800b15c:	d103      	bne.n	800b166 <_raise_r+0x42>
 800b15e:	2316      	movs	r3, #22
 800b160:	6003      	str	r3, [r0, #0]
 800b162:	2001      	movs	r0, #1
 800b164:	e7e7      	b.n	800b136 <_raise_r+0x12>
 800b166:	2100      	movs	r1, #0
 800b168:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b16c:	4620      	mov	r0, r4
 800b16e:	4798      	blx	r3
 800b170:	2000      	movs	r0, #0
 800b172:	e7e0      	b.n	800b136 <_raise_r+0x12>

0800b174 <raise>:
 800b174:	4b02      	ldr	r3, [pc, #8]	@ (800b180 <raise+0xc>)
 800b176:	4601      	mov	r1, r0
 800b178:	6818      	ldr	r0, [r3, #0]
 800b17a:	f7ff bfd3 	b.w	800b124 <_raise_r>
 800b17e:	bf00      	nop
 800b180:	20000018 	.word	0x20000018

0800b184 <_kill_r>:
 800b184:	b538      	push	{r3, r4, r5, lr}
 800b186:	4d07      	ldr	r5, [pc, #28]	@ (800b1a4 <_kill_r+0x20>)
 800b188:	2300      	movs	r3, #0
 800b18a:	4604      	mov	r4, r0
 800b18c:	4608      	mov	r0, r1
 800b18e:	4611      	mov	r1, r2
 800b190:	602b      	str	r3, [r5, #0]
 800b192:	f7f7 fec7 	bl	8002f24 <_kill>
 800b196:	1c43      	adds	r3, r0, #1
 800b198:	d102      	bne.n	800b1a0 <_kill_r+0x1c>
 800b19a:	682b      	ldr	r3, [r5, #0]
 800b19c:	b103      	cbz	r3, 800b1a0 <_kill_r+0x1c>
 800b19e:	6023      	str	r3, [r4, #0]
 800b1a0:	bd38      	pop	{r3, r4, r5, pc}
 800b1a2:	bf00      	nop
 800b1a4:	20000d30 	.word	0x20000d30

0800b1a8 <_getpid_r>:
 800b1a8:	f7f7 beb4 	b.w	8002f14 <_getpid>

0800b1ac <__swhatbuf_r>:
 800b1ac:	b570      	push	{r4, r5, r6, lr}
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b4:	2900      	cmp	r1, #0
 800b1b6:	b096      	sub	sp, #88	@ 0x58
 800b1b8:	4615      	mov	r5, r2
 800b1ba:	461e      	mov	r6, r3
 800b1bc:	da0d      	bge.n	800b1da <__swhatbuf_r+0x2e>
 800b1be:	89a3      	ldrh	r3, [r4, #12]
 800b1c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b1c4:	f04f 0100 	mov.w	r1, #0
 800b1c8:	bf14      	ite	ne
 800b1ca:	2340      	movne	r3, #64	@ 0x40
 800b1cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	6031      	str	r1, [r6, #0]
 800b1d4:	602b      	str	r3, [r5, #0]
 800b1d6:	b016      	add	sp, #88	@ 0x58
 800b1d8:	bd70      	pop	{r4, r5, r6, pc}
 800b1da:	466a      	mov	r2, sp
 800b1dc:	f000 f848 	bl	800b270 <_fstat_r>
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	dbec      	blt.n	800b1be <__swhatbuf_r+0x12>
 800b1e4:	9901      	ldr	r1, [sp, #4]
 800b1e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b1ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b1ee:	4259      	negs	r1, r3
 800b1f0:	4159      	adcs	r1, r3
 800b1f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1f6:	e7eb      	b.n	800b1d0 <__swhatbuf_r+0x24>

0800b1f8 <__smakebuf_r>:
 800b1f8:	898b      	ldrh	r3, [r1, #12]
 800b1fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1fc:	079d      	lsls	r5, r3, #30
 800b1fe:	4606      	mov	r6, r0
 800b200:	460c      	mov	r4, r1
 800b202:	d507      	bpl.n	800b214 <__smakebuf_r+0x1c>
 800b204:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b208:	6023      	str	r3, [r4, #0]
 800b20a:	6123      	str	r3, [r4, #16]
 800b20c:	2301      	movs	r3, #1
 800b20e:	6163      	str	r3, [r4, #20]
 800b210:	b003      	add	sp, #12
 800b212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b214:	ab01      	add	r3, sp, #4
 800b216:	466a      	mov	r2, sp
 800b218:	f7ff ffc8 	bl	800b1ac <__swhatbuf_r>
 800b21c:	9f00      	ldr	r7, [sp, #0]
 800b21e:	4605      	mov	r5, r0
 800b220:	4639      	mov	r1, r7
 800b222:	4630      	mov	r0, r6
 800b224:	f7fe fed4 	bl	8009fd0 <_malloc_r>
 800b228:	b948      	cbnz	r0, 800b23e <__smakebuf_r+0x46>
 800b22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b22e:	059a      	lsls	r2, r3, #22
 800b230:	d4ee      	bmi.n	800b210 <__smakebuf_r+0x18>
 800b232:	f023 0303 	bic.w	r3, r3, #3
 800b236:	f043 0302 	orr.w	r3, r3, #2
 800b23a:	81a3      	strh	r3, [r4, #12]
 800b23c:	e7e2      	b.n	800b204 <__smakebuf_r+0xc>
 800b23e:	89a3      	ldrh	r3, [r4, #12]
 800b240:	6020      	str	r0, [r4, #0]
 800b242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b246:	81a3      	strh	r3, [r4, #12]
 800b248:	9b01      	ldr	r3, [sp, #4]
 800b24a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b24e:	b15b      	cbz	r3, 800b268 <__smakebuf_r+0x70>
 800b250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b254:	4630      	mov	r0, r6
 800b256:	f000 f81d 	bl	800b294 <_isatty_r>
 800b25a:	b128      	cbz	r0, 800b268 <__smakebuf_r+0x70>
 800b25c:	89a3      	ldrh	r3, [r4, #12]
 800b25e:	f023 0303 	bic.w	r3, r3, #3
 800b262:	f043 0301 	orr.w	r3, r3, #1
 800b266:	81a3      	strh	r3, [r4, #12]
 800b268:	89a3      	ldrh	r3, [r4, #12]
 800b26a:	431d      	orrs	r5, r3
 800b26c:	81a5      	strh	r5, [r4, #12]
 800b26e:	e7cf      	b.n	800b210 <__smakebuf_r+0x18>

0800b270 <_fstat_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	4d07      	ldr	r5, [pc, #28]	@ (800b290 <_fstat_r+0x20>)
 800b274:	2300      	movs	r3, #0
 800b276:	4604      	mov	r4, r0
 800b278:	4608      	mov	r0, r1
 800b27a:	4611      	mov	r1, r2
 800b27c:	602b      	str	r3, [r5, #0]
 800b27e:	f7f7 feb1 	bl	8002fe4 <_fstat>
 800b282:	1c43      	adds	r3, r0, #1
 800b284:	d102      	bne.n	800b28c <_fstat_r+0x1c>
 800b286:	682b      	ldr	r3, [r5, #0]
 800b288:	b103      	cbz	r3, 800b28c <_fstat_r+0x1c>
 800b28a:	6023      	str	r3, [r4, #0]
 800b28c:	bd38      	pop	{r3, r4, r5, pc}
 800b28e:	bf00      	nop
 800b290:	20000d30 	.word	0x20000d30

0800b294 <_isatty_r>:
 800b294:	b538      	push	{r3, r4, r5, lr}
 800b296:	4d06      	ldr	r5, [pc, #24]	@ (800b2b0 <_isatty_r+0x1c>)
 800b298:	2300      	movs	r3, #0
 800b29a:	4604      	mov	r4, r0
 800b29c:	4608      	mov	r0, r1
 800b29e:	602b      	str	r3, [r5, #0]
 800b2a0:	f7f7 feb0 	bl	8003004 <_isatty>
 800b2a4:	1c43      	adds	r3, r0, #1
 800b2a6:	d102      	bne.n	800b2ae <_isatty_r+0x1a>
 800b2a8:	682b      	ldr	r3, [r5, #0]
 800b2aa:	b103      	cbz	r3, 800b2ae <_isatty_r+0x1a>
 800b2ac:	6023      	str	r3, [r4, #0]
 800b2ae:	bd38      	pop	{r3, r4, r5, pc}
 800b2b0:	20000d30 	.word	0x20000d30

0800b2b4 <_init>:
 800b2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2b6:	bf00      	nop
 800b2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ba:	bc08      	pop	{r3}
 800b2bc:	469e      	mov	lr, r3
 800b2be:	4770      	bx	lr

0800b2c0 <_fini>:
 800b2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c2:	bf00      	nop
 800b2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2c6:	bc08      	pop	{r3}
 800b2c8:	469e      	mov	lr, r3
 800b2ca:	4770      	bx	lr
