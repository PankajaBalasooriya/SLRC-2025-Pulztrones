
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009dc  0800c2a8  0800c2a8  0000d2a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc84  0800cc84  0000e1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cc84  0800cc84  0000dc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc8c  0800cc8c  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc8c  0800cc8c  0000dc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc90  0800cc90  0000dc90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800cc94  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a8c  200001ec  0800ce80  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c78  0800ce80  0000ec78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a19b  00000000  00000000  0000e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043bf  00000000  00000000  000283b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  0002c778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001314  00000000  00000000  0002e058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273be  00000000  00000000  0002f36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021e70  00000000  00000000  0005672a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8bbc  00000000  00000000  0007859a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161156  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077d0  00000000  00000000  0016119c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  0016896c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c290 	.word	0x0800c290

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0800c290 	.word	0x0800c290

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b988 	b.w	8000ff0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	468e      	mov	lr, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	4688      	mov	r8, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4617      	mov	r7, r2
 8000d0c:	d962      	bls.n	8000dd4 <__udivmoddi4+0xdc>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	b14e      	cbz	r6, 8000d28 <__udivmoddi4+0x30>
 8000d14:	f1c6 0320 	rsb	r3, r6, #32
 8000d18:	fa01 f806 	lsl.w	r8, r1, r6
 8000d1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000d20:	40b7      	lsls	r7, r6
 8000d22:	ea43 0808 	orr.w	r8, r3, r8
 8000d26:	40b4      	lsls	r4, r6
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	fa1f fc87 	uxth.w	ip, r7
 8000d30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d34:	0c23      	lsrs	r3, r4, #16
 8000d36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d4c:	f080 80ea 	bcs.w	8000f24 <__udivmoddi4+0x22c>
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f240 80e7 	bls.w	8000f24 <__udivmoddi4+0x22c>
 8000d56:	3902      	subs	r1, #2
 8000d58:	443b      	add	r3, r7
 8000d5a:	1a9a      	subs	r2, r3, r2
 8000d5c:	b2a3      	uxth	r3, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6e:	459c      	cmp	ip, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x8e>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d78:	f080 80d6 	bcs.w	8000f28 <__udivmoddi4+0x230>
 8000d7c:	459c      	cmp	ip, r3
 8000d7e:	f240 80d3 	bls.w	8000f28 <__udivmoddi4+0x230>
 8000d82:	443b      	add	r3, r7
 8000d84:	3802      	subs	r0, #2
 8000d86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8a:	eba3 030c 	sub.w	r3, r3, ip
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11d      	cbz	r5, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40f3      	lsrs	r3, r6
 8000d94:	2200      	movs	r2, #0
 8000d96:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d905      	bls.n	8000dae <__udivmoddi4+0xb6>
 8000da2:	b10d      	cbz	r5, 8000da8 <__udivmoddi4+0xb0>
 8000da4:	e9c5 0100 	strd	r0, r1, [r5]
 8000da8:	2100      	movs	r1, #0
 8000daa:	4608      	mov	r0, r1
 8000dac:	e7f5      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dae:	fab3 f183 	clz	r1, r3
 8000db2:	2900      	cmp	r1, #0
 8000db4:	d146      	bne.n	8000e44 <__udivmoddi4+0x14c>
 8000db6:	4573      	cmp	r3, lr
 8000db8:	d302      	bcc.n	8000dc0 <__udivmoddi4+0xc8>
 8000dba:	4282      	cmp	r2, r0
 8000dbc:	f200 8105 	bhi.w	8000fca <__udivmoddi4+0x2d2>
 8000dc0:	1a84      	subs	r4, r0, r2
 8000dc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	4690      	mov	r8, r2
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	d0e5      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dce:	e9c5 4800 	strd	r4, r8, [r5]
 8000dd2:	e7e2      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f000 8090 	beq.w	8000efa <__udivmoddi4+0x202>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f040 80a4 	bne.w	8000f2c <__udivmoddi4+0x234>
 8000de4:	1a8a      	subs	r2, r1, r2
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	b280      	uxth	r0, r0
 8000dee:	b2bc      	uxth	r4, r7
 8000df0:	2101      	movs	r1, #1
 8000df2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000df6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d907      	bls.n	8000e16 <__udivmoddi4+0x11e>
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x11c>
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	f200 80e0 	bhi.w	8000fd4 <__udivmoddi4+0x2dc>
 8000e14:	46c4      	mov	ip, r8
 8000e16:	1a9b      	subs	r3, r3, r2
 8000e18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e24:	fb02 f404 	mul.w	r4, r2, r4
 8000e28:	429c      	cmp	r4, r3
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x144>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x142>
 8000e34:	429c      	cmp	r4, r3
 8000e36:	f200 80ca 	bhi.w	8000fce <__udivmoddi4+0x2d6>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e42:	e7a5      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e44:	f1c1 0620 	rsb	r6, r1, #32
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	fa0e f401 	lsl.w	r4, lr, r1
 8000e54:	fa20 f306 	lsr.w	r3, r0, r6
 8000e58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e60:	4323      	orrs	r3, r4
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	fa1f fc87 	uxth.w	ip, r7
 8000e6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e6e:	0c1c      	lsrs	r4, r3, #16
 8000e70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e82:	d909      	bls.n	8000e98 <__udivmoddi4+0x1a0>
 8000e84:	193c      	adds	r4, r7, r4
 8000e86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e8a:	f080 809c 	bcs.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e8e:	45a6      	cmp	lr, r4
 8000e90:	f240 8099 	bls.w	8000fc6 <__udivmoddi4+0x2ce>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	eba4 040e 	sub.w	r4, r4, lr
 8000e9c:	fa1f fe83 	uxth.w	lr, r3
 8000ea0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000eac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb0:	45a4      	cmp	ip, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x1ce>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000eba:	f080 8082 	bcs.w	8000fc2 <__udivmoddi4+0x2ca>
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d97f      	bls.n	8000fc2 <__udivmoddi4+0x2ca>
 8000ec2:	3b02      	subs	r3, #2
 8000ec4:	443c      	add	r4, r7
 8000ec6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eca:	eba4 040c 	sub.w	r4, r4, ip
 8000ece:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ed2:	4564      	cmp	r4, ip
 8000ed4:	4673      	mov	r3, lr
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	d362      	bcc.n	8000fa0 <__udivmoddi4+0x2a8>
 8000eda:	d05f      	beq.n	8000f9c <__udivmoddi4+0x2a4>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x1fe>
 8000ede:	ebb8 0203 	subs.w	r2, r8, r3
 8000ee2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ee6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eea:	fa22 f301 	lsr.w	r3, r2, r1
 8000eee:	431e      	orrs	r6, r3
 8000ef0:	40cc      	lsrs	r4, r1
 8000ef2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	e74f      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000efa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000efe:	0c01      	lsrs	r1, r0, #16
 8000f00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f04:	b280      	uxth	r0, r0
 8000f06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	463c      	mov	r4, r7
 8000f10:	46b8      	mov	r8, r7
 8000f12:	46be      	mov	lr, r7
 8000f14:	2620      	movs	r6, #32
 8000f16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f1a:	eba2 0208 	sub.w	r2, r2, r8
 8000f1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f22:	e766      	b.n	8000df2 <__udivmoddi4+0xfa>
 8000f24:	4601      	mov	r1, r0
 8000f26:	e718      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f28:	4610      	mov	r0, r2
 8000f2a:	e72c      	b.n	8000d86 <__udivmoddi4+0x8e>
 8000f2c:	f1c6 0220 	rsb	r2, r6, #32
 8000f30:	fa2e f302 	lsr.w	r3, lr, r2
 8000f34:	40b7      	lsls	r7, r6
 8000f36:	40b1      	lsls	r1, r6
 8000f38:	fa20 f202 	lsr.w	r2, r0, r2
 8000f3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f46:	b2bc      	uxth	r4, r7
 8000f48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f4c:	0c11      	lsrs	r1, r2, #16
 8000f4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f52:	fb08 f904 	mul.w	r9, r8, r4
 8000f56:	40b0      	lsls	r0, r6
 8000f58:	4589      	cmp	r9, r1
 8000f5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f5e:	b280      	uxth	r0, r0
 8000f60:	d93e      	bls.n	8000fe0 <__udivmoddi4+0x2e8>
 8000f62:	1879      	adds	r1, r7, r1
 8000f64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f68:	d201      	bcs.n	8000f6e <__udivmoddi4+0x276>
 8000f6a:	4589      	cmp	r9, r1
 8000f6c:	d81f      	bhi.n	8000fae <__udivmoddi4+0x2b6>
 8000f6e:	eba1 0109 	sub.w	r1, r1, r9
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f84:	4542      	cmp	r2, r8
 8000f86:	d229      	bcs.n	8000fdc <__udivmoddi4+0x2e4>
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f8e:	d2c4      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f90:	4542      	cmp	r2, r8
 8000f92:	d2c2      	bcs.n	8000f1a <__udivmoddi4+0x222>
 8000f94:	f1a9 0102 	sub.w	r1, r9, #2
 8000f98:	443a      	add	r2, r7
 8000f9a:	e7be      	b.n	8000f1a <__udivmoddi4+0x222>
 8000f9c:	45f0      	cmp	r8, lr
 8000f9e:	d29d      	bcs.n	8000edc <__udivmoddi4+0x1e4>
 8000fa0:	ebbe 0302 	subs.w	r3, lr, r2
 8000fa4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fa8:	3801      	subs	r0, #1
 8000faa:	46e1      	mov	r9, ip
 8000fac:	e796      	b.n	8000edc <__udivmoddi4+0x1e4>
 8000fae:	eba7 0909 	sub.w	r9, r7, r9
 8000fb2:	4449      	add	r1, r9
 8000fb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fbc:	fb09 f804 	mul.w	r8, r9, r4
 8000fc0:	e7db      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fc2:	4673      	mov	r3, lr
 8000fc4:	e77f      	b.n	8000ec6 <__udivmoddi4+0x1ce>
 8000fc6:	4650      	mov	r0, sl
 8000fc8:	e766      	b.n	8000e98 <__udivmoddi4+0x1a0>
 8000fca:	4608      	mov	r0, r1
 8000fcc:	e6fd      	b.n	8000dca <__udivmoddi4+0xd2>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3a02      	subs	r2, #2
 8000fd2:	e733      	b.n	8000e3c <__udivmoddi4+0x144>
 8000fd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fd8:	443b      	add	r3, r7
 8000fda:	e71c      	b.n	8000e16 <__udivmoddi4+0x11e>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	e79c      	b.n	8000f1a <__udivmoddi4+0x222>
 8000fe0:	eba1 0109 	sub.w	r1, r1, r9
 8000fe4:	46c4      	mov	ip, r8
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	e7c4      	b.n	8000f7a <__udivmoddi4+0x282>

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <ProcessCommand>:
}

/**
 * @brief Process received command
 */
void ProcessCommand(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  switch (rxCmd) {
 8000ff8:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <ProcessCommand+0x5c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	dc0f      	bgt.n	8001020 <ProcessCommand+0x2c>
 8001000:	2b00      	cmp	r3, #0
 8001002:	dd20      	ble.n	8001046 <ProcessCommand+0x52>
 8001004:	3b01      	subs	r3, #1
 8001006:	2b03      	cmp	r3, #3
 8001008:	d81d      	bhi.n	8001046 <ProcessCommand+0x52>
 800100a:	a201      	add	r2, pc, #4	@ (adr r2, 8001010 <ProcessCommand+0x1c>)
 800100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001010:	08001027 	.word	0x08001027
 8001014:	0800102f 	.word	0x0800102f
 8001018:	08001037 	.word	0x08001037
 800101c:	0800103f 	.word	0x0800103f
 8001020:	2b50      	cmp	r3, #80	@ 0x50
 8001022:	d012      	beq.n	800104a <ProcessCommand+0x56>
      //StopRobot();
      break;

    default:
      /* Unknown command */
      break;
 8001024:	e00f      	b.n	8001046 <ProcessCommand+0x52>
      HandleLineDetection(rxBuffer);
 8001026:	480b      	ldr	r0, [pc, #44]	@ (8001054 <ProcessCommand+0x60>)
 8001028:	f002 f862 	bl	80030f0 <HandleLineDetection>
      break;
 800102c:	e00e      	b.n	800104c <ProcessCommand+0x58>
      HandleGridPosition(rxBuffer);
 800102e:	4809      	ldr	r0, [pc, #36]	@ (8001054 <ProcessCommand+0x60>)
 8001030:	f002 f86e 	bl	8003110 <HandleGridPosition>
      break;
 8001034:	e00a      	b.n	800104c <ProcessCommand+0x58>
      HandleColorDetection(rxBuffer);
 8001036:	4807      	ldr	r0, [pc, #28]	@ (8001054 <ProcessCommand+0x60>)
 8001038:	f002 f87d 	bl	8003136 <HandleColorDetection>
      break;
 800103c:	e006      	b.n	800104c <ProcessCommand+0x58>
    	HandleLineColorDetection(rxBuffer);
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <ProcessCommand+0x60>)
 8001040:	f002 f884 	bl	800314c <HandleLineColorDetection>
	  break;
 8001044:	e002      	b.n	800104c <ProcessCommand+0x58>
      break;
 8001046:	bf00      	nop
 8001048:	e000      	b.n	800104c <ProcessCommand+0x58>
      break;
 800104a:	bf00      	nop
  }
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	2000028c 	.word	0x2000028c
 8001054:	2000020c 	.word	0x2000020c

08001058 <AnalogMux_SelectChannel>:
/**
 * @brief Select a channel on the multiplexer
 * @param channel Channel number (0-15)
 */
void AnalogMux_SelectChannel(uint8_t channel)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
    // Ensure channel is within valid range (0-15)
    if (channel > 15)
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d901      	bls.n	800106c <AnalogMux_SelectChannel+0x14>
        channel = 15;
 8001068:	230f      	movs	r3, #15
 800106a:	71fb      	strb	r3, [r7, #7]

    // Set S0 (least significant bit)
    if (channel & 0x01)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	d006      	beq.n	8001084 <AnalogMux_SelectChannel+0x2c>
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800107c:	4823      	ldr	r0, [pc, #140]	@ (800110c <AnalogMux_SelectChannel+0xb4>)
 800107e:	f004 fcc5 	bl	8005a0c <HAL_GPIO_WritePin>
 8001082:	e005      	b.n	8001090 <AnalogMux_SelectChannel+0x38>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800108a:	4820      	ldr	r0, [pc, #128]	@ (800110c <AnalogMux_SelectChannel+0xb4>)
 800108c:	f004 fcbe 	bl	8005a0c <HAL_GPIO_WritePin>

    // Set S1
    if (channel & 0x02)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d006      	beq.n	80010a8 <AnalogMux_SelectChannel+0x50>
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010a0:	481a      	ldr	r0, [pc, #104]	@ (800110c <AnalogMux_SelectChannel+0xb4>)
 80010a2:	f004 fcb3 	bl	8005a0c <HAL_GPIO_WritePin>
 80010a6:	e005      	b.n	80010b4 <AnalogMux_SelectChannel+0x5c>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ae:	4817      	ldr	r0, [pc, #92]	@ (800110c <AnalogMux_SelectChannel+0xb4>)
 80010b0:	f004 fcac 	bl	8005a0c <HAL_GPIO_WritePin>

    // Set S2
    if (channel & 0x04)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d006      	beq.n	80010cc <AnalogMux_SelectChannel+0x74>
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_SET);
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010c4:	4811      	ldr	r0, [pc, #68]	@ (800110c <AnalogMux_SelectChannel+0xb4>)
 80010c6:	f004 fca1 	bl	8005a0c <HAL_GPIO_WritePin>
 80010ca:	e005      	b.n	80010d8 <AnalogMux_SelectChannel+0x80>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010d2:	480e      	ldr	r0, [pc, #56]	@ (800110c <AnalogMux_SelectChannel+0xb4>)
 80010d4:	f004 fc9a 	bl	8005a0c <HAL_GPIO_WritePin>

    // Set S3 (most significant bit)
    if (channel & 0x08)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <AnalogMux_SelectChannel+0x98>
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010e8:	4808      	ldr	r0, [pc, #32]	@ (800110c <AnalogMux_SelectChannel+0xb4>)
 80010ea:	f004 fc8f 	bl	8005a0c <HAL_GPIO_WritePin>
 80010ee:	e005      	b.n	80010fc <AnalogMux_SelectChannel+0xa4>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f6:	4805      	ldr	r0, [pc, #20]	@ (800110c <AnalogMux_SelectChannel+0xb4>)
 80010f8:	f004 fc88 	bl	8005a0c <HAL_GPIO_WritePin>

    // Add short delay for the multiplexer to settle
    // Typically 0.5-1 microsecond is enough for the CD74HC4067
    delayMicroseconds(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f000 fb0d 	bl	800171c <delayMicroseconds>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40020400 	.word	0x40020400

08001110 <AnalogMux_ReadADC>:
/**
 * @brief Read the ADC value from the currently selected channel
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadADC(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
    uint16_t adcValue = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	80fb      	strh	r3, [r7, #6]

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 800111a:	480b      	ldr	r0, [pc, #44]	@ (8001148 <AnalogMux_ReadADC+0x38>)
 800111c:	f003 fa88 	bl	8004630 <HAL_ADC_Start>

    // Wait for conversion to complete (timeout after 100 cycles)
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001120:	2164      	movs	r1, #100	@ 0x64
 8001122:	4809      	ldr	r0, [pc, #36]	@ (8001148 <AnalogMux_ReadADC+0x38>)
 8001124:	f003 fb89 	bl	800483a <HAL_ADC_PollForConversion>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d104      	bne.n	8001138 <AnalogMux_ReadADC+0x28>
    {
        // Read the converted value
        adcValue = HAL_ADC_GetValue(&hadc1);
 800112e:	4806      	ldr	r0, [pc, #24]	@ (8001148 <AnalogMux_ReadADC+0x38>)
 8001130:	f003 fc0e 	bl	8004950 <HAL_ADC_GetValue>
 8001134:	4603      	mov	r3, r0
 8001136:	80fb      	strh	r3, [r7, #6]
    }

    // Stop ADC conversion
    HAL_ADC_Stop(&hadc1);
 8001138:	4803      	ldr	r0, [pc, #12]	@ (8001148 <AnalogMux_ReadADC+0x38>)
 800113a:	f003 fb4b 	bl	80047d4 <HAL_ADC_Stop>

    return adcValue;
 800113e:	88fb      	ldrh	r3, [r7, #6]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200002b8 	.word	0x200002b8

0800114c <AnalogMux_ReadChannel>:
 * @brief Read ADC value from a specific channel (selects channel then reads)
 * @param channel Channel number (0-15)
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadChannel(uint8_t channel)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
    // Select the desired channel
    AnalogMux_SelectChannel(channel);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff7d 	bl	8001058 <AnalogMux_SelectChannel>

    // Allow settling time for the analog signal
    delayMicroseconds(5);
 800115e:	2005      	movs	r0, #5
 8001160:	f000 fadc 	bl	800171c <delayMicroseconds>

    // Read and return the ADC value
    return AnalogMux_ReadADC();
 8001164:	f7ff ffd4 	bl	8001110 <AnalogMux_ReadADC>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_GPIO_EXTI_Callback>:

#define TOTAL_SLOTS 5  // Adjust based on the number of ball slots
#define GPIO_ENCODER_PIN GPIO_PIN_3  // Encoder sensor pin

// Interrupt callback function for ball slot counting
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 800117e:	f003 f9e3 	bl	8004548 <HAL_GetTick>
 8001182:	4603      	mov	r3, r0
 8001184:	4a19      	ldr	r2, [pc, #100]	@ (80011ec <HAL_GPIO_EXTI_Callback+0x78>)
 8001186:	6013      	str	r3, [r2, #0]
    if (GPIO_Pin == GPIO_ENCODER_PIN && (currentMillis - previousMillis > 650) && is_rotating == 1) {
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	2b08      	cmp	r3, #8
 800118c:	d119      	bne.n	80011c2 <HAL_GPIO_EXTI_Callback+0x4e>
 800118e:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <HAL_GPIO_EXTI_Callback+0x78>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f240 228a 	movw	r2, #650	@ 0x28a
 800119c:	4293      	cmp	r3, r2
 800119e:	d910      	bls.n	80011c2 <HAL_GPIO_EXTI_Callback+0x4e>
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x80>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d10b      	bne.n	80011c2 <HAL_GPIO_EXTI_Callback+0x4e>
        ballCount++;
 80011aa:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x84>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	3301      	adds	r3, #1
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x84>)
 80011b6:	801a      	strh	r2, [r3, #0]
        previousMillis = currentMillis;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <HAL_GPIO_EXTI_Callback+0x78>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0c      	ldr	r2, [pc, #48]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0x7c>)
 80011be:	6013      	str	r3, [r2, #0]
    else if (GPIO_Pin == B1_Pin && (currentMillis - previousMillis > 650))  // Replace BUTTON_PIN with actual GPIO pin
	{
		task_ready = 1; // Set flag when button is pressed
		//Buzzer_On();
	}
}
 80011c0:	e00f      	b.n	80011e2 <HAL_GPIO_EXTI_Callback+0x6e>
    else if (GPIO_Pin == B1_Pin && (currentMillis - previousMillis > 650))  // Replace BUTTON_PIN with actual GPIO pin
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011c8:	d10b      	bne.n	80011e2 <HAL_GPIO_EXTI_Callback+0x6e>
 80011ca:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <HAL_GPIO_EXTI_Callback+0x78>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0x7c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	f240 228a 	movw	r2, #650	@ 0x28a
 80011d8:	4293      	cmp	r3, r2
 80011da:	d902      	bls.n	80011e2 <HAL_GPIO_EXTI_Callback+0x6e>
		task_ready = 1; // Set flag when button is pressed
 80011dc:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <HAL_GPIO_EXTI_Callback+0x88>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000294 	.word	0x20000294
 80011f0:	20000290 	.word	0x20000290
 80011f4:	2000029a 	.word	0x2000029a
 80011f8:	20000298 	.word	0x20000298
 80011fc:	200005e6 	.word	0x200005e6

08001200 <Buzzer_On>:
#include "buzzer.h"
#include "main.h"

// Turn on the buzzer (PC15 high)
void Buzzer_On(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2120      	movs	r1, #32
 8001208:	4802      	ldr	r0, [pc, #8]	@ (8001214 <Buzzer_On+0x14>)
 800120a:	f004 fbff 	bl	8005a0c <HAL_GPIO_WritePin>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40020000 	.word	0x40020000

08001218 <Buzzer_Off>:

// Turn off the buzzer (PC15 low)
void Buzzer_Off(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	2120      	movs	r1, #32
 8001220:	4802      	ldr	r0, [pc, #8]	@ (800122c <Buzzer_Off+0x14>)
 8001222:	f004 fbf3 	bl	8005a0c <HAL_GPIO_WritePin>
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40020000 	.word	0x40020000

08001230 <Buzzer_Toggle>:

// Toggle the buzzer state with a specified delay
void Buzzer_Toggle(uint32_t delay)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
    Buzzer_On();
 8001238:	f7ff ffe2 	bl	8001200 <Buzzer_On>
    HAL_Delay(delay);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f003 f98f 	bl	8004560 <HAL_Delay>
    Buzzer_Off();
 8001242:	f7ff ffe9 	bl	8001218 <Buzzer_Off>
    HAL_Delay(delay);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f003 f98a 	bl	8004560 <HAL_Delay>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <Buzzer_UniquePattern>:

void Buzzer_UniquePattern(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
    // Pattern: Short-Short-Long-Short-Long
    // Total duration: 1000ms (1 second)

    Buzzer_On();
 8001258:	f7ff ffd2 	bl	8001200 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 800125c:	2064      	movs	r0, #100	@ 0x64
 800125e:	f003 f97f 	bl	8004560 <HAL_Delay>
    Buzzer_Off();
 8001262:	f7ff ffd9 	bl	8001218 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 8001266:	2064      	movs	r0, #100	@ 0x64
 8001268:	f003 f97a 	bl	8004560 <HAL_Delay>

    Buzzer_On();
 800126c:	f7ff ffc8 	bl	8001200 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 8001270:	2064      	movs	r0, #100	@ 0x64
 8001272:	f003 f975 	bl	8004560 <HAL_Delay>
    Buzzer_Off();
 8001276:	f7ff ffcf 	bl	8001218 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800127a:	2064      	movs	r0, #100	@ 0x64
 800127c:	f003 f970 	bl	8004560 <HAL_Delay>

    Buzzer_On();
 8001280:	f7ff ffbe 	bl	8001200 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 8001284:	20c8      	movs	r0, #200	@ 0xc8
 8001286:	f003 f96b 	bl	8004560 <HAL_Delay>
    Buzzer_Off();
 800128a:	f7ff ffc5 	bl	8001218 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800128e:	2064      	movs	r0, #100	@ 0x64
 8001290:	f003 f966 	bl	8004560 <HAL_Delay>

    Buzzer_On();
 8001294:	f7ff ffb4 	bl	8001200 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 8001298:	2064      	movs	r0, #100	@ 0x64
 800129a:	f003 f961 	bl	8004560 <HAL_Delay>
    Buzzer_Off();
 800129e:	f7ff ffbb 	bl	8001218 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80012a2:	2064      	movs	r0, #100	@ 0x64
 80012a4:	f003 f95c 	bl	8004560 <HAL_Delay>

    Buzzer_On();
 80012a8:	f7ff ffaa 	bl	8001200 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 80012ac:	20c8      	movs	r0, #200	@ 0xc8
 80012ae:	f003 f957 	bl	8004560 <HAL_Delay>
    Buzzer_Off();
 80012b2:	f7ff ffb1 	bl	8001218 <Buzzer_Off>
    // No delay at the end to make it exactly 1 second
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}

080012ba <Controller_Init>:
#include "fonts.h"
#include <stdio.h>

static float oldSpeed = 0;

void Controller_Init(Controller *controller) {
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
    // Initialize motor struct
	controller->forward_error = 0;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
	controller->rotational_error = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	605a      	str	r2, [r3, #4]
	controller->previous_forward_error = 0;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
	controller->previous_rotational_error = 0;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
	controller->velocity = 0;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
	controller->omega = 0;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
	controller->left_motor_pwm = 0;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
	controller->right_motor_pwm = 0;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
	controller->controllers_enabled = 1;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 2020 	strb.w	r2, [r3, #32]
	controller->feedforward_enabled = 1;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <Controller_ResetControllers>:
}

/**
 * Reset the error integrals for both forward and rotational controllers.
 */
void Controller_ResetControllers(Controller *controller) {
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
    controller->forward_error = 0;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
    controller->rotational_error = 0;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	605a      	str	r2, [r3, #4]
    controller->previous_forward_error = 0;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
    controller->previous_rotational_error = 0;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <UpdateControllers>:


/**
 * Update motor controllers based on velocity, angular velocity, and steering adjustment.
 */
void UpdateControllers(Controller *controller, float velocity, float omega, float steering_adjustment) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b090      	sub	sp, #64	@ 0x40
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001360:	edc7 0a01 	vstr	s1, [r7, #4]
 8001364:	ed87 1a00 	vstr	s2, [r7]
    float forward_output, rotational_output, left_output, right_output;
    //float left_speed, right_speed, left_ff, right_ff;

    controller->velocity = velocity;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	611a      	str	r2, [r3, #16]
    controller->omega = omega;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]

    // Forward motion control
    float forward_increment = velocity * LOOP_INTERVAL;//
 8001374:	4b6c      	ldr	r3, [pc, #432]	@ (8001528 <UpdateControllers+0x1d4>)
 8001376:	edd3 7a00 	vldr	s15, [r3]
 800137a:	ed97 7a02 	vldr	s14, [r7, #8]
 800137e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001382:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    controller->forward_error += forward_increment - robot_fwd_change();
 8001386:	f000 faa5 	bl	80018d4 <robot_fwd_change>
 800138a:	eeb0 7a40 	vmov.f32	s14, s0
 800138e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001392:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	edc3 7a00 	vstr	s15, [r3]
    float forward_diff = controller->forward_error - controller->previous_forward_error;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	ed93 7a00 	vldr	s14, [r3]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80013b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    controller->previous_forward_error = controller->forward_error;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	609a      	str	r2, [r3, #8]
    forward_output = FWD_KP * controller->forward_error + FWD_KD * forward_diff;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	ed93 7a00 	vldr	s14, [r3]
 80013c8:	4b58      	ldr	r3, [pc, #352]	@ (800152c <UpdateControllers+0x1d8>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d2:	4b57      	ldr	r3, [pc, #348]	@ (8001530 <UpdateControllers+0x1dc>)
 80013d4:	edd3 6a00 	vldr	s13, [r3]
 80013d8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80013dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Rotational control
    float rotational_increment = omega * LOOP_INTERVAL;
 80013e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001528 <UpdateControllers+0x1d4>)
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80013f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    controller->rotational_error += rotational_increment - robot_rot_change();
 80013fa:	f000 fa7d 	bl	80018f8 <robot_rot_change>
 80013fe:	eeb0 7a40 	vmov.f32	s14, s0
 8001402:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001406:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	edc3 7a01 	vstr	s15, [r3, #4]
    controller->rotational_error -= steering_adjustment;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001420:	edd7 7a00 	vldr	s15, [r7]
 8001424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	edc3 7a01 	vstr	s15, [r3, #4]
    float rotational_diff = controller->rotational_error - controller->previous_rotational_error;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	ed93 7a01 	vldr	s14, [r3, #4]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	edd3 7a03 	vldr	s15, [r3, #12]
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    controller->previous_rotational_error = controller->rotational_error;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	60da      	str	r2, [r3, #12]
    rotational_output = ROT_KP * controller->rotational_error + ROT_KD * rotational_diff;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001450:	4b38      	ldr	r3, [pc, #224]	@ (8001534 <UpdateControllers+0x1e0>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800145a:	4b37      	ldr	r3, [pc, #220]	@ (8001538 <UpdateControllers+0x1e4>)
 800145c:	edd3 6a00 	vldr	s13, [r3]
 8001460:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146c:	edc7 7a08 	vstr	s15, [r7, #32]

    // Combine forward and rotational outputs
    left_output = forward_output - rotational_output;
 8001470:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001474:	edd7 7a08 	vldr	s15, [r7, #32]
 8001478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    right_output = forward_output + rotational_output;
 8001480:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001484:	edd7 7a08 	vldr	s15, [r7, #32]
 8001488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    float tangent_speed = omega * ROBOT_RADIUS * RADIANS_PER_DEGREE;
 8001490:	4b2a      	ldr	r3, [pc, #168]	@ (800153c <UpdateControllers+0x1e8>)
 8001492:	ed93 7a00 	vldr	s14, [r3]
 8001496:	edd7 7a01 	vldr	s15, [r7, #4]
 800149a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800149e:	4b28      	ldr	r3, [pc, #160]	@ (8001540 <UpdateControllers+0x1ec>)
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a8:	edc7 7a07 	vstr	s15, [r7, #28]

	float left_speed = velocity - tangent_speed;
 80014ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80014b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80014b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b8:	edc7 7a06 	vstr	s15, [r7, #24]
	float right_speed = velocity + tangent_speed;
 80014bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80014c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c8:	edc7 7a05 	vstr	s15, [r7, #20]

	if (controller->feedforward_enabled) {
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d017      	beq.n	8001506 <UpdateControllers+0x1b2>
		// Feedforward calculation
		left_output += leftFeedForward(left_speed);
 80014d6:	ed97 0a06 	vldr	s0, [r7, #24]
 80014da:	f000 f833 	bl	8001544 <leftFeedForward>
 80014de:	eeb0 7a40 	vmov.f32	s14, s0
 80014e2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80014e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014ea:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		right_output += rightFeedForward(right_speed);
 80014ee:	ed97 0a05 	vldr	s0, [r7, #20]
 80014f2:	f000 f88d 	bl	8001610 <rightFeedForward>
 80014f6:	eeb0 7a40 	vmov.f32	s14, s0
 80014fa:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80014fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001502:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	}

    if (controller->controllers_enabled) {
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d007      	beq.n	8001520 <UpdateControllers+0x1cc>
    	setMotorLPWM(left_output);
 8001510:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8001514:	f001 fb2c 	bl	8002b70 <setMotorLPWM>
        setMotorRPWM(right_output);
 8001518:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 800151c:	f001 fb6e 	bl	8002bfc <setMotorRPWM>
    }


}
 8001520:	bf00      	nop
 8001522:	3740      	adds	r7, #64	@ 0x40
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	0800c4c0 	.word	0x0800c4c0
 800152c:	0800c4d0 	.word	0x0800c4d0
 8001530:	0800c4d4 	.word	0x0800c4d4
 8001534:	0800c4d8 	.word	0x0800c4d8
 8001538:	0800c4dc 	.word	0x0800c4dc
 800153c:	0800c4b0 	.word	0x0800c4b0
 8001540:	0800c4b8 	.word	0x0800c4b8

08001544 <leftFeedForward>:


float leftFeedForward(float speed) {
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	ed87 0a01 	vstr	s0, [r7, #4]
//  static float oldSpeed = speed;
  float leftFF = speed * SPEED_FF;
 800154e:	4b2b      	ldr	r3, [pc, #172]	@ (80015fc <leftFeedForward+0xb8>)
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ed97 7a01 	vldr	s14, [r7, #4]
 8001558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155c:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 8001560:	edd7 7a01 	vldr	s15, [r7, #4]
 8001564:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	dd09      	ble.n	8001582 <leftFeedForward+0x3e>
    leftFF += BIAS_FF;
 800156e:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <leftFeedForward+0xbc>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ed97 7a05 	vldr	s14, [r7, #20]
 8001578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001580:	e00f      	b.n	80015a2 <leftFeedForward+0x5e>
  } else if (speed < 0) {
 8001582:	edd7 7a01 	vldr	s15, [r7, #4]
 8001586:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	d508      	bpl.n	80015a2 <leftFeedForward+0x5e>
    leftFF -= BIAS_FF;
 8001590:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <leftFeedForward+0xbc>)
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	ed97 7a05 	vldr	s14, [r7, #20]
 800159a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159e:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 80015a2:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <leftFeedForward+0xc0>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80015ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015b0:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <leftFeedForward+0xc4>)
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ba:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 80015be:	4a11      	ldr	r2, [pc, #68]	@ (8001604 <leftFeedForward+0xc0>)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <leftFeedForward+0xc8>)
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80015ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d2:	edc7 7a03 	vstr	s15, [r7, #12]
  leftFF += accFF;
 80015d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80015da:	edd7 7a03 	vldr	s15, [r7, #12]
 80015de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e2:	edc7 7a05 	vstr	s15, [r7, #20]
  return leftFF;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	ee07 3a90 	vmov	s15, r3
}
 80015ec:	eeb0 0a67 	vmov.f32	s0, s15
 80015f0:	371c      	adds	r7, #28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	0800c4c4 	.word	0x0800c4c4
 8001600:	0800c4cc 	.word	0x0800c4cc
 8001604:	2000029c 	.word	0x2000029c
 8001608:	0800c4bc 	.word	0x0800c4bc
 800160c:	0800c4c8 	.word	0x0800c4c8

08001610 <rightFeedForward>:

float rightFeedForward(float speed) {
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	ed87 0a01 	vstr	s0, [r7, #4]
  //static float oldSpeed = speed;
  float rightFF = speed * SPEED_FF;
 800161a:	4b2b      	ldr	r3, [pc, #172]	@ (80016c8 <rightFeedForward+0xb8>)
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	ed97 7a01 	vldr	s14, [r7, #4]
 8001624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001628:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 800162c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001630:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001638:	dd09      	ble.n	800164e <rightFeedForward+0x3e>
    rightFF += BIAS_FF;
 800163a:	4b24      	ldr	r3, [pc, #144]	@ (80016cc <rightFeedForward+0xbc>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	ed97 7a05 	vldr	s14, [r7, #20]
 8001644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001648:	edc7 7a05 	vstr	s15, [r7, #20]
 800164c:	e00f      	b.n	800166e <rightFeedForward+0x5e>
  } else if (speed < 0) {
 800164e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001652:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165a:	d508      	bpl.n	800166e <rightFeedForward+0x5e>
    rightFF -= BIAS_FF;
 800165c:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <rightFeedForward+0xbc>)
 800165e:	edd3 7a00 	vldr	s15, [r3]
 8001662:	ed97 7a05 	vldr	s14, [r7, #20]
 8001666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800166a:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 800166e:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <rightFeedForward+0xc0>)
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	ed97 7a01 	vldr	s14, [r7, #4]
 8001678:	ee37 7a67 	vsub.f32	s14, s14, s15
 800167c:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <rightFeedForward+0xc4>)
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001686:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 800168a:	4a11      	ldr	r2, [pc, #68]	@ (80016d0 <rightFeedForward+0xc0>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 8001690:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <rightFeedForward+0xc8>)
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	ed97 7a04 	vldr	s14, [r7, #16]
 800169a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169e:	edc7 7a03 	vstr	s15, [r7, #12]
  rightFF += accFF;
 80016a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80016a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ae:	edc7 7a05 	vstr	s15, [r7, #20]
  return rightFF;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	0800c4c4 	.word	0x0800c4c4
 80016cc:	0800c4cc 	.word	0x0800c4cc
 80016d0:	2000029c 	.word	0x2000029c
 80016d4:	0800c4bc 	.word	0x0800c4bc
 80016d8:	0800c4c8 	.word	0x0800c4c8

080016dc <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <Delay_Init+0x38>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10e      	bne.n	800170a <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <Delay_Init+0x38>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4a08      	ldr	r2, [pc, #32]	@ (8001714 <Delay_Init+0x38>)
 80016f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016f6:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80016f8:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <Delay_Init+0x3c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <Delay_Init+0x3c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a05      	ldr	r2, [pc, #20]	@ (8001718 <Delay_Init+0x3c>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6013      	str	r3, [r2, #0]
    }
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000edf0 	.word	0xe000edf0
 8001718:	e0001000 	.word	0xe0001000

0800171c <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8001724:	4b0b      	ldr	r3, [pc, #44]	@ (8001754 <delayMicroseconds+0x38>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 180; // Our MCU runs at 180 MHz, so each microsecond lasts 16 clock ticks
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	22b4      	movs	r2, #180	@ 0xb4
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8001734:	bf00      	nop
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <delayMicroseconds+0x38>)
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f8      	bhi.n	8001736 <delayMicroseconds+0x1a>
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e0001000 	.word	0xe0001000

08001758 <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 800175c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001762:	b21b      	sxth	r3, r3
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 8001774:	4b03      	ldr	r3, [pc, #12]	@ (8001784 <getLeftEncoderCounts+0x14>)
 8001776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001778:	b21b      	sxth	r3, r3
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	40010000 	.word	0x40010000

08001788 <resetEncodersinSystick>:
	previous_left_count = 0;
	previous_right_count = 0;

}

void resetEncodersinSystick() {
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 800178c:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <resetEncodersinSystick+0x1c>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 8001792:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	40010000 	.word	0x40010000

080017a8 <update_Encoder_Data>:

void update_Encoder_Data(){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
	int16_t left_count = getLeftEncoderCounts();
 80017ae:	f7ff ffdf 	bl	8001770 <getLeftEncoderCounts>
 80017b2:	4603      	mov	r3, r0
 80017b4:	81fb      	strh	r3, [r7, #14]
	int16_t right_count = getRightEncoderCounts();
 80017b6:	f7ff ffcf 	bl	8001758 <getRightEncoderCounts>
 80017ba:	4603      	mov	r3, r0
 80017bc:	81bb      	strh	r3, [r7, #12]

	left_delta = left_count - previous_left_count;
 80017be:	89fa      	ldrh	r2, [r7, #14]
 80017c0:	4b3b      	ldr	r3, [pc, #236]	@ (80018b0 <update_Encoder_Data+0x108>)
 80017c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	b21a      	sxth	r2, r3
 80017ce:	4b39      	ldr	r3, [pc, #228]	@ (80018b4 <update_Encoder_Data+0x10c>)
 80017d0:	801a      	strh	r2, [r3, #0]
	previous_left_count = left_count;
 80017d2:	4a37      	ldr	r2, [pc, #220]	@ (80018b0 <update_Encoder_Data+0x108>)
 80017d4:	89fb      	ldrh	r3, [r7, #14]
 80017d6:	8013      	strh	r3, [r2, #0]

	right_delta = right_count - previous_right_count;
 80017d8:	89ba      	ldrh	r2, [r7, #12]
 80017da:	4b37      	ldr	r3, [pc, #220]	@ (80018b8 <update_Encoder_Data+0x110>)
 80017dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	4b34      	ldr	r3, [pc, #208]	@ (80018bc <update_Encoder_Data+0x114>)
 80017ea:	801a      	strh	r2, [r3, #0]
	previous_right_count = right_count;
 80017ec:	4a32      	ldr	r2, [pc, #200]	@ (80018b8 <update_Encoder_Data+0x110>)
 80017ee:	89bb      	ldrh	r3, [r7, #12]
 80017f0:	8013      	strh	r3, [r2, #0]

	float left_change = left_delta * MM_PER_COUNT_LEFT;
 80017f2:	4b30      	ldr	r3, [pc, #192]	@ (80018b4 <update_Encoder_Data+0x10c>)
 80017f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe feb3 	bl	8000564 <__aeabi_i2d>
 80017fe:	a32a      	add	r3, pc, #168	@ (adr r3, 80018a8 <update_Encoder_Data+0x100>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7fe ff18 	bl	8000638 <__aeabi_dmul>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff fa0a 	bl	8000c28 <__aeabi_d2f>
 8001814:	4603      	mov	r3, r0
 8001816:	60bb      	str	r3, [r7, #8]
	float right_change = right_delta * MM_PER_COUNT_RIGHT;
 8001818:	4b28      	ldr	r3, [pc, #160]	@ (80018bc <update_Encoder_Data+0x114>)
 800181a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fea0 	bl	8000564 <__aeabi_i2d>
 8001824:	a320      	add	r3, pc, #128	@ (adr r3, 80018a8 <update_Encoder_Data+0x100>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7fe ff05 	bl	8000638 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff f9f7 	bl	8000c28 <__aeabi_d2f>
 800183a:	4603      	mov	r3, r0
 800183c:	607b      	str	r3, [r7, #4]

	m_fwd_change = 0.5 * (right_change + left_change);
 800183e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001842:	edd7 7a02 	vldr	s15, [r7, #8]
 8001846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800184e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001852:	4b1b      	ldr	r3, [pc, #108]	@ (80018c0 <update_Encoder_Data+0x118>)
 8001854:	edc3 7a00 	vstr	s15, [r3]
	m_robot_distance += m_fwd_change;
 8001858:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <update_Encoder_Data+0x11c>)
 800185a:	ed93 7a00 	vldr	s14, [r3]
 800185e:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <update_Encoder_Data+0x118>)
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001868:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <update_Encoder_Data+0x11c>)
 800186a:	edc3 7a00 	vstr	s15, [r3]
	m_rot_change = (right_change - left_change) * DEG_PER_MM_DIFFERENCE;
 800186e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001872:	edd7 7a02 	vldr	s15, [r7, #8]
 8001876:	ee37 7a67 	vsub.f32	s14, s14, s15
 800187a:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <update_Encoder_Data+0x120>)
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <update_Encoder_Data+0x124>)
 8001886:	edc3 7a00 	vstr	s15, [r3]
	m_robot_angle += m_rot_change;
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <update_Encoder_Data+0x128>)
 800188c:	ed93 7a00 	vldr	s14, [r3]
 8001890:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <update_Encoder_Data+0x124>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189a:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <update_Encoder_Data+0x128>)
 800189c:	edc3 7a00 	vstr	s15, [r3]


}
 80018a0:	bf00      	nop
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	f76b218d 	.word	0xf76b218d
 80018ac:	3faf8e12 	.word	0x3faf8e12
 80018b0:	200002ac 	.word	0x200002ac
 80018b4:	200002a8 	.word	0x200002a8
 80018b8:	200002ae 	.word	0x200002ae
 80018bc:	200002aa 	.word	0x200002aa
 80018c0:	200002b0 	.word	0x200002b0
 80018c4:	200002a0 	.word	0x200002a0
 80018c8:	0800c4b4 	.word	0x0800c4b4
 80018cc:	200002b4 	.word	0x200002b4
 80018d0:	200002a4 	.word	0x200002a4

080018d4 <robot_fwd_change>:
	float omega;
	omega = LOOP_FREQUENCY * m_rot_change;
	return omega;
}

float robot_fwd_change() {
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
	float distance;
	distance = m_fwd_change;
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <robot_fwd_change+0x20>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	607b      	str	r3, [r7, #4]
	return distance;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	ee07 3a90 	vmov	s15, r3
}
 80018e6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	200002b0 	.word	0x200002b0

080018f8 <robot_rot_change>:

float robot_rot_change() {
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
	float distance;
	distance = m_rot_change;
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <robot_rot_change+0x20>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	607b      	str	r3, [r7, #4]
	return distance;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	ee07 3a90 	vmov	s15, r3
}
 800190a:	eeb0 0a67 	vmov.f32	s0, s15
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	200002b4 	.word	0x200002b4

0800191c <TCS3472_Init>:

/* TCS3472 Color Sensor Functions */

/* Initialize TCS3472 sensor */
uint8_t TCS3472_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
    /* Check if sensor is responding */
    uint8_t id = TCS3472_GetID();
 8001922:	f000 f81a 	bl	800195a <TCS3472_GetID>
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
    if (id != 0x44 && id != 0x4D) {
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	2b44      	cmp	r3, #68	@ 0x44
 800192e:	d004      	beq.n	800193a <TCS3472_Init+0x1e>
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	2b4d      	cmp	r3, #77	@ 0x4d
 8001934:	d001      	beq.n	800193a <TCS3472_Init+0x1e>
        return HAL_ERROR;  // Sensor not detected
 8001936:	2301      	movs	r3, #1
 8001938:	e00b      	b.n	8001952 <TCS3472_Init+0x36>
    }

    /* Power ON the device */
    TCS3472_Enable();
 800193a:	f000 f816 	bl	800196a <TCS3472_Enable>

    /* Set integration time (1 = 2.4ms, 255 = 614.4ms) */
    TCS3472_SetIntegrationTime(0x00);  // Minimum integration time (2.4ms) for fast readings
 800193e:	2000      	movs	r0, #0
 8001940:	f000 f822 	bl	8001988 <TCS3472_SetIntegrationTime>

    /* Set gain (0 = 1x, 1 = 4x, 2 = 16x, 3 = 60x) */
    TCS3472_SetGain(3);  // 60x gain for better contrast in color detection
 8001944:	2003      	movs	r0, #3
 8001946:	f000 f82d 	bl	80019a4 <TCS3472_SetGain>

    /* Wait for a moment for the sensor to stabilize */
    HAL_Delay(50);
 800194a:	2032      	movs	r0, #50	@ 0x32
 800194c:	f002 fe08 	bl	8004560 <HAL_Delay>

    return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <TCS3472_GetID>:

/* Get device ID */
uint8_t TCS3472_GetID(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
    return TCS3472_Read8(TCS3472_REG_ID);
 800195e:	2012      	movs	r0, #18
 8001960:	f000 fb3a 	bl	8001fd8 <TCS3472_Read8>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	bd80      	pop	{r7, pc}

0800196a <TCS3472_Enable>:

/* Enable the device */
void TCS3472_Enable(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	af00      	add	r7, sp, #0
    /* Power ON */
    TCS3472_Write(TCS3472_REG_ENABLE, TCS3472_ENABLE_PON);
 800196e:	2101      	movs	r1, #1
 8001970:	2000      	movs	r0, #0
 8001972:	f000 fb13 	bl	8001f9c <TCS3472_Write>
    HAL_Delay(3);  // Wait 2.4ms for power-up
 8001976:	2003      	movs	r0, #3
 8001978:	f002 fdf2 	bl	8004560 <HAL_Delay>

    /* Enable RGBC sensor */
    TCS3472_Write(TCS3472_REG_ENABLE, TCS3472_ENABLE_PON | TCS3472_ENABLE_AEN);
 800197c:	2103      	movs	r1, #3
 800197e:	2000      	movs	r0, #0
 8001980:	f000 fb0c 	bl	8001f9c <TCS3472_Write>
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <TCS3472_SetIntegrationTime>:
    TCS3472_Write(TCS3472_REG_ENABLE, val & ~(TCS3472_ENABLE_PON | TCS3472_ENABLE_AEN));
}

/* Set integration time */
void TCS3472_SetIntegrationTime(uint8_t time)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
    /* Write integration time to the register */
    TCS3472_Write(TCS3472_REG_ATIME, time);
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4619      	mov	r1, r3
 8001996:	2001      	movs	r0, #1
 8001998:	f000 fb00 	bl	8001f9c <TCS3472_Write>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <TCS3472_SetGain>:

/* Set gain */
void TCS3472_SetGain(uint8_t gain)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
    /* Check if gain is valid (0-3) */
    if (gain > 3) gain = 3;
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d901      	bls.n	80019b8 <TCS3472_SetGain+0x14>
 80019b4:	2303      	movs	r3, #3
 80019b6:	71fb      	strb	r3, [r7, #7]

    /* Write gain to the register */
    TCS3472_Write(TCS3472_REG_CONTROL, gain);
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4619      	mov	r1, r3
 80019bc:	200f      	movs	r0, #15
 80019be:	f000 faed 	bl	8001f9c <TCS3472_Write>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <TCS3472_GetRGBC>:

/* Get RGB and Clear values */
void TCS3472_GetRGBC(uint16_t *r, uint16_t *g, uint16_t *b, uint16_t *c)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	603b      	str	r3, [r7, #0]
    /* Wait for data to be valid */
    while (!(TCS3472_Read8(TCS3472_REG_STATUS) & 0x01));
 80019d8:	bf00      	nop
 80019da:	2013      	movs	r0, #19
 80019dc:	f000 fafc 	bl	8001fd8 <TCS3472_Read8>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f7      	beq.n	80019da <TCS3472_GetRGBC+0x10>

    /* Read all values */
    *c = TCS3472_Read16(TCS3472_REG_CDATAL);
 80019ea:	2014      	movs	r0, #20
 80019ec:	f000 fb18 	bl	8002020 <TCS3472_Read16>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	801a      	strh	r2, [r3, #0]
    *r = TCS3472_Read16(TCS3472_REG_RDATAL);
 80019f8:	2016      	movs	r0, #22
 80019fa:	f000 fb11 	bl	8002020 <TCS3472_Read16>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461a      	mov	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	801a      	strh	r2, [r3, #0]
    *g = TCS3472_Read16(TCS3472_REG_GDATAL);
 8001a06:	2018      	movs	r0, #24
 8001a08:	f000 fb0a 	bl	8002020 <TCS3472_Read16>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	801a      	strh	r2, [r3, #0]
    *b = TCS3472_Read16(TCS3472_REG_BDATAL);
 8001a14:	201a      	movs	r0, #26
 8001a16:	f000 fb03 	bl	8002020 <TCS3472_Read16>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	801a      	strh	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <TCS3472_DetectLineColor>:

/* Detect line color based on RGB values */
uint8_t TCS3472_DetectLineColor(uint16_t r, uint16_t g, uint16_t b, uint16_t c)
{
 8001a2c:	b490      	push	{r4, r7}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4604      	mov	r4, r0
 8001a34:	4608      	mov	r0, r1
 8001a36:	4611      	mov	r1, r2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	80fb      	strh	r3, [r7, #6]
 8001a3e:	4603      	mov	r3, r0
 8001a40:	80bb      	strh	r3, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	807b      	strh	r3, [r7, #2]
 8001a46:	4613      	mov	r3, r2
 8001a48:	803b      	strh	r3, [r7, #0]
    /* If overall brightness is very low, it's black (background) */
    if (c < color_config.black_threshold) {
 8001a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b04 <TCS3472_DetectLineColor+0xd8>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	883a      	ldrh	r2, [r7, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d201      	bcs.n	8001a58 <TCS3472_DetectLineColor+0x2c>
        return COLOR_BLACK;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e04f      	b.n	8001af8 <TCS3472_DetectLineColor+0xcc>
    }

    /* If overall brightness is high, check if it's white or green */
    if (c > color_config.white_threshold) {
 8001a58:	4b2a      	ldr	r3, [pc, #168]	@ (8001b04 <TCS3472_DetectLineColor+0xd8>)
 8001a5a:	885b      	ldrh	r3, [r3, #2]
 8001a5c:	883a      	ldrh	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d949      	bls.n	8001af6 <TCS3472_DetectLineColor+0xca>
        /* Calculate green-to-red ratio (multiplied by 100 to avoid floating point) */
        uint16_t g_to_r_ratio = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	81fb      	strh	r3, [r7, #14]

        /* Avoid division by zero */
        if (r > 10) {
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	2b0a      	cmp	r3, #10
 8001a6a:	d907      	bls.n	8001a7c <TCS3472_DetectLineColor+0x50>
            g_to_r_ratio = (g * 100) / r;
 8001a6c:	88bb      	ldrh	r3, [r7, #4]
 8001a6e:	2264      	movs	r2, #100	@ 0x64
 8001a70:	fb03 f202 	mul.w	r2, r3, r2
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a7a:	81fb      	strh	r3, [r7, #14]
        }

        /* If green is significantly higher than red, it's green */
        if (g_to_r_ratio >= color_config.green_ratio_min &&
 8001a7c:	4b21      	ldr	r3, [pc, #132]	@ (8001b04 <TCS3472_DetectLineColor+0xd8>)
 8001a7e:	889b      	ldrh	r3, [r3, #4]
 8001a80:	89fa      	ldrh	r2, [r7, #14]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d30e      	bcc.n	8001aa4 <TCS3472_DetectLineColor+0x78>
            g_to_r_ratio <= color_config.green_ratio_max &&
 8001a86:	4b1f      	ldr	r3, [pc, #124]	@ (8001b04 <TCS3472_DetectLineColor+0xd8>)
 8001a88:	88db      	ldrh	r3, [r3, #6]
        if (g_to_r_ratio >= color_config.green_ratio_min &&
 8001a8a:	89fa      	ldrh	r2, [r7, #14]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d809      	bhi.n	8001aa4 <TCS3472_DetectLineColor+0x78>
            g_to_r_ratio <= color_config.green_ratio_max &&
 8001a90:	88ba      	ldrh	r2, [r7, #4]
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d905      	bls.n	8001aa4 <TCS3472_DetectLineColor+0x78>
            g > r && g > b) {
 8001a98:	88ba      	ldrh	r2, [r7, #4]
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d901      	bls.n	8001aa4 <TCS3472_DetectLineColor+0x78>
            return COLOR_GREEN;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e029      	b.n	8001af8 <TCS3472_DetectLineColor+0xcc>
        }

        /* If all colors are relatively balanced and bright, it's white */
        if (r > 500 && g > 500 && b > 500 &&
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001aaa:	d924      	bls.n	8001af6 <TCS3472_DetectLineColor+0xca>
 8001aac:	88bb      	ldrh	r3, [r7, #4]
 8001aae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ab2:	d920      	bls.n	8001af6 <TCS3472_DetectLineColor+0xca>
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001aba:	d91c      	bls.n	8001af6 <TCS3472_DetectLineColor+0xca>
            (r * 100) / c > 20 && (g * 100) / c > 20 && (b * 100) / c > 20) {
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	2264      	movs	r2, #100	@ 0x64
 8001ac0:	fb03 f202 	mul.w	r2, r3, r2
 8001ac4:	883b      	ldrh	r3, [r7, #0]
 8001ac6:	fb92 f3f3 	sdiv	r3, r2, r3
        if (r > 500 && g > 500 && b > 500 &&
 8001aca:	2b14      	cmp	r3, #20
 8001acc:	dd13      	ble.n	8001af6 <TCS3472_DetectLineColor+0xca>
            (r * 100) / c > 20 && (g * 100) / c > 20 && (b * 100) / c > 20) {
 8001ace:	88bb      	ldrh	r3, [r7, #4]
 8001ad0:	2264      	movs	r2, #100	@ 0x64
 8001ad2:	fb03 f202 	mul.w	r2, r3, r2
 8001ad6:	883b      	ldrh	r3, [r7, #0]
 8001ad8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001adc:	2b14      	cmp	r3, #20
 8001ade:	dd0a      	ble.n	8001af6 <TCS3472_DetectLineColor+0xca>
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	2264      	movs	r2, #100	@ 0x64
 8001ae4:	fb03 f202 	mul.w	r2, r3, r2
 8001ae8:	883b      	ldrh	r3, [r7, #0]
 8001aea:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aee:	2b14      	cmp	r3, #20
 8001af0:	dd01      	ble.n	8001af6 <TCS3472_DetectLineColor+0xca>
            return COLOR_WHITE;
 8001af2:	2302      	movs	r3, #2
 8001af4:	e000      	b.n	8001af8 <TCS3472_DetectLineColor+0xcc>
        }
    }

    /* If we can't identify the color */
    return COLOR_UNKNOWN;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc90      	pop	{r4, r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	2000000c 	.word	0x2000000c

08001b08 <TCS3472_CalibrateColors>:

/* Calibration function - to be called during setup or when a button is pressed */
void TCS3472_CalibrateColors(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b0b2      	sub	sp, #200	@ 0xc8
 8001b0c:	af00      	add	r7, sp, #0
    char buffer[100];
    uint16_t r, g, b, c;
    uint16_t black_readings[5] = {0};
 8001b0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	811a      	strh	r2, [r3, #8]
    uint16_t white_readings[5] = {0};
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	811a      	strh	r2, [r3, #8]
    uint16_t green_readings_r[5] = {0};
 8001b26:	f107 0310 	add.w	r3, r7, #16
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	811a      	strh	r2, [r3, #8]
    uint16_t green_readings_g[5] = {0};
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	811a      	strh	r2, [r3, #8]

    /* Send calibration instructions */
    sprintf(buffer, "Starting calibration sequence...\r\n");
 8001b3c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b40:	49b9      	ldr	r1, [pc, #740]	@ (8001e28 <TCS3472_CalibrateColors+0x320>)
 8001b42:	4618      	mov	r0, r3
 8001b44:	f008 fa1a 	bl	8009f7c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001b48:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fbaf 	bl	80002b0 <strlen>
 8001b52:	4603      	mov	r3, r0
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	48b3      	ldr	r0, [pc, #716]	@ (8001e2c <TCS3472_CalibrateColors+0x324>)
 8001b60:	f006 fd42 	bl	80085e8 <HAL_UART_Transmit>

    /* 1. Calibrate BLACK background */
    sprintf(buffer, "Place sensor over BLACK surface and press USER button (PA0)...\r\n");
 8001b64:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b68:	49b1      	ldr	r1, [pc, #708]	@ (8001e30 <TCS3472_CalibrateColors+0x328>)
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f008 fa06 	bl	8009f7c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001b70:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fb9b 	bl	80002b0 <strlen>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
 8001b86:	48a9      	ldr	r0, [pc, #676]	@ (8001e2c <TCS3472_CalibrateColors+0x324>)
 8001b88:	f006 fd2e 	bl	80085e8 <HAL_UART_Transmit>

    /* Wait for button press */
    //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
    HAL_Delay(5000); // Debounce
 8001b8c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001b90:	f002 fce6 	bl	8004560 <HAL_Delay>

    /* Take 5 readings of black background */
    for (int i = 0; i < 5; i++) {
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001b9a:	e019      	b.n	8001bd0 <TCS3472_CalibrateColors+0xc8>
        TCS3472_GetRGBC(&r, &g, &b, &c);
 8001b9c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ba0:	f107 0236 	add.w	r2, r7, #54	@ 0x36
 8001ba4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001ba8:	f107 003a 	add.w	r0, r7, #58	@ 0x3a
 8001bac:	f7ff ff0d 	bl	80019ca <TCS3472_GetRGBC>
        black_readings[i] = c;
 8001bb0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001bb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	33c8      	adds	r3, #200	@ 0xc8
 8001bba:	443b      	add	r3, r7
 8001bbc:	f823 2ca0 	strh.w	r2, [r3, #-160]
        HAL_Delay(50);
 8001bc0:	2032      	movs	r0, #50	@ 0x32
 8001bc2:	f002 fccd 	bl	8004560 <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8001bc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001bd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	dde1      	ble.n	8001b9c <TCS3472_CalibrateColors+0x94>
    }

    /* Calculate average */
    uint32_t black_sum = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    for (int i = 0; i < 5; i++) {
 8001bde:	2300      	movs	r3, #0
 8001be0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001be4:	e011      	b.n	8001c0a <TCS3472_CalibrateColors+0x102>
        black_sum += black_readings[i];
 8001be6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	33c8      	adds	r3, #200	@ 0xc8
 8001bee:	443b      	add	r3, r7
 8001bf0:	f833 3ca0 	ldrh.w	r3, [r3, #-160]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001bfa:	4413      	add	r3, r2
 8001bfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    for (int i = 0; i < 5; i++) {
 8001c00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c04:	3301      	adds	r3, #1
 8001c06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001c0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	dde9      	ble.n	8001be6 <TCS3472_CalibrateColors+0xde>
    }
    color_config.black_threshold = (black_sum / 5) * 1.5; // 50% margin
 8001c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c16:	4a87      	ldr	r2, [pc, #540]	@ (8001e34 <TCS3472_CalibrateColors+0x32c>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fc90 	bl	8000544 <__aeabi_ui2d>
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	4b83      	ldr	r3, [pc, #524]	@ (8001e38 <TCS3472_CalibrateColors+0x330>)
 8001c2a:	f7fe fd05 	bl	8000638 <__aeabi_dmul>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4610      	mov	r0, r2
 8001c34:	4619      	mov	r1, r3
 8001c36:	f7fe ffd7 	bl	8000be8 <__aeabi_d2uiz>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e3c <TCS3472_CalibrateColors+0x334>)
 8001c40:	801a      	strh	r2, [r3, #0]

    sprintf(buffer, "BLACK calibrated: threshold = %d\r\n", color_config.black_threshold);
 8001c42:	4b7e      	ldr	r3, [pc, #504]	@ (8001e3c <TCS3472_CalibrateColors+0x334>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c4c:	497c      	ldr	r1, [pc, #496]	@ (8001e40 <TCS3472_CalibrateColors+0x338>)
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f008 f994 	bl	8009f7c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001c54:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fb29 	bl	80002b0 <strlen>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	4870      	ldr	r0, [pc, #448]	@ (8001e2c <TCS3472_CalibrateColors+0x324>)
 8001c6c:	f006 fcbc 	bl	80085e8 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8001c70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c74:	f002 fc74 	bl	8004560 <HAL_Delay>

    /* 2. Calibrate WHITE line */
    sprintf(buffer, "Place sensor over WHITE line and press USER button (PA0)...\r\n");
 8001c78:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c7c:	4971      	ldr	r1, [pc, #452]	@ (8001e44 <TCS3472_CalibrateColors+0x33c>)
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f008 f97c 	bl	8009f7c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001c84:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fb11 	bl	80002b0 <strlen>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	4864      	ldr	r0, [pc, #400]	@ (8001e2c <TCS3472_CalibrateColors+0x324>)
 8001c9c:	f006 fca4 	bl	80085e8 <HAL_UART_Transmit>

    /* Wait for button press */
    //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
    HAL_Delay(5000); // Debounce
 8001ca0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001ca4:	f002 fc5c 	bl	8004560 <HAL_Delay>

    /* Take 5 readings of white line */
    for (int i = 0; i < 5; i++) {
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001cae:	e019      	b.n	8001ce4 <TCS3472_CalibrateColors+0x1dc>
        TCS3472_GetRGBC(&r, &g, &b, &c);
 8001cb0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cb4:	f107 0236 	add.w	r2, r7, #54	@ 0x36
 8001cb8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001cbc:	f107 003a 	add.w	r0, r7, #58	@ 0x3a
 8001cc0:	f7ff fe83 	bl	80019ca <TCS3472_GetRGBC>
        white_readings[i] = c;
 8001cc4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001cc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	33c8      	adds	r3, #200	@ 0xc8
 8001cce:	443b      	add	r3, r7
 8001cd0:	f823 2cac 	strh.w	r2, [r3, #-172]
        HAL_Delay(50);
 8001cd4:	2032      	movs	r0, #50	@ 0x32
 8001cd6:	f002 fc43 	bl	8004560 <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8001cda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ce4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	dde1      	ble.n	8001cb0 <TCS3472_CalibrateColors+0x1a8>
    }

    /* Calculate average */
    uint32_t white_sum = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    for (int i = 0; i < 5; i++) {
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001cf8:	e011      	b.n	8001d1e <TCS3472_CalibrateColors+0x216>
        white_sum += white_readings[i];
 8001cfa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	33c8      	adds	r3, #200	@ 0xc8
 8001d02:	443b      	add	r3, r7
 8001d04:	f833 3cac 	ldrh.w	r3, [r3, #-172]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d0e:	4413      	add	r3, r2
 8001d10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    for (int i = 0; i < 5; i++) {
 8001d14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	dde9      	ble.n	8001cfa <TCS3472_CalibrateColors+0x1f2>
    }
    color_config.white_threshold = (white_sum / 5) * 0.8; // 20% margin
 8001d26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d2a:	4a42      	ldr	r2, [pc, #264]	@ (8001e34 <TCS3472_CalibrateColors+0x32c>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fc06 	bl	8000544 <__aeabi_ui2d>
 8001d38:	a339      	add	r3, pc, #228	@ (adr r3, 8001e20 <TCS3472_CalibrateColors+0x318>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	f7fe fc7b 	bl	8000638 <__aeabi_dmul>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4610      	mov	r0, r2
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f7fe ff4d 	bl	8000be8 <__aeabi_d2uiz>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	4b3a      	ldr	r3, [pc, #232]	@ (8001e3c <TCS3472_CalibrateColors+0x334>)
 8001d54:	805a      	strh	r2, [r3, #2]

    sprintf(buffer, "WHITE calibrated: threshold = %d\r\n", color_config.white_threshold);
 8001d56:	4b39      	ldr	r3, [pc, #228]	@ (8001e3c <TCS3472_CalibrateColors+0x334>)
 8001d58:	885b      	ldrh	r3, [r3, #2]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d60:	4939      	ldr	r1, [pc, #228]	@ (8001e48 <TCS3472_CalibrateColors+0x340>)
 8001d62:	4618      	mov	r0, r3
 8001d64:	f008 f90a 	bl	8009f7c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d68:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fa9f 	bl	80002b0 <strlen>
 8001d72:	4603      	mov	r3, r0
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	482b      	ldr	r0, [pc, #172]	@ (8001e2c <TCS3472_CalibrateColors+0x324>)
 8001d80:	f006 fc32 	bl	80085e8 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8001d84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d88:	f002 fbea 	bl	8004560 <HAL_Delay>

    /* 3. Calibrate GREEN line */
    sprintf(buffer, "Place sensor over GREEN line and press USER button (PA0)...\r\n");
 8001d8c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d90:	492e      	ldr	r1, [pc, #184]	@ (8001e4c <TCS3472_CalibrateColors+0x344>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	f008 f8f2 	bl	8009f7c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d98:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fa87 	bl	80002b0 <strlen>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	481f      	ldr	r0, [pc, #124]	@ (8001e2c <TCS3472_CalibrateColors+0x324>)
 8001db0:	f006 fc1a 	bl	80085e8 <HAL_UART_Transmit>

    /* Wait for button press */
    //while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET);
    HAL_Delay(5000); // Debounce
 8001db4:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001db8:	f002 fbd2 	bl	8004560 <HAL_Delay>

    /* Take 5 readings of green line */
    for (int i = 0; i < 5; i++) {
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001dc2:	e021      	b.n	8001e08 <TCS3472_CalibrateColors+0x300>
        TCS3472_GetRGBC(&r, &g, &b, &c);
 8001dc4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001dc8:	f107 0236 	add.w	r2, r7, #54	@ 0x36
 8001dcc:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001dd0:	f107 003a 	add.w	r0, r7, #58	@ 0x3a
 8001dd4:	f7ff fdf9 	bl	80019ca <TCS3472_GetRGBC>
        green_readings_r[i] = r;
 8001dd8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8001dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	33c8      	adds	r3, #200	@ 0xc8
 8001de2:	443b      	add	r3, r7
 8001de4:	f823 2cb8 	strh.w	r2, [r3, #-184]
        green_readings_g[i] = g;
 8001de8:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	33c8      	adds	r3, #200	@ 0xc8
 8001df2:	443b      	add	r3, r7
 8001df4:	f823 2cc4 	strh.w	r2, [r3, #-196]
        HAL_Delay(50);
 8001df8:	2032      	movs	r0, #50	@ 0x32
 8001dfa:	f002 fbb1 	bl	8004560 <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8001dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e02:	3301      	adds	r3, #1
 8001e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	ddd9      	ble.n	8001dc4 <TCS3472_CalibrateColors+0x2bc>
    }

    /* Calculate average G/R ratio */
    uint32_t g_r_ratio_sum = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    for (int i = 0; i < 5; i++) {
 8001e16:	2300      	movs	r3, #0
 8001e18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001e1c:	e040      	b.n	8001ea0 <TCS3472_CalibrateColors+0x398>
 8001e1e:	bf00      	nop
 8001e20:	9999999a 	.word	0x9999999a
 8001e24:	3fe99999 	.word	0x3fe99999
 8001e28:	0800c2a8 	.word	0x0800c2a8
 8001e2c:	200004c8 	.word	0x200004c8
 8001e30:	0800c2cc 	.word	0x0800c2cc
 8001e34:	cccccccd 	.word	0xcccccccd
 8001e38:	3ff80000 	.word	0x3ff80000
 8001e3c:	2000000c 	.word	0x2000000c
 8001e40:	0800c310 	.word	0x0800c310
 8001e44:	0800c334 	.word	0x0800c334
 8001e48:	0800c374 	.word	0x0800c374
 8001e4c:	0800c398 	.word	0x0800c398
        if (green_readings_r[i] > 10) { // Avoid division by zero
 8001e50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	33c8      	adds	r3, #200	@ 0xc8
 8001e58:	443b      	add	r3, r7
 8001e5a:	f833 3cb8 	ldrh.w	r3, [r3, #-184]
 8001e5e:	2b0a      	cmp	r3, #10
 8001e60:	d919      	bls.n	8001e96 <TCS3472_CalibrateColors+0x38e>
            g_r_ratio_sum += (green_readings_g[i] * 100) / green_readings_r[i];
 8001e62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	33c8      	adds	r3, #200	@ 0xc8
 8001e6a:	443b      	add	r3, r7
 8001e6c:	f833 3cc4 	ldrh.w	r3, [r3, #-196]
 8001e70:	461a      	mov	r2, r3
 8001e72:	2364      	movs	r3, #100	@ 0x64
 8001e74:	fb03 f202 	mul.w	r2, r3, r2
 8001e78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	33c8      	adds	r3, #200	@ 0xc8
 8001e80:	443b      	add	r3, r7
 8001e82:	f833 3cb8 	ldrh.w	r3, [r3, #-184]
 8001e86:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001e90:	4413      	add	r3, r2
 8001e92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    for (int i = 0; i < 5; i++) {
 8001e96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001ea0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	ddd3      	ble.n	8001e50 <TCS3472_CalibrateColors+0x348>
        }
    }
    uint16_t avg_g_r_ratio = g_r_ratio_sum / 5;
 8001ea8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001eac:	4a36      	ldr	r2, [pc, #216]	@ (8001f88 <TCS3472_CalibrateColors+0x480>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2

    /* Set min and max with 10% margin on each side */
    color_config.green_ratio_min = avg_g_r_ratio * 0.9;
 8001eb8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fb51 	bl	8000564 <__aeabi_i2d>
 8001ec2:	a32d      	add	r3, pc, #180	@ (adr r3, 8001f78 <TCS3472_CalibrateColors+0x470>)
 8001ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec8:	f7fe fbb6 	bl	8000638 <__aeabi_dmul>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f7fe fe88 	bl	8000be8 <__aeabi_d2uiz>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <TCS3472_CalibrateColors+0x484>)
 8001ede:	809a      	strh	r2, [r3, #4]
    color_config.green_ratio_max = avg_g_r_ratio * 1.1;
 8001ee0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fb3d 	bl	8000564 <__aeabi_i2d>
 8001eea:	a325      	add	r3, pc, #148	@ (adr r3, 8001f80 <TCS3472_CalibrateColors+0x478>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	f7fe fba2 	bl	8000638 <__aeabi_dmul>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f7fe fe74 	bl	8000be8 <__aeabi_d2uiz>
 8001f00:	4603      	mov	r3, r0
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4b21      	ldr	r3, [pc, #132]	@ (8001f8c <TCS3472_CalibrateColors+0x484>)
 8001f06:	80da      	strh	r2, [r3, #6]

    sprintf(buffer, "GREEN calibrated: G/R ratio range = %d-%d\r\n",
            color_config.green_ratio_min, color_config.green_ratio_max);
 8001f08:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <TCS3472_CalibrateColors+0x484>)
 8001f0a:	889b      	ldrh	r3, [r3, #4]
    sprintf(buffer, "GREEN calibrated: G/R ratio range = %d-%d\r\n",
 8001f0c:	461a      	mov	r2, r3
            color_config.green_ratio_min, color_config.green_ratio_max);
 8001f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <TCS3472_CalibrateColors+0x484>)
 8001f10:	88db      	ldrh	r3, [r3, #6]
    sprintf(buffer, "GREEN calibrated: G/R ratio range = %d-%d\r\n",
 8001f12:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001f16:	491e      	ldr	r1, [pc, #120]	@ (8001f90 <TCS3472_CalibrateColors+0x488>)
 8001f18:	f008 f830 	bl	8009f7c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001f1c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe f9c5 	bl	80002b0 <strlen>
 8001f26:	4603      	mov	r3, r0
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	4818      	ldr	r0, [pc, #96]	@ (8001f94 <TCS3472_CalibrateColors+0x48c>)
 8001f34:	f006 fb58 	bl	80085e8 <HAL_UART_Transmit>

    /* Mark as calibrated */
    color_config.is_calibrated = 1;
 8001f38:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <TCS3472_CalibrateColors+0x484>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	721a      	strb	r2, [r3, #8]

    sprintf(buffer, "Calibration complete!\r\n");
 8001f3e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f42:	4915      	ldr	r1, [pc, #84]	@ (8001f98 <TCS3472_CalibrateColors+0x490>)
 8001f44:	4618      	mov	r0, r3
 8001f46:	f008 f819 	bl	8009f7c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001f4a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe f9ae 	bl	80002b0 <strlen>
 8001f54:	4603      	mov	r3, r0
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f60:	480c      	ldr	r0, [pc, #48]	@ (8001f94 <TCS3472_CalibrateColors+0x48c>)
 8001f62:	f006 fb41 	bl	80085e8 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8001f66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f6a:	f002 faf9 	bl	8004560 <HAL_Delay>
}
 8001f6e:	bf00      	nop
 8001f70:	37c8      	adds	r7, #200	@ 0xc8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	cccccccd 	.word	0xcccccccd
 8001f7c:	3feccccc 	.word	0x3feccccc
 8001f80:	9999999a 	.word	0x9999999a
 8001f84:	3ff19999 	.word	0x3ff19999
 8001f88:	cccccccd 	.word	0xcccccccd
 8001f8c:	2000000c 	.word	0x2000000c
 8001f90:	0800c3d8 	.word	0x0800c3d8
 8001f94:	200004c8 	.word	0x200004c8
 8001f98:	0800c404 	.word	0x0800c404

08001f9c <TCS3472_Write>:

/* Write a byte to the TCS3472 register */
void TCS3472_Write(uint8_t reg, uint8_t value)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	460a      	mov	r2, r1
 8001fa6:	71fb      	strb	r3, [r7, #7]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];
    data[0] = TCS3472_COMMAND_BIT | reg;
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 8001fb6:	79bb      	ldrb	r3, [r7, #6]
 8001fb8:	737b      	strb	r3, [r7, #13]

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, data, 2, 100);
 8001fba:	f107 020c 	add.w	r2, r7, #12
 8001fbe:	2364      	movs	r3, #100	@ 0x64
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	2152      	movs	r1, #82	@ 0x52
 8001fc6:	4803      	ldr	r0, [pc, #12]	@ (8001fd4 <TCS3472_Write+0x38>)
 8001fc8:	f003 fe96 	bl	8005cf8 <HAL_I2C_Master_Transmit>
}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000300 	.word	0x20000300

08001fd8 <TCS3472_Read8>:

/* Read 8-bit value from TCS3472 register */
uint8_t TCS3472_Read8(uint8_t reg)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = TCS3472_COMMAND_BIT | reg;
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	73fb      	strb	r3, [r7, #15]
    uint8_t value;

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, &cmd, 1, 100);
 8001fec:	f107 020f 	add.w	r2, r7, #15
 8001ff0:	2364      	movs	r3, #100	@ 0x64
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	2152      	movs	r1, #82	@ 0x52
 8001ff8:	4808      	ldr	r0, [pc, #32]	@ (800201c <TCS3472_Read8+0x44>)
 8001ffa:	f003 fe7d 	bl	8005cf8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS3472_ADDR, &value, 1, 100);
 8001ffe:	f107 020e 	add.w	r2, r7, #14
 8002002:	2364      	movs	r3, #100	@ 0x64
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2301      	movs	r3, #1
 8002008:	2152      	movs	r1, #82	@ 0x52
 800200a:	4804      	ldr	r0, [pc, #16]	@ (800201c <TCS3472_Read8+0x44>)
 800200c:	f003 ff72 	bl	8005ef4 <HAL_I2C_Master_Receive>

    return value;
 8002010:	7bbb      	ldrb	r3, [r7, #14]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000300 	.word	0x20000300

08002020 <TCS3472_Read16>:

/* Read 16-bit value from TCS3472 register */
uint16_t TCS3472_Read16(uint8_t reg)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af02      	add	r7, sp, #8
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd = TCS3472_COMMAND_BIT | reg;
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002030:	b2db      	uxtb	r3, r3
 8002032:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];

    HAL_I2C_Master_Transmit(&hi2c1, TCS3472_ADDR, &cmd, 1, 100);
 8002034:	f107 020f 	add.w	r2, r7, #15
 8002038:	2364      	movs	r3, #100	@ 0x64
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2301      	movs	r3, #1
 800203e:	2152      	movs	r1, #82	@ 0x52
 8002040:	480c      	ldr	r0, [pc, #48]	@ (8002074 <TCS3472_Read16+0x54>)
 8002042:	f003 fe59 	bl	8005cf8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, TCS3472_ADDR, data, 2, 100);
 8002046:	f107 020c 	add.w	r2, r7, #12
 800204a:	2364      	movs	r3, #100	@ 0x64
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2302      	movs	r3, #2
 8002050:	2152      	movs	r1, #82	@ 0x52
 8002052:	4808      	ldr	r0, [pc, #32]	@ (8002074 <TCS3472_Read16+0x54>)
 8002054:	f003 ff4e 	bl	8005ef4 <HAL_I2C_Master_Receive>

    return (data[1] << 8) | data[0];
 8002058:	7b7b      	ldrb	r3, [r7, #13]
 800205a:	b21b      	sxth	r3, r3
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	b21a      	sxth	r2, r3
 8002060:	7b3b      	ldrb	r3, [r7, #12]
 8002062:	b21b      	sxth	r3, r3
 8002064:	4313      	orrs	r3, r2
 8002066:	b21b      	sxth	r3, r3
 8002068:	b29b      	uxth	r3, r3
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000300 	.word	0x20000300

08002078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b0b4      	sub	sp, #208	@ 0xd0
 800207c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800207e:	f002 f9fd 	bl	800447c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002082:	f000 f931 	bl	80022e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002086:	f000 fc13 	bl	80028b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800208a:	f000 fbf1 	bl	8002870 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800208e:	f000 fb71 	bl	8002774 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002092:	f000 fa49 	bl	8002528 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002096:	f000 fa9f 	bl	80025d8 <MX_TIM2_Init>
  MX_I2C2_Init();
 800209a:	f000 fa17 	bl	80024cc <MX_I2C2_Init>
  MX_USART3_UART_Init();
 800209e:	f000 fb93 	bl	80027c8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80020a2:	f000 fbbb 	bl	800281c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80020a6:	f000 f991 	bl	80023cc <MX_ADC1_Init>
  MX_I2C1_Init();
 80020aa:	f000 f9e1 	bl	8002470 <MX_I2C1_Init>
  MX_TIM3_Init();
 80020ae:	f000 fae7 	bl	8002680 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80020b2:	213c      	movs	r1, #60	@ 0x3c
 80020b4:	487a      	ldr	r0, [pc, #488]	@ (80022a0 <main+0x228>)
 80020b6:	f005 fdf9 	bl	8007cac <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80020ba:	213c      	movs	r1, #60	@ 0x3c
 80020bc:	4879      	ldr	r0, [pc, #484]	@ (80022a4 <main+0x22c>)
 80020be:	f005 fdf5 	bl	8007cac <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80020c2:	2100      	movs	r1, #0
 80020c4:	4878      	ldr	r0, [pc, #480]	@ (80022a8 <main+0x230>)
 80020c6:	f005 fc83 	bl	80079d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80020ca:	2104      	movs	r1, #4
 80020cc:	4876      	ldr	r0, [pc, #472]	@ (80022a8 <main+0x230>)
 80020ce:	f005 fc7f 	bl	80079d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80020d2:	2108      	movs	r1, #8
 80020d4:	4874      	ldr	r0, [pc, #464]	@ (80022a8 <main+0x230>)
 80020d6:	f005 fc7b 	bl	80079d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80020da:	210c      	movs	r1, #12
 80020dc:	4872      	ldr	r0, [pc, #456]	@ (80022a8 <main+0x230>)
 80020de:	f005 fc77 	bl	80079d0 <HAL_TIM_PWM_Start>

  SSD1306_Init();
 80020e2:	f001 ff5f 	bl	8003fa4 <SSD1306_Init>
    SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 80020e6:	2301      	movs	r3, #1
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	2340      	movs	r3, #64	@ 0x40
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2380      	movs	r3, #128	@ 0x80
 80020f0:	4a6e      	ldr	r2, [pc, #440]	@ (80022ac <main+0x234>)
 80020f2:	2100      	movs	r1, #0
 80020f4:	2000      	movs	r0, #0
 80020f6:	f002 f8bf 	bl	8004278 <SSD1306_DrawBitmap>
    SSD1306_UpdateScreen(); // update screen
 80020fa:	f002 f817 	bl	800412c <SSD1306_UpdateScreen>




	  Buzzer_UniquePattern();
 80020fe:	f7ff f8a9 	bl	8001254 <Buzzer_UniquePattern>

  /*---------------------Delay--------------------------------*/
  Delay_Init();
 8002102:	f7ff faeb 	bl	80016dc <Delay_Init>
//  Servo_SetAngle(B, 90);
//  Servo_SetAngle(C, 35);

  //PCA9685_SetServoAngle(14, 100);

  HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, 1);
 8002106:	2201      	movs	r2, #1
 8002108:	2102      	movs	r1, #2
 800210a:	4869      	ldr	r0, [pc, #420]	@ (80022b0 <main+0x238>)
 800210c:	f003 fc7e 	bl	8005a0c <HAL_GPIO_WritePin>


  // Or use them by name
  //Servo_SetAngleByName("base", 90);  // Set base to 120 degrees

  HAL_Delay(1000);
 8002110:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002114:	f002 fa24 	bl	8004560 <HAL_Delay>
  Controller_Init(&controller);
 8002118:	4866      	ldr	r0, [pc, #408]	@ (80022b4 <main+0x23c>)
 800211a:	f7ff f8ce 	bl	80012ba <Controller_Init>
    Profile_Reset(&forward_profile);
 800211e:	4866      	ldr	r0, [pc, #408]	@ (80022b8 <main+0x240>)
 8002120:	f000 fdb2 	bl	8002c88 <Profile_Reset>
    Profile_Reset(&rotation_profile);
 8002124:	4865      	ldr	r0, [pc, #404]	@ (80022bc <main+0x244>)
 8002126:	f000 fdaf 	bl	8002c88 <Profile_Reset>
    Motion_Init(&motion, &controller, &forward_profile, &rotation_profile);
 800212a:	4b64      	ldr	r3, [pc, #400]	@ (80022bc <main+0x244>)
 800212c:	4a62      	ldr	r2, [pc, #392]	@ (80022b8 <main+0x240>)
 800212e:	4961      	ldr	r1, [pc, #388]	@ (80022b4 <main+0x23c>)
 8002130:	4863      	ldr	r0, [pc, #396]	@ (80022c0 <main+0x248>)
 8002132:	f000 fc8b 	bl	8002a4c <Motion_Init>
    Controller_ResetControllers(&controller);
 8002136:	485f      	ldr	r0, [pc, #380]	@ (80022b4 <main+0x23c>)
 8002138:	f7ff f8f1 	bl	800131e <Controller_ResetControllers>

  // Reset all servos to center position
  //Servo_ResetAll();

  Buzzer_Toggle(100);
 800213c:	2064      	movs	r0, #100	@ 0x64
 800213e:	f7ff f877 	bl	8001230 <Buzzer_Toggle>

  /*-------------------------------------------------------------------*/
  //HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Enable UART interrupt

  HAL_Delay(2000);
 8002142:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002146:	f002 fa0b 	bl	8004560 <HAL_Delay>
  //RAYKHA_Calibrate(&raykha_calibration, RAYKHA_LINE_WHITE);
  HAL_Delay(200);
 800214a:	20c8      	movs	r0, #200	@ 0xc8
 800214c:	f002 fa08 	bl	8004560 <HAL_Delay>
  Buzzer_Toggle(100);
 8002150:	2064      	movs	r0, #100	@ 0x64
 8002152:	f7ff f86d 	bl	8001230 <Buzzer_Toggle>





  Buzzer_Toggle(100);
 8002156:	2064      	movs	r0, #100	@ 0x64
 8002158:	f7ff f86a 	bl	8001230 <Buzzer_Toggle>
  HAL_Delay(6000);
 800215c:	f241 7070 	movw	r0, #6000	@ 0x1770
 8002160:	f002 f9fe 	bl	8004560 <HAL_Delay>
  Buzzer_Toggle(100);
 8002164:	2064      	movs	r0, #100	@ 0x64
 8002166:	f7ff f863 	bl	8001230 <Buzzer_Toggle>
  //Motion_SpinTurn(&motion, 90, 200.0, 20.0);



  /* Initialize TCS3472 color sensor */
  i2c_mux_select(&mux, 1);
 800216a:	2101      	movs	r1, #1
 800216c:	4855      	ldr	r0, [pc, #340]	@ (80022c4 <main+0x24c>)
 800216e:	f001 fec4 	bl	8003efa <i2c_mux_select>
  HAL_Delay(2000);
 8002172:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002176:	f002 f9f3 	bl	8004560 <HAL_Delay>


      if (TCS3472_Init() != HAL_OK)
 800217a:	f7ff fbcf 	bl	800191c <TCS3472_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d016      	beq.n	80021b2 <main+0x13a>
      {
          char msg[] = "TCS3472 initialization failed!\r\n";
 8002184:	4b50      	ldr	r3, [pc, #320]	@ (80022c8 <main+0x250>)
 8002186:	1d3c      	adds	r4, r7, #4
 8002188:	461d      	mov	r5, r3
 800218a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800218c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800218e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002190:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002192:	682b      	ldr	r3, [r5, #0]
 8002194:	7023      	strb	r3, [r4, #0]
          HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f889 	bl	80002b0 <strlen>
 800219e:	4603      	mov	r3, r0
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	1d39      	adds	r1, r7, #4
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
 80021a8:	4848      	ldr	r0, [pc, #288]	@ (80022cc <main+0x254>)
 80021aa:	f006 fa1d 	bl	80085e8 <HAL_UART_Transmit>
          Error_Handler();
 80021ae:	f000 fc47 	bl	8002a40 <Error_Handler>
      }

      char msg[] = "TCS3472 initialized successfully!\r\n";
 80021b2:	4b47      	ldr	r3, [pc, #284]	@ (80022d0 <main+0x258>)
 80021b4:	f107 0494 	add.w	r4, r7, #148	@ 0x94
 80021b8:	461d      	mov	r5, r3
 80021ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c2:	682b      	ldr	r3, [r5, #0]
 80021c4:	6023      	str	r3, [r4, #0]
      HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80021c6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f870 	bl	80002b0 <strlen>
 80021d0:	4603      	mov	r3, r0
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 80021d8:	f04f 33ff 	mov.w	r3, #4294967295
 80021dc:	483b      	ldr	r0, [pc, #236]	@ (80022cc <main+0x254>)
 80021de:	f006 fa03 	bl	80085e8 <HAL_UART_Transmit>

      /* Run calibration routine */

      TCS3472_CalibrateColors();
 80021e2:	f7ff fc91 	bl	8001b08 <TCS3472_CalibrateColors>

    /* USER CODE BEGIN 3 */


	  /* Get RGB and Clear values */
	          TCS3472_GetRGBC(&r, &g, &b, &c);
 80021e6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80021ea:	f107 028e 	add.w	r2, r7, #142	@ 0x8e
 80021ee:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 80021f2:	f107 0092 	add.w	r0, r7, #146	@ 0x92
 80021f6:	f7ff fbe8 	bl	80019ca <TCS3472_GetRGBC>

	          /* Detect the line color */
	          line_color = TCS3472_DetectLineColor(r, g, b, c);
 80021fa:	f8b7 0092 	ldrh.w	r0, [r7, #146]	@ 0x92
 80021fe:	f8b7 1090 	ldrh.w	r1, [r7, #144]	@ 0x90
 8002202:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8002206:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800220a:	f7ff fc0f 	bl	8001a2c <TCS3472_DetectLineColor>
 800220e:	4603      	mov	r3, r0
 8002210:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb

	          /* Print the RGB values and detected color */
	          char *color_str;
	          switch(line_color) {
 8002214:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 8002218:	2b03      	cmp	r3, #3
 800221a:	d00e      	beq.n	800223a <main+0x1c2>
 800221c:	2b03      	cmp	r3, #3
 800221e:	dc10      	bgt.n	8002242 <main+0x1ca>
 8002220:	2b01      	cmp	r3, #1
 8002222:	d002      	beq.n	800222a <main+0x1b2>
 8002224:	2b02      	cmp	r3, #2
 8002226:	d004      	beq.n	8002232 <main+0x1ba>
 8002228:	e00b      	b.n	8002242 <main+0x1ca>
	              case COLOR_BLACK:  color_str = "BLACK"; break;
 800222a:	4b2a      	ldr	r3, [pc, #168]	@ (80022d4 <main+0x25c>)
 800222c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002230:	e00b      	b.n	800224a <main+0x1d2>
	              case COLOR_WHITE:  color_str = "WHITE"; break;
 8002232:	4b29      	ldr	r3, [pc, #164]	@ (80022d8 <main+0x260>)
 8002234:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002238:	e007      	b.n	800224a <main+0x1d2>
	              case COLOR_GREEN:  color_str = "GREEN"; break;
 800223a:	4b28      	ldr	r3, [pc, #160]	@ (80022dc <main+0x264>)
 800223c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002240:	e003      	b.n	800224a <main+0x1d2>
	              default:           color_str = "UNKNOWN"; break;
 8002242:	4b27      	ldr	r3, [pc, #156]	@ (80022e0 <main+0x268>)
 8002244:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002248:	bf00      	nop
	          }

	          sprintf(buffer, "R: %5d, G: %5d, B: %5d, C: %5d | Line: %s\r\n",
 800224a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800224e:	461c      	mov	r4, r3
 8002250:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8002254:	461d      	mov	r5, r3
 8002256:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800225a:	461a      	mov	r2, r3
 800225c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8002260:	4619      	mov	r1, r3
 8002262:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002266:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800226a:	9302      	str	r3, [sp, #8]
 800226c:	9101      	str	r1, [sp, #4]
 800226e:	9200      	str	r2, [sp, #0]
 8002270:	462b      	mov	r3, r5
 8002272:	4622      	mov	r2, r4
 8002274:	491b      	ldr	r1, [pc, #108]	@ (80022e4 <main+0x26c>)
 8002276:	f007 fe81 	bl	8009f7c <siprintf>
	                  r, g, b, c, color_str);
	          HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800227a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe f816 	bl	80002b0 <strlen>
 8002284:	4603      	mov	r3, r0
 8002286:	b29a      	uxth	r2, r3
 8002288:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800228c:	f04f 33ff 	mov.w	r3, #4294967295
 8002290:	480e      	ldr	r0, [pc, #56]	@ (80022cc <main+0x254>)
 8002292:	f006 f9a9 	bl	80085e8 <HAL_UART_Transmit>

	          /* Wait 100ms before next reading - reduced for faster response */
	          HAL_Delay(100);
 8002296:	2064      	movs	r0, #100	@ 0x64
 8002298:	f002 f962 	bl	8004560 <HAL_Delay>
  {
 800229c:	e7a3      	b.n	80021e6 <main+0x16e>
 800229e:	bf00      	nop
 80022a0:	200003a8 	.word	0x200003a8
 80022a4:	200003f0 	.word	0x200003f0
 80022a8:	20000438 	.word	0x20000438
 80022ac:	0800c504 	.word	0x0800c504
 80022b0:	40020800 	.word	0x40020800
 80022b4:	2000069c 	.word	0x2000069c
 80022b8:	20000654 	.word	0x20000654
 80022bc:	20000678 	.word	0x20000678
 80022c0:	200005e8 	.word	0x200005e8
 80022c4:	20000000 	.word	0x20000000
 80022c8:	0800c468 	.word	0x0800c468
 80022cc:	200004c8 	.word	0x200004c8
 80022d0:	0800c48c 	.word	0x0800c48c
 80022d4:	0800c41c 	.word	0x0800c41c
 80022d8:	0800c424 	.word	0x0800c424
 80022dc:	0800c42c 	.word	0x0800c42c
 80022e0:	0800c434 	.word	0x0800c434
 80022e4:	0800c43c 	.word	0x0800c43c

080022e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b094      	sub	sp, #80	@ 0x50
 80022ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ee:	f107 031c 	add.w	r3, r7, #28
 80022f2:	2234      	movs	r2, #52	@ 0x34
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f007 fea5 	bl	800a046 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022fc:	f107 0308 	add.w	r3, r7, #8
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800230c:	2300      	movs	r3, #0
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	4b2c      	ldr	r3, [pc, #176]	@ (80023c4 <SystemClock_Config+0xdc>)
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	4a2b      	ldr	r2, [pc, #172]	@ (80023c4 <SystemClock_Config+0xdc>)
 8002316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800231a:	6413      	str	r3, [r2, #64]	@ 0x40
 800231c:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <SystemClock_Config+0xdc>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002328:	2300      	movs	r3, #0
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	4b26      	ldr	r3, [pc, #152]	@ (80023c8 <SystemClock_Config+0xe0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a25      	ldr	r2, [pc, #148]	@ (80023c8 <SystemClock_Config+0xe0>)
 8002332:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b23      	ldr	r3, [pc, #140]	@ (80023c8 <SystemClock_Config+0xe0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002344:	2302      	movs	r3, #2
 8002346:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002348:	2301      	movs	r3, #1
 800234a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800234c:	2310      	movs	r3, #16
 800234e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002350:	2302      	movs	r3, #2
 8002352:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002354:	2300      	movs	r3, #0
 8002356:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002358:	2308      	movs	r3, #8
 800235a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800235c:	23b4      	movs	r3, #180	@ 0xb4
 800235e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002360:	2302      	movs	r3, #2
 8002362:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002364:	2302      	movs	r3, #2
 8002366:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002368:	2302      	movs	r3, #2
 800236a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	4618      	mov	r0, r3
 8002372:	f005 f83f 	bl	80073f4 <HAL_RCC_OscConfig>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800237c:	f000 fb60 	bl	8002a40 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002380:	f004 fc9e 	bl	8006cc0 <HAL_PWREx_EnableOverDrive>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800238a:	f000 fb59 	bl	8002a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800238e:	230f      	movs	r3, #15
 8002390:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002392:	2302      	movs	r3, #2
 8002394:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800239a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800239e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023a6:	f107 0308 	add.w	r3, r7, #8
 80023aa:	2105      	movs	r1, #5
 80023ac:	4618      	mov	r0, r3
 80023ae:	f004 fcd7 	bl	8006d60 <HAL_RCC_ClockConfig>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80023b8:	f000 fb42 	bl	8002a40 <Error_Handler>
  }
}
 80023bc:	bf00      	nop
 80023be:	3750      	adds	r7, #80	@ 0x50
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40007000 	.word	0x40007000

080023cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023d2:	463b      	mov	r3, r7
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80023de:	4b21      	ldr	r3, [pc, #132]	@ (8002464 <MX_ADC1_Init+0x98>)
 80023e0:	4a21      	ldr	r2, [pc, #132]	@ (8002468 <MX_ADC1_Init+0x9c>)
 80023e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80023e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002464 <MX_ADC1_Init+0x98>)
 80023e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002464 <MX_ADC1_Init+0x98>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80023f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002464 <MX_ADC1_Init+0x98>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80023f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002464 <MX_ADC1_Init+0x98>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023fe:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <MX_ADC1_Init+0x98>)
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002406:	4b17      	ldr	r3, [pc, #92]	@ (8002464 <MX_ADC1_Init+0x98>)
 8002408:	2200      	movs	r2, #0
 800240a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800240c:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <MX_ADC1_Init+0x98>)
 800240e:	4a17      	ldr	r2, [pc, #92]	@ (800246c <MX_ADC1_Init+0xa0>)
 8002410:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002412:	4b14      	ldr	r3, [pc, #80]	@ (8002464 <MX_ADC1_Init+0x98>)
 8002414:	2200      	movs	r2, #0
 8002416:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002418:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <MX_ADC1_Init+0x98>)
 800241a:	2201      	movs	r2, #1
 800241c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800241e:	4b11      	ldr	r3, [pc, #68]	@ (8002464 <MX_ADC1_Init+0x98>)
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002426:	4b0f      	ldr	r3, [pc, #60]	@ (8002464 <MX_ADC1_Init+0x98>)
 8002428:	2201      	movs	r2, #1
 800242a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800242c:	480d      	ldr	r0, [pc, #52]	@ (8002464 <MX_ADC1_Init+0x98>)
 800242e:	f002 f8bb 	bl	80045a8 <HAL_ADC_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002438:	f000 fb02 	bl	8002a40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800243c:	230a      	movs	r3, #10
 800243e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002440:	2301      	movs	r3, #1
 8002442:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002448:	463b      	mov	r3, r7
 800244a:	4619      	mov	r1, r3
 800244c:	4805      	ldr	r0, [pc, #20]	@ (8002464 <MX_ADC1_Init+0x98>)
 800244e:	f002 fa8d 	bl	800496c <HAL_ADC_ConfigChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002458:	f000 faf2 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	200002b8 	.word	0x200002b8
 8002468:	40012000 	.word	0x40012000
 800246c:	0f000001 	.word	0x0f000001

08002470 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002474:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <MX_I2C1_Init+0x50>)
 8002476:	4a13      	ldr	r2, [pc, #76]	@ (80024c4 <MX_I2C1_Init+0x54>)
 8002478:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800247a:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <MX_I2C1_Init+0x50>)
 800247c:	4a12      	ldr	r2, [pc, #72]	@ (80024c8 <MX_I2C1_Init+0x58>)
 800247e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002480:	4b0f      	ldr	r3, [pc, #60]	@ (80024c0 <MX_I2C1_Init+0x50>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002486:	4b0e      	ldr	r3, [pc, #56]	@ (80024c0 <MX_I2C1_Init+0x50>)
 8002488:	2200      	movs	r2, #0
 800248a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800248c:	4b0c      	ldr	r3, [pc, #48]	@ (80024c0 <MX_I2C1_Init+0x50>)
 800248e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002492:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002494:	4b0a      	ldr	r3, [pc, #40]	@ (80024c0 <MX_I2C1_Init+0x50>)
 8002496:	2200      	movs	r2, #0
 8002498:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800249a:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <MX_I2C1_Init+0x50>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024a0:	4b07      	ldr	r3, [pc, #28]	@ (80024c0 <MX_I2C1_Init+0x50>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024a6:	4b06      	ldr	r3, [pc, #24]	@ (80024c0 <MX_I2C1_Init+0x50>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024ac:	4804      	ldr	r0, [pc, #16]	@ (80024c0 <MX_I2C1_Init+0x50>)
 80024ae:	f003 fadf 	bl	8005a70 <HAL_I2C_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024b8:	f000 fac2 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024bc:	bf00      	nop
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000300 	.word	0x20000300
 80024c4:	40005400 	.word	0x40005400
 80024c8:	00061a80 	.word	0x00061a80

080024cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80024d0:	4b12      	ldr	r3, [pc, #72]	@ (800251c <MX_I2C2_Init+0x50>)
 80024d2:	4a13      	ldr	r2, [pc, #76]	@ (8002520 <MX_I2C2_Init+0x54>)
 80024d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80024d6:	4b11      	ldr	r3, [pc, #68]	@ (800251c <MX_I2C2_Init+0x50>)
 80024d8:	4a12      	ldr	r2, [pc, #72]	@ (8002524 <MX_I2C2_Init+0x58>)
 80024da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <MX_I2C2_Init+0x50>)
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	@ (800251c <MX_I2C2_Init+0x50>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <MX_I2C2_Init+0x50>)
 80024ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024f0:	4b0a      	ldr	r3, [pc, #40]	@ (800251c <MX_I2C2_Init+0x50>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80024f6:	4b09      	ldr	r3, [pc, #36]	@ (800251c <MX_I2C2_Init+0x50>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024fc:	4b07      	ldr	r3, [pc, #28]	@ (800251c <MX_I2C2_Init+0x50>)
 80024fe:	2200      	movs	r2, #0
 8002500:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002502:	4b06      	ldr	r3, [pc, #24]	@ (800251c <MX_I2C2_Init+0x50>)
 8002504:	2200      	movs	r2, #0
 8002506:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002508:	4804      	ldr	r0, [pc, #16]	@ (800251c <MX_I2C2_Init+0x50>)
 800250a:	f003 fab1 	bl	8005a70 <HAL_I2C_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002514:	f000 fa94 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000354 	.word	0x20000354
 8002520:	40005800 	.word	0x40005800
 8002524:	000186a0 	.word	0x000186a0

08002528 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	@ 0x30
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800252e:	f107 030c 	add.w	r3, r7, #12
 8002532:	2224      	movs	r2, #36	@ 0x24
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f007 fd85 	bl	800a046 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002544:	4b22      	ldr	r3, [pc, #136]	@ (80025d0 <MX_TIM1_Init+0xa8>)
 8002546:	4a23      	ldr	r2, [pc, #140]	@ (80025d4 <MX_TIM1_Init+0xac>)
 8002548:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800254a:	4b21      	ldr	r3, [pc, #132]	@ (80025d0 <MX_TIM1_Init+0xa8>)
 800254c:	2200      	movs	r2, #0
 800254e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002550:	4b1f      	ldr	r3, [pc, #124]	@ (80025d0 <MX_TIM1_Init+0xa8>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002556:	4b1e      	ldr	r3, [pc, #120]	@ (80025d0 <MX_TIM1_Init+0xa8>)
 8002558:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800255c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255e:	4b1c      	ldr	r3, [pc, #112]	@ (80025d0 <MX_TIM1_Init+0xa8>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002564:	4b1a      	ldr	r3, [pc, #104]	@ (80025d0 <MX_TIM1_Init+0xa8>)
 8002566:	2200      	movs	r2, #0
 8002568:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256a:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <MX_TIM1_Init+0xa8>)
 800256c:	2200      	movs	r2, #0
 800256e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002570:	2303      	movs	r3, #3
 8002572:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002578:	2301      	movs	r3, #1
 800257a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800257c:	2300      	movs	r3, #0
 800257e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002584:	2300      	movs	r3, #0
 8002586:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002588:	2301      	movs	r3, #1
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800258c:	2300      	movs	r3, #0
 800258e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002594:	f107 030c 	add.w	r3, r7, #12
 8002598:	4619      	mov	r1, r3
 800259a:	480d      	ldr	r0, [pc, #52]	@ (80025d0 <MX_TIM1_Init+0xa8>)
 800259c:	f005 fae0 	bl	8007b60 <HAL_TIM_Encoder_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80025a6:	f000 fa4b 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	4619      	mov	r1, r3
 80025b6:	4806      	ldr	r0, [pc, #24]	@ (80025d0 <MX_TIM1_Init+0xa8>)
 80025b8:	f005 ff4a 	bl	8008450 <HAL_TIMEx_MasterConfigSynchronization>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80025c2:	f000 fa3d 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80025c6:	bf00      	nop
 80025c8:	3730      	adds	r7, #48	@ 0x30
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200003a8 	.word	0x200003a8
 80025d4:	40010000 	.word	0x40010000

080025d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08c      	sub	sp, #48	@ 0x30
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025de:	f107 030c 	add.w	r3, r7, #12
 80025e2:	2224      	movs	r2, #36	@ 0x24
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f007 fd2d 	bl	800a046 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ec:	1d3b      	adds	r3, r7, #4
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025f4:	4b21      	ldr	r3, [pc, #132]	@ (800267c <MX_TIM2_Init+0xa4>)
 80025f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80025fc:	4b1f      	ldr	r3, [pc, #124]	@ (800267c <MX_TIM2_Init+0xa4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002602:	4b1e      	ldr	r3, [pc, #120]	@ (800267c <MX_TIM2_Init+0xa4>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002608:	4b1c      	ldr	r3, [pc, #112]	@ (800267c <MX_TIM2_Init+0xa4>)
 800260a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800260e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002610:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <MX_TIM2_Init+0xa4>)
 8002612:	2200      	movs	r2, #0
 8002614:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002616:	4b19      	ldr	r3, [pc, #100]	@ (800267c <MX_TIM2_Init+0xa4>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800261c:	2303      	movs	r3, #3
 800261e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002624:	2301      	movs	r3, #1
 8002626:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002630:	2300      	movs	r3, #0
 8002632:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002634:	2301      	movs	r3, #1
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002638:	2300      	movs	r3, #0
 800263a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002640:	f107 030c 	add.w	r3, r7, #12
 8002644:	4619      	mov	r1, r3
 8002646:	480d      	ldr	r0, [pc, #52]	@ (800267c <MX_TIM2_Init+0xa4>)
 8002648:	f005 fa8a 	bl	8007b60 <HAL_TIM_Encoder_Init>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002652:	f000 f9f5 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	4619      	mov	r1, r3
 8002662:	4806      	ldr	r0, [pc, #24]	@ (800267c <MX_TIM2_Init+0xa4>)
 8002664:	f005 fef4 	bl	8008450 <HAL_TIMEx_MasterConfigSynchronization>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800266e:	f000 f9e7 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002672:	bf00      	nop
 8002674:	3730      	adds	r7, #48	@ 0x30
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200003f0 	.word	0x200003f0

08002680 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	@ 0x28
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002686:	f107 0320 	add.w	r3, r7, #32
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
 800269c:	611a      	str	r2, [r3, #16]
 800269e:	615a      	str	r2, [r3, #20]
 80026a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026a2:	4b32      	ldr	r3, [pc, #200]	@ (800276c <MX_TIM3_Init+0xec>)
 80026a4:	4a32      	ldr	r2, [pc, #200]	@ (8002770 <MX_TIM3_Init+0xf0>)
 80026a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80026a8:	4b30      	ldr	r3, [pc, #192]	@ (800276c <MX_TIM3_Init+0xec>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ae:	4b2f      	ldr	r3, [pc, #188]	@ (800276c <MX_TIM3_Init+0xec>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 80026b4:	4b2d      	ldr	r3, [pc, #180]	@ (800276c <MX_TIM3_Init+0xec>)
 80026b6:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80026ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026bc:	4b2b      	ldr	r3, [pc, #172]	@ (800276c <MX_TIM3_Init+0xec>)
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c2:	4b2a      	ldr	r3, [pc, #168]	@ (800276c <MX_TIM3_Init+0xec>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026c8:	4828      	ldr	r0, [pc, #160]	@ (800276c <MX_TIM3_Init+0xec>)
 80026ca:	f005 f931 	bl	8007930 <HAL_TIM_PWM_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80026d4:	f000 f9b4 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d8:	2300      	movs	r3, #0
 80026da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026e0:	f107 0320 	add.w	r3, r7, #32
 80026e4:	4619      	mov	r1, r3
 80026e6:	4821      	ldr	r0, [pc, #132]	@ (800276c <MX_TIM3_Init+0xec>)
 80026e8:	f005 feb2 	bl	8008450 <HAL_TIMEx_MasterConfigSynchronization>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80026f2:	f000 f9a5 	bl	8002a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026f6:	2360      	movs	r3, #96	@ 0x60
 80026f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	2200      	movs	r2, #0
 800270a:	4619      	mov	r1, r3
 800270c:	4817      	ldr	r0, [pc, #92]	@ (800276c <MX_TIM3_Init+0xec>)
 800270e:	f005 fb5b 	bl	8007dc8 <HAL_TIM_PWM_ConfigChannel>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002718:	f000 f992 	bl	8002a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	2204      	movs	r2, #4
 8002720:	4619      	mov	r1, r3
 8002722:	4812      	ldr	r0, [pc, #72]	@ (800276c <MX_TIM3_Init+0xec>)
 8002724:	f005 fb50 	bl	8007dc8 <HAL_TIM_PWM_ConfigChannel>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800272e:	f000 f987 	bl	8002a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	2208      	movs	r2, #8
 8002736:	4619      	mov	r1, r3
 8002738:	480c      	ldr	r0, [pc, #48]	@ (800276c <MX_TIM3_Init+0xec>)
 800273a:	f005 fb45 	bl	8007dc8 <HAL_TIM_PWM_ConfigChannel>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002744:	f000 f97c 	bl	8002a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	220c      	movs	r2, #12
 800274c:	4619      	mov	r1, r3
 800274e:	4807      	ldr	r0, [pc, #28]	@ (800276c <MX_TIM3_Init+0xec>)
 8002750:	f005 fb3a 	bl	8007dc8 <HAL_TIM_PWM_ConfigChannel>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800275a:	f000 f971 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800275e:	4803      	ldr	r0, [pc, #12]	@ (800276c <MX_TIM3_Init+0xec>)
 8002760:	f001 f824 	bl	80037ac <HAL_TIM_MspPostInit>

}
 8002764:	bf00      	nop
 8002766:	3728      	adds	r7, #40	@ 0x28
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	20000438 	.word	0x20000438
 8002770:	40000400 	.word	0x40000400

08002774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002778:	4b11      	ldr	r3, [pc, #68]	@ (80027c0 <MX_USART2_UART_Init+0x4c>)
 800277a:	4a12      	ldr	r2, [pc, #72]	@ (80027c4 <MX_USART2_UART_Init+0x50>)
 800277c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800277e:	4b10      	ldr	r3, [pc, #64]	@ (80027c0 <MX_USART2_UART_Init+0x4c>)
 8002780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002786:	4b0e      	ldr	r3, [pc, #56]	@ (80027c0 <MX_USART2_UART_Init+0x4c>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800278c:	4b0c      	ldr	r3, [pc, #48]	@ (80027c0 <MX_USART2_UART_Init+0x4c>)
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002792:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <MX_USART2_UART_Init+0x4c>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002798:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <MX_USART2_UART_Init+0x4c>)
 800279a:	220c      	movs	r2, #12
 800279c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800279e:	4b08      	ldr	r3, [pc, #32]	@ (80027c0 <MX_USART2_UART_Init+0x4c>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a4:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <MX_USART2_UART_Init+0x4c>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027aa:	4805      	ldr	r0, [pc, #20]	@ (80027c0 <MX_USART2_UART_Init+0x4c>)
 80027ac:	f005 fecc 	bl	8008548 <HAL_UART_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027b6:	f000 f943 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000480 	.word	0x20000480
 80027c4:	40004400 	.word	0x40004400

080027c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027cc:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <MX_USART3_UART_Init+0x4c>)
 80027ce:	4a12      	ldr	r2, [pc, #72]	@ (8002818 <MX_USART3_UART_Init+0x50>)
 80027d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <MX_USART3_UART_Init+0x4c>)
 80027d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80027d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027da:	4b0e      	ldr	r3, [pc, #56]	@ (8002814 <MX_USART3_UART_Init+0x4c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <MX_USART3_UART_Init+0x4c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <MX_USART3_UART_Init+0x4c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027ec:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <MX_USART3_UART_Init+0x4c>)
 80027ee:	220c      	movs	r2, #12
 80027f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027f2:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <MX_USART3_UART_Init+0x4c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f8:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <MX_USART3_UART_Init+0x4c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027fe:	4805      	ldr	r0, [pc, #20]	@ (8002814 <MX_USART3_UART_Init+0x4c>)
 8002800:	f005 fea2 	bl	8008548 <HAL_UART_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800280a:	f000 f919 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200004c8 	.word	0x200004c8
 8002818:	40004800 	.word	0x40004800

0800281c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002820:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <MX_USART6_UART_Init+0x4c>)
 8002822:	4a12      	ldr	r2, [pc, #72]	@ (800286c <MX_USART6_UART_Init+0x50>)
 8002824:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002826:	4b10      	ldr	r3, [pc, #64]	@ (8002868 <MX_USART6_UART_Init+0x4c>)
 8002828:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800282c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800282e:	4b0e      	ldr	r3, [pc, #56]	@ (8002868 <MX_USART6_UART_Init+0x4c>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002834:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <MX_USART6_UART_Init+0x4c>)
 8002836:	2200      	movs	r2, #0
 8002838:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800283a:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <MX_USART6_UART_Init+0x4c>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002840:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <MX_USART6_UART_Init+0x4c>)
 8002842:	220c      	movs	r2, #12
 8002844:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002846:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <MX_USART6_UART_Init+0x4c>)
 8002848:	2200      	movs	r2, #0
 800284a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800284c:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <MX_USART6_UART_Init+0x4c>)
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002852:	4805      	ldr	r0, [pc, #20]	@ (8002868 <MX_USART6_UART_Init+0x4c>)
 8002854:	f005 fe78 	bl	8008548 <HAL_UART_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800285e:	f000 f8ef 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000510 	.word	0x20000510
 800286c:	40011400 	.word	0x40011400

08002870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	4b0c      	ldr	r3, [pc, #48]	@ (80028ac <MX_DMA_Init+0x3c>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	4a0b      	ldr	r2, [pc, #44]	@ (80028ac <MX_DMA_Init+0x3c>)
 8002880:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002884:	6313      	str	r3, [r2, #48]	@ 0x30
 8002886:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <MX_DMA_Init+0x3c>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	2100      	movs	r1, #0
 8002896:	2039      	movs	r0, #57	@ 0x39
 8002898:	f002 fb71 	bl	8004f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800289c:	2039      	movs	r0, #57	@ 0x39
 800289e:	f002 fb8a 	bl	8004fb6 <HAL_NVIC_EnableIRQ>

}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800

080028b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	@ 0x28
 80028b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]
 80028c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	4b59      	ldr	r3, [pc, #356]	@ (8002a30 <MX_GPIO_Init+0x180>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	4a58      	ldr	r2, [pc, #352]	@ (8002a30 <MX_GPIO_Init+0x180>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d6:	4b56      	ldr	r3, [pc, #344]	@ (8002a30 <MX_GPIO_Init+0x180>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	4b52      	ldr	r3, [pc, #328]	@ (8002a30 <MX_GPIO_Init+0x180>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4a51      	ldr	r2, [pc, #324]	@ (8002a30 <MX_GPIO_Init+0x180>)
 80028ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f2:	4b4f      	ldr	r3, [pc, #316]	@ (8002a30 <MX_GPIO_Init+0x180>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	4b4b      	ldr	r3, [pc, #300]	@ (8002a30 <MX_GPIO_Init+0x180>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	4a4a      	ldr	r2, [pc, #296]	@ (8002a30 <MX_GPIO_Init+0x180>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6313      	str	r3, [r2, #48]	@ 0x30
 800290e:	4b48      	ldr	r3, [pc, #288]	@ (8002a30 <MX_GPIO_Init+0x180>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	4b44      	ldr	r3, [pc, #272]	@ (8002a30 <MX_GPIO_Init+0x180>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	4a43      	ldr	r2, [pc, #268]	@ (8002a30 <MX_GPIO_Init+0x180>)
 8002924:	f043 0302 	orr.w	r3, r3, #2
 8002928:	6313      	str	r3, [r2, #48]	@ 0x30
 800292a:	4b41      	ldr	r3, [pc, #260]	@ (8002a30 <MX_GPIO_Init+0x180>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, GPIO_PIN_RESET);
 8002936:	2200      	movs	r2, #0
 8002938:	2102      	movs	r1, #2
 800293a:	483e      	ldr	r0, [pc, #248]	@ (8002a34 <MX_GPIO_Init+0x184>)
 800293c:	f003 f866 	bl	8005a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WATERPUMP_GPIO_Port, WATERPUMP_Pin, GPIO_PIN_SET);
 8002940:	2201      	movs	r2, #1
 8002942:	2104      	movs	r1, #4
 8002944:	483b      	ldr	r0, [pc, #236]	@ (8002a34 <MX_GPIO_Init+0x184>)
 8002946:	f003 f861 	bl	8005a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800294a:	2200      	movs	r2, #0
 800294c:	2120      	movs	r1, #32
 800294e:	483a      	ldr	r0, [pc, #232]	@ (8002a38 <MX_GPIO_Init+0x188>)
 8002950:	f003 f85c 	bl	8005a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 8002954:	2200      	movs	r2, #0
 8002956:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800295a:	4838      	ldr	r0, [pc, #224]	@ (8002a3c <MX_GPIO_Init+0x18c>)
 800295c:	f003 f856 	bl	8005a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC11 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_11;
 8002960:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002966:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800296a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002970:	f107 0314 	add.w	r3, r7, #20
 8002974:	4619      	mov	r1, r3
 8002976:	482f      	ldr	r0, [pc, #188]	@ (8002a34 <MX_GPIO_Init+0x184>)
 8002978:	f002 feb4 	bl	80056e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AIRPUMP_Pin */
  GPIO_InitStruct.Pin = AIRPUMP_Pin;
 800297c:	2302      	movs	r3, #2
 800297e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002980:	2301      	movs	r3, #1
 8002982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002988:	2302      	movs	r3, #2
 800298a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AIRPUMP_GPIO_Port, &GPIO_InitStruct);
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	4619      	mov	r1, r3
 8002992:	4828      	ldr	r0, [pc, #160]	@ (8002a34 <MX_GPIO_Init+0x184>)
 8002994:	f002 fea6 	bl	80056e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WATERPUMP_Pin */
  GPIO_InitStruct.Pin = WATERPUMP_Pin;
 8002998:	2304      	movs	r3, #4
 800299a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299c:	2301      	movs	r3, #1
 800299e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029a0:	2301      	movs	r3, #1
 80029a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a4:	2300      	movs	r3, #0
 80029a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WATERPUMP_GPIO_Port, &GPIO_InitStruct);
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	4619      	mov	r1, r3
 80029ae:	4821      	ldr	r0, [pc, #132]	@ (8002a34 <MX_GPIO_Init+0x184>)
 80029b0:	f002 fe98 	bl	80056e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029b4:	2308      	movs	r3, #8
 80029b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029b8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	481a      	ldr	r0, [pc, #104]	@ (8002a34 <MX_GPIO_Init+0x184>)
 80029ca:	f002 fe8b 	bl	80056e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80029ce:	2320      	movs	r3, #32
 80029d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d2:	2301      	movs	r3, #1
 80029d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80029de:	f107 0314 	add.w	r3, r7, #20
 80029e2:	4619      	mov	r1, r3
 80029e4:	4814      	ldr	r0, [pc, #80]	@ (8002a38 <MX_GPIO_Init+0x188>)
 80029e6:	f002 fe7d 	bl	80056e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 80029ea:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80029ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f0:	2301      	movs	r3, #1
 80029f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	4619      	mov	r1, r3
 8002a02:	480e      	ldr	r0, [pc, #56]	@ (8002a3c <MX_GPIO_Init+0x18c>)
 8002a04:	f002 fe6e 	bl	80056e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	2009      	movs	r0, #9
 8002a0e:	f002 fab6 	bl	8004f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a12:	2009      	movs	r0, #9
 8002a14:	f002 facf 	bl	8004fb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2028      	movs	r0, #40	@ 0x28
 8002a1e:	f002 faae 	bl	8004f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a22:	2028      	movs	r0, #40	@ 0x28
 8002a24:	f002 fac7 	bl	8004fb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002a28:	bf00      	nop
 8002a2a:	3728      	adds	r7, #40	@ 0x28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40020800 	.word	0x40020800
 8002a38:	40020000 	.word	0x40020000
 8002a3c:	40020400 	.word	0x40020400

08002a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a44:	b672      	cpsid	i
}
 8002a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <Error_Handler+0x8>

08002a4c <Motion_Init>:
#include "uartcom.h"
#include "encoders.h"

extern UART_HandleTypeDef huart6;

void Motion_Init(Motion *motion, Controller *controller, Profile *forward, Profile *rotation) {
 8002a4c:	b4b0      	push	{r4, r5, r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
    motion->controller = *controller;  // Copy the controller structure
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4614      	mov	r4, r2
 8002a60:	461d      	mov	r5, r3
 8002a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a6a:	682b      	ldr	r3, [r5, #0]
 8002a6c:	6023      	str	r3, [r4, #0]
    motion->forward = *forward;        // Copy the forward profile structure
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8002a76:	4615      	mov	r5, r2
 8002a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a80:	682b      	ldr	r3, [r5, #0]
 8002a82:	6023      	str	r3, [r4, #0]
    motion->rotation = *rotation;      // Copy the rotation profile structure
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 8002a8c:	4615      	mov	r5, r2
 8002a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a96:	682b      	ldr	r3, [r5, #0]
 8002a98:	6023      	str	r3, [r4, #0]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bcb0      	pop	{r4, r5, r7}
 8002aa2:	4770      	bx	lr

08002aa4 <Motion_Velocity>:

float Motion_Position(Motion *motion) {
    return Profile_GetPosition(&(motion->forward));
}

float Motion_Velocity(Motion *motion) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->forward));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3324      	adds	r3, #36	@ 0x24
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 f92a 	bl	8002d0a <Profile_GetSpeed>
 8002ab6:	eef0 7a40 	vmov.f32	s15, s0
}
 8002aba:	eeb0 0a67 	vmov.f32	s0, s15
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <Motion_Omega>:

float Motion_Angle(Motion *motion) {
    return Profile_GetPosition(&(motion->rotation));
}

float Motion_Omega(Motion *motion) {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->rotation));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3348      	adds	r3, #72	@ 0x48
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 f91a 	bl	8002d0a <Profile_GetSpeed>
 8002ad6:	eef0 7a40 	vmov.f32	s15, s0
}
 8002ada:	eeb0 0a67 	vmov.f32	s0, s15
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <Motion_Update>:

void Motion_Turn_(Motion *motion, float angle, float omega, float final_speed, float alpha){
	Profile_Move(&(motion->rotation), angle, omega, final_speed, alpha);
}

void Motion_Update(Motion *motion) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
    Profile_Update(&(motion->forward));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3324      	adds	r3, #36	@ 0x24
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 f919 	bl	8002d28 <Profile_Update>
    Profile_Update(&(motion->rotation));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3348      	adds	r3, #72	@ 0x48
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 f914 	bl	8002d28 <Profile_Update>
    //UART_Transmit_Float(&huart6, ">V", motion->forward.speed, 2);
    //UART_Transmit_Float(&huart6, ">W", robot_speed(), 2);
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm > PWM_MAX)
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fd fd38 	bl	8000588 <__aeabi_f2d>
 8002b18:	a313      	add	r3, pc, #76	@ (adr r3, 8002b68 <limitPWM+0x60>)
 8002b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1e:	f7fe f81b 	bl	8000b58 <__aeabi_dcmpgt>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <limitPWM+0x24>
		return PWM_MAX;
 8002b28:	4b0d      	ldr	r3, [pc, #52]	@ (8002b60 <limitPWM+0x58>)
 8002b2a:	e00d      	b.n	8002b48 <limitPWM+0x40>
	else if (pwm < -PWM_MAX)
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7fd fd2b 	bl	8000588 <__aeabi_f2d>
 8002b32:	a309      	add	r3, pc, #36	@ (adr r3, 8002b58 <limitPWM+0x50>)
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	f7fd fff0 	bl	8000b1c <__aeabi_dcmplt>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <limitPWM+0x3e>
		return -PWM_MAX;
 8002b42:	4b08      	ldr	r3, [pc, #32]	@ (8002b64 <limitPWM+0x5c>)
 8002b44:	e000      	b.n	8002b48 <limitPWM+0x40>
	return pwm;
 8002b46:	687b      	ldr	r3, [r7, #4]
}
 8002b48:	ee07 3a90 	vmov	s15, r3
 8002b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	70a3d70a 	.word	0x70a3d70a
 8002b5c:	bfef0a3d 	.word	0xbfef0a3d
 8002b60:	3f7851ec 	.word	0x3f7851ec
 8002b64:	bf7851ec 	.word	0xbf7851ec
 8002b68:	70a3d70a 	.word	0x70a3d70a
 8002b6c:	3fef0a3d 	.word	0x3fef0a3d

08002b70 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8002b7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b86:	db13      	blt.n	8002bb0 <setMotorLPWM+0x40>
		TIM3->CCR4 = 0;
 8002b88:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf4 <setMotorLPWM+0x84>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002b8e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b92:	f7ff ffb9 	bl	8002b08 <limitPWM>
 8002b96:	eef0 7a40 	vmov.f32	s15, s0
 8002b9a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002bf8 <setMotorLPWM+0x88>
 8002b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ba2:	4b14      	ldr	r3, [pc, #80]	@ (8002bf4 <setMotorLPWM+0x84>)
 8002ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ba8:	ee17 2a90 	vmov	r2, s15
 8002bac:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else if (pwm < 0) {
		TIM3->CCR3 = 0;
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8002bae:	e01c      	b.n	8002bea <setMotorLPWM+0x7a>
	else if (pwm < 0) {
 8002bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbc:	d400      	bmi.n	8002bc0 <setMotorLPWM+0x50>
}
 8002bbe:	e014      	b.n	8002bea <setMotorLPWM+0x7a>
		TIM3->CCR3 = 0;
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf4 <setMotorLPWM+0x84>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002bc6:	ed97 0a01 	vldr	s0, [r7, #4]
 8002bca:	f7ff ff9d 	bl	8002b08 <limitPWM>
 8002bce:	eef0 7a40 	vmov.f32	s15, s0
 8002bd2:	eef1 7a67 	vneg.f32	s15, s15
 8002bd6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002bf8 <setMotorLPWM+0x88>
 8002bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bde:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <setMotorLPWM+0x84>)
 8002be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be4:	ee17 2a90 	vmov	r2, s15
 8002be8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	45e0f800 	.word	0x45e0f800

08002bfc <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8002c06:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c12:	db13      	blt.n	8002c3c <setMotorRPWM+0x40>
		TIM3->CCR2 = 0;
 8002c14:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <setMotorRPWM+0x84>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR1 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002c1a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002c1e:	f7ff ff73 	bl	8002b08 <limitPWM>
 8002c22:	eef0 7a40 	vmov.f32	s15, s0
 8002c26:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002c84 <setMotorRPWM+0x88>
 8002c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c2e:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <setMotorRPWM+0x84>)
 8002c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c34:	ee17 2a90 	vmov	r2, s15
 8002c38:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else if (pwm < 0) {
		TIM3->CCR1 = 0;
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8002c3a:	e01c      	b.n	8002c76 <setMotorRPWM+0x7a>
	else if (pwm < 0) {
 8002c3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c48:	d400      	bmi.n	8002c4c <setMotorRPWM+0x50>
}
 8002c4a:	e014      	b.n	8002c76 <setMotorRPWM+0x7a>
		TIM3->CCR1 = 0;
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <setMotorRPWM+0x84>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002c52:	ed97 0a01 	vldr	s0, [r7, #4]
 8002c56:	f7ff ff57 	bl	8002b08 <limitPWM>
 8002c5a:	eef0 7a40 	vmov.f32	s15, s0
 8002c5e:	eef1 7a67 	vneg.f32	s15, s15
 8002c62:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002c84 <setMotorRPWM+0x88>
 8002c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c6a:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <setMotorRPWM+0x84>)
 8002c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c70:	ee17 2a90 	vmov	r2, s15
 8002c74:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40000400 	.word	0x40000400
 8002c84:	45e0f800 	.word	0x45e0f800

08002c88 <Profile_Reset>:
#include "ssd1306.h"
#include "fonts.h"
#include <stdio.h>

// Reset the profile
void Profile_Reset(Profile *profile) {
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
    profile->position = 0;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
    profile->speed = 0;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	605a      	str	r2, [r3, #4]
    profile->target_speed = 0;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
    profile->state = PS_IDLE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <Profile_GetBrakingDistance>:
        HAL_Delay(2);
    }
}

// Get the braking distance
float Profile_GetBrakingDistance(const Profile *profile) {
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
    return fabsf(profile->speed * profile->speed - profile->final_speed * profile->final_speed) * 0.5f * profile->one_over_acc;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	ed93 7a01 	vldr	s14, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	edd3 6a07 	vldr	s13, [r3, #28]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ce6:	eef0 7ae7 	vabs.f32	s15, s15
 8002cea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002cee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <Profile_GetSpeed>:
float Profile_GetPosition(const Profile *profile) {
    return profile->position;
}

// Get the current speed
float Profile_GetSpeed(const Profile *profile) {
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
    return profile->speed;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	ee07 3a90 	vmov	s15, r3
}
 8002d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <Profile_Update>:
void Profile_SetPosition(Profile *profile, float position) {
    profile->position = position;
}

// Update the profile
void Profile_Update(Profile *profile) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
    if (profile->state == PS_IDLE) return;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 80b5 	beq.w	8002ea6 <Profile_Update+0x17e>

    float delta_v = profile->acceleration * LOOP_INTERVAL;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002d42:	4b5b      	ldr	r3, [pc, #364]	@ (8002eb0 <Profile_Update+0x188>)
 8002d44:	edd3 7a00 	vldr	s15, [r3]
 8002d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4c:	edc7 7a03 	vstr	s15, [r7, #12]
    float remaining = fabsf(profile->final_position) - fabsf(profile->position);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d56:	eeb0 7ae7 	vabs.f32	s14, s15
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d60:	eef0 7ae7 	vabs.f32	s15, s15
 8002d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d68:	edc7 7a02 	vstr	s15, [r7, #8]

    if (profile->state == PS_ACCELERATING) {
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d128      	bne.n	8002dc8 <Profile_Update+0xa0>
        if (remaining < Profile_GetBrakingDistance(profile)) {
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff ff9f 	bl	8002cba <Profile_GetBrakingDistance>
 8002d7c:	eeb0 7a40 	vmov.f32	s14, s0
 8002d80:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8c:	d51c      	bpl.n	8002dc8 <Profile_Update+0xa0>
            profile->state = PS_BRAKING;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2202      	movs	r2, #2
 8002d92:	701a      	strb	r2, [r3, #0]
            profile->target_speed = (profile->final_speed == 0) ? (profile->sign * 5.0f) : profile->final_speed;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da2:	d10b      	bne.n	8002dbc <Profile_Update+0x94>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002daa:	ee07 3a90 	vmov	s15, r3
 8002dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002db2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dba:	e002      	b.n	8002dc2 <Profile_Update+0x9a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	edc3 7a06 	vstr	s15, [r3, #24]
        }
    }

    if (profile->speed < profile->target_speed) {
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	edd3 7a06 	vldr	s15, [r3, #24]
 8002dd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ddc:	d519      	bpl.n	8002e12 <Profile_Update+0xea>
        profile->speed += delta_v;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002de4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed > profile->target_speed) profile->speed = profile->target_speed;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	ed93 7a01 	vldr	s14, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	edd3 7a06 	vldr	s15, [r3, #24]
 8002dfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e06:	dd28      	ble.n	8002e5a <Profile_Update+0x132>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	e023      	b.n	8002e5a <Profile_Update+0x132>
    } else if (profile->speed > profile->target_speed) {
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e26:	dd18      	ble.n	8002e5a <Profile_Update+0x132>
        profile->speed -= delta_v;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed < profile->target_speed) profile->speed = profile->target_speed;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e50:	d503      	bpl.n	8002e5a <Profile_Update+0x132>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	605a      	str	r2, [r3, #4]
    }

    profile->position += profile->speed * LOOP_INTERVAL;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e60:	4b13      	ldr	r3, [pc, #76]	@ (8002eb0 <Profile_Update+0x188>)
 8002e62:	edd3 7a00 	vldr	s15, [r3]
 8002e66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	edc3 7a02 	vstr	s15, [r3, #8]

    if (profile->state != PS_FINISHED && remaining < 0.125f) {
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d011      	beq.n	8002ea8 <Profile_Update+0x180>
 8002e84:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e88:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8002e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e94:	d508      	bpl.n	8002ea8 <Profile_Update+0x180>
        profile->state = PS_FINISHED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2203      	movs	r2, #3
 8002e9a:	701a      	strb	r2, [r3, #0]
        profile->target_speed = profile->final_speed;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	619a      	str	r2, [r3, #24]
 8002ea4:	e000      	b.n	8002ea8 <Profile_Update+0x180>
    if (profile->state == PS_IDLE) return;
 8002ea6:	bf00      	nop
    }

}
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	0800c4c0 	.word	0x0800c4c0

08002eb4 <RAYKHA_ReadRaw>:
/**
 * @brief Read raw values from all sensors
 * @param sensor_values Array to store the raw sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 */
void RAYKHA_ReadRaw(uint16_t *sensor_values)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
    // Read each sensor
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	73fb      	strb	r3, [r7, #15]
 8002ec0:	e00c      	b.n	8002edc <RAYKHA_ReadRaw+0x28>
    {
        sensor_values[i] = AnalogMux_ReadChannel(RAYKHA_FIRST_MUX_CHANNEL + i);
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	18d4      	adds	r4, r2, r3
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe f93d 	bl	800114c <AnalogMux_ReadChannel>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	2b09      	cmp	r3, #9
 8002ee0:	d9ef      	bls.n	8002ec2 <RAYKHA_ReadRaw+0xe>
    }
}
 8002ee2:	bf00      	nop
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd90      	pop	{r4, r7, pc}

08002eec <RAYKHA_ReadCalibrated>:
 * @brief Read calibrated values from all sensors
 * @param sensor_values Array to store the calibrated sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 * @param calibration Pointer to calibration data structure
 */
void RAYKHA_ReadCalibrated(uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8002eec:	b5b0      	push	{r4, r5, r7, lr}
 8002eee:	b08a      	sub	sp, #40	@ 0x28
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
    uint16_t raw_values[RAYKHA_NUM_SENSORS];

    // Read raw values
    RAYKHA_ReadRaw(raw_values);
 8002ef6:	f107 0308 	add.w	r3, r7, #8
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ffda 	bl	8002eb4 <RAYKHA_ReadRaw>

    // Apply calibration
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002f00:	2300      	movs	r3, #0
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e05a      	b.n	8002fbc <RAYKHA_ReadCalibrated+0xd0>
    {
        if (raw_values[i] < calibration->min_values[i])
 8002f06:	7ffb      	ldrb	r3, [r7, #31]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	3320      	adds	r3, #32
 8002f0c:	443b      	add	r3, r7
 8002f0e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002f12:	7ff9      	ldrb	r1, [r7, #31]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d206      	bcs.n	8002f2c <RAYKHA_ReadCalibrated+0x40>
        {
            sensor_values[i] = 0;
 8002f1e:	7ffb      	ldrb	r3, [r7, #31]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	2200      	movs	r2, #0
 8002f28:	801a      	strh	r2, [r3, #0]
 8002f2a:	e044      	b.n	8002fb6 <RAYKHA_ReadCalibrated+0xca>
        }
        else if (raw_values[i] > calibration->max_values[i])
 8002f2c:	7ffb      	ldrb	r3, [r7, #31]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	3320      	adds	r3, #32
 8002f32:	443b      	add	r3, r7
 8002f34:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002f38:	7ffb      	ldrb	r3, [r7, #31]
 8002f3a:	6839      	ldr	r1, [r7, #0]
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	440b      	add	r3, r1
 8002f42:	889b      	ldrh	r3, [r3, #4]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d907      	bls.n	8002f58 <RAYKHA_ReadCalibrated+0x6c>
        {
            sensor_values[i] = 1000;
 8002f48:	7ffb      	ldrb	r3, [r7, #31]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f54:	801a      	strh	r2, [r3, #0]
 8002f56:	e02e      	b.n	8002fb6 <RAYKHA_ReadCalibrated+0xca>
        }
        else
        {
            // Map to 0-1000 range
            sensor_values[i] = map_range(raw_values[i],
 8002f58:	7ffb      	ldrb	r3, [r7, #31]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	3320      	adds	r3, #32
 8002f5e:	443b      	add	r3, r7
 8002f60:	f833 0c18 	ldrh.w	r0, [r3, #-24]
 8002f64:	7ffa      	ldrb	r2, [r7, #31]
                                        calibration->min_values[i],
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
            sensor_values[i] = map_range(raw_values[i],
 8002f6c:	7ffb      	ldrb	r3, [r7, #31]
                                        calibration->max_values[i],
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	3308      	adds	r3, #8
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	889d      	ldrh	r5, [r3, #4]
            sensor_values[i] = map_range(raw_values[i],
 8002f78:	7ffb      	ldrb	r3, [r7, #31]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	18d4      	adds	r4, r2, r3
 8002f80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2300      	movs	r3, #0
 8002f88:	462a      	mov	r2, r5
 8002f8a:	f000 f879 	bl	8003080 <map_range>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	8023      	strh	r3, [r4, #0]
                                        0, 1000);

		// Invert if needed (for white line on black background)
		if (calibration->line_type == RAYKHA_LINE_WHITE)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d10c      	bne.n	8002fb6 <RAYKHA_ReadCalibrated+0xca>
		{
			sensor_values[i] = 1000 - sensor_values[i];
 8002f9c:	7ffb      	ldrb	r3, [r7, #31]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	881a      	ldrh	r2, [r3, #0]
 8002fa6:	7ffb      	ldrb	r3, [r7, #31]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	440b      	add	r3, r1
 8002fae:	f5c2 727a 	rsb	r2, r2, #1000	@ 0x3e8
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002fb6:	7ffb      	ldrb	r3, [r7, #31]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	7ffb      	ldrb	r3, [r7, #31]
 8002fbe:	2b09      	cmp	r3, #9
 8002fc0:	d9a1      	bls.n	8002f06 <RAYKHA_ReadCalibrated+0x1a>
		}
        }
    }
}
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
 8002fc6:	3720      	adds	r7, #32
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bdb0      	pop	{r4, r5, r7, pc}

08002fcc <RAYKHA_GetLinePosition>:
 * @param calibration Pointer to calibration data structure
 * @return Line position (0 to 7000, where 0 is the leftmost sensor and 7000 is the rightmost sensor)
 *         Returns -1 if no line is detected
 */
int32_t RAYKHA_GetLinePosition(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
    uint32_t weighted_sum = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
    uint32_t sum = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
    uint8_t line_detected = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]

    // Calculate weighted average
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73bb      	strb	r3, [r7, #14]
 8002fe6:	e01c      	b.n	8003022 <RAYKHA_GetLinePosition+0x56>
    {
        uint16_t value = sensor_values[i];
 8002fe8:	7bbb      	ldrb	r3, [r7, #14]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	4413      	add	r3, r2
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	81bb      	strh	r3, [r7, #12]

        // A value above 200 indicates a line
        if (value > 200)
 8002ff4:	89bb      	ldrh	r3, [r7, #12]
 8002ff6:	2bc8      	cmp	r3, #200	@ 0xc8
 8002ff8:	d901      	bls.n	8002ffe <RAYKHA_GetLinePosition+0x32>
        {
            line_detected = 1;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
        }

        weighted_sum += (uint32_t)value * (i * 1000);
 8002ffe:	89bb      	ldrh	r3, [r7, #12]
 8003000:	7bba      	ldrb	r2, [r7, #14]
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800300a:	fb02 f303 	mul.w	r3, r2, r3
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4413      	add	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
        sum += value;
 8003014:	89bb      	ldrh	r3, [r7, #12]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 800301c:	7bbb      	ldrb	r3, [r7, #14]
 800301e:	3301      	adds	r3, #1
 8003020:	73bb      	strb	r3, [r7, #14]
 8003022:	7bbb      	ldrb	r3, [r7, #14]
 8003024:	2b09      	cmp	r3, #9
 8003026:	d9df      	bls.n	8002fe8 <RAYKHA_GetLinePosition+0x1c>
    }

    // Check if line is detected
    if (!line_detected || sum < 100)
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <RAYKHA_GetLinePosition+0x68>
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	2b63      	cmp	r3, #99	@ 0x63
 8003032:	d802      	bhi.n	800303a <RAYKHA_GetLinePosition+0x6e>
    {
        return -1;
 8003034:	f04f 33ff 	mov.w	r3, #4294967295
 8003038:	e003      	b.n	8003042 <RAYKHA_GetLinePosition+0x76>
    }

    return weighted_sum / sum;
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003042:	4618      	mov	r0, r3
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <RAYKHA_GetPositionForPID>:
 * @param calibration Pointer to calibration data structure
 * @return Line position centered around 0 (-3500 to 3500)
 *         Returns a large value (9999) if no line is detected
 */
int32_t RAYKHA_GetPositionForPID(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
    int32_t position = RAYKHA_GetLinePosition(sensor_values, calibration);
 8003058:	6839      	ldr	r1, [r7, #0]
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff ffb6 	bl	8002fcc <RAYKHA_GetLinePosition>
 8003060:	60f8      	str	r0, [r7, #12]

    // If no line detected, return a large value
    if (position == -1)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d102      	bne.n	8003070 <RAYKHA_GetPositionForPID+0x22>
    {
        return 9999;
 800306a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800306e:	e003      	b.n	8003078 <RAYKHA_GetPositionForPID+0x2a>
    }

    // Center the position around 0
    // The center of the sensor array is at 3500
    return position - 4500;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 8003076:	3b14      	subs	r3, #20
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <map_range>:
 * @param out_min Minimum output value
 * @param out_max Maximum output value
 * @return Mapped value
 */
static uint16_t map_range(uint16_t value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 8003080:	b490      	push	{r4, r7}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	4604      	mov	r4, r0
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4623      	mov	r3, r4
 8003090:	80fb      	strh	r3, [r7, #6]
 8003092:	4603      	mov	r3, r0
 8003094:	80bb      	strh	r3, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	807b      	strh	r3, [r7, #2]
 800309a:	4613      	mov	r3, r2
 800309c:	803b      	strh	r3, [r7, #0]
    // Check for division by zero
    if (in_max <= in_min) return out_min;
 800309e:	887a      	ldrh	r2, [r7, #2]
 80030a0:	88bb      	ldrh	r3, [r7, #4]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d801      	bhi.n	80030aa <map_range+0x2a>
 80030a6:	883b      	ldrh	r3, [r7, #0]
 80030a8:	e01d      	b.n	80030e6 <map_range+0x66>

    // Map the value
    int32_t result = (int32_t)(value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80030aa:	88fa      	ldrh	r2, [r7, #6]
 80030ac:	88bb      	ldrh	r3, [r7, #4]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	8b39      	ldrh	r1, [r7, #24]
 80030b2:	883a      	ldrh	r2, [r7, #0]
 80030b4:	1a8a      	subs	r2, r1, r2
 80030b6:	fb03 f202 	mul.w	r2, r3, r2
 80030ba:	8879      	ldrh	r1, [r7, #2]
 80030bc:	88bb      	ldrh	r3, [r7, #4]
 80030be:	1acb      	subs	r3, r1, r3
 80030c0:	fb92 f2f3 	sdiv	r2, r2, r3
 80030c4:	883b      	ldrh	r3, [r7, #0]
 80030c6:	4413      	add	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

    // Constrain the result
    if (result < out_min) result = out_min;
 80030ca:	883b      	ldrh	r3, [r7, #0]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	da01      	bge.n	80030d6 <map_range+0x56>
 80030d2:	883b      	ldrh	r3, [r7, #0]
 80030d4:	60fb      	str	r3, [r7, #12]
    if (result > out_max) result = out_max;
 80030d6:	8b3b      	ldrh	r3, [r7, #24]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	429a      	cmp	r2, r3
 80030dc:	dd01      	ble.n	80030e2 <map_range+0x62>
 80030de:	8b3b      	ldrh	r3, [r7, #24]
 80030e0:	60fb      	str	r3, [r7, #12]

    return (uint16_t)result;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	b29b      	uxth	r3, r3
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc90      	pop	{r4, r7}
 80030ee:	4770      	bx	lr

080030f0 <HandleLineDetection>:

/**
 * @brief Handle line detection data from Raspberry Pi
 * @param data Line detection data
 */
void HandleLineDetection(uint8_t *data) {
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Extract line position and orientation */
  int8_t linePosition = (int8_t)data[0]; // Negative = left, Positive = right, 0 = center
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	73fb      	strb	r3, [r7, #15]
  uint8_t lineAngle = data[1];           // Line angle in degrees
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	785b      	ldrb	r3, [r3, #1]
 8003102:	73bb      	strb	r3, [r7, #14]
    //TurnRight();
  } else {
    /* Go straight */
    //MoveForward();
  }
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HandleGridPosition>:

/**
 * @brief Handle grid position data from Raspberry Pi
 * @param data Grid position data
 */
void HandleGridPosition(uint8_t *data) {
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Extract grid coordinates */
  uint8_t gridX = data[0];
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	73fb      	strb	r3, [r7, #15]
  uint8_t gridY = data[1];
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	785b      	ldrb	r3, [r3, #1]
 8003122:	73bb      	strb	r3, [r7, #14]
  uint8_t orientation = data[2]; // 0=N, 1=E, 2=S, 3=W
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	789b      	ldrb	r3, [r3, #2]
 8003128:	737b      	strb	r3, [r7, #13]

  /* Use grid position for navigation */
  //NavigateGrid(gridX, gridY, orientation);
}
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HandleColorDetection>:

/**
 * @brief Handle color detection data from Raspberry Pi
 * @param data Color detection data
 */
void HandleColorDetection(uint8_t *data) {
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
//      break;
//    default:
//      /* Unknown color */
//      break;
//  }
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <HandleLineColorDetection>:

void HandleLineColorDetection(uint8_t *data){
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
	uint8_t colorId = data[0];
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	73fb      	strb	r3, [r7, #15]

	uint8_t ballId = data[1];
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	73bb      	strb	r3, [r7, #14]

	//handlecount++;

	switch (colorId) {
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HandleLineColorDetection+0x20>
 8003166:	2b01      	cmp	r3, #1
 8003168:	d004      	beq.n	8003174 <HandleLineColorDetection+0x28>
 800316a:	e007      	b.n	800317c <HandleLineColorDetection+0x30>
	case 0: /* Red */
		linecolorRPI = WHITE;
 800316c:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <HandleLineColorDetection+0x68>)
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
	  break;
 8003172:	e007      	b.n	8003184 <HandleLineColorDetection+0x38>
	case 1: /* Green */
		linecolorRPI = GREEN;
 8003174:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <HandleLineColorDetection+0x68>)
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
	  break;
 800317a:	e003      	b.n	8003184 <HandleLineColorDetection+0x38>
	default:
	  /* Unknown color */
		linecolorRPI = WHITE;
 800317c:	4b0d      	ldr	r3, [pc, #52]	@ (80031b4 <HandleLineColorDetection+0x68>)
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
	  break;
 8003182:	bf00      	nop
	}

	switch(ballId){
 8003184:	7bbb      	ldrb	r3, [r7, #14]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HandleLineColorDetection+0x44>
 800318a:	2b01      	cmp	r3, #1
 800318c:	d004      	beq.n	8003198 <HandleLineColorDetection+0x4c>
 800318e:	e007      	b.n	80031a0 <HandleLineColorDetection+0x54>
	case 0:
		ballcolorRPI = WHITE_BALL;
 8003190:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <HandleLineColorDetection+0x6c>)
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]
		break;
 8003196:	e007      	b.n	80031a8 <HandleLineColorDetection+0x5c>
	case 1:
		ballcolorRPI = YELLOW_BALL;
 8003198:	4b07      	ldr	r3, [pc, #28]	@ (80031b8 <HandleLineColorDetection+0x6c>)
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]
		break;
 800319e:	e003      	b.n	80031a8 <HandleLineColorDetection+0x5c>
	default:
		ballcolorRPI = WHITE_BALL;
 80031a0:	4b05      	ldr	r3, [pc, #20]	@ (80031b8 <HandleLineColorDetection+0x6c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
		break;
 80031a6:	bf00      	nop
	}
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	200006c0 	.word	0x200006c0
 80031b8:	200006c1 	.word	0x200006c1

080031bc <DetectJunction>:
/**
 * Detects junctions during line following
 * @return JunctionType enum value indicating the type of junction detected
 */
int numberOfSensorsOnWhite = 0;
JunctionType DetectJunction() {
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
	numberOfSensorsOnWhite = 0;
 80031c2:	4b23      	ldr	r3, [pc, #140]	@ (8003250 <DetectJunction+0x94>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < RAYKHA_NUM_SENSORS; i++){
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	e00e      	b.n	80031ec <DetectJunction+0x30>
		if(sensor_values[i] > LINE_THRESHOLD){
 80031ce:	4a21      	ldr	r2, [pc, #132]	@ (8003254 <DetectJunction+0x98>)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031d6:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80031da:	d904      	bls.n	80031e6 <DetectJunction+0x2a>
			numberOfSensorsOnWhite++;
 80031dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003250 <DetectJunction+0x94>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003250 <DetectJunction+0x94>)
 80031e4:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < RAYKHA_NUM_SENSORS; i++){
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	3301      	adds	r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b09      	cmp	r3, #9
 80031f0:	dded      	ble.n	80031ce <DetectJunction+0x12>
		}
	}

	int leftSensorValue = sensor_values[0];
 80031f2:	4b18      	ldr	r3, [pc, #96]	@ (8003254 <DetectJunction+0x98>)
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	60bb      	str	r3, [r7, #8]
	int rightSensorValue = sensor_values[RAYKHA_NUM_SENSORS - 1];
 80031f8:	4b16      	ldr	r3, [pc, #88]	@ (8003254 <DetectJunction+0x98>)
 80031fa:	8a5b      	ldrh	r3, [r3, #18]
 80031fc:	607b      	str	r3, [r7, #4]

	if(numberOfSensorsOnWhite > SENSORS_ON_LINE_FOR_JUNCTION_CHECK){
 80031fe:	4b14      	ldr	r3, [pc, #80]	@ (8003250 <DetectJunction+0x94>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b05      	cmp	r3, #5
 8003204:	dd17      	ble.n	8003236 <DetectJunction+0x7a>
		if (leftSensorValue > LINE_THRESHOLD && rightSensorValue > LINE_THRESHOLD){
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800320c:	dd05      	ble.n	800321a <DetectJunction+0x5e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003214:	dd01      	ble.n	800321a <DetectJunction+0x5e>
			return T_JUNCTION;
 8003216:	2303      	movs	r3, #3
 8003218:	e014      	b.n	8003244 <DetectJunction+0x88>
		}
		else if (leftSensorValue > LINE_THRESHOLD){
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003220:	dd01      	ble.n	8003226 <DetectJunction+0x6a>
			return LEFT_JUNCTION;
 8003222:	2301      	movs	r3, #1
 8003224:	e00e      	b.n	8003244 <DetectJunction+0x88>
		}
		else if (rightSensorValue > LINE_THRESHOLD){
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800322c:	dd01      	ble.n	8003232 <DetectJunction+0x76>
			return RIGHT_JUNCTION;
 800322e:	2302      	movs	r3, #2
 8003230:	e008      	b.n	8003244 <DetectJunction+0x88>
		}
		else{
			return STRAIGHT_LINE;
 8003232:	2304      	movs	r3, #4
 8003234:	e006      	b.n	8003244 <DetectJunction+0x88>
		}
	}
	else if(numberOfSensorsOnWhite == 0){
 8003236:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <DetectJunction+0x94>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <DetectJunction+0x86>
		return NO_LINE;
 800323e:	2300      	movs	r3, #0
 8003240:	e000      	b.n	8003244 <DetectJunction+0x88>
	}
	else{
		return STRAIGHT_LINE;
 8003242:	2304      	movs	r3, #4
	}
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	20000714 	.word	0x20000714
 8003254:	200006f8 	.word	0x200006f8

08003258 <get_steering_feedback>:
	rfs.raw = 0;
	rws.raw = 0;
}


float get_steering_feedback() {
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return m_steering_adjustment;
 800325c:	4b04      	ldr	r3, [pc, #16]	@ (8003270 <get_steering_feedback+0x18>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	ee07 3a90 	vmov	s15, r3
}
 8003264:	eeb0 0a67 	vmov.f32	s0, s15
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	200006cc 	.word	0x200006cc

08003274 <CalculateSteeringAdjustment>:




/* Calculate steering adjustment */
float CalculateSteeringAdjustment() {
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
    float pTerm = STEERING_KP * m_cross_track_error;
 800327a:	4b26      	ldr	r3, [pc, #152]	@ (8003314 <CalculateSteeringAdjustment+0xa0>)
 800327c:	ed93 7a00 	vldr	s14, [r3]
 8003280:	4b25      	ldr	r3, [pc, #148]	@ (8003318 <CalculateSteeringAdjustment+0xa4>)
 8003282:	edd3 7a00 	vldr	s15, [r3]
 8003286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800328a:	edc7 7a03 	vstr	s15, [r7, #12]
    float dTerm = STEERING_KD * (m_cross_track_error - m_last_steering_error);
 800328e:	4b22      	ldr	r3, [pc, #136]	@ (8003318 <CalculateSteeringAdjustment+0xa4>)
 8003290:	ed93 7a00 	vldr	s14, [r3]
 8003294:	4b21      	ldr	r3, [pc, #132]	@ (800331c <CalculateSteeringAdjustment+0xa8>)
 8003296:	edd3 7a00 	vldr	s15, [r3]
 800329a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800329e:	4b20      	ldr	r3, [pc, #128]	@ (8003320 <CalculateSteeringAdjustment+0xac>)
 80032a0:	edd3 7a00 	vldr	s15, [r3]
 80032a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a8:	edc7 7a02 	vstr	s15, [r7, #8]
    float adjustment = pTerm + dTerm * LOOP_FREQUENCY;
 80032ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003324 <CalculateSteeringAdjustment+0xb0>)
 80032ae:	ed93 7a00 	vldr	s14, [r3]
 80032b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80032b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80032be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c2:	edc7 7a01 	vstr	s15, [r7, #4]
    adjustment = fminf(fmaxf(adjustment, -STEERING_ADJUST_LIMIT), STEERING_ADJUST_LIMIT);
 80032c6:	4b18      	ldr	r3, [pc, #96]	@ (8003328 <CalculateSteeringAdjustment+0xb4>)
 80032c8:	edd3 7a00 	vldr	s15, [r3]
 80032cc:	eef1 7a67 	vneg.f32	s15, s15
 80032d0:	eef0 0a67 	vmov.f32	s1, s15
 80032d4:	ed97 0a01 	vldr	s0, [r7, #4]
 80032d8:	f008 ff84 	bl	800c1e4 <fmaxf>
 80032dc:	eeb0 7a40 	vmov.f32	s14, s0
 80032e0:	4b11      	ldr	r3, [pc, #68]	@ (8003328 <CalculateSteeringAdjustment+0xb4>)
 80032e2:	edd3 7a00 	vldr	s15, [r3]
 80032e6:	eef0 0a67 	vmov.f32	s1, s15
 80032ea:	eeb0 0a47 	vmov.f32	s0, s14
 80032ee:	f008 ff96 	bl	800c21e <fminf>
 80032f2:	ed87 0a01 	vstr	s0, [r7, #4]
    m_last_steering_error = m_cross_track_error;
 80032f6:	4b08      	ldr	r3, [pc, #32]	@ (8003318 <CalculateSteeringAdjustment+0xa4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a08      	ldr	r2, [pc, #32]	@ (800331c <CalculateSteeringAdjustment+0xa8>)
 80032fc:	6013      	str	r3, [r2, #0]
    m_steering_adjustment = adjustment;
 80032fe:	4a0b      	ldr	r2, [pc, #44]	@ (800332c <CalculateSteeringAdjustment+0xb8>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6013      	str	r3, [r2, #0]
    return adjustment;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	ee07 3a90 	vmov	s15, r3
}
 800330a:	eeb0 0a67 	vmov.f32	s0, s15
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	0800c4e0 	.word	0x0800c4e0
 8003318:	200006c8 	.word	0x200006c8
 800331c:	200006c4 	.word	0x200006c4
 8003320:	0800c4e4 	.word	0x0800c4e4
 8003324:	0800c4bc 	.word	0x0800c4bc
 8003328:	0800c4e8 	.word	0x0800c4e8
 800332c:	200006cc 	.word	0x200006cc

08003330 <Sensors_Update>:
	    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
}


/* Update sensor readings and calculate cross-track error */
void Sensors_Update() {
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
    // Read ADC values for all sensor channels
	int error = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	607b      	str	r3, [r7, #4]

	if(g_steering_mode == STEERING_CENTER_LINE_FOLLOW){
 800333a:	4b3e      	ldr	r3, [pc, #248]	@ (8003434 <Sensors_Update+0x104>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b06      	cmp	r3, #6
 8003342:	d114      	bne.n	800336e <Sensors_Update+0x3e>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 8003344:	493c      	ldr	r1, [pc, #240]	@ (8003438 <Sensors_Update+0x108>)
 8003346:	483d      	ldr	r0, [pc, #244]	@ (800343c <Sensors_Update+0x10c>)
 8003348:	f7ff fdd0 	bl	8002eec <RAYKHA_ReadCalibrated>

		/* Get position for PID controller (centered around 0) */
		line_position = RAYKHA_GetPositionForPID(sensor_values, &raykha_calibration);
 800334c:	493a      	ldr	r1, [pc, #232]	@ (8003438 <Sensors_Update+0x108>)
 800334e:	483b      	ldr	r0, [pc, #236]	@ (800343c <Sensors_Update+0x10c>)
 8003350:	f7ff fe7d 	bl	800304e <RAYKHA_GetPositionForPID>
 8003354:	4603      	mov	r3, r0
 8003356:	4a3a      	ldr	r2, [pc, #232]	@ (8003440 <Sensors_Update+0x110>)
 8003358:	6013      	str	r3, [r2, #0]

		error = line_position;
 800335a:	4b39      	ldr	r3, [pc, #228]	@ (8003440 <Sensors_Update+0x110>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	607b      	str	r3, [r7, #4]

		junction = DetectJunction();
 8003360:	f7ff ff2c 	bl	80031bc <DetectJunction>
 8003364:	4603      	mov	r3, r0
 8003366:	461a      	mov	r2, r3
 8003368:	4b36      	ldr	r3, [pc, #216]	@ (8003444 <Sensors_Update+0x114>)
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e054      	b.n	8003418 <Sensors_Update+0xe8>
	}
	else if(g_steering_mode == STEERING_OFF_READLINE){
 800336e:	4b31      	ldr	r3, [pc, #196]	@ (8003434 <Sensors_Update+0x104>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b04      	cmp	r3, #4
 8003376:	d10a      	bne.n	800338e <Sensors_Update+0x5e>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 8003378:	492f      	ldr	r1, [pc, #188]	@ (8003438 <Sensors_Update+0x108>)
 800337a:	4830      	ldr	r0, [pc, #192]	@ (800343c <Sensors_Update+0x10c>)
 800337c:	f7ff fdb6 	bl	8002eec <RAYKHA_ReadCalibrated>
		junction = DetectJunction();
 8003380:	f7ff ff1c 	bl	80031bc <DetectJunction>
 8003384:	4603      	mov	r3, r0
 8003386:	461a      	mov	r2, r3
 8003388:	4b2e      	ldr	r3, [pc, #184]	@ (8003444 <Sensors_Update+0x114>)
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	e044      	b.n	8003418 <Sensors_Update+0xe8>
	}
	else if(g_steering_mode == STEER_NORMAL){
 800338e:	4b29      	ldr	r3, [pc, #164]	@ (8003434 <Sensors_Update+0x104>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d11e      	bne.n	80033d6 <Sensors_Update+0xa6>
		if(lws.raw < 500)lws.raw = 500;
 8003398:	4b2b      	ldr	r3, [pc, #172]	@ (8003448 <Sensors_Update+0x118>)
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80033a2:	d203      	bcs.n	80033ac <Sensors_Update+0x7c>
 80033a4:	4b28      	ldr	r3, [pc, #160]	@ (8003448 <Sensors_Update+0x118>)
 80033a6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80033aa:	801a      	strh	r2, [r3, #0]
		if(rws.raw < 500)rws.raw = 500;
 80033ac:	4b27      	ldr	r3, [pc, #156]	@ (800344c <Sensors_Update+0x11c>)
 80033ae:	881b      	ldrh	r3, [r3, #0]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80033b6:	d203      	bcs.n	80033c0 <Sensors_Update+0x90>
 80033b8:	4b24      	ldr	r3, [pc, #144]	@ (800344c <Sensors_Update+0x11c>)
 80033ba:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80033be:	801a      	strh	r2, [r3, #0]
		if(cfs.raw < 400)cfs.raw = 400;
 80033c0:	4b23      	ldr	r3, [pc, #140]	@ (8003450 <Sensors_Update+0x120>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80033ca:	d225      	bcs.n	8003418 <Sensors_Update+0xe8>
 80033cc:	4b20      	ldr	r3, [pc, #128]	@ (8003450 <Sensors_Update+0x120>)
 80033ce:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	e020      	b.n	8003418 <Sensors_Update+0xe8>
		//UART_Transmit_Int(&huart6, ">R", rws.value);

		// Update wall detection flags

    }
    else if(g_steering_mode == STEERING_FRONT_WALL){
 80033d6:	4b17      	ldr	r3, [pc, #92]	@ (8003434 <Sensors_Update+0x104>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b05      	cmp	r3, #5
 80033de:	d11b      	bne.n	8003418 <Sensors_Update+0xe8>


    	if(lfs.raw > 250)lfs.raw = 250;
 80033e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003454 <Sensors_Update+0x124>)
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2bfa      	cmp	r3, #250	@ 0xfa
 80033e8:	d902      	bls.n	80033f0 <Sensors_Update+0xc0>
 80033ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003454 <Sensors_Update+0x124>)
 80033ec:	22fa      	movs	r2, #250	@ 0xfa
 80033ee:	801a      	strh	r2, [r3, #0]
		if(rfs.raw > 230)rfs.raw = 230;
 80033f0:	4b19      	ldr	r3, [pc, #100]	@ (8003458 <Sensors_Update+0x128>)
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2be6      	cmp	r3, #230	@ 0xe6
 80033f8:	d902      	bls.n	8003400 <Sensors_Update+0xd0>
 80033fa:	4b17      	ldr	r3, [pc, #92]	@ (8003458 <Sensors_Update+0x128>)
 80033fc:	22e6      	movs	r2, #230	@ 0xe6
 80033fe:	801a      	strh	r2, [r3, #0]
		if(cfs.raw < 400)cfs.raw = 400;
 8003400:	4b13      	ldr	r3, [pc, #76]	@ (8003450 <Sensors_Update+0x120>)
 8003402:	881b      	ldrh	r3, [r3, #0]
 8003404:	b29b      	uxth	r3, r3
 8003406:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800340a:	d203      	bcs.n	8003414 <Sensors_Update+0xe4>
 800340c:	4b10      	ldr	r3, [pc, #64]	@ (8003450 <Sensors_Update+0x120>)
 800340e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003412:	801a      	strh	r2, [r3, #0]



		error = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	607b      	str	r3, [r7, #4]

//    if (see_front_wall) {
//        error = 0;  // Ignore steering near front walls
//    }

    m_cross_track_error = error;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003422:	4b0e      	ldr	r3, [pc, #56]	@ (800345c <Sensors_Update+0x12c>)
 8003424:	edc3 7a00 	vstr	s15, [r3]
    CalculateSteeringAdjustment();
 8003428:	f7ff ff24 	bl	8003274 <CalculateSteeringAdjustment>
    //send_sensor_data();
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000016 	.word	0x20000016
 8003438:	200005bc 	.word	0x200005bc
 800343c:	200006f8 	.word	0x200006f8
 8003440:	2000070c 	.word	0x2000070c
 8003444:	20000710 	.word	0x20000710
 8003448:	200006d8 	.word	0x200006d8
 800344c:	200006f0 	.word	0x200006f0
 8003450:	200006e0 	.word	0x200006e0
 8003454:	200006d0 	.word	0x200006d0
 8003458:	200006e8 	.word	0x200006e8
 800345c:	200006c8 	.word	0x200006c8

08003460 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	4b10      	ldr	r3, [pc, #64]	@ (80034ac <HAL_MspInit+0x4c>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346e:	4a0f      	ldr	r2, [pc, #60]	@ (80034ac <HAL_MspInit+0x4c>)
 8003470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003474:	6453      	str	r3, [r2, #68]	@ 0x44
 8003476:	4b0d      	ldr	r3, [pc, #52]	@ (80034ac <HAL_MspInit+0x4c>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800347e:	607b      	str	r3, [r7, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	603b      	str	r3, [r7, #0]
 8003486:	4b09      	ldr	r3, [pc, #36]	@ (80034ac <HAL_MspInit+0x4c>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	4a08      	ldr	r2, [pc, #32]	@ (80034ac <HAL_MspInit+0x4c>)
 800348c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003490:	6413      	str	r3, [r2, #64]	@ 0x40
 8003492:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <HAL_MspInit+0x4c>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800349e:	2007      	movs	r0, #7
 80034a0:	f001 fd62 	bl	8004f68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40023800 	.word	0x40023800

080034b0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	@ 0x28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a17      	ldr	r2, [pc, #92]	@ (800352c <HAL_ADC_MspInit+0x7c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d127      	bne.n	8003522 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	4b16      	ldr	r3, [pc, #88]	@ (8003530 <HAL_ADC_MspInit+0x80>)
 80034d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034da:	4a15      	ldr	r2, [pc, #84]	@ (8003530 <HAL_ADC_MspInit+0x80>)
 80034dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034e2:	4b13      	ldr	r3, [pc, #76]	@ (8003530 <HAL_ADC_MspInit+0x80>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003530 <HAL_ADC_MspInit+0x80>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003530 <HAL_ADC_MspInit+0x80>)
 80034f8:	f043 0304 	orr.w	r3, r3, #4
 80034fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003530 <HAL_ADC_MspInit+0x80>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_ADC_Pin;
 800350a:	2301      	movs	r3, #1
 800350c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800350e:	2303      	movs	r3, #3
 8003510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_ADC_GPIO_Port, &GPIO_InitStruct);
 8003516:	f107 0314 	add.w	r3, r7, #20
 800351a:	4619      	mov	r1, r3
 800351c:	4805      	ldr	r0, [pc, #20]	@ (8003534 <HAL_ADC_MspInit+0x84>)
 800351e:	f002 f8e1 	bl	80056e4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003522:	bf00      	nop
 8003524:	3728      	adds	r7, #40	@ 0x28
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40012000 	.word	0x40012000
 8003530:	40023800 	.word	0x40023800
 8003534:	40020800 	.word	0x40020800

08003538 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08c      	sub	sp, #48	@ 0x30
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 031c 	add.w	r3, r7, #28
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a42      	ldr	r2, [pc, #264]	@ (8003660 <HAL_I2C_MspInit+0x128>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d12c      	bne.n	80035b4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	4b41      	ldr	r3, [pc, #260]	@ (8003664 <HAL_I2C_MspInit+0x12c>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003562:	4a40      	ldr	r2, [pc, #256]	@ (8003664 <HAL_I2C_MspInit+0x12c>)
 8003564:	f043 0302 	orr.w	r3, r3, #2
 8003568:	6313      	str	r3, [r2, #48]	@ 0x30
 800356a:	4b3e      	ldr	r3, [pc, #248]	@ (8003664 <HAL_I2C_MspInit+0x12c>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003576:	23c0      	movs	r3, #192	@ 0xc0
 8003578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800357a:	2312      	movs	r3, #18
 800357c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357e:	2300      	movs	r3, #0
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003582:	2303      	movs	r3, #3
 8003584:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003586:	2304      	movs	r3, #4
 8003588:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800358a:	f107 031c 	add.w	r3, r7, #28
 800358e:	4619      	mov	r1, r3
 8003590:	4835      	ldr	r0, [pc, #212]	@ (8003668 <HAL_I2C_MspInit+0x130>)
 8003592:	f002 f8a7 	bl	80056e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	4b32      	ldr	r3, [pc, #200]	@ (8003664 <HAL_I2C_MspInit+0x12c>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	4a31      	ldr	r2, [pc, #196]	@ (8003664 <HAL_I2C_MspInit+0x12c>)
 80035a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80035a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80035a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003664 <HAL_I2C_MspInit+0x12c>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80035b2:	e050      	b.n	8003656 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a2c      	ldr	r2, [pc, #176]	@ (800366c <HAL_I2C_MspInit+0x134>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d14b      	bne.n	8003656 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	4b28      	ldr	r3, [pc, #160]	@ (8003664 <HAL_I2C_MspInit+0x12c>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c6:	4a27      	ldr	r2, [pc, #156]	@ (8003664 <HAL_I2C_MspInit+0x12c>)
 80035c8:	f043 0302 	orr.w	r3, r3, #2
 80035cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ce:	4b25      	ldr	r3, [pc, #148]	@ (8003664 <HAL_I2C_MspInit+0x12c>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	4b21      	ldr	r3, [pc, #132]	@ (8003664 <HAL_I2C_MspInit+0x12c>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	4a20      	ldr	r2, [pc, #128]	@ (8003664 <HAL_I2C_MspInit+0x12c>)
 80035e4:	f043 0304 	orr.w	r3, r3, #4
 80035e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003664 <HAL_I2C_MspInit+0x12c>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035fc:	2312      	movs	r3, #18
 80035fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003604:	2303      	movs	r3, #3
 8003606:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003608:	2304      	movs	r3, #4
 800360a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360c:	f107 031c 	add.w	r3, r7, #28
 8003610:	4619      	mov	r1, r3
 8003612:	4815      	ldr	r0, [pc, #84]	@ (8003668 <HAL_I2C_MspInit+0x130>)
 8003614:	f002 f866 	bl	80056e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800361c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800361e:	2312      	movs	r3, #18
 8003620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003626:	2303      	movs	r3, #3
 8003628:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800362a:	2304      	movs	r3, #4
 800362c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800362e:	f107 031c 	add.w	r3, r7, #28
 8003632:	4619      	mov	r1, r3
 8003634:	480e      	ldr	r0, [pc, #56]	@ (8003670 <HAL_I2C_MspInit+0x138>)
 8003636:	f002 f855 	bl	80056e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	4b09      	ldr	r3, [pc, #36]	@ (8003664 <HAL_I2C_MspInit+0x12c>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	4a08      	ldr	r2, [pc, #32]	@ (8003664 <HAL_I2C_MspInit+0x12c>)
 8003644:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003648:	6413      	str	r3, [r2, #64]	@ 0x40
 800364a:	4b06      	ldr	r3, [pc, #24]	@ (8003664 <HAL_I2C_MspInit+0x12c>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
}
 8003656:	bf00      	nop
 8003658:	3730      	adds	r7, #48	@ 0x30
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40005400 	.word	0x40005400
 8003664:	40023800 	.word	0x40023800
 8003668:	40020400 	.word	0x40020400
 800366c:	40005800 	.word	0x40005800
 8003670:	40020800 	.word	0x40020800

08003674 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08c      	sub	sp, #48	@ 0x30
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800367c:	f107 031c 	add.w	r3, r7, #28
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	60da      	str	r2, [r3, #12]
 800368a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a32      	ldr	r2, [pc, #200]	@ (800375c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d12d      	bne.n	80036f2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	4b31      	ldr	r3, [pc, #196]	@ (8003760 <HAL_TIM_Encoder_MspInit+0xec>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369e:	4a30      	ldr	r2, [pc, #192]	@ (8003760 <HAL_TIM_Encoder_MspInit+0xec>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80036a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003760 <HAL_TIM_Encoder_MspInit+0xec>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003760 <HAL_TIM_Encoder_MspInit+0xec>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	4a29      	ldr	r2, [pc, #164]	@ (8003760 <HAL_TIM_Encoder_MspInit+0xec>)
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036c2:	4b27      	ldr	r3, [pc, #156]	@ (8003760 <HAL_TIM_Encoder_MspInit+0xec>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 80036ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80036d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d4:	2302      	movs	r3, #2
 80036d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036dc:	2300      	movs	r3, #0
 80036de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036e0:	2301      	movs	r3, #1
 80036e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e4:	f107 031c 	add.w	r3, r7, #28
 80036e8:	4619      	mov	r1, r3
 80036ea:	481e      	ldr	r0, [pc, #120]	@ (8003764 <HAL_TIM_Encoder_MspInit+0xf0>)
 80036ec:	f001 fffa 	bl	80056e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80036f0:	e030      	b.n	8003754 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036fa:	d12b      	bne.n	8003754 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	4b17      	ldr	r3, [pc, #92]	@ (8003760 <HAL_TIM_Encoder_MspInit+0xec>)
 8003702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003704:	4a16      	ldr	r2, [pc, #88]	@ (8003760 <HAL_TIM_Encoder_MspInit+0xec>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6413      	str	r3, [r2, #64]	@ 0x40
 800370c:	4b14      	ldr	r3, [pc, #80]	@ (8003760 <HAL_TIM_Encoder_MspInit+0xec>)
 800370e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	4b10      	ldr	r3, [pc, #64]	@ (8003760 <HAL_TIM_Encoder_MspInit+0xec>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003720:	4a0f      	ldr	r2, [pc, #60]	@ (8003760 <HAL_TIM_Encoder_MspInit+0xec>)
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	6313      	str	r3, [r2, #48]	@ 0x30
 8003728:	4b0d      	ldr	r3, [pc, #52]	@ (8003760 <HAL_TIM_Encoder_MspInit+0xec>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8003734:	2303      	movs	r3, #3
 8003736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003738:	2302      	movs	r3, #2
 800373a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373c:	2300      	movs	r3, #0
 800373e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003740:	2300      	movs	r3, #0
 8003742:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003744:	2301      	movs	r3, #1
 8003746:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003748:	f107 031c 	add.w	r3, r7, #28
 800374c:	4619      	mov	r1, r3
 800374e:	4805      	ldr	r0, [pc, #20]	@ (8003764 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003750:	f001 ffc8 	bl	80056e4 <HAL_GPIO_Init>
}
 8003754:	bf00      	nop
 8003756:	3730      	adds	r7, #48	@ 0x30
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40010000 	.word	0x40010000
 8003760:	40023800 	.word	0x40023800
 8003764:	40020000 	.word	0x40020000

08003768 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a0b      	ldr	r2, [pc, #44]	@ (80037a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d10d      	bne.n	8003796 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	4b0a      	ldr	r3, [pc, #40]	@ (80037a8 <HAL_TIM_PWM_MspInit+0x40>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	4a09      	ldr	r2, [pc, #36]	@ (80037a8 <HAL_TIM_PWM_MspInit+0x40>)
 8003784:	f043 0302 	orr.w	r3, r3, #2
 8003788:	6413      	str	r3, [r2, #64]	@ 0x40
 800378a:	4b07      	ldr	r3, [pc, #28]	@ (80037a8 <HAL_TIM_PWM_MspInit+0x40>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003796:	bf00      	nop
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40023800 	.word	0x40023800

080037ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08a      	sub	sp, #40	@ 0x28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b4:	f107 0314 	add.w	r3, r7, #20
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a21      	ldr	r2, [pc, #132]	@ (8003850 <HAL_TIM_MspPostInit+0xa4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d13b      	bne.n	8003846 <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	4b20      	ldr	r3, [pc, #128]	@ (8003854 <HAL_TIM_MspPostInit+0xa8>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003854 <HAL_TIM_MspPostInit+0xa8>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037de:	4b1d      	ldr	r3, [pc, #116]	@ (8003854 <HAL_TIM_MspPostInit+0xa8>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	4b19      	ldr	r3, [pc, #100]	@ (8003854 <HAL_TIM_MspPostInit+0xa8>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	4a18      	ldr	r2, [pc, #96]	@ (8003854 <HAL_TIM_MspPostInit+0xa8>)
 80037f4:	f043 0302 	orr.w	r3, r3, #2
 80037f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037fa:	4b16      	ldr	r3, [pc, #88]	@ (8003854 <HAL_TIM_MspPostInit+0xa8>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003806:	23c0      	movs	r3, #192	@ 0xc0
 8003808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380a:	2302      	movs	r3, #2
 800380c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003812:	2300      	movs	r3, #0
 8003814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003816:	2302      	movs	r3, #2
 8003818:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381a:	f107 0314 	add.w	r3, r7, #20
 800381e:	4619      	mov	r1, r3
 8003820:	480d      	ldr	r0, [pc, #52]	@ (8003858 <HAL_TIM_MspPostInit+0xac>)
 8003822:	f001 ff5f 	bl	80056e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003826:	2303      	movs	r3, #3
 8003828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382a:	2302      	movs	r3, #2
 800382c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003832:	2300      	movs	r3, #0
 8003834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003836:	2302      	movs	r3, #2
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800383a:	f107 0314 	add.w	r3, r7, #20
 800383e:	4619      	mov	r1, r3
 8003840:	4806      	ldr	r0, [pc, #24]	@ (800385c <HAL_TIM_MspPostInit+0xb0>)
 8003842:	f001 ff4f 	bl	80056e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003846:	bf00      	nop
 8003848:	3728      	adds	r7, #40	@ 0x28
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40000400 	.word	0x40000400
 8003854:	40023800 	.word	0x40023800
 8003858:	40020000 	.word	0x40020000
 800385c:	40020400 	.word	0x40020400

08003860 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08e      	sub	sp, #56	@ 0x38
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a66      	ldr	r2, [pc, #408]	@ (8003a18 <HAL_UART_MspInit+0x1b8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d12c      	bne.n	80038dc <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	623b      	str	r3, [r7, #32]
 8003886:	4b65      	ldr	r3, [pc, #404]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	4a64      	ldr	r2, [pc, #400]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 800388c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003890:	6413      	str	r3, [r2, #64]	@ 0x40
 8003892:	4b62      	ldr	r3, [pc, #392]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389a:	623b      	str	r3, [r7, #32]
 800389c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
 80038a2:	4b5e      	ldr	r3, [pc, #376]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	4a5d      	ldr	r2, [pc, #372]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ae:	4b5b      	ldr	r3, [pc, #364]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80038ba:	230c      	movs	r3, #12
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038be:	2302      	movs	r3, #2
 80038c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c6:	2303      	movs	r3, #3
 80038c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038ca:	2307      	movs	r3, #7
 80038cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038d2:	4619      	mov	r1, r3
 80038d4:	4852      	ldr	r0, [pc, #328]	@ (8003a20 <HAL_UART_MspInit+0x1c0>)
 80038d6:	f001 ff05 	bl	80056e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80038da:	e099      	b.n	8003a10 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a50      	ldr	r2, [pc, #320]	@ (8003a24 <HAL_UART_MspInit+0x1c4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d12d      	bne.n	8003942 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	4b4c      	ldr	r3, [pc, #304]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	4a4b      	ldr	r2, [pc, #300]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 80038f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038f6:	4b49      	ldr	r3, [pc, #292]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	4b45      	ldr	r3, [pc, #276]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	4a44      	ldr	r2, [pc, #272]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 800390c:	f043 0304 	orr.w	r3, r3, #4
 8003910:	6313      	str	r3, [r2, #48]	@ 0x30
 8003912:	4b42      	ldr	r3, [pc, #264]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800391e:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8003922:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003924:	2302      	movs	r3, #2
 8003926:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003928:	2300      	movs	r3, #0
 800392a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800392c:	2303      	movs	r3, #3
 800392e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003930:	2307      	movs	r3, #7
 8003932:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003934:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003938:	4619      	mov	r1, r3
 800393a:	483b      	ldr	r0, [pc, #236]	@ (8003a28 <HAL_UART_MspInit+0x1c8>)
 800393c:	f001 fed2 	bl	80056e4 <HAL_GPIO_Init>
}
 8003940:	e066      	b.n	8003a10 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a39      	ldr	r2, [pc, #228]	@ (8003a2c <HAL_UART_MspInit+0x1cc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d161      	bne.n	8003a10 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 800394c:	2300      	movs	r3, #0
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	4b32      	ldr	r3, [pc, #200]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 8003952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003954:	4a31      	ldr	r2, [pc, #196]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 8003956:	f043 0320 	orr.w	r3, r3, #32
 800395a:	6453      	str	r3, [r2, #68]	@ 0x44
 800395c:	4b2f      	ldr	r3, [pc, #188]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 800395e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	613b      	str	r3, [r7, #16]
 8003966:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	4b2b      	ldr	r3, [pc, #172]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003970:	4a2a      	ldr	r2, [pc, #168]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 8003972:	f043 0304 	orr.w	r3, r3, #4
 8003976:	6313      	str	r3, [r2, #48]	@ 0x30
 8003978:	4b28      	ldr	r3, [pc, #160]	@ (8003a1c <HAL_UART_MspInit+0x1bc>)
 800397a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003984:	23c0      	movs	r3, #192	@ 0xc0
 8003986:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	2302      	movs	r3, #2
 800398a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003990:	2303      	movs	r3, #3
 8003992:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003994:	2308      	movs	r3, #8
 8003996:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800399c:	4619      	mov	r1, r3
 800399e:	4822      	ldr	r0, [pc, #136]	@ (8003a28 <HAL_UART_MspInit+0x1c8>)
 80039a0:	f001 fea0 	bl	80056e4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80039a4:	4b22      	ldr	r3, [pc, #136]	@ (8003a30 <HAL_UART_MspInit+0x1d0>)
 80039a6:	4a23      	ldr	r2, [pc, #140]	@ (8003a34 <HAL_UART_MspInit+0x1d4>)
 80039a8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80039aa:	4b21      	ldr	r3, [pc, #132]	@ (8003a30 <HAL_UART_MspInit+0x1d0>)
 80039ac:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80039b0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003a30 <HAL_UART_MspInit+0x1d0>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a30 <HAL_UART_MspInit+0x1d0>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039be:	4b1c      	ldr	r3, [pc, #112]	@ (8003a30 <HAL_UART_MspInit+0x1d0>)
 80039c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039c4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a30 <HAL_UART_MspInit+0x1d0>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039cc:	4b18      	ldr	r3, [pc, #96]	@ (8003a30 <HAL_UART_MspInit+0x1d0>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80039d2:	4b17      	ldr	r3, [pc, #92]	@ (8003a30 <HAL_UART_MspInit+0x1d0>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039d8:	4b15      	ldr	r3, [pc, #84]	@ (8003a30 <HAL_UART_MspInit+0x1d0>)
 80039da:	2200      	movs	r2, #0
 80039dc:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039de:	4b14      	ldr	r3, [pc, #80]	@ (8003a30 <HAL_UART_MspInit+0x1d0>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80039e4:	4812      	ldr	r0, [pc, #72]	@ (8003a30 <HAL_UART_MspInit+0x1d0>)
 80039e6:	f001 fb01 	bl	8004fec <HAL_DMA_Init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_UART_MspInit+0x194>
      Error_Handler();
 80039f0:	f7ff f826 	bl	8002a40 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003a30 <HAL_UART_MspInit+0x1d0>)
 80039f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80039fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003a30 <HAL_UART_MspInit+0x1d0>)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003a00:	2200      	movs	r2, #0
 8003a02:	2100      	movs	r1, #0
 8003a04:	2047      	movs	r0, #71	@ 0x47
 8003a06:	f001 faba 	bl	8004f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003a0a:	2047      	movs	r0, #71	@ 0x47
 8003a0c:	f001 fad3 	bl	8004fb6 <HAL_NVIC_EnableIRQ>
}
 8003a10:	bf00      	nop
 8003a12:	3738      	adds	r7, #56	@ 0x38
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40004400 	.word	0x40004400
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40020000 	.word	0x40020000
 8003a24:	40004800 	.word	0x40004800
 8003a28:	40020800 	.word	0x40020800
 8003a2c:	40011400 	.word	0x40011400
 8003a30:	20000558 	.word	0x20000558
 8003a34:	40026428 	.word	0x40026428

08003a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a3c:	bf00      	nop
 8003a3e:	e7fd      	b.n	8003a3c <NMI_Handler+0x4>

08003a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a44:	bf00      	nop
 8003a46:	e7fd      	b.n	8003a44 <HardFault_Handler+0x4>

08003a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a4c:	bf00      	nop
 8003a4e:	e7fd      	b.n	8003a4c <MemManage_Handler+0x4>

08003a50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a54:	bf00      	nop
 8003a56:	e7fd      	b.n	8003a54 <BusFault_Handler+0x4>

08003a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a5c:	bf00      	nop
 8003a5e:	e7fd      	b.n	8003a5c <UsageFault_Handler+0x4>

08003a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a90:	f000 fd46 	bl	8004520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick_accumulator += 1;  // Increment by 1 ms
 8003a94:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac8 <SysTick_Handler+0x3c>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac8 <SysTick_Handler+0x3c>)
 8003aa0:	701a      	strb	r2, [r3, #0]
  if(systick_function_enabled){
 8003aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8003acc <SysTick_Handler+0x40>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d009      	beq.n	8003ac0 <SysTick_Handler+0x34>
	  if (tick_accumulator >= TICK_INTERVAL) {
 8003aac:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <SysTick_Handler+0x3c>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b13      	cmp	r3, #19
 8003ab4:	d904      	bls.n	8003ac0 <SysTick_Handler+0x34>
	        tick_accumulator = 0;  // Accumulate remainder
 8003ab6:	4b04      	ldr	r3, [pc, #16]	@ (8003ac8 <SysTick_Handler+0x3c>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
	        SysTickFunction();
 8003abc:	f000 f98e 	bl	8003ddc <SysTickFunction>
	      }
  }

  CheckEncoderCounts();
 8003ac0:	f000 f9b8 	bl	8003e34 <CheckEncoderCounts>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003ac4:	bf00      	nop
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20000718 	.word	0x20000718
 8003acc:	200005b8 	.word	0x200005b8

08003ad0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003ad4:	2008      	movs	r0, #8
 8003ad6:	f001 ffb3 	bl	8005a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}

08003ade <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003ae2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003ae6:	f001 ffab 	bl	8005a40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003aea:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003aee:	f001 ffa7 	bl	8005a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003afc:	4802      	ldr	r0, [pc, #8]	@ (8003b08 <DMA2_Stream1_IRQHandler+0x10>)
 8003afe:	f001 fbb5 	bl	800526c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000558 	.word	0x20000558

08003b0c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0

  /* USER CODE END USART6_IRQn 0 */
  //HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */
	/* Check if receive interrupt */
	if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) != RESET) {
 8003b10:	4b3f      	ldr	r3, [pc, #252]	@ (8003c10 <USART6_IRQHandler+0x104>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d173      	bne.n	8003c06 <USART6_IRQHandler+0xfa>
	    /* Read byte from UART */
		rxByte = (uint8_t)(huart6.Instance->DR & 0xFF);
 8003b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c10 <USART6_IRQHandler+0x104>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	4b3b      	ldr	r3, [pc, #236]	@ (8003c14 <USART6_IRQHandler+0x108>)
 8003b28:	701a      	strb	r2, [r3, #0]

	    /* State machine for packet reception */
	    switch (rxState) {
 8003b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c18 <USART6_IRQHandler+0x10c>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d85e      	bhi.n	8003bf0 <USART6_IRQHandler+0xe4>
 8003b32:	a201      	add	r2, pc, #4	@ (adr r2, 8003b38 <USART6_IRQHandler+0x2c>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003b4d 	.word	0x08003b4d
 8003b3c:	08003b5d 	.word	0x08003b5d
 8003b40:	08003b6d 	.word	0x08003b6d
 8003b44:	08003b93 	.word	0x08003b93
 8003b48:	08003bdd 	.word	0x08003bdd
	      case WAITING_FOR_START:
	        if (rxByte == START_MARKER) {
 8003b4c:	4b31      	ldr	r3, [pc, #196]	@ (8003c14 <USART6_IRQHandler+0x108>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b3c      	cmp	r3, #60	@ 0x3c
 8003b52:	d151      	bne.n	8003bf8 <USART6_IRQHandler+0xec>
	          rxState = WAITING_FOR_CMD;
 8003b54:	4b30      	ldr	r3, [pc, #192]	@ (8003c18 <USART6_IRQHandler+0x10c>)
 8003b56:	2201      	movs	r2, #1
 8003b58:	701a      	strb	r2, [r3, #0]
	        }
	        break;
 8003b5a:	e04d      	b.n	8003bf8 <USART6_IRQHandler+0xec>

	      case WAITING_FOR_CMD:
	        rxCmd = rxByte;
 8003b5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c14 <USART6_IRQHandler+0x108>)
 8003b5e:	781a      	ldrb	r2, [r3, #0]
 8003b60:	4b2e      	ldr	r3, [pc, #184]	@ (8003c1c <USART6_IRQHandler+0x110>)
 8003b62:	701a      	strb	r2, [r3, #0]
	        rxState = WAITING_FOR_LENGTH;
 8003b64:	4b2c      	ldr	r3, [pc, #176]	@ (8003c18 <USART6_IRQHandler+0x10c>)
 8003b66:	2202      	movs	r2, #2
 8003b68:	701a      	strb	r2, [r3, #0]
	        break;
 8003b6a:	e046      	b.n	8003bfa <USART6_IRQHandler+0xee>

	      case WAITING_FOR_LENGTH:
	        rxLength = rxByte;
 8003b6c:	4b29      	ldr	r3, [pc, #164]	@ (8003c14 <USART6_IRQHandler+0x108>)
 8003b6e:	781a      	ldrb	r2, [r3, #0]
 8003b70:	4b2b      	ldr	r3, [pc, #172]	@ (8003c20 <USART6_IRQHandler+0x114>)
 8003b72:	701a      	strb	r2, [r3, #0]
	        rxIndex = 0;
 8003b74:	4b2b      	ldr	r3, [pc, #172]	@ (8003c24 <USART6_IRQHandler+0x118>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]

	        if (rxLength > 0) {
 8003b7a:	4b29      	ldr	r3, [pc, #164]	@ (8003c20 <USART6_IRQHandler+0x114>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <USART6_IRQHandler+0x7e>
	          rxState = RECEIVING_DATA;
 8003b82:	4b25      	ldr	r3, [pc, #148]	@ (8003c18 <USART6_IRQHandler+0x10c>)
 8003b84:	2203      	movs	r2, #3
 8003b86:	701a      	strb	r2, [r3, #0]
	        } else {
	          rxState = WAITING_FOR_END;
	        }
	        break;
 8003b88:	e037      	b.n	8003bfa <USART6_IRQHandler+0xee>
	          rxState = WAITING_FOR_END;
 8003b8a:	4b23      	ldr	r3, [pc, #140]	@ (8003c18 <USART6_IRQHandler+0x10c>)
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	701a      	strb	r2, [r3, #0]
	        break;
 8003b90:	e033      	b.n	8003bfa <USART6_IRQHandler+0xee>

	      case RECEIVING_DATA:
	        if (rxIndex < rxLength && rxIndex < MAX_BUFFER_SIZE) {
 8003b92:	4b24      	ldr	r3, [pc, #144]	@ (8003c24 <USART6_IRQHandler+0x118>)
 8003b94:	781a      	ldrb	r2, [r3, #0]
 8003b96:	4b22      	ldr	r3, [pc, #136]	@ (8003c20 <USART6_IRQHandler+0x114>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d219      	bcs.n	8003bd2 <USART6_IRQHandler+0xc6>
 8003b9e:	4b21      	ldr	r3, [pc, #132]	@ (8003c24 <USART6_IRQHandler+0x118>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	b25b      	sxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	db14      	blt.n	8003bd2 <USART6_IRQHandler+0xc6>
	          rxBuffer[rxIndex++] = rxByte;
 8003ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8003c24 <USART6_IRQHandler+0x118>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	b2d1      	uxtb	r1, r2
 8003bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c24 <USART6_IRQHandler+0x118>)
 8003bb2:	7011      	strb	r1, [r2, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4b17      	ldr	r3, [pc, #92]	@ (8003c14 <USART6_IRQHandler+0x108>)
 8003bb8:	7819      	ldrb	r1, [r3, #0]
 8003bba:	4b1b      	ldr	r3, [pc, #108]	@ (8003c28 <USART6_IRQHandler+0x11c>)
 8003bbc:	5499      	strb	r1, [r3, r2]

	          if (rxIndex >= rxLength) {
 8003bbe:	4b19      	ldr	r3, [pc, #100]	@ (8003c24 <USART6_IRQHandler+0x118>)
 8003bc0:	781a      	ldrb	r2, [r3, #0]
 8003bc2:	4b17      	ldr	r3, [pc, #92]	@ (8003c20 <USART6_IRQHandler+0x114>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d307      	bcc.n	8003bda <USART6_IRQHandler+0xce>
	            rxState = WAITING_FOR_END;
 8003bca:	4b13      	ldr	r3, [pc, #76]	@ (8003c18 <USART6_IRQHandler+0x10c>)
 8003bcc:	2204      	movs	r2, #4
 8003bce:	701a      	strb	r2, [r3, #0]
	          if (rxIndex >= rxLength) {
 8003bd0:	e003      	b.n	8003bda <USART6_IRQHandler+0xce>
	          }
	        } else {
	          /* Buffer overflow, reset state */
	          rxState = WAITING_FOR_START;
 8003bd2:	4b11      	ldr	r3, [pc, #68]	@ (8003c18 <USART6_IRQHandler+0x10c>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]
	        }
	        break;
 8003bd8:	e00f      	b.n	8003bfa <USART6_IRQHandler+0xee>
 8003bda:	e00e      	b.n	8003bfa <USART6_IRQHandler+0xee>

	      case WAITING_FOR_END:
	        if (rxByte == END_MARKER) {
 8003bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8003c14 <USART6_IRQHandler+0x108>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b3e      	cmp	r3, #62	@ 0x3e
 8003be2:	d101      	bne.n	8003be8 <USART6_IRQHandler+0xdc>
	          /* Complete packet received, process it */
	          ProcessCommand();
 8003be4:	f7fd fa06 	bl	8000ff4 <ProcessCommand>
	        }
	        /* Reset state machine for next packet */
	        rxState = WAITING_FOR_START;
 8003be8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <USART6_IRQHandler+0x10c>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
	        break;
 8003bee:	e004      	b.n	8003bfa <USART6_IRQHandler+0xee>

	      default:
	        rxState = WAITING_FOR_START;
 8003bf0:	4b09      	ldr	r3, [pc, #36]	@ (8003c18 <USART6_IRQHandler+0x10c>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
	        break;
 8003bf6:	e000      	b.n	8003bfa <USART6_IRQHandler+0xee>
	        break;
 8003bf8:	bf00      	nop
	    }

	    /* Clear interrupt flag - use _CLEAR_FLAG instead of _CLEAR_IT */
	    __HAL_UART_CLEAR_FLAG(&huart6, UART_FLAG_RXNE);
 8003bfa:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <USART6_IRQHandler+0x104>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f06f 0220 	mvn.w	r2, #32
 8003c02:	601a      	str	r2, [r3, #0]
	  else {
	    HAL_UART_IRQHandler(&huart6);
	  }

  /* USER CODE END USART6_IRQn 1 */
}
 8003c04:	e002      	b.n	8003c0c <USART6_IRQHandler+0x100>
	    HAL_UART_IRQHandler(&huart6);
 8003c06:	4802      	ldr	r0, [pc, #8]	@ (8003c10 <USART6_IRQHandler+0x104>)
 8003c08:	f004 fd7a 	bl	8008700 <HAL_UART_IRQHandler>
}
 8003c0c:	bf00      	nop
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000510 	.word	0x20000510
 8003c14:	2000028f 	.word	0x2000028f
 8003c18:	20000208 	.word	0x20000208
 8003c1c:	2000028c 	.word	0x2000028c
 8003c20:	2000028d 	.word	0x2000028d
 8003c24:	2000028e 	.word	0x2000028e
 8003c28:	2000020c 	.word	0x2000020c

08003c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return 1;
 8003c30:	2301      	movs	r3, #1
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <_kill>:

int _kill(int pid, int sig)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c46:	f006 fa51 	bl	800a0ec <__errno>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2216      	movs	r2, #22
 8003c4e:	601a      	str	r2, [r3, #0]
  return -1;
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <_exit>:

void _exit (int status)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c64:	f04f 31ff 	mov.w	r1, #4294967295
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ffe7 	bl	8003c3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c6e:	bf00      	nop
 8003c70:	e7fd      	b.n	8003c6e <_exit+0x12>

08003c72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	e00a      	b.n	8003c9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c84:	f3af 8000 	nop.w
 8003c88:	4601      	mov	r1, r0
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	60ba      	str	r2, [r7, #8]
 8003c90:	b2ca      	uxtb	r2, r1
 8003c92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	3301      	adds	r3, #1
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	dbf0      	blt.n	8003c84 <_read+0x12>
  }

  return len;
 8003ca2:	687b      	ldr	r3, [r7, #4]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	e009      	b.n	8003cd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	60ba      	str	r2, [r7, #8]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	dbf1      	blt.n	8003cbe <_write+0x12>
  }
  return len;
 8003cda:	687b      	ldr	r3, [r7, #4]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <_close>:

int _close(int file)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d0c:	605a      	str	r2, [r3, #4]
  return 0;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <_isatty>:

int _isatty(int file)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d24:	2301      	movs	r3, #1
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b085      	sub	sp, #20
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d54:	4a14      	ldr	r2, [pc, #80]	@ (8003da8 <_sbrk+0x5c>)
 8003d56:	4b15      	ldr	r3, [pc, #84]	@ (8003dac <_sbrk+0x60>)
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d60:	4b13      	ldr	r3, [pc, #76]	@ (8003db0 <_sbrk+0x64>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d68:	4b11      	ldr	r3, [pc, #68]	@ (8003db0 <_sbrk+0x64>)
 8003d6a:	4a12      	ldr	r2, [pc, #72]	@ (8003db4 <_sbrk+0x68>)
 8003d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d6e:	4b10      	ldr	r3, [pc, #64]	@ (8003db0 <_sbrk+0x64>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4413      	add	r3, r2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d207      	bcs.n	8003d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d7c:	f006 f9b6 	bl	800a0ec <__errno>
 8003d80:	4603      	mov	r3, r0
 8003d82:	220c      	movs	r2, #12
 8003d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d86:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8a:	e009      	b.n	8003da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d8c:	4b08      	ldr	r3, [pc, #32]	@ (8003db0 <_sbrk+0x64>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d92:	4b07      	ldr	r3, [pc, #28]	@ (8003db0 <_sbrk+0x64>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	4a05      	ldr	r2, [pc, #20]	@ (8003db0 <_sbrk+0x64>)
 8003d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20020000 	.word	0x20020000
 8003dac:	00000400 	.word	0x00000400
 8003db0:	2000071c 	.word	0x2000071c
 8003db4:	20000c78 	.word	0x20000c78

08003db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003dbc:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <SystemInit+0x20>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc2:	4a05      	ldr	r2, [pc, #20]	@ (8003dd8 <SystemInit+0x20>)
 8003dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <SysTickFunction>:
extern Motion motion;

extern volatile uint8_t systick_function_enabled;
extern UART_HandleTypeDef huart3;

void SysTickFunction(void) {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	ed2d 8b02 	vpush	{d8}
 8003de2:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */
	//--------------------------------------------------------------------
		update_Encoder_Data();
 8003de4:	f7fd fce0 	bl	80017a8 <update_Encoder_Data>
		Motion_Update(&motion);
 8003de8:	4810      	ldr	r0, [pc, #64]	@ (8003e2c <SysTickFunction+0x50>)
 8003dea:	f7fe fe7b 	bl	8002ae4 <Motion_Update>
		Sensors_Update();
 8003dee:	f7ff fa9f 	bl	8003330 <Sensors_Update>

		UpdateControllers(&controller, Motion_Velocity(&motion), Motion_Omega(&motion), get_steering_feedback());
 8003df2:	480e      	ldr	r0, [pc, #56]	@ (8003e2c <SysTickFunction+0x50>)
 8003df4:	f7fe fe56 	bl	8002aa4 <Motion_Velocity>
 8003df8:	eeb0 8a40 	vmov.f32	s16, s0
 8003dfc:	480b      	ldr	r0, [pc, #44]	@ (8003e2c <SysTickFunction+0x50>)
 8003dfe:	f7fe fe61 	bl	8002ac4 <Motion_Omega>
 8003e02:	eef0 8a40 	vmov.f32	s17, s0
 8003e06:	f7ff fa27 	bl	8003258 <get_steering_feedback>
 8003e0a:	eef0 7a40 	vmov.f32	s15, s0
 8003e0e:	eeb0 1a67 	vmov.f32	s2, s15
 8003e12:	eef0 0a68 	vmov.f32	s1, s17
 8003e16:	eeb0 0a48 	vmov.f32	s0, s16
 8003e1a:	4805      	ldr	r0, [pc, #20]	@ (8003e30 <SysTickFunction+0x54>)
 8003e1c:	f7fd fa9a 	bl	8001354 <UpdateControllers>
		//UART_Transmit_Int(&huart3, "L", linecolorRPI);
		//UART_Transmit_Int(&huart3, "B", ballcolorRPI);



}
 8003e20:	bf00      	nop
 8003e22:	46bd      	mov	sp, r7
 8003e24:	ecbd 8b02 	vpop	{d8}
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	200005e8 	.word	0x200005e8
 8003e30:	2000069c 	.word	0x2000069c

08003e34 <CheckEncoderCounts>:
	//HAL_Delay(10);
  systick_function_enabled = 0;
  HAL_Delay(10);
}

void CheckEncoderCounts(void){
 8003e34:	b590      	push	{r4, r7, lr}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
		 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
		 *
		 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
		 * turning. But that'll be approximately never in Micromouse :)
		 */
		if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 8003e3a:	f7fd fc8d 	bl	8001758 <getRightEncoderCounts>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	461a      	mov	r2, r3
 8003e42:	f647 1318 	movw	r3, #31000	@ 0x7918
 8003e46:	429a      	cmp	r2, r3
 8003e48:	dc15      	bgt.n	8003e76 <CheckEncoderCounts+0x42>
 8003e4a:	f7fd fc91 	bl	8001770 <getLeftEncoderCounts>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	461a      	mov	r2, r3
 8003e52:	f647 1318 	movw	r3, #31000	@ 0x7918
 8003e56:	429a      	cmp	r2, r3
 8003e58:	dc0d      	bgt.n	8003e76 <CheckEncoderCounts+0x42>
				|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8003e5a:	f7fd fc7d 	bl	8001758 <getRightEncoderCounts>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea0 <CheckEncoderCounts+0x6c>)
 8003e64:	429a      	cmp	r2, r3
 8003e66:	db06      	blt.n	8003e76 <CheckEncoderCounts+0x42>
 8003e68:	f7fd fc82 	bl	8001770 <getLeftEncoderCounts>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea0 <CheckEncoderCounts+0x6c>)
 8003e72:	429a      	cmp	r2, r3
 8003e74:	da10      	bge.n	8003e98 <CheckEncoderCounts+0x64>
			int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8003e76:	f7fd fc6f 	bl	8001758 <getRightEncoderCounts>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	b29c      	uxth	r4, r3
 8003e7e:	f7fd fc77 	bl	8001770 <getLeftEncoderCounts>
 8003e82:	4603      	mov	r3, r0
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	1ae3      	subs	r3, r4, r3
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	80fb      	strh	r3, [r7, #6]
			resetEncodersinSystick();
 8003e8c:	f7fd fc7c 	bl	8001788 <resetEncodersinSystick>
			TIM1->CNT = (int16_t) difference;
 8003e90:	4a04      	ldr	r2, [pc, #16]	@ (8003ea4 <CheckEncoderCounts+0x70>)
 8003e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e96:	6253      	str	r3, [r2, #36]	@ 0x24
		}
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd90      	pop	{r4, r7, pc}
 8003ea0:	ffff86e8 	.word	0xffff86e8
 8003ea4:	40010000 	.word	0x40010000

08003ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ea8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ee0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003eac:	f7ff ff84 	bl	8003db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003eb0:	480c      	ldr	r0, [pc, #48]	@ (8003ee4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003eb2:	490d      	ldr	r1, [pc, #52]	@ (8003ee8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003eec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003eb8:	e002      	b.n	8003ec0 <LoopCopyDataInit>

08003eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ebe:	3304      	adds	r3, #4

08003ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ec4:	d3f9      	bcc.n	8003eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8003ef4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ecc:	e001      	b.n	8003ed2 <LoopFillZerobss>

08003ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ed0:	3204      	adds	r2, #4

08003ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ed4:	d3fb      	bcc.n	8003ece <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003ed6:	f006 f90f 	bl	800a0f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003eda:	f7fe f8cd 	bl	8002078 <main>
  bx  lr    
 8003ede:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ee0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ee8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003eec:	0800cc94 	.word	0x0800cc94
  ldr r2, =_sbss
 8003ef0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003ef4:	20000c78 	.word	0x20000c78

08003ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ef8:	e7fe      	b.n	8003ef8 <ADC_IRQHandler>

08003efa <i2c_mux_select>:

	// Ensure all channels are disabled by default
	return i2c_mux_select_multi(mux, 0);
}

int i2c_mux_select(i2c_mux_t* mux, int ch) {
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	6039      	str	r1, [r7, #0]

	// If ch is in range 0-7 then one channel is enabled, else all are disabled
	uint8_t mask = 1 << ch;
 8003f04:	2201      	movs	r2, #1
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	73fb      	strb	r3, [r7, #15]
	return i2c_mux_select_multi(mux, mask);
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	4619      	mov	r1, r3
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f805 	bl	8003f22 <i2c_mux_select_multi>
 8003f18:	4603      	mov	r3, r0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <i2c_mux_select_multi>:

int i2c_mux_select_multi(i2c_mux_t* mux, uint8_t mask) {
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b086      	sub	sp, #24
 8003f26:	af02      	add	r7, sp, #8
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	70fb      	strb	r3, [r7, #3]
	if (mux->hi2c == NULL) return 1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <i2c_mux_select_multi+0x18>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e02f      	b.n	8003f9a <i2c_mux_select_multi+0x78>

	// Transmit bitmask to multiplexer
	uint8_t addr = (I2C_MUX_BASE_ADDR + mux->addr_offset) << 1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	7a9b      	ldrb	r3, [r3, #10]
 8003f3e:	3370      	adds	r3, #112	@ 0x70
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef res;
	res = HAL_I2C_Master_Transmit(mux->hi2c, addr, &mask, 1, I2C_MUX_TIMEOUT);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	b299      	uxth	r1, r3
 8003f4e:	1cfa      	adds	r2, r7, #3
 8003f50:	2301      	movs	r3, #1
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	2301      	movs	r3, #1
 8003f56:	f001 fecf 	bl	8005cf8 <HAL_I2C_Master_Transmit>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK) return 1;
 8003f5e:	7bbb      	ldrb	r3, [r7, #14]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <i2c_mux_select_multi+0x46>
 8003f64:	2301      	movs	r3, #1
 8003f66:	e018      	b.n	8003f9a <i2c_mux_select_multi+0x78>

	// Read back bitmask from multiplexer to verify
	uint8_t mask_check = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	737b      	strb	r3, [r7, #13]
	res = HAL_I2C_Master_Receive(mux->hi2c, addr, &mask_check, 1, I2C_MUX_TIMEOUT);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	b299      	uxth	r1, r3
 8003f74:	f107 020d 	add.w	r2, r7, #13
 8003f78:	2301      	movs	r3, #1
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f001 ffb9 	bl	8005ef4 <HAL_I2C_Master_Receive>
 8003f82:	4603      	mov	r3, r0
 8003f84:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK || mask_check != mask) return 1;
 8003f86:	7bbb      	ldrb	r3, [r7, #14]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <i2c_mux_select_multi+0x72>
 8003f8c:	7b7a      	ldrb	r2, [r7, #13]
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <i2c_mux_select_multi+0x76>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <i2c_mux_select_multi+0x78>
	return 0;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003faa:	f000 f9cd 	bl	8004348 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003fae:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	2178      	movs	r1, #120	@ 0x78
 8003fb6:	485b      	ldr	r0, [pc, #364]	@ (8004124 <SSD1306_Init+0x180>)
 8003fb8:	f002 f9ce 	bl	8006358 <HAL_I2C_IsDeviceReady>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e0a9      	b.n	800411a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8003fc6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8003fca:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003fcc:	e002      	b.n	8003fd4 <SSD1306_Init+0x30>
		p--;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f9      	bne.n	8003fce <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003fda:	22ae      	movs	r2, #174	@ 0xae
 8003fdc:	2100      	movs	r1, #0
 8003fde:	2078      	movs	r0, #120	@ 0x78
 8003fe0:	f000 fa2e 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	2078      	movs	r0, #120	@ 0x78
 8003fea:	f000 fa29 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003fee:	2210      	movs	r2, #16
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	2078      	movs	r0, #120	@ 0x78
 8003ff4:	f000 fa24 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003ff8:	22b0      	movs	r2, #176	@ 0xb0
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	2078      	movs	r0, #120	@ 0x78
 8003ffe:	f000 fa1f 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8004002:	22c8      	movs	r2, #200	@ 0xc8
 8004004:	2100      	movs	r1, #0
 8004006:	2078      	movs	r0, #120	@ 0x78
 8004008:	f000 fa1a 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800400c:	2200      	movs	r2, #0
 800400e:	2100      	movs	r1, #0
 8004010:	2078      	movs	r0, #120	@ 0x78
 8004012:	f000 fa15 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8004016:	2210      	movs	r2, #16
 8004018:	2100      	movs	r1, #0
 800401a:	2078      	movs	r0, #120	@ 0x78
 800401c:	f000 fa10 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8004020:	2240      	movs	r2, #64	@ 0x40
 8004022:	2100      	movs	r1, #0
 8004024:	2078      	movs	r0, #120	@ 0x78
 8004026:	f000 fa0b 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800402a:	2281      	movs	r2, #129	@ 0x81
 800402c:	2100      	movs	r1, #0
 800402e:	2078      	movs	r0, #120	@ 0x78
 8004030:	f000 fa06 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004034:	22ff      	movs	r2, #255	@ 0xff
 8004036:	2100      	movs	r1, #0
 8004038:	2078      	movs	r0, #120	@ 0x78
 800403a:	f000 fa01 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800403e:	22a1      	movs	r2, #161	@ 0xa1
 8004040:	2100      	movs	r1, #0
 8004042:	2078      	movs	r0, #120	@ 0x78
 8004044:	f000 f9fc 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004048:	22a6      	movs	r2, #166	@ 0xa6
 800404a:	2100      	movs	r1, #0
 800404c:	2078      	movs	r0, #120	@ 0x78
 800404e:	f000 f9f7 	bl	8004440 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004052:	22a8      	movs	r2, #168	@ 0xa8
 8004054:	2100      	movs	r1, #0
 8004056:	2078      	movs	r0, #120	@ 0x78
 8004058:	f000 f9f2 	bl	8004440 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 800405c:	223f      	movs	r2, #63	@ 0x3f
 800405e:	2100      	movs	r1, #0
 8004060:	2078      	movs	r0, #120	@ 0x78
 8004062:	f000 f9ed 	bl	8004440 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004066:	22a4      	movs	r2, #164	@ 0xa4
 8004068:	2100      	movs	r1, #0
 800406a:	2078      	movs	r0, #120	@ 0x78
 800406c:	f000 f9e8 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8004070:	22d3      	movs	r2, #211	@ 0xd3
 8004072:	2100      	movs	r1, #0
 8004074:	2078      	movs	r0, #120	@ 0x78
 8004076:	f000 f9e3 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800407a:	2200      	movs	r2, #0
 800407c:	2100      	movs	r1, #0
 800407e:	2078      	movs	r0, #120	@ 0x78
 8004080:	f000 f9de 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8004084:	22d5      	movs	r2, #213	@ 0xd5
 8004086:	2100      	movs	r1, #0
 8004088:	2078      	movs	r0, #120	@ 0x78
 800408a:	f000 f9d9 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800408e:	22f0      	movs	r2, #240	@ 0xf0
 8004090:	2100      	movs	r1, #0
 8004092:	2078      	movs	r0, #120	@ 0x78
 8004094:	f000 f9d4 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8004098:	22d9      	movs	r2, #217	@ 0xd9
 800409a:	2100      	movs	r1, #0
 800409c:	2078      	movs	r0, #120	@ 0x78
 800409e:	f000 f9cf 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80040a2:	2222      	movs	r2, #34	@ 0x22
 80040a4:	2100      	movs	r1, #0
 80040a6:	2078      	movs	r0, #120	@ 0x78
 80040a8:	f000 f9ca 	bl	8004440 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80040ac:	22da      	movs	r2, #218	@ 0xda
 80040ae:	2100      	movs	r1, #0
 80040b0:	2078      	movs	r0, #120	@ 0x78
 80040b2:	f000 f9c5 	bl	8004440 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 80040b6:	2212      	movs	r2, #18
 80040b8:	2100      	movs	r1, #0
 80040ba:	2078      	movs	r0, #120	@ 0x78
 80040bc:	f000 f9c0 	bl	8004440 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80040c0:	22db      	movs	r2, #219	@ 0xdb
 80040c2:	2100      	movs	r1, #0
 80040c4:	2078      	movs	r0, #120	@ 0x78
 80040c6:	f000 f9bb 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80040ca:	2220      	movs	r2, #32
 80040cc:	2100      	movs	r1, #0
 80040ce:	2078      	movs	r0, #120	@ 0x78
 80040d0:	f000 f9b6 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80040d4:	228d      	movs	r2, #141	@ 0x8d
 80040d6:	2100      	movs	r1, #0
 80040d8:	2078      	movs	r0, #120	@ 0x78
 80040da:	f000 f9b1 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80040de:	2214      	movs	r2, #20
 80040e0:	2100      	movs	r1, #0
 80040e2:	2078      	movs	r0, #120	@ 0x78
 80040e4:	f000 f9ac 	bl	8004440 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80040e8:	22af      	movs	r2, #175	@ 0xaf
 80040ea:	2100      	movs	r1, #0
 80040ec:	2078      	movs	r0, #120	@ 0x78
 80040ee:	f000 f9a7 	bl	8004440 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80040f2:	222e      	movs	r2, #46	@ 0x2e
 80040f4:	2100      	movs	r1, #0
 80040f6:	2078      	movs	r0, #120	@ 0x78
 80040f8:	f000 f9a2 	bl	8004440 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80040fc:	2000      	movs	r0, #0
 80040fe:	f000 f843 	bl	8004188 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8004102:	f000 f813 	bl	800412c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8004106:	4b08      	ldr	r3, [pc, #32]	@ (8004128 <SSD1306_Init+0x184>)
 8004108:	2200      	movs	r2, #0
 800410a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800410c:	4b06      	ldr	r3, [pc, #24]	@ (8004128 <SSD1306_Init+0x184>)
 800410e:	2200      	movs	r2, #0
 8004110:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8004112:	4b05      	ldr	r3, [pc, #20]	@ (8004128 <SSD1306_Init+0x184>)
 8004114:	2201      	movs	r2, #1
 8004116:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8004118:	2301      	movs	r3, #1
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20000300 	.word	0x20000300
 8004128:	20000b20 	.word	0x20000b20

0800412c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8004132:	2300      	movs	r3, #0
 8004134:	71fb      	strb	r3, [r7, #7]
 8004136:	e01d      	b.n	8004174 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	3b50      	subs	r3, #80	@ 0x50
 800413c:	b2db      	uxtb	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	2100      	movs	r1, #0
 8004142:	2078      	movs	r0, #120	@ 0x78
 8004144:	f000 f97c 	bl	8004440 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004148:	2200      	movs	r2, #0
 800414a:	2100      	movs	r1, #0
 800414c:	2078      	movs	r0, #120	@ 0x78
 800414e:	f000 f977 	bl	8004440 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004152:	2210      	movs	r2, #16
 8004154:	2100      	movs	r1, #0
 8004156:	2078      	movs	r0, #120	@ 0x78
 8004158:	f000 f972 	bl	8004440 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	01db      	lsls	r3, r3, #7
 8004160:	4a08      	ldr	r2, [pc, #32]	@ (8004184 <SSD1306_UpdateScreen+0x58>)
 8004162:	441a      	add	r2, r3
 8004164:	2380      	movs	r3, #128	@ 0x80
 8004166:	2140      	movs	r1, #64	@ 0x40
 8004168:	2078      	movs	r0, #120	@ 0x78
 800416a:	f000 f903 	bl	8004374 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	3301      	adds	r3, #1
 8004172:	71fb      	strb	r3, [r7, #7]
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	2b07      	cmp	r3, #7
 8004178:	d9de      	bls.n	8004138 <SSD1306_UpdateScreen+0xc>
	}
}
 800417a:	bf00      	nop
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000720 	.word	0x20000720

08004188 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <SSD1306_Fill+0x14>
 8004198:	2300      	movs	r3, #0
 800419a:	e000      	b.n	800419e <SSD1306_Fill+0x16>
 800419c:	23ff      	movs	r3, #255	@ 0xff
 800419e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041a2:	4619      	mov	r1, r3
 80041a4:	4803      	ldr	r0, [pc, #12]	@ (80041b4 <SSD1306_Fill+0x2c>)
 80041a6:	f005 ff4e 	bl	800a046 <memset>
}
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000720 	.word	0x20000720

080041b8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	80fb      	strh	r3, [r7, #6]
 80041c2:	460b      	mov	r3, r1
 80041c4:	80bb      	strh	r3, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	70fb      	strb	r3, [r7, #3]
	if (
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80041ce:	d848      	bhi.n	8004262 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80041d0:	88bb      	ldrh	r3, [r7, #4]
 80041d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80041d4:	d845      	bhi.n	8004262 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80041d6:	4b26      	ldr	r3, [pc, #152]	@ (8004270 <SSD1306_DrawPixel+0xb8>)
 80041d8:	791b      	ldrb	r3, [r3, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d006      	beq.n	80041ec <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d11a      	bne.n	8004228 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80041f2:	88fa      	ldrh	r2, [r7, #6]
 80041f4:	88bb      	ldrh	r3, [r7, #4]
 80041f6:	08db      	lsrs	r3, r3, #3
 80041f8:	b298      	uxth	r0, r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	01db      	lsls	r3, r3, #7
 80041fe:	4413      	add	r3, r2
 8004200:	4a1c      	ldr	r2, [pc, #112]	@ (8004274 <SSD1306_DrawPixel+0xbc>)
 8004202:	5cd3      	ldrb	r3, [r2, r3]
 8004204:	b25a      	sxtb	r2, r3
 8004206:	88bb      	ldrh	r3, [r7, #4]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	2101      	movs	r1, #1
 800420e:	fa01 f303 	lsl.w	r3, r1, r3
 8004212:	b25b      	sxtb	r3, r3
 8004214:	4313      	orrs	r3, r2
 8004216:	b259      	sxtb	r1, r3
 8004218:	88fa      	ldrh	r2, [r7, #6]
 800421a:	4603      	mov	r3, r0
 800421c:	01db      	lsls	r3, r3, #7
 800421e:	4413      	add	r3, r2
 8004220:	b2c9      	uxtb	r1, r1
 8004222:	4a14      	ldr	r2, [pc, #80]	@ (8004274 <SSD1306_DrawPixel+0xbc>)
 8004224:	54d1      	strb	r1, [r2, r3]
 8004226:	e01d      	b.n	8004264 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004228:	88fa      	ldrh	r2, [r7, #6]
 800422a:	88bb      	ldrh	r3, [r7, #4]
 800422c:	08db      	lsrs	r3, r3, #3
 800422e:	b298      	uxth	r0, r3
 8004230:	4603      	mov	r3, r0
 8004232:	01db      	lsls	r3, r3, #7
 8004234:	4413      	add	r3, r2
 8004236:	4a0f      	ldr	r2, [pc, #60]	@ (8004274 <SSD1306_DrawPixel+0xbc>)
 8004238:	5cd3      	ldrb	r3, [r2, r3]
 800423a:	b25a      	sxtb	r2, r3
 800423c:	88bb      	ldrh	r3, [r7, #4]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	2101      	movs	r1, #1
 8004244:	fa01 f303 	lsl.w	r3, r1, r3
 8004248:	b25b      	sxtb	r3, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	b25b      	sxtb	r3, r3
 800424e:	4013      	ands	r3, r2
 8004250:	b259      	sxtb	r1, r3
 8004252:	88fa      	ldrh	r2, [r7, #6]
 8004254:	4603      	mov	r3, r0
 8004256:	01db      	lsls	r3, r3, #7
 8004258:	4413      	add	r3, r2
 800425a:	b2c9      	uxtb	r1, r1
 800425c:	4a05      	ldr	r2, [pc, #20]	@ (8004274 <SSD1306_DrawPixel+0xbc>)
 800425e:	54d1      	strb	r1, [r2, r3]
 8004260:	e000      	b.n	8004264 <SSD1306_DrawPixel+0xac>
		return;
 8004262:	bf00      	nop
	}
}
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000b20 	.word	0x20000b20
 8004274:	20000720 	.word	0x20000720

08004278 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60ba      	str	r2, [r7, #8]
 8004280:	461a      	mov	r2, r3
 8004282:	4603      	mov	r3, r0
 8004284:	81fb      	strh	r3, [r7, #14]
 8004286:	460b      	mov	r3, r1
 8004288:	81bb      	strh	r3, [r7, #12]
 800428a:	4613      	mov	r3, r2
 800428c:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800428e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004292:	3307      	adds	r3, #7
 8004294:	2b00      	cmp	r3, #0
 8004296:	da00      	bge.n	800429a <SSD1306_DrawBitmap+0x22>
 8004298:	3307      	adds	r3, #7
 800429a:	10db      	asrs	r3, r3, #3
 800429c:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800429e:	2300      	movs	r3, #0
 80042a0:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	82bb      	strh	r3, [r7, #20]
 80042a6:	e044      	b.n	8004332 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80042a8:	2300      	movs	r3, #0
 80042aa:	827b      	strh	r3, [r7, #18]
 80042ac:	e02f      	b.n	800430e <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80042ae:	8a7b      	ldrh	r3, [r7, #18]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	75fb      	strb	r3, [r7, #23]
 80042be:	e012      	b.n	80042e6 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80042c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80042c4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80042c8:	fb03 f202 	mul.w	r2, r3, r2
 80042cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	da00      	bge.n	80042d6 <SSD1306_DrawBitmap+0x5e>
 80042d4:	3307      	adds	r3, #7
 80042d6:	10db      	asrs	r3, r3, #3
 80042d8:	b21b      	sxth	r3, r3
 80042da:	4413      	add	r3, r2
 80042dc:	461a      	mov	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4413      	add	r3, r2
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80042e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	da09      	bge.n	8004302 <SSD1306_DrawBitmap+0x8a>
 80042ee:	89fa      	ldrh	r2, [r7, #14]
 80042f0:	8a7b      	ldrh	r3, [r7, #18]
 80042f2:	4413      	add	r3, r2
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	89b9      	ldrh	r1, [r7, #12]
 80042f8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff5b 	bl	80041b8 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8004302:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004306:	b29b      	uxth	r3, r3
 8004308:	3301      	adds	r3, #1
 800430a:	b29b      	uxth	r3, r3
 800430c:	827b      	strh	r3, [r7, #18]
 800430e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004312:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004316:	429a      	cmp	r2, r3
 8004318:	dbc9      	blt.n	80042ae <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800431a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800431e:	b29b      	uxth	r3, r3
 8004320:	3301      	adds	r3, #1
 8004322:	b29b      	uxth	r3, r3
 8004324:	82bb      	strh	r3, [r7, #20]
 8004326:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800432a:	b29b      	uxth	r3, r3
 800432c:	3301      	adds	r3, #1
 800432e:	b29b      	uxth	r3, r3
 8004330:	81bb      	strh	r3, [r7, #12]
 8004332:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004336:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800433a:	429a      	cmp	r2, r3
 800433c:	dbb4      	blt.n	80042a8 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800434e:	4b08      	ldr	r3, [pc, #32]	@ (8004370 <ssd1306_I2C_Init+0x28>)
 8004350:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004352:	e002      	b.n	800435a <ssd1306_I2C_Init+0x12>
		p--;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3b01      	subs	r3, #1
 8004358:	607b      	str	r3, [r7, #4]
	while(p>0)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1f9      	bne.n	8004354 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	0003d090 	.word	0x0003d090

08004374 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004374:	b590      	push	{r4, r7, lr}
 8004376:	b0c7      	sub	sp, #284	@ 0x11c
 8004378:	af02      	add	r7, sp, #8
 800437a:	4604      	mov	r4, r0
 800437c:	4608      	mov	r0, r1
 800437e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8004382:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8004386:	600a      	str	r2, [r1, #0]
 8004388:	4619      	mov	r1, r3
 800438a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800438e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004392:	4622      	mov	r2, r4
 8004394:	701a      	strb	r2, [r3, #0]
 8004396:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800439a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800439e:	4602      	mov	r2, r0
 80043a0:	701a      	strb	r2, [r3, #0]
 80043a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80043aa:	460a      	mov	r2, r1
 80043ac:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80043ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043b6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80043ba:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80043be:	7812      	ldrb	r2, [r2, #0]
 80043c0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80043c2:	2300      	movs	r3, #0
 80043c4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80043c8:	e015      	b.n	80043f6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80043ca:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80043ce:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80043d2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	441a      	add	r2, r3
 80043da:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80043de:	3301      	adds	r3, #1
 80043e0:	7811      	ldrb	r1, [r2, #0]
 80043e2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80043e6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80043ea:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80043ec:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80043f0:	3301      	adds	r3, #1
 80043f2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80043f6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004400:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8004404:	8812      	ldrh	r2, [r2, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d8df      	bhi.n	80043ca <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 800440a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800440e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	b299      	uxth	r1, r3
 8004416:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800441a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	3301      	adds	r3, #1
 8004422:	b29b      	uxth	r3, r3
 8004424:	f107 020c 	add.w	r2, r7, #12
 8004428:	200a      	movs	r0, #10
 800442a:	9000      	str	r0, [sp, #0]
 800442c:	4803      	ldr	r0, [pc, #12]	@ (800443c <ssd1306_I2C_WriteMulti+0xc8>)
 800442e:	f001 fc63 	bl	8005cf8 <HAL_I2C_Master_Transmit>
}
 8004432:	bf00      	nop
 8004434:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8004438:	46bd      	mov	sp, r7
 800443a:	bd90      	pop	{r4, r7, pc}
 800443c:	20000300 	.word	0x20000300

08004440 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af02      	add	r7, sp, #8
 8004446:	4603      	mov	r3, r0
 8004448:	71fb      	strb	r3, [r7, #7]
 800444a:	460b      	mov	r3, r1
 800444c:	71bb      	strb	r3, [r7, #6]
 800444e:	4613      	mov	r3, r2
 8004450:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8004452:	79bb      	ldrb	r3, [r7, #6]
 8004454:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8004456:	797b      	ldrb	r3, [r7, #5]
 8004458:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	b299      	uxth	r1, r3
 800445e:	f107 020c 	add.w	r2, r7, #12
 8004462:	230a      	movs	r3, #10
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	2302      	movs	r3, #2
 8004468:	4803      	ldr	r0, [pc, #12]	@ (8004478 <ssd1306_I2C_Write+0x38>)
 800446a:	f001 fc45 	bl	8005cf8 <HAL_I2C_Master_Transmit>
}
 800446e:	bf00      	nop
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20000300 	.word	0x20000300

0800447c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004480:	4b0e      	ldr	r3, [pc, #56]	@ (80044bc <HAL_Init+0x40>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a0d      	ldr	r2, [pc, #52]	@ (80044bc <HAL_Init+0x40>)
 8004486:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800448a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800448c:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <HAL_Init+0x40>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0a      	ldr	r2, [pc, #40]	@ (80044bc <HAL_Init+0x40>)
 8004492:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004496:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004498:	4b08      	ldr	r3, [pc, #32]	@ (80044bc <HAL_Init+0x40>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a07      	ldr	r2, [pc, #28]	@ (80044bc <HAL_Init+0x40>)
 800449e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044a4:	2003      	movs	r0, #3
 80044a6:	f000 fd5f 	bl	8004f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044aa:	2000      	movs	r0, #0
 80044ac:	f000 f808 	bl	80044c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044b0:	f7fe ffd6 	bl	8003460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40023c00 	.word	0x40023c00

080044c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044c8:	4b12      	ldr	r3, [pc, #72]	@ (8004514 <HAL_InitTick+0x54>)
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4b12      	ldr	r3, [pc, #72]	@ (8004518 <HAL_InitTick+0x58>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	4619      	mov	r1, r3
 80044d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80044da:	fbb2 f3f3 	udiv	r3, r2, r3
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fd77 	bl	8004fd2 <HAL_SYSTICK_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e00e      	b.n	800450c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b0f      	cmp	r3, #15
 80044f2:	d80a      	bhi.n	800450a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044f4:	2200      	movs	r2, #0
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	f04f 30ff 	mov.w	r0, #4294967295
 80044fc:	f000 fd3f 	bl	8004f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004500:	4a06      	ldr	r2, [pc, #24]	@ (800451c <HAL_InitTick+0x5c>)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	e000      	b.n	800450c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20000018 	.word	0x20000018
 8004518:	20000020 	.word	0x20000020
 800451c:	2000001c 	.word	0x2000001c

08004520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004524:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <HAL_IncTick+0x20>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <HAL_IncTick+0x24>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4413      	add	r3, r2
 8004530:	4a04      	ldr	r2, [pc, #16]	@ (8004544 <HAL_IncTick+0x24>)
 8004532:	6013      	str	r3, [r2, #0]
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000020 	.word	0x20000020
 8004544:	20000b28 	.word	0x20000b28

08004548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  return uwTick;
 800454c:	4b03      	ldr	r3, [pc, #12]	@ (800455c <HAL_GetTick+0x14>)
 800454e:	681b      	ldr	r3, [r3, #0]
}
 8004550:	4618      	mov	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20000b28 	.word	0x20000b28

08004560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004568:	f7ff ffee 	bl	8004548 <HAL_GetTick>
 800456c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004578:	d005      	beq.n	8004586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800457a:	4b0a      	ldr	r3, [pc, #40]	@ (80045a4 <HAL_Delay+0x44>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4413      	add	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004586:	bf00      	nop
 8004588:	f7ff ffde 	bl	8004548 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	429a      	cmp	r2, r3
 8004596:	d8f7      	bhi.n	8004588 <HAL_Delay+0x28>
  {
  }
}
 8004598:	bf00      	nop
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000020 	.word	0x20000020

080045a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e033      	b.n	8004626 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fe ff72 	bl	80034b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d118      	bne.n	8004618 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80045ee:	f023 0302 	bic.w	r3, r3, #2
 80045f2:	f043 0202 	orr.w	r2, r3, #2
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fae8 	bl	8004bd0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	f023 0303 	bic.w	r3, r3, #3
 800460e:	f043 0201 	orr.w	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	641a      	str	r2, [r3, #64]	@ 0x40
 8004616:	e001      	b.n	800461c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004624:	7bfb      	ldrb	r3, [r7, #15]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_ADC_Start+0x1a>
 8004646:	2302      	movs	r3, #2
 8004648:	e0b2      	b.n	80047b0 <HAL_ADC_Start+0x180>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b01      	cmp	r3, #1
 800465e:	d018      	beq.n	8004692 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004670:	4b52      	ldr	r3, [pc, #328]	@ (80047bc <HAL_ADC_Start+0x18c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a52      	ldr	r2, [pc, #328]	@ (80047c0 <HAL_ADC_Start+0x190>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	0c9a      	lsrs	r2, r3, #18
 800467c:	4613      	mov	r3, r2
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	4413      	add	r3, r2
 8004682:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004684:	e002      	b.n	800468c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	3b01      	subs	r3, #1
 800468a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f9      	bne.n	8004686 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b01      	cmp	r3, #1
 800469e:	d17a      	bne.n	8004796 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80046ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046de:	d106      	bne.n	80046ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e4:	f023 0206 	bic.w	r2, r3, #6
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	645a      	str	r2, [r3, #68]	@ 0x44
 80046ec:	e002      	b.n	80046f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046fc:	4b31      	ldr	r3, [pc, #196]	@ (80047c4 <HAL_ADC_Start+0x194>)
 80046fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004708:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f003 031f 	and.w	r3, r3, #31
 8004712:	2b00      	cmp	r3, #0
 8004714:	d12a      	bne.n	800476c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a2b      	ldr	r2, [pc, #172]	@ (80047c8 <HAL_ADC_Start+0x198>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d015      	beq.n	800474c <HAL_ADC_Start+0x11c>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a29      	ldr	r2, [pc, #164]	@ (80047cc <HAL_ADC_Start+0x19c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d105      	bne.n	8004736 <HAL_ADC_Start+0x106>
 800472a:	4b26      	ldr	r3, [pc, #152]	@ (80047c4 <HAL_ADC_Start+0x194>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a25      	ldr	r2, [pc, #148]	@ (80047d0 <HAL_ADC_Start+0x1a0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d136      	bne.n	80047ae <HAL_ADC_Start+0x17e>
 8004740:	4b20      	ldr	r3, [pc, #128]	@ (80047c4 <HAL_ADC_Start+0x194>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	2b00      	cmp	r3, #0
 800474a:	d130      	bne.n	80047ae <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d129      	bne.n	80047ae <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004768:	609a      	str	r2, [r3, #8]
 800476a:	e020      	b.n	80047ae <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a15      	ldr	r2, [pc, #84]	@ (80047c8 <HAL_ADC_Start+0x198>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d11b      	bne.n	80047ae <HAL_ADC_Start+0x17e>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d114      	bne.n	80047ae <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004792:	609a      	str	r2, [r3, #8]
 8004794:	e00b      	b.n	80047ae <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479a:	f043 0210 	orr.w	r2, r3, #16
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a6:	f043 0201 	orr.w	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	20000018 	.word	0x20000018
 80047c0:	431bde83 	.word	0x431bde83
 80047c4:	40012300 	.word	0x40012300
 80047c8:	40012000 	.word	0x40012000
 80047cc:	40012100 	.word	0x40012100
 80047d0:	40012200 	.word	0x40012200

080047d4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_ADC_Stop+0x16>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e021      	b.n	800482e <HAL_ADC_Stop+0x5a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0201 	bic.w	r2, r2, #1
 8004800:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d109      	bne.n	8004824 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	f043 0201 	orr.w	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b084      	sub	sp, #16
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004856:	d113      	bne.n	8004880 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004866:	d10b      	bne.n	8004880 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486c:	f043 0220 	orr.w	r2, r3, #32
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e063      	b.n	8004948 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004880:	f7ff fe62 	bl	8004548 <HAL_GetTick>
 8004884:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004886:	e021      	b.n	80048cc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d01d      	beq.n	80048cc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <HAL_ADC_PollForConversion+0x6c>
 8004896:	f7ff fe57 	bl	8004548 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d212      	bcs.n	80048cc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d00b      	beq.n	80048cc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	f043 0204 	orr.w	r2, r3, #4
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e03d      	b.n	8004948 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d1d6      	bne.n	8004888 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f06f 0212 	mvn.w	r2, #18
 80048e2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d123      	bne.n	8004946 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004902:	2b00      	cmp	r3, #0
 8004904:	d11f      	bne.n	8004946 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004910:	2b00      	cmp	r3, #0
 8004912:	d006      	beq.n	8004922 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800491e:	2b00      	cmp	r3, #0
 8004920:	d111      	bne.n	8004946 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004932:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d105      	bne.n	8004946 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	f043 0201 	orr.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x1c>
 8004984:	2302      	movs	r3, #2
 8004986:	e113      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x244>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b09      	cmp	r3, #9
 8004996:	d925      	bls.n	80049e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68d9      	ldr	r1, [r3, #12]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	4613      	mov	r3, r2
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	4413      	add	r3, r2
 80049ac:	3b1e      	subs	r3, #30
 80049ae:	2207      	movs	r2, #7
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	43da      	mvns	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	400a      	ands	r2, r1
 80049bc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68d9      	ldr	r1, [r3, #12]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	4618      	mov	r0, r3
 80049d0:	4603      	mov	r3, r0
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	4403      	add	r3, r0
 80049d6:	3b1e      	subs	r3, #30
 80049d8:	409a      	lsls	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	60da      	str	r2, [r3, #12]
 80049e2:	e022      	b.n	8004a2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6919      	ldr	r1, [r3, #16]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	4613      	mov	r3, r2
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	4413      	add	r3, r2
 80049f8:	2207      	movs	r2, #7
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	43da      	mvns	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	400a      	ands	r2, r1
 8004a06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6919      	ldr	r1, [r3, #16]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	4618      	mov	r0, r3
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	4403      	add	r3, r0
 8004a20:	409a      	lsls	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b06      	cmp	r3, #6
 8004a30:	d824      	bhi.n	8004a7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	3b05      	subs	r3, #5
 8004a44:	221f      	movs	r2, #31
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	43da      	mvns	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	400a      	ands	r2, r1
 8004a52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	4618      	mov	r0, r3
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3b05      	subs	r3, #5
 8004a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a7a:	e04c      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	d824      	bhi.n	8004ace <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	3b23      	subs	r3, #35	@ 0x23
 8004a96:	221f      	movs	r2, #31
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	43da      	mvns	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	400a      	ands	r2, r1
 8004aa4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	3b23      	subs	r3, #35	@ 0x23
 8004ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	631a      	str	r2, [r3, #48]	@ 0x30
 8004acc:	e023      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	3b41      	subs	r3, #65	@ 0x41
 8004ae0:	221f      	movs	r2, #31
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43da      	mvns	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	400a      	ands	r2, r1
 8004aee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	4618      	mov	r0, r3
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	3b41      	subs	r3, #65	@ 0x41
 8004b0a:	fa00 f203 	lsl.w	r2, r0, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b16:	4b29      	ldr	r3, [pc, #164]	@ (8004bbc <HAL_ADC_ConfigChannel+0x250>)
 8004b18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a28      	ldr	r2, [pc, #160]	@ (8004bc0 <HAL_ADC_ConfigChannel+0x254>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d10f      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x1d8>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b12      	cmp	r3, #18
 8004b2a:	d10b      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc0 <HAL_ADC_ConfigChannel+0x254>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d12b      	bne.n	8004ba6 <HAL_ADC_ConfigChannel+0x23a>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a1c      	ldr	r2, [pc, #112]	@ (8004bc4 <HAL_ADC_ConfigChannel+0x258>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <HAL_ADC_ConfigChannel+0x1f4>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b11      	cmp	r3, #17
 8004b5e:	d122      	bne.n	8004ba6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a11      	ldr	r2, [pc, #68]	@ (8004bc4 <HAL_ADC_ConfigChannel+0x258>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d111      	bne.n	8004ba6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b82:	4b11      	ldr	r3, [pc, #68]	@ (8004bc8 <HAL_ADC_ConfigChannel+0x25c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a11      	ldr	r2, [pc, #68]	@ (8004bcc <HAL_ADC_ConfigChannel+0x260>)
 8004b88:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8c:	0c9a      	lsrs	r2, r3, #18
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004b98:	e002      	b.n	8004ba0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f9      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40012300 	.word	0x40012300
 8004bc0:	40012000 	.word	0x40012000
 8004bc4:	10000012 	.word	0x10000012
 8004bc8:	20000018 	.word	0x20000018
 8004bcc:	431bde83 	.word	0x431bde83

08004bd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bd8:	4b79      	ldr	r3, [pc, #484]	@ (8004dc0 <ADC_Init+0x1f0>)
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6859      	ldr	r1, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	021a      	lsls	r2, r3, #8
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004c28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6859      	ldr	r1, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6899      	ldr	r1, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c62:	4a58      	ldr	r2, [pc, #352]	@ (8004dc4 <ADC_Init+0x1f4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d022      	beq.n	8004cae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6899      	ldr	r1, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004c98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6899      	ldr	r1, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]
 8004cac:	e00f      	b.n	8004cce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004cbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004ccc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0202 	bic.w	r2, r2, #2
 8004cdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6899      	ldr	r1, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	7e1b      	ldrb	r3, [r3, #24]
 8004ce8:	005a      	lsls	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01b      	beq.n	8004d34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d0a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004d1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6859      	ldr	r1, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	3b01      	subs	r3, #1
 8004d28:	035a      	lsls	r2, r3, #13
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
 8004d32:	e007      	b.n	8004d44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d42:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004d52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	051a      	lsls	r2, r3, #20
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004d78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6899      	ldr	r1, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d86:	025a      	lsls	r2, r3, #9
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6899      	ldr	r1, [r3, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	029a      	lsls	r2, r3, #10
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	609a      	str	r2, [r3, #8]
}
 8004db4:	bf00      	nop
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	40012300 	.word	0x40012300
 8004dc4:	0f000001 	.word	0x0f000001

08004dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8004e0c <__NVIC_SetPriorityGrouping+0x44>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004de4:	4013      	ands	r3, r2
 8004de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004df0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dfa:	4a04      	ldr	r2, [pc, #16]	@ (8004e0c <__NVIC_SetPriorityGrouping+0x44>)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	60d3      	str	r3, [r2, #12]
}
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	e000ed00 	.word	0xe000ed00

08004e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e14:	4b04      	ldr	r3, [pc, #16]	@ (8004e28 <__NVIC_GetPriorityGrouping+0x18>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	0a1b      	lsrs	r3, r3, #8
 8004e1a:	f003 0307 	and.w	r3, r3, #7
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	e000ed00 	.word	0xe000ed00

08004e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	db0b      	blt.n	8004e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	f003 021f 	and.w	r2, r3, #31
 8004e44:	4907      	ldr	r1, [pc, #28]	@ (8004e64 <__NVIC_EnableIRQ+0x38>)
 8004e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4a:	095b      	lsrs	r3, r3, #5
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	e000e100 	.word	0xe000e100

08004e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	6039      	str	r1, [r7, #0]
 8004e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	db0a      	blt.n	8004e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	490c      	ldr	r1, [pc, #48]	@ (8004eb4 <__NVIC_SetPriority+0x4c>)
 8004e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e86:	0112      	lsls	r2, r2, #4
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e90:	e00a      	b.n	8004ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	4908      	ldr	r1, [pc, #32]	@ (8004eb8 <__NVIC_SetPriority+0x50>)
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	3b04      	subs	r3, #4
 8004ea0:	0112      	lsls	r2, r2, #4
 8004ea2:	b2d2      	uxtb	r2, r2
 8004ea4:	440b      	add	r3, r1
 8004ea6:	761a      	strb	r2, [r3, #24]
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	e000e100 	.word	0xe000e100
 8004eb8:	e000ed00 	.word	0xe000ed00

08004ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b089      	sub	sp, #36	@ 0x24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	f1c3 0307 	rsb	r3, r3, #7
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	bf28      	it	cs
 8004eda:	2304      	movcs	r3, #4
 8004edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	2b06      	cmp	r3, #6
 8004ee4:	d902      	bls.n	8004eec <NVIC_EncodePriority+0x30>
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	3b03      	subs	r3, #3
 8004eea:	e000      	b.n	8004eee <NVIC_EncodePriority+0x32>
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	43da      	mvns	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	401a      	ands	r2, r3
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f04:	f04f 31ff 	mov.w	r1, #4294967295
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0e:	43d9      	mvns	r1, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f14:	4313      	orrs	r3, r2
         );
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3724      	adds	r7, #36	@ 0x24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f34:	d301      	bcc.n	8004f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f36:	2301      	movs	r3, #1
 8004f38:	e00f      	b.n	8004f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f64 <SysTick_Config+0x40>)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f42:	210f      	movs	r1, #15
 8004f44:	f04f 30ff 	mov.w	r0, #4294967295
 8004f48:	f7ff ff8e 	bl	8004e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f4c:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <SysTick_Config+0x40>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f52:	4b04      	ldr	r3, [pc, #16]	@ (8004f64 <SysTick_Config+0x40>)
 8004f54:	2207      	movs	r2, #7
 8004f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	e000e010 	.word	0xe000e010

08004f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7ff ff29 	bl	8004dc8 <__NVIC_SetPriorityGrouping>
}
 8004f76:	bf00      	nop
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b086      	sub	sp, #24
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	4603      	mov	r3, r0
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
 8004f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f90:	f7ff ff3e 	bl	8004e10 <__NVIC_GetPriorityGrouping>
 8004f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	68b9      	ldr	r1, [r7, #8]
 8004f9a:	6978      	ldr	r0, [r7, #20]
 8004f9c:	f7ff ff8e 	bl	8004ebc <NVIC_EncodePriority>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff ff5d 	bl	8004e68 <__NVIC_SetPriority>
}
 8004fae:	bf00      	nop
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff ff31 	bl	8004e2c <__NVIC_EnableIRQ>
}
 8004fca:	bf00      	nop
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff ffa2 	bl	8004f24 <SysTick_Config>
 8004fe0:	4603      	mov	r3, r0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ff8:	f7ff faa6 	bl	8004548 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e099      	b.n	800513c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0201 	bic.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005028:	e00f      	b.n	800504a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800502a:	f7ff fa8d 	bl	8004548 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b05      	cmp	r3, #5
 8005036:	d908      	bls.n	800504a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2220      	movs	r2, #32
 800503c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2203      	movs	r2, #3
 8005042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e078      	b.n	800513c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1e8      	bne.n	800502a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	4b38      	ldr	r3, [pc, #224]	@ (8005144 <HAL_DMA_Init+0x158>)
 8005064:	4013      	ands	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005076:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005082:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800508e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d107      	bne.n	80050b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ac:	4313      	orrs	r3, r2
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f023 0307 	bic.w	r3, r3, #7
 80050ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d117      	bne.n	800510e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00e      	beq.n	800510e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 fa7b 	bl	80055ec <DMA_CheckFifoParam>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d008      	beq.n	800510e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2240      	movs	r2, #64	@ 0x40
 8005100:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800510a:	2301      	movs	r3, #1
 800510c:	e016      	b.n	800513c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fa32 	bl	8005580 <DMA_CalcBaseAndBitshift>
 800511c:	4603      	mov	r3, r0
 800511e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005124:	223f      	movs	r2, #63	@ 0x3f
 8005126:	409a      	lsls	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	f010803f 	.word	0xf010803f

08005148 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005154:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005156:	f7ff f9f7 	bl	8004548 <HAL_GetTick>
 800515a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d008      	beq.n	800517a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2280      	movs	r2, #128	@ 0x80
 800516c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e052      	b.n	8005220 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0216 	bic.w	r2, r2, #22
 8005188:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695a      	ldr	r2, [r3, #20]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005198:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d103      	bne.n	80051aa <HAL_DMA_Abort+0x62>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0208 	bic.w	r2, r2, #8
 80051b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0201 	bic.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051ca:	e013      	b.n	80051f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051cc:	f7ff f9bc 	bl	8004548 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b05      	cmp	r3, #5
 80051d8:	d90c      	bls.n	80051f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2203      	movs	r2, #3
 80051e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e015      	b.n	8005220 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e4      	bne.n	80051cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005206:	223f      	movs	r2, #63	@ 0x3f
 8005208:	409a      	lsls	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d004      	beq.n	8005246 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2280      	movs	r2, #128	@ 0x80
 8005240:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e00c      	b.n	8005260 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2205      	movs	r2, #5
 800524a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0201 	bic.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005278:	4b8e      	ldr	r3, [pc, #568]	@ (80054b4 <HAL_DMA_IRQHandler+0x248>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a8e      	ldr	r2, [pc, #568]	@ (80054b8 <HAL_DMA_IRQHandler+0x24c>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	0a9b      	lsrs	r3, r3, #10
 8005284:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005296:	2208      	movs	r2, #8
 8005298:	409a      	lsls	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4013      	ands	r3, r2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01a      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d013      	beq.n	80052d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0204 	bic.w	r2, r2, #4
 80052be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c4:	2208      	movs	r2, #8
 80052c6:	409a      	lsls	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052d0:	f043 0201 	orr.w	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052dc:	2201      	movs	r2, #1
 80052de:	409a      	lsls	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4013      	ands	r3, r2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d012      	beq.n	800530e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00b      	beq.n	800530e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052fa:	2201      	movs	r2, #1
 80052fc:	409a      	lsls	r2, r3
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005306:	f043 0202 	orr.w	r2, r3, #2
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005312:	2204      	movs	r2, #4
 8005314:	409a      	lsls	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4013      	ands	r3, r2
 800531a:	2b00      	cmp	r3, #0
 800531c:	d012      	beq.n	8005344 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00b      	beq.n	8005344 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005330:	2204      	movs	r2, #4
 8005332:	409a      	lsls	r2, r3
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800533c:	f043 0204 	orr.w	r2, r3, #4
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005348:	2210      	movs	r2, #16
 800534a:	409a      	lsls	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4013      	ands	r3, r2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d043      	beq.n	80053dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0308 	and.w	r3, r3, #8
 800535e:	2b00      	cmp	r3, #0
 8005360:	d03c      	beq.n	80053dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005366:	2210      	movs	r2, #16
 8005368:	409a      	lsls	r2, r3
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d018      	beq.n	80053ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d108      	bne.n	800539c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d024      	beq.n	80053dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	4798      	blx	r3
 800539a:	e01f      	b.n	80053dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01b      	beq.n	80053dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	4798      	blx	r3
 80053ac:	e016      	b.n	80053dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d107      	bne.n	80053cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0208 	bic.w	r2, r2, #8
 80053ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e0:	2220      	movs	r2, #32
 80053e2:	409a      	lsls	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4013      	ands	r3, r2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 808f 	beq.w	800550c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f000 8087 	beq.w	800550c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005402:	2220      	movs	r2, #32
 8005404:	409a      	lsls	r2, r3
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b05      	cmp	r3, #5
 8005414:	d136      	bne.n	8005484 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0216 	bic.w	r2, r2, #22
 8005424:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695a      	ldr	r2, [r3, #20]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005434:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d103      	bne.n	8005446 <HAL_DMA_IRQHandler+0x1da>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0208 	bic.w	r2, r2, #8
 8005454:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800545a:	223f      	movs	r2, #63	@ 0x3f
 800545c:	409a      	lsls	r2, r3
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005476:	2b00      	cmp	r3, #0
 8005478:	d07e      	beq.n	8005578 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	4798      	blx	r3
        }
        return;
 8005482:	e079      	b.n	8005578 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d01d      	beq.n	80054ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10d      	bne.n	80054bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d031      	beq.n	800550c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	4798      	blx	r3
 80054b0:	e02c      	b.n	800550c <HAL_DMA_IRQHandler+0x2a0>
 80054b2:	bf00      	nop
 80054b4:	20000018 	.word	0x20000018
 80054b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d023      	beq.n	800550c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	4798      	blx	r3
 80054cc:	e01e      	b.n	800550c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10f      	bne.n	80054fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0210 	bic.w	r2, r2, #16
 80054ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005510:	2b00      	cmp	r3, #0
 8005512:	d032      	beq.n	800557a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d022      	beq.n	8005566 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2205      	movs	r2, #5
 8005524:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0201 	bic.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	3301      	adds	r3, #1
 800553c:	60bb      	str	r3, [r7, #8]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	429a      	cmp	r2, r3
 8005542:	d307      	bcc.n	8005554 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f2      	bne.n	8005538 <HAL_DMA_IRQHandler+0x2cc>
 8005552:	e000      	b.n	8005556 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005554:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	4798      	blx	r3
 8005576:	e000      	b.n	800557a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005578:	bf00      	nop
    }
  }
}
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	3b10      	subs	r3, #16
 8005590:	4a14      	ldr	r2, [pc, #80]	@ (80055e4 <DMA_CalcBaseAndBitshift+0x64>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	091b      	lsrs	r3, r3, #4
 8005598:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800559a:	4a13      	ldr	r2, [pc, #76]	@ (80055e8 <DMA_CalcBaseAndBitshift+0x68>)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d909      	bls.n	80055c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80055b6:	f023 0303 	bic.w	r3, r3, #3
 80055ba:	1d1a      	adds	r2, r3, #4
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	659a      	str	r2, [r3, #88]	@ 0x58
 80055c0:	e007      	b.n	80055d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80055ca:	f023 0303 	bic.w	r3, r3, #3
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	aaaaaaab 	.word	0xaaaaaaab
 80055e8:	0800c904 	.word	0x0800c904

080055ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d11f      	bne.n	8005646 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b03      	cmp	r3, #3
 800560a:	d856      	bhi.n	80056ba <DMA_CheckFifoParam+0xce>
 800560c:	a201      	add	r2, pc, #4	@ (adr r2, 8005614 <DMA_CheckFifoParam+0x28>)
 800560e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005612:	bf00      	nop
 8005614:	08005625 	.word	0x08005625
 8005618:	08005637 	.word	0x08005637
 800561c:	08005625 	.word	0x08005625
 8005620:	080056bb 	.word	0x080056bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005628:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d046      	beq.n	80056be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005634:	e043      	b.n	80056be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800563e:	d140      	bne.n	80056c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005644:	e03d      	b.n	80056c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800564e:	d121      	bne.n	8005694 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2b03      	cmp	r3, #3
 8005654:	d837      	bhi.n	80056c6 <DMA_CheckFifoParam+0xda>
 8005656:	a201      	add	r2, pc, #4	@ (adr r2, 800565c <DMA_CheckFifoParam+0x70>)
 8005658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565c:	0800566d 	.word	0x0800566d
 8005660:	08005673 	.word	0x08005673
 8005664:	0800566d 	.word	0x0800566d
 8005668:	08005685 	.word	0x08005685
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
      break;
 8005670:	e030      	b.n	80056d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005676:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d025      	beq.n	80056ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005682:	e022      	b.n	80056ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800568c:	d11f      	bne.n	80056ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005692:	e01c      	b.n	80056ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b02      	cmp	r3, #2
 8005698:	d903      	bls.n	80056a2 <DMA_CheckFifoParam+0xb6>
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2b03      	cmp	r3, #3
 800569e:	d003      	beq.n	80056a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80056a0:	e018      	b.n	80056d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	73fb      	strb	r3, [r7, #15]
      break;
 80056a6:	e015      	b.n	80056d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00e      	beq.n	80056d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	73fb      	strb	r3, [r7, #15]
      break;
 80056b8:	e00b      	b.n	80056d2 <DMA_CheckFifoParam+0xe6>
      break;
 80056ba:	bf00      	nop
 80056bc:	e00a      	b.n	80056d4 <DMA_CheckFifoParam+0xe8>
      break;
 80056be:	bf00      	nop
 80056c0:	e008      	b.n	80056d4 <DMA_CheckFifoParam+0xe8>
      break;
 80056c2:	bf00      	nop
 80056c4:	e006      	b.n	80056d4 <DMA_CheckFifoParam+0xe8>
      break;
 80056c6:	bf00      	nop
 80056c8:	e004      	b.n	80056d4 <DMA_CheckFifoParam+0xe8>
      break;
 80056ca:	bf00      	nop
 80056cc:	e002      	b.n	80056d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80056ce:	bf00      	nop
 80056d0:	e000      	b.n	80056d4 <DMA_CheckFifoParam+0xe8>
      break;
 80056d2:	bf00      	nop
    }
  } 
  
  return status; 
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop

080056e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b089      	sub	sp, #36	@ 0x24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	e165      	b.n	80059cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005700:	2201      	movs	r2, #1
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4013      	ands	r3, r2
 8005712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	429a      	cmp	r2, r3
 800571a:	f040 8154 	bne.w	80059c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	2b01      	cmp	r3, #1
 8005728:	d005      	beq.n	8005736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005732:	2b02      	cmp	r3, #2
 8005734:	d130      	bne.n	8005798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	2203      	movs	r2, #3
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	43db      	mvns	r3, r3
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	4013      	ands	r3, r2
 800574c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	4313      	orrs	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800576c:	2201      	movs	r2, #1
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	43db      	mvns	r3, r3
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	4013      	ands	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	091b      	lsrs	r3, r3, #4
 8005782:	f003 0201 	and.w	r2, r3, #1
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	4313      	orrs	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d017      	beq.n	80057d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	2203      	movs	r2, #3
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	43db      	mvns	r3, r3
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	4013      	ands	r3, r2
 80057ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	fa02 f303 	lsl.w	r3, r2, r3
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f003 0303 	and.w	r3, r3, #3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d123      	bne.n	8005828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	08da      	lsrs	r2, r3, #3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3208      	adds	r2, #8
 80057e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	220f      	movs	r2, #15
 80057f8:	fa02 f303 	lsl.w	r3, r2, r3
 80057fc:	43db      	mvns	r3, r3
 80057fe:	69ba      	ldr	r2, [r7, #24]
 8005800:	4013      	ands	r3, r2
 8005802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	691a      	ldr	r2, [r3, #16]
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	4313      	orrs	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	08da      	lsrs	r2, r3, #3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3208      	adds	r2, #8
 8005822:	69b9      	ldr	r1, [r7, #24]
 8005824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	2203      	movs	r2, #3
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	43db      	mvns	r3, r3
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	4013      	ands	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f003 0203 	and.w	r2, r3, #3
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	4313      	orrs	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 80ae 	beq.w	80059c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800586a:	2300      	movs	r3, #0
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	4b5d      	ldr	r3, [pc, #372]	@ (80059e4 <HAL_GPIO_Init+0x300>)
 8005870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005872:	4a5c      	ldr	r2, [pc, #368]	@ (80059e4 <HAL_GPIO_Init+0x300>)
 8005874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005878:	6453      	str	r3, [r2, #68]	@ 0x44
 800587a:	4b5a      	ldr	r3, [pc, #360]	@ (80059e4 <HAL_GPIO_Init+0x300>)
 800587c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005886:	4a58      	ldr	r2, [pc, #352]	@ (80059e8 <HAL_GPIO_Init+0x304>)
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	089b      	lsrs	r3, r3, #2
 800588c:	3302      	adds	r3, #2
 800588e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	220f      	movs	r2, #15
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43db      	mvns	r3, r3
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4013      	ands	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a4f      	ldr	r2, [pc, #316]	@ (80059ec <HAL_GPIO_Init+0x308>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d025      	beq.n	80058fe <HAL_GPIO_Init+0x21a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a4e      	ldr	r2, [pc, #312]	@ (80059f0 <HAL_GPIO_Init+0x30c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01f      	beq.n	80058fa <HAL_GPIO_Init+0x216>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a4d      	ldr	r2, [pc, #308]	@ (80059f4 <HAL_GPIO_Init+0x310>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d019      	beq.n	80058f6 <HAL_GPIO_Init+0x212>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a4c      	ldr	r2, [pc, #304]	@ (80059f8 <HAL_GPIO_Init+0x314>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d013      	beq.n	80058f2 <HAL_GPIO_Init+0x20e>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a4b      	ldr	r2, [pc, #300]	@ (80059fc <HAL_GPIO_Init+0x318>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00d      	beq.n	80058ee <HAL_GPIO_Init+0x20a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a4a      	ldr	r2, [pc, #296]	@ (8005a00 <HAL_GPIO_Init+0x31c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d007      	beq.n	80058ea <HAL_GPIO_Init+0x206>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a49      	ldr	r2, [pc, #292]	@ (8005a04 <HAL_GPIO_Init+0x320>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d101      	bne.n	80058e6 <HAL_GPIO_Init+0x202>
 80058e2:	2306      	movs	r3, #6
 80058e4:	e00c      	b.n	8005900 <HAL_GPIO_Init+0x21c>
 80058e6:	2307      	movs	r3, #7
 80058e8:	e00a      	b.n	8005900 <HAL_GPIO_Init+0x21c>
 80058ea:	2305      	movs	r3, #5
 80058ec:	e008      	b.n	8005900 <HAL_GPIO_Init+0x21c>
 80058ee:	2304      	movs	r3, #4
 80058f0:	e006      	b.n	8005900 <HAL_GPIO_Init+0x21c>
 80058f2:	2303      	movs	r3, #3
 80058f4:	e004      	b.n	8005900 <HAL_GPIO_Init+0x21c>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e002      	b.n	8005900 <HAL_GPIO_Init+0x21c>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <HAL_GPIO_Init+0x21c>
 80058fe:	2300      	movs	r3, #0
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	f002 0203 	and.w	r2, r2, #3
 8005906:	0092      	lsls	r2, r2, #2
 8005908:	4093      	lsls	r3, r2
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005910:	4935      	ldr	r1, [pc, #212]	@ (80059e8 <HAL_GPIO_Init+0x304>)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	089b      	lsrs	r3, r3, #2
 8005916:	3302      	adds	r3, #2
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800591e:	4b3a      	ldr	r3, [pc, #232]	@ (8005a08 <HAL_GPIO_Init+0x324>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	43db      	mvns	r3, r3
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	4013      	ands	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005942:	4a31      	ldr	r2, [pc, #196]	@ (8005a08 <HAL_GPIO_Init+0x324>)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005948:	4b2f      	ldr	r3, [pc, #188]	@ (8005a08 <HAL_GPIO_Init+0x324>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	43db      	mvns	r3, r3
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	4013      	ands	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800596c:	4a26      	ldr	r2, [pc, #152]	@ (8005a08 <HAL_GPIO_Init+0x324>)
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005972:	4b25      	ldr	r3, [pc, #148]	@ (8005a08 <HAL_GPIO_Init+0x324>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	43db      	mvns	r3, r3
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	4013      	ands	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	4313      	orrs	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005996:	4a1c      	ldr	r2, [pc, #112]	@ (8005a08 <HAL_GPIO_Init+0x324>)
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800599c:	4b1a      	ldr	r3, [pc, #104]	@ (8005a08 <HAL_GPIO_Init+0x324>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	43db      	mvns	r3, r3
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	4013      	ands	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	4313      	orrs	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059c0:	4a11      	ldr	r2, [pc, #68]	@ (8005a08 <HAL_GPIO_Init+0x324>)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	3301      	adds	r3, #1
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	2b0f      	cmp	r3, #15
 80059d0:	f67f ae96 	bls.w	8005700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop
 80059d8:	3724      	adds	r7, #36	@ 0x24
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40023800 	.word	0x40023800
 80059e8:	40013800 	.word	0x40013800
 80059ec:	40020000 	.word	0x40020000
 80059f0:	40020400 	.word	0x40020400
 80059f4:	40020800 	.word	0x40020800
 80059f8:	40020c00 	.word	0x40020c00
 80059fc:	40021000 	.word	0x40021000
 8005a00:	40021400 	.word	0x40021400
 8005a04:	40021800 	.word	0x40021800
 8005a08:	40013c00 	.word	0x40013c00

08005a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	807b      	strh	r3, [r7, #2]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a1c:	787b      	ldrb	r3, [r7, #1]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a22:	887a      	ldrh	r2, [r7, #2]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a28:	e003      	b.n	8005a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a2a:	887b      	ldrh	r3, [r7, #2]
 8005a2c:	041a      	lsls	r2, r3, #16
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	619a      	str	r2, [r3, #24]
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
	...

08005a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005a4a:	4b08      	ldr	r3, [pc, #32]	@ (8005a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	4013      	ands	r3, r2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d006      	beq.n	8005a64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a56:	4a05      	ldr	r2, [pc, #20]	@ (8005a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a58:	88fb      	ldrh	r3, [r7, #6]
 8005a5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fb fb88 	bl	8001174 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a64:	bf00      	nop
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40013c00 	.word	0x40013c00

08005a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e12b      	b.n	8005cda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fd fd4e 	bl	8003538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2224      	movs	r2, #36	@ 0x24
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0201 	bic.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ac2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ad2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ad4:	f001 fa36 	bl	8006f44 <HAL_RCC_GetPCLK1Freq>
 8005ad8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	4a81      	ldr	r2, [pc, #516]	@ (8005ce4 <HAL_I2C_Init+0x274>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d807      	bhi.n	8005af4 <HAL_I2C_Init+0x84>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4a80      	ldr	r2, [pc, #512]	@ (8005ce8 <HAL_I2C_Init+0x278>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	bf94      	ite	ls
 8005aec:	2301      	movls	r3, #1
 8005aee:	2300      	movhi	r3, #0
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	e006      	b.n	8005b02 <HAL_I2C_Init+0x92>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4a7d      	ldr	r2, [pc, #500]	@ (8005cec <HAL_I2C_Init+0x27c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	bf94      	ite	ls
 8005afc:	2301      	movls	r3, #1
 8005afe:	2300      	movhi	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e0e7      	b.n	8005cda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4a78      	ldr	r2, [pc, #480]	@ (8005cf0 <HAL_I2C_Init+0x280>)
 8005b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b12:	0c9b      	lsrs	r3, r3, #18
 8005b14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	4a6a      	ldr	r2, [pc, #424]	@ (8005ce4 <HAL_I2C_Init+0x274>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d802      	bhi.n	8005b44 <HAL_I2C_Init+0xd4>
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	3301      	adds	r3, #1
 8005b42:	e009      	b.n	8005b58 <HAL_I2C_Init+0xe8>
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005b4a:	fb02 f303 	mul.w	r3, r2, r3
 8005b4e:	4a69      	ldr	r2, [pc, #420]	@ (8005cf4 <HAL_I2C_Init+0x284>)
 8005b50:	fba2 2303 	umull	r2, r3, r2, r3
 8005b54:	099b      	lsrs	r3, r3, #6
 8005b56:	3301      	adds	r3, #1
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005b6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	495c      	ldr	r1, [pc, #368]	@ (8005ce4 <HAL_I2C_Init+0x274>)
 8005b74:	428b      	cmp	r3, r1
 8005b76:	d819      	bhi.n	8005bac <HAL_I2C_Init+0x13c>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1e59      	subs	r1, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b86:	1c59      	adds	r1, r3, #1
 8005b88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005b8c:	400b      	ands	r3, r1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <HAL_I2C_Init+0x138>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1e59      	subs	r1, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ba6:	e051      	b.n	8005c4c <HAL_I2C_Init+0x1dc>
 8005ba8:	2304      	movs	r3, #4
 8005baa:	e04f      	b.n	8005c4c <HAL_I2C_Init+0x1dc>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d111      	bne.n	8005bd8 <HAL_I2C_Init+0x168>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	1e58      	subs	r0, r3, #1
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6859      	ldr	r1, [r3, #4]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	440b      	add	r3, r1
 8005bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	bf0c      	ite	eq
 8005bd0:	2301      	moveq	r3, #1
 8005bd2:	2300      	movne	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	e012      	b.n	8005bfe <HAL_I2C_Init+0x18e>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	1e58      	subs	r0, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6859      	ldr	r1, [r3, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	440b      	add	r3, r1
 8005be6:	0099      	lsls	r1, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bee:	3301      	adds	r3, #1
 8005bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	bf0c      	ite	eq
 8005bf8:	2301      	moveq	r3, #1
 8005bfa:	2300      	movne	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <HAL_I2C_Init+0x196>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e022      	b.n	8005c4c <HAL_I2C_Init+0x1dc>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10e      	bne.n	8005c2c <HAL_I2C_Init+0x1bc>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	1e58      	subs	r0, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6859      	ldr	r1, [r3, #4]
 8005c16:	460b      	mov	r3, r1
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	440b      	add	r3, r1
 8005c1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c20:	3301      	adds	r3, #1
 8005c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c2a:	e00f      	b.n	8005c4c <HAL_I2C_Init+0x1dc>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	1e58      	subs	r0, r3, #1
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6859      	ldr	r1, [r3, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	440b      	add	r3, r1
 8005c3a:	0099      	lsls	r1, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c42:	3301      	adds	r3, #1
 8005c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	6809      	ldr	r1, [r1, #0]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69da      	ldr	r2, [r3, #28]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005c7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6911      	ldr	r1, [r2, #16]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	68d2      	ldr	r2, [r2, #12]
 8005c86:	4311      	orrs	r1, r2
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6812      	ldr	r2, [r2, #0]
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695a      	ldr	r2, [r3, #20]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	000186a0 	.word	0x000186a0
 8005ce8:	001e847f 	.word	0x001e847f
 8005cec:	003d08ff 	.word	0x003d08ff
 8005cf0:	431bde83 	.word	0x431bde83
 8005cf4:	10624dd3 	.word	0x10624dd3

08005cf8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	607a      	str	r2, [r7, #4]
 8005d02:	461a      	mov	r2, r3
 8005d04:	460b      	mov	r3, r1
 8005d06:	817b      	strh	r3, [r7, #10]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d0c:	f7fe fc1c 	bl	8004548 <HAL_GetTick>
 8005d10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b20      	cmp	r3, #32
 8005d1c:	f040 80e0 	bne.w	8005ee0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	2319      	movs	r3, #25
 8005d26:	2201      	movs	r2, #1
 8005d28:	4970      	ldr	r1, [pc, #448]	@ (8005eec <HAL_I2C_Master_Transmit+0x1f4>)
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 fd92 	bl	8006854 <I2C_WaitOnFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005d36:	2302      	movs	r3, #2
 8005d38:	e0d3      	b.n	8005ee2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_I2C_Master_Transmit+0x50>
 8005d44:	2302      	movs	r3, #2
 8005d46:	e0cc      	b.n	8005ee2 <HAL_I2C_Master_Transmit+0x1ea>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d007      	beq.n	8005d6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0201 	orr.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2221      	movs	r2, #33	@ 0x21
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2210      	movs	r2, #16
 8005d8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	893a      	ldrh	r2, [r7, #8]
 8005d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4a50      	ldr	r2, [pc, #320]	@ (8005ef0 <HAL_I2C_Master_Transmit+0x1f8>)
 8005dae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005db0:	8979      	ldrh	r1, [r7, #10]
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	6a3a      	ldr	r2, [r7, #32]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 fbfc 	bl	80065b4 <I2C_MasterRequestWrite>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e08d      	b.n	8005ee2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	613b      	str	r3, [r7, #16]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	613b      	str	r3, [r7, #16]
 8005dda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005ddc:	e066      	b.n	8005eac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	6a39      	ldr	r1, [r7, #32]
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 fe50 	bl	8006a88 <I2C_WaitOnTXEFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00d      	beq.n	8005e0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d107      	bne.n	8005e06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e06b      	b.n	8005ee2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0e:	781a      	ldrb	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d11b      	bne.n	8005e80 <HAL_I2C_Master_Transmit+0x188>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d017      	beq.n	8005e80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e54:	781a      	ldrb	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	6a39      	ldr	r1, [r7, #32]
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 fe47 	bl	8006b18 <I2C_WaitOnBTFFlagUntilTimeout>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00d      	beq.n	8005eac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d107      	bne.n	8005ea8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ea6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e01a      	b.n	8005ee2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d194      	bne.n	8005dde <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	e000      	b.n	8005ee2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005ee0:	2302      	movs	r3, #2
  }
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	00100002 	.word	0x00100002
 8005ef0:	ffff0000 	.word	0xffff0000

08005ef4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08c      	sub	sp, #48	@ 0x30
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	607a      	str	r2, [r7, #4]
 8005efe:	461a      	mov	r2, r3
 8005f00:	460b      	mov	r3, r1
 8005f02:	817b      	strh	r3, [r7, #10]
 8005f04:	4613      	mov	r3, r2
 8005f06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f08:	f7fe fb1e 	bl	8004548 <HAL_GetTick>
 8005f0c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b20      	cmp	r3, #32
 8005f18:	f040 8217 	bne.w	800634a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	2319      	movs	r3, #25
 8005f22:	2201      	movs	r2, #1
 8005f24:	497c      	ldr	r1, [pc, #496]	@ (8006118 <HAL_I2C_Master_Receive+0x224>)
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 fc94 	bl	8006854 <I2C_WaitOnFlagUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005f32:	2302      	movs	r3, #2
 8005f34:	e20a      	b.n	800634c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_I2C_Master_Receive+0x50>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e203      	b.n	800634c <HAL_I2C_Master_Receive+0x458>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d007      	beq.n	8005f6a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0201 	orr.w	r2, r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2222      	movs	r2, #34	@ 0x22
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2210      	movs	r2, #16
 8005f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	893a      	ldrh	r2, [r7, #8]
 8005f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4a5c      	ldr	r2, [pc, #368]	@ (800611c <HAL_I2C_Master_Receive+0x228>)
 8005faa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005fac:	8979      	ldrh	r1, [r7, #10]
 8005fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 fb80 	bl	80066b8 <I2C_MasterRequestRead>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e1c4      	b.n	800634c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d113      	bne.n	8005ff2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fca:	2300      	movs	r3, #0
 8005fcc:	623b      	str	r3, [r7, #32]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	623b      	str	r3, [r7, #32]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	623b      	str	r3, [r7, #32]
 8005fde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	e198      	b.n	8006324 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d11b      	bne.n	8006032 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006008:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800600a:	2300      	movs	r3, #0
 800600c:	61fb      	str	r3, [r7, #28]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	61fb      	str	r3, [r7, #28]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	61fb      	str	r3, [r7, #28]
 800601e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	e178      	b.n	8006324 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006036:	2b02      	cmp	r3, #2
 8006038:	d11b      	bne.n	8006072 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006048:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006058:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800605a:	2300      	movs	r3, #0
 800605c:	61bb      	str	r3, [r7, #24]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	e158      	b.n	8006324 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006098:	e144      	b.n	8006324 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800609e:	2b03      	cmp	r3, #3
 80060a0:	f200 80f1 	bhi.w	8006286 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d123      	bne.n	80060f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 fd79 	bl	8006ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e145      	b.n	800634c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691a      	ldr	r2, [r3, #16]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060dc:	3b01      	subs	r3, #1
 80060de:	b29a      	uxth	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	3b01      	subs	r3, #1
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80060f2:	e117      	b.n	8006324 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d14e      	bne.n	800619a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006102:	2200      	movs	r2, #0
 8006104:	4906      	ldr	r1, [pc, #24]	@ (8006120 <HAL_I2C_Master_Receive+0x22c>)
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 fba4 	bl	8006854 <I2C_WaitOnFlagUntilTimeout>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d008      	beq.n	8006124 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e11a      	b.n	800634c <HAL_I2C_Master_Receive+0x458>
 8006116:	bf00      	nop
 8006118:	00100002 	.word	0x00100002
 800611c:	ffff0000 	.word	0xffff0000
 8006120:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691a      	ldr	r2, [r3, #16]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006198:	e0c4      	b.n	8006324 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a0:	2200      	movs	r2, #0
 80061a2:	496c      	ldr	r1, [pc, #432]	@ (8006354 <HAL_I2C_Master_Receive+0x460>)
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 fb55 	bl	8006854 <I2C_WaitOnFlagUntilTimeout>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0cb      	b.n	800634c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fc:	2200      	movs	r2, #0
 80061fe:	4955      	ldr	r1, [pc, #340]	@ (8006354 <HAL_I2C_Master_Receive+0x460>)
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fb27 	bl	8006854 <I2C_WaitOnFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e09d      	b.n	800634c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800621e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691a      	ldr	r2, [r3, #16]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691a      	ldr	r2, [r3, #16]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006264:	1c5a      	adds	r2, r3, #1
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800626e:	3b01      	subs	r3, #1
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800627a:	b29b      	uxth	r3, r3
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006284:	e04e      	b.n	8006324 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006288:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 fc8c 	bl	8006ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e058      	b.n	800634c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	691a      	ldr	r2, [r3, #16]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062b6:	3b01      	subs	r3, #1
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d124      	bne.n	8006324 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d107      	bne.n	80062f2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062f0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fc:	b2d2      	uxtb	r2, r2
 80062fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006328:	2b00      	cmp	r3, #0
 800632a:	f47f aeb6 	bne.w	800609a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2220      	movs	r2, #32
 8006332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	e000      	b.n	800634c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800634a:	2302      	movs	r3, #2
  }
}
 800634c:	4618      	mov	r0, r3
 800634e:	3728      	adds	r7, #40	@ 0x28
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	00010004 	.word	0x00010004

08006358 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	@ 0x28
 800635c:	af02      	add	r7, sp, #8
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	607a      	str	r2, [r7, #4]
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	460b      	mov	r3, r1
 8006366:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006368:	f7fe f8ee 	bl	8004548 <HAL_GetTick>
 800636c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b20      	cmp	r3, #32
 800637c:	f040 8111 	bne.w	80065a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	2319      	movs	r3, #25
 8006386:	2201      	movs	r2, #1
 8006388:	4988      	ldr	r1, [pc, #544]	@ (80065ac <HAL_I2C_IsDeviceReady+0x254>)
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fa62 	bl	8006854 <I2C_WaitOnFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006396:	2302      	movs	r3, #2
 8006398:	e104      	b.n	80065a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_I2C_IsDeviceReady+0x50>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e0fd      	b.n	80065a4 <HAL_I2C_IsDeviceReady+0x24c>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d007      	beq.n	80063ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f042 0201 	orr.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2224      	movs	r2, #36	@ 0x24
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4a70      	ldr	r2, [pc, #448]	@ (80065b0 <HAL_I2C_IsDeviceReady+0x258>)
 80063f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006400:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2200      	movs	r2, #0
 800640a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fa20 	bl	8006854 <I2C_WaitOnFlagUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00d      	beq.n	8006436 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006428:	d103      	bne.n	8006432 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006430:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e0b6      	b.n	80065a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006436:	897b      	ldrh	r3, [r7, #10]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	461a      	mov	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006444:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006446:	f7fe f87f 	bl	8004548 <HAL_GetTick>
 800644a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b02      	cmp	r3, #2
 8006458:	bf0c      	ite	eq
 800645a:	2301      	moveq	r3, #1
 800645c:	2300      	movne	r3, #0
 800645e:	b2db      	uxtb	r3, r3
 8006460:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800646c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006470:	bf0c      	ite	eq
 8006472:	2301      	moveq	r3, #1
 8006474:	2300      	movne	r3, #0
 8006476:	b2db      	uxtb	r3, r3
 8006478:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800647a:	e025      	b.n	80064c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800647c:	f7fe f864 	bl	8004548 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d302      	bcc.n	8006492 <HAL_I2C_IsDeviceReady+0x13a>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d103      	bne.n	800649a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	22a0      	movs	r2, #160	@ 0xa0
 8006496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	bf0c      	ite	eq
 80064a8:	2301      	moveq	r3, #1
 80064aa:	2300      	movne	r3, #0
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064be:	bf0c      	ite	eq
 80064c0:	2301      	moveq	r3, #1
 80064c2:	2300      	movne	r3, #0
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2ba0      	cmp	r3, #160	@ 0xa0
 80064d2:	d005      	beq.n	80064e0 <HAL_I2C_IsDeviceReady+0x188>
 80064d4:	7dfb      	ldrb	r3, [r7, #23]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d102      	bne.n	80064e0 <HAL_I2C_IsDeviceReady+0x188>
 80064da:	7dbb      	ldrb	r3, [r7, #22]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d0cd      	beq.n	800647c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d129      	bne.n	800654a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006504:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006506:	2300      	movs	r3, #0
 8006508:	613b      	str	r3, [r7, #16]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	613b      	str	r3, [r7, #16]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	613b      	str	r3, [r7, #16]
 800651a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	2319      	movs	r3, #25
 8006522:	2201      	movs	r2, #1
 8006524:	4921      	ldr	r1, [pc, #132]	@ (80065ac <HAL_I2C_IsDeviceReady+0x254>)
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 f994 	bl	8006854 <I2C_WaitOnFlagUntilTimeout>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e036      	b.n	80065a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2220      	movs	r2, #32
 800653a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	e02c      	b.n	80065a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006558:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006562:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	2319      	movs	r3, #25
 800656a:	2201      	movs	r2, #1
 800656c:	490f      	ldr	r1, [pc, #60]	@ (80065ac <HAL_I2C_IsDeviceReady+0x254>)
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 f970 	bl	8006854 <I2C_WaitOnFlagUntilTimeout>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e012      	b.n	80065a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	3301      	adds	r3, #1
 8006582:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	429a      	cmp	r2, r3
 800658a:	f4ff af32 	bcc.w	80063f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80065a2:	2302      	movs	r3, #2
  }
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3720      	adds	r7, #32
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	00100002 	.word	0x00100002
 80065b0:	ffff0000 	.word	0xffff0000

080065b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	607a      	str	r2, [r7, #4]
 80065be:	603b      	str	r3, [r7, #0]
 80065c0:	460b      	mov	r3, r1
 80065c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d006      	beq.n	80065de <I2C_MasterRequestWrite+0x2a>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d003      	beq.n	80065de <I2C_MasterRequestWrite+0x2a>
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065dc:	d108      	bne.n	80065f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e00b      	b.n	8006608 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f4:	2b12      	cmp	r3, #18
 80065f6:	d107      	bne.n	8006608 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006606:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 f91d 	bl	8006854 <I2C_WaitOnFlagUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00d      	beq.n	800663c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800662a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800662e:	d103      	bne.n	8006638 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006636:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e035      	b.n	80066a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006644:	d108      	bne.n	8006658 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006646:	897b      	ldrh	r3, [r7, #10]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	461a      	mov	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006654:	611a      	str	r2, [r3, #16]
 8006656:	e01b      	b.n	8006690 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006658:	897b      	ldrh	r3, [r7, #10]
 800665a:	11db      	asrs	r3, r3, #7
 800665c:	b2db      	uxtb	r3, r3
 800665e:	f003 0306 	and.w	r3, r3, #6
 8006662:	b2db      	uxtb	r3, r3
 8006664:	f063 030f 	orn	r3, r3, #15
 8006668:	b2da      	uxtb	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	490e      	ldr	r1, [pc, #56]	@ (80066b0 <I2C_MasterRequestWrite+0xfc>)
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f966 	bl	8006948 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e010      	b.n	80066a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006686:	897b      	ldrh	r3, [r7, #10]
 8006688:	b2da      	uxtb	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4907      	ldr	r1, [pc, #28]	@ (80066b4 <I2C_MasterRequestWrite+0x100>)
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 f956 	bl	8006948 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e000      	b.n	80066a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	00010008 	.word	0x00010008
 80066b4:	00010002 	.word	0x00010002

080066b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b088      	sub	sp, #32
 80066bc:	af02      	add	r7, sp, #8
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	460b      	mov	r3, r1
 80066c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d006      	beq.n	80066f2 <I2C_MasterRequestRead+0x3a>
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d003      	beq.n	80066f2 <I2C_MasterRequestRead+0x3a>
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066f0:	d108      	bne.n	8006704 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	e00b      	b.n	800671c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006708:	2b11      	cmp	r3, #17
 800670a:	d107      	bne.n	800671c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800671a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 f893 	bl	8006854 <I2C_WaitOnFlagUntilTimeout>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00d      	beq.n	8006750 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800673e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006742:	d103      	bne.n	800674c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800674a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e079      	b.n	8006844 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006758:	d108      	bne.n	800676c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800675a:	897b      	ldrh	r3, [r7, #10]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	f043 0301 	orr.w	r3, r3, #1
 8006762:	b2da      	uxtb	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	611a      	str	r2, [r3, #16]
 800676a:	e05f      	b.n	800682c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800676c:	897b      	ldrh	r3, [r7, #10]
 800676e:	11db      	asrs	r3, r3, #7
 8006770:	b2db      	uxtb	r3, r3
 8006772:	f003 0306 	and.w	r3, r3, #6
 8006776:	b2db      	uxtb	r3, r3
 8006778:	f063 030f 	orn	r3, r3, #15
 800677c:	b2da      	uxtb	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	4930      	ldr	r1, [pc, #192]	@ (800684c <I2C_MasterRequestRead+0x194>)
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 f8dc 	bl	8006948 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e054      	b.n	8006844 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800679a:	897b      	ldrh	r3, [r7, #10]
 800679c:	b2da      	uxtb	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	4929      	ldr	r1, [pc, #164]	@ (8006850 <I2C_MasterRequestRead+0x198>)
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 f8cc 	bl	8006948 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e044      	b.n	8006844 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ba:	2300      	movs	r3, #0
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	613b      	str	r3, [r7, #16]
 80067ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 f831 	bl	8006854 <I2C_WaitOnFlagUntilTimeout>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00d      	beq.n	8006814 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006802:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006806:	d103      	bne.n	8006810 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800680e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e017      	b.n	8006844 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006814:	897b      	ldrh	r3, [r7, #10]
 8006816:	11db      	asrs	r3, r3, #7
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f003 0306 	and.w	r3, r3, #6
 800681e:	b2db      	uxtb	r3, r3
 8006820:	f063 030e 	orn	r3, r3, #14
 8006824:	b2da      	uxtb	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	4907      	ldr	r1, [pc, #28]	@ (8006850 <I2C_MasterRequestRead+0x198>)
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	f000 f888 	bl	8006948 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	00010008 	.word	0x00010008
 8006850:	00010002 	.word	0x00010002

08006854 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	603b      	str	r3, [r7, #0]
 8006860:	4613      	mov	r3, r2
 8006862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006864:	e048      	b.n	80068f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686c:	d044      	beq.n	80068f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686e:	f7fd fe6b 	bl	8004548 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d302      	bcc.n	8006884 <I2C_WaitOnFlagUntilTimeout+0x30>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d139      	bne.n	80068f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	0c1b      	lsrs	r3, r3, #16
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b01      	cmp	r3, #1
 800688c:	d10d      	bne.n	80068aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	43da      	mvns	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	4013      	ands	r3, r2
 800689a:	b29b      	uxth	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	bf0c      	ite	eq
 80068a0:	2301      	moveq	r3, #1
 80068a2:	2300      	movne	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	461a      	mov	r2, r3
 80068a8:	e00c      	b.n	80068c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	43da      	mvns	r2, r3
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	4013      	ands	r3, r2
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	bf0c      	ite	eq
 80068bc:	2301      	moveq	r3, #1
 80068be:	2300      	movne	r3, #0
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	461a      	mov	r2, r3
 80068c4:	79fb      	ldrb	r3, [r7, #7]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d116      	bne.n	80068f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e4:	f043 0220 	orr.w	r2, r3, #32
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e023      	b.n	8006940 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	0c1b      	lsrs	r3, r3, #16
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d10d      	bne.n	800691e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	43da      	mvns	r2, r3
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	4013      	ands	r3, r2
 800690e:	b29b      	uxth	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	bf0c      	ite	eq
 8006914:	2301      	moveq	r3, #1
 8006916:	2300      	movne	r3, #0
 8006918:	b2db      	uxtb	r3, r3
 800691a:	461a      	mov	r2, r3
 800691c:	e00c      	b.n	8006938 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	43da      	mvns	r2, r3
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	4013      	ands	r3, r2
 800692a:	b29b      	uxth	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	bf0c      	ite	eq
 8006930:	2301      	moveq	r3, #1
 8006932:	2300      	movne	r3, #0
 8006934:	b2db      	uxtb	r3, r3
 8006936:	461a      	mov	r2, r3
 8006938:	79fb      	ldrb	r3, [r7, #7]
 800693a:	429a      	cmp	r2, r3
 800693c:	d093      	beq.n	8006866 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006956:	e071      	b.n	8006a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006962:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006966:	d123      	bne.n	80069b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006976:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006980:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699c:	f043 0204 	orr.w	r2, r3, #4
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e067      	b.n	8006a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b6:	d041      	beq.n	8006a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069b8:	f7fd fdc6 	bl	8004548 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d302      	bcc.n	80069ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d136      	bne.n	8006a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	0c1b      	lsrs	r3, r3, #16
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d10c      	bne.n	80069f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	43da      	mvns	r2, r3
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4013      	ands	r3, r2
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bf14      	ite	ne
 80069ea:	2301      	movne	r3, #1
 80069ec:	2300      	moveq	r3, #0
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	e00b      	b.n	8006a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	43da      	mvns	r2, r3
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	4013      	ands	r3, r2
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	bf14      	ite	ne
 8006a04:	2301      	movne	r3, #1
 8006a06:	2300      	moveq	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d016      	beq.n	8006a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a28:	f043 0220 	orr.w	r2, r3, #32
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e021      	b.n	8006a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	0c1b      	lsrs	r3, r3, #16
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d10c      	bne.n	8006a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	43da      	mvns	r2, r3
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	4013      	ands	r3, r2
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	bf14      	ite	ne
 8006a58:	2301      	movne	r3, #1
 8006a5a:	2300      	moveq	r3, #0
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	e00b      	b.n	8006a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	43da      	mvns	r2, r3
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bf14      	ite	ne
 8006a72:	2301      	movne	r3, #1
 8006a74:	2300      	moveq	r3, #0
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f47f af6d 	bne.w	8006958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a94:	e034      	b.n	8006b00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 f8e3 	bl	8006c62 <I2C_IsAcknowledgeFailed>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e034      	b.n	8006b10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aac:	d028      	beq.n	8006b00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aae:	f7fd fd4b 	bl	8004548 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d302      	bcc.n	8006ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d11d      	bne.n	8006b00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ace:	2b80      	cmp	r3, #128	@ 0x80
 8006ad0:	d016      	beq.n	8006b00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aec:	f043 0220 	orr.w	r2, r3, #32
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e007      	b.n	8006b10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b0a:	2b80      	cmp	r3, #128	@ 0x80
 8006b0c:	d1c3      	bne.n	8006a96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b24:	e034      	b.n	8006b90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 f89b 	bl	8006c62 <I2C_IsAcknowledgeFailed>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e034      	b.n	8006ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3c:	d028      	beq.n	8006b90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b3e:	f7fd fd03 	bl	8004548 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d302      	bcc.n	8006b54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d11d      	bne.n	8006b90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d016      	beq.n	8006b90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7c:	f043 0220 	orr.w	r2, r3, #32
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e007      	b.n	8006ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	f003 0304 	and.w	r3, r3, #4
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d1c3      	bne.n	8006b26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bb4:	e049      	b.n	8006c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	f003 0310 	and.w	r3, r3, #16
 8006bc0:	2b10      	cmp	r3, #16
 8006bc2:	d119      	bne.n	8006bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f06f 0210 	mvn.w	r2, #16
 8006bcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e030      	b.n	8006c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf8:	f7fd fca6 	bl	8004548 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d302      	bcc.n	8006c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d11d      	bne.n	8006c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c18:	2b40      	cmp	r3, #64	@ 0x40
 8006c1a:	d016      	beq.n	8006c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c36:	f043 0220 	orr.w	r2, r3, #32
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e007      	b.n	8006c5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c54:	2b40      	cmp	r3, #64	@ 0x40
 8006c56:	d1ae      	bne.n	8006bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c78:	d11b      	bne.n	8006cb2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c82:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9e:	f043 0204 	orr.w	r2, r3, #4
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006cca:	2300      	movs	r3, #0
 8006ccc:	603b      	str	r3, [r7, #0]
 8006cce:	4b20      	ldr	r3, [pc, #128]	@ (8006d50 <HAL_PWREx_EnableOverDrive+0x90>)
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8006d50 <HAL_PWREx_EnableOverDrive+0x90>)
 8006cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cda:	4b1d      	ldr	r3, [pc, #116]	@ (8006d50 <HAL_PWREx_EnableOverDrive+0x90>)
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8006d54 <HAL_PWREx_EnableOverDrive+0x94>)
 8006ce8:	2201      	movs	r2, #1
 8006cea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cec:	f7fd fc2c 	bl	8004548 <HAL_GetTick>
 8006cf0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006cf2:	e009      	b.n	8006d08 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006cf4:	f7fd fc28 	bl	8004548 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d02:	d901      	bls.n	8006d08 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e01f      	b.n	8006d48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d08:	4b13      	ldr	r3, [pc, #76]	@ (8006d58 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d14:	d1ee      	bne.n	8006cf4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006d16:	4b11      	ldr	r3, [pc, #68]	@ (8006d5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d18:	2201      	movs	r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d1c:	f7fd fc14 	bl	8004548 <HAL_GetTick>
 8006d20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d22:	e009      	b.n	8006d38 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d24:	f7fd fc10 	bl	8004548 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d32:	d901      	bls.n	8006d38 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e007      	b.n	8006d48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d38:	4b07      	ldr	r3, [pc, #28]	@ (8006d58 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d44:	d1ee      	bne.n	8006d24 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	40023800 	.word	0x40023800
 8006d54:	420e0040 	.word	0x420e0040
 8006d58:	40007000 	.word	0x40007000
 8006d5c:	420e0044 	.word	0x420e0044

08006d60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e0cc      	b.n	8006f0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d74:	4b68      	ldr	r3, [pc, #416]	@ (8006f18 <HAL_RCC_ClockConfig+0x1b8>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 030f 	and.w	r3, r3, #15
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d90c      	bls.n	8006d9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d82:	4b65      	ldr	r3, [pc, #404]	@ (8006f18 <HAL_RCC_ClockConfig+0x1b8>)
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d8a:	4b63      	ldr	r3, [pc, #396]	@ (8006f18 <HAL_RCC_ClockConfig+0x1b8>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d001      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e0b8      	b.n	8006f0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d020      	beq.n	8006dea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d005      	beq.n	8006dc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006db4:	4b59      	ldr	r3, [pc, #356]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	4a58      	ldr	r2, [pc, #352]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006dba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006dbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0308 	and.w	r3, r3, #8
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d005      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006dcc:	4b53      	ldr	r3, [pc, #332]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	4a52      	ldr	r2, [pc, #328]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006dd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006dd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dd8:	4b50      	ldr	r3, [pc, #320]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	494d      	ldr	r1, [pc, #308]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d044      	beq.n	8006e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d107      	bne.n	8006e0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dfe:	4b47      	ldr	r3, [pc, #284]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d119      	bne.n	8006e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e07f      	b.n	8006f0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d003      	beq.n	8006e1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d107      	bne.n	8006e2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d109      	bne.n	8006e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e06f      	b.n	8006f0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0302 	and.w	r3, r3, #2
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e067      	b.n	8006f0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e3e:	4b37      	ldr	r3, [pc, #220]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f023 0203 	bic.w	r2, r3, #3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	4934      	ldr	r1, [pc, #208]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e50:	f7fd fb7a 	bl	8004548 <HAL_GetTick>
 8006e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e56:	e00a      	b.n	8006e6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e58:	f7fd fb76 	bl	8004548 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e04f      	b.n	8006f0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f003 020c 	and.w	r2, r3, #12
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d1eb      	bne.n	8006e58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e80:	4b25      	ldr	r3, [pc, #148]	@ (8006f18 <HAL_RCC_ClockConfig+0x1b8>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 030f 	and.w	r3, r3, #15
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d20c      	bcs.n	8006ea8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e8e:	4b22      	ldr	r3, [pc, #136]	@ (8006f18 <HAL_RCC_ClockConfig+0x1b8>)
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e96:	4b20      	ldr	r3, [pc, #128]	@ (8006f18 <HAL_RCC_ClockConfig+0x1b8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d001      	beq.n	8006ea8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e032      	b.n	8006f0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d008      	beq.n	8006ec6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006eb4:	4b19      	ldr	r3, [pc, #100]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	4916      	ldr	r1, [pc, #88]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0308 	and.w	r3, r3, #8
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d009      	beq.n	8006ee6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ed2:	4b12      	ldr	r3, [pc, #72]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	490e      	ldr	r1, [pc, #56]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ee6:	f000 f855 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8006eea:	4602      	mov	r2, r0
 8006eec:	4b0b      	ldr	r3, [pc, #44]	@ (8006f1c <HAL_RCC_ClockConfig+0x1bc>)
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	091b      	lsrs	r3, r3, #4
 8006ef2:	f003 030f 	and.w	r3, r3, #15
 8006ef6:	490a      	ldr	r1, [pc, #40]	@ (8006f20 <HAL_RCC_ClockConfig+0x1c0>)
 8006ef8:	5ccb      	ldrb	r3, [r1, r3]
 8006efa:	fa22 f303 	lsr.w	r3, r2, r3
 8006efe:	4a09      	ldr	r2, [pc, #36]	@ (8006f24 <HAL_RCC_ClockConfig+0x1c4>)
 8006f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006f02:	4b09      	ldr	r3, [pc, #36]	@ (8006f28 <HAL_RCC_ClockConfig+0x1c8>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fd fada 	bl	80044c0 <HAL_InitTick>

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	40023c00 	.word	0x40023c00
 8006f1c:	40023800 	.word	0x40023800
 8006f20:	0800c4ec 	.word	0x0800c4ec
 8006f24:	20000018 	.word	0x20000018
 8006f28:	2000001c 	.word	0x2000001c

08006f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f30:	4b03      	ldr	r3, [pc, #12]	@ (8006f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f32:	681b      	ldr	r3, [r3, #0]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	20000018 	.word	0x20000018

08006f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f48:	f7ff fff0 	bl	8006f2c <HAL_RCC_GetHCLKFreq>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	4b05      	ldr	r3, [pc, #20]	@ (8006f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	0a9b      	lsrs	r3, r3, #10
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	4903      	ldr	r1, [pc, #12]	@ (8006f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f5a:	5ccb      	ldrb	r3, [r1, r3]
 8006f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	40023800 	.word	0x40023800
 8006f68:	0800c4fc 	.word	0x0800c4fc

08006f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f70:	f7ff ffdc 	bl	8006f2c <HAL_RCC_GetHCLKFreq>
 8006f74:	4602      	mov	r2, r0
 8006f76:	4b05      	ldr	r3, [pc, #20]	@ (8006f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	0b5b      	lsrs	r3, r3, #13
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	4903      	ldr	r1, [pc, #12]	@ (8006f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f82:	5ccb      	ldrb	r3, [r1, r3]
 8006f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	0800c4fc 	.word	0x0800c4fc

08006f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f98:	b0ae      	sub	sp, #184	@ 0xb8
 8006f9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fba:	4bcb      	ldr	r3, [pc, #812]	@ (80072e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 030c 	and.w	r3, r3, #12
 8006fc2:	2b0c      	cmp	r3, #12
 8006fc4:	f200 8206 	bhi.w	80073d4 <HAL_RCC_GetSysClockFreq+0x440>
 8006fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fce:	bf00      	nop
 8006fd0:	08007005 	.word	0x08007005
 8006fd4:	080073d5 	.word	0x080073d5
 8006fd8:	080073d5 	.word	0x080073d5
 8006fdc:	080073d5 	.word	0x080073d5
 8006fe0:	0800700d 	.word	0x0800700d
 8006fe4:	080073d5 	.word	0x080073d5
 8006fe8:	080073d5 	.word	0x080073d5
 8006fec:	080073d5 	.word	0x080073d5
 8006ff0:	08007015 	.word	0x08007015
 8006ff4:	080073d5 	.word	0x080073d5
 8006ff8:	080073d5 	.word	0x080073d5
 8006ffc:	080073d5 	.word	0x080073d5
 8007000:	08007205 	.word	0x08007205
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007004:	4bb9      	ldr	r3, [pc, #740]	@ (80072ec <HAL_RCC_GetSysClockFreq+0x358>)
 8007006:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800700a:	e1e7      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800700c:	4bb8      	ldr	r3, [pc, #736]	@ (80072f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800700e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007012:	e1e3      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007014:	4bb4      	ldr	r3, [pc, #720]	@ (80072e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800701c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007020:	4bb1      	ldr	r3, [pc, #708]	@ (80072e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d071      	beq.n	8007110 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800702c:	4bae      	ldr	r3, [pc, #696]	@ (80072e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	099b      	lsrs	r3, r3, #6
 8007032:	2200      	movs	r2, #0
 8007034:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007038:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800703c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007044:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007048:	2300      	movs	r3, #0
 800704a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800704e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007052:	4622      	mov	r2, r4
 8007054:	462b      	mov	r3, r5
 8007056:	f04f 0000 	mov.w	r0, #0
 800705a:	f04f 0100 	mov.w	r1, #0
 800705e:	0159      	lsls	r1, r3, #5
 8007060:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007064:	0150      	lsls	r0, r2, #5
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	4621      	mov	r1, r4
 800706c:	1a51      	subs	r1, r2, r1
 800706e:	6439      	str	r1, [r7, #64]	@ 0x40
 8007070:	4629      	mov	r1, r5
 8007072:	eb63 0301 	sbc.w	r3, r3, r1
 8007076:	647b      	str	r3, [r7, #68]	@ 0x44
 8007078:	f04f 0200 	mov.w	r2, #0
 800707c:	f04f 0300 	mov.w	r3, #0
 8007080:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007084:	4649      	mov	r1, r9
 8007086:	018b      	lsls	r3, r1, #6
 8007088:	4641      	mov	r1, r8
 800708a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800708e:	4641      	mov	r1, r8
 8007090:	018a      	lsls	r2, r1, #6
 8007092:	4641      	mov	r1, r8
 8007094:	1a51      	subs	r1, r2, r1
 8007096:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007098:	4649      	mov	r1, r9
 800709a:	eb63 0301 	sbc.w	r3, r3, r1
 800709e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070a0:	f04f 0200 	mov.w	r2, #0
 80070a4:	f04f 0300 	mov.w	r3, #0
 80070a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80070ac:	4649      	mov	r1, r9
 80070ae:	00cb      	lsls	r3, r1, #3
 80070b0:	4641      	mov	r1, r8
 80070b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070b6:	4641      	mov	r1, r8
 80070b8:	00ca      	lsls	r2, r1, #3
 80070ba:	4610      	mov	r0, r2
 80070bc:	4619      	mov	r1, r3
 80070be:	4603      	mov	r3, r0
 80070c0:	4622      	mov	r2, r4
 80070c2:	189b      	adds	r3, r3, r2
 80070c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80070c6:	462b      	mov	r3, r5
 80070c8:	460a      	mov	r2, r1
 80070ca:	eb42 0303 	adc.w	r3, r2, r3
 80070ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	f04f 0300 	mov.w	r3, #0
 80070d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80070dc:	4629      	mov	r1, r5
 80070de:	024b      	lsls	r3, r1, #9
 80070e0:	4621      	mov	r1, r4
 80070e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80070e6:	4621      	mov	r1, r4
 80070e8:	024a      	lsls	r2, r1, #9
 80070ea:	4610      	mov	r0, r2
 80070ec:	4619      	mov	r1, r3
 80070ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80070fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007100:	f7f9 fde2 	bl	8000cc8 <__aeabi_uldivmod>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4613      	mov	r3, r2
 800710a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800710e:	e067      	b.n	80071e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007110:	4b75      	ldr	r3, [pc, #468]	@ (80072e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	099b      	lsrs	r3, r3, #6
 8007116:	2200      	movs	r2, #0
 8007118:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800711c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007120:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007128:	67bb      	str	r3, [r7, #120]	@ 0x78
 800712a:	2300      	movs	r3, #0
 800712c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800712e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8007132:	4622      	mov	r2, r4
 8007134:	462b      	mov	r3, r5
 8007136:	f04f 0000 	mov.w	r0, #0
 800713a:	f04f 0100 	mov.w	r1, #0
 800713e:	0159      	lsls	r1, r3, #5
 8007140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007144:	0150      	lsls	r0, r2, #5
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	4621      	mov	r1, r4
 800714c:	1a51      	subs	r1, r2, r1
 800714e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007150:	4629      	mov	r1, r5
 8007152:	eb63 0301 	sbc.w	r3, r3, r1
 8007156:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007158:	f04f 0200 	mov.w	r2, #0
 800715c:	f04f 0300 	mov.w	r3, #0
 8007160:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8007164:	4649      	mov	r1, r9
 8007166:	018b      	lsls	r3, r1, #6
 8007168:	4641      	mov	r1, r8
 800716a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800716e:	4641      	mov	r1, r8
 8007170:	018a      	lsls	r2, r1, #6
 8007172:	4641      	mov	r1, r8
 8007174:	ebb2 0a01 	subs.w	sl, r2, r1
 8007178:	4649      	mov	r1, r9
 800717a:	eb63 0b01 	sbc.w	fp, r3, r1
 800717e:	f04f 0200 	mov.w	r2, #0
 8007182:	f04f 0300 	mov.w	r3, #0
 8007186:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800718a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800718e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007192:	4692      	mov	sl, r2
 8007194:	469b      	mov	fp, r3
 8007196:	4623      	mov	r3, r4
 8007198:	eb1a 0303 	adds.w	r3, sl, r3
 800719c:	623b      	str	r3, [r7, #32]
 800719e:	462b      	mov	r3, r5
 80071a0:	eb4b 0303 	adc.w	r3, fp, r3
 80071a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80071a6:	f04f 0200 	mov.w	r2, #0
 80071aa:	f04f 0300 	mov.w	r3, #0
 80071ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80071b2:	4629      	mov	r1, r5
 80071b4:	028b      	lsls	r3, r1, #10
 80071b6:	4621      	mov	r1, r4
 80071b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071bc:	4621      	mov	r1, r4
 80071be:	028a      	lsls	r2, r1, #10
 80071c0:	4610      	mov	r0, r2
 80071c2:	4619      	mov	r1, r3
 80071c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071c8:	2200      	movs	r2, #0
 80071ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80071cc:	677a      	str	r2, [r7, #116]	@ 0x74
 80071ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80071d2:	f7f9 fd79 	bl	8000cc8 <__aeabi_uldivmod>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4613      	mov	r3, r2
 80071dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80071e0:	4b41      	ldr	r3, [pc, #260]	@ (80072e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	0c1b      	lsrs	r3, r3, #16
 80071e6:	f003 0303 	and.w	r3, r3, #3
 80071ea:	3301      	adds	r3, #1
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80071f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80071f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80071fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007202:	e0eb      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007204:	4b38      	ldr	r3, [pc, #224]	@ (80072e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800720c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007210:	4b35      	ldr	r3, [pc, #212]	@ (80072e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d06b      	beq.n	80072f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800721c:	4b32      	ldr	r3, [pc, #200]	@ (80072e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	099b      	lsrs	r3, r3, #6
 8007222:	2200      	movs	r2, #0
 8007224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007226:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007228:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800722a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007230:	2300      	movs	r3, #0
 8007232:	667b      	str	r3, [r7, #100]	@ 0x64
 8007234:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8007238:	4622      	mov	r2, r4
 800723a:	462b      	mov	r3, r5
 800723c:	f04f 0000 	mov.w	r0, #0
 8007240:	f04f 0100 	mov.w	r1, #0
 8007244:	0159      	lsls	r1, r3, #5
 8007246:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800724a:	0150      	lsls	r0, r2, #5
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4621      	mov	r1, r4
 8007252:	1a51      	subs	r1, r2, r1
 8007254:	61b9      	str	r1, [r7, #24]
 8007256:	4629      	mov	r1, r5
 8007258:	eb63 0301 	sbc.w	r3, r3, r1
 800725c:	61fb      	str	r3, [r7, #28]
 800725e:	f04f 0200 	mov.w	r2, #0
 8007262:	f04f 0300 	mov.w	r3, #0
 8007266:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800726a:	4659      	mov	r1, fp
 800726c:	018b      	lsls	r3, r1, #6
 800726e:	4651      	mov	r1, sl
 8007270:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007274:	4651      	mov	r1, sl
 8007276:	018a      	lsls	r2, r1, #6
 8007278:	4651      	mov	r1, sl
 800727a:	ebb2 0801 	subs.w	r8, r2, r1
 800727e:	4659      	mov	r1, fp
 8007280:	eb63 0901 	sbc.w	r9, r3, r1
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007290:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007294:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007298:	4690      	mov	r8, r2
 800729a:	4699      	mov	r9, r3
 800729c:	4623      	mov	r3, r4
 800729e:	eb18 0303 	adds.w	r3, r8, r3
 80072a2:	613b      	str	r3, [r7, #16]
 80072a4:	462b      	mov	r3, r5
 80072a6:	eb49 0303 	adc.w	r3, r9, r3
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	f04f 0200 	mov.w	r2, #0
 80072b0:	f04f 0300 	mov.w	r3, #0
 80072b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80072b8:	4629      	mov	r1, r5
 80072ba:	024b      	lsls	r3, r1, #9
 80072bc:	4621      	mov	r1, r4
 80072be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80072c2:	4621      	mov	r1, r4
 80072c4:	024a      	lsls	r2, r1, #9
 80072c6:	4610      	mov	r0, r2
 80072c8:	4619      	mov	r1, r3
 80072ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072ce:	2200      	movs	r2, #0
 80072d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80072d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80072d8:	f7f9 fcf6 	bl	8000cc8 <__aeabi_uldivmod>
 80072dc:	4602      	mov	r2, r0
 80072de:	460b      	mov	r3, r1
 80072e0:	4613      	mov	r3, r2
 80072e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072e6:	e065      	b.n	80073b4 <HAL_RCC_GetSysClockFreq+0x420>
 80072e8:	40023800 	.word	0x40023800
 80072ec:	00f42400 	.word	0x00f42400
 80072f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072f4:	4b3d      	ldr	r3, [pc, #244]	@ (80073ec <HAL_RCC_GetSysClockFreq+0x458>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	099b      	lsrs	r3, r3, #6
 80072fa:	2200      	movs	r2, #0
 80072fc:	4618      	mov	r0, r3
 80072fe:	4611      	mov	r1, r2
 8007300:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007304:	653b      	str	r3, [r7, #80]	@ 0x50
 8007306:	2300      	movs	r3, #0
 8007308:	657b      	str	r3, [r7, #84]	@ 0x54
 800730a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800730e:	4642      	mov	r2, r8
 8007310:	464b      	mov	r3, r9
 8007312:	f04f 0000 	mov.w	r0, #0
 8007316:	f04f 0100 	mov.w	r1, #0
 800731a:	0159      	lsls	r1, r3, #5
 800731c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007320:	0150      	lsls	r0, r2, #5
 8007322:	4602      	mov	r2, r0
 8007324:	460b      	mov	r3, r1
 8007326:	4641      	mov	r1, r8
 8007328:	1a51      	subs	r1, r2, r1
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	4649      	mov	r1, r9
 800732e:	eb63 0301 	sbc.w	r3, r3, r1
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	f04f 0300 	mov.w	r3, #0
 800733c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007340:	4659      	mov	r1, fp
 8007342:	018b      	lsls	r3, r1, #6
 8007344:	4651      	mov	r1, sl
 8007346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800734a:	4651      	mov	r1, sl
 800734c:	018a      	lsls	r2, r1, #6
 800734e:	4651      	mov	r1, sl
 8007350:	1a54      	subs	r4, r2, r1
 8007352:	4659      	mov	r1, fp
 8007354:	eb63 0501 	sbc.w	r5, r3, r1
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	f04f 0300 	mov.w	r3, #0
 8007360:	00eb      	lsls	r3, r5, #3
 8007362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007366:	00e2      	lsls	r2, r4, #3
 8007368:	4614      	mov	r4, r2
 800736a:	461d      	mov	r5, r3
 800736c:	4643      	mov	r3, r8
 800736e:	18e3      	adds	r3, r4, r3
 8007370:	603b      	str	r3, [r7, #0]
 8007372:	464b      	mov	r3, r9
 8007374:	eb45 0303 	adc.w	r3, r5, r3
 8007378:	607b      	str	r3, [r7, #4]
 800737a:	f04f 0200 	mov.w	r2, #0
 800737e:	f04f 0300 	mov.w	r3, #0
 8007382:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007386:	4629      	mov	r1, r5
 8007388:	028b      	lsls	r3, r1, #10
 800738a:	4621      	mov	r1, r4
 800738c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007390:	4621      	mov	r1, r4
 8007392:	028a      	lsls	r2, r1, #10
 8007394:	4610      	mov	r0, r2
 8007396:	4619      	mov	r1, r3
 8007398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800739c:	2200      	movs	r2, #0
 800739e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073a0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80073a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80073a6:	f7f9 fc8f 	bl	8000cc8 <__aeabi_uldivmod>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	4613      	mov	r3, r2
 80073b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80073b4:	4b0d      	ldr	r3, [pc, #52]	@ (80073ec <HAL_RCC_GetSysClockFreq+0x458>)
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	0f1b      	lsrs	r3, r3, #28
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80073c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80073c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80073ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80073d2:	e003      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073d4:	4b06      	ldr	r3, [pc, #24]	@ (80073f0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80073d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80073da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	37b8      	adds	r7, #184	@ 0xb8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073ea:	bf00      	nop
 80073ec:	40023800 	.word	0x40023800
 80073f0:	00f42400 	.word	0x00f42400

080073f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e28d      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	f000 8083 	beq.w	800751a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007414:	4b94      	ldr	r3, [pc, #592]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f003 030c 	and.w	r3, r3, #12
 800741c:	2b04      	cmp	r3, #4
 800741e:	d019      	beq.n	8007454 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007420:	4b91      	ldr	r3, [pc, #580]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 030c 	and.w	r3, r3, #12
        || \
 8007428:	2b08      	cmp	r3, #8
 800742a:	d106      	bne.n	800743a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800742c:	4b8e      	ldr	r3, [pc, #568]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007434:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007438:	d00c      	beq.n	8007454 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800743a:	4b8b      	ldr	r3, [pc, #556]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007442:	2b0c      	cmp	r3, #12
 8007444:	d112      	bne.n	800746c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007446:	4b88      	ldr	r3, [pc, #544]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800744e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007452:	d10b      	bne.n	800746c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007454:	4b84      	ldr	r3, [pc, #528]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d05b      	beq.n	8007518 <HAL_RCC_OscConfig+0x124>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d157      	bne.n	8007518 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e25a      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007474:	d106      	bne.n	8007484 <HAL_RCC_OscConfig+0x90>
 8007476:	4b7c      	ldr	r3, [pc, #496]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a7b      	ldr	r2, [pc, #492]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 800747c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	e01d      	b.n	80074c0 <HAL_RCC_OscConfig+0xcc>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800748c:	d10c      	bne.n	80074a8 <HAL_RCC_OscConfig+0xb4>
 800748e:	4b76      	ldr	r3, [pc, #472]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a75      	ldr	r2, [pc, #468]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 8007494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007498:	6013      	str	r3, [r2, #0]
 800749a:	4b73      	ldr	r3, [pc, #460]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a72      	ldr	r2, [pc, #456]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 80074a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074a4:	6013      	str	r3, [r2, #0]
 80074a6:	e00b      	b.n	80074c0 <HAL_RCC_OscConfig+0xcc>
 80074a8:	4b6f      	ldr	r3, [pc, #444]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a6e      	ldr	r2, [pc, #440]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 80074ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074b2:	6013      	str	r3, [r2, #0]
 80074b4:	4b6c      	ldr	r3, [pc, #432]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a6b      	ldr	r2, [pc, #428]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 80074ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d013      	beq.n	80074f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c8:	f7fd f83e 	bl	8004548 <HAL_GetTick>
 80074cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074d0:	f7fd f83a 	bl	8004548 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b64      	cmp	r3, #100	@ 0x64
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e21f      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074e2:	4b61      	ldr	r3, [pc, #388]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0f0      	beq.n	80074d0 <HAL_RCC_OscConfig+0xdc>
 80074ee:	e014      	b.n	800751a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f0:	f7fd f82a 	bl	8004548 <HAL_GetTick>
 80074f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074f6:	e008      	b.n	800750a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074f8:	f7fd f826 	bl	8004548 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b64      	cmp	r3, #100	@ 0x64
 8007504:	d901      	bls.n	800750a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e20b      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800750a:	4b57      	ldr	r3, [pc, #348]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1f0      	bne.n	80074f8 <HAL_RCC_OscConfig+0x104>
 8007516:	e000      	b.n	800751a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d06f      	beq.n	8007606 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007526:	4b50      	ldr	r3, [pc, #320]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f003 030c 	and.w	r3, r3, #12
 800752e:	2b00      	cmp	r3, #0
 8007530:	d017      	beq.n	8007562 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007532:	4b4d      	ldr	r3, [pc, #308]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f003 030c 	and.w	r3, r3, #12
        || \
 800753a:	2b08      	cmp	r3, #8
 800753c:	d105      	bne.n	800754a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800753e:	4b4a      	ldr	r3, [pc, #296]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00b      	beq.n	8007562 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800754a:	4b47      	ldr	r3, [pc, #284]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007552:	2b0c      	cmp	r3, #12
 8007554:	d11c      	bne.n	8007590 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007556:	4b44      	ldr	r3, [pc, #272]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d116      	bne.n	8007590 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007562:	4b41      	ldr	r3, [pc, #260]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0302 	and.w	r3, r3, #2
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <HAL_RCC_OscConfig+0x186>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d001      	beq.n	800757a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e1d3      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800757a:	4b3b      	ldr	r3, [pc, #236]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	4937      	ldr	r1, [pc, #220]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 800758a:	4313      	orrs	r3, r2
 800758c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800758e:	e03a      	b.n	8007606 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d020      	beq.n	80075da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007598:	4b34      	ldr	r3, [pc, #208]	@ (800766c <HAL_RCC_OscConfig+0x278>)
 800759a:	2201      	movs	r2, #1
 800759c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759e:	f7fc ffd3 	bl	8004548 <HAL_GetTick>
 80075a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075a4:	e008      	b.n	80075b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075a6:	f7fc ffcf 	bl	8004548 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d901      	bls.n	80075b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e1b4      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d0f0      	beq.n	80075a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075c4:	4b28      	ldr	r3, [pc, #160]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	4925      	ldr	r1, [pc, #148]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	600b      	str	r3, [r1, #0]
 80075d8:	e015      	b.n	8007606 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075da:	4b24      	ldr	r3, [pc, #144]	@ (800766c <HAL_RCC_OscConfig+0x278>)
 80075dc:	2200      	movs	r2, #0
 80075de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e0:	f7fc ffb2 	bl	8004548 <HAL_GetTick>
 80075e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075e6:	e008      	b.n	80075fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075e8:	f7fc ffae 	bl	8004548 <HAL_GetTick>
 80075ec:	4602      	mov	r2, r0
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d901      	bls.n	80075fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e193      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1f0      	bne.n	80075e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0308 	and.w	r3, r3, #8
 800760e:	2b00      	cmp	r3, #0
 8007610:	d036      	beq.n	8007680 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d016      	beq.n	8007648 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800761a:	4b15      	ldr	r3, [pc, #84]	@ (8007670 <HAL_RCC_OscConfig+0x27c>)
 800761c:	2201      	movs	r2, #1
 800761e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007620:	f7fc ff92 	bl	8004548 <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007628:	f7fc ff8e 	bl	8004548 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e173      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800763a:	4b0b      	ldr	r3, [pc, #44]	@ (8007668 <HAL_RCC_OscConfig+0x274>)
 800763c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800763e:	f003 0302 	and.w	r3, r3, #2
 8007642:	2b00      	cmp	r3, #0
 8007644:	d0f0      	beq.n	8007628 <HAL_RCC_OscConfig+0x234>
 8007646:	e01b      	b.n	8007680 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007648:	4b09      	ldr	r3, [pc, #36]	@ (8007670 <HAL_RCC_OscConfig+0x27c>)
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800764e:	f7fc ff7b 	bl	8004548 <HAL_GetTick>
 8007652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007654:	e00e      	b.n	8007674 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007656:	f7fc ff77 	bl	8004548 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d907      	bls.n	8007674 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e15c      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
 8007668:	40023800 	.word	0x40023800
 800766c:	42470000 	.word	0x42470000
 8007670:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007674:	4b8a      	ldr	r3, [pc, #552]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 8007676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1ea      	bne.n	8007656 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0304 	and.w	r3, r3, #4
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8097 	beq.w	80077bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800768e:	2300      	movs	r3, #0
 8007690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007692:	4b83      	ldr	r3, [pc, #524]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 8007694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10f      	bne.n	80076be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800769e:	2300      	movs	r3, #0
 80076a0:	60bb      	str	r3, [r7, #8]
 80076a2:	4b7f      	ldr	r3, [pc, #508]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 80076a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a6:	4a7e      	ldr	r2, [pc, #504]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 80076a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80076ae:	4b7c      	ldr	r3, [pc, #496]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 80076b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076b6:	60bb      	str	r3, [r7, #8]
 80076b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076ba:	2301      	movs	r3, #1
 80076bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076be:	4b79      	ldr	r3, [pc, #484]	@ (80078a4 <HAL_RCC_OscConfig+0x4b0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d118      	bne.n	80076fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076ca:	4b76      	ldr	r3, [pc, #472]	@ (80078a4 <HAL_RCC_OscConfig+0x4b0>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a75      	ldr	r2, [pc, #468]	@ (80078a4 <HAL_RCC_OscConfig+0x4b0>)
 80076d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076d6:	f7fc ff37 	bl	8004548 <HAL_GetTick>
 80076da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076dc:	e008      	b.n	80076f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076de:	f7fc ff33 	bl	8004548 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d901      	bls.n	80076f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e118      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076f0:	4b6c      	ldr	r3, [pc, #432]	@ (80078a4 <HAL_RCC_OscConfig+0x4b0>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0f0      	beq.n	80076de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d106      	bne.n	8007712 <HAL_RCC_OscConfig+0x31e>
 8007704:	4b66      	ldr	r3, [pc, #408]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 8007706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007708:	4a65      	ldr	r2, [pc, #404]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 800770a:	f043 0301 	orr.w	r3, r3, #1
 800770e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007710:	e01c      	b.n	800774c <HAL_RCC_OscConfig+0x358>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	2b05      	cmp	r3, #5
 8007718:	d10c      	bne.n	8007734 <HAL_RCC_OscConfig+0x340>
 800771a:	4b61      	ldr	r3, [pc, #388]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 800771c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800771e:	4a60      	ldr	r2, [pc, #384]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 8007720:	f043 0304 	orr.w	r3, r3, #4
 8007724:	6713      	str	r3, [r2, #112]	@ 0x70
 8007726:	4b5e      	ldr	r3, [pc, #376]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 8007728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800772a:	4a5d      	ldr	r2, [pc, #372]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 800772c:	f043 0301 	orr.w	r3, r3, #1
 8007730:	6713      	str	r3, [r2, #112]	@ 0x70
 8007732:	e00b      	b.n	800774c <HAL_RCC_OscConfig+0x358>
 8007734:	4b5a      	ldr	r3, [pc, #360]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 8007736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007738:	4a59      	ldr	r2, [pc, #356]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 800773a:	f023 0301 	bic.w	r3, r3, #1
 800773e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007740:	4b57      	ldr	r3, [pc, #348]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 8007742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007744:	4a56      	ldr	r2, [pc, #344]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 8007746:	f023 0304 	bic.w	r3, r3, #4
 800774a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d015      	beq.n	8007780 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007754:	f7fc fef8 	bl	8004548 <HAL_GetTick>
 8007758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800775a:	e00a      	b.n	8007772 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800775c:	f7fc fef4 	bl	8004548 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800776a:	4293      	cmp	r3, r2
 800776c:	d901      	bls.n	8007772 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e0d7      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007772:	4b4b      	ldr	r3, [pc, #300]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 8007774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007776:	f003 0302 	and.w	r3, r3, #2
 800777a:	2b00      	cmp	r3, #0
 800777c:	d0ee      	beq.n	800775c <HAL_RCC_OscConfig+0x368>
 800777e:	e014      	b.n	80077aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007780:	f7fc fee2 	bl	8004548 <HAL_GetTick>
 8007784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007786:	e00a      	b.n	800779e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007788:	f7fc fede 	bl	8004548 <HAL_GetTick>
 800778c:	4602      	mov	r2, r0
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007796:	4293      	cmp	r3, r2
 8007798:	d901      	bls.n	800779e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e0c1      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800779e:	4b40      	ldr	r3, [pc, #256]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 80077a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1ee      	bne.n	8007788 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d105      	bne.n	80077bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077b0:	4b3b      	ldr	r3, [pc, #236]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 80077b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b4:	4a3a      	ldr	r2, [pc, #232]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 80077b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 80ad 	beq.w	8007920 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077c6:	4b36      	ldr	r3, [pc, #216]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f003 030c 	and.w	r3, r3, #12
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d060      	beq.n	8007894 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d145      	bne.n	8007866 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077da:	4b33      	ldr	r3, [pc, #204]	@ (80078a8 <HAL_RCC_OscConfig+0x4b4>)
 80077dc:	2200      	movs	r2, #0
 80077de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e0:	f7fc feb2 	bl	8004548 <HAL_GetTick>
 80077e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077e6:	e008      	b.n	80077fa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077e8:	f7fc feae 	bl	8004548 <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d901      	bls.n	80077fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e093      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077fa:	4b29      	ldr	r3, [pc, #164]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1f0      	bne.n	80077e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	69da      	ldr	r2, [r3, #28]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	431a      	orrs	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007814:	019b      	lsls	r3, r3, #6
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781c:	085b      	lsrs	r3, r3, #1
 800781e:	3b01      	subs	r3, #1
 8007820:	041b      	lsls	r3, r3, #16
 8007822:	431a      	orrs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007828:	061b      	lsls	r3, r3, #24
 800782a:	431a      	orrs	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007830:	071b      	lsls	r3, r3, #28
 8007832:	491b      	ldr	r1, [pc, #108]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 8007834:	4313      	orrs	r3, r2
 8007836:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007838:	4b1b      	ldr	r3, [pc, #108]	@ (80078a8 <HAL_RCC_OscConfig+0x4b4>)
 800783a:	2201      	movs	r2, #1
 800783c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783e:	f7fc fe83 	bl	8004548 <HAL_GetTick>
 8007842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007844:	e008      	b.n	8007858 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007846:	f7fc fe7f 	bl	8004548 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	2b02      	cmp	r3, #2
 8007852:	d901      	bls.n	8007858 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e064      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007858:	4b11      	ldr	r3, [pc, #68]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0f0      	beq.n	8007846 <HAL_RCC_OscConfig+0x452>
 8007864:	e05c      	b.n	8007920 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007866:	4b10      	ldr	r3, [pc, #64]	@ (80078a8 <HAL_RCC_OscConfig+0x4b4>)
 8007868:	2200      	movs	r2, #0
 800786a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800786c:	f7fc fe6c 	bl	8004548 <HAL_GetTick>
 8007870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007872:	e008      	b.n	8007886 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007874:	f7fc fe68 	bl	8004548 <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b02      	cmp	r3, #2
 8007880:	d901      	bls.n	8007886 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e04d      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007886:	4b06      	ldr	r3, [pc, #24]	@ (80078a0 <HAL_RCC_OscConfig+0x4ac>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1f0      	bne.n	8007874 <HAL_RCC_OscConfig+0x480>
 8007892:	e045      	b.n	8007920 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d107      	bne.n	80078ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e040      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
 80078a0:	40023800 	.word	0x40023800
 80078a4:	40007000 	.word	0x40007000
 80078a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078ac:	4b1f      	ldr	r3, [pc, #124]	@ (800792c <HAL_RCC_OscConfig+0x538>)
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d030      	beq.n	800791c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d129      	bne.n	800791c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d122      	bne.n	800791c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80078dc:	4013      	ands	r3, r2
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80078e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d119      	bne.n	800791c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f2:	085b      	lsrs	r3, r3, #1
 80078f4:	3b01      	subs	r3, #1
 80078f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d10f      	bne.n	800791c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007908:	429a      	cmp	r2, r3
 800790a:	d107      	bne.n	800791c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007916:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007918:	429a      	cmp	r2, r3
 800791a:	d001      	beq.n	8007920 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e000      	b.n	8007922 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	40023800 	.word	0x40023800

08007930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d101      	bne.n	8007942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e041      	b.n	80079c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d106      	bne.n	800795c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7fb ff06 	bl	8003768 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2202      	movs	r2, #2
 8007960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3304      	adds	r3, #4
 800796c:	4619      	mov	r1, r3
 800796e:	4610      	mov	r0, r2
 8007970:	f000 faec 	bl	8007f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
	...

080079d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d109      	bne.n	80079f4 <HAL_TIM_PWM_Start+0x24>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	bf14      	ite	ne
 80079ec:	2301      	movne	r3, #1
 80079ee:	2300      	moveq	r3, #0
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	e022      	b.n	8007a3a <HAL_TIM_PWM_Start+0x6a>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d109      	bne.n	8007a0e <HAL_TIM_PWM_Start+0x3e>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	bf14      	ite	ne
 8007a06:	2301      	movne	r3, #1
 8007a08:	2300      	moveq	r3, #0
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	e015      	b.n	8007a3a <HAL_TIM_PWM_Start+0x6a>
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b08      	cmp	r3, #8
 8007a12:	d109      	bne.n	8007a28 <HAL_TIM_PWM_Start+0x58>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	bf14      	ite	ne
 8007a20:	2301      	movne	r3, #1
 8007a22:	2300      	moveq	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	e008      	b.n	8007a3a <HAL_TIM_PWM_Start+0x6a>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	bf14      	ite	ne
 8007a34:	2301      	movne	r3, #1
 8007a36:	2300      	moveq	r3, #0
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e07c      	b.n	8007b3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <HAL_TIM_PWM_Start+0x82>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a50:	e013      	b.n	8007a7a <HAL_TIM_PWM_Start+0xaa>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b04      	cmp	r3, #4
 8007a56:	d104      	bne.n	8007a62 <HAL_TIM_PWM_Start+0x92>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a60:	e00b      	b.n	8007a7a <HAL_TIM_PWM_Start+0xaa>
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b08      	cmp	r3, #8
 8007a66:	d104      	bne.n	8007a72 <HAL_TIM_PWM_Start+0xa2>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a70:	e003      	b.n	8007a7a <HAL_TIM_PWM_Start+0xaa>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2202      	movs	r2, #2
 8007a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 fcbe 	bl	8008404 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8007b44 <HAL_TIM_PWM_Start+0x174>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d004      	beq.n	8007a9c <HAL_TIM_PWM_Start+0xcc>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a2c      	ldr	r2, [pc, #176]	@ (8007b48 <HAL_TIM_PWM_Start+0x178>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d101      	bne.n	8007aa0 <HAL_TIM_PWM_Start+0xd0>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e000      	b.n	8007aa2 <HAL_TIM_PWM_Start+0xd2>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d007      	beq.n	8007ab6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ab4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a22      	ldr	r2, [pc, #136]	@ (8007b44 <HAL_TIM_PWM_Start+0x174>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d022      	beq.n	8007b06 <HAL_TIM_PWM_Start+0x136>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ac8:	d01d      	beq.n	8007b06 <HAL_TIM_PWM_Start+0x136>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a1f      	ldr	r2, [pc, #124]	@ (8007b4c <HAL_TIM_PWM_Start+0x17c>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d018      	beq.n	8007b06 <HAL_TIM_PWM_Start+0x136>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b50 <HAL_TIM_PWM_Start+0x180>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d013      	beq.n	8007b06 <HAL_TIM_PWM_Start+0x136>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8007b54 <HAL_TIM_PWM_Start+0x184>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d00e      	beq.n	8007b06 <HAL_TIM_PWM_Start+0x136>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a16      	ldr	r2, [pc, #88]	@ (8007b48 <HAL_TIM_PWM_Start+0x178>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d009      	beq.n	8007b06 <HAL_TIM_PWM_Start+0x136>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a18      	ldr	r2, [pc, #96]	@ (8007b58 <HAL_TIM_PWM_Start+0x188>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d004      	beq.n	8007b06 <HAL_TIM_PWM_Start+0x136>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a16      	ldr	r2, [pc, #88]	@ (8007b5c <HAL_TIM_PWM_Start+0x18c>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d111      	bne.n	8007b2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f003 0307 	and.w	r3, r3, #7
 8007b10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2b06      	cmp	r3, #6
 8007b16:	d010      	beq.n	8007b3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0201 	orr.w	r2, r2, #1
 8007b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b28:	e007      	b.n	8007b3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f042 0201 	orr.w	r2, r2, #1
 8007b38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	40010000 	.word	0x40010000
 8007b48:	40010400 	.word	0x40010400
 8007b4c:	40000400 	.word	0x40000400
 8007b50:	40000800 	.word	0x40000800
 8007b54:	40000c00 	.word	0x40000c00
 8007b58:	40014000 	.word	0x40014000
 8007b5c:	40001800 	.word	0x40001800

08007b60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e097      	b.n	8007ca4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d106      	bne.n	8007b8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7fb fd73 	bl	8003674 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2202      	movs	r2, #2
 8007b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6812      	ldr	r2, [r2, #0]
 8007ba0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ba4:	f023 0307 	bic.w	r3, r3, #7
 8007ba8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	f000 f9c9 	bl	8007f4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007be2:	f023 0303 	bic.w	r3, r3, #3
 8007be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007c00:	f023 030c 	bic.w	r3, r3, #12
 8007c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007c0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	69db      	ldr	r3, [r3, #28]
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	011a      	lsls	r2, r3, #4
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	031b      	lsls	r3, r3, #12
 8007c30:	4313      	orrs	r3, r2
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007c3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007c46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	4313      	orrs	r3, r2
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3718      	adds	r7, #24
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cbc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007cc4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ccc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007cd4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d110      	bne.n	8007cfe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d102      	bne.n	8007ce8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ce2:	7b7b      	ldrb	r3, [r7, #13]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d001      	beq.n	8007cec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e069      	b.n	8007dc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cfc:	e031      	b.n	8007d62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	d110      	bne.n	8007d26 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d102      	bne.n	8007d10 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d0a:	7b3b      	ldrb	r3, [r7, #12]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d001      	beq.n	8007d14 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e055      	b.n	8007dc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2202      	movs	r2, #2
 8007d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d24:	e01d      	b.n	8007d62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d108      	bne.n	8007d3e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d2c:	7bbb      	ldrb	r3, [r7, #14]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d105      	bne.n	8007d3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d32:	7b7b      	ldrb	r3, [r7, #13]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d102      	bne.n	8007d3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d38:	7b3b      	ldrb	r3, [r7, #12]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d001      	beq.n	8007d42 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e03e      	b.n	8007dc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2202      	movs	r2, #2
 8007d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <HAL_TIM_Encoder_Start+0xc4>
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	2b04      	cmp	r3, #4
 8007d6c:	d008      	beq.n	8007d80 <HAL_TIM_Encoder_Start+0xd4>
 8007d6e:	e00f      	b.n	8007d90 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2201      	movs	r2, #1
 8007d76:	2100      	movs	r1, #0
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fb43 	bl	8008404 <TIM_CCxChannelCmd>
      break;
 8007d7e:	e016      	b.n	8007dae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2201      	movs	r2, #1
 8007d86:	2104      	movs	r1, #4
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 fb3b 	bl	8008404 <TIM_CCxChannelCmd>
      break;
 8007d8e:	e00e      	b.n	8007dae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2201      	movs	r2, #1
 8007d96:	2100      	movs	r1, #0
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f000 fb33 	bl	8008404 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2201      	movs	r2, #1
 8007da4:	2104      	movs	r1, #4
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 fb2c 	bl	8008404 <TIM_CCxChannelCmd>
      break;
 8007dac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f042 0201 	orr.w	r2, r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d101      	bne.n	8007de6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007de2:	2302      	movs	r3, #2
 8007de4:	e0ae      	b.n	8007f44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2b0c      	cmp	r3, #12
 8007df2:	f200 809f 	bhi.w	8007f34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007df6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfc:	08007e31 	.word	0x08007e31
 8007e00:	08007f35 	.word	0x08007f35
 8007e04:	08007f35 	.word	0x08007f35
 8007e08:	08007f35 	.word	0x08007f35
 8007e0c:	08007e71 	.word	0x08007e71
 8007e10:	08007f35 	.word	0x08007f35
 8007e14:	08007f35 	.word	0x08007f35
 8007e18:	08007f35 	.word	0x08007f35
 8007e1c:	08007eb3 	.word	0x08007eb3
 8007e20:	08007f35 	.word	0x08007f35
 8007e24:	08007f35 	.word	0x08007f35
 8007e28:	08007f35 	.word	0x08007f35
 8007e2c:	08007ef3 	.word	0x08007ef3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68b9      	ldr	r1, [r7, #8]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 f934 	bl	80080a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	699a      	ldr	r2, [r3, #24]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f042 0208 	orr.w	r2, r2, #8
 8007e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	699a      	ldr	r2, [r3, #24]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f022 0204 	bic.w	r2, r2, #4
 8007e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	6999      	ldr	r1, [r3, #24]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	691a      	ldr	r2, [r3, #16]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	619a      	str	r2, [r3, #24]
      break;
 8007e6e:	e064      	b.n	8007f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68b9      	ldr	r1, [r7, #8]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 f984 	bl	8008184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	699a      	ldr	r2, [r3, #24]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699a      	ldr	r2, [r3, #24]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6999      	ldr	r1, [r3, #24]
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	021a      	lsls	r2, r3, #8
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	619a      	str	r2, [r3, #24]
      break;
 8007eb0:	e043      	b.n	8007f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68b9      	ldr	r1, [r7, #8]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 f9d9 	bl	8008270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	69da      	ldr	r2, [r3, #28]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0208 	orr.w	r2, r2, #8
 8007ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	69da      	ldr	r2, [r3, #28]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f022 0204 	bic.w	r2, r2, #4
 8007edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	69d9      	ldr	r1, [r3, #28]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	691a      	ldr	r2, [r3, #16]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	61da      	str	r2, [r3, #28]
      break;
 8007ef0:	e023      	b.n	8007f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68b9      	ldr	r1, [r7, #8]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 fa2d 	bl	8008358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69da      	ldr	r2, [r3, #28]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	69da      	ldr	r2, [r3, #28]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	69d9      	ldr	r1, [r3, #28]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	021a      	lsls	r2, r3, #8
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	61da      	str	r2, [r3, #28]
      break;
 8007f32:	e002      	b.n	8007f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	75fb      	strb	r3, [r7, #23]
      break;
 8007f38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a46      	ldr	r2, [pc, #280]	@ (8008078 <TIM_Base_SetConfig+0x12c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d013      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f6a:	d00f      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a43      	ldr	r2, [pc, #268]	@ (800807c <TIM_Base_SetConfig+0x130>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d00b      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a42      	ldr	r2, [pc, #264]	@ (8008080 <TIM_Base_SetConfig+0x134>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d007      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a41      	ldr	r2, [pc, #260]	@ (8008084 <TIM_Base_SetConfig+0x138>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d003      	beq.n	8007f8c <TIM_Base_SetConfig+0x40>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a40      	ldr	r2, [pc, #256]	@ (8008088 <TIM_Base_SetConfig+0x13c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d108      	bne.n	8007f9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a35      	ldr	r2, [pc, #212]	@ (8008078 <TIM_Base_SetConfig+0x12c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d02b      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fac:	d027      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a32      	ldr	r2, [pc, #200]	@ (800807c <TIM_Base_SetConfig+0x130>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d023      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a31      	ldr	r2, [pc, #196]	@ (8008080 <TIM_Base_SetConfig+0x134>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d01f      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a30      	ldr	r2, [pc, #192]	@ (8008084 <TIM_Base_SetConfig+0x138>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d01b      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a2f      	ldr	r2, [pc, #188]	@ (8008088 <TIM_Base_SetConfig+0x13c>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d017      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a2e      	ldr	r2, [pc, #184]	@ (800808c <TIM_Base_SetConfig+0x140>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d013      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a2d      	ldr	r2, [pc, #180]	@ (8008090 <TIM_Base_SetConfig+0x144>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00f      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a2c      	ldr	r2, [pc, #176]	@ (8008094 <TIM_Base_SetConfig+0x148>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00b      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a2b      	ldr	r2, [pc, #172]	@ (8008098 <TIM_Base_SetConfig+0x14c>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d007      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a2a      	ldr	r2, [pc, #168]	@ (800809c <TIM_Base_SetConfig+0x150>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <TIM_Base_SetConfig+0xb2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a29      	ldr	r2, [pc, #164]	@ (80080a0 <TIM_Base_SetConfig+0x154>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d108      	bne.n	8008010 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	4313      	orrs	r3, r2
 800801c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a10      	ldr	r2, [pc, #64]	@ (8008078 <TIM_Base_SetConfig+0x12c>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d003      	beq.n	8008044 <TIM_Base_SetConfig+0xf8>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a12      	ldr	r2, [pc, #72]	@ (8008088 <TIM_Base_SetConfig+0x13c>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d103      	bne.n	800804c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	691a      	ldr	r2, [r3, #16]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b01      	cmp	r3, #1
 800805c:	d105      	bne.n	800806a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f023 0201 	bic.w	r2, r3, #1
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	611a      	str	r2, [r3, #16]
  }
}
 800806a:	bf00      	nop
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	40010000 	.word	0x40010000
 800807c:	40000400 	.word	0x40000400
 8008080:	40000800 	.word	0x40000800
 8008084:	40000c00 	.word	0x40000c00
 8008088:	40010400 	.word	0x40010400
 800808c:	40014000 	.word	0x40014000
 8008090:	40014400 	.word	0x40014400
 8008094:	40014800 	.word	0x40014800
 8008098:	40001800 	.word	0x40001800
 800809c:	40001c00 	.word	0x40001c00
 80080a0:	40002000 	.word	0x40002000

080080a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	f023 0201 	bic.w	r2, r3, #1
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 0303 	bic.w	r3, r3, #3
 80080da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	f023 0302 	bic.w	r3, r3, #2
 80080ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a20      	ldr	r2, [pc, #128]	@ (800817c <TIM_OC1_SetConfig+0xd8>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d003      	beq.n	8008108 <TIM_OC1_SetConfig+0x64>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a1f      	ldr	r2, [pc, #124]	@ (8008180 <TIM_OC1_SetConfig+0xdc>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d10c      	bne.n	8008122 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	f023 0308 	bic.w	r3, r3, #8
 800810e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	4313      	orrs	r3, r2
 8008118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f023 0304 	bic.w	r3, r3, #4
 8008120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a15      	ldr	r2, [pc, #84]	@ (800817c <TIM_OC1_SetConfig+0xd8>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d003      	beq.n	8008132 <TIM_OC1_SetConfig+0x8e>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a14      	ldr	r2, [pc, #80]	@ (8008180 <TIM_OC1_SetConfig+0xdc>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d111      	bne.n	8008156 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	4313      	orrs	r3, r2
 800814a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	4313      	orrs	r3, r2
 8008154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	621a      	str	r2, [r3, #32]
}
 8008170:	bf00      	nop
 8008172:	371c      	adds	r7, #28
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	40010000 	.word	0x40010000
 8008180:	40010400 	.word	0x40010400

08008184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	f023 0210 	bic.w	r2, r3, #16
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f023 0320 	bic.w	r3, r3, #32
 80081ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	011b      	lsls	r3, r3, #4
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	4313      	orrs	r3, r2
 80081da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a22      	ldr	r2, [pc, #136]	@ (8008268 <TIM_OC2_SetConfig+0xe4>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d003      	beq.n	80081ec <TIM_OC2_SetConfig+0x68>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a21      	ldr	r2, [pc, #132]	@ (800826c <TIM_OC2_SetConfig+0xe8>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d10d      	bne.n	8008208 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	011b      	lsls	r3, r3, #4
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008206:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a17      	ldr	r2, [pc, #92]	@ (8008268 <TIM_OC2_SetConfig+0xe4>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d003      	beq.n	8008218 <TIM_OC2_SetConfig+0x94>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a16      	ldr	r2, [pc, #88]	@ (800826c <TIM_OC2_SetConfig+0xe8>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d113      	bne.n	8008240 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800821e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	4313      	orrs	r3, r2
 8008232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	621a      	str	r2, [r3, #32]
}
 800825a:	bf00      	nop
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	40010000 	.word	0x40010000
 800826c:	40010400 	.word	0x40010400

08008270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a1b      	ldr	r3, [r3, #32]
 8008284:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800829e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f023 0303 	bic.w	r3, r3, #3
 80082a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80082b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	021b      	lsls	r3, r3, #8
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a21      	ldr	r2, [pc, #132]	@ (8008350 <TIM_OC3_SetConfig+0xe0>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d003      	beq.n	80082d6 <TIM_OC3_SetConfig+0x66>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a20      	ldr	r2, [pc, #128]	@ (8008354 <TIM_OC3_SetConfig+0xe4>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d10d      	bne.n	80082f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	021b      	lsls	r3, r3, #8
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a16      	ldr	r2, [pc, #88]	@ (8008350 <TIM_OC3_SetConfig+0xe0>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d003      	beq.n	8008302 <TIM_OC3_SetConfig+0x92>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a15      	ldr	r2, [pc, #84]	@ (8008354 <TIM_OC3_SetConfig+0xe4>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d113      	bne.n	800832a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	011b      	lsls	r3, r3, #4
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	4313      	orrs	r3, r2
 8008328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	621a      	str	r2, [r3, #32]
}
 8008344:	bf00      	nop
 8008346:	371c      	adds	r7, #28
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	40010000 	.word	0x40010000
 8008354:	40010400 	.word	0x40010400

08008358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	69db      	ldr	r3, [r3, #28]
 800837e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800838e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	021b      	lsls	r3, r3, #8
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	4313      	orrs	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	031b      	lsls	r3, r3, #12
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a12      	ldr	r2, [pc, #72]	@ (80083fc <TIM_OC4_SetConfig+0xa4>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d003      	beq.n	80083c0 <TIM_OC4_SetConfig+0x68>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a11      	ldr	r2, [pc, #68]	@ (8008400 <TIM_OC4_SetConfig+0xa8>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d109      	bne.n	80083d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	019b      	lsls	r3, r3, #6
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	621a      	str	r2, [r3, #32]
}
 80083ee:	bf00      	nop
 80083f0:	371c      	adds	r7, #28
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	40010000 	.word	0x40010000
 8008400:	40010400 	.word	0x40010400

08008404 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f003 031f 	and.w	r3, r3, #31
 8008416:	2201      	movs	r2, #1
 8008418:	fa02 f303 	lsl.w	r3, r2, r3
 800841c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6a1a      	ldr	r2, [r3, #32]
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	43db      	mvns	r3, r3
 8008426:	401a      	ands	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6a1a      	ldr	r2, [r3, #32]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	f003 031f 	and.w	r3, r3, #31
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	fa01 f303 	lsl.w	r3, r1, r3
 800843c:	431a      	orrs	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	621a      	str	r2, [r3, #32]
}
 8008442:	bf00      	nop
 8008444:	371c      	adds	r7, #28
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
	...

08008450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008460:	2b01      	cmp	r3, #1
 8008462:	d101      	bne.n	8008468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008464:	2302      	movs	r3, #2
 8008466:	e05a      	b.n	800851e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800848e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	4313      	orrs	r3, r2
 8008498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a21      	ldr	r2, [pc, #132]	@ (800852c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d022      	beq.n	80084f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084b4:	d01d      	beq.n	80084f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a1d      	ldr	r2, [pc, #116]	@ (8008530 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d018      	beq.n	80084f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008534 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d013      	beq.n	80084f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008538 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d00e      	beq.n	80084f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a18      	ldr	r2, [pc, #96]	@ (800853c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d009      	beq.n	80084f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a17      	ldr	r2, [pc, #92]	@ (8008540 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d004      	beq.n	80084f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a15      	ldr	r2, [pc, #84]	@ (8008544 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d10c      	bne.n	800850c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	4313      	orrs	r3, r2
 8008502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	40010000 	.word	0x40010000
 8008530:	40000400 	.word	0x40000400
 8008534:	40000800 	.word	0x40000800
 8008538:	40000c00 	.word	0x40000c00
 800853c:	40010400 	.word	0x40010400
 8008540:	40014000 	.word	0x40014000
 8008544:	40001800 	.word	0x40001800

08008548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e042      	b.n	80085e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d106      	bne.n	8008574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7fb f976 	bl	8003860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2224      	movs	r2, #36	@ 0x24
 8008578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68da      	ldr	r2, [r3, #12]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800858a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fd69 	bl	8009064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	691a      	ldr	r2, [r3, #16]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	695a      	ldr	r2, [r3, #20]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68da      	ldr	r2, [r3, #12]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2220      	movs	r2, #32
 80085cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2220      	movs	r2, #32
 80085d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b08a      	sub	sp, #40	@ 0x28
 80085ec:	af02      	add	r7, sp, #8
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	603b      	str	r3, [r7, #0]
 80085f4:	4613      	mov	r3, r2
 80085f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b20      	cmp	r3, #32
 8008606:	d175      	bne.n	80086f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <HAL_UART_Transmit+0x2c>
 800860e:	88fb      	ldrh	r3, [r7, #6]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e06e      	b.n	80086f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2221      	movs	r2, #33	@ 0x21
 8008622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008626:	f7fb ff8f 	bl	8004548 <HAL_GetTick>
 800862a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	88fa      	ldrh	r2, [r7, #6]
 8008630:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	88fa      	ldrh	r2, [r7, #6]
 8008636:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008640:	d108      	bne.n	8008654 <HAL_UART_Transmit+0x6c>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	691b      	ldr	r3, [r3, #16]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d104      	bne.n	8008654 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800864a:	2300      	movs	r3, #0
 800864c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	61bb      	str	r3, [r7, #24]
 8008652:	e003      	b.n	800865c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008658:	2300      	movs	r3, #0
 800865a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800865c:	e02e      	b.n	80086bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2200      	movs	r2, #0
 8008666:	2180      	movs	r1, #128	@ 0x80
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 fb05 	bl	8008c78 <UART_WaitOnFlagUntilTimeout>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d005      	beq.n	8008680 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2220      	movs	r2, #32
 8008678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e03a      	b.n	80086f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10b      	bne.n	800869e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008694:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	3302      	adds	r3, #2
 800869a:	61bb      	str	r3, [r7, #24]
 800869c:	e007      	b.n	80086ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	781a      	ldrb	r2, [r3, #0]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	3301      	adds	r3, #1
 80086ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	3b01      	subs	r3, #1
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1cb      	bne.n	800865e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2200      	movs	r2, #0
 80086ce:	2140      	movs	r1, #64	@ 0x40
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 fad1 	bl	8008c78 <UART_WaitOnFlagUntilTimeout>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d005      	beq.n	80086e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2220      	movs	r2, #32
 80086e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e006      	b.n	80086f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2220      	movs	r2, #32
 80086ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	e000      	b.n	80086f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80086f4:	2302      	movs	r3, #2
  }
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3720      	adds	r7, #32
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
	...

08008700 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b0ba      	sub	sp, #232	@ 0xe8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008726:	2300      	movs	r3, #0
 8008728:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800872c:	2300      	movs	r3, #0
 800872e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008736:	f003 030f 	and.w	r3, r3, #15
 800873a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800873e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10f      	bne.n	8008766 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b00      	cmp	r3, #0
 8008750:	d009      	beq.n	8008766 <HAL_UART_IRQHandler+0x66>
 8008752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008756:	f003 0320 	and.w	r3, r3, #32
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fbc2 	bl	8008ee8 <UART_Receive_IT>
      return;
 8008764:	e25b      	b.n	8008c1e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008766:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 80de 	beq.w	800892c <HAL_UART_IRQHandler+0x22c>
 8008770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d106      	bne.n	800878a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800877c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008780:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 80d1 	beq.w	800892c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800878a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00b      	beq.n	80087ae <HAL_UART_IRQHandler+0xae>
 8008796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800879a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d005      	beq.n	80087ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a6:	f043 0201 	orr.w	r2, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087b2:	f003 0304 	and.w	r3, r3, #4
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00b      	beq.n	80087d2 <HAL_UART_IRQHandler+0xd2>
 80087ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d005      	beq.n	80087d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ca:	f043 0202 	orr.w	r2, r3, #2
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00b      	beq.n	80087f6 <HAL_UART_IRQHandler+0xf6>
 80087de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d005      	beq.n	80087f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ee:	f043 0204 	orr.w	r2, r3, #4
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80087f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087fa:	f003 0308 	and.w	r3, r3, #8
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d011      	beq.n	8008826 <HAL_UART_IRQHandler+0x126>
 8008802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008806:	f003 0320 	and.w	r3, r3, #32
 800880a:	2b00      	cmp	r3, #0
 800880c:	d105      	bne.n	800881a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800880e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	d005      	beq.n	8008826 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800881e:	f043 0208 	orr.w	r2, r3, #8
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 81f2 	beq.w	8008c14 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008834:	f003 0320 	and.w	r3, r3, #32
 8008838:	2b00      	cmp	r3, #0
 800883a:	d008      	beq.n	800884e <HAL_UART_IRQHandler+0x14e>
 800883c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008840:	f003 0320 	and.w	r3, r3, #32
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fb4d 	bl	8008ee8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008858:	2b40      	cmp	r3, #64	@ 0x40
 800885a:	bf0c      	ite	eq
 800885c:	2301      	moveq	r3, #1
 800885e:	2300      	movne	r3, #0
 8008860:	b2db      	uxtb	r3, r3
 8008862:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800886a:	f003 0308 	and.w	r3, r3, #8
 800886e:	2b00      	cmp	r3, #0
 8008870:	d103      	bne.n	800887a <HAL_UART_IRQHandler+0x17a>
 8008872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008876:	2b00      	cmp	r3, #0
 8008878:	d04f      	beq.n	800891a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fa55 	bl	8008d2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800888a:	2b40      	cmp	r3, #64	@ 0x40
 800888c:	d141      	bne.n	8008912 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3314      	adds	r3, #20
 8008894:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008898:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800889c:	e853 3f00 	ldrex	r3, [r3]
 80088a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80088a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3314      	adds	r3, #20
 80088b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80088ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80088be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80088c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80088ca:	e841 2300 	strex	r3, r2, [r1]
 80088ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80088d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1d9      	bne.n	800888e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d013      	beq.n	800890a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e6:	4a7e      	ldr	r2, [pc, #504]	@ (8008ae0 <HAL_UART_IRQHandler+0x3e0>)
 80088e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fc fc9a 	bl	8005228 <HAL_DMA_Abort_IT>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d016      	beq.n	8008928 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008904:	4610      	mov	r0, r2
 8008906:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008908:	e00e      	b.n	8008928 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f99e 	bl	8008c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008910:	e00a      	b.n	8008928 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f99a 	bl	8008c4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008918:	e006      	b.n	8008928 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f996 	bl	8008c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008926:	e175      	b.n	8008c14 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008928:	bf00      	nop
    return;
 800892a:	e173      	b.n	8008c14 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008930:	2b01      	cmp	r3, #1
 8008932:	f040 814f 	bne.w	8008bd4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800893a:	f003 0310 	and.w	r3, r3, #16
 800893e:	2b00      	cmp	r3, #0
 8008940:	f000 8148 	beq.w	8008bd4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008948:	f003 0310 	and.w	r3, r3, #16
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 8141 	beq.w	8008bd4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008952:	2300      	movs	r3, #0
 8008954:	60bb      	str	r3, [r7, #8]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	60bb      	str	r3, [r7, #8]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	60bb      	str	r3, [r7, #8]
 8008966:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008972:	2b40      	cmp	r3, #64	@ 0x40
 8008974:	f040 80b6 	bne.w	8008ae4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008984:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 8145 	beq.w	8008c18 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008996:	429a      	cmp	r2, r3
 8008998:	f080 813e 	bcs.w	8008c18 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089ae:	f000 8088 	beq.w	8008ac2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	330c      	adds	r3, #12
 80089b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80089c0:	e853 3f00 	ldrex	r3, [r3]
 80089c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80089c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	330c      	adds	r3, #12
 80089da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80089de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80089e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80089ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80089ee:	e841 2300 	strex	r3, r2, [r1]
 80089f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80089f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1d9      	bne.n	80089b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	3314      	adds	r3, #20
 8008a04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a08:	e853 3f00 	ldrex	r3, [r3]
 8008a0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a10:	f023 0301 	bic.w	r3, r3, #1
 8008a14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	3314      	adds	r3, #20
 8008a1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008a22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008a26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008a2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008a2e:	e841 2300 	strex	r3, r2, [r1]
 8008a32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008a34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1e1      	bne.n	80089fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3314      	adds	r3, #20
 8008a40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a44:	e853 3f00 	ldrex	r3, [r3]
 8008a48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008a4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3314      	adds	r3, #20
 8008a5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008a5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008a60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008a64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008a6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1e3      	bne.n	8008a3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	330c      	adds	r3, #12
 8008a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a8a:	e853 3f00 	ldrex	r3, [r3]
 8008a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a92:	f023 0310 	bic.w	r3, r3, #16
 8008a96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	330c      	adds	r3, #12
 8008aa0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008aa4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008aa6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008aaa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008aac:	e841 2300 	strex	r3, r2, [r1]
 8008ab0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1e3      	bne.n	8008a80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fc fb43 	bl	8005148 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f8c1 	bl	8008c60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ade:	e09b      	b.n	8008c18 <HAL_UART_IRQHandler+0x518>
 8008ae0:	08008df1 	.word	0x08008df1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 808e 	beq.w	8008c1c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008b00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 8089 	beq.w	8008c1c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	330c      	adds	r3, #12
 8008b10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b14:	e853 3f00 	ldrex	r3, [r3]
 8008b18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	330c      	adds	r3, #12
 8008b2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008b2e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b30:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e3      	bne.n	8008b0a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3314      	adds	r3, #20
 8008b48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	623b      	str	r3, [r7, #32]
   return(result);
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	f023 0301 	bic.w	r3, r3, #1
 8008b58:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3314      	adds	r3, #20
 8008b62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b66:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b6e:	e841 2300 	strex	r3, r2, [r1]
 8008b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1e3      	bne.n	8008b42 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2220      	movs	r2, #32
 8008b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	330c      	adds	r3, #12
 8008b8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	e853 3f00 	ldrex	r3, [r3]
 8008b96:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f023 0310 	bic.w	r3, r3, #16
 8008b9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	330c      	adds	r3, #12
 8008ba8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008bac:	61fa      	str	r2, [r7, #28]
 8008bae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb0:	69b9      	ldr	r1, [r7, #24]
 8008bb2:	69fa      	ldr	r2, [r7, #28]
 8008bb4:	e841 2300 	strex	r3, r2, [r1]
 8008bb8:	617b      	str	r3, [r7, #20]
   return(result);
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1e3      	bne.n	8008b88 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f847 	bl	8008c60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008bd2:	e023      	b.n	8008c1c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d009      	beq.n	8008bf4 <HAL_UART_IRQHandler+0x4f4>
 8008be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d003      	beq.n	8008bf4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f913 	bl	8008e18 <UART_Transmit_IT>
    return;
 8008bf2:	e014      	b.n	8008c1e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00e      	beq.n	8008c1e <HAL_UART_IRQHandler+0x51e>
 8008c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d008      	beq.n	8008c1e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f953 	bl	8008eb8 <UART_EndTransmit_IT>
    return;
 8008c12:	e004      	b.n	8008c1e <HAL_UART_IRQHandler+0x51e>
    return;
 8008c14:	bf00      	nop
 8008c16:	e002      	b.n	8008c1e <HAL_UART_IRQHandler+0x51e>
      return;
 8008c18:	bf00      	nop
 8008c1a:	e000      	b.n	8008c1e <HAL_UART_IRQHandler+0x51e>
      return;
 8008c1c:	bf00      	nop
  }
}
 8008c1e:	37e8      	adds	r7, #232	@ 0xe8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	603b      	str	r3, [r7, #0]
 8008c84:	4613      	mov	r3, r2
 8008c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c88:	e03b      	b.n	8008d02 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c90:	d037      	beq.n	8008d02 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c92:	f7fb fc59 	bl	8004548 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	6a3a      	ldr	r2, [r7, #32]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d302      	bcc.n	8008ca8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ca2:	6a3b      	ldr	r3, [r7, #32]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d101      	bne.n	8008cac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e03a      	b.n	8008d22 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	f003 0304 	and.w	r3, r3, #4
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d023      	beq.n	8008d02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2b80      	cmp	r3, #128	@ 0x80
 8008cbe:	d020      	beq.n	8008d02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	2b40      	cmp	r3, #64	@ 0x40
 8008cc4:	d01d      	beq.n	8008d02 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0308 	and.w	r3, r3, #8
 8008cd0:	2b08      	cmp	r3, #8
 8008cd2:	d116      	bne.n	8008d02 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	617b      	str	r3, [r7, #20]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	617b      	str	r3, [r7, #20]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	617b      	str	r3, [r7, #20]
 8008ce8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f000 f81d 	bl	8008d2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2208      	movs	r2, #8
 8008cf4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e00f      	b.n	8008d22 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	bf0c      	ite	eq
 8008d12:	2301      	moveq	r3, #1
 8008d14:	2300      	movne	r3, #0
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	461a      	mov	r2, r3
 8008d1a:	79fb      	ldrb	r3, [r7, #7]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d0b4      	beq.n	8008c8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b095      	sub	sp, #84	@ 0x54
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	330c      	adds	r3, #12
 8008d38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d3c:	e853 3f00 	ldrex	r3, [r3]
 8008d40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	330c      	adds	r3, #12
 8008d50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d52:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e5      	bne.n	8008d32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3314      	adds	r3, #20
 8008d6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	e853 3f00 	ldrex	r3, [r3]
 8008d74:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	f023 0301 	bic.w	r3, r3, #1
 8008d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3314      	adds	r3, #20
 8008d84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d8e:	e841 2300 	strex	r3, r2, [r1]
 8008d92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1e5      	bne.n	8008d66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d119      	bne.n	8008dd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	330c      	adds	r3, #12
 8008da8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	e853 3f00 	ldrex	r3, [r3]
 8008db0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	f023 0310 	bic.w	r3, r3, #16
 8008db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	330c      	adds	r3, #12
 8008dc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008dc2:	61ba      	str	r2, [r7, #24]
 8008dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc6:	6979      	ldr	r1, [r7, #20]
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	e841 2300 	strex	r3, r2, [r1]
 8008dce:	613b      	str	r3, [r7, #16]
   return(result);
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1e5      	bne.n	8008da2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2220      	movs	r2, #32
 8008dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008de4:	bf00      	nop
 8008de6:	3754      	adds	r7, #84	@ 0x54
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f7ff ff1e 	bl	8008c4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e10:	bf00      	nop
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b21      	cmp	r3, #33	@ 0x21
 8008e2a:	d13e      	bne.n	8008eaa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e34:	d114      	bne.n	8008e60 <UART_Transmit_IT+0x48>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d110      	bne.n	8008e60 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a1b      	ldr	r3, [r3, #32]
 8008e58:	1c9a      	adds	r2, r3, #2
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	621a      	str	r2, [r3, #32]
 8008e5e:	e008      	b.n	8008e72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	1c59      	adds	r1, r3, #1
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	6211      	str	r1, [r2, #32]
 8008e6a:	781a      	ldrb	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10f      	bne.n	8008ea6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68da      	ldr	r2, [r3, #12]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68da      	ldr	r2, [r3, #12]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ea4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e000      	b.n	8008eac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008eaa:	2302      	movs	r3, #2
  }
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3714      	adds	r7, #20
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68da      	ldr	r2, [r3, #12]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ece:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f7ff fea3 	bl	8008c24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b08c      	sub	sp, #48	@ 0x30
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b22      	cmp	r3, #34	@ 0x22
 8008efa:	f040 80ae 	bne.w	800905a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f06:	d117      	bne.n	8008f38 <UART_Receive_IT+0x50>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d113      	bne.n	8008f38 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f10:	2300      	movs	r3, #0
 8008f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f18:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f30:	1c9a      	adds	r2, r3, #2
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	629a      	str	r2, [r3, #40]	@ 0x28
 8008f36:	e026      	b.n	8008f86 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f4a:	d007      	beq.n	8008f5c <UART_Receive_IT+0x74>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10a      	bne.n	8008f6a <UART_Receive_IT+0x82>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d106      	bne.n	8008f6a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f66:	701a      	strb	r2, [r3, #0]
 8008f68:	e008      	b.n	8008f7c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f7a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f80:	1c5a      	adds	r2, r3, #1
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	4619      	mov	r1, r3
 8008f94:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d15d      	bne.n	8009056 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68da      	ldr	r2, [r3, #12]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f022 0220 	bic.w	r2, r2, #32
 8008fa8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68da      	ldr	r2, [r3, #12]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008fb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	695a      	ldr	r2, [r3, #20]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f022 0201 	bic.w	r2, r2, #1
 8008fc8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d135      	bne.n	800904c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	330c      	adds	r3, #12
 8008fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f023 0310 	bic.w	r3, r3, #16
 8008ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	330c      	adds	r3, #12
 8009004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009006:	623a      	str	r2, [r7, #32]
 8009008:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900a:	69f9      	ldr	r1, [r7, #28]
 800900c:	6a3a      	ldr	r2, [r7, #32]
 800900e:	e841 2300 	strex	r3, r2, [r1]
 8009012:	61bb      	str	r3, [r7, #24]
   return(result);
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1e5      	bne.n	8008fe6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0310 	and.w	r3, r3, #16
 8009024:	2b10      	cmp	r3, #16
 8009026:	d10a      	bne.n	800903e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009028:	2300      	movs	r3, #0
 800902a:	60fb      	str	r3, [r7, #12]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	60fb      	str	r3, [r7, #12]
 800903c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009042:	4619      	mov	r1, r3
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff fe0b 	bl	8008c60 <HAL_UARTEx_RxEventCallback>
 800904a:	e002      	b.n	8009052 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff fdf3 	bl	8008c38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	e002      	b.n	800905c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	e000      	b.n	800905c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800905a:	2302      	movs	r3, #2
  }
}
 800905c:	4618      	mov	r0, r3
 800905e:	3730      	adds	r7, #48	@ 0x30
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009068:	b0c0      	sub	sp, #256	@ 0x100
 800906a:	af00      	add	r7, sp, #0
 800906c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800907c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009080:	68d9      	ldr	r1, [r3, #12]
 8009082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	ea40 0301 	orr.w	r3, r0, r1
 800908c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800908e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	431a      	orrs	r2, r3
 800909c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	431a      	orrs	r2, r3
 80090a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80090b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80090bc:	f021 010c 	bic.w	r1, r1, #12
 80090c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80090ca:	430b      	orrs	r3, r1
 80090cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80090ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80090da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090de:	6999      	ldr	r1, [r3, #24]
 80090e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	ea40 0301 	orr.w	r3, r0, r1
 80090ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	4b8f      	ldr	r3, [pc, #572]	@ (8009330 <UART_SetConfig+0x2cc>)
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d005      	beq.n	8009104 <UART_SetConfig+0xa0>
 80090f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	4b8d      	ldr	r3, [pc, #564]	@ (8009334 <UART_SetConfig+0x2d0>)
 8009100:	429a      	cmp	r2, r3
 8009102:	d104      	bne.n	800910e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009104:	f7fd ff32 	bl	8006f6c <HAL_RCC_GetPCLK2Freq>
 8009108:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800910c:	e003      	b.n	8009116 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800910e:	f7fd ff19 	bl	8006f44 <HAL_RCC_GetPCLK1Freq>
 8009112:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800911a:	69db      	ldr	r3, [r3, #28]
 800911c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009120:	f040 810c 	bne.w	800933c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009128:	2200      	movs	r2, #0
 800912a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800912e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009132:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009136:	4622      	mov	r2, r4
 8009138:	462b      	mov	r3, r5
 800913a:	1891      	adds	r1, r2, r2
 800913c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800913e:	415b      	adcs	r3, r3
 8009140:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009142:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009146:	4621      	mov	r1, r4
 8009148:	eb12 0801 	adds.w	r8, r2, r1
 800914c:	4629      	mov	r1, r5
 800914e:	eb43 0901 	adc.w	r9, r3, r1
 8009152:	f04f 0200 	mov.w	r2, #0
 8009156:	f04f 0300 	mov.w	r3, #0
 800915a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800915e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009162:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009166:	4690      	mov	r8, r2
 8009168:	4699      	mov	r9, r3
 800916a:	4623      	mov	r3, r4
 800916c:	eb18 0303 	adds.w	r3, r8, r3
 8009170:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009174:	462b      	mov	r3, r5
 8009176:	eb49 0303 	adc.w	r3, r9, r3
 800917a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800917e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800918a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800918e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009192:	460b      	mov	r3, r1
 8009194:	18db      	adds	r3, r3, r3
 8009196:	653b      	str	r3, [r7, #80]	@ 0x50
 8009198:	4613      	mov	r3, r2
 800919a:	eb42 0303 	adc.w	r3, r2, r3
 800919e:	657b      	str	r3, [r7, #84]	@ 0x54
 80091a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80091a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80091a8:	f7f7 fd8e 	bl	8000cc8 <__aeabi_uldivmod>
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	4b61      	ldr	r3, [pc, #388]	@ (8009338 <UART_SetConfig+0x2d4>)
 80091b2:	fba3 2302 	umull	r2, r3, r3, r2
 80091b6:	095b      	lsrs	r3, r3, #5
 80091b8:	011c      	lsls	r4, r3, #4
 80091ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091be:	2200      	movs	r2, #0
 80091c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80091c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80091cc:	4642      	mov	r2, r8
 80091ce:	464b      	mov	r3, r9
 80091d0:	1891      	adds	r1, r2, r2
 80091d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80091d4:	415b      	adcs	r3, r3
 80091d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80091dc:	4641      	mov	r1, r8
 80091de:	eb12 0a01 	adds.w	sl, r2, r1
 80091e2:	4649      	mov	r1, r9
 80091e4:	eb43 0b01 	adc.w	fp, r3, r1
 80091e8:	f04f 0200 	mov.w	r2, #0
 80091ec:	f04f 0300 	mov.w	r3, #0
 80091f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091fc:	4692      	mov	sl, r2
 80091fe:	469b      	mov	fp, r3
 8009200:	4643      	mov	r3, r8
 8009202:	eb1a 0303 	adds.w	r3, sl, r3
 8009206:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800920a:	464b      	mov	r3, r9
 800920c:	eb4b 0303 	adc.w	r3, fp, r3
 8009210:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009220:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009224:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009228:	460b      	mov	r3, r1
 800922a:	18db      	adds	r3, r3, r3
 800922c:	643b      	str	r3, [r7, #64]	@ 0x40
 800922e:	4613      	mov	r3, r2
 8009230:	eb42 0303 	adc.w	r3, r2, r3
 8009234:	647b      	str	r3, [r7, #68]	@ 0x44
 8009236:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800923a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800923e:	f7f7 fd43 	bl	8000cc8 <__aeabi_uldivmod>
 8009242:	4602      	mov	r2, r0
 8009244:	460b      	mov	r3, r1
 8009246:	4611      	mov	r1, r2
 8009248:	4b3b      	ldr	r3, [pc, #236]	@ (8009338 <UART_SetConfig+0x2d4>)
 800924a:	fba3 2301 	umull	r2, r3, r3, r1
 800924e:	095b      	lsrs	r3, r3, #5
 8009250:	2264      	movs	r2, #100	@ 0x64
 8009252:	fb02 f303 	mul.w	r3, r2, r3
 8009256:	1acb      	subs	r3, r1, r3
 8009258:	00db      	lsls	r3, r3, #3
 800925a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800925e:	4b36      	ldr	r3, [pc, #216]	@ (8009338 <UART_SetConfig+0x2d4>)
 8009260:	fba3 2302 	umull	r2, r3, r3, r2
 8009264:	095b      	lsrs	r3, r3, #5
 8009266:	005b      	lsls	r3, r3, #1
 8009268:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800926c:	441c      	add	r4, r3
 800926e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009272:	2200      	movs	r2, #0
 8009274:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009278:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800927c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009280:	4642      	mov	r2, r8
 8009282:	464b      	mov	r3, r9
 8009284:	1891      	adds	r1, r2, r2
 8009286:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009288:	415b      	adcs	r3, r3
 800928a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800928c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009290:	4641      	mov	r1, r8
 8009292:	1851      	adds	r1, r2, r1
 8009294:	6339      	str	r1, [r7, #48]	@ 0x30
 8009296:	4649      	mov	r1, r9
 8009298:	414b      	adcs	r3, r1
 800929a:	637b      	str	r3, [r7, #52]	@ 0x34
 800929c:	f04f 0200 	mov.w	r2, #0
 80092a0:	f04f 0300 	mov.w	r3, #0
 80092a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80092a8:	4659      	mov	r1, fp
 80092aa:	00cb      	lsls	r3, r1, #3
 80092ac:	4651      	mov	r1, sl
 80092ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092b2:	4651      	mov	r1, sl
 80092b4:	00ca      	lsls	r2, r1, #3
 80092b6:	4610      	mov	r0, r2
 80092b8:	4619      	mov	r1, r3
 80092ba:	4603      	mov	r3, r0
 80092bc:	4642      	mov	r2, r8
 80092be:	189b      	adds	r3, r3, r2
 80092c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092c4:	464b      	mov	r3, r9
 80092c6:	460a      	mov	r2, r1
 80092c8:	eb42 0303 	adc.w	r3, r2, r3
 80092cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80092dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80092e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80092e4:	460b      	mov	r3, r1
 80092e6:	18db      	adds	r3, r3, r3
 80092e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092ea:	4613      	mov	r3, r2
 80092ec:	eb42 0303 	adc.w	r3, r2, r3
 80092f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80092f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80092fa:	f7f7 fce5 	bl	8000cc8 <__aeabi_uldivmod>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	4b0d      	ldr	r3, [pc, #52]	@ (8009338 <UART_SetConfig+0x2d4>)
 8009304:	fba3 1302 	umull	r1, r3, r3, r2
 8009308:	095b      	lsrs	r3, r3, #5
 800930a:	2164      	movs	r1, #100	@ 0x64
 800930c:	fb01 f303 	mul.w	r3, r1, r3
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	00db      	lsls	r3, r3, #3
 8009314:	3332      	adds	r3, #50	@ 0x32
 8009316:	4a08      	ldr	r2, [pc, #32]	@ (8009338 <UART_SetConfig+0x2d4>)
 8009318:	fba2 2303 	umull	r2, r3, r2, r3
 800931c:	095b      	lsrs	r3, r3, #5
 800931e:	f003 0207 	and.w	r2, r3, #7
 8009322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4422      	add	r2, r4
 800932a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800932c:	e106      	b.n	800953c <UART_SetConfig+0x4d8>
 800932e:	bf00      	nop
 8009330:	40011000 	.word	0x40011000
 8009334:	40011400 	.word	0x40011400
 8009338:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800933c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009340:	2200      	movs	r2, #0
 8009342:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009346:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800934a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800934e:	4642      	mov	r2, r8
 8009350:	464b      	mov	r3, r9
 8009352:	1891      	adds	r1, r2, r2
 8009354:	6239      	str	r1, [r7, #32]
 8009356:	415b      	adcs	r3, r3
 8009358:	627b      	str	r3, [r7, #36]	@ 0x24
 800935a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800935e:	4641      	mov	r1, r8
 8009360:	1854      	adds	r4, r2, r1
 8009362:	4649      	mov	r1, r9
 8009364:	eb43 0501 	adc.w	r5, r3, r1
 8009368:	f04f 0200 	mov.w	r2, #0
 800936c:	f04f 0300 	mov.w	r3, #0
 8009370:	00eb      	lsls	r3, r5, #3
 8009372:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009376:	00e2      	lsls	r2, r4, #3
 8009378:	4614      	mov	r4, r2
 800937a:	461d      	mov	r5, r3
 800937c:	4643      	mov	r3, r8
 800937e:	18e3      	adds	r3, r4, r3
 8009380:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009384:	464b      	mov	r3, r9
 8009386:	eb45 0303 	adc.w	r3, r5, r3
 800938a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800938e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800939a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800939e:	f04f 0200 	mov.w	r2, #0
 80093a2:	f04f 0300 	mov.w	r3, #0
 80093a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80093aa:	4629      	mov	r1, r5
 80093ac:	008b      	lsls	r3, r1, #2
 80093ae:	4621      	mov	r1, r4
 80093b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093b4:	4621      	mov	r1, r4
 80093b6:	008a      	lsls	r2, r1, #2
 80093b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80093bc:	f7f7 fc84 	bl	8000cc8 <__aeabi_uldivmod>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4b60      	ldr	r3, [pc, #384]	@ (8009548 <UART_SetConfig+0x4e4>)
 80093c6:	fba3 2302 	umull	r2, r3, r3, r2
 80093ca:	095b      	lsrs	r3, r3, #5
 80093cc:	011c      	lsls	r4, r3, #4
 80093ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093d2:	2200      	movs	r2, #0
 80093d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80093dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80093e0:	4642      	mov	r2, r8
 80093e2:	464b      	mov	r3, r9
 80093e4:	1891      	adds	r1, r2, r2
 80093e6:	61b9      	str	r1, [r7, #24]
 80093e8:	415b      	adcs	r3, r3
 80093ea:	61fb      	str	r3, [r7, #28]
 80093ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093f0:	4641      	mov	r1, r8
 80093f2:	1851      	adds	r1, r2, r1
 80093f4:	6139      	str	r1, [r7, #16]
 80093f6:	4649      	mov	r1, r9
 80093f8:	414b      	adcs	r3, r1
 80093fa:	617b      	str	r3, [r7, #20]
 80093fc:	f04f 0200 	mov.w	r2, #0
 8009400:	f04f 0300 	mov.w	r3, #0
 8009404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009408:	4659      	mov	r1, fp
 800940a:	00cb      	lsls	r3, r1, #3
 800940c:	4651      	mov	r1, sl
 800940e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009412:	4651      	mov	r1, sl
 8009414:	00ca      	lsls	r2, r1, #3
 8009416:	4610      	mov	r0, r2
 8009418:	4619      	mov	r1, r3
 800941a:	4603      	mov	r3, r0
 800941c:	4642      	mov	r2, r8
 800941e:	189b      	adds	r3, r3, r2
 8009420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009424:	464b      	mov	r3, r9
 8009426:	460a      	mov	r2, r1
 8009428:	eb42 0303 	adc.w	r3, r2, r3
 800942c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	67bb      	str	r3, [r7, #120]	@ 0x78
 800943a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800943c:	f04f 0200 	mov.w	r2, #0
 8009440:	f04f 0300 	mov.w	r3, #0
 8009444:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009448:	4649      	mov	r1, r9
 800944a:	008b      	lsls	r3, r1, #2
 800944c:	4641      	mov	r1, r8
 800944e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009452:	4641      	mov	r1, r8
 8009454:	008a      	lsls	r2, r1, #2
 8009456:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800945a:	f7f7 fc35 	bl	8000cc8 <__aeabi_uldivmod>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	4611      	mov	r1, r2
 8009464:	4b38      	ldr	r3, [pc, #224]	@ (8009548 <UART_SetConfig+0x4e4>)
 8009466:	fba3 2301 	umull	r2, r3, r3, r1
 800946a:	095b      	lsrs	r3, r3, #5
 800946c:	2264      	movs	r2, #100	@ 0x64
 800946e:	fb02 f303 	mul.w	r3, r2, r3
 8009472:	1acb      	subs	r3, r1, r3
 8009474:	011b      	lsls	r3, r3, #4
 8009476:	3332      	adds	r3, #50	@ 0x32
 8009478:	4a33      	ldr	r2, [pc, #204]	@ (8009548 <UART_SetConfig+0x4e4>)
 800947a:	fba2 2303 	umull	r2, r3, r2, r3
 800947e:	095b      	lsrs	r3, r3, #5
 8009480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009484:	441c      	add	r4, r3
 8009486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800948a:	2200      	movs	r2, #0
 800948c:	673b      	str	r3, [r7, #112]	@ 0x70
 800948e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009490:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009494:	4642      	mov	r2, r8
 8009496:	464b      	mov	r3, r9
 8009498:	1891      	adds	r1, r2, r2
 800949a:	60b9      	str	r1, [r7, #8]
 800949c:	415b      	adcs	r3, r3
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094a4:	4641      	mov	r1, r8
 80094a6:	1851      	adds	r1, r2, r1
 80094a8:	6039      	str	r1, [r7, #0]
 80094aa:	4649      	mov	r1, r9
 80094ac:	414b      	adcs	r3, r1
 80094ae:	607b      	str	r3, [r7, #4]
 80094b0:	f04f 0200 	mov.w	r2, #0
 80094b4:	f04f 0300 	mov.w	r3, #0
 80094b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80094bc:	4659      	mov	r1, fp
 80094be:	00cb      	lsls	r3, r1, #3
 80094c0:	4651      	mov	r1, sl
 80094c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094c6:	4651      	mov	r1, sl
 80094c8:	00ca      	lsls	r2, r1, #3
 80094ca:	4610      	mov	r0, r2
 80094cc:	4619      	mov	r1, r3
 80094ce:	4603      	mov	r3, r0
 80094d0:	4642      	mov	r2, r8
 80094d2:	189b      	adds	r3, r3, r2
 80094d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094d6:	464b      	mov	r3, r9
 80094d8:	460a      	mov	r2, r1
 80094da:	eb42 0303 	adc.w	r3, r2, r3
 80094de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80094ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80094ec:	f04f 0200 	mov.w	r2, #0
 80094f0:	f04f 0300 	mov.w	r3, #0
 80094f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80094f8:	4649      	mov	r1, r9
 80094fa:	008b      	lsls	r3, r1, #2
 80094fc:	4641      	mov	r1, r8
 80094fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009502:	4641      	mov	r1, r8
 8009504:	008a      	lsls	r2, r1, #2
 8009506:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800950a:	f7f7 fbdd 	bl	8000cc8 <__aeabi_uldivmod>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	4b0d      	ldr	r3, [pc, #52]	@ (8009548 <UART_SetConfig+0x4e4>)
 8009514:	fba3 1302 	umull	r1, r3, r3, r2
 8009518:	095b      	lsrs	r3, r3, #5
 800951a:	2164      	movs	r1, #100	@ 0x64
 800951c:	fb01 f303 	mul.w	r3, r1, r3
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	011b      	lsls	r3, r3, #4
 8009524:	3332      	adds	r3, #50	@ 0x32
 8009526:	4a08      	ldr	r2, [pc, #32]	@ (8009548 <UART_SetConfig+0x4e4>)
 8009528:	fba2 2303 	umull	r2, r3, r2, r3
 800952c:	095b      	lsrs	r3, r3, #5
 800952e:	f003 020f 	and.w	r2, r3, #15
 8009532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4422      	add	r2, r4
 800953a:	609a      	str	r2, [r3, #8]
}
 800953c:	bf00      	nop
 800953e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009542:	46bd      	mov	sp, r7
 8009544:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009548:	51eb851f 	.word	0x51eb851f

0800954c <__cvt>:
 800954c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009550:	ec57 6b10 	vmov	r6, r7, d0
 8009554:	2f00      	cmp	r7, #0
 8009556:	460c      	mov	r4, r1
 8009558:	4619      	mov	r1, r3
 800955a:	463b      	mov	r3, r7
 800955c:	bfbb      	ittet	lt
 800955e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009562:	461f      	movlt	r7, r3
 8009564:	2300      	movge	r3, #0
 8009566:	232d      	movlt	r3, #45	@ 0x2d
 8009568:	700b      	strb	r3, [r1, #0]
 800956a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800956c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009570:	4691      	mov	r9, r2
 8009572:	f023 0820 	bic.w	r8, r3, #32
 8009576:	bfbc      	itt	lt
 8009578:	4632      	movlt	r2, r6
 800957a:	4616      	movlt	r6, r2
 800957c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009580:	d005      	beq.n	800958e <__cvt+0x42>
 8009582:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009586:	d100      	bne.n	800958a <__cvt+0x3e>
 8009588:	3401      	adds	r4, #1
 800958a:	2102      	movs	r1, #2
 800958c:	e000      	b.n	8009590 <__cvt+0x44>
 800958e:	2103      	movs	r1, #3
 8009590:	ab03      	add	r3, sp, #12
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	ab02      	add	r3, sp, #8
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	ec47 6b10 	vmov	d0, r6, r7
 800959c:	4653      	mov	r3, sl
 800959e:	4622      	mov	r2, r4
 80095a0:	f000 fe6a 	bl	800a278 <_dtoa_r>
 80095a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80095a8:	4605      	mov	r5, r0
 80095aa:	d119      	bne.n	80095e0 <__cvt+0x94>
 80095ac:	f019 0f01 	tst.w	r9, #1
 80095b0:	d00e      	beq.n	80095d0 <__cvt+0x84>
 80095b2:	eb00 0904 	add.w	r9, r0, r4
 80095b6:	2200      	movs	r2, #0
 80095b8:	2300      	movs	r3, #0
 80095ba:	4630      	mov	r0, r6
 80095bc:	4639      	mov	r1, r7
 80095be:	f7f7 faa3 	bl	8000b08 <__aeabi_dcmpeq>
 80095c2:	b108      	cbz	r0, 80095c8 <__cvt+0x7c>
 80095c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80095c8:	2230      	movs	r2, #48	@ 0x30
 80095ca:	9b03      	ldr	r3, [sp, #12]
 80095cc:	454b      	cmp	r3, r9
 80095ce:	d31e      	bcc.n	800960e <__cvt+0xc2>
 80095d0:	9b03      	ldr	r3, [sp, #12]
 80095d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095d4:	1b5b      	subs	r3, r3, r5
 80095d6:	4628      	mov	r0, r5
 80095d8:	6013      	str	r3, [r2, #0]
 80095da:	b004      	add	sp, #16
 80095dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80095e4:	eb00 0904 	add.w	r9, r0, r4
 80095e8:	d1e5      	bne.n	80095b6 <__cvt+0x6a>
 80095ea:	7803      	ldrb	r3, [r0, #0]
 80095ec:	2b30      	cmp	r3, #48	@ 0x30
 80095ee:	d10a      	bne.n	8009606 <__cvt+0xba>
 80095f0:	2200      	movs	r2, #0
 80095f2:	2300      	movs	r3, #0
 80095f4:	4630      	mov	r0, r6
 80095f6:	4639      	mov	r1, r7
 80095f8:	f7f7 fa86 	bl	8000b08 <__aeabi_dcmpeq>
 80095fc:	b918      	cbnz	r0, 8009606 <__cvt+0xba>
 80095fe:	f1c4 0401 	rsb	r4, r4, #1
 8009602:	f8ca 4000 	str.w	r4, [sl]
 8009606:	f8da 3000 	ldr.w	r3, [sl]
 800960a:	4499      	add	r9, r3
 800960c:	e7d3      	b.n	80095b6 <__cvt+0x6a>
 800960e:	1c59      	adds	r1, r3, #1
 8009610:	9103      	str	r1, [sp, #12]
 8009612:	701a      	strb	r2, [r3, #0]
 8009614:	e7d9      	b.n	80095ca <__cvt+0x7e>

08009616 <__exponent>:
 8009616:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009618:	2900      	cmp	r1, #0
 800961a:	bfba      	itte	lt
 800961c:	4249      	neglt	r1, r1
 800961e:	232d      	movlt	r3, #45	@ 0x2d
 8009620:	232b      	movge	r3, #43	@ 0x2b
 8009622:	2909      	cmp	r1, #9
 8009624:	7002      	strb	r2, [r0, #0]
 8009626:	7043      	strb	r3, [r0, #1]
 8009628:	dd29      	ble.n	800967e <__exponent+0x68>
 800962a:	f10d 0307 	add.w	r3, sp, #7
 800962e:	461d      	mov	r5, r3
 8009630:	270a      	movs	r7, #10
 8009632:	461a      	mov	r2, r3
 8009634:	fbb1 f6f7 	udiv	r6, r1, r7
 8009638:	fb07 1416 	mls	r4, r7, r6, r1
 800963c:	3430      	adds	r4, #48	@ 0x30
 800963e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009642:	460c      	mov	r4, r1
 8009644:	2c63      	cmp	r4, #99	@ 0x63
 8009646:	f103 33ff 	add.w	r3, r3, #4294967295
 800964a:	4631      	mov	r1, r6
 800964c:	dcf1      	bgt.n	8009632 <__exponent+0x1c>
 800964e:	3130      	adds	r1, #48	@ 0x30
 8009650:	1e94      	subs	r4, r2, #2
 8009652:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009656:	1c41      	adds	r1, r0, #1
 8009658:	4623      	mov	r3, r4
 800965a:	42ab      	cmp	r3, r5
 800965c:	d30a      	bcc.n	8009674 <__exponent+0x5e>
 800965e:	f10d 0309 	add.w	r3, sp, #9
 8009662:	1a9b      	subs	r3, r3, r2
 8009664:	42ac      	cmp	r4, r5
 8009666:	bf88      	it	hi
 8009668:	2300      	movhi	r3, #0
 800966a:	3302      	adds	r3, #2
 800966c:	4403      	add	r3, r0
 800966e:	1a18      	subs	r0, r3, r0
 8009670:	b003      	add	sp, #12
 8009672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009674:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009678:	f801 6f01 	strb.w	r6, [r1, #1]!
 800967c:	e7ed      	b.n	800965a <__exponent+0x44>
 800967e:	2330      	movs	r3, #48	@ 0x30
 8009680:	3130      	adds	r1, #48	@ 0x30
 8009682:	7083      	strb	r3, [r0, #2]
 8009684:	70c1      	strb	r1, [r0, #3]
 8009686:	1d03      	adds	r3, r0, #4
 8009688:	e7f1      	b.n	800966e <__exponent+0x58>
	...

0800968c <_printf_float>:
 800968c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	b08d      	sub	sp, #52	@ 0x34
 8009692:	460c      	mov	r4, r1
 8009694:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009698:	4616      	mov	r6, r2
 800969a:	461f      	mov	r7, r3
 800969c:	4605      	mov	r5, r0
 800969e:	f000 fcdb 	bl	800a058 <_localeconv_r>
 80096a2:	6803      	ldr	r3, [r0, #0]
 80096a4:	9304      	str	r3, [sp, #16]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7f6 fe02 	bl	80002b0 <strlen>
 80096ac:	2300      	movs	r3, #0
 80096ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80096b0:	f8d8 3000 	ldr.w	r3, [r8]
 80096b4:	9005      	str	r0, [sp, #20]
 80096b6:	3307      	adds	r3, #7
 80096b8:	f023 0307 	bic.w	r3, r3, #7
 80096bc:	f103 0208 	add.w	r2, r3, #8
 80096c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80096c4:	f8d4 b000 	ldr.w	fp, [r4]
 80096c8:	f8c8 2000 	str.w	r2, [r8]
 80096cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80096d4:	9307      	str	r3, [sp, #28]
 80096d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80096da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80096de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096e2:	4b9c      	ldr	r3, [pc, #624]	@ (8009954 <_printf_float+0x2c8>)
 80096e4:	f04f 32ff 	mov.w	r2, #4294967295
 80096e8:	f7f7 fa40 	bl	8000b6c <__aeabi_dcmpun>
 80096ec:	bb70      	cbnz	r0, 800974c <_printf_float+0xc0>
 80096ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096f2:	4b98      	ldr	r3, [pc, #608]	@ (8009954 <_printf_float+0x2c8>)
 80096f4:	f04f 32ff 	mov.w	r2, #4294967295
 80096f8:	f7f7 fa1a 	bl	8000b30 <__aeabi_dcmple>
 80096fc:	bb30      	cbnz	r0, 800974c <_printf_float+0xc0>
 80096fe:	2200      	movs	r2, #0
 8009700:	2300      	movs	r3, #0
 8009702:	4640      	mov	r0, r8
 8009704:	4649      	mov	r1, r9
 8009706:	f7f7 fa09 	bl	8000b1c <__aeabi_dcmplt>
 800970a:	b110      	cbz	r0, 8009712 <_printf_float+0x86>
 800970c:	232d      	movs	r3, #45	@ 0x2d
 800970e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009712:	4a91      	ldr	r2, [pc, #580]	@ (8009958 <_printf_float+0x2cc>)
 8009714:	4b91      	ldr	r3, [pc, #580]	@ (800995c <_printf_float+0x2d0>)
 8009716:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800971a:	bf8c      	ite	hi
 800971c:	4690      	movhi	r8, r2
 800971e:	4698      	movls	r8, r3
 8009720:	2303      	movs	r3, #3
 8009722:	6123      	str	r3, [r4, #16]
 8009724:	f02b 0304 	bic.w	r3, fp, #4
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	f04f 0900 	mov.w	r9, #0
 800972e:	9700      	str	r7, [sp, #0]
 8009730:	4633      	mov	r3, r6
 8009732:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009734:	4621      	mov	r1, r4
 8009736:	4628      	mov	r0, r5
 8009738:	f000 f9d2 	bl	8009ae0 <_printf_common>
 800973c:	3001      	adds	r0, #1
 800973e:	f040 808d 	bne.w	800985c <_printf_float+0x1d0>
 8009742:	f04f 30ff 	mov.w	r0, #4294967295
 8009746:	b00d      	add	sp, #52	@ 0x34
 8009748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974c:	4642      	mov	r2, r8
 800974e:	464b      	mov	r3, r9
 8009750:	4640      	mov	r0, r8
 8009752:	4649      	mov	r1, r9
 8009754:	f7f7 fa0a 	bl	8000b6c <__aeabi_dcmpun>
 8009758:	b140      	cbz	r0, 800976c <_printf_float+0xe0>
 800975a:	464b      	mov	r3, r9
 800975c:	2b00      	cmp	r3, #0
 800975e:	bfbc      	itt	lt
 8009760:	232d      	movlt	r3, #45	@ 0x2d
 8009762:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009766:	4a7e      	ldr	r2, [pc, #504]	@ (8009960 <_printf_float+0x2d4>)
 8009768:	4b7e      	ldr	r3, [pc, #504]	@ (8009964 <_printf_float+0x2d8>)
 800976a:	e7d4      	b.n	8009716 <_printf_float+0x8a>
 800976c:	6863      	ldr	r3, [r4, #4]
 800976e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009772:	9206      	str	r2, [sp, #24]
 8009774:	1c5a      	adds	r2, r3, #1
 8009776:	d13b      	bne.n	80097f0 <_printf_float+0x164>
 8009778:	2306      	movs	r3, #6
 800977a:	6063      	str	r3, [r4, #4]
 800977c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009780:	2300      	movs	r3, #0
 8009782:	6022      	str	r2, [r4, #0]
 8009784:	9303      	str	r3, [sp, #12]
 8009786:	ab0a      	add	r3, sp, #40	@ 0x28
 8009788:	e9cd a301 	strd	sl, r3, [sp, #4]
 800978c:	ab09      	add	r3, sp, #36	@ 0x24
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	6861      	ldr	r1, [r4, #4]
 8009792:	ec49 8b10 	vmov	d0, r8, r9
 8009796:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800979a:	4628      	mov	r0, r5
 800979c:	f7ff fed6 	bl	800954c <__cvt>
 80097a0:	9b06      	ldr	r3, [sp, #24]
 80097a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097a4:	2b47      	cmp	r3, #71	@ 0x47
 80097a6:	4680      	mov	r8, r0
 80097a8:	d129      	bne.n	80097fe <_printf_float+0x172>
 80097aa:	1cc8      	adds	r0, r1, #3
 80097ac:	db02      	blt.n	80097b4 <_printf_float+0x128>
 80097ae:	6863      	ldr	r3, [r4, #4]
 80097b0:	4299      	cmp	r1, r3
 80097b2:	dd41      	ble.n	8009838 <_printf_float+0x1ac>
 80097b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80097b8:	fa5f fa8a 	uxtb.w	sl, sl
 80097bc:	3901      	subs	r1, #1
 80097be:	4652      	mov	r2, sl
 80097c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80097c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80097c6:	f7ff ff26 	bl	8009616 <__exponent>
 80097ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097cc:	1813      	adds	r3, r2, r0
 80097ce:	2a01      	cmp	r2, #1
 80097d0:	4681      	mov	r9, r0
 80097d2:	6123      	str	r3, [r4, #16]
 80097d4:	dc02      	bgt.n	80097dc <_printf_float+0x150>
 80097d6:	6822      	ldr	r2, [r4, #0]
 80097d8:	07d2      	lsls	r2, r2, #31
 80097da:	d501      	bpl.n	80097e0 <_printf_float+0x154>
 80097dc:	3301      	adds	r3, #1
 80097de:	6123      	str	r3, [r4, #16]
 80097e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d0a2      	beq.n	800972e <_printf_float+0xa2>
 80097e8:	232d      	movs	r3, #45	@ 0x2d
 80097ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097ee:	e79e      	b.n	800972e <_printf_float+0xa2>
 80097f0:	9a06      	ldr	r2, [sp, #24]
 80097f2:	2a47      	cmp	r2, #71	@ 0x47
 80097f4:	d1c2      	bne.n	800977c <_printf_float+0xf0>
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1c0      	bne.n	800977c <_printf_float+0xf0>
 80097fa:	2301      	movs	r3, #1
 80097fc:	e7bd      	b.n	800977a <_printf_float+0xee>
 80097fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009802:	d9db      	bls.n	80097bc <_printf_float+0x130>
 8009804:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009808:	d118      	bne.n	800983c <_printf_float+0x1b0>
 800980a:	2900      	cmp	r1, #0
 800980c:	6863      	ldr	r3, [r4, #4]
 800980e:	dd0b      	ble.n	8009828 <_printf_float+0x19c>
 8009810:	6121      	str	r1, [r4, #16]
 8009812:	b913      	cbnz	r3, 800981a <_printf_float+0x18e>
 8009814:	6822      	ldr	r2, [r4, #0]
 8009816:	07d0      	lsls	r0, r2, #31
 8009818:	d502      	bpl.n	8009820 <_printf_float+0x194>
 800981a:	3301      	adds	r3, #1
 800981c:	440b      	add	r3, r1
 800981e:	6123      	str	r3, [r4, #16]
 8009820:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009822:	f04f 0900 	mov.w	r9, #0
 8009826:	e7db      	b.n	80097e0 <_printf_float+0x154>
 8009828:	b913      	cbnz	r3, 8009830 <_printf_float+0x1a4>
 800982a:	6822      	ldr	r2, [r4, #0]
 800982c:	07d2      	lsls	r2, r2, #31
 800982e:	d501      	bpl.n	8009834 <_printf_float+0x1a8>
 8009830:	3302      	adds	r3, #2
 8009832:	e7f4      	b.n	800981e <_printf_float+0x192>
 8009834:	2301      	movs	r3, #1
 8009836:	e7f2      	b.n	800981e <_printf_float+0x192>
 8009838:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800983c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800983e:	4299      	cmp	r1, r3
 8009840:	db05      	blt.n	800984e <_printf_float+0x1c2>
 8009842:	6823      	ldr	r3, [r4, #0]
 8009844:	6121      	str	r1, [r4, #16]
 8009846:	07d8      	lsls	r0, r3, #31
 8009848:	d5ea      	bpl.n	8009820 <_printf_float+0x194>
 800984a:	1c4b      	adds	r3, r1, #1
 800984c:	e7e7      	b.n	800981e <_printf_float+0x192>
 800984e:	2900      	cmp	r1, #0
 8009850:	bfd4      	ite	le
 8009852:	f1c1 0202 	rsble	r2, r1, #2
 8009856:	2201      	movgt	r2, #1
 8009858:	4413      	add	r3, r2
 800985a:	e7e0      	b.n	800981e <_printf_float+0x192>
 800985c:	6823      	ldr	r3, [r4, #0]
 800985e:	055a      	lsls	r2, r3, #21
 8009860:	d407      	bmi.n	8009872 <_printf_float+0x1e6>
 8009862:	6923      	ldr	r3, [r4, #16]
 8009864:	4642      	mov	r2, r8
 8009866:	4631      	mov	r1, r6
 8009868:	4628      	mov	r0, r5
 800986a:	47b8      	blx	r7
 800986c:	3001      	adds	r0, #1
 800986e:	d12b      	bne.n	80098c8 <_printf_float+0x23c>
 8009870:	e767      	b.n	8009742 <_printf_float+0xb6>
 8009872:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009876:	f240 80dd 	bls.w	8009a34 <_printf_float+0x3a8>
 800987a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800987e:	2200      	movs	r2, #0
 8009880:	2300      	movs	r3, #0
 8009882:	f7f7 f941 	bl	8000b08 <__aeabi_dcmpeq>
 8009886:	2800      	cmp	r0, #0
 8009888:	d033      	beq.n	80098f2 <_printf_float+0x266>
 800988a:	4a37      	ldr	r2, [pc, #220]	@ (8009968 <_printf_float+0x2dc>)
 800988c:	2301      	movs	r3, #1
 800988e:	4631      	mov	r1, r6
 8009890:	4628      	mov	r0, r5
 8009892:	47b8      	blx	r7
 8009894:	3001      	adds	r0, #1
 8009896:	f43f af54 	beq.w	8009742 <_printf_float+0xb6>
 800989a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800989e:	4543      	cmp	r3, r8
 80098a0:	db02      	blt.n	80098a8 <_printf_float+0x21c>
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	07d8      	lsls	r0, r3, #31
 80098a6:	d50f      	bpl.n	80098c8 <_printf_float+0x23c>
 80098a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098ac:	4631      	mov	r1, r6
 80098ae:	4628      	mov	r0, r5
 80098b0:	47b8      	blx	r7
 80098b2:	3001      	adds	r0, #1
 80098b4:	f43f af45 	beq.w	8009742 <_printf_float+0xb6>
 80098b8:	f04f 0900 	mov.w	r9, #0
 80098bc:	f108 38ff 	add.w	r8, r8, #4294967295
 80098c0:	f104 0a1a 	add.w	sl, r4, #26
 80098c4:	45c8      	cmp	r8, r9
 80098c6:	dc09      	bgt.n	80098dc <_printf_float+0x250>
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	079b      	lsls	r3, r3, #30
 80098cc:	f100 8103 	bmi.w	8009ad6 <_printf_float+0x44a>
 80098d0:	68e0      	ldr	r0, [r4, #12]
 80098d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098d4:	4298      	cmp	r0, r3
 80098d6:	bfb8      	it	lt
 80098d8:	4618      	movlt	r0, r3
 80098da:	e734      	b.n	8009746 <_printf_float+0xba>
 80098dc:	2301      	movs	r3, #1
 80098de:	4652      	mov	r2, sl
 80098e0:	4631      	mov	r1, r6
 80098e2:	4628      	mov	r0, r5
 80098e4:	47b8      	blx	r7
 80098e6:	3001      	adds	r0, #1
 80098e8:	f43f af2b 	beq.w	8009742 <_printf_float+0xb6>
 80098ec:	f109 0901 	add.w	r9, r9, #1
 80098f0:	e7e8      	b.n	80098c4 <_printf_float+0x238>
 80098f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dc39      	bgt.n	800996c <_printf_float+0x2e0>
 80098f8:	4a1b      	ldr	r2, [pc, #108]	@ (8009968 <_printf_float+0x2dc>)
 80098fa:	2301      	movs	r3, #1
 80098fc:	4631      	mov	r1, r6
 80098fe:	4628      	mov	r0, r5
 8009900:	47b8      	blx	r7
 8009902:	3001      	adds	r0, #1
 8009904:	f43f af1d 	beq.w	8009742 <_printf_float+0xb6>
 8009908:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800990c:	ea59 0303 	orrs.w	r3, r9, r3
 8009910:	d102      	bne.n	8009918 <_printf_float+0x28c>
 8009912:	6823      	ldr	r3, [r4, #0]
 8009914:	07d9      	lsls	r1, r3, #31
 8009916:	d5d7      	bpl.n	80098c8 <_printf_float+0x23c>
 8009918:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800991c:	4631      	mov	r1, r6
 800991e:	4628      	mov	r0, r5
 8009920:	47b8      	blx	r7
 8009922:	3001      	adds	r0, #1
 8009924:	f43f af0d 	beq.w	8009742 <_printf_float+0xb6>
 8009928:	f04f 0a00 	mov.w	sl, #0
 800992c:	f104 0b1a 	add.w	fp, r4, #26
 8009930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009932:	425b      	negs	r3, r3
 8009934:	4553      	cmp	r3, sl
 8009936:	dc01      	bgt.n	800993c <_printf_float+0x2b0>
 8009938:	464b      	mov	r3, r9
 800993a:	e793      	b.n	8009864 <_printf_float+0x1d8>
 800993c:	2301      	movs	r3, #1
 800993e:	465a      	mov	r2, fp
 8009940:	4631      	mov	r1, r6
 8009942:	4628      	mov	r0, r5
 8009944:	47b8      	blx	r7
 8009946:	3001      	adds	r0, #1
 8009948:	f43f aefb 	beq.w	8009742 <_printf_float+0xb6>
 800994c:	f10a 0a01 	add.w	sl, sl, #1
 8009950:	e7ee      	b.n	8009930 <_printf_float+0x2a4>
 8009952:	bf00      	nop
 8009954:	7fefffff 	.word	0x7fefffff
 8009958:	0800c910 	.word	0x0800c910
 800995c:	0800c90c 	.word	0x0800c90c
 8009960:	0800c918 	.word	0x0800c918
 8009964:	0800c914 	.word	0x0800c914
 8009968:	0800c91c 	.word	0x0800c91c
 800996c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800996e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009972:	4553      	cmp	r3, sl
 8009974:	bfa8      	it	ge
 8009976:	4653      	movge	r3, sl
 8009978:	2b00      	cmp	r3, #0
 800997a:	4699      	mov	r9, r3
 800997c:	dc36      	bgt.n	80099ec <_printf_float+0x360>
 800997e:	f04f 0b00 	mov.w	fp, #0
 8009982:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009986:	f104 021a 	add.w	r2, r4, #26
 800998a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800998c:	9306      	str	r3, [sp, #24]
 800998e:	eba3 0309 	sub.w	r3, r3, r9
 8009992:	455b      	cmp	r3, fp
 8009994:	dc31      	bgt.n	80099fa <_printf_float+0x36e>
 8009996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009998:	459a      	cmp	sl, r3
 800999a:	dc3a      	bgt.n	8009a12 <_printf_float+0x386>
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	07da      	lsls	r2, r3, #31
 80099a0:	d437      	bmi.n	8009a12 <_printf_float+0x386>
 80099a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a4:	ebaa 0903 	sub.w	r9, sl, r3
 80099a8:	9b06      	ldr	r3, [sp, #24]
 80099aa:	ebaa 0303 	sub.w	r3, sl, r3
 80099ae:	4599      	cmp	r9, r3
 80099b0:	bfa8      	it	ge
 80099b2:	4699      	movge	r9, r3
 80099b4:	f1b9 0f00 	cmp.w	r9, #0
 80099b8:	dc33      	bgt.n	8009a22 <_printf_float+0x396>
 80099ba:	f04f 0800 	mov.w	r8, #0
 80099be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099c2:	f104 0b1a 	add.w	fp, r4, #26
 80099c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c8:	ebaa 0303 	sub.w	r3, sl, r3
 80099cc:	eba3 0309 	sub.w	r3, r3, r9
 80099d0:	4543      	cmp	r3, r8
 80099d2:	f77f af79 	ble.w	80098c8 <_printf_float+0x23c>
 80099d6:	2301      	movs	r3, #1
 80099d8:	465a      	mov	r2, fp
 80099da:	4631      	mov	r1, r6
 80099dc:	4628      	mov	r0, r5
 80099de:	47b8      	blx	r7
 80099e0:	3001      	adds	r0, #1
 80099e2:	f43f aeae 	beq.w	8009742 <_printf_float+0xb6>
 80099e6:	f108 0801 	add.w	r8, r8, #1
 80099ea:	e7ec      	b.n	80099c6 <_printf_float+0x33a>
 80099ec:	4642      	mov	r2, r8
 80099ee:	4631      	mov	r1, r6
 80099f0:	4628      	mov	r0, r5
 80099f2:	47b8      	blx	r7
 80099f4:	3001      	adds	r0, #1
 80099f6:	d1c2      	bne.n	800997e <_printf_float+0x2f2>
 80099f8:	e6a3      	b.n	8009742 <_printf_float+0xb6>
 80099fa:	2301      	movs	r3, #1
 80099fc:	4631      	mov	r1, r6
 80099fe:	4628      	mov	r0, r5
 8009a00:	9206      	str	r2, [sp, #24]
 8009a02:	47b8      	blx	r7
 8009a04:	3001      	adds	r0, #1
 8009a06:	f43f ae9c 	beq.w	8009742 <_printf_float+0xb6>
 8009a0a:	9a06      	ldr	r2, [sp, #24]
 8009a0c:	f10b 0b01 	add.w	fp, fp, #1
 8009a10:	e7bb      	b.n	800998a <_printf_float+0x2fe>
 8009a12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a16:	4631      	mov	r1, r6
 8009a18:	4628      	mov	r0, r5
 8009a1a:	47b8      	blx	r7
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	d1c0      	bne.n	80099a2 <_printf_float+0x316>
 8009a20:	e68f      	b.n	8009742 <_printf_float+0xb6>
 8009a22:	9a06      	ldr	r2, [sp, #24]
 8009a24:	464b      	mov	r3, r9
 8009a26:	4442      	add	r2, r8
 8009a28:	4631      	mov	r1, r6
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	47b8      	blx	r7
 8009a2e:	3001      	adds	r0, #1
 8009a30:	d1c3      	bne.n	80099ba <_printf_float+0x32e>
 8009a32:	e686      	b.n	8009742 <_printf_float+0xb6>
 8009a34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009a38:	f1ba 0f01 	cmp.w	sl, #1
 8009a3c:	dc01      	bgt.n	8009a42 <_printf_float+0x3b6>
 8009a3e:	07db      	lsls	r3, r3, #31
 8009a40:	d536      	bpl.n	8009ab0 <_printf_float+0x424>
 8009a42:	2301      	movs	r3, #1
 8009a44:	4642      	mov	r2, r8
 8009a46:	4631      	mov	r1, r6
 8009a48:	4628      	mov	r0, r5
 8009a4a:	47b8      	blx	r7
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	f43f ae78 	beq.w	8009742 <_printf_float+0xb6>
 8009a52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a56:	4631      	mov	r1, r6
 8009a58:	4628      	mov	r0, r5
 8009a5a:	47b8      	blx	r7
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	f43f ae70 	beq.w	8009742 <_printf_float+0xb6>
 8009a62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a66:	2200      	movs	r2, #0
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a6e:	f7f7 f84b 	bl	8000b08 <__aeabi_dcmpeq>
 8009a72:	b9c0      	cbnz	r0, 8009aa6 <_printf_float+0x41a>
 8009a74:	4653      	mov	r3, sl
 8009a76:	f108 0201 	add.w	r2, r8, #1
 8009a7a:	4631      	mov	r1, r6
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	47b8      	blx	r7
 8009a80:	3001      	adds	r0, #1
 8009a82:	d10c      	bne.n	8009a9e <_printf_float+0x412>
 8009a84:	e65d      	b.n	8009742 <_printf_float+0xb6>
 8009a86:	2301      	movs	r3, #1
 8009a88:	465a      	mov	r2, fp
 8009a8a:	4631      	mov	r1, r6
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	47b8      	blx	r7
 8009a90:	3001      	adds	r0, #1
 8009a92:	f43f ae56 	beq.w	8009742 <_printf_float+0xb6>
 8009a96:	f108 0801 	add.w	r8, r8, #1
 8009a9a:	45d0      	cmp	r8, sl
 8009a9c:	dbf3      	blt.n	8009a86 <_printf_float+0x3fa>
 8009a9e:	464b      	mov	r3, r9
 8009aa0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009aa4:	e6df      	b.n	8009866 <_printf_float+0x1da>
 8009aa6:	f04f 0800 	mov.w	r8, #0
 8009aaa:	f104 0b1a 	add.w	fp, r4, #26
 8009aae:	e7f4      	b.n	8009a9a <_printf_float+0x40e>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	4642      	mov	r2, r8
 8009ab4:	e7e1      	b.n	8009a7a <_printf_float+0x3ee>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	464a      	mov	r2, r9
 8009aba:	4631      	mov	r1, r6
 8009abc:	4628      	mov	r0, r5
 8009abe:	47b8      	blx	r7
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	f43f ae3e 	beq.w	8009742 <_printf_float+0xb6>
 8009ac6:	f108 0801 	add.w	r8, r8, #1
 8009aca:	68e3      	ldr	r3, [r4, #12]
 8009acc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ace:	1a5b      	subs	r3, r3, r1
 8009ad0:	4543      	cmp	r3, r8
 8009ad2:	dcf0      	bgt.n	8009ab6 <_printf_float+0x42a>
 8009ad4:	e6fc      	b.n	80098d0 <_printf_float+0x244>
 8009ad6:	f04f 0800 	mov.w	r8, #0
 8009ada:	f104 0919 	add.w	r9, r4, #25
 8009ade:	e7f4      	b.n	8009aca <_printf_float+0x43e>

08009ae0 <_printf_common>:
 8009ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae4:	4616      	mov	r6, r2
 8009ae6:	4698      	mov	r8, r3
 8009ae8:	688a      	ldr	r2, [r1, #8]
 8009aea:	690b      	ldr	r3, [r1, #16]
 8009aec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009af0:	4293      	cmp	r3, r2
 8009af2:	bfb8      	it	lt
 8009af4:	4613      	movlt	r3, r2
 8009af6:	6033      	str	r3, [r6, #0]
 8009af8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009afc:	4607      	mov	r7, r0
 8009afe:	460c      	mov	r4, r1
 8009b00:	b10a      	cbz	r2, 8009b06 <_printf_common+0x26>
 8009b02:	3301      	adds	r3, #1
 8009b04:	6033      	str	r3, [r6, #0]
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	0699      	lsls	r1, r3, #26
 8009b0a:	bf42      	ittt	mi
 8009b0c:	6833      	ldrmi	r3, [r6, #0]
 8009b0e:	3302      	addmi	r3, #2
 8009b10:	6033      	strmi	r3, [r6, #0]
 8009b12:	6825      	ldr	r5, [r4, #0]
 8009b14:	f015 0506 	ands.w	r5, r5, #6
 8009b18:	d106      	bne.n	8009b28 <_printf_common+0x48>
 8009b1a:	f104 0a19 	add.w	sl, r4, #25
 8009b1e:	68e3      	ldr	r3, [r4, #12]
 8009b20:	6832      	ldr	r2, [r6, #0]
 8009b22:	1a9b      	subs	r3, r3, r2
 8009b24:	42ab      	cmp	r3, r5
 8009b26:	dc26      	bgt.n	8009b76 <_printf_common+0x96>
 8009b28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b2c:	6822      	ldr	r2, [r4, #0]
 8009b2e:	3b00      	subs	r3, #0
 8009b30:	bf18      	it	ne
 8009b32:	2301      	movne	r3, #1
 8009b34:	0692      	lsls	r2, r2, #26
 8009b36:	d42b      	bmi.n	8009b90 <_printf_common+0xb0>
 8009b38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b3c:	4641      	mov	r1, r8
 8009b3e:	4638      	mov	r0, r7
 8009b40:	47c8      	blx	r9
 8009b42:	3001      	adds	r0, #1
 8009b44:	d01e      	beq.n	8009b84 <_printf_common+0xa4>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	6922      	ldr	r2, [r4, #16]
 8009b4a:	f003 0306 	and.w	r3, r3, #6
 8009b4e:	2b04      	cmp	r3, #4
 8009b50:	bf02      	ittt	eq
 8009b52:	68e5      	ldreq	r5, [r4, #12]
 8009b54:	6833      	ldreq	r3, [r6, #0]
 8009b56:	1aed      	subeq	r5, r5, r3
 8009b58:	68a3      	ldr	r3, [r4, #8]
 8009b5a:	bf0c      	ite	eq
 8009b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b60:	2500      	movne	r5, #0
 8009b62:	4293      	cmp	r3, r2
 8009b64:	bfc4      	itt	gt
 8009b66:	1a9b      	subgt	r3, r3, r2
 8009b68:	18ed      	addgt	r5, r5, r3
 8009b6a:	2600      	movs	r6, #0
 8009b6c:	341a      	adds	r4, #26
 8009b6e:	42b5      	cmp	r5, r6
 8009b70:	d11a      	bne.n	8009ba8 <_printf_common+0xc8>
 8009b72:	2000      	movs	r0, #0
 8009b74:	e008      	b.n	8009b88 <_printf_common+0xa8>
 8009b76:	2301      	movs	r3, #1
 8009b78:	4652      	mov	r2, sl
 8009b7a:	4641      	mov	r1, r8
 8009b7c:	4638      	mov	r0, r7
 8009b7e:	47c8      	blx	r9
 8009b80:	3001      	adds	r0, #1
 8009b82:	d103      	bne.n	8009b8c <_printf_common+0xac>
 8009b84:	f04f 30ff 	mov.w	r0, #4294967295
 8009b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8c:	3501      	adds	r5, #1
 8009b8e:	e7c6      	b.n	8009b1e <_printf_common+0x3e>
 8009b90:	18e1      	adds	r1, r4, r3
 8009b92:	1c5a      	adds	r2, r3, #1
 8009b94:	2030      	movs	r0, #48	@ 0x30
 8009b96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b9a:	4422      	add	r2, r4
 8009b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ba0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ba4:	3302      	adds	r3, #2
 8009ba6:	e7c7      	b.n	8009b38 <_printf_common+0x58>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	4622      	mov	r2, r4
 8009bac:	4641      	mov	r1, r8
 8009bae:	4638      	mov	r0, r7
 8009bb0:	47c8      	blx	r9
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	d0e6      	beq.n	8009b84 <_printf_common+0xa4>
 8009bb6:	3601      	adds	r6, #1
 8009bb8:	e7d9      	b.n	8009b6e <_printf_common+0x8e>
	...

08009bbc <_printf_i>:
 8009bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc0:	7e0f      	ldrb	r7, [r1, #24]
 8009bc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009bc4:	2f78      	cmp	r7, #120	@ 0x78
 8009bc6:	4691      	mov	r9, r2
 8009bc8:	4680      	mov	r8, r0
 8009bca:	460c      	mov	r4, r1
 8009bcc:	469a      	mov	sl, r3
 8009bce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009bd2:	d807      	bhi.n	8009be4 <_printf_i+0x28>
 8009bd4:	2f62      	cmp	r7, #98	@ 0x62
 8009bd6:	d80a      	bhi.n	8009bee <_printf_i+0x32>
 8009bd8:	2f00      	cmp	r7, #0
 8009bda:	f000 80d1 	beq.w	8009d80 <_printf_i+0x1c4>
 8009bde:	2f58      	cmp	r7, #88	@ 0x58
 8009be0:	f000 80b8 	beq.w	8009d54 <_printf_i+0x198>
 8009be4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009be8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009bec:	e03a      	b.n	8009c64 <_printf_i+0xa8>
 8009bee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009bf2:	2b15      	cmp	r3, #21
 8009bf4:	d8f6      	bhi.n	8009be4 <_printf_i+0x28>
 8009bf6:	a101      	add	r1, pc, #4	@ (adr r1, 8009bfc <_printf_i+0x40>)
 8009bf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bfc:	08009c55 	.word	0x08009c55
 8009c00:	08009c69 	.word	0x08009c69
 8009c04:	08009be5 	.word	0x08009be5
 8009c08:	08009be5 	.word	0x08009be5
 8009c0c:	08009be5 	.word	0x08009be5
 8009c10:	08009be5 	.word	0x08009be5
 8009c14:	08009c69 	.word	0x08009c69
 8009c18:	08009be5 	.word	0x08009be5
 8009c1c:	08009be5 	.word	0x08009be5
 8009c20:	08009be5 	.word	0x08009be5
 8009c24:	08009be5 	.word	0x08009be5
 8009c28:	08009d67 	.word	0x08009d67
 8009c2c:	08009c93 	.word	0x08009c93
 8009c30:	08009d21 	.word	0x08009d21
 8009c34:	08009be5 	.word	0x08009be5
 8009c38:	08009be5 	.word	0x08009be5
 8009c3c:	08009d89 	.word	0x08009d89
 8009c40:	08009be5 	.word	0x08009be5
 8009c44:	08009c93 	.word	0x08009c93
 8009c48:	08009be5 	.word	0x08009be5
 8009c4c:	08009be5 	.word	0x08009be5
 8009c50:	08009d29 	.word	0x08009d29
 8009c54:	6833      	ldr	r3, [r6, #0]
 8009c56:	1d1a      	adds	r2, r3, #4
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	6032      	str	r2, [r6, #0]
 8009c5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c64:	2301      	movs	r3, #1
 8009c66:	e09c      	b.n	8009da2 <_printf_i+0x1e6>
 8009c68:	6833      	ldr	r3, [r6, #0]
 8009c6a:	6820      	ldr	r0, [r4, #0]
 8009c6c:	1d19      	adds	r1, r3, #4
 8009c6e:	6031      	str	r1, [r6, #0]
 8009c70:	0606      	lsls	r6, r0, #24
 8009c72:	d501      	bpl.n	8009c78 <_printf_i+0xbc>
 8009c74:	681d      	ldr	r5, [r3, #0]
 8009c76:	e003      	b.n	8009c80 <_printf_i+0xc4>
 8009c78:	0645      	lsls	r5, r0, #25
 8009c7a:	d5fb      	bpl.n	8009c74 <_printf_i+0xb8>
 8009c7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c80:	2d00      	cmp	r5, #0
 8009c82:	da03      	bge.n	8009c8c <_printf_i+0xd0>
 8009c84:	232d      	movs	r3, #45	@ 0x2d
 8009c86:	426d      	negs	r5, r5
 8009c88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c8c:	4858      	ldr	r0, [pc, #352]	@ (8009df0 <_printf_i+0x234>)
 8009c8e:	230a      	movs	r3, #10
 8009c90:	e011      	b.n	8009cb6 <_printf_i+0xfa>
 8009c92:	6821      	ldr	r1, [r4, #0]
 8009c94:	6833      	ldr	r3, [r6, #0]
 8009c96:	0608      	lsls	r0, r1, #24
 8009c98:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c9c:	d402      	bmi.n	8009ca4 <_printf_i+0xe8>
 8009c9e:	0649      	lsls	r1, r1, #25
 8009ca0:	bf48      	it	mi
 8009ca2:	b2ad      	uxthmi	r5, r5
 8009ca4:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ca6:	4852      	ldr	r0, [pc, #328]	@ (8009df0 <_printf_i+0x234>)
 8009ca8:	6033      	str	r3, [r6, #0]
 8009caa:	bf14      	ite	ne
 8009cac:	230a      	movne	r3, #10
 8009cae:	2308      	moveq	r3, #8
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009cb6:	6866      	ldr	r6, [r4, #4]
 8009cb8:	60a6      	str	r6, [r4, #8]
 8009cba:	2e00      	cmp	r6, #0
 8009cbc:	db05      	blt.n	8009cca <_printf_i+0x10e>
 8009cbe:	6821      	ldr	r1, [r4, #0]
 8009cc0:	432e      	orrs	r6, r5
 8009cc2:	f021 0104 	bic.w	r1, r1, #4
 8009cc6:	6021      	str	r1, [r4, #0]
 8009cc8:	d04b      	beq.n	8009d62 <_printf_i+0x1a6>
 8009cca:	4616      	mov	r6, r2
 8009ccc:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cd0:	fb03 5711 	mls	r7, r3, r1, r5
 8009cd4:	5dc7      	ldrb	r7, [r0, r7]
 8009cd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cda:	462f      	mov	r7, r5
 8009cdc:	42bb      	cmp	r3, r7
 8009cde:	460d      	mov	r5, r1
 8009ce0:	d9f4      	bls.n	8009ccc <_printf_i+0x110>
 8009ce2:	2b08      	cmp	r3, #8
 8009ce4:	d10b      	bne.n	8009cfe <_printf_i+0x142>
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	07df      	lsls	r7, r3, #31
 8009cea:	d508      	bpl.n	8009cfe <_printf_i+0x142>
 8009cec:	6923      	ldr	r3, [r4, #16]
 8009cee:	6861      	ldr	r1, [r4, #4]
 8009cf0:	4299      	cmp	r1, r3
 8009cf2:	bfde      	ittt	le
 8009cf4:	2330      	movle	r3, #48	@ 0x30
 8009cf6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cfa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009cfe:	1b92      	subs	r2, r2, r6
 8009d00:	6122      	str	r2, [r4, #16]
 8009d02:	f8cd a000 	str.w	sl, [sp]
 8009d06:	464b      	mov	r3, r9
 8009d08:	aa03      	add	r2, sp, #12
 8009d0a:	4621      	mov	r1, r4
 8009d0c:	4640      	mov	r0, r8
 8009d0e:	f7ff fee7 	bl	8009ae0 <_printf_common>
 8009d12:	3001      	adds	r0, #1
 8009d14:	d14a      	bne.n	8009dac <_printf_i+0x1f0>
 8009d16:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1a:	b004      	add	sp, #16
 8009d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	f043 0320 	orr.w	r3, r3, #32
 8009d26:	6023      	str	r3, [r4, #0]
 8009d28:	4832      	ldr	r0, [pc, #200]	@ (8009df4 <_printf_i+0x238>)
 8009d2a:	2778      	movs	r7, #120	@ 0x78
 8009d2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	6831      	ldr	r1, [r6, #0]
 8009d34:	061f      	lsls	r7, r3, #24
 8009d36:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d3a:	d402      	bmi.n	8009d42 <_printf_i+0x186>
 8009d3c:	065f      	lsls	r7, r3, #25
 8009d3e:	bf48      	it	mi
 8009d40:	b2ad      	uxthmi	r5, r5
 8009d42:	6031      	str	r1, [r6, #0]
 8009d44:	07d9      	lsls	r1, r3, #31
 8009d46:	bf44      	itt	mi
 8009d48:	f043 0320 	orrmi.w	r3, r3, #32
 8009d4c:	6023      	strmi	r3, [r4, #0]
 8009d4e:	b11d      	cbz	r5, 8009d58 <_printf_i+0x19c>
 8009d50:	2310      	movs	r3, #16
 8009d52:	e7ad      	b.n	8009cb0 <_printf_i+0xf4>
 8009d54:	4826      	ldr	r0, [pc, #152]	@ (8009df0 <_printf_i+0x234>)
 8009d56:	e7e9      	b.n	8009d2c <_printf_i+0x170>
 8009d58:	6823      	ldr	r3, [r4, #0]
 8009d5a:	f023 0320 	bic.w	r3, r3, #32
 8009d5e:	6023      	str	r3, [r4, #0]
 8009d60:	e7f6      	b.n	8009d50 <_printf_i+0x194>
 8009d62:	4616      	mov	r6, r2
 8009d64:	e7bd      	b.n	8009ce2 <_printf_i+0x126>
 8009d66:	6833      	ldr	r3, [r6, #0]
 8009d68:	6825      	ldr	r5, [r4, #0]
 8009d6a:	6961      	ldr	r1, [r4, #20]
 8009d6c:	1d18      	adds	r0, r3, #4
 8009d6e:	6030      	str	r0, [r6, #0]
 8009d70:	062e      	lsls	r6, r5, #24
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	d501      	bpl.n	8009d7a <_printf_i+0x1be>
 8009d76:	6019      	str	r1, [r3, #0]
 8009d78:	e002      	b.n	8009d80 <_printf_i+0x1c4>
 8009d7a:	0668      	lsls	r0, r5, #25
 8009d7c:	d5fb      	bpl.n	8009d76 <_printf_i+0x1ba>
 8009d7e:	8019      	strh	r1, [r3, #0]
 8009d80:	2300      	movs	r3, #0
 8009d82:	6123      	str	r3, [r4, #16]
 8009d84:	4616      	mov	r6, r2
 8009d86:	e7bc      	b.n	8009d02 <_printf_i+0x146>
 8009d88:	6833      	ldr	r3, [r6, #0]
 8009d8a:	1d1a      	adds	r2, r3, #4
 8009d8c:	6032      	str	r2, [r6, #0]
 8009d8e:	681e      	ldr	r6, [r3, #0]
 8009d90:	6862      	ldr	r2, [r4, #4]
 8009d92:	2100      	movs	r1, #0
 8009d94:	4630      	mov	r0, r6
 8009d96:	f7f6 fa3b 	bl	8000210 <memchr>
 8009d9a:	b108      	cbz	r0, 8009da0 <_printf_i+0x1e4>
 8009d9c:	1b80      	subs	r0, r0, r6
 8009d9e:	6060      	str	r0, [r4, #4]
 8009da0:	6863      	ldr	r3, [r4, #4]
 8009da2:	6123      	str	r3, [r4, #16]
 8009da4:	2300      	movs	r3, #0
 8009da6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009daa:	e7aa      	b.n	8009d02 <_printf_i+0x146>
 8009dac:	6923      	ldr	r3, [r4, #16]
 8009dae:	4632      	mov	r2, r6
 8009db0:	4649      	mov	r1, r9
 8009db2:	4640      	mov	r0, r8
 8009db4:	47d0      	blx	sl
 8009db6:	3001      	adds	r0, #1
 8009db8:	d0ad      	beq.n	8009d16 <_printf_i+0x15a>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	079b      	lsls	r3, r3, #30
 8009dbe:	d413      	bmi.n	8009de8 <_printf_i+0x22c>
 8009dc0:	68e0      	ldr	r0, [r4, #12]
 8009dc2:	9b03      	ldr	r3, [sp, #12]
 8009dc4:	4298      	cmp	r0, r3
 8009dc6:	bfb8      	it	lt
 8009dc8:	4618      	movlt	r0, r3
 8009dca:	e7a6      	b.n	8009d1a <_printf_i+0x15e>
 8009dcc:	2301      	movs	r3, #1
 8009dce:	4632      	mov	r2, r6
 8009dd0:	4649      	mov	r1, r9
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	47d0      	blx	sl
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	d09d      	beq.n	8009d16 <_printf_i+0x15a>
 8009dda:	3501      	adds	r5, #1
 8009ddc:	68e3      	ldr	r3, [r4, #12]
 8009dde:	9903      	ldr	r1, [sp, #12]
 8009de0:	1a5b      	subs	r3, r3, r1
 8009de2:	42ab      	cmp	r3, r5
 8009de4:	dcf2      	bgt.n	8009dcc <_printf_i+0x210>
 8009de6:	e7eb      	b.n	8009dc0 <_printf_i+0x204>
 8009de8:	2500      	movs	r5, #0
 8009dea:	f104 0619 	add.w	r6, r4, #25
 8009dee:	e7f5      	b.n	8009ddc <_printf_i+0x220>
 8009df0:	0800c91e 	.word	0x0800c91e
 8009df4:	0800c92f 	.word	0x0800c92f

08009df8 <std>:
 8009df8:	2300      	movs	r3, #0
 8009dfa:	b510      	push	{r4, lr}
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8009e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e06:	6083      	str	r3, [r0, #8]
 8009e08:	8181      	strh	r1, [r0, #12]
 8009e0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009e0c:	81c2      	strh	r2, [r0, #14]
 8009e0e:	6183      	str	r3, [r0, #24]
 8009e10:	4619      	mov	r1, r3
 8009e12:	2208      	movs	r2, #8
 8009e14:	305c      	adds	r0, #92	@ 0x5c
 8009e16:	f000 f916 	bl	800a046 <memset>
 8009e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e50 <std+0x58>)
 8009e1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8009e54 <std+0x5c>)
 8009e20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e22:	4b0d      	ldr	r3, [pc, #52]	@ (8009e58 <std+0x60>)
 8009e24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009e26:	4b0d      	ldr	r3, [pc, #52]	@ (8009e5c <std+0x64>)
 8009e28:	6323      	str	r3, [r4, #48]	@ 0x30
 8009e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e60 <std+0x68>)
 8009e2c:	6224      	str	r4, [r4, #32]
 8009e2e:	429c      	cmp	r4, r3
 8009e30:	d006      	beq.n	8009e40 <std+0x48>
 8009e32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009e36:	4294      	cmp	r4, r2
 8009e38:	d002      	beq.n	8009e40 <std+0x48>
 8009e3a:	33d0      	adds	r3, #208	@ 0xd0
 8009e3c:	429c      	cmp	r4, r3
 8009e3e:	d105      	bne.n	8009e4c <std+0x54>
 8009e40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e48:	f000 b97a 	b.w	800a140 <__retarget_lock_init_recursive>
 8009e4c:	bd10      	pop	{r4, pc}
 8009e4e:	bf00      	nop
 8009e50:	08009fc1 	.word	0x08009fc1
 8009e54:	08009fe3 	.word	0x08009fe3
 8009e58:	0800a01b 	.word	0x0800a01b
 8009e5c:	0800a03f 	.word	0x0800a03f
 8009e60:	20000b2c 	.word	0x20000b2c

08009e64 <stdio_exit_handler>:
 8009e64:	4a02      	ldr	r2, [pc, #8]	@ (8009e70 <stdio_exit_handler+0xc>)
 8009e66:	4903      	ldr	r1, [pc, #12]	@ (8009e74 <stdio_exit_handler+0x10>)
 8009e68:	4803      	ldr	r0, [pc, #12]	@ (8009e78 <stdio_exit_handler+0x14>)
 8009e6a:	f000 b869 	b.w	8009f40 <_fwalk_sglue>
 8009e6e:	bf00      	nop
 8009e70:	20000024 	.word	0x20000024
 8009e74:	0800bac5 	.word	0x0800bac5
 8009e78:	20000034 	.word	0x20000034

08009e7c <cleanup_stdio>:
 8009e7c:	6841      	ldr	r1, [r0, #4]
 8009e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8009eb0 <cleanup_stdio+0x34>)
 8009e80:	4299      	cmp	r1, r3
 8009e82:	b510      	push	{r4, lr}
 8009e84:	4604      	mov	r4, r0
 8009e86:	d001      	beq.n	8009e8c <cleanup_stdio+0x10>
 8009e88:	f001 fe1c 	bl	800bac4 <_fflush_r>
 8009e8c:	68a1      	ldr	r1, [r4, #8]
 8009e8e:	4b09      	ldr	r3, [pc, #36]	@ (8009eb4 <cleanup_stdio+0x38>)
 8009e90:	4299      	cmp	r1, r3
 8009e92:	d002      	beq.n	8009e9a <cleanup_stdio+0x1e>
 8009e94:	4620      	mov	r0, r4
 8009e96:	f001 fe15 	bl	800bac4 <_fflush_r>
 8009e9a:	68e1      	ldr	r1, [r4, #12]
 8009e9c:	4b06      	ldr	r3, [pc, #24]	@ (8009eb8 <cleanup_stdio+0x3c>)
 8009e9e:	4299      	cmp	r1, r3
 8009ea0:	d004      	beq.n	8009eac <cleanup_stdio+0x30>
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ea8:	f001 be0c 	b.w	800bac4 <_fflush_r>
 8009eac:	bd10      	pop	{r4, pc}
 8009eae:	bf00      	nop
 8009eb0:	20000b2c 	.word	0x20000b2c
 8009eb4:	20000b94 	.word	0x20000b94
 8009eb8:	20000bfc 	.word	0x20000bfc

08009ebc <global_stdio_init.part.0>:
 8009ebc:	b510      	push	{r4, lr}
 8009ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8009eec <global_stdio_init.part.0+0x30>)
 8009ec0:	4c0b      	ldr	r4, [pc, #44]	@ (8009ef0 <global_stdio_init.part.0+0x34>)
 8009ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8009ef4 <global_stdio_init.part.0+0x38>)
 8009ec4:	601a      	str	r2, [r3, #0]
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	2200      	movs	r2, #0
 8009eca:	2104      	movs	r1, #4
 8009ecc:	f7ff ff94 	bl	8009df8 <std>
 8009ed0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	2109      	movs	r1, #9
 8009ed8:	f7ff ff8e 	bl	8009df8 <std>
 8009edc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee6:	2112      	movs	r1, #18
 8009ee8:	f7ff bf86 	b.w	8009df8 <std>
 8009eec:	20000c64 	.word	0x20000c64
 8009ef0:	20000b2c 	.word	0x20000b2c
 8009ef4:	08009e65 	.word	0x08009e65

08009ef8 <__sfp_lock_acquire>:
 8009ef8:	4801      	ldr	r0, [pc, #4]	@ (8009f00 <__sfp_lock_acquire+0x8>)
 8009efa:	f000 b922 	b.w	800a142 <__retarget_lock_acquire_recursive>
 8009efe:	bf00      	nop
 8009f00:	20000c6d 	.word	0x20000c6d

08009f04 <__sfp_lock_release>:
 8009f04:	4801      	ldr	r0, [pc, #4]	@ (8009f0c <__sfp_lock_release+0x8>)
 8009f06:	f000 b91d 	b.w	800a144 <__retarget_lock_release_recursive>
 8009f0a:	bf00      	nop
 8009f0c:	20000c6d 	.word	0x20000c6d

08009f10 <__sinit>:
 8009f10:	b510      	push	{r4, lr}
 8009f12:	4604      	mov	r4, r0
 8009f14:	f7ff fff0 	bl	8009ef8 <__sfp_lock_acquire>
 8009f18:	6a23      	ldr	r3, [r4, #32]
 8009f1a:	b11b      	cbz	r3, 8009f24 <__sinit+0x14>
 8009f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f20:	f7ff bff0 	b.w	8009f04 <__sfp_lock_release>
 8009f24:	4b04      	ldr	r3, [pc, #16]	@ (8009f38 <__sinit+0x28>)
 8009f26:	6223      	str	r3, [r4, #32]
 8009f28:	4b04      	ldr	r3, [pc, #16]	@ (8009f3c <__sinit+0x2c>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d1f5      	bne.n	8009f1c <__sinit+0xc>
 8009f30:	f7ff ffc4 	bl	8009ebc <global_stdio_init.part.0>
 8009f34:	e7f2      	b.n	8009f1c <__sinit+0xc>
 8009f36:	bf00      	nop
 8009f38:	08009e7d 	.word	0x08009e7d
 8009f3c:	20000c64 	.word	0x20000c64

08009f40 <_fwalk_sglue>:
 8009f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f44:	4607      	mov	r7, r0
 8009f46:	4688      	mov	r8, r1
 8009f48:	4614      	mov	r4, r2
 8009f4a:	2600      	movs	r6, #0
 8009f4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f50:	f1b9 0901 	subs.w	r9, r9, #1
 8009f54:	d505      	bpl.n	8009f62 <_fwalk_sglue+0x22>
 8009f56:	6824      	ldr	r4, [r4, #0]
 8009f58:	2c00      	cmp	r4, #0
 8009f5a:	d1f7      	bne.n	8009f4c <_fwalk_sglue+0xc>
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f62:	89ab      	ldrh	r3, [r5, #12]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d907      	bls.n	8009f78 <_fwalk_sglue+0x38>
 8009f68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	d003      	beq.n	8009f78 <_fwalk_sglue+0x38>
 8009f70:	4629      	mov	r1, r5
 8009f72:	4638      	mov	r0, r7
 8009f74:	47c0      	blx	r8
 8009f76:	4306      	orrs	r6, r0
 8009f78:	3568      	adds	r5, #104	@ 0x68
 8009f7a:	e7e9      	b.n	8009f50 <_fwalk_sglue+0x10>

08009f7c <siprintf>:
 8009f7c:	b40e      	push	{r1, r2, r3}
 8009f7e:	b510      	push	{r4, lr}
 8009f80:	b09d      	sub	sp, #116	@ 0x74
 8009f82:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009f84:	9002      	str	r0, [sp, #8]
 8009f86:	9006      	str	r0, [sp, #24]
 8009f88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009f8c:	480a      	ldr	r0, [pc, #40]	@ (8009fb8 <siprintf+0x3c>)
 8009f8e:	9107      	str	r1, [sp, #28]
 8009f90:	9104      	str	r1, [sp, #16]
 8009f92:	490a      	ldr	r1, [pc, #40]	@ (8009fbc <siprintf+0x40>)
 8009f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f98:	9105      	str	r1, [sp, #20]
 8009f9a:	2400      	movs	r4, #0
 8009f9c:	a902      	add	r1, sp, #8
 8009f9e:	6800      	ldr	r0, [r0, #0]
 8009fa0:	9301      	str	r3, [sp, #4]
 8009fa2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009fa4:	f001 fc0e 	bl	800b7c4 <_svfiprintf_r>
 8009fa8:	9b02      	ldr	r3, [sp, #8]
 8009faa:	701c      	strb	r4, [r3, #0]
 8009fac:	b01d      	add	sp, #116	@ 0x74
 8009fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fb2:	b003      	add	sp, #12
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	20000030 	.word	0x20000030
 8009fbc:	ffff0208 	.word	0xffff0208

08009fc0 <__sread>:
 8009fc0:	b510      	push	{r4, lr}
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fc8:	f000 f86c 	bl	800a0a4 <_read_r>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	bfab      	itete	ge
 8009fd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8009fd4:	181b      	addge	r3, r3, r0
 8009fd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009fda:	bfac      	ite	ge
 8009fdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009fde:	81a3      	strhlt	r3, [r4, #12]
 8009fe0:	bd10      	pop	{r4, pc}

08009fe2 <__swrite>:
 8009fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe6:	461f      	mov	r7, r3
 8009fe8:	898b      	ldrh	r3, [r1, #12]
 8009fea:	05db      	lsls	r3, r3, #23
 8009fec:	4605      	mov	r5, r0
 8009fee:	460c      	mov	r4, r1
 8009ff0:	4616      	mov	r6, r2
 8009ff2:	d505      	bpl.n	800a000 <__swrite+0x1e>
 8009ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f000 f840 	bl	800a080 <_lseek_r>
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a006:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a00a:	81a3      	strh	r3, [r4, #12]
 800a00c:	4632      	mov	r2, r6
 800a00e:	463b      	mov	r3, r7
 800a010:	4628      	mov	r0, r5
 800a012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a016:	f000 b857 	b.w	800a0c8 <_write_r>

0800a01a <__sseek>:
 800a01a:	b510      	push	{r4, lr}
 800a01c:	460c      	mov	r4, r1
 800a01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a022:	f000 f82d 	bl	800a080 <_lseek_r>
 800a026:	1c43      	adds	r3, r0, #1
 800a028:	89a3      	ldrh	r3, [r4, #12]
 800a02a:	bf15      	itete	ne
 800a02c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a02e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a032:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a036:	81a3      	strheq	r3, [r4, #12]
 800a038:	bf18      	it	ne
 800a03a:	81a3      	strhne	r3, [r4, #12]
 800a03c:	bd10      	pop	{r4, pc}

0800a03e <__sclose>:
 800a03e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a042:	f000 b80d 	b.w	800a060 <_close_r>

0800a046 <memset>:
 800a046:	4402      	add	r2, r0
 800a048:	4603      	mov	r3, r0
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d100      	bne.n	800a050 <memset+0xa>
 800a04e:	4770      	bx	lr
 800a050:	f803 1b01 	strb.w	r1, [r3], #1
 800a054:	e7f9      	b.n	800a04a <memset+0x4>
	...

0800a058 <_localeconv_r>:
 800a058:	4800      	ldr	r0, [pc, #0]	@ (800a05c <_localeconv_r+0x4>)
 800a05a:	4770      	bx	lr
 800a05c:	20000170 	.word	0x20000170

0800a060 <_close_r>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	4d06      	ldr	r5, [pc, #24]	@ (800a07c <_close_r+0x1c>)
 800a064:	2300      	movs	r3, #0
 800a066:	4604      	mov	r4, r0
 800a068:	4608      	mov	r0, r1
 800a06a:	602b      	str	r3, [r5, #0]
 800a06c:	f7f9 fe3a 	bl	8003ce4 <_close>
 800a070:	1c43      	adds	r3, r0, #1
 800a072:	d102      	bne.n	800a07a <_close_r+0x1a>
 800a074:	682b      	ldr	r3, [r5, #0]
 800a076:	b103      	cbz	r3, 800a07a <_close_r+0x1a>
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	bd38      	pop	{r3, r4, r5, pc}
 800a07c:	20000c68 	.word	0x20000c68

0800a080 <_lseek_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4d07      	ldr	r5, [pc, #28]	@ (800a0a0 <_lseek_r+0x20>)
 800a084:	4604      	mov	r4, r0
 800a086:	4608      	mov	r0, r1
 800a088:	4611      	mov	r1, r2
 800a08a:	2200      	movs	r2, #0
 800a08c:	602a      	str	r2, [r5, #0]
 800a08e:	461a      	mov	r2, r3
 800a090:	f7f9 fe4f 	bl	8003d32 <_lseek>
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	d102      	bne.n	800a09e <_lseek_r+0x1e>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	b103      	cbz	r3, 800a09e <_lseek_r+0x1e>
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	bd38      	pop	{r3, r4, r5, pc}
 800a0a0:	20000c68 	.word	0x20000c68

0800a0a4 <_read_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4d07      	ldr	r5, [pc, #28]	@ (800a0c4 <_read_r+0x20>)
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	4608      	mov	r0, r1
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	602a      	str	r2, [r5, #0]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	f7f9 fddd 	bl	8003c72 <_read>
 800a0b8:	1c43      	adds	r3, r0, #1
 800a0ba:	d102      	bne.n	800a0c2 <_read_r+0x1e>
 800a0bc:	682b      	ldr	r3, [r5, #0]
 800a0be:	b103      	cbz	r3, 800a0c2 <_read_r+0x1e>
 800a0c0:	6023      	str	r3, [r4, #0]
 800a0c2:	bd38      	pop	{r3, r4, r5, pc}
 800a0c4:	20000c68 	.word	0x20000c68

0800a0c8 <_write_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d07      	ldr	r5, [pc, #28]	@ (800a0e8 <_write_r+0x20>)
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	4608      	mov	r0, r1
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	602a      	str	r2, [r5, #0]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	f7f9 fde8 	bl	8003cac <_write>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d102      	bne.n	800a0e6 <_write_r+0x1e>
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	b103      	cbz	r3, 800a0e6 <_write_r+0x1e>
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}
 800a0e8:	20000c68 	.word	0x20000c68

0800a0ec <__errno>:
 800a0ec:	4b01      	ldr	r3, [pc, #4]	@ (800a0f4 <__errno+0x8>)
 800a0ee:	6818      	ldr	r0, [r3, #0]
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	20000030 	.word	0x20000030

0800a0f8 <__libc_init_array>:
 800a0f8:	b570      	push	{r4, r5, r6, lr}
 800a0fa:	4d0d      	ldr	r5, [pc, #52]	@ (800a130 <__libc_init_array+0x38>)
 800a0fc:	4c0d      	ldr	r4, [pc, #52]	@ (800a134 <__libc_init_array+0x3c>)
 800a0fe:	1b64      	subs	r4, r4, r5
 800a100:	10a4      	asrs	r4, r4, #2
 800a102:	2600      	movs	r6, #0
 800a104:	42a6      	cmp	r6, r4
 800a106:	d109      	bne.n	800a11c <__libc_init_array+0x24>
 800a108:	4d0b      	ldr	r5, [pc, #44]	@ (800a138 <__libc_init_array+0x40>)
 800a10a:	4c0c      	ldr	r4, [pc, #48]	@ (800a13c <__libc_init_array+0x44>)
 800a10c:	f002 f8c0 	bl	800c290 <_init>
 800a110:	1b64      	subs	r4, r4, r5
 800a112:	10a4      	asrs	r4, r4, #2
 800a114:	2600      	movs	r6, #0
 800a116:	42a6      	cmp	r6, r4
 800a118:	d105      	bne.n	800a126 <__libc_init_array+0x2e>
 800a11a:	bd70      	pop	{r4, r5, r6, pc}
 800a11c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a120:	4798      	blx	r3
 800a122:	3601      	adds	r6, #1
 800a124:	e7ee      	b.n	800a104 <__libc_init_array+0xc>
 800a126:	f855 3b04 	ldr.w	r3, [r5], #4
 800a12a:	4798      	blx	r3
 800a12c:	3601      	adds	r6, #1
 800a12e:	e7f2      	b.n	800a116 <__libc_init_array+0x1e>
 800a130:	0800cc8c 	.word	0x0800cc8c
 800a134:	0800cc8c 	.word	0x0800cc8c
 800a138:	0800cc8c 	.word	0x0800cc8c
 800a13c:	0800cc90 	.word	0x0800cc90

0800a140 <__retarget_lock_init_recursive>:
 800a140:	4770      	bx	lr

0800a142 <__retarget_lock_acquire_recursive>:
 800a142:	4770      	bx	lr

0800a144 <__retarget_lock_release_recursive>:
 800a144:	4770      	bx	lr

0800a146 <memcpy>:
 800a146:	440a      	add	r2, r1
 800a148:	4291      	cmp	r1, r2
 800a14a:	f100 33ff 	add.w	r3, r0, #4294967295
 800a14e:	d100      	bne.n	800a152 <memcpy+0xc>
 800a150:	4770      	bx	lr
 800a152:	b510      	push	{r4, lr}
 800a154:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a158:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a15c:	4291      	cmp	r1, r2
 800a15e:	d1f9      	bne.n	800a154 <memcpy+0xe>
 800a160:	bd10      	pop	{r4, pc}

0800a162 <quorem>:
 800a162:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a166:	6903      	ldr	r3, [r0, #16]
 800a168:	690c      	ldr	r4, [r1, #16]
 800a16a:	42a3      	cmp	r3, r4
 800a16c:	4607      	mov	r7, r0
 800a16e:	db7e      	blt.n	800a26e <quorem+0x10c>
 800a170:	3c01      	subs	r4, #1
 800a172:	f101 0814 	add.w	r8, r1, #20
 800a176:	00a3      	lsls	r3, r4, #2
 800a178:	f100 0514 	add.w	r5, r0, #20
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a182:	9301      	str	r3, [sp, #4]
 800a184:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a188:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a18c:	3301      	adds	r3, #1
 800a18e:	429a      	cmp	r2, r3
 800a190:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a194:	fbb2 f6f3 	udiv	r6, r2, r3
 800a198:	d32e      	bcc.n	800a1f8 <quorem+0x96>
 800a19a:	f04f 0a00 	mov.w	sl, #0
 800a19e:	46c4      	mov	ip, r8
 800a1a0:	46ae      	mov	lr, r5
 800a1a2:	46d3      	mov	fp, sl
 800a1a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1a8:	b298      	uxth	r0, r3
 800a1aa:	fb06 a000 	mla	r0, r6, r0, sl
 800a1ae:	0c02      	lsrs	r2, r0, #16
 800a1b0:	0c1b      	lsrs	r3, r3, #16
 800a1b2:	fb06 2303 	mla	r3, r6, r3, r2
 800a1b6:	f8de 2000 	ldr.w	r2, [lr]
 800a1ba:	b280      	uxth	r0, r0
 800a1bc:	b292      	uxth	r2, r2
 800a1be:	1a12      	subs	r2, r2, r0
 800a1c0:	445a      	add	r2, fp
 800a1c2:	f8de 0000 	ldr.w	r0, [lr]
 800a1c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a1d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a1d4:	b292      	uxth	r2, r2
 800a1d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a1da:	45e1      	cmp	r9, ip
 800a1dc:	f84e 2b04 	str.w	r2, [lr], #4
 800a1e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a1e4:	d2de      	bcs.n	800a1a4 <quorem+0x42>
 800a1e6:	9b00      	ldr	r3, [sp, #0]
 800a1e8:	58eb      	ldr	r3, [r5, r3]
 800a1ea:	b92b      	cbnz	r3, 800a1f8 <quorem+0x96>
 800a1ec:	9b01      	ldr	r3, [sp, #4]
 800a1ee:	3b04      	subs	r3, #4
 800a1f0:	429d      	cmp	r5, r3
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	d32f      	bcc.n	800a256 <quorem+0xf4>
 800a1f6:	613c      	str	r4, [r7, #16]
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	f001 f97f 	bl	800b4fc <__mcmp>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	db25      	blt.n	800a24e <quorem+0xec>
 800a202:	4629      	mov	r1, r5
 800a204:	2000      	movs	r0, #0
 800a206:	f858 2b04 	ldr.w	r2, [r8], #4
 800a20a:	f8d1 c000 	ldr.w	ip, [r1]
 800a20e:	fa1f fe82 	uxth.w	lr, r2
 800a212:	fa1f f38c 	uxth.w	r3, ip
 800a216:	eba3 030e 	sub.w	r3, r3, lr
 800a21a:	4403      	add	r3, r0
 800a21c:	0c12      	lsrs	r2, r2, #16
 800a21e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a222:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a226:	b29b      	uxth	r3, r3
 800a228:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a22c:	45c1      	cmp	r9, r8
 800a22e:	f841 3b04 	str.w	r3, [r1], #4
 800a232:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a236:	d2e6      	bcs.n	800a206 <quorem+0xa4>
 800a238:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a23c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a240:	b922      	cbnz	r2, 800a24c <quorem+0xea>
 800a242:	3b04      	subs	r3, #4
 800a244:	429d      	cmp	r5, r3
 800a246:	461a      	mov	r2, r3
 800a248:	d30b      	bcc.n	800a262 <quorem+0x100>
 800a24a:	613c      	str	r4, [r7, #16]
 800a24c:	3601      	adds	r6, #1
 800a24e:	4630      	mov	r0, r6
 800a250:	b003      	add	sp, #12
 800a252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a256:	6812      	ldr	r2, [r2, #0]
 800a258:	3b04      	subs	r3, #4
 800a25a:	2a00      	cmp	r2, #0
 800a25c:	d1cb      	bne.n	800a1f6 <quorem+0x94>
 800a25e:	3c01      	subs	r4, #1
 800a260:	e7c6      	b.n	800a1f0 <quorem+0x8e>
 800a262:	6812      	ldr	r2, [r2, #0]
 800a264:	3b04      	subs	r3, #4
 800a266:	2a00      	cmp	r2, #0
 800a268:	d1ef      	bne.n	800a24a <quorem+0xe8>
 800a26a:	3c01      	subs	r4, #1
 800a26c:	e7ea      	b.n	800a244 <quorem+0xe2>
 800a26e:	2000      	movs	r0, #0
 800a270:	e7ee      	b.n	800a250 <quorem+0xee>
 800a272:	0000      	movs	r0, r0
 800a274:	0000      	movs	r0, r0
	...

0800a278 <_dtoa_r>:
 800a278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27c:	69c7      	ldr	r7, [r0, #28]
 800a27e:	b097      	sub	sp, #92	@ 0x5c
 800a280:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a284:	ec55 4b10 	vmov	r4, r5, d0
 800a288:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a28a:	9107      	str	r1, [sp, #28]
 800a28c:	4681      	mov	r9, r0
 800a28e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a290:	9311      	str	r3, [sp, #68]	@ 0x44
 800a292:	b97f      	cbnz	r7, 800a2b4 <_dtoa_r+0x3c>
 800a294:	2010      	movs	r0, #16
 800a296:	f000 fe09 	bl	800aeac <malloc>
 800a29a:	4602      	mov	r2, r0
 800a29c:	f8c9 001c 	str.w	r0, [r9, #28]
 800a2a0:	b920      	cbnz	r0, 800a2ac <_dtoa_r+0x34>
 800a2a2:	4ba9      	ldr	r3, [pc, #676]	@ (800a548 <_dtoa_r+0x2d0>)
 800a2a4:	21ef      	movs	r1, #239	@ 0xef
 800a2a6:	48a9      	ldr	r0, [pc, #676]	@ (800a54c <_dtoa_r+0x2d4>)
 800a2a8:	f001 fc5e 	bl	800bb68 <__assert_func>
 800a2ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a2b0:	6007      	str	r7, [r0, #0]
 800a2b2:	60c7      	str	r7, [r0, #12]
 800a2b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a2b8:	6819      	ldr	r1, [r3, #0]
 800a2ba:	b159      	cbz	r1, 800a2d4 <_dtoa_r+0x5c>
 800a2bc:	685a      	ldr	r2, [r3, #4]
 800a2be:	604a      	str	r2, [r1, #4]
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	4093      	lsls	r3, r2
 800a2c4:	608b      	str	r3, [r1, #8]
 800a2c6:	4648      	mov	r0, r9
 800a2c8:	f000 fee6 	bl	800b098 <_Bfree>
 800a2cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	601a      	str	r2, [r3, #0]
 800a2d4:	1e2b      	subs	r3, r5, #0
 800a2d6:	bfb9      	ittee	lt
 800a2d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a2dc:	9305      	strlt	r3, [sp, #20]
 800a2de:	2300      	movge	r3, #0
 800a2e0:	6033      	strge	r3, [r6, #0]
 800a2e2:	9f05      	ldr	r7, [sp, #20]
 800a2e4:	4b9a      	ldr	r3, [pc, #616]	@ (800a550 <_dtoa_r+0x2d8>)
 800a2e6:	bfbc      	itt	lt
 800a2e8:	2201      	movlt	r2, #1
 800a2ea:	6032      	strlt	r2, [r6, #0]
 800a2ec:	43bb      	bics	r3, r7
 800a2ee:	d112      	bne.n	800a316 <_dtoa_r+0x9e>
 800a2f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a2f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a2f6:	6013      	str	r3, [r2, #0]
 800a2f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a2fc:	4323      	orrs	r3, r4
 800a2fe:	f000 855a 	beq.w	800adb6 <_dtoa_r+0xb3e>
 800a302:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a304:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a564 <_dtoa_r+0x2ec>
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 855c 	beq.w	800adc6 <_dtoa_r+0xb4e>
 800a30e:	f10a 0303 	add.w	r3, sl, #3
 800a312:	f000 bd56 	b.w	800adc2 <_dtoa_r+0xb4a>
 800a316:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a31a:	2200      	movs	r2, #0
 800a31c:	ec51 0b17 	vmov	r0, r1, d7
 800a320:	2300      	movs	r3, #0
 800a322:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a326:	f7f6 fbef 	bl	8000b08 <__aeabi_dcmpeq>
 800a32a:	4680      	mov	r8, r0
 800a32c:	b158      	cbz	r0, 800a346 <_dtoa_r+0xce>
 800a32e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a330:	2301      	movs	r3, #1
 800a332:	6013      	str	r3, [r2, #0]
 800a334:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a336:	b113      	cbz	r3, 800a33e <_dtoa_r+0xc6>
 800a338:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a33a:	4b86      	ldr	r3, [pc, #536]	@ (800a554 <_dtoa_r+0x2dc>)
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a568 <_dtoa_r+0x2f0>
 800a342:	f000 bd40 	b.w	800adc6 <_dtoa_r+0xb4e>
 800a346:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a34a:	aa14      	add	r2, sp, #80	@ 0x50
 800a34c:	a915      	add	r1, sp, #84	@ 0x54
 800a34e:	4648      	mov	r0, r9
 800a350:	f001 f984 	bl	800b65c <__d2b>
 800a354:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a358:	9002      	str	r0, [sp, #8]
 800a35a:	2e00      	cmp	r6, #0
 800a35c:	d078      	beq.n	800a450 <_dtoa_r+0x1d8>
 800a35e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a360:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a368:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a36c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a370:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a374:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a378:	4619      	mov	r1, r3
 800a37a:	2200      	movs	r2, #0
 800a37c:	4b76      	ldr	r3, [pc, #472]	@ (800a558 <_dtoa_r+0x2e0>)
 800a37e:	f7f5 ffa3 	bl	80002c8 <__aeabi_dsub>
 800a382:	a36b      	add	r3, pc, #428	@ (adr r3, 800a530 <_dtoa_r+0x2b8>)
 800a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a388:	f7f6 f956 	bl	8000638 <__aeabi_dmul>
 800a38c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a538 <_dtoa_r+0x2c0>)
 800a38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a392:	f7f5 ff9b 	bl	80002cc <__adddf3>
 800a396:	4604      	mov	r4, r0
 800a398:	4630      	mov	r0, r6
 800a39a:	460d      	mov	r5, r1
 800a39c:	f7f6 f8e2 	bl	8000564 <__aeabi_i2d>
 800a3a0:	a367      	add	r3, pc, #412	@ (adr r3, 800a540 <_dtoa_r+0x2c8>)
 800a3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a6:	f7f6 f947 	bl	8000638 <__aeabi_dmul>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	f7f5 ff8b 	bl	80002cc <__adddf3>
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	460d      	mov	r5, r1
 800a3ba:	f7f6 fbed 	bl	8000b98 <__aeabi_d2iz>
 800a3be:	2200      	movs	r2, #0
 800a3c0:	4607      	mov	r7, r0
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	f7f6 fba8 	bl	8000b1c <__aeabi_dcmplt>
 800a3cc:	b140      	cbz	r0, 800a3e0 <_dtoa_r+0x168>
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	f7f6 f8c8 	bl	8000564 <__aeabi_i2d>
 800a3d4:	4622      	mov	r2, r4
 800a3d6:	462b      	mov	r3, r5
 800a3d8:	f7f6 fb96 	bl	8000b08 <__aeabi_dcmpeq>
 800a3dc:	b900      	cbnz	r0, 800a3e0 <_dtoa_r+0x168>
 800a3de:	3f01      	subs	r7, #1
 800a3e0:	2f16      	cmp	r7, #22
 800a3e2:	d852      	bhi.n	800a48a <_dtoa_r+0x212>
 800a3e4:	4b5d      	ldr	r3, [pc, #372]	@ (800a55c <_dtoa_r+0x2e4>)
 800a3e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a3f2:	f7f6 fb93 	bl	8000b1c <__aeabi_dcmplt>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d049      	beq.n	800a48e <_dtoa_r+0x216>
 800a3fa:	3f01      	subs	r7, #1
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800a400:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a402:	1b9b      	subs	r3, r3, r6
 800a404:	1e5a      	subs	r2, r3, #1
 800a406:	bf45      	ittet	mi
 800a408:	f1c3 0301 	rsbmi	r3, r3, #1
 800a40c:	9300      	strmi	r3, [sp, #0]
 800a40e:	2300      	movpl	r3, #0
 800a410:	2300      	movmi	r3, #0
 800a412:	9206      	str	r2, [sp, #24]
 800a414:	bf54      	ite	pl
 800a416:	9300      	strpl	r3, [sp, #0]
 800a418:	9306      	strmi	r3, [sp, #24]
 800a41a:	2f00      	cmp	r7, #0
 800a41c:	db39      	blt.n	800a492 <_dtoa_r+0x21a>
 800a41e:	9b06      	ldr	r3, [sp, #24]
 800a420:	970d      	str	r7, [sp, #52]	@ 0x34
 800a422:	443b      	add	r3, r7
 800a424:	9306      	str	r3, [sp, #24]
 800a426:	2300      	movs	r3, #0
 800a428:	9308      	str	r3, [sp, #32]
 800a42a:	9b07      	ldr	r3, [sp, #28]
 800a42c:	2b09      	cmp	r3, #9
 800a42e:	d863      	bhi.n	800a4f8 <_dtoa_r+0x280>
 800a430:	2b05      	cmp	r3, #5
 800a432:	bfc4      	itt	gt
 800a434:	3b04      	subgt	r3, #4
 800a436:	9307      	strgt	r3, [sp, #28]
 800a438:	9b07      	ldr	r3, [sp, #28]
 800a43a:	f1a3 0302 	sub.w	r3, r3, #2
 800a43e:	bfcc      	ite	gt
 800a440:	2400      	movgt	r4, #0
 800a442:	2401      	movle	r4, #1
 800a444:	2b03      	cmp	r3, #3
 800a446:	d863      	bhi.n	800a510 <_dtoa_r+0x298>
 800a448:	e8df f003 	tbb	[pc, r3]
 800a44c:	2b375452 	.word	0x2b375452
 800a450:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a454:	441e      	add	r6, r3
 800a456:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a45a:	2b20      	cmp	r3, #32
 800a45c:	bfc1      	itttt	gt
 800a45e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a462:	409f      	lslgt	r7, r3
 800a464:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a468:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a46c:	bfd6      	itet	le
 800a46e:	f1c3 0320 	rsble	r3, r3, #32
 800a472:	ea47 0003 	orrgt.w	r0, r7, r3
 800a476:	fa04 f003 	lslle.w	r0, r4, r3
 800a47a:	f7f6 f863 	bl	8000544 <__aeabi_ui2d>
 800a47e:	2201      	movs	r2, #1
 800a480:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a484:	3e01      	subs	r6, #1
 800a486:	9212      	str	r2, [sp, #72]	@ 0x48
 800a488:	e776      	b.n	800a378 <_dtoa_r+0x100>
 800a48a:	2301      	movs	r3, #1
 800a48c:	e7b7      	b.n	800a3fe <_dtoa_r+0x186>
 800a48e:	9010      	str	r0, [sp, #64]	@ 0x40
 800a490:	e7b6      	b.n	800a400 <_dtoa_r+0x188>
 800a492:	9b00      	ldr	r3, [sp, #0]
 800a494:	1bdb      	subs	r3, r3, r7
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	427b      	negs	r3, r7
 800a49a:	9308      	str	r3, [sp, #32]
 800a49c:	2300      	movs	r3, #0
 800a49e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a4a0:	e7c3      	b.n	800a42a <_dtoa_r+0x1b2>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4a8:	eb07 0b03 	add.w	fp, r7, r3
 800a4ac:	f10b 0301 	add.w	r3, fp, #1
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	9303      	str	r3, [sp, #12]
 800a4b4:	bfb8      	it	lt
 800a4b6:	2301      	movlt	r3, #1
 800a4b8:	e006      	b.n	800a4c8 <_dtoa_r+0x250>
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	dd28      	ble.n	800a516 <_dtoa_r+0x29e>
 800a4c4:	469b      	mov	fp, r3
 800a4c6:	9303      	str	r3, [sp, #12]
 800a4c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	2204      	movs	r2, #4
 800a4d0:	f102 0514 	add.w	r5, r2, #20
 800a4d4:	429d      	cmp	r5, r3
 800a4d6:	d926      	bls.n	800a526 <_dtoa_r+0x2ae>
 800a4d8:	6041      	str	r1, [r0, #4]
 800a4da:	4648      	mov	r0, r9
 800a4dc:	f000 fd9c 	bl	800b018 <_Balloc>
 800a4e0:	4682      	mov	sl, r0
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d142      	bne.n	800a56c <_dtoa_r+0x2f4>
 800a4e6:	4b1e      	ldr	r3, [pc, #120]	@ (800a560 <_dtoa_r+0x2e8>)
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	f240 11af 	movw	r1, #431	@ 0x1af
 800a4ee:	e6da      	b.n	800a2a6 <_dtoa_r+0x2e>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	e7e3      	b.n	800a4bc <_dtoa_r+0x244>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	e7d5      	b.n	800a4a4 <_dtoa_r+0x22c>
 800a4f8:	2401      	movs	r4, #1
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	9307      	str	r3, [sp, #28]
 800a4fe:	9409      	str	r4, [sp, #36]	@ 0x24
 800a500:	f04f 3bff 	mov.w	fp, #4294967295
 800a504:	2200      	movs	r2, #0
 800a506:	f8cd b00c 	str.w	fp, [sp, #12]
 800a50a:	2312      	movs	r3, #18
 800a50c:	920c      	str	r2, [sp, #48]	@ 0x30
 800a50e:	e7db      	b.n	800a4c8 <_dtoa_r+0x250>
 800a510:	2301      	movs	r3, #1
 800a512:	9309      	str	r3, [sp, #36]	@ 0x24
 800a514:	e7f4      	b.n	800a500 <_dtoa_r+0x288>
 800a516:	f04f 0b01 	mov.w	fp, #1
 800a51a:	f8cd b00c 	str.w	fp, [sp, #12]
 800a51e:	465b      	mov	r3, fp
 800a520:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a524:	e7d0      	b.n	800a4c8 <_dtoa_r+0x250>
 800a526:	3101      	adds	r1, #1
 800a528:	0052      	lsls	r2, r2, #1
 800a52a:	e7d1      	b.n	800a4d0 <_dtoa_r+0x258>
 800a52c:	f3af 8000 	nop.w
 800a530:	636f4361 	.word	0x636f4361
 800a534:	3fd287a7 	.word	0x3fd287a7
 800a538:	8b60c8b3 	.word	0x8b60c8b3
 800a53c:	3fc68a28 	.word	0x3fc68a28
 800a540:	509f79fb 	.word	0x509f79fb
 800a544:	3fd34413 	.word	0x3fd34413
 800a548:	0800c94d 	.word	0x0800c94d
 800a54c:	0800c964 	.word	0x0800c964
 800a550:	7ff00000 	.word	0x7ff00000
 800a554:	0800c91d 	.word	0x0800c91d
 800a558:	3ff80000 	.word	0x3ff80000
 800a55c:	0800cab8 	.word	0x0800cab8
 800a560:	0800c9bc 	.word	0x0800c9bc
 800a564:	0800c949 	.word	0x0800c949
 800a568:	0800c91c 	.word	0x0800c91c
 800a56c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a570:	6018      	str	r0, [r3, #0]
 800a572:	9b03      	ldr	r3, [sp, #12]
 800a574:	2b0e      	cmp	r3, #14
 800a576:	f200 80a1 	bhi.w	800a6bc <_dtoa_r+0x444>
 800a57a:	2c00      	cmp	r4, #0
 800a57c:	f000 809e 	beq.w	800a6bc <_dtoa_r+0x444>
 800a580:	2f00      	cmp	r7, #0
 800a582:	dd33      	ble.n	800a5ec <_dtoa_r+0x374>
 800a584:	4b9c      	ldr	r3, [pc, #624]	@ (800a7f8 <_dtoa_r+0x580>)
 800a586:	f007 020f 	and.w	r2, r7, #15
 800a58a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a58e:	ed93 7b00 	vldr	d7, [r3]
 800a592:	05f8      	lsls	r0, r7, #23
 800a594:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a598:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a59c:	d516      	bpl.n	800a5cc <_dtoa_r+0x354>
 800a59e:	4b97      	ldr	r3, [pc, #604]	@ (800a7fc <_dtoa_r+0x584>)
 800a5a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a5a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5a8:	f7f6 f970 	bl	800088c <__aeabi_ddiv>
 800a5ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5b0:	f004 040f 	and.w	r4, r4, #15
 800a5b4:	2603      	movs	r6, #3
 800a5b6:	4d91      	ldr	r5, [pc, #580]	@ (800a7fc <_dtoa_r+0x584>)
 800a5b8:	b954      	cbnz	r4, 800a5d0 <_dtoa_r+0x358>
 800a5ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a5be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5c2:	f7f6 f963 	bl	800088c <__aeabi_ddiv>
 800a5c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5ca:	e028      	b.n	800a61e <_dtoa_r+0x3a6>
 800a5cc:	2602      	movs	r6, #2
 800a5ce:	e7f2      	b.n	800a5b6 <_dtoa_r+0x33e>
 800a5d0:	07e1      	lsls	r1, r4, #31
 800a5d2:	d508      	bpl.n	800a5e6 <_dtoa_r+0x36e>
 800a5d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a5d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5dc:	f7f6 f82c 	bl	8000638 <__aeabi_dmul>
 800a5e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a5e4:	3601      	adds	r6, #1
 800a5e6:	1064      	asrs	r4, r4, #1
 800a5e8:	3508      	adds	r5, #8
 800a5ea:	e7e5      	b.n	800a5b8 <_dtoa_r+0x340>
 800a5ec:	f000 80af 	beq.w	800a74e <_dtoa_r+0x4d6>
 800a5f0:	427c      	negs	r4, r7
 800a5f2:	4b81      	ldr	r3, [pc, #516]	@ (800a7f8 <_dtoa_r+0x580>)
 800a5f4:	4d81      	ldr	r5, [pc, #516]	@ (800a7fc <_dtoa_r+0x584>)
 800a5f6:	f004 020f 	and.w	r2, r4, #15
 800a5fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a602:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a606:	f7f6 f817 	bl	8000638 <__aeabi_dmul>
 800a60a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a60e:	1124      	asrs	r4, r4, #4
 800a610:	2300      	movs	r3, #0
 800a612:	2602      	movs	r6, #2
 800a614:	2c00      	cmp	r4, #0
 800a616:	f040 808f 	bne.w	800a738 <_dtoa_r+0x4c0>
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1d3      	bne.n	800a5c6 <_dtoa_r+0x34e>
 800a61e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a620:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 8094 	beq.w	800a752 <_dtoa_r+0x4da>
 800a62a:	4b75      	ldr	r3, [pc, #468]	@ (800a800 <_dtoa_r+0x588>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	4620      	mov	r0, r4
 800a630:	4629      	mov	r1, r5
 800a632:	f7f6 fa73 	bl	8000b1c <__aeabi_dcmplt>
 800a636:	2800      	cmp	r0, #0
 800a638:	f000 808b 	beq.w	800a752 <_dtoa_r+0x4da>
 800a63c:	9b03      	ldr	r3, [sp, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f000 8087 	beq.w	800a752 <_dtoa_r+0x4da>
 800a644:	f1bb 0f00 	cmp.w	fp, #0
 800a648:	dd34      	ble.n	800a6b4 <_dtoa_r+0x43c>
 800a64a:	4620      	mov	r0, r4
 800a64c:	4b6d      	ldr	r3, [pc, #436]	@ (800a804 <_dtoa_r+0x58c>)
 800a64e:	2200      	movs	r2, #0
 800a650:	4629      	mov	r1, r5
 800a652:	f7f5 fff1 	bl	8000638 <__aeabi_dmul>
 800a656:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a65a:	f107 38ff 	add.w	r8, r7, #4294967295
 800a65e:	3601      	adds	r6, #1
 800a660:	465c      	mov	r4, fp
 800a662:	4630      	mov	r0, r6
 800a664:	f7f5 ff7e 	bl	8000564 <__aeabi_i2d>
 800a668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a66c:	f7f5 ffe4 	bl	8000638 <__aeabi_dmul>
 800a670:	4b65      	ldr	r3, [pc, #404]	@ (800a808 <_dtoa_r+0x590>)
 800a672:	2200      	movs	r2, #0
 800a674:	f7f5 fe2a 	bl	80002cc <__adddf3>
 800a678:	4605      	mov	r5, r0
 800a67a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a67e:	2c00      	cmp	r4, #0
 800a680:	d16a      	bne.n	800a758 <_dtoa_r+0x4e0>
 800a682:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a686:	4b61      	ldr	r3, [pc, #388]	@ (800a80c <_dtoa_r+0x594>)
 800a688:	2200      	movs	r2, #0
 800a68a:	f7f5 fe1d 	bl	80002c8 <__aeabi_dsub>
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a696:	462a      	mov	r2, r5
 800a698:	4633      	mov	r3, r6
 800a69a:	f7f6 fa5d 	bl	8000b58 <__aeabi_dcmpgt>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	f040 8298 	bne.w	800abd4 <_dtoa_r+0x95c>
 800a6a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6a8:	462a      	mov	r2, r5
 800a6aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a6ae:	f7f6 fa35 	bl	8000b1c <__aeabi_dcmplt>
 800a6b2:	bb38      	cbnz	r0, 800a704 <_dtoa_r+0x48c>
 800a6b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a6b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a6bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f2c0 8157 	blt.w	800a972 <_dtoa_r+0x6fa>
 800a6c4:	2f0e      	cmp	r7, #14
 800a6c6:	f300 8154 	bgt.w	800a972 <_dtoa_r+0x6fa>
 800a6ca:	4b4b      	ldr	r3, [pc, #300]	@ (800a7f8 <_dtoa_r+0x580>)
 800a6cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6d0:	ed93 7b00 	vldr	d7, [r3]
 800a6d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	ed8d 7b00 	vstr	d7, [sp]
 800a6dc:	f280 80e5 	bge.w	800a8aa <_dtoa_r+0x632>
 800a6e0:	9b03      	ldr	r3, [sp, #12]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f300 80e1 	bgt.w	800a8aa <_dtoa_r+0x632>
 800a6e8:	d10c      	bne.n	800a704 <_dtoa_r+0x48c>
 800a6ea:	4b48      	ldr	r3, [pc, #288]	@ (800a80c <_dtoa_r+0x594>)
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	ec51 0b17 	vmov	r0, r1, d7
 800a6f2:	f7f5 ffa1 	bl	8000638 <__aeabi_dmul>
 800a6f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6fa:	f7f6 fa23 	bl	8000b44 <__aeabi_dcmpge>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	f000 8266 	beq.w	800abd0 <_dtoa_r+0x958>
 800a704:	2400      	movs	r4, #0
 800a706:	4625      	mov	r5, r4
 800a708:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a70a:	4656      	mov	r6, sl
 800a70c:	ea6f 0803 	mvn.w	r8, r3
 800a710:	2700      	movs	r7, #0
 800a712:	4621      	mov	r1, r4
 800a714:	4648      	mov	r0, r9
 800a716:	f000 fcbf 	bl	800b098 <_Bfree>
 800a71a:	2d00      	cmp	r5, #0
 800a71c:	f000 80bd 	beq.w	800a89a <_dtoa_r+0x622>
 800a720:	b12f      	cbz	r7, 800a72e <_dtoa_r+0x4b6>
 800a722:	42af      	cmp	r7, r5
 800a724:	d003      	beq.n	800a72e <_dtoa_r+0x4b6>
 800a726:	4639      	mov	r1, r7
 800a728:	4648      	mov	r0, r9
 800a72a:	f000 fcb5 	bl	800b098 <_Bfree>
 800a72e:	4629      	mov	r1, r5
 800a730:	4648      	mov	r0, r9
 800a732:	f000 fcb1 	bl	800b098 <_Bfree>
 800a736:	e0b0      	b.n	800a89a <_dtoa_r+0x622>
 800a738:	07e2      	lsls	r2, r4, #31
 800a73a:	d505      	bpl.n	800a748 <_dtoa_r+0x4d0>
 800a73c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a740:	f7f5 ff7a 	bl	8000638 <__aeabi_dmul>
 800a744:	3601      	adds	r6, #1
 800a746:	2301      	movs	r3, #1
 800a748:	1064      	asrs	r4, r4, #1
 800a74a:	3508      	adds	r5, #8
 800a74c:	e762      	b.n	800a614 <_dtoa_r+0x39c>
 800a74e:	2602      	movs	r6, #2
 800a750:	e765      	b.n	800a61e <_dtoa_r+0x3a6>
 800a752:	9c03      	ldr	r4, [sp, #12]
 800a754:	46b8      	mov	r8, r7
 800a756:	e784      	b.n	800a662 <_dtoa_r+0x3ea>
 800a758:	4b27      	ldr	r3, [pc, #156]	@ (800a7f8 <_dtoa_r+0x580>)
 800a75a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a75c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a760:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a764:	4454      	add	r4, sl
 800a766:	2900      	cmp	r1, #0
 800a768:	d054      	beq.n	800a814 <_dtoa_r+0x59c>
 800a76a:	4929      	ldr	r1, [pc, #164]	@ (800a810 <_dtoa_r+0x598>)
 800a76c:	2000      	movs	r0, #0
 800a76e:	f7f6 f88d 	bl	800088c <__aeabi_ddiv>
 800a772:	4633      	mov	r3, r6
 800a774:	462a      	mov	r2, r5
 800a776:	f7f5 fda7 	bl	80002c8 <__aeabi_dsub>
 800a77a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a77e:	4656      	mov	r6, sl
 800a780:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a784:	f7f6 fa08 	bl	8000b98 <__aeabi_d2iz>
 800a788:	4605      	mov	r5, r0
 800a78a:	f7f5 feeb 	bl	8000564 <__aeabi_i2d>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a796:	f7f5 fd97 	bl	80002c8 <__aeabi_dsub>
 800a79a:	3530      	adds	r5, #48	@ 0x30
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a7a4:	f806 5b01 	strb.w	r5, [r6], #1
 800a7a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a7ac:	f7f6 f9b6 	bl	8000b1c <__aeabi_dcmplt>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d172      	bne.n	800a89a <_dtoa_r+0x622>
 800a7b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7b8:	4911      	ldr	r1, [pc, #68]	@ (800a800 <_dtoa_r+0x588>)
 800a7ba:	2000      	movs	r0, #0
 800a7bc:	f7f5 fd84 	bl	80002c8 <__aeabi_dsub>
 800a7c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a7c4:	f7f6 f9aa 	bl	8000b1c <__aeabi_dcmplt>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	f040 80b4 	bne.w	800a936 <_dtoa_r+0x6be>
 800a7ce:	42a6      	cmp	r6, r4
 800a7d0:	f43f af70 	beq.w	800a6b4 <_dtoa_r+0x43c>
 800a7d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a7d8:	4b0a      	ldr	r3, [pc, #40]	@ (800a804 <_dtoa_r+0x58c>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f7f5 ff2c 	bl	8000638 <__aeabi_dmul>
 800a7e0:	4b08      	ldr	r3, [pc, #32]	@ (800a804 <_dtoa_r+0x58c>)
 800a7e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7ec:	f7f5 ff24 	bl	8000638 <__aeabi_dmul>
 800a7f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7f4:	e7c4      	b.n	800a780 <_dtoa_r+0x508>
 800a7f6:	bf00      	nop
 800a7f8:	0800cab8 	.word	0x0800cab8
 800a7fc:	0800ca90 	.word	0x0800ca90
 800a800:	3ff00000 	.word	0x3ff00000
 800a804:	40240000 	.word	0x40240000
 800a808:	401c0000 	.word	0x401c0000
 800a80c:	40140000 	.word	0x40140000
 800a810:	3fe00000 	.word	0x3fe00000
 800a814:	4631      	mov	r1, r6
 800a816:	4628      	mov	r0, r5
 800a818:	f7f5 ff0e 	bl	8000638 <__aeabi_dmul>
 800a81c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a820:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a822:	4656      	mov	r6, sl
 800a824:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a828:	f7f6 f9b6 	bl	8000b98 <__aeabi_d2iz>
 800a82c:	4605      	mov	r5, r0
 800a82e:	f7f5 fe99 	bl	8000564 <__aeabi_i2d>
 800a832:	4602      	mov	r2, r0
 800a834:	460b      	mov	r3, r1
 800a836:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a83a:	f7f5 fd45 	bl	80002c8 <__aeabi_dsub>
 800a83e:	3530      	adds	r5, #48	@ 0x30
 800a840:	f806 5b01 	strb.w	r5, [r6], #1
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	42a6      	cmp	r6, r4
 800a84a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a84e:	f04f 0200 	mov.w	r2, #0
 800a852:	d124      	bne.n	800a89e <_dtoa_r+0x626>
 800a854:	4baf      	ldr	r3, [pc, #700]	@ (800ab14 <_dtoa_r+0x89c>)
 800a856:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a85a:	f7f5 fd37 	bl	80002cc <__adddf3>
 800a85e:	4602      	mov	r2, r0
 800a860:	460b      	mov	r3, r1
 800a862:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a866:	f7f6 f977 	bl	8000b58 <__aeabi_dcmpgt>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d163      	bne.n	800a936 <_dtoa_r+0x6be>
 800a86e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a872:	49a8      	ldr	r1, [pc, #672]	@ (800ab14 <_dtoa_r+0x89c>)
 800a874:	2000      	movs	r0, #0
 800a876:	f7f5 fd27 	bl	80002c8 <__aeabi_dsub>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a882:	f7f6 f94b 	bl	8000b1c <__aeabi_dcmplt>
 800a886:	2800      	cmp	r0, #0
 800a888:	f43f af14 	beq.w	800a6b4 <_dtoa_r+0x43c>
 800a88c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a88e:	1e73      	subs	r3, r6, #1
 800a890:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a892:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a896:	2b30      	cmp	r3, #48	@ 0x30
 800a898:	d0f8      	beq.n	800a88c <_dtoa_r+0x614>
 800a89a:	4647      	mov	r7, r8
 800a89c:	e03b      	b.n	800a916 <_dtoa_r+0x69e>
 800a89e:	4b9e      	ldr	r3, [pc, #632]	@ (800ab18 <_dtoa_r+0x8a0>)
 800a8a0:	f7f5 feca 	bl	8000638 <__aeabi_dmul>
 800a8a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8a8:	e7bc      	b.n	800a824 <_dtoa_r+0x5ac>
 800a8aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a8ae:	4656      	mov	r6, sl
 800a8b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	f7f5 ffe8 	bl	800088c <__aeabi_ddiv>
 800a8bc:	f7f6 f96c 	bl	8000b98 <__aeabi_d2iz>
 800a8c0:	4680      	mov	r8, r0
 800a8c2:	f7f5 fe4f 	bl	8000564 <__aeabi_i2d>
 800a8c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8ca:	f7f5 feb5 	bl	8000638 <__aeabi_dmul>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a8da:	f7f5 fcf5 	bl	80002c8 <__aeabi_dsub>
 800a8de:	f806 4b01 	strb.w	r4, [r6], #1
 800a8e2:	9d03      	ldr	r5, [sp, #12]
 800a8e4:	eba6 040a 	sub.w	r4, r6, sl
 800a8e8:	42a5      	cmp	r5, r4
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	d133      	bne.n	800a958 <_dtoa_r+0x6e0>
 800a8f0:	f7f5 fcec 	bl	80002cc <__adddf3>
 800a8f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	460d      	mov	r5, r1
 800a8fc:	f7f6 f92c 	bl	8000b58 <__aeabi_dcmpgt>
 800a900:	b9c0      	cbnz	r0, 800a934 <_dtoa_r+0x6bc>
 800a902:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a906:	4620      	mov	r0, r4
 800a908:	4629      	mov	r1, r5
 800a90a:	f7f6 f8fd 	bl	8000b08 <__aeabi_dcmpeq>
 800a90e:	b110      	cbz	r0, 800a916 <_dtoa_r+0x69e>
 800a910:	f018 0f01 	tst.w	r8, #1
 800a914:	d10e      	bne.n	800a934 <_dtoa_r+0x6bc>
 800a916:	9902      	ldr	r1, [sp, #8]
 800a918:	4648      	mov	r0, r9
 800a91a:	f000 fbbd 	bl	800b098 <_Bfree>
 800a91e:	2300      	movs	r3, #0
 800a920:	7033      	strb	r3, [r6, #0]
 800a922:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a924:	3701      	adds	r7, #1
 800a926:	601f      	str	r7, [r3, #0]
 800a928:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f000 824b 	beq.w	800adc6 <_dtoa_r+0xb4e>
 800a930:	601e      	str	r6, [r3, #0]
 800a932:	e248      	b.n	800adc6 <_dtoa_r+0xb4e>
 800a934:	46b8      	mov	r8, r7
 800a936:	4633      	mov	r3, r6
 800a938:	461e      	mov	r6, r3
 800a93a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a93e:	2a39      	cmp	r2, #57	@ 0x39
 800a940:	d106      	bne.n	800a950 <_dtoa_r+0x6d8>
 800a942:	459a      	cmp	sl, r3
 800a944:	d1f8      	bne.n	800a938 <_dtoa_r+0x6c0>
 800a946:	2230      	movs	r2, #48	@ 0x30
 800a948:	f108 0801 	add.w	r8, r8, #1
 800a94c:	f88a 2000 	strb.w	r2, [sl]
 800a950:	781a      	ldrb	r2, [r3, #0]
 800a952:	3201      	adds	r2, #1
 800a954:	701a      	strb	r2, [r3, #0]
 800a956:	e7a0      	b.n	800a89a <_dtoa_r+0x622>
 800a958:	4b6f      	ldr	r3, [pc, #444]	@ (800ab18 <_dtoa_r+0x8a0>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	f7f5 fe6c 	bl	8000638 <__aeabi_dmul>
 800a960:	2200      	movs	r2, #0
 800a962:	2300      	movs	r3, #0
 800a964:	4604      	mov	r4, r0
 800a966:	460d      	mov	r5, r1
 800a968:	f7f6 f8ce 	bl	8000b08 <__aeabi_dcmpeq>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d09f      	beq.n	800a8b0 <_dtoa_r+0x638>
 800a970:	e7d1      	b.n	800a916 <_dtoa_r+0x69e>
 800a972:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a974:	2a00      	cmp	r2, #0
 800a976:	f000 80ea 	beq.w	800ab4e <_dtoa_r+0x8d6>
 800a97a:	9a07      	ldr	r2, [sp, #28]
 800a97c:	2a01      	cmp	r2, #1
 800a97e:	f300 80cd 	bgt.w	800ab1c <_dtoa_r+0x8a4>
 800a982:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a984:	2a00      	cmp	r2, #0
 800a986:	f000 80c1 	beq.w	800ab0c <_dtoa_r+0x894>
 800a98a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a98e:	9c08      	ldr	r4, [sp, #32]
 800a990:	9e00      	ldr	r6, [sp, #0]
 800a992:	9a00      	ldr	r2, [sp, #0]
 800a994:	441a      	add	r2, r3
 800a996:	9200      	str	r2, [sp, #0]
 800a998:	9a06      	ldr	r2, [sp, #24]
 800a99a:	2101      	movs	r1, #1
 800a99c:	441a      	add	r2, r3
 800a99e:	4648      	mov	r0, r9
 800a9a0:	9206      	str	r2, [sp, #24]
 800a9a2:	f000 fc2d 	bl	800b200 <__i2b>
 800a9a6:	4605      	mov	r5, r0
 800a9a8:	b166      	cbz	r6, 800a9c4 <_dtoa_r+0x74c>
 800a9aa:	9b06      	ldr	r3, [sp, #24]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	dd09      	ble.n	800a9c4 <_dtoa_r+0x74c>
 800a9b0:	42b3      	cmp	r3, r6
 800a9b2:	9a00      	ldr	r2, [sp, #0]
 800a9b4:	bfa8      	it	ge
 800a9b6:	4633      	movge	r3, r6
 800a9b8:	1ad2      	subs	r2, r2, r3
 800a9ba:	9200      	str	r2, [sp, #0]
 800a9bc:	9a06      	ldr	r2, [sp, #24]
 800a9be:	1af6      	subs	r6, r6, r3
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	9306      	str	r3, [sp, #24]
 800a9c4:	9b08      	ldr	r3, [sp, #32]
 800a9c6:	b30b      	cbz	r3, 800aa0c <_dtoa_r+0x794>
 800a9c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 80c6 	beq.w	800ab5c <_dtoa_r+0x8e4>
 800a9d0:	2c00      	cmp	r4, #0
 800a9d2:	f000 80c0 	beq.w	800ab56 <_dtoa_r+0x8de>
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	4622      	mov	r2, r4
 800a9da:	4648      	mov	r0, r9
 800a9dc:	f000 fcc8 	bl	800b370 <__pow5mult>
 800a9e0:	9a02      	ldr	r2, [sp, #8]
 800a9e2:	4601      	mov	r1, r0
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	4648      	mov	r0, r9
 800a9e8:	f000 fc20 	bl	800b22c <__multiply>
 800a9ec:	9902      	ldr	r1, [sp, #8]
 800a9ee:	4680      	mov	r8, r0
 800a9f0:	4648      	mov	r0, r9
 800a9f2:	f000 fb51 	bl	800b098 <_Bfree>
 800a9f6:	9b08      	ldr	r3, [sp, #32]
 800a9f8:	1b1b      	subs	r3, r3, r4
 800a9fa:	9308      	str	r3, [sp, #32]
 800a9fc:	f000 80b1 	beq.w	800ab62 <_dtoa_r+0x8ea>
 800aa00:	9a08      	ldr	r2, [sp, #32]
 800aa02:	4641      	mov	r1, r8
 800aa04:	4648      	mov	r0, r9
 800aa06:	f000 fcb3 	bl	800b370 <__pow5mult>
 800aa0a:	9002      	str	r0, [sp, #8]
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	4648      	mov	r0, r9
 800aa10:	f000 fbf6 	bl	800b200 <__i2b>
 800aa14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa16:	4604      	mov	r4, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 81d8 	beq.w	800adce <_dtoa_r+0xb56>
 800aa1e:	461a      	mov	r2, r3
 800aa20:	4601      	mov	r1, r0
 800aa22:	4648      	mov	r0, r9
 800aa24:	f000 fca4 	bl	800b370 <__pow5mult>
 800aa28:	9b07      	ldr	r3, [sp, #28]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	f300 809f 	bgt.w	800ab70 <_dtoa_r+0x8f8>
 800aa32:	9b04      	ldr	r3, [sp, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f040 8097 	bne.w	800ab68 <_dtoa_r+0x8f0>
 800aa3a:	9b05      	ldr	r3, [sp, #20]
 800aa3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f040 8093 	bne.w	800ab6c <_dtoa_r+0x8f4>
 800aa46:	9b05      	ldr	r3, [sp, #20]
 800aa48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa4c:	0d1b      	lsrs	r3, r3, #20
 800aa4e:	051b      	lsls	r3, r3, #20
 800aa50:	b133      	cbz	r3, 800aa60 <_dtoa_r+0x7e8>
 800aa52:	9b00      	ldr	r3, [sp, #0]
 800aa54:	3301      	adds	r3, #1
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	9b06      	ldr	r3, [sp, #24]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	9306      	str	r3, [sp, #24]
 800aa5e:	2301      	movs	r3, #1
 800aa60:	9308      	str	r3, [sp, #32]
 800aa62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 81b8 	beq.w	800adda <_dtoa_r+0xb62>
 800aa6a:	6923      	ldr	r3, [r4, #16]
 800aa6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa70:	6918      	ldr	r0, [r3, #16]
 800aa72:	f000 fb79 	bl	800b168 <__hi0bits>
 800aa76:	f1c0 0020 	rsb	r0, r0, #32
 800aa7a:	9b06      	ldr	r3, [sp, #24]
 800aa7c:	4418      	add	r0, r3
 800aa7e:	f010 001f 	ands.w	r0, r0, #31
 800aa82:	f000 8082 	beq.w	800ab8a <_dtoa_r+0x912>
 800aa86:	f1c0 0320 	rsb	r3, r0, #32
 800aa8a:	2b04      	cmp	r3, #4
 800aa8c:	dd73      	ble.n	800ab76 <_dtoa_r+0x8fe>
 800aa8e:	9b00      	ldr	r3, [sp, #0]
 800aa90:	f1c0 001c 	rsb	r0, r0, #28
 800aa94:	4403      	add	r3, r0
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	9b06      	ldr	r3, [sp, #24]
 800aa9a:	4403      	add	r3, r0
 800aa9c:	4406      	add	r6, r0
 800aa9e:	9306      	str	r3, [sp, #24]
 800aaa0:	9b00      	ldr	r3, [sp, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	dd05      	ble.n	800aab2 <_dtoa_r+0x83a>
 800aaa6:	9902      	ldr	r1, [sp, #8]
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	4648      	mov	r0, r9
 800aaac:	f000 fcba 	bl	800b424 <__lshift>
 800aab0:	9002      	str	r0, [sp, #8]
 800aab2:	9b06      	ldr	r3, [sp, #24]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	dd05      	ble.n	800aac4 <_dtoa_r+0x84c>
 800aab8:	4621      	mov	r1, r4
 800aaba:	461a      	mov	r2, r3
 800aabc:	4648      	mov	r0, r9
 800aabe:	f000 fcb1 	bl	800b424 <__lshift>
 800aac2:	4604      	mov	r4, r0
 800aac4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d061      	beq.n	800ab8e <_dtoa_r+0x916>
 800aaca:	9802      	ldr	r0, [sp, #8]
 800aacc:	4621      	mov	r1, r4
 800aace:	f000 fd15 	bl	800b4fc <__mcmp>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	da5b      	bge.n	800ab8e <_dtoa_r+0x916>
 800aad6:	2300      	movs	r3, #0
 800aad8:	9902      	ldr	r1, [sp, #8]
 800aada:	220a      	movs	r2, #10
 800aadc:	4648      	mov	r0, r9
 800aade:	f000 fafd 	bl	800b0dc <__multadd>
 800aae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aae4:	9002      	str	r0, [sp, #8]
 800aae6:	f107 38ff 	add.w	r8, r7, #4294967295
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f000 8177 	beq.w	800adde <_dtoa_r+0xb66>
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	220a      	movs	r2, #10
 800aaf6:	4648      	mov	r0, r9
 800aaf8:	f000 faf0 	bl	800b0dc <__multadd>
 800aafc:	f1bb 0f00 	cmp.w	fp, #0
 800ab00:	4605      	mov	r5, r0
 800ab02:	dc6f      	bgt.n	800abe4 <_dtoa_r+0x96c>
 800ab04:	9b07      	ldr	r3, [sp, #28]
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	dc49      	bgt.n	800ab9e <_dtoa_r+0x926>
 800ab0a:	e06b      	b.n	800abe4 <_dtoa_r+0x96c>
 800ab0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ab0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ab12:	e73c      	b.n	800a98e <_dtoa_r+0x716>
 800ab14:	3fe00000 	.word	0x3fe00000
 800ab18:	40240000 	.word	0x40240000
 800ab1c:	9b03      	ldr	r3, [sp, #12]
 800ab1e:	1e5c      	subs	r4, r3, #1
 800ab20:	9b08      	ldr	r3, [sp, #32]
 800ab22:	42a3      	cmp	r3, r4
 800ab24:	db09      	blt.n	800ab3a <_dtoa_r+0x8c2>
 800ab26:	1b1c      	subs	r4, r3, r4
 800ab28:	9b03      	ldr	r3, [sp, #12]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	f6bf af30 	bge.w	800a990 <_dtoa_r+0x718>
 800ab30:	9b00      	ldr	r3, [sp, #0]
 800ab32:	9a03      	ldr	r2, [sp, #12]
 800ab34:	1a9e      	subs	r6, r3, r2
 800ab36:	2300      	movs	r3, #0
 800ab38:	e72b      	b.n	800a992 <_dtoa_r+0x71a>
 800ab3a:	9b08      	ldr	r3, [sp, #32]
 800ab3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab3e:	9408      	str	r4, [sp, #32]
 800ab40:	1ae3      	subs	r3, r4, r3
 800ab42:	441a      	add	r2, r3
 800ab44:	9e00      	ldr	r6, [sp, #0]
 800ab46:	9b03      	ldr	r3, [sp, #12]
 800ab48:	920d      	str	r2, [sp, #52]	@ 0x34
 800ab4a:	2400      	movs	r4, #0
 800ab4c:	e721      	b.n	800a992 <_dtoa_r+0x71a>
 800ab4e:	9c08      	ldr	r4, [sp, #32]
 800ab50:	9e00      	ldr	r6, [sp, #0]
 800ab52:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ab54:	e728      	b.n	800a9a8 <_dtoa_r+0x730>
 800ab56:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ab5a:	e751      	b.n	800aa00 <_dtoa_r+0x788>
 800ab5c:	9a08      	ldr	r2, [sp, #32]
 800ab5e:	9902      	ldr	r1, [sp, #8]
 800ab60:	e750      	b.n	800aa04 <_dtoa_r+0x78c>
 800ab62:	f8cd 8008 	str.w	r8, [sp, #8]
 800ab66:	e751      	b.n	800aa0c <_dtoa_r+0x794>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	e779      	b.n	800aa60 <_dtoa_r+0x7e8>
 800ab6c:	9b04      	ldr	r3, [sp, #16]
 800ab6e:	e777      	b.n	800aa60 <_dtoa_r+0x7e8>
 800ab70:	2300      	movs	r3, #0
 800ab72:	9308      	str	r3, [sp, #32]
 800ab74:	e779      	b.n	800aa6a <_dtoa_r+0x7f2>
 800ab76:	d093      	beq.n	800aaa0 <_dtoa_r+0x828>
 800ab78:	9a00      	ldr	r2, [sp, #0]
 800ab7a:	331c      	adds	r3, #28
 800ab7c:	441a      	add	r2, r3
 800ab7e:	9200      	str	r2, [sp, #0]
 800ab80:	9a06      	ldr	r2, [sp, #24]
 800ab82:	441a      	add	r2, r3
 800ab84:	441e      	add	r6, r3
 800ab86:	9206      	str	r2, [sp, #24]
 800ab88:	e78a      	b.n	800aaa0 <_dtoa_r+0x828>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	e7f4      	b.n	800ab78 <_dtoa_r+0x900>
 800ab8e:	9b03      	ldr	r3, [sp, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	46b8      	mov	r8, r7
 800ab94:	dc20      	bgt.n	800abd8 <_dtoa_r+0x960>
 800ab96:	469b      	mov	fp, r3
 800ab98:	9b07      	ldr	r3, [sp, #28]
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	dd1e      	ble.n	800abdc <_dtoa_r+0x964>
 800ab9e:	f1bb 0f00 	cmp.w	fp, #0
 800aba2:	f47f adb1 	bne.w	800a708 <_dtoa_r+0x490>
 800aba6:	4621      	mov	r1, r4
 800aba8:	465b      	mov	r3, fp
 800abaa:	2205      	movs	r2, #5
 800abac:	4648      	mov	r0, r9
 800abae:	f000 fa95 	bl	800b0dc <__multadd>
 800abb2:	4601      	mov	r1, r0
 800abb4:	4604      	mov	r4, r0
 800abb6:	9802      	ldr	r0, [sp, #8]
 800abb8:	f000 fca0 	bl	800b4fc <__mcmp>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	f77f ada3 	ble.w	800a708 <_dtoa_r+0x490>
 800abc2:	4656      	mov	r6, sl
 800abc4:	2331      	movs	r3, #49	@ 0x31
 800abc6:	f806 3b01 	strb.w	r3, [r6], #1
 800abca:	f108 0801 	add.w	r8, r8, #1
 800abce:	e59f      	b.n	800a710 <_dtoa_r+0x498>
 800abd0:	9c03      	ldr	r4, [sp, #12]
 800abd2:	46b8      	mov	r8, r7
 800abd4:	4625      	mov	r5, r4
 800abd6:	e7f4      	b.n	800abc2 <_dtoa_r+0x94a>
 800abd8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800abdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f000 8101 	beq.w	800ade6 <_dtoa_r+0xb6e>
 800abe4:	2e00      	cmp	r6, #0
 800abe6:	dd05      	ble.n	800abf4 <_dtoa_r+0x97c>
 800abe8:	4629      	mov	r1, r5
 800abea:	4632      	mov	r2, r6
 800abec:	4648      	mov	r0, r9
 800abee:	f000 fc19 	bl	800b424 <__lshift>
 800abf2:	4605      	mov	r5, r0
 800abf4:	9b08      	ldr	r3, [sp, #32]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d05c      	beq.n	800acb4 <_dtoa_r+0xa3c>
 800abfa:	6869      	ldr	r1, [r5, #4]
 800abfc:	4648      	mov	r0, r9
 800abfe:	f000 fa0b 	bl	800b018 <_Balloc>
 800ac02:	4606      	mov	r6, r0
 800ac04:	b928      	cbnz	r0, 800ac12 <_dtoa_r+0x99a>
 800ac06:	4b82      	ldr	r3, [pc, #520]	@ (800ae10 <_dtoa_r+0xb98>)
 800ac08:	4602      	mov	r2, r0
 800ac0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ac0e:	f7ff bb4a 	b.w	800a2a6 <_dtoa_r+0x2e>
 800ac12:	692a      	ldr	r2, [r5, #16]
 800ac14:	3202      	adds	r2, #2
 800ac16:	0092      	lsls	r2, r2, #2
 800ac18:	f105 010c 	add.w	r1, r5, #12
 800ac1c:	300c      	adds	r0, #12
 800ac1e:	f7ff fa92 	bl	800a146 <memcpy>
 800ac22:	2201      	movs	r2, #1
 800ac24:	4631      	mov	r1, r6
 800ac26:	4648      	mov	r0, r9
 800ac28:	f000 fbfc 	bl	800b424 <__lshift>
 800ac2c:	f10a 0301 	add.w	r3, sl, #1
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	eb0a 030b 	add.w	r3, sl, fp
 800ac36:	9308      	str	r3, [sp, #32]
 800ac38:	9b04      	ldr	r3, [sp, #16]
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	462f      	mov	r7, r5
 800ac40:	9306      	str	r3, [sp, #24]
 800ac42:	4605      	mov	r5, r0
 800ac44:	9b00      	ldr	r3, [sp, #0]
 800ac46:	9802      	ldr	r0, [sp, #8]
 800ac48:	4621      	mov	r1, r4
 800ac4a:	f103 3bff 	add.w	fp, r3, #4294967295
 800ac4e:	f7ff fa88 	bl	800a162 <quorem>
 800ac52:	4603      	mov	r3, r0
 800ac54:	3330      	adds	r3, #48	@ 0x30
 800ac56:	9003      	str	r0, [sp, #12]
 800ac58:	4639      	mov	r1, r7
 800ac5a:	9802      	ldr	r0, [sp, #8]
 800ac5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac5e:	f000 fc4d 	bl	800b4fc <__mcmp>
 800ac62:	462a      	mov	r2, r5
 800ac64:	9004      	str	r0, [sp, #16]
 800ac66:	4621      	mov	r1, r4
 800ac68:	4648      	mov	r0, r9
 800ac6a:	f000 fc63 	bl	800b534 <__mdiff>
 800ac6e:	68c2      	ldr	r2, [r0, #12]
 800ac70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac72:	4606      	mov	r6, r0
 800ac74:	bb02      	cbnz	r2, 800acb8 <_dtoa_r+0xa40>
 800ac76:	4601      	mov	r1, r0
 800ac78:	9802      	ldr	r0, [sp, #8]
 800ac7a:	f000 fc3f 	bl	800b4fc <__mcmp>
 800ac7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac80:	4602      	mov	r2, r0
 800ac82:	4631      	mov	r1, r6
 800ac84:	4648      	mov	r0, r9
 800ac86:	920c      	str	r2, [sp, #48]	@ 0x30
 800ac88:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac8a:	f000 fa05 	bl	800b098 <_Bfree>
 800ac8e:	9b07      	ldr	r3, [sp, #28]
 800ac90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ac92:	9e00      	ldr	r6, [sp, #0]
 800ac94:	ea42 0103 	orr.w	r1, r2, r3
 800ac98:	9b06      	ldr	r3, [sp, #24]
 800ac9a:	4319      	orrs	r1, r3
 800ac9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac9e:	d10d      	bne.n	800acbc <_dtoa_r+0xa44>
 800aca0:	2b39      	cmp	r3, #57	@ 0x39
 800aca2:	d027      	beq.n	800acf4 <_dtoa_r+0xa7c>
 800aca4:	9a04      	ldr	r2, [sp, #16]
 800aca6:	2a00      	cmp	r2, #0
 800aca8:	dd01      	ble.n	800acae <_dtoa_r+0xa36>
 800acaa:	9b03      	ldr	r3, [sp, #12]
 800acac:	3331      	adds	r3, #49	@ 0x31
 800acae:	f88b 3000 	strb.w	r3, [fp]
 800acb2:	e52e      	b.n	800a712 <_dtoa_r+0x49a>
 800acb4:	4628      	mov	r0, r5
 800acb6:	e7b9      	b.n	800ac2c <_dtoa_r+0x9b4>
 800acb8:	2201      	movs	r2, #1
 800acba:	e7e2      	b.n	800ac82 <_dtoa_r+0xa0a>
 800acbc:	9904      	ldr	r1, [sp, #16]
 800acbe:	2900      	cmp	r1, #0
 800acc0:	db04      	blt.n	800accc <_dtoa_r+0xa54>
 800acc2:	9807      	ldr	r0, [sp, #28]
 800acc4:	4301      	orrs	r1, r0
 800acc6:	9806      	ldr	r0, [sp, #24]
 800acc8:	4301      	orrs	r1, r0
 800acca:	d120      	bne.n	800ad0e <_dtoa_r+0xa96>
 800accc:	2a00      	cmp	r2, #0
 800acce:	ddee      	ble.n	800acae <_dtoa_r+0xa36>
 800acd0:	9902      	ldr	r1, [sp, #8]
 800acd2:	9300      	str	r3, [sp, #0]
 800acd4:	2201      	movs	r2, #1
 800acd6:	4648      	mov	r0, r9
 800acd8:	f000 fba4 	bl	800b424 <__lshift>
 800acdc:	4621      	mov	r1, r4
 800acde:	9002      	str	r0, [sp, #8]
 800ace0:	f000 fc0c 	bl	800b4fc <__mcmp>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	9b00      	ldr	r3, [sp, #0]
 800ace8:	dc02      	bgt.n	800acf0 <_dtoa_r+0xa78>
 800acea:	d1e0      	bne.n	800acae <_dtoa_r+0xa36>
 800acec:	07da      	lsls	r2, r3, #31
 800acee:	d5de      	bpl.n	800acae <_dtoa_r+0xa36>
 800acf0:	2b39      	cmp	r3, #57	@ 0x39
 800acf2:	d1da      	bne.n	800acaa <_dtoa_r+0xa32>
 800acf4:	2339      	movs	r3, #57	@ 0x39
 800acf6:	f88b 3000 	strb.w	r3, [fp]
 800acfa:	4633      	mov	r3, r6
 800acfc:	461e      	mov	r6, r3
 800acfe:	3b01      	subs	r3, #1
 800ad00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ad04:	2a39      	cmp	r2, #57	@ 0x39
 800ad06:	d04e      	beq.n	800ada6 <_dtoa_r+0xb2e>
 800ad08:	3201      	adds	r2, #1
 800ad0a:	701a      	strb	r2, [r3, #0]
 800ad0c:	e501      	b.n	800a712 <_dtoa_r+0x49a>
 800ad0e:	2a00      	cmp	r2, #0
 800ad10:	dd03      	ble.n	800ad1a <_dtoa_r+0xaa2>
 800ad12:	2b39      	cmp	r3, #57	@ 0x39
 800ad14:	d0ee      	beq.n	800acf4 <_dtoa_r+0xa7c>
 800ad16:	3301      	adds	r3, #1
 800ad18:	e7c9      	b.n	800acae <_dtoa_r+0xa36>
 800ad1a:	9a00      	ldr	r2, [sp, #0]
 800ad1c:	9908      	ldr	r1, [sp, #32]
 800ad1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad22:	428a      	cmp	r2, r1
 800ad24:	d028      	beq.n	800ad78 <_dtoa_r+0xb00>
 800ad26:	9902      	ldr	r1, [sp, #8]
 800ad28:	2300      	movs	r3, #0
 800ad2a:	220a      	movs	r2, #10
 800ad2c:	4648      	mov	r0, r9
 800ad2e:	f000 f9d5 	bl	800b0dc <__multadd>
 800ad32:	42af      	cmp	r7, r5
 800ad34:	9002      	str	r0, [sp, #8]
 800ad36:	f04f 0300 	mov.w	r3, #0
 800ad3a:	f04f 020a 	mov.w	r2, #10
 800ad3e:	4639      	mov	r1, r7
 800ad40:	4648      	mov	r0, r9
 800ad42:	d107      	bne.n	800ad54 <_dtoa_r+0xadc>
 800ad44:	f000 f9ca 	bl	800b0dc <__multadd>
 800ad48:	4607      	mov	r7, r0
 800ad4a:	4605      	mov	r5, r0
 800ad4c:	9b00      	ldr	r3, [sp, #0]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	e777      	b.n	800ac44 <_dtoa_r+0x9cc>
 800ad54:	f000 f9c2 	bl	800b0dc <__multadd>
 800ad58:	4629      	mov	r1, r5
 800ad5a:	4607      	mov	r7, r0
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	220a      	movs	r2, #10
 800ad60:	4648      	mov	r0, r9
 800ad62:	f000 f9bb 	bl	800b0dc <__multadd>
 800ad66:	4605      	mov	r5, r0
 800ad68:	e7f0      	b.n	800ad4c <_dtoa_r+0xad4>
 800ad6a:	f1bb 0f00 	cmp.w	fp, #0
 800ad6e:	bfcc      	ite	gt
 800ad70:	465e      	movgt	r6, fp
 800ad72:	2601      	movle	r6, #1
 800ad74:	4456      	add	r6, sl
 800ad76:	2700      	movs	r7, #0
 800ad78:	9902      	ldr	r1, [sp, #8]
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	4648      	mov	r0, r9
 800ad80:	f000 fb50 	bl	800b424 <__lshift>
 800ad84:	4621      	mov	r1, r4
 800ad86:	9002      	str	r0, [sp, #8]
 800ad88:	f000 fbb8 	bl	800b4fc <__mcmp>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	dcb4      	bgt.n	800acfa <_dtoa_r+0xa82>
 800ad90:	d102      	bne.n	800ad98 <_dtoa_r+0xb20>
 800ad92:	9b00      	ldr	r3, [sp, #0]
 800ad94:	07db      	lsls	r3, r3, #31
 800ad96:	d4b0      	bmi.n	800acfa <_dtoa_r+0xa82>
 800ad98:	4633      	mov	r3, r6
 800ad9a:	461e      	mov	r6, r3
 800ad9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ada0:	2a30      	cmp	r2, #48	@ 0x30
 800ada2:	d0fa      	beq.n	800ad9a <_dtoa_r+0xb22>
 800ada4:	e4b5      	b.n	800a712 <_dtoa_r+0x49a>
 800ada6:	459a      	cmp	sl, r3
 800ada8:	d1a8      	bne.n	800acfc <_dtoa_r+0xa84>
 800adaa:	2331      	movs	r3, #49	@ 0x31
 800adac:	f108 0801 	add.w	r8, r8, #1
 800adb0:	f88a 3000 	strb.w	r3, [sl]
 800adb4:	e4ad      	b.n	800a712 <_dtoa_r+0x49a>
 800adb6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800adb8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ae14 <_dtoa_r+0xb9c>
 800adbc:	b11b      	cbz	r3, 800adc6 <_dtoa_r+0xb4e>
 800adbe:	f10a 0308 	add.w	r3, sl, #8
 800adc2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800adc4:	6013      	str	r3, [r2, #0]
 800adc6:	4650      	mov	r0, sl
 800adc8:	b017      	add	sp, #92	@ 0x5c
 800adca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adce:	9b07      	ldr	r3, [sp, #28]
 800add0:	2b01      	cmp	r3, #1
 800add2:	f77f ae2e 	ble.w	800aa32 <_dtoa_r+0x7ba>
 800add6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800add8:	9308      	str	r3, [sp, #32]
 800adda:	2001      	movs	r0, #1
 800addc:	e64d      	b.n	800aa7a <_dtoa_r+0x802>
 800adde:	f1bb 0f00 	cmp.w	fp, #0
 800ade2:	f77f aed9 	ble.w	800ab98 <_dtoa_r+0x920>
 800ade6:	4656      	mov	r6, sl
 800ade8:	9802      	ldr	r0, [sp, #8]
 800adea:	4621      	mov	r1, r4
 800adec:	f7ff f9b9 	bl	800a162 <quorem>
 800adf0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800adf4:	f806 3b01 	strb.w	r3, [r6], #1
 800adf8:	eba6 020a 	sub.w	r2, r6, sl
 800adfc:	4593      	cmp	fp, r2
 800adfe:	ddb4      	ble.n	800ad6a <_dtoa_r+0xaf2>
 800ae00:	9902      	ldr	r1, [sp, #8]
 800ae02:	2300      	movs	r3, #0
 800ae04:	220a      	movs	r2, #10
 800ae06:	4648      	mov	r0, r9
 800ae08:	f000 f968 	bl	800b0dc <__multadd>
 800ae0c:	9002      	str	r0, [sp, #8]
 800ae0e:	e7eb      	b.n	800ade8 <_dtoa_r+0xb70>
 800ae10:	0800c9bc 	.word	0x0800c9bc
 800ae14:	0800c940 	.word	0x0800c940

0800ae18 <_free_r>:
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	2900      	cmp	r1, #0
 800ae1e:	d041      	beq.n	800aea4 <_free_r+0x8c>
 800ae20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae24:	1f0c      	subs	r4, r1, #4
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	bfb8      	it	lt
 800ae2a:	18e4      	addlt	r4, r4, r3
 800ae2c:	f000 f8e8 	bl	800b000 <__malloc_lock>
 800ae30:	4a1d      	ldr	r2, [pc, #116]	@ (800aea8 <_free_r+0x90>)
 800ae32:	6813      	ldr	r3, [r2, #0]
 800ae34:	b933      	cbnz	r3, 800ae44 <_free_r+0x2c>
 800ae36:	6063      	str	r3, [r4, #4]
 800ae38:	6014      	str	r4, [r2, #0]
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae40:	f000 b8e4 	b.w	800b00c <__malloc_unlock>
 800ae44:	42a3      	cmp	r3, r4
 800ae46:	d908      	bls.n	800ae5a <_free_r+0x42>
 800ae48:	6820      	ldr	r0, [r4, #0]
 800ae4a:	1821      	adds	r1, r4, r0
 800ae4c:	428b      	cmp	r3, r1
 800ae4e:	bf01      	itttt	eq
 800ae50:	6819      	ldreq	r1, [r3, #0]
 800ae52:	685b      	ldreq	r3, [r3, #4]
 800ae54:	1809      	addeq	r1, r1, r0
 800ae56:	6021      	streq	r1, [r4, #0]
 800ae58:	e7ed      	b.n	800ae36 <_free_r+0x1e>
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	b10b      	cbz	r3, 800ae64 <_free_r+0x4c>
 800ae60:	42a3      	cmp	r3, r4
 800ae62:	d9fa      	bls.n	800ae5a <_free_r+0x42>
 800ae64:	6811      	ldr	r1, [r2, #0]
 800ae66:	1850      	adds	r0, r2, r1
 800ae68:	42a0      	cmp	r0, r4
 800ae6a:	d10b      	bne.n	800ae84 <_free_r+0x6c>
 800ae6c:	6820      	ldr	r0, [r4, #0]
 800ae6e:	4401      	add	r1, r0
 800ae70:	1850      	adds	r0, r2, r1
 800ae72:	4283      	cmp	r3, r0
 800ae74:	6011      	str	r1, [r2, #0]
 800ae76:	d1e0      	bne.n	800ae3a <_free_r+0x22>
 800ae78:	6818      	ldr	r0, [r3, #0]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	6053      	str	r3, [r2, #4]
 800ae7e:	4408      	add	r0, r1
 800ae80:	6010      	str	r0, [r2, #0]
 800ae82:	e7da      	b.n	800ae3a <_free_r+0x22>
 800ae84:	d902      	bls.n	800ae8c <_free_r+0x74>
 800ae86:	230c      	movs	r3, #12
 800ae88:	602b      	str	r3, [r5, #0]
 800ae8a:	e7d6      	b.n	800ae3a <_free_r+0x22>
 800ae8c:	6820      	ldr	r0, [r4, #0]
 800ae8e:	1821      	adds	r1, r4, r0
 800ae90:	428b      	cmp	r3, r1
 800ae92:	bf04      	itt	eq
 800ae94:	6819      	ldreq	r1, [r3, #0]
 800ae96:	685b      	ldreq	r3, [r3, #4]
 800ae98:	6063      	str	r3, [r4, #4]
 800ae9a:	bf04      	itt	eq
 800ae9c:	1809      	addeq	r1, r1, r0
 800ae9e:	6021      	streq	r1, [r4, #0]
 800aea0:	6054      	str	r4, [r2, #4]
 800aea2:	e7ca      	b.n	800ae3a <_free_r+0x22>
 800aea4:	bd38      	pop	{r3, r4, r5, pc}
 800aea6:	bf00      	nop
 800aea8:	20000c74 	.word	0x20000c74

0800aeac <malloc>:
 800aeac:	4b02      	ldr	r3, [pc, #8]	@ (800aeb8 <malloc+0xc>)
 800aeae:	4601      	mov	r1, r0
 800aeb0:	6818      	ldr	r0, [r3, #0]
 800aeb2:	f000 b825 	b.w	800af00 <_malloc_r>
 800aeb6:	bf00      	nop
 800aeb8:	20000030 	.word	0x20000030

0800aebc <sbrk_aligned>:
 800aebc:	b570      	push	{r4, r5, r6, lr}
 800aebe:	4e0f      	ldr	r6, [pc, #60]	@ (800aefc <sbrk_aligned+0x40>)
 800aec0:	460c      	mov	r4, r1
 800aec2:	6831      	ldr	r1, [r6, #0]
 800aec4:	4605      	mov	r5, r0
 800aec6:	b911      	cbnz	r1, 800aece <sbrk_aligned+0x12>
 800aec8:	f000 fe3e 	bl	800bb48 <_sbrk_r>
 800aecc:	6030      	str	r0, [r6, #0]
 800aece:	4621      	mov	r1, r4
 800aed0:	4628      	mov	r0, r5
 800aed2:	f000 fe39 	bl	800bb48 <_sbrk_r>
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	d103      	bne.n	800aee2 <sbrk_aligned+0x26>
 800aeda:	f04f 34ff 	mov.w	r4, #4294967295
 800aede:	4620      	mov	r0, r4
 800aee0:	bd70      	pop	{r4, r5, r6, pc}
 800aee2:	1cc4      	adds	r4, r0, #3
 800aee4:	f024 0403 	bic.w	r4, r4, #3
 800aee8:	42a0      	cmp	r0, r4
 800aeea:	d0f8      	beq.n	800aede <sbrk_aligned+0x22>
 800aeec:	1a21      	subs	r1, r4, r0
 800aeee:	4628      	mov	r0, r5
 800aef0:	f000 fe2a 	bl	800bb48 <_sbrk_r>
 800aef4:	3001      	adds	r0, #1
 800aef6:	d1f2      	bne.n	800aede <sbrk_aligned+0x22>
 800aef8:	e7ef      	b.n	800aeda <sbrk_aligned+0x1e>
 800aefa:	bf00      	nop
 800aefc:	20000c70 	.word	0x20000c70

0800af00 <_malloc_r>:
 800af00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af04:	1ccd      	adds	r5, r1, #3
 800af06:	f025 0503 	bic.w	r5, r5, #3
 800af0a:	3508      	adds	r5, #8
 800af0c:	2d0c      	cmp	r5, #12
 800af0e:	bf38      	it	cc
 800af10:	250c      	movcc	r5, #12
 800af12:	2d00      	cmp	r5, #0
 800af14:	4606      	mov	r6, r0
 800af16:	db01      	blt.n	800af1c <_malloc_r+0x1c>
 800af18:	42a9      	cmp	r1, r5
 800af1a:	d904      	bls.n	800af26 <_malloc_r+0x26>
 800af1c:	230c      	movs	r3, #12
 800af1e:	6033      	str	r3, [r6, #0]
 800af20:	2000      	movs	r0, #0
 800af22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800affc <_malloc_r+0xfc>
 800af2a:	f000 f869 	bl	800b000 <__malloc_lock>
 800af2e:	f8d8 3000 	ldr.w	r3, [r8]
 800af32:	461c      	mov	r4, r3
 800af34:	bb44      	cbnz	r4, 800af88 <_malloc_r+0x88>
 800af36:	4629      	mov	r1, r5
 800af38:	4630      	mov	r0, r6
 800af3a:	f7ff ffbf 	bl	800aebc <sbrk_aligned>
 800af3e:	1c43      	adds	r3, r0, #1
 800af40:	4604      	mov	r4, r0
 800af42:	d158      	bne.n	800aff6 <_malloc_r+0xf6>
 800af44:	f8d8 4000 	ldr.w	r4, [r8]
 800af48:	4627      	mov	r7, r4
 800af4a:	2f00      	cmp	r7, #0
 800af4c:	d143      	bne.n	800afd6 <_malloc_r+0xd6>
 800af4e:	2c00      	cmp	r4, #0
 800af50:	d04b      	beq.n	800afea <_malloc_r+0xea>
 800af52:	6823      	ldr	r3, [r4, #0]
 800af54:	4639      	mov	r1, r7
 800af56:	4630      	mov	r0, r6
 800af58:	eb04 0903 	add.w	r9, r4, r3
 800af5c:	f000 fdf4 	bl	800bb48 <_sbrk_r>
 800af60:	4581      	cmp	r9, r0
 800af62:	d142      	bne.n	800afea <_malloc_r+0xea>
 800af64:	6821      	ldr	r1, [r4, #0]
 800af66:	1a6d      	subs	r5, r5, r1
 800af68:	4629      	mov	r1, r5
 800af6a:	4630      	mov	r0, r6
 800af6c:	f7ff ffa6 	bl	800aebc <sbrk_aligned>
 800af70:	3001      	adds	r0, #1
 800af72:	d03a      	beq.n	800afea <_malloc_r+0xea>
 800af74:	6823      	ldr	r3, [r4, #0]
 800af76:	442b      	add	r3, r5
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	f8d8 3000 	ldr.w	r3, [r8]
 800af7e:	685a      	ldr	r2, [r3, #4]
 800af80:	bb62      	cbnz	r2, 800afdc <_malloc_r+0xdc>
 800af82:	f8c8 7000 	str.w	r7, [r8]
 800af86:	e00f      	b.n	800afa8 <_malloc_r+0xa8>
 800af88:	6822      	ldr	r2, [r4, #0]
 800af8a:	1b52      	subs	r2, r2, r5
 800af8c:	d420      	bmi.n	800afd0 <_malloc_r+0xd0>
 800af8e:	2a0b      	cmp	r2, #11
 800af90:	d917      	bls.n	800afc2 <_malloc_r+0xc2>
 800af92:	1961      	adds	r1, r4, r5
 800af94:	42a3      	cmp	r3, r4
 800af96:	6025      	str	r5, [r4, #0]
 800af98:	bf18      	it	ne
 800af9a:	6059      	strne	r1, [r3, #4]
 800af9c:	6863      	ldr	r3, [r4, #4]
 800af9e:	bf08      	it	eq
 800afa0:	f8c8 1000 	streq.w	r1, [r8]
 800afa4:	5162      	str	r2, [r4, r5]
 800afa6:	604b      	str	r3, [r1, #4]
 800afa8:	4630      	mov	r0, r6
 800afaa:	f000 f82f 	bl	800b00c <__malloc_unlock>
 800afae:	f104 000b 	add.w	r0, r4, #11
 800afb2:	1d23      	adds	r3, r4, #4
 800afb4:	f020 0007 	bic.w	r0, r0, #7
 800afb8:	1ac2      	subs	r2, r0, r3
 800afba:	bf1c      	itt	ne
 800afbc:	1a1b      	subne	r3, r3, r0
 800afbe:	50a3      	strne	r3, [r4, r2]
 800afc0:	e7af      	b.n	800af22 <_malloc_r+0x22>
 800afc2:	6862      	ldr	r2, [r4, #4]
 800afc4:	42a3      	cmp	r3, r4
 800afc6:	bf0c      	ite	eq
 800afc8:	f8c8 2000 	streq.w	r2, [r8]
 800afcc:	605a      	strne	r2, [r3, #4]
 800afce:	e7eb      	b.n	800afa8 <_malloc_r+0xa8>
 800afd0:	4623      	mov	r3, r4
 800afd2:	6864      	ldr	r4, [r4, #4]
 800afd4:	e7ae      	b.n	800af34 <_malloc_r+0x34>
 800afd6:	463c      	mov	r4, r7
 800afd8:	687f      	ldr	r7, [r7, #4]
 800afda:	e7b6      	b.n	800af4a <_malloc_r+0x4a>
 800afdc:	461a      	mov	r2, r3
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	42a3      	cmp	r3, r4
 800afe2:	d1fb      	bne.n	800afdc <_malloc_r+0xdc>
 800afe4:	2300      	movs	r3, #0
 800afe6:	6053      	str	r3, [r2, #4]
 800afe8:	e7de      	b.n	800afa8 <_malloc_r+0xa8>
 800afea:	230c      	movs	r3, #12
 800afec:	6033      	str	r3, [r6, #0]
 800afee:	4630      	mov	r0, r6
 800aff0:	f000 f80c 	bl	800b00c <__malloc_unlock>
 800aff4:	e794      	b.n	800af20 <_malloc_r+0x20>
 800aff6:	6005      	str	r5, [r0, #0]
 800aff8:	e7d6      	b.n	800afa8 <_malloc_r+0xa8>
 800affa:	bf00      	nop
 800affc:	20000c74 	.word	0x20000c74

0800b000 <__malloc_lock>:
 800b000:	4801      	ldr	r0, [pc, #4]	@ (800b008 <__malloc_lock+0x8>)
 800b002:	f7ff b89e 	b.w	800a142 <__retarget_lock_acquire_recursive>
 800b006:	bf00      	nop
 800b008:	20000c6c 	.word	0x20000c6c

0800b00c <__malloc_unlock>:
 800b00c:	4801      	ldr	r0, [pc, #4]	@ (800b014 <__malloc_unlock+0x8>)
 800b00e:	f7ff b899 	b.w	800a144 <__retarget_lock_release_recursive>
 800b012:	bf00      	nop
 800b014:	20000c6c 	.word	0x20000c6c

0800b018 <_Balloc>:
 800b018:	b570      	push	{r4, r5, r6, lr}
 800b01a:	69c6      	ldr	r6, [r0, #28]
 800b01c:	4604      	mov	r4, r0
 800b01e:	460d      	mov	r5, r1
 800b020:	b976      	cbnz	r6, 800b040 <_Balloc+0x28>
 800b022:	2010      	movs	r0, #16
 800b024:	f7ff ff42 	bl	800aeac <malloc>
 800b028:	4602      	mov	r2, r0
 800b02a:	61e0      	str	r0, [r4, #28]
 800b02c:	b920      	cbnz	r0, 800b038 <_Balloc+0x20>
 800b02e:	4b18      	ldr	r3, [pc, #96]	@ (800b090 <_Balloc+0x78>)
 800b030:	4818      	ldr	r0, [pc, #96]	@ (800b094 <_Balloc+0x7c>)
 800b032:	216b      	movs	r1, #107	@ 0x6b
 800b034:	f000 fd98 	bl	800bb68 <__assert_func>
 800b038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b03c:	6006      	str	r6, [r0, #0]
 800b03e:	60c6      	str	r6, [r0, #12]
 800b040:	69e6      	ldr	r6, [r4, #28]
 800b042:	68f3      	ldr	r3, [r6, #12]
 800b044:	b183      	cbz	r3, 800b068 <_Balloc+0x50>
 800b046:	69e3      	ldr	r3, [r4, #28]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b04e:	b9b8      	cbnz	r0, 800b080 <_Balloc+0x68>
 800b050:	2101      	movs	r1, #1
 800b052:	fa01 f605 	lsl.w	r6, r1, r5
 800b056:	1d72      	adds	r2, r6, #5
 800b058:	0092      	lsls	r2, r2, #2
 800b05a:	4620      	mov	r0, r4
 800b05c:	f000 fda2 	bl	800bba4 <_calloc_r>
 800b060:	b160      	cbz	r0, 800b07c <_Balloc+0x64>
 800b062:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b066:	e00e      	b.n	800b086 <_Balloc+0x6e>
 800b068:	2221      	movs	r2, #33	@ 0x21
 800b06a:	2104      	movs	r1, #4
 800b06c:	4620      	mov	r0, r4
 800b06e:	f000 fd99 	bl	800bba4 <_calloc_r>
 800b072:	69e3      	ldr	r3, [r4, #28]
 800b074:	60f0      	str	r0, [r6, #12]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1e4      	bne.n	800b046 <_Balloc+0x2e>
 800b07c:	2000      	movs	r0, #0
 800b07e:	bd70      	pop	{r4, r5, r6, pc}
 800b080:	6802      	ldr	r2, [r0, #0]
 800b082:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b086:	2300      	movs	r3, #0
 800b088:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b08c:	e7f7      	b.n	800b07e <_Balloc+0x66>
 800b08e:	bf00      	nop
 800b090:	0800c94d 	.word	0x0800c94d
 800b094:	0800c9cd 	.word	0x0800c9cd

0800b098 <_Bfree>:
 800b098:	b570      	push	{r4, r5, r6, lr}
 800b09a:	69c6      	ldr	r6, [r0, #28]
 800b09c:	4605      	mov	r5, r0
 800b09e:	460c      	mov	r4, r1
 800b0a0:	b976      	cbnz	r6, 800b0c0 <_Bfree+0x28>
 800b0a2:	2010      	movs	r0, #16
 800b0a4:	f7ff ff02 	bl	800aeac <malloc>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	61e8      	str	r0, [r5, #28]
 800b0ac:	b920      	cbnz	r0, 800b0b8 <_Bfree+0x20>
 800b0ae:	4b09      	ldr	r3, [pc, #36]	@ (800b0d4 <_Bfree+0x3c>)
 800b0b0:	4809      	ldr	r0, [pc, #36]	@ (800b0d8 <_Bfree+0x40>)
 800b0b2:	218f      	movs	r1, #143	@ 0x8f
 800b0b4:	f000 fd58 	bl	800bb68 <__assert_func>
 800b0b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0bc:	6006      	str	r6, [r0, #0]
 800b0be:	60c6      	str	r6, [r0, #12]
 800b0c0:	b13c      	cbz	r4, 800b0d2 <_Bfree+0x3a>
 800b0c2:	69eb      	ldr	r3, [r5, #28]
 800b0c4:	6862      	ldr	r2, [r4, #4]
 800b0c6:	68db      	ldr	r3, [r3, #12]
 800b0c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0cc:	6021      	str	r1, [r4, #0]
 800b0ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0d2:	bd70      	pop	{r4, r5, r6, pc}
 800b0d4:	0800c94d 	.word	0x0800c94d
 800b0d8:	0800c9cd 	.word	0x0800c9cd

0800b0dc <__multadd>:
 800b0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e0:	690d      	ldr	r5, [r1, #16]
 800b0e2:	4607      	mov	r7, r0
 800b0e4:	460c      	mov	r4, r1
 800b0e6:	461e      	mov	r6, r3
 800b0e8:	f101 0c14 	add.w	ip, r1, #20
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	f8dc 3000 	ldr.w	r3, [ip]
 800b0f2:	b299      	uxth	r1, r3
 800b0f4:	fb02 6101 	mla	r1, r2, r1, r6
 800b0f8:	0c1e      	lsrs	r6, r3, #16
 800b0fa:	0c0b      	lsrs	r3, r1, #16
 800b0fc:	fb02 3306 	mla	r3, r2, r6, r3
 800b100:	b289      	uxth	r1, r1
 800b102:	3001      	adds	r0, #1
 800b104:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b108:	4285      	cmp	r5, r0
 800b10a:	f84c 1b04 	str.w	r1, [ip], #4
 800b10e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b112:	dcec      	bgt.n	800b0ee <__multadd+0x12>
 800b114:	b30e      	cbz	r6, 800b15a <__multadd+0x7e>
 800b116:	68a3      	ldr	r3, [r4, #8]
 800b118:	42ab      	cmp	r3, r5
 800b11a:	dc19      	bgt.n	800b150 <__multadd+0x74>
 800b11c:	6861      	ldr	r1, [r4, #4]
 800b11e:	4638      	mov	r0, r7
 800b120:	3101      	adds	r1, #1
 800b122:	f7ff ff79 	bl	800b018 <_Balloc>
 800b126:	4680      	mov	r8, r0
 800b128:	b928      	cbnz	r0, 800b136 <__multadd+0x5a>
 800b12a:	4602      	mov	r2, r0
 800b12c:	4b0c      	ldr	r3, [pc, #48]	@ (800b160 <__multadd+0x84>)
 800b12e:	480d      	ldr	r0, [pc, #52]	@ (800b164 <__multadd+0x88>)
 800b130:	21ba      	movs	r1, #186	@ 0xba
 800b132:	f000 fd19 	bl	800bb68 <__assert_func>
 800b136:	6922      	ldr	r2, [r4, #16]
 800b138:	3202      	adds	r2, #2
 800b13a:	f104 010c 	add.w	r1, r4, #12
 800b13e:	0092      	lsls	r2, r2, #2
 800b140:	300c      	adds	r0, #12
 800b142:	f7ff f800 	bl	800a146 <memcpy>
 800b146:	4621      	mov	r1, r4
 800b148:	4638      	mov	r0, r7
 800b14a:	f7ff ffa5 	bl	800b098 <_Bfree>
 800b14e:	4644      	mov	r4, r8
 800b150:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b154:	3501      	adds	r5, #1
 800b156:	615e      	str	r6, [r3, #20]
 800b158:	6125      	str	r5, [r4, #16]
 800b15a:	4620      	mov	r0, r4
 800b15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b160:	0800c9bc 	.word	0x0800c9bc
 800b164:	0800c9cd 	.word	0x0800c9cd

0800b168 <__hi0bits>:
 800b168:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b16c:	4603      	mov	r3, r0
 800b16e:	bf36      	itet	cc
 800b170:	0403      	lslcc	r3, r0, #16
 800b172:	2000      	movcs	r0, #0
 800b174:	2010      	movcc	r0, #16
 800b176:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b17a:	bf3c      	itt	cc
 800b17c:	021b      	lslcc	r3, r3, #8
 800b17e:	3008      	addcc	r0, #8
 800b180:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b184:	bf3c      	itt	cc
 800b186:	011b      	lslcc	r3, r3, #4
 800b188:	3004      	addcc	r0, #4
 800b18a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b18e:	bf3c      	itt	cc
 800b190:	009b      	lslcc	r3, r3, #2
 800b192:	3002      	addcc	r0, #2
 800b194:	2b00      	cmp	r3, #0
 800b196:	db05      	blt.n	800b1a4 <__hi0bits+0x3c>
 800b198:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b19c:	f100 0001 	add.w	r0, r0, #1
 800b1a0:	bf08      	it	eq
 800b1a2:	2020      	moveq	r0, #32
 800b1a4:	4770      	bx	lr

0800b1a6 <__lo0bits>:
 800b1a6:	6803      	ldr	r3, [r0, #0]
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	f013 0007 	ands.w	r0, r3, #7
 800b1ae:	d00b      	beq.n	800b1c8 <__lo0bits+0x22>
 800b1b0:	07d9      	lsls	r1, r3, #31
 800b1b2:	d421      	bmi.n	800b1f8 <__lo0bits+0x52>
 800b1b4:	0798      	lsls	r0, r3, #30
 800b1b6:	bf49      	itett	mi
 800b1b8:	085b      	lsrmi	r3, r3, #1
 800b1ba:	089b      	lsrpl	r3, r3, #2
 800b1bc:	2001      	movmi	r0, #1
 800b1be:	6013      	strmi	r3, [r2, #0]
 800b1c0:	bf5c      	itt	pl
 800b1c2:	6013      	strpl	r3, [r2, #0]
 800b1c4:	2002      	movpl	r0, #2
 800b1c6:	4770      	bx	lr
 800b1c8:	b299      	uxth	r1, r3
 800b1ca:	b909      	cbnz	r1, 800b1d0 <__lo0bits+0x2a>
 800b1cc:	0c1b      	lsrs	r3, r3, #16
 800b1ce:	2010      	movs	r0, #16
 800b1d0:	b2d9      	uxtb	r1, r3
 800b1d2:	b909      	cbnz	r1, 800b1d8 <__lo0bits+0x32>
 800b1d4:	3008      	adds	r0, #8
 800b1d6:	0a1b      	lsrs	r3, r3, #8
 800b1d8:	0719      	lsls	r1, r3, #28
 800b1da:	bf04      	itt	eq
 800b1dc:	091b      	lsreq	r3, r3, #4
 800b1de:	3004      	addeq	r0, #4
 800b1e0:	0799      	lsls	r1, r3, #30
 800b1e2:	bf04      	itt	eq
 800b1e4:	089b      	lsreq	r3, r3, #2
 800b1e6:	3002      	addeq	r0, #2
 800b1e8:	07d9      	lsls	r1, r3, #31
 800b1ea:	d403      	bmi.n	800b1f4 <__lo0bits+0x4e>
 800b1ec:	085b      	lsrs	r3, r3, #1
 800b1ee:	f100 0001 	add.w	r0, r0, #1
 800b1f2:	d003      	beq.n	800b1fc <__lo0bits+0x56>
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	4770      	bx	lr
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	4770      	bx	lr
 800b1fc:	2020      	movs	r0, #32
 800b1fe:	4770      	bx	lr

0800b200 <__i2b>:
 800b200:	b510      	push	{r4, lr}
 800b202:	460c      	mov	r4, r1
 800b204:	2101      	movs	r1, #1
 800b206:	f7ff ff07 	bl	800b018 <_Balloc>
 800b20a:	4602      	mov	r2, r0
 800b20c:	b928      	cbnz	r0, 800b21a <__i2b+0x1a>
 800b20e:	4b05      	ldr	r3, [pc, #20]	@ (800b224 <__i2b+0x24>)
 800b210:	4805      	ldr	r0, [pc, #20]	@ (800b228 <__i2b+0x28>)
 800b212:	f240 1145 	movw	r1, #325	@ 0x145
 800b216:	f000 fca7 	bl	800bb68 <__assert_func>
 800b21a:	2301      	movs	r3, #1
 800b21c:	6144      	str	r4, [r0, #20]
 800b21e:	6103      	str	r3, [r0, #16]
 800b220:	bd10      	pop	{r4, pc}
 800b222:	bf00      	nop
 800b224:	0800c9bc 	.word	0x0800c9bc
 800b228:	0800c9cd 	.word	0x0800c9cd

0800b22c <__multiply>:
 800b22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b230:	4617      	mov	r7, r2
 800b232:	690a      	ldr	r2, [r1, #16]
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	429a      	cmp	r2, r3
 800b238:	bfa8      	it	ge
 800b23a:	463b      	movge	r3, r7
 800b23c:	4689      	mov	r9, r1
 800b23e:	bfa4      	itt	ge
 800b240:	460f      	movge	r7, r1
 800b242:	4699      	movge	r9, r3
 800b244:	693d      	ldr	r5, [r7, #16]
 800b246:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	6879      	ldr	r1, [r7, #4]
 800b24e:	eb05 060a 	add.w	r6, r5, sl
 800b252:	42b3      	cmp	r3, r6
 800b254:	b085      	sub	sp, #20
 800b256:	bfb8      	it	lt
 800b258:	3101      	addlt	r1, #1
 800b25a:	f7ff fedd 	bl	800b018 <_Balloc>
 800b25e:	b930      	cbnz	r0, 800b26e <__multiply+0x42>
 800b260:	4602      	mov	r2, r0
 800b262:	4b41      	ldr	r3, [pc, #260]	@ (800b368 <__multiply+0x13c>)
 800b264:	4841      	ldr	r0, [pc, #260]	@ (800b36c <__multiply+0x140>)
 800b266:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b26a:	f000 fc7d 	bl	800bb68 <__assert_func>
 800b26e:	f100 0414 	add.w	r4, r0, #20
 800b272:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b276:	4623      	mov	r3, r4
 800b278:	2200      	movs	r2, #0
 800b27a:	4573      	cmp	r3, lr
 800b27c:	d320      	bcc.n	800b2c0 <__multiply+0x94>
 800b27e:	f107 0814 	add.w	r8, r7, #20
 800b282:	f109 0114 	add.w	r1, r9, #20
 800b286:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b28a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b28e:	9302      	str	r3, [sp, #8]
 800b290:	1beb      	subs	r3, r5, r7
 800b292:	3b15      	subs	r3, #21
 800b294:	f023 0303 	bic.w	r3, r3, #3
 800b298:	3304      	adds	r3, #4
 800b29a:	3715      	adds	r7, #21
 800b29c:	42bd      	cmp	r5, r7
 800b29e:	bf38      	it	cc
 800b2a0:	2304      	movcc	r3, #4
 800b2a2:	9301      	str	r3, [sp, #4]
 800b2a4:	9b02      	ldr	r3, [sp, #8]
 800b2a6:	9103      	str	r1, [sp, #12]
 800b2a8:	428b      	cmp	r3, r1
 800b2aa:	d80c      	bhi.n	800b2c6 <__multiply+0x9a>
 800b2ac:	2e00      	cmp	r6, #0
 800b2ae:	dd03      	ble.n	800b2b8 <__multiply+0x8c>
 800b2b0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d055      	beq.n	800b364 <__multiply+0x138>
 800b2b8:	6106      	str	r6, [r0, #16]
 800b2ba:	b005      	add	sp, #20
 800b2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c0:	f843 2b04 	str.w	r2, [r3], #4
 800b2c4:	e7d9      	b.n	800b27a <__multiply+0x4e>
 800b2c6:	f8b1 a000 	ldrh.w	sl, [r1]
 800b2ca:	f1ba 0f00 	cmp.w	sl, #0
 800b2ce:	d01f      	beq.n	800b310 <__multiply+0xe4>
 800b2d0:	46c4      	mov	ip, r8
 800b2d2:	46a1      	mov	r9, r4
 800b2d4:	2700      	movs	r7, #0
 800b2d6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b2da:	f8d9 3000 	ldr.w	r3, [r9]
 800b2de:	fa1f fb82 	uxth.w	fp, r2
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	fb0a 330b 	mla	r3, sl, fp, r3
 800b2e8:	443b      	add	r3, r7
 800b2ea:	f8d9 7000 	ldr.w	r7, [r9]
 800b2ee:	0c12      	lsrs	r2, r2, #16
 800b2f0:	0c3f      	lsrs	r7, r7, #16
 800b2f2:	fb0a 7202 	mla	r2, sl, r2, r7
 800b2f6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b300:	4565      	cmp	r5, ip
 800b302:	f849 3b04 	str.w	r3, [r9], #4
 800b306:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b30a:	d8e4      	bhi.n	800b2d6 <__multiply+0xaa>
 800b30c:	9b01      	ldr	r3, [sp, #4]
 800b30e:	50e7      	str	r7, [r4, r3]
 800b310:	9b03      	ldr	r3, [sp, #12]
 800b312:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b316:	3104      	adds	r1, #4
 800b318:	f1b9 0f00 	cmp.w	r9, #0
 800b31c:	d020      	beq.n	800b360 <__multiply+0x134>
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	4647      	mov	r7, r8
 800b322:	46a4      	mov	ip, r4
 800b324:	f04f 0a00 	mov.w	sl, #0
 800b328:	f8b7 b000 	ldrh.w	fp, [r7]
 800b32c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b330:	fb09 220b 	mla	r2, r9, fp, r2
 800b334:	4452      	add	r2, sl
 800b336:	b29b      	uxth	r3, r3
 800b338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b33c:	f84c 3b04 	str.w	r3, [ip], #4
 800b340:	f857 3b04 	ldr.w	r3, [r7], #4
 800b344:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b348:	f8bc 3000 	ldrh.w	r3, [ip]
 800b34c:	fb09 330a 	mla	r3, r9, sl, r3
 800b350:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b354:	42bd      	cmp	r5, r7
 800b356:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b35a:	d8e5      	bhi.n	800b328 <__multiply+0xfc>
 800b35c:	9a01      	ldr	r2, [sp, #4]
 800b35e:	50a3      	str	r3, [r4, r2]
 800b360:	3404      	adds	r4, #4
 800b362:	e79f      	b.n	800b2a4 <__multiply+0x78>
 800b364:	3e01      	subs	r6, #1
 800b366:	e7a1      	b.n	800b2ac <__multiply+0x80>
 800b368:	0800c9bc 	.word	0x0800c9bc
 800b36c:	0800c9cd 	.word	0x0800c9cd

0800b370 <__pow5mult>:
 800b370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b374:	4615      	mov	r5, r2
 800b376:	f012 0203 	ands.w	r2, r2, #3
 800b37a:	4607      	mov	r7, r0
 800b37c:	460e      	mov	r6, r1
 800b37e:	d007      	beq.n	800b390 <__pow5mult+0x20>
 800b380:	4c25      	ldr	r4, [pc, #148]	@ (800b418 <__pow5mult+0xa8>)
 800b382:	3a01      	subs	r2, #1
 800b384:	2300      	movs	r3, #0
 800b386:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b38a:	f7ff fea7 	bl	800b0dc <__multadd>
 800b38e:	4606      	mov	r6, r0
 800b390:	10ad      	asrs	r5, r5, #2
 800b392:	d03d      	beq.n	800b410 <__pow5mult+0xa0>
 800b394:	69fc      	ldr	r4, [r7, #28]
 800b396:	b97c      	cbnz	r4, 800b3b8 <__pow5mult+0x48>
 800b398:	2010      	movs	r0, #16
 800b39a:	f7ff fd87 	bl	800aeac <malloc>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	61f8      	str	r0, [r7, #28]
 800b3a2:	b928      	cbnz	r0, 800b3b0 <__pow5mult+0x40>
 800b3a4:	4b1d      	ldr	r3, [pc, #116]	@ (800b41c <__pow5mult+0xac>)
 800b3a6:	481e      	ldr	r0, [pc, #120]	@ (800b420 <__pow5mult+0xb0>)
 800b3a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b3ac:	f000 fbdc 	bl	800bb68 <__assert_func>
 800b3b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3b4:	6004      	str	r4, [r0, #0]
 800b3b6:	60c4      	str	r4, [r0, #12]
 800b3b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b3bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3c0:	b94c      	cbnz	r4, 800b3d6 <__pow5mult+0x66>
 800b3c2:	f240 2171 	movw	r1, #625	@ 0x271
 800b3c6:	4638      	mov	r0, r7
 800b3c8:	f7ff ff1a 	bl	800b200 <__i2b>
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	6003      	str	r3, [r0, #0]
 800b3d6:	f04f 0900 	mov.w	r9, #0
 800b3da:	07eb      	lsls	r3, r5, #31
 800b3dc:	d50a      	bpl.n	800b3f4 <__pow5mult+0x84>
 800b3de:	4631      	mov	r1, r6
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	4638      	mov	r0, r7
 800b3e4:	f7ff ff22 	bl	800b22c <__multiply>
 800b3e8:	4631      	mov	r1, r6
 800b3ea:	4680      	mov	r8, r0
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	f7ff fe53 	bl	800b098 <_Bfree>
 800b3f2:	4646      	mov	r6, r8
 800b3f4:	106d      	asrs	r5, r5, #1
 800b3f6:	d00b      	beq.n	800b410 <__pow5mult+0xa0>
 800b3f8:	6820      	ldr	r0, [r4, #0]
 800b3fa:	b938      	cbnz	r0, 800b40c <__pow5mult+0x9c>
 800b3fc:	4622      	mov	r2, r4
 800b3fe:	4621      	mov	r1, r4
 800b400:	4638      	mov	r0, r7
 800b402:	f7ff ff13 	bl	800b22c <__multiply>
 800b406:	6020      	str	r0, [r4, #0]
 800b408:	f8c0 9000 	str.w	r9, [r0]
 800b40c:	4604      	mov	r4, r0
 800b40e:	e7e4      	b.n	800b3da <__pow5mult+0x6a>
 800b410:	4630      	mov	r0, r6
 800b412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b416:	bf00      	nop
 800b418:	0800ca80 	.word	0x0800ca80
 800b41c:	0800c94d 	.word	0x0800c94d
 800b420:	0800c9cd 	.word	0x0800c9cd

0800b424 <__lshift>:
 800b424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b428:	460c      	mov	r4, r1
 800b42a:	6849      	ldr	r1, [r1, #4]
 800b42c:	6923      	ldr	r3, [r4, #16]
 800b42e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b432:	68a3      	ldr	r3, [r4, #8]
 800b434:	4607      	mov	r7, r0
 800b436:	4691      	mov	r9, r2
 800b438:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b43c:	f108 0601 	add.w	r6, r8, #1
 800b440:	42b3      	cmp	r3, r6
 800b442:	db0b      	blt.n	800b45c <__lshift+0x38>
 800b444:	4638      	mov	r0, r7
 800b446:	f7ff fde7 	bl	800b018 <_Balloc>
 800b44a:	4605      	mov	r5, r0
 800b44c:	b948      	cbnz	r0, 800b462 <__lshift+0x3e>
 800b44e:	4602      	mov	r2, r0
 800b450:	4b28      	ldr	r3, [pc, #160]	@ (800b4f4 <__lshift+0xd0>)
 800b452:	4829      	ldr	r0, [pc, #164]	@ (800b4f8 <__lshift+0xd4>)
 800b454:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b458:	f000 fb86 	bl	800bb68 <__assert_func>
 800b45c:	3101      	adds	r1, #1
 800b45e:	005b      	lsls	r3, r3, #1
 800b460:	e7ee      	b.n	800b440 <__lshift+0x1c>
 800b462:	2300      	movs	r3, #0
 800b464:	f100 0114 	add.w	r1, r0, #20
 800b468:	f100 0210 	add.w	r2, r0, #16
 800b46c:	4618      	mov	r0, r3
 800b46e:	4553      	cmp	r3, sl
 800b470:	db33      	blt.n	800b4da <__lshift+0xb6>
 800b472:	6920      	ldr	r0, [r4, #16]
 800b474:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b478:	f104 0314 	add.w	r3, r4, #20
 800b47c:	f019 091f 	ands.w	r9, r9, #31
 800b480:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b484:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b488:	d02b      	beq.n	800b4e2 <__lshift+0xbe>
 800b48a:	f1c9 0e20 	rsb	lr, r9, #32
 800b48e:	468a      	mov	sl, r1
 800b490:	2200      	movs	r2, #0
 800b492:	6818      	ldr	r0, [r3, #0]
 800b494:	fa00 f009 	lsl.w	r0, r0, r9
 800b498:	4310      	orrs	r0, r2
 800b49a:	f84a 0b04 	str.w	r0, [sl], #4
 800b49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4a2:	459c      	cmp	ip, r3
 800b4a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4a8:	d8f3      	bhi.n	800b492 <__lshift+0x6e>
 800b4aa:	ebac 0304 	sub.w	r3, ip, r4
 800b4ae:	3b15      	subs	r3, #21
 800b4b0:	f023 0303 	bic.w	r3, r3, #3
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	f104 0015 	add.w	r0, r4, #21
 800b4ba:	4560      	cmp	r0, ip
 800b4bc:	bf88      	it	hi
 800b4be:	2304      	movhi	r3, #4
 800b4c0:	50ca      	str	r2, [r1, r3]
 800b4c2:	b10a      	cbz	r2, 800b4c8 <__lshift+0xa4>
 800b4c4:	f108 0602 	add.w	r6, r8, #2
 800b4c8:	3e01      	subs	r6, #1
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	612e      	str	r6, [r5, #16]
 800b4ce:	4621      	mov	r1, r4
 800b4d0:	f7ff fde2 	bl	800b098 <_Bfree>
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4da:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4de:	3301      	adds	r3, #1
 800b4e0:	e7c5      	b.n	800b46e <__lshift+0x4a>
 800b4e2:	3904      	subs	r1, #4
 800b4e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4ec:	459c      	cmp	ip, r3
 800b4ee:	d8f9      	bhi.n	800b4e4 <__lshift+0xc0>
 800b4f0:	e7ea      	b.n	800b4c8 <__lshift+0xa4>
 800b4f2:	bf00      	nop
 800b4f4:	0800c9bc 	.word	0x0800c9bc
 800b4f8:	0800c9cd 	.word	0x0800c9cd

0800b4fc <__mcmp>:
 800b4fc:	690a      	ldr	r2, [r1, #16]
 800b4fe:	4603      	mov	r3, r0
 800b500:	6900      	ldr	r0, [r0, #16]
 800b502:	1a80      	subs	r0, r0, r2
 800b504:	b530      	push	{r4, r5, lr}
 800b506:	d10e      	bne.n	800b526 <__mcmp+0x2a>
 800b508:	3314      	adds	r3, #20
 800b50a:	3114      	adds	r1, #20
 800b50c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b510:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b514:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b518:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b51c:	4295      	cmp	r5, r2
 800b51e:	d003      	beq.n	800b528 <__mcmp+0x2c>
 800b520:	d205      	bcs.n	800b52e <__mcmp+0x32>
 800b522:	f04f 30ff 	mov.w	r0, #4294967295
 800b526:	bd30      	pop	{r4, r5, pc}
 800b528:	42a3      	cmp	r3, r4
 800b52a:	d3f3      	bcc.n	800b514 <__mcmp+0x18>
 800b52c:	e7fb      	b.n	800b526 <__mcmp+0x2a>
 800b52e:	2001      	movs	r0, #1
 800b530:	e7f9      	b.n	800b526 <__mcmp+0x2a>
	...

0800b534 <__mdiff>:
 800b534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b538:	4689      	mov	r9, r1
 800b53a:	4606      	mov	r6, r0
 800b53c:	4611      	mov	r1, r2
 800b53e:	4648      	mov	r0, r9
 800b540:	4614      	mov	r4, r2
 800b542:	f7ff ffdb 	bl	800b4fc <__mcmp>
 800b546:	1e05      	subs	r5, r0, #0
 800b548:	d112      	bne.n	800b570 <__mdiff+0x3c>
 800b54a:	4629      	mov	r1, r5
 800b54c:	4630      	mov	r0, r6
 800b54e:	f7ff fd63 	bl	800b018 <_Balloc>
 800b552:	4602      	mov	r2, r0
 800b554:	b928      	cbnz	r0, 800b562 <__mdiff+0x2e>
 800b556:	4b3f      	ldr	r3, [pc, #252]	@ (800b654 <__mdiff+0x120>)
 800b558:	f240 2137 	movw	r1, #567	@ 0x237
 800b55c:	483e      	ldr	r0, [pc, #248]	@ (800b658 <__mdiff+0x124>)
 800b55e:	f000 fb03 	bl	800bb68 <__assert_func>
 800b562:	2301      	movs	r3, #1
 800b564:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b568:	4610      	mov	r0, r2
 800b56a:	b003      	add	sp, #12
 800b56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b570:	bfbc      	itt	lt
 800b572:	464b      	movlt	r3, r9
 800b574:	46a1      	movlt	r9, r4
 800b576:	4630      	mov	r0, r6
 800b578:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b57c:	bfba      	itte	lt
 800b57e:	461c      	movlt	r4, r3
 800b580:	2501      	movlt	r5, #1
 800b582:	2500      	movge	r5, #0
 800b584:	f7ff fd48 	bl	800b018 <_Balloc>
 800b588:	4602      	mov	r2, r0
 800b58a:	b918      	cbnz	r0, 800b594 <__mdiff+0x60>
 800b58c:	4b31      	ldr	r3, [pc, #196]	@ (800b654 <__mdiff+0x120>)
 800b58e:	f240 2145 	movw	r1, #581	@ 0x245
 800b592:	e7e3      	b.n	800b55c <__mdiff+0x28>
 800b594:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b598:	6926      	ldr	r6, [r4, #16]
 800b59a:	60c5      	str	r5, [r0, #12]
 800b59c:	f109 0310 	add.w	r3, r9, #16
 800b5a0:	f109 0514 	add.w	r5, r9, #20
 800b5a4:	f104 0e14 	add.w	lr, r4, #20
 800b5a8:	f100 0b14 	add.w	fp, r0, #20
 800b5ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b5b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b5b4:	9301      	str	r3, [sp, #4]
 800b5b6:	46d9      	mov	r9, fp
 800b5b8:	f04f 0c00 	mov.w	ip, #0
 800b5bc:	9b01      	ldr	r3, [sp, #4]
 800b5be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b5c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b5c6:	9301      	str	r3, [sp, #4]
 800b5c8:	fa1f f38a 	uxth.w	r3, sl
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	b283      	uxth	r3, r0
 800b5d0:	1acb      	subs	r3, r1, r3
 800b5d2:	0c00      	lsrs	r0, r0, #16
 800b5d4:	4463      	add	r3, ip
 800b5d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b5da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b5e4:	4576      	cmp	r6, lr
 800b5e6:	f849 3b04 	str.w	r3, [r9], #4
 800b5ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b5ee:	d8e5      	bhi.n	800b5bc <__mdiff+0x88>
 800b5f0:	1b33      	subs	r3, r6, r4
 800b5f2:	3b15      	subs	r3, #21
 800b5f4:	f023 0303 	bic.w	r3, r3, #3
 800b5f8:	3415      	adds	r4, #21
 800b5fa:	3304      	adds	r3, #4
 800b5fc:	42a6      	cmp	r6, r4
 800b5fe:	bf38      	it	cc
 800b600:	2304      	movcc	r3, #4
 800b602:	441d      	add	r5, r3
 800b604:	445b      	add	r3, fp
 800b606:	461e      	mov	r6, r3
 800b608:	462c      	mov	r4, r5
 800b60a:	4544      	cmp	r4, r8
 800b60c:	d30e      	bcc.n	800b62c <__mdiff+0xf8>
 800b60e:	f108 0103 	add.w	r1, r8, #3
 800b612:	1b49      	subs	r1, r1, r5
 800b614:	f021 0103 	bic.w	r1, r1, #3
 800b618:	3d03      	subs	r5, #3
 800b61a:	45a8      	cmp	r8, r5
 800b61c:	bf38      	it	cc
 800b61e:	2100      	movcc	r1, #0
 800b620:	440b      	add	r3, r1
 800b622:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b626:	b191      	cbz	r1, 800b64e <__mdiff+0x11a>
 800b628:	6117      	str	r7, [r2, #16]
 800b62a:	e79d      	b.n	800b568 <__mdiff+0x34>
 800b62c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b630:	46e6      	mov	lr, ip
 800b632:	0c08      	lsrs	r0, r1, #16
 800b634:	fa1c fc81 	uxtah	ip, ip, r1
 800b638:	4471      	add	r1, lr
 800b63a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b63e:	b289      	uxth	r1, r1
 800b640:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b644:	f846 1b04 	str.w	r1, [r6], #4
 800b648:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b64c:	e7dd      	b.n	800b60a <__mdiff+0xd6>
 800b64e:	3f01      	subs	r7, #1
 800b650:	e7e7      	b.n	800b622 <__mdiff+0xee>
 800b652:	bf00      	nop
 800b654:	0800c9bc 	.word	0x0800c9bc
 800b658:	0800c9cd 	.word	0x0800c9cd

0800b65c <__d2b>:
 800b65c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b660:	460f      	mov	r7, r1
 800b662:	2101      	movs	r1, #1
 800b664:	ec59 8b10 	vmov	r8, r9, d0
 800b668:	4616      	mov	r6, r2
 800b66a:	f7ff fcd5 	bl	800b018 <_Balloc>
 800b66e:	4604      	mov	r4, r0
 800b670:	b930      	cbnz	r0, 800b680 <__d2b+0x24>
 800b672:	4602      	mov	r2, r0
 800b674:	4b23      	ldr	r3, [pc, #140]	@ (800b704 <__d2b+0xa8>)
 800b676:	4824      	ldr	r0, [pc, #144]	@ (800b708 <__d2b+0xac>)
 800b678:	f240 310f 	movw	r1, #783	@ 0x30f
 800b67c:	f000 fa74 	bl	800bb68 <__assert_func>
 800b680:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b684:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b688:	b10d      	cbz	r5, 800b68e <__d2b+0x32>
 800b68a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b68e:	9301      	str	r3, [sp, #4]
 800b690:	f1b8 0300 	subs.w	r3, r8, #0
 800b694:	d023      	beq.n	800b6de <__d2b+0x82>
 800b696:	4668      	mov	r0, sp
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	f7ff fd84 	bl	800b1a6 <__lo0bits>
 800b69e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6a2:	b1d0      	cbz	r0, 800b6da <__d2b+0x7e>
 800b6a4:	f1c0 0320 	rsb	r3, r0, #32
 800b6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ac:	430b      	orrs	r3, r1
 800b6ae:	40c2      	lsrs	r2, r0
 800b6b0:	6163      	str	r3, [r4, #20]
 800b6b2:	9201      	str	r2, [sp, #4]
 800b6b4:	9b01      	ldr	r3, [sp, #4]
 800b6b6:	61a3      	str	r3, [r4, #24]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	bf0c      	ite	eq
 800b6bc:	2201      	moveq	r2, #1
 800b6be:	2202      	movne	r2, #2
 800b6c0:	6122      	str	r2, [r4, #16]
 800b6c2:	b1a5      	cbz	r5, 800b6ee <__d2b+0x92>
 800b6c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b6c8:	4405      	add	r5, r0
 800b6ca:	603d      	str	r5, [r7, #0]
 800b6cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b6d0:	6030      	str	r0, [r6, #0]
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	b003      	add	sp, #12
 800b6d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6da:	6161      	str	r1, [r4, #20]
 800b6dc:	e7ea      	b.n	800b6b4 <__d2b+0x58>
 800b6de:	a801      	add	r0, sp, #4
 800b6e0:	f7ff fd61 	bl	800b1a6 <__lo0bits>
 800b6e4:	9b01      	ldr	r3, [sp, #4]
 800b6e6:	6163      	str	r3, [r4, #20]
 800b6e8:	3020      	adds	r0, #32
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	e7e8      	b.n	800b6c0 <__d2b+0x64>
 800b6ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b6f6:	6038      	str	r0, [r7, #0]
 800b6f8:	6918      	ldr	r0, [r3, #16]
 800b6fa:	f7ff fd35 	bl	800b168 <__hi0bits>
 800b6fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b702:	e7e5      	b.n	800b6d0 <__d2b+0x74>
 800b704:	0800c9bc 	.word	0x0800c9bc
 800b708:	0800c9cd 	.word	0x0800c9cd

0800b70c <__ssputs_r>:
 800b70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b710:	688e      	ldr	r6, [r1, #8]
 800b712:	461f      	mov	r7, r3
 800b714:	42be      	cmp	r6, r7
 800b716:	680b      	ldr	r3, [r1, #0]
 800b718:	4682      	mov	sl, r0
 800b71a:	460c      	mov	r4, r1
 800b71c:	4690      	mov	r8, r2
 800b71e:	d82d      	bhi.n	800b77c <__ssputs_r+0x70>
 800b720:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b724:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b728:	d026      	beq.n	800b778 <__ssputs_r+0x6c>
 800b72a:	6965      	ldr	r5, [r4, #20]
 800b72c:	6909      	ldr	r1, [r1, #16]
 800b72e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b732:	eba3 0901 	sub.w	r9, r3, r1
 800b736:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b73a:	1c7b      	adds	r3, r7, #1
 800b73c:	444b      	add	r3, r9
 800b73e:	106d      	asrs	r5, r5, #1
 800b740:	429d      	cmp	r5, r3
 800b742:	bf38      	it	cc
 800b744:	461d      	movcc	r5, r3
 800b746:	0553      	lsls	r3, r2, #21
 800b748:	d527      	bpl.n	800b79a <__ssputs_r+0x8e>
 800b74a:	4629      	mov	r1, r5
 800b74c:	f7ff fbd8 	bl	800af00 <_malloc_r>
 800b750:	4606      	mov	r6, r0
 800b752:	b360      	cbz	r0, 800b7ae <__ssputs_r+0xa2>
 800b754:	6921      	ldr	r1, [r4, #16]
 800b756:	464a      	mov	r2, r9
 800b758:	f7fe fcf5 	bl	800a146 <memcpy>
 800b75c:	89a3      	ldrh	r3, [r4, #12]
 800b75e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b766:	81a3      	strh	r3, [r4, #12]
 800b768:	6126      	str	r6, [r4, #16]
 800b76a:	6165      	str	r5, [r4, #20]
 800b76c:	444e      	add	r6, r9
 800b76e:	eba5 0509 	sub.w	r5, r5, r9
 800b772:	6026      	str	r6, [r4, #0]
 800b774:	60a5      	str	r5, [r4, #8]
 800b776:	463e      	mov	r6, r7
 800b778:	42be      	cmp	r6, r7
 800b77a:	d900      	bls.n	800b77e <__ssputs_r+0x72>
 800b77c:	463e      	mov	r6, r7
 800b77e:	6820      	ldr	r0, [r4, #0]
 800b780:	4632      	mov	r2, r6
 800b782:	4641      	mov	r1, r8
 800b784:	f000 f9c6 	bl	800bb14 <memmove>
 800b788:	68a3      	ldr	r3, [r4, #8]
 800b78a:	1b9b      	subs	r3, r3, r6
 800b78c:	60a3      	str	r3, [r4, #8]
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	4433      	add	r3, r6
 800b792:	6023      	str	r3, [r4, #0]
 800b794:	2000      	movs	r0, #0
 800b796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b79a:	462a      	mov	r2, r5
 800b79c:	f000 fa28 	bl	800bbf0 <_realloc_r>
 800b7a0:	4606      	mov	r6, r0
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	d1e0      	bne.n	800b768 <__ssputs_r+0x5c>
 800b7a6:	6921      	ldr	r1, [r4, #16]
 800b7a8:	4650      	mov	r0, sl
 800b7aa:	f7ff fb35 	bl	800ae18 <_free_r>
 800b7ae:	230c      	movs	r3, #12
 800b7b0:	f8ca 3000 	str.w	r3, [sl]
 800b7b4:	89a3      	ldrh	r3, [r4, #12]
 800b7b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7ba:	81a3      	strh	r3, [r4, #12]
 800b7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c0:	e7e9      	b.n	800b796 <__ssputs_r+0x8a>
	...

0800b7c4 <_svfiprintf_r>:
 800b7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c8:	4698      	mov	r8, r3
 800b7ca:	898b      	ldrh	r3, [r1, #12]
 800b7cc:	061b      	lsls	r3, r3, #24
 800b7ce:	b09d      	sub	sp, #116	@ 0x74
 800b7d0:	4607      	mov	r7, r0
 800b7d2:	460d      	mov	r5, r1
 800b7d4:	4614      	mov	r4, r2
 800b7d6:	d510      	bpl.n	800b7fa <_svfiprintf_r+0x36>
 800b7d8:	690b      	ldr	r3, [r1, #16]
 800b7da:	b973      	cbnz	r3, 800b7fa <_svfiprintf_r+0x36>
 800b7dc:	2140      	movs	r1, #64	@ 0x40
 800b7de:	f7ff fb8f 	bl	800af00 <_malloc_r>
 800b7e2:	6028      	str	r0, [r5, #0]
 800b7e4:	6128      	str	r0, [r5, #16]
 800b7e6:	b930      	cbnz	r0, 800b7f6 <_svfiprintf_r+0x32>
 800b7e8:	230c      	movs	r3, #12
 800b7ea:	603b      	str	r3, [r7, #0]
 800b7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f0:	b01d      	add	sp, #116	@ 0x74
 800b7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f6:	2340      	movs	r3, #64	@ 0x40
 800b7f8:	616b      	str	r3, [r5, #20]
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7fe:	2320      	movs	r3, #32
 800b800:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b804:	f8cd 800c 	str.w	r8, [sp, #12]
 800b808:	2330      	movs	r3, #48	@ 0x30
 800b80a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b9a8 <_svfiprintf_r+0x1e4>
 800b80e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b812:	f04f 0901 	mov.w	r9, #1
 800b816:	4623      	mov	r3, r4
 800b818:	469a      	mov	sl, r3
 800b81a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b81e:	b10a      	cbz	r2, 800b824 <_svfiprintf_r+0x60>
 800b820:	2a25      	cmp	r2, #37	@ 0x25
 800b822:	d1f9      	bne.n	800b818 <_svfiprintf_r+0x54>
 800b824:	ebba 0b04 	subs.w	fp, sl, r4
 800b828:	d00b      	beq.n	800b842 <_svfiprintf_r+0x7e>
 800b82a:	465b      	mov	r3, fp
 800b82c:	4622      	mov	r2, r4
 800b82e:	4629      	mov	r1, r5
 800b830:	4638      	mov	r0, r7
 800b832:	f7ff ff6b 	bl	800b70c <__ssputs_r>
 800b836:	3001      	adds	r0, #1
 800b838:	f000 80a7 	beq.w	800b98a <_svfiprintf_r+0x1c6>
 800b83c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b83e:	445a      	add	r2, fp
 800b840:	9209      	str	r2, [sp, #36]	@ 0x24
 800b842:	f89a 3000 	ldrb.w	r3, [sl]
 800b846:	2b00      	cmp	r3, #0
 800b848:	f000 809f 	beq.w	800b98a <_svfiprintf_r+0x1c6>
 800b84c:	2300      	movs	r3, #0
 800b84e:	f04f 32ff 	mov.w	r2, #4294967295
 800b852:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b856:	f10a 0a01 	add.w	sl, sl, #1
 800b85a:	9304      	str	r3, [sp, #16]
 800b85c:	9307      	str	r3, [sp, #28]
 800b85e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b862:	931a      	str	r3, [sp, #104]	@ 0x68
 800b864:	4654      	mov	r4, sl
 800b866:	2205      	movs	r2, #5
 800b868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b86c:	484e      	ldr	r0, [pc, #312]	@ (800b9a8 <_svfiprintf_r+0x1e4>)
 800b86e:	f7f4 fccf 	bl	8000210 <memchr>
 800b872:	9a04      	ldr	r2, [sp, #16]
 800b874:	b9d8      	cbnz	r0, 800b8ae <_svfiprintf_r+0xea>
 800b876:	06d0      	lsls	r0, r2, #27
 800b878:	bf44      	itt	mi
 800b87a:	2320      	movmi	r3, #32
 800b87c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b880:	0711      	lsls	r1, r2, #28
 800b882:	bf44      	itt	mi
 800b884:	232b      	movmi	r3, #43	@ 0x2b
 800b886:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b88a:	f89a 3000 	ldrb.w	r3, [sl]
 800b88e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b890:	d015      	beq.n	800b8be <_svfiprintf_r+0xfa>
 800b892:	9a07      	ldr	r2, [sp, #28]
 800b894:	4654      	mov	r4, sl
 800b896:	2000      	movs	r0, #0
 800b898:	f04f 0c0a 	mov.w	ip, #10
 800b89c:	4621      	mov	r1, r4
 800b89e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8a2:	3b30      	subs	r3, #48	@ 0x30
 800b8a4:	2b09      	cmp	r3, #9
 800b8a6:	d94b      	bls.n	800b940 <_svfiprintf_r+0x17c>
 800b8a8:	b1b0      	cbz	r0, 800b8d8 <_svfiprintf_r+0x114>
 800b8aa:	9207      	str	r2, [sp, #28]
 800b8ac:	e014      	b.n	800b8d8 <_svfiprintf_r+0x114>
 800b8ae:	eba0 0308 	sub.w	r3, r0, r8
 800b8b2:	fa09 f303 	lsl.w	r3, r9, r3
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	9304      	str	r3, [sp, #16]
 800b8ba:	46a2      	mov	sl, r4
 800b8bc:	e7d2      	b.n	800b864 <_svfiprintf_r+0xa0>
 800b8be:	9b03      	ldr	r3, [sp, #12]
 800b8c0:	1d19      	adds	r1, r3, #4
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	9103      	str	r1, [sp, #12]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	bfbb      	ittet	lt
 800b8ca:	425b      	neglt	r3, r3
 800b8cc:	f042 0202 	orrlt.w	r2, r2, #2
 800b8d0:	9307      	strge	r3, [sp, #28]
 800b8d2:	9307      	strlt	r3, [sp, #28]
 800b8d4:	bfb8      	it	lt
 800b8d6:	9204      	strlt	r2, [sp, #16]
 800b8d8:	7823      	ldrb	r3, [r4, #0]
 800b8da:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8dc:	d10a      	bne.n	800b8f4 <_svfiprintf_r+0x130>
 800b8de:	7863      	ldrb	r3, [r4, #1]
 800b8e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8e2:	d132      	bne.n	800b94a <_svfiprintf_r+0x186>
 800b8e4:	9b03      	ldr	r3, [sp, #12]
 800b8e6:	1d1a      	adds	r2, r3, #4
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	9203      	str	r2, [sp, #12]
 800b8ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8f0:	3402      	adds	r4, #2
 800b8f2:	9305      	str	r3, [sp, #20]
 800b8f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b9b8 <_svfiprintf_r+0x1f4>
 800b8f8:	7821      	ldrb	r1, [r4, #0]
 800b8fa:	2203      	movs	r2, #3
 800b8fc:	4650      	mov	r0, sl
 800b8fe:	f7f4 fc87 	bl	8000210 <memchr>
 800b902:	b138      	cbz	r0, 800b914 <_svfiprintf_r+0x150>
 800b904:	9b04      	ldr	r3, [sp, #16]
 800b906:	eba0 000a 	sub.w	r0, r0, sl
 800b90a:	2240      	movs	r2, #64	@ 0x40
 800b90c:	4082      	lsls	r2, r0
 800b90e:	4313      	orrs	r3, r2
 800b910:	3401      	adds	r4, #1
 800b912:	9304      	str	r3, [sp, #16]
 800b914:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b918:	4824      	ldr	r0, [pc, #144]	@ (800b9ac <_svfiprintf_r+0x1e8>)
 800b91a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b91e:	2206      	movs	r2, #6
 800b920:	f7f4 fc76 	bl	8000210 <memchr>
 800b924:	2800      	cmp	r0, #0
 800b926:	d036      	beq.n	800b996 <_svfiprintf_r+0x1d2>
 800b928:	4b21      	ldr	r3, [pc, #132]	@ (800b9b0 <_svfiprintf_r+0x1ec>)
 800b92a:	bb1b      	cbnz	r3, 800b974 <_svfiprintf_r+0x1b0>
 800b92c:	9b03      	ldr	r3, [sp, #12]
 800b92e:	3307      	adds	r3, #7
 800b930:	f023 0307 	bic.w	r3, r3, #7
 800b934:	3308      	adds	r3, #8
 800b936:	9303      	str	r3, [sp, #12]
 800b938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b93a:	4433      	add	r3, r6
 800b93c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b93e:	e76a      	b.n	800b816 <_svfiprintf_r+0x52>
 800b940:	fb0c 3202 	mla	r2, ip, r2, r3
 800b944:	460c      	mov	r4, r1
 800b946:	2001      	movs	r0, #1
 800b948:	e7a8      	b.n	800b89c <_svfiprintf_r+0xd8>
 800b94a:	2300      	movs	r3, #0
 800b94c:	3401      	adds	r4, #1
 800b94e:	9305      	str	r3, [sp, #20]
 800b950:	4619      	mov	r1, r3
 800b952:	f04f 0c0a 	mov.w	ip, #10
 800b956:	4620      	mov	r0, r4
 800b958:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b95c:	3a30      	subs	r2, #48	@ 0x30
 800b95e:	2a09      	cmp	r2, #9
 800b960:	d903      	bls.n	800b96a <_svfiprintf_r+0x1a6>
 800b962:	2b00      	cmp	r3, #0
 800b964:	d0c6      	beq.n	800b8f4 <_svfiprintf_r+0x130>
 800b966:	9105      	str	r1, [sp, #20]
 800b968:	e7c4      	b.n	800b8f4 <_svfiprintf_r+0x130>
 800b96a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b96e:	4604      	mov	r4, r0
 800b970:	2301      	movs	r3, #1
 800b972:	e7f0      	b.n	800b956 <_svfiprintf_r+0x192>
 800b974:	ab03      	add	r3, sp, #12
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	462a      	mov	r2, r5
 800b97a:	4b0e      	ldr	r3, [pc, #56]	@ (800b9b4 <_svfiprintf_r+0x1f0>)
 800b97c:	a904      	add	r1, sp, #16
 800b97e:	4638      	mov	r0, r7
 800b980:	f7fd fe84 	bl	800968c <_printf_float>
 800b984:	1c42      	adds	r2, r0, #1
 800b986:	4606      	mov	r6, r0
 800b988:	d1d6      	bne.n	800b938 <_svfiprintf_r+0x174>
 800b98a:	89ab      	ldrh	r3, [r5, #12]
 800b98c:	065b      	lsls	r3, r3, #25
 800b98e:	f53f af2d 	bmi.w	800b7ec <_svfiprintf_r+0x28>
 800b992:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b994:	e72c      	b.n	800b7f0 <_svfiprintf_r+0x2c>
 800b996:	ab03      	add	r3, sp, #12
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	462a      	mov	r2, r5
 800b99c:	4b05      	ldr	r3, [pc, #20]	@ (800b9b4 <_svfiprintf_r+0x1f0>)
 800b99e:	a904      	add	r1, sp, #16
 800b9a0:	4638      	mov	r0, r7
 800b9a2:	f7fe f90b 	bl	8009bbc <_printf_i>
 800b9a6:	e7ed      	b.n	800b984 <_svfiprintf_r+0x1c0>
 800b9a8:	0800ca26 	.word	0x0800ca26
 800b9ac:	0800ca30 	.word	0x0800ca30
 800b9b0:	0800968d 	.word	0x0800968d
 800b9b4:	0800b70d 	.word	0x0800b70d
 800b9b8:	0800ca2c 	.word	0x0800ca2c

0800b9bc <__sflush_r>:
 800b9bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c4:	0716      	lsls	r6, r2, #28
 800b9c6:	4605      	mov	r5, r0
 800b9c8:	460c      	mov	r4, r1
 800b9ca:	d454      	bmi.n	800ba76 <__sflush_r+0xba>
 800b9cc:	684b      	ldr	r3, [r1, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	dc02      	bgt.n	800b9d8 <__sflush_r+0x1c>
 800b9d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	dd48      	ble.n	800ba6a <__sflush_r+0xae>
 800b9d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9da:	2e00      	cmp	r6, #0
 800b9dc:	d045      	beq.n	800ba6a <__sflush_r+0xae>
 800b9de:	2300      	movs	r3, #0
 800b9e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b9e4:	682f      	ldr	r7, [r5, #0]
 800b9e6:	6a21      	ldr	r1, [r4, #32]
 800b9e8:	602b      	str	r3, [r5, #0]
 800b9ea:	d030      	beq.n	800ba4e <__sflush_r+0x92>
 800b9ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b9ee:	89a3      	ldrh	r3, [r4, #12]
 800b9f0:	0759      	lsls	r1, r3, #29
 800b9f2:	d505      	bpl.n	800ba00 <__sflush_r+0x44>
 800b9f4:	6863      	ldr	r3, [r4, #4]
 800b9f6:	1ad2      	subs	r2, r2, r3
 800b9f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b9fa:	b10b      	cbz	r3, 800ba00 <__sflush_r+0x44>
 800b9fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b9fe:	1ad2      	subs	r2, r2, r3
 800ba00:	2300      	movs	r3, #0
 800ba02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba04:	6a21      	ldr	r1, [r4, #32]
 800ba06:	4628      	mov	r0, r5
 800ba08:	47b0      	blx	r6
 800ba0a:	1c43      	adds	r3, r0, #1
 800ba0c:	89a3      	ldrh	r3, [r4, #12]
 800ba0e:	d106      	bne.n	800ba1e <__sflush_r+0x62>
 800ba10:	6829      	ldr	r1, [r5, #0]
 800ba12:	291d      	cmp	r1, #29
 800ba14:	d82b      	bhi.n	800ba6e <__sflush_r+0xb2>
 800ba16:	4a2a      	ldr	r2, [pc, #168]	@ (800bac0 <__sflush_r+0x104>)
 800ba18:	40ca      	lsrs	r2, r1
 800ba1a:	07d6      	lsls	r6, r2, #31
 800ba1c:	d527      	bpl.n	800ba6e <__sflush_r+0xb2>
 800ba1e:	2200      	movs	r2, #0
 800ba20:	6062      	str	r2, [r4, #4]
 800ba22:	04d9      	lsls	r1, r3, #19
 800ba24:	6922      	ldr	r2, [r4, #16]
 800ba26:	6022      	str	r2, [r4, #0]
 800ba28:	d504      	bpl.n	800ba34 <__sflush_r+0x78>
 800ba2a:	1c42      	adds	r2, r0, #1
 800ba2c:	d101      	bne.n	800ba32 <__sflush_r+0x76>
 800ba2e:	682b      	ldr	r3, [r5, #0]
 800ba30:	b903      	cbnz	r3, 800ba34 <__sflush_r+0x78>
 800ba32:	6560      	str	r0, [r4, #84]	@ 0x54
 800ba34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba36:	602f      	str	r7, [r5, #0]
 800ba38:	b1b9      	cbz	r1, 800ba6a <__sflush_r+0xae>
 800ba3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba3e:	4299      	cmp	r1, r3
 800ba40:	d002      	beq.n	800ba48 <__sflush_r+0x8c>
 800ba42:	4628      	mov	r0, r5
 800ba44:	f7ff f9e8 	bl	800ae18 <_free_r>
 800ba48:	2300      	movs	r3, #0
 800ba4a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba4c:	e00d      	b.n	800ba6a <__sflush_r+0xae>
 800ba4e:	2301      	movs	r3, #1
 800ba50:	4628      	mov	r0, r5
 800ba52:	47b0      	blx	r6
 800ba54:	4602      	mov	r2, r0
 800ba56:	1c50      	adds	r0, r2, #1
 800ba58:	d1c9      	bne.n	800b9ee <__sflush_r+0x32>
 800ba5a:	682b      	ldr	r3, [r5, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d0c6      	beq.n	800b9ee <__sflush_r+0x32>
 800ba60:	2b1d      	cmp	r3, #29
 800ba62:	d001      	beq.n	800ba68 <__sflush_r+0xac>
 800ba64:	2b16      	cmp	r3, #22
 800ba66:	d11e      	bne.n	800baa6 <__sflush_r+0xea>
 800ba68:	602f      	str	r7, [r5, #0]
 800ba6a:	2000      	movs	r0, #0
 800ba6c:	e022      	b.n	800bab4 <__sflush_r+0xf8>
 800ba6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba72:	b21b      	sxth	r3, r3
 800ba74:	e01b      	b.n	800baae <__sflush_r+0xf2>
 800ba76:	690f      	ldr	r7, [r1, #16]
 800ba78:	2f00      	cmp	r7, #0
 800ba7a:	d0f6      	beq.n	800ba6a <__sflush_r+0xae>
 800ba7c:	0793      	lsls	r3, r2, #30
 800ba7e:	680e      	ldr	r6, [r1, #0]
 800ba80:	bf08      	it	eq
 800ba82:	694b      	ldreq	r3, [r1, #20]
 800ba84:	600f      	str	r7, [r1, #0]
 800ba86:	bf18      	it	ne
 800ba88:	2300      	movne	r3, #0
 800ba8a:	eba6 0807 	sub.w	r8, r6, r7
 800ba8e:	608b      	str	r3, [r1, #8]
 800ba90:	f1b8 0f00 	cmp.w	r8, #0
 800ba94:	dde9      	ble.n	800ba6a <__sflush_r+0xae>
 800ba96:	6a21      	ldr	r1, [r4, #32]
 800ba98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ba9a:	4643      	mov	r3, r8
 800ba9c:	463a      	mov	r2, r7
 800ba9e:	4628      	mov	r0, r5
 800baa0:	47b0      	blx	r6
 800baa2:	2800      	cmp	r0, #0
 800baa4:	dc08      	bgt.n	800bab8 <__sflush_r+0xfc>
 800baa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baae:	81a3      	strh	r3, [r4, #12]
 800bab0:	f04f 30ff 	mov.w	r0, #4294967295
 800bab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab8:	4407      	add	r7, r0
 800baba:	eba8 0800 	sub.w	r8, r8, r0
 800babe:	e7e7      	b.n	800ba90 <__sflush_r+0xd4>
 800bac0:	20400001 	.word	0x20400001

0800bac4 <_fflush_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	690b      	ldr	r3, [r1, #16]
 800bac8:	4605      	mov	r5, r0
 800baca:	460c      	mov	r4, r1
 800bacc:	b913      	cbnz	r3, 800bad4 <_fflush_r+0x10>
 800bace:	2500      	movs	r5, #0
 800bad0:	4628      	mov	r0, r5
 800bad2:	bd38      	pop	{r3, r4, r5, pc}
 800bad4:	b118      	cbz	r0, 800bade <_fflush_r+0x1a>
 800bad6:	6a03      	ldr	r3, [r0, #32]
 800bad8:	b90b      	cbnz	r3, 800bade <_fflush_r+0x1a>
 800bada:	f7fe fa19 	bl	8009f10 <__sinit>
 800bade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d0f3      	beq.n	800bace <_fflush_r+0xa>
 800bae6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bae8:	07d0      	lsls	r0, r2, #31
 800baea:	d404      	bmi.n	800baf6 <_fflush_r+0x32>
 800baec:	0599      	lsls	r1, r3, #22
 800baee:	d402      	bmi.n	800baf6 <_fflush_r+0x32>
 800baf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800baf2:	f7fe fb26 	bl	800a142 <__retarget_lock_acquire_recursive>
 800baf6:	4628      	mov	r0, r5
 800baf8:	4621      	mov	r1, r4
 800bafa:	f7ff ff5f 	bl	800b9bc <__sflush_r>
 800bafe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb00:	07da      	lsls	r2, r3, #31
 800bb02:	4605      	mov	r5, r0
 800bb04:	d4e4      	bmi.n	800bad0 <_fflush_r+0xc>
 800bb06:	89a3      	ldrh	r3, [r4, #12]
 800bb08:	059b      	lsls	r3, r3, #22
 800bb0a:	d4e1      	bmi.n	800bad0 <_fflush_r+0xc>
 800bb0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb0e:	f7fe fb19 	bl	800a144 <__retarget_lock_release_recursive>
 800bb12:	e7dd      	b.n	800bad0 <_fflush_r+0xc>

0800bb14 <memmove>:
 800bb14:	4288      	cmp	r0, r1
 800bb16:	b510      	push	{r4, lr}
 800bb18:	eb01 0402 	add.w	r4, r1, r2
 800bb1c:	d902      	bls.n	800bb24 <memmove+0x10>
 800bb1e:	4284      	cmp	r4, r0
 800bb20:	4623      	mov	r3, r4
 800bb22:	d807      	bhi.n	800bb34 <memmove+0x20>
 800bb24:	1e43      	subs	r3, r0, #1
 800bb26:	42a1      	cmp	r1, r4
 800bb28:	d008      	beq.n	800bb3c <memmove+0x28>
 800bb2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb32:	e7f8      	b.n	800bb26 <memmove+0x12>
 800bb34:	4402      	add	r2, r0
 800bb36:	4601      	mov	r1, r0
 800bb38:	428a      	cmp	r2, r1
 800bb3a:	d100      	bne.n	800bb3e <memmove+0x2a>
 800bb3c:	bd10      	pop	{r4, pc}
 800bb3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb46:	e7f7      	b.n	800bb38 <memmove+0x24>

0800bb48 <_sbrk_r>:
 800bb48:	b538      	push	{r3, r4, r5, lr}
 800bb4a:	4d06      	ldr	r5, [pc, #24]	@ (800bb64 <_sbrk_r+0x1c>)
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	4604      	mov	r4, r0
 800bb50:	4608      	mov	r0, r1
 800bb52:	602b      	str	r3, [r5, #0]
 800bb54:	f7f8 f8fa 	bl	8003d4c <_sbrk>
 800bb58:	1c43      	adds	r3, r0, #1
 800bb5a:	d102      	bne.n	800bb62 <_sbrk_r+0x1a>
 800bb5c:	682b      	ldr	r3, [r5, #0]
 800bb5e:	b103      	cbz	r3, 800bb62 <_sbrk_r+0x1a>
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	bd38      	pop	{r3, r4, r5, pc}
 800bb64:	20000c68 	.word	0x20000c68

0800bb68 <__assert_func>:
 800bb68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb6a:	4614      	mov	r4, r2
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	4b09      	ldr	r3, [pc, #36]	@ (800bb94 <__assert_func+0x2c>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4605      	mov	r5, r0
 800bb74:	68d8      	ldr	r0, [r3, #12]
 800bb76:	b14c      	cbz	r4, 800bb8c <__assert_func+0x24>
 800bb78:	4b07      	ldr	r3, [pc, #28]	@ (800bb98 <__assert_func+0x30>)
 800bb7a:	9100      	str	r1, [sp, #0]
 800bb7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb80:	4906      	ldr	r1, [pc, #24]	@ (800bb9c <__assert_func+0x34>)
 800bb82:	462b      	mov	r3, r5
 800bb84:	f000 f870 	bl	800bc68 <fiprintf>
 800bb88:	f000 f880 	bl	800bc8c <abort>
 800bb8c:	4b04      	ldr	r3, [pc, #16]	@ (800bba0 <__assert_func+0x38>)
 800bb8e:	461c      	mov	r4, r3
 800bb90:	e7f3      	b.n	800bb7a <__assert_func+0x12>
 800bb92:	bf00      	nop
 800bb94:	20000030 	.word	0x20000030
 800bb98:	0800ca41 	.word	0x0800ca41
 800bb9c:	0800ca4e 	.word	0x0800ca4e
 800bba0:	0800ca7c 	.word	0x0800ca7c

0800bba4 <_calloc_r>:
 800bba4:	b570      	push	{r4, r5, r6, lr}
 800bba6:	fba1 5402 	umull	r5, r4, r1, r2
 800bbaa:	b934      	cbnz	r4, 800bbba <_calloc_r+0x16>
 800bbac:	4629      	mov	r1, r5
 800bbae:	f7ff f9a7 	bl	800af00 <_malloc_r>
 800bbb2:	4606      	mov	r6, r0
 800bbb4:	b928      	cbnz	r0, 800bbc2 <_calloc_r+0x1e>
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	bd70      	pop	{r4, r5, r6, pc}
 800bbba:	220c      	movs	r2, #12
 800bbbc:	6002      	str	r2, [r0, #0]
 800bbbe:	2600      	movs	r6, #0
 800bbc0:	e7f9      	b.n	800bbb6 <_calloc_r+0x12>
 800bbc2:	462a      	mov	r2, r5
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	f7fe fa3e 	bl	800a046 <memset>
 800bbca:	e7f4      	b.n	800bbb6 <_calloc_r+0x12>

0800bbcc <__ascii_mbtowc>:
 800bbcc:	b082      	sub	sp, #8
 800bbce:	b901      	cbnz	r1, 800bbd2 <__ascii_mbtowc+0x6>
 800bbd0:	a901      	add	r1, sp, #4
 800bbd2:	b142      	cbz	r2, 800bbe6 <__ascii_mbtowc+0x1a>
 800bbd4:	b14b      	cbz	r3, 800bbea <__ascii_mbtowc+0x1e>
 800bbd6:	7813      	ldrb	r3, [r2, #0]
 800bbd8:	600b      	str	r3, [r1, #0]
 800bbda:	7812      	ldrb	r2, [r2, #0]
 800bbdc:	1e10      	subs	r0, r2, #0
 800bbde:	bf18      	it	ne
 800bbe0:	2001      	movne	r0, #1
 800bbe2:	b002      	add	sp, #8
 800bbe4:	4770      	bx	lr
 800bbe6:	4610      	mov	r0, r2
 800bbe8:	e7fb      	b.n	800bbe2 <__ascii_mbtowc+0x16>
 800bbea:	f06f 0001 	mvn.w	r0, #1
 800bbee:	e7f8      	b.n	800bbe2 <__ascii_mbtowc+0x16>

0800bbf0 <_realloc_r>:
 800bbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf4:	4607      	mov	r7, r0
 800bbf6:	4614      	mov	r4, r2
 800bbf8:	460d      	mov	r5, r1
 800bbfa:	b921      	cbnz	r1, 800bc06 <_realloc_r+0x16>
 800bbfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc00:	4611      	mov	r1, r2
 800bc02:	f7ff b97d 	b.w	800af00 <_malloc_r>
 800bc06:	b92a      	cbnz	r2, 800bc14 <_realloc_r+0x24>
 800bc08:	f7ff f906 	bl	800ae18 <_free_r>
 800bc0c:	4625      	mov	r5, r4
 800bc0e:	4628      	mov	r0, r5
 800bc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc14:	f000 f841 	bl	800bc9a <_malloc_usable_size_r>
 800bc18:	4284      	cmp	r4, r0
 800bc1a:	4606      	mov	r6, r0
 800bc1c:	d802      	bhi.n	800bc24 <_realloc_r+0x34>
 800bc1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc22:	d8f4      	bhi.n	800bc0e <_realloc_r+0x1e>
 800bc24:	4621      	mov	r1, r4
 800bc26:	4638      	mov	r0, r7
 800bc28:	f7ff f96a 	bl	800af00 <_malloc_r>
 800bc2c:	4680      	mov	r8, r0
 800bc2e:	b908      	cbnz	r0, 800bc34 <_realloc_r+0x44>
 800bc30:	4645      	mov	r5, r8
 800bc32:	e7ec      	b.n	800bc0e <_realloc_r+0x1e>
 800bc34:	42b4      	cmp	r4, r6
 800bc36:	4622      	mov	r2, r4
 800bc38:	4629      	mov	r1, r5
 800bc3a:	bf28      	it	cs
 800bc3c:	4632      	movcs	r2, r6
 800bc3e:	f7fe fa82 	bl	800a146 <memcpy>
 800bc42:	4629      	mov	r1, r5
 800bc44:	4638      	mov	r0, r7
 800bc46:	f7ff f8e7 	bl	800ae18 <_free_r>
 800bc4a:	e7f1      	b.n	800bc30 <_realloc_r+0x40>

0800bc4c <__ascii_wctomb>:
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	4608      	mov	r0, r1
 800bc50:	b141      	cbz	r1, 800bc64 <__ascii_wctomb+0x18>
 800bc52:	2aff      	cmp	r2, #255	@ 0xff
 800bc54:	d904      	bls.n	800bc60 <__ascii_wctomb+0x14>
 800bc56:	228a      	movs	r2, #138	@ 0x8a
 800bc58:	601a      	str	r2, [r3, #0]
 800bc5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc5e:	4770      	bx	lr
 800bc60:	700a      	strb	r2, [r1, #0]
 800bc62:	2001      	movs	r0, #1
 800bc64:	4770      	bx	lr
	...

0800bc68 <fiprintf>:
 800bc68:	b40e      	push	{r1, r2, r3}
 800bc6a:	b503      	push	{r0, r1, lr}
 800bc6c:	4601      	mov	r1, r0
 800bc6e:	ab03      	add	r3, sp, #12
 800bc70:	4805      	ldr	r0, [pc, #20]	@ (800bc88 <fiprintf+0x20>)
 800bc72:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc76:	6800      	ldr	r0, [r0, #0]
 800bc78:	9301      	str	r3, [sp, #4]
 800bc7a:	f000 f83f 	bl	800bcfc <_vfiprintf_r>
 800bc7e:	b002      	add	sp, #8
 800bc80:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc84:	b003      	add	sp, #12
 800bc86:	4770      	bx	lr
 800bc88:	20000030 	.word	0x20000030

0800bc8c <abort>:
 800bc8c:	b508      	push	{r3, lr}
 800bc8e:	2006      	movs	r0, #6
 800bc90:	f000 fa08 	bl	800c0a4 <raise>
 800bc94:	2001      	movs	r0, #1
 800bc96:	f7f7 ffe1 	bl	8003c5c <_exit>

0800bc9a <_malloc_usable_size_r>:
 800bc9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc9e:	1f18      	subs	r0, r3, #4
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	bfbc      	itt	lt
 800bca4:	580b      	ldrlt	r3, [r1, r0]
 800bca6:	18c0      	addlt	r0, r0, r3
 800bca8:	4770      	bx	lr

0800bcaa <__sfputc_r>:
 800bcaa:	6893      	ldr	r3, [r2, #8]
 800bcac:	3b01      	subs	r3, #1
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	b410      	push	{r4}
 800bcb2:	6093      	str	r3, [r2, #8]
 800bcb4:	da08      	bge.n	800bcc8 <__sfputc_r+0x1e>
 800bcb6:	6994      	ldr	r4, [r2, #24]
 800bcb8:	42a3      	cmp	r3, r4
 800bcba:	db01      	blt.n	800bcc0 <__sfputc_r+0x16>
 800bcbc:	290a      	cmp	r1, #10
 800bcbe:	d103      	bne.n	800bcc8 <__sfputc_r+0x1e>
 800bcc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcc4:	f000 b932 	b.w	800bf2c <__swbuf_r>
 800bcc8:	6813      	ldr	r3, [r2, #0]
 800bcca:	1c58      	adds	r0, r3, #1
 800bccc:	6010      	str	r0, [r2, #0]
 800bcce:	7019      	strb	r1, [r3, #0]
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <__sfputs_r>:
 800bcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcda:	4606      	mov	r6, r0
 800bcdc:	460f      	mov	r7, r1
 800bcde:	4614      	mov	r4, r2
 800bce0:	18d5      	adds	r5, r2, r3
 800bce2:	42ac      	cmp	r4, r5
 800bce4:	d101      	bne.n	800bcea <__sfputs_r+0x12>
 800bce6:	2000      	movs	r0, #0
 800bce8:	e007      	b.n	800bcfa <__sfputs_r+0x22>
 800bcea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcee:	463a      	mov	r2, r7
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	f7ff ffda 	bl	800bcaa <__sfputc_r>
 800bcf6:	1c43      	adds	r3, r0, #1
 800bcf8:	d1f3      	bne.n	800bce2 <__sfputs_r+0xa>
 800bcfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bcfc <_vfiprintf_r>:
 800bcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd00:	460d      	mov	r5, r1
 800bd02:	b09d      	sub	sp, #116	@ 0x74
 800bd04:	4614      	mov	r4, r2
 800bd06:	4698      	mov	r8, r3
 800bd08:	4606      	mov	r6, r0
 800bd0a:	b118      	cbz	r0, 800bd14 <_vfiprintf_r+0x18>
 800bd0c:	6a03      	ldr	r3, [r0, #32]
 800bd0e:	b90b      	cbnz	r3, 800bd14 <_vfiprintf_r+0x18>
 800bd10:	f7fe f8fe 	bl	8009f10 <__sinit>
 800bd14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd16:	07d9      	lsls	r1, r3, #31
 800bd18:	d405      	bmi.n	800bd26 <_vfiprintf_r+0x2a>
 800bd1a:	89ab      	ldrh	r3, [r5, #12]
 800bd1c:	059a      	lsls	r2, r3, #22
 800bd1e:	d402      	bmi.n	800bd26 <_vfiprintf_r+0x2a>
 800bd20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd22:	f7fe fa0e 	bl	800a142 <__retarget_lock_acquire_recursive>
 800bd26:	89ab      	ldrh	r3, [r5, #12]
 800bd28:	071b      	lsls	r3, r3, #28
 800bd2a:	d501      	bpl.n	800bd30 <_vfiprintf_r+0x34>
 800bd2c:	692b      	ldr	r3, [r5, #16]
 800bd2e:	b99b      	cbnz	r3, 800bd58 <_vfiprintf_r+0x5c>
 800bd30:	4629      	mov	r1, r5
 800bd32:	4630      	mov	r0, r6
 800bd34:	f000 f938 	bl	800bfa8 <__swsetup_r>
 800bd38:	b170      	cbz	r0, 800bd58 <_vfiprintf_r+0x5c>
 800bd3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd3c:	07dc      	lsls	r4, r3, #31
 800bd3e:	d504      	bpl.n	800bd4a <_vfiprintf_r+0x4e>
 800bd40:	f04f 30ff 	mov.w	r0, #4294967295
 800bd44:	b01d      	add	sp, #116	@ 0x74
 800bd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd4a:	89ab      	ldrh	r3, [r5, #12]
 800bd4c:	0598      	lsls	r0, r3, #22
 800bd4e:	d4f7      	bmi.n	800bd40 <_vfiprintf_r+0x44>
 800bd50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd52:	f7fe f9f7 	bl	800a144 <__retarget_lock_release_recursive>
 800bd56:	e7f3      	b.n	800bd40 <_vfiprintf_r+0x44>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd5c:	2320      	movs	r3, #32
 800bd5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd62:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd66:	2330      	movs	r3, #48	@ 0x30
 800bd68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf18 <_vfiprintf_r+0x21c>
 800bd6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd70:	f04f 0901 	mov.w	r9, #1
 800bd74:	4623      	mov	r3, r4
 800bd76:	469a      	mov	sl, r3
 800bd78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd7c:	b10a      	cbz	r2, 800bd82 <_vfiprintf_r+0x86>
 800bd7e:	2a25      	cmp	r2, #37	@ 0x25
 800bd80:	d1f9      	bne.n	800bd76 <_vfiprintf_r+0x7a>
 800bd82:	ebba 0b04 	subs.w	fp, sl, r4
 800bd86:	d00b      	beq.n	800bda0 <_vfiprintf_r+0xa4>
 800bd88:	465b      	mov	r3, fp
 800bd8a:	4622      	mov	r2, r4
 800bd8c:	4629      	mov	r1, r5
 800bd8e:	4630      	mov	r0, r6
 800bd90:	f7ff ffa2 	bl	800bcd8 <__sfputs_r>
 800bd94:	3001      	adds	r0, #1
 800bd96:	f000 80a7 	beq.w	800bee8 <_vfiprintf_r+0x1ec>
 800bd9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd9c:	445a      	add	r2, fp
 800bd9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bda0:	f89a 3000 	ldrb.w	r3, [sl]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f000 809f 	beq.w	800bee8 <_vfiprintf_r+0x1ec>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f04f 32ff 	mov.w	r2, #4294967295
 800bdb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdb4:	f10a 0a01 	add.w	sl, sl, #1
 800bdb8:	9304      	str	r3, [sp, #16]
 800bdba:	9307      	str	r3, [sp, #28]
 800bdbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdc0:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdc2:	4654      	mov	r4, sl
 800bdc4:	2205      	movs	r2, #5
 800bdc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdca:	4853      	ldr	r0, [pc, #332]	@ (800bf18 <_vfiprintf_r+0x21c>)
 800bdcc:	f7f4 fa20 	bl	8000210 <memchr>
 800bdd0:	9a04      	ldr	r2, [sp, #16]
 800bdd2:	b9d8      	cbnz	r0, 800be0c <_vfiprintf_r+0x110>
 800bdd4:	06d1      	lsls	r1, r2, #27
 800bdd6:	bf44      	itt	mi
 800bdd8:	2320      	movmi	r3, #32
 800bdda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdde:	0713      	lsls	r3, r2, #28
 800bde0:	bf44      	itt	mi
 800bde2:	232b      	movmi	r3, #43	@ 0x2b
 800bde4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bde8:	f89a 3000 	ldrb.w	r3, [sl]
 800bdec:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdee:	d015      	beq.n	800be1c <_vfiprintf_r+0x120>
 800bdf0:	9a07      	ldr	r2, [sp, #28]
 800bdf2:	4654      	mov	r4, sl
 800bdf4:	2000      	movs	r0, #0
 800bdf6:	f04f 0c0a 	mov.w	ip, #10
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be00:	3b30      	subs	r3, #48	@ 0x30
 800be02:	2b09      	cmp	r3, #9
 800be04:	d94b      	bls.n	800be9e <_vfiprintf_r+0x1a2>
 800be06:	b1b0      	cbz	r0, 800be36 <_vfiprintf_r+0x13a>
 800be08:	9207      	str	r2, [sp, #28]
 800be0a:	e014      	b.n	800be36 <_vfiprintf_r+0x13a>
 800be0c:	eba0 0308 	sub.w	r3, r0, r8
 800be10:	fa09 f303 	lsl.w	r3, r9, r3
 800be14:	4313      	orrs	r3, r2
 800be16:	9304      	str	r3, [sp, #16]
 800be18:	46a2      	mov	sl, r4
 800be1a:	e7d2      	b.n	800bdc2 <_vfiprintf_r+0xc6>
 800be1c:	9b03      	ldr	r3, [sp, #12]
 800be1e:	1d19      	adds	r1, r3, #4
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	9103      	str	r1, [sp, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	bfbb      	ittet	lt
 800be28:	425b      	neglt	r3, r3
 800be2a:	f042 0202 	orrlt.w	r2, r2, #2
 800be2e:	9307      	strge	r3, [sp, #28]
 800be30:	9307      	strlt	r3, [sp, #28]
 800be32:	bfb8      	it	lt
 800be34:	9204      	strlt	r2, [sp, #16]
 800be36:	7823      	ldrb	r3, [r4, #0]
 800be38:	2b2e      	cmp	r3, #46	@ 0x2e
 800be3a:	d10a      	bne.n	800be52 <_vfiprintf_r+0x156>
 800be3c:	7863      	ldrb	r3, [r4, #1]
 800be3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800be40:	d132      	bne.n	800bea8 <_vfiprintf_r+0x1ac>
 800be42:	9b03      	ldr	r3, [sp, #12]
 800be44:	1d1a      	adds	r2, r3, #4
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	9203      	str	r2, [sp, #12]
 800be4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be4e:	3402      	adds	r4, #2
 800be50:	9305      	str	r3, [sp, #20]
 800be52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf28 <_vfiprintf_r+0x22c>
 800be56:	7821      	ldrb	r1, [r4, #0]
 800be58:	2203      	movs	r2, #3
 800be5a:	4650      	mov	r0, sl
 800be5c:	f7f4 f9d8 	bl	8000210 <memchr>
 800be60:	b138      	cbz	r0, 800be72 <_vfiprintf_r+0x176>
 800be62:	9b04      	ldr	r3, [sp, #16]
 800be64:	eba0 000a 	sub.w	r0, r0, sl
 800be68:	2240      	movs	r2, #64	@ 0x40
 800be6a:	4082      	lsls	r2, r0
 800be6c:	4313      	orrs	r3, r2
 800be6e:	3401      	adds	r4, #1
 800be70:	9304      	str	r3, [sp, #16]
 800be72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be76:	4829      	ldr	r0, [pc, #164]	@ (800bf1c <_vfiprintf_r+0x220>)
 800be78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be7c:	2206      	movs	r2, #6
 800be7e:	f7f4 f9c7 	bl	8000210 <memchr>
 800be82:	2800      	cmp	r0, #0
 800be84:	d03f      	beq.n	800bf06 <_vfiprintf_r+0x20a>
 800be86:	4b26      	ldr	r3, [pc, #152]	@ (800bf20 <_vfiprintf_r+0x224>)
 800be88:	bb1b      	cbnz	r3, 800bed2 <_vfiprintf_r+0x1d6>
 800be8a:	9b03      	ldr	r3, [sp, #12]
 800be8c:	3307      	adds	r3, #7
 800be8e:	f023 0307 	bic.w	r3, r3, #7
 800be92:	3308      	adds	r3, #8
 800be94:	9303      	str	r3, [sp, #12]
 800be96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be98:	443b      	add	r3, r7
 800be9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800be9c:	e76a      	b.n	800bd74 <_vfiprintf_r+0x78>
 800be9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bea2:	460c      	mov	r4, r1
 800bea4:	2001      	movs	r0, #1
 800bea6:	e7a8      	b.n	800bdfa <_vfiprintf_r+0xfe>
 800bea8:	2300      	movs	r3, #0
 800beaa:	3401      	adds	r4, #1
 800beac:	9305      	str	r3, [sp, #20]
 800beae:	4619      	mov	r1, r3
 800beb0:	f04f 0c0a 	mov.w	ip, #10
 800beb4:	4620      	mov	r0, r4
 800beb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800beba:	3a30      	subs	r2, #48	@ 0x30
 800bebc:	2a09      	cmp	r2, #9
 800bebe:	d903      	bls.n	800bec8 <_vfiprintf_r+0x1cc>
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d0c6      	beq.n	800be52 <_vfiprintf_r+0x156>
 800bec4:	9105      	str	r1, [sp, #20]
 800bec6:	e7c4      	b.n	800be52 <_vfiprintf_r+0x156>
 800bec8:	fb0c 2101 	mla	r1, ip, r1, r2
 800becc:	4604      	mov	r4, r0
 800bece:	2301      	movs	r3, #1
 800bed0:	e7f0      	b.n	800beb4 <_vfiprintf_r+0x1b8>
 800bed2:	ab03      	add	r3, sp, #12
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	462a      	mov	r2, r5
 800bed8:	4b12      	ldr	r3, [pc, #72]	@ (800bf24 <_vfiprintf_r+0x228>)
 800beda:	a904      	add	r1, sp, #16
 800bedc:	4630      	mov	r0, r6
 800bede:	f7fd fbd5 	bl	800968c <_printf_float>
 800bee2:	4607      	mov	r7, r0
 800bee4:	1c78      	adds	r0, r7, #1
 800bee6:	d1d6      	bne.n	800be96 <_vfiprintf_r+0x19a>
 800bee8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800beea:	07d9      	lsls	r1, r3, #31
 800beec:	d405      	bmi.n	800befa <_vfiprintf_r+0x1fe>
 800beee:	89ab      	ldrh	r3, [r5, #12]
 800bef0:	059a      	lsls	r2, r3, #22
 800bef2:	d402      	bmi.n	800befa <_vfiprintf_r+0x1fe>
 800bef4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bef6:	f7fe f925 	bl	800a144 <__retarget_lock_release_recursive>
 800befa:	89ab      	ldrh	r3, [r5, #12]
 800befc:	065b      	lsls	r3, r3, #25
 800befe:	f53f af1f 	bmi.w	800bd40 <_vfiprintf_r+0x44>
 800bf02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf04:	e71e      	b.n	800bd44 <_vfiprintf_r+0x48>
 800bf06:	ab03      	add	r3, sp, #12
 800bf08:	9300      	str	r3, [sp, #0]
 800bf0a:	462a      	mov	r2, r5
 800bf0c:	4b05      	ldr	r3, [pc, #20]	@ (800bf24 <_vfiprintf_r+0x228>)
 800bf0e:	a904      	add	r1, sp, #16
 800bf10:	4630      	mov	r0, r6
 800bf12:	f7fd fe53 	bl	8009bbc <_printf_i>
 800bf16:	e7e4      	b.n	800bee2 <_vfiprintf_r+0x1e6>
 800bf18:	0800ca26 	.word	0x0800ca26
 800bf1c:	0800ca30 	.word	0x0800ca30
 800bf20:	0800968d 	.word	0x0800968d
 800bf24:	0800bcd9 	.word	0x0800bcd9
 800bf28:	0800ca2c 	.word	0x0800ca2c

0800bf2c <__swbuf_r>:
 800bf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2e:	460e      	mov	r6, r1
 800bf30:	4614      	mov	r4, r2
 800bf32:	4605      	mov	r5, r0
 800bf34:	b118      	cbz	r0, 800bf3e <__swbuf_r+0x12>
 800bf36:	6a03      	ldr	r3, [r0, #32]
 800bf38:	b90b      	cbnz	r3, 800bf3e <__swbuf_r+0x12>
 800bf3a:	f7fd ffe9 	bl	8009f10 <__sinit>
 800bf3e:	69a3      	ldr	r3, [r4, #24]
 800bf40:	60a3      	str	r3, [r4, #8]
 800bf42:	89a3      	ldrh	r3, [r4, #12]
 800bf44:	071a      	lsls	r2, r3, #28
 800bf46:	d501      	bpl.n	800bf4c <__swbuf_r+0x20>
 800bf48:	6923      	ldr	r3, [r4, #16]
 800bf4a:	b943      	cbnz	r3, 800bf5e <__swbuf_r+0x32>
 800bf4c:	4621      	mov	r1, r4
 800bf4e:	4628      	mov	r0, r5
 800bf50:	f000 f82a 	bl	800bfa8 <__swsetup_r>
 800bf54:	b118      	cbz	r0, 800bf5e <__swbuf_r+0x32>
 800bf56:	f04f 37ff 	mov.w	r7, #4294967295
 800bf5a:	4638      	mov	r0, r7
 800bf5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf5e:	6823      	ldr	r3, [r4, #0]
 800bf60:	6922      	ldr	r2, [r4, #16]
 800bf62:	1a98      	subs	r0, r3, r2
 800bf64:	6963      	ldr	r3, [r4, #20]
 800bf66:	b2f6      	uxtb	r6, r6
 800bf68:	4283      	cmp	r3, r0
 800bf6a:	4637      	mov	r7, r6
 800bf6c:	dc05      	bgt.n	800bf7a <__swbuf_r+0x4e>
 800bf6e:	4621      	mov	r1, r4
 800bf70:	4628      	mov	r0, r5
 800bf72:	f7ff fda7 	bl	800bac4 <_fflush_r>
 800bf76:	2800      	cmp	r0, #0
 800bf78:	d1ed      	bne.n	800bf56 <__swbuf_r+0x2a>
 800bf7a:	68a3      	ldr	r3, [r4, #8]
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	60a3      	str	r3, [r4, #8]
 800bf80:	6823      	ldr	r3, [r4, #0]
 800bf82:	1c5a      	adds	r2, r3, #1
 800bf84:	6022      	str	r2, [r4, #0]
 800bf86:	701e      	strb	r6, [r3, #0]
 800bf88:	6962      	ldr	r2, [r4, #20]
 800bf8a:	1c43      	adds	r3, r0, #1
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d004      	beq.n	800bf9a <__swbuf_r+0x6e>
 800bf90:	89a3      	ldrh	r3, [r4, #12]
 800bf92:	07db      	lsls	r3, r3, #31
 800bf94:	d5e1      	bpl.n	800bf5a <__swbuf_r+0x2e>
 800bf96:	2e0a      	cmp	r6, #10
 800bf98:	d1df      	bne.n	800bf5a <__swbuf_r+0x2e>
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	4628      	mov	r0, r5
 800bf9e:	f7ff fd91 	bl	800bac4 <_fflush_r>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	d0d9      	beq.n	800bf5a <__swbuf_r+0x2e>
 800bfa6:	e7d6      	b.n	800bf56 <__swbuf_r+0x2a>

0800bfa8 <__swsetup_r>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	4b29      	ldr	r3, [pc, #164]	@ (800c050 <__swsetup_r+0xa8>)
 800bfac:	4605      	mov	r5, r0
 800bfae:	6818      	ldr	r0, [r3, #0]
 800bfb0:	460c      	mov	r4, r1
 800bfb2:	b118      	cbz	r0, 800bfbc <__swsetup_r+0x14>
 800bfb4:	6a03      	ldr	r3, [r0, #32]
 800bfb6:	b90b      	cbnz	r3, 800bfbc <__swsetup_r+0x14>
 800bfb8:	f7fd ffaa 	bl	8009f10 <__sinit>
 800bfbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfc0:	0719      	lsls	r1, r3, #28
 800bfc2:	d422      	bmi.n	800c00a <__swsetup_r+0x62>
 800bfc4:	06da      	lsls	r2, r3, #27
 800bfc6:	d407      	bmi.n	800bfd8 <__swsetup_r+0x30>
 800bfc8:	2209      	movs	r2, #9
 800bfca:	602a      	str	r2, [r5, #0]
 800bfcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfd0:	81a3      	strh	r3, [r4, #12]
 800bfd2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfd6:	e033      	b.n	800c040 <__swsetup_r+0x98>
 800bfd8:	0758      	lsls	r0, r3, #29
 800bfda:	d512      	bpl.n	800c002 <__swsetup_r+0x5a>
 800bfdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfde:	b141      	cbz	r1, 800bff2 <__swsetup_r+0x4a>
 800bfe0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bfe4:	4299      	cmp	r1, r3
 800bfe6:	d002      	beq.n	800bfee <__swsetup_r+0x46>
 800bfe8:	4628      	mov	r0, r5
 800bfea:	f7fe ff15 	bl	800ae18 <_free_r>
 800bfee:	2300      	movs	r3, #0
 800bff0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bff2:	89a3      	ldrh	r3, [r4, #12]
 800bff4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bff8:	81a3      	strh	r3, [r4, #12]
 800bffa:	2300      	movs	r3, #0
 800bffc:	6063      	str	r3, [r4, #4]
 800bffe:	6923      	ldr	r3, [r4, #16]
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	89a3      	ldrh	r3, [r4, #12]
 800c004:	f043 0308 	orr.w	r3, r3, #8
 800c008:	81a3      	strh	r3, [r4, #12]
 800c00a:	6923      	ldr	r3, [r4, #16]
 800c00c:	b94b      	cbnz	r3, 800c022 <__swsetup_r+0x7a>
 800c00e:	89a3      	ldrh	r3, [r4, #12]
 800c010:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c018:	d003      	beq.n	800c022 <__swsetup_r+0x7a>
 800c01a:	4621      	mov	r1, r4
 800c01c:	4628      	mov	r0, r5
 800c01e:	f000 f883 	bl	800c128 <__smakebuf_r>
 800c022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c026:	f013 0201 	ands.w	r2, r3, #1
 800c02a:	d00a      	beq.n	800c042 <__swsetup_r+0x9a>
 800c02c:	2200      	movs	r2, #0
 800c02e:	60a2      	str	r2, [r4, #8]
 800c030:	6962      	ldr	r2, [r4, #20]
 800c032:	4252      	negs	r2, r2
 800c034:	61a2      	str	r2, [r4, #24]
 800c036:	6922      	ldr	r2, [r4, #16]
 800c038:	b942      	cbnz	r2, 800c04c <__swsetup_r+0xa4>
 800c03a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c03e:	d1c5      	bne.n	800bfcc <__swsetup_r+0x24>
 800c040:	bd38      	pop	{r3, r4, r5, pc}
 800c042:	0799      	lsls	r1, r3, #30
 800c044:	bf58      	it	pl
 800c046:	6962      	ldrpl	r2, [r4, #20]
 800c048:	60a2      	str	r2, [r4, #8]
 800c04a:	e7f4      	b.n	800c036 <__swsetup_r+0x8e>
 800c04c:	2000      	movs	r0, #0
 800c04e:	e7f7      	b.n	800c040 <__swsetup_r+0x98>
 800c050:	20000030 	.word	0x20000030

0800c054 <_raise_r>:
 800c054:	291f      	cmp	r1, #31
 800c056:	b538      	push	{r3, r4, r5, lr}
 800c058:	4605      	mov	r5, r0
 800c05a:	460c      	mov	r4, r1
 800c05c:	d904      	bls.n	800c068 <_raise_r+0x14>
 800c05e:	2316      	movs	r3, #22
 800c060:	6003      	str	r3, [r0, #0]
 800c062:	f04f 30ff 	mov.w	r0, #4294967295
 800c066:	bd38      	pop	{r3, r4, r5, pc}
 800c068:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c06a:	b112      	cbz	r2, 800c072 <_raise_r+0x1e>
 800c06c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c070:	b94b      	cbnz	r3, 800c086 <_raise_r+0x32>
 800c072:	4628      	mov	r0, r5
 800c074:	f000 f830 	bl	800c0d8 <_getpid_r>
 800c078:	4622      	mov	r2, r4
 800c07a:	4601      	mov	r1, r0
 800c07c:	4628      	mov	r0, r5
 800c07e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c082:	f000 b817 	b.w	800c0b4 <_kill_r>
 800c086:	2b01      	cmp	r3, #1
 800c088:	d00a      	beq.n	800c0a0 <_raise_r+0x4c>
 800c08a:	1c59      	adds	r1, r3, #1
 800c08c:	d103      	bne.n	800c096 <_raise_r+0x42>
 800c08e:	2316      	movs	r3, #22
 800c090:	6003      	str	r3, [r0, #0]
 800c092:	2001      	movs	r0, #1
 800c094:	e7e7      	b.n	800c066 <_raise_r+0x12>
 800c096:	2100      	movs	r1, #0
 800c098:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c09c:	4620      	mov	r0, r4
 800c09e:	4798      	blx	r3
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	e7e0      	b.n	800c066 <_raise_r+0x12>

0800c0a4 <raise>:
 800c0a4:	4b02      	ldr	r3, [pc, #8]	@ (800c0b0 <raise+0xc>)
 800c0a6:	4601      	mov	r1, r0
 800c0a8:	6818      	ldr	r0, [r3, #0]
 800c0aa:	f7ff bfd3 	b.w	800c054 <_raise_r>
 800c0ae:	bf00      	nop
 800c0b0:	20000030 	.word	0x20000030

0800c0b4 <_kill_r>:
 800c0b4:	b538      	push	{r3, r4, r5, lr}
 800c0b6:	4d07      	ldr	r5, [pc, #28]	@ (800c0d4 <_kill_r+0x20>)
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	4608      	mov	r0, r1
 800c0be:	4611      	mov	r1, r2
 800c0c0:	602b      	str	r3, [r5, #0]
 800c0c2:	f7f7 fdbb 	bl	8003c3c <_kill>
 800c0c6:	1c43      	adds	r3, r0, #1
 800c0c8:	d102      	bne.n	800c0d0 <_kill_r+0x1c>
 800c0ca:	682b      	ldr	r3, [r5, #0]
 800c0cc:	b103      	cbz	r3, 800c0d0 <_kill_r+0x1c>
 800c0ce:	6023      	str	r3, [r4, #0]
 800c0d0:	bd38      	pop	{r3, r4, r5, pc}
 800c0d2:	bf00      	nop
 800c0d4:	20000c68 	.word	0x20000c68

0800c0d8 <_getpid_r>:
 800c0d8:	f7f7 bda8 	b.w	8003c2c <_getpid>

0800c0dc <__swhatbuf_r>:
 800c0dc:	b570      	push	{r4, r5, r6, lr}
 800c0de:	460c      	mov	r4, r1
 800c0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0e4:	2900      	cmp	r1, #0
 800c0e6:	b096      	sub	sp, #88	@ 0x58
 800c0e8:	4615      	mov	r5, r2
 800c0ea:	461e      	mov	r6, r3
 800c0ec:	da0d      	bge.n	800c10a <__swhatbuf_r+0x2e>
 800c0ee:	89a3      	ldrh	r3, [r4, #12]
 800c0f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c0f4:	f04f 0100 	mov.w	r1, #0
 800c0f8:	bf14      	ite	ne
 800c0fa:	2340      	movne	r3, #64	@ 0x40
 800c0fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c100:	2000      	movs	r0, #0
 800c102:	6031      	str	r1, [r6, #0]
 800c104:	602b      	str	r3, [r5, #0]
 800c106:	b016      	add	sp, #88	@ 0x58
 800c108:	bd70      	pop	{r4, r5, r6, pc}
 800c10a:	466a      	mov	r2, sp
 800c10c:	f000 f848 	bl	800c1a0 <_fstat_r>
 800c110:	2800      	cmp	r0, #0
 800c112:	dbec      	blt.n	800c0ee <__swhatbuf_r+0x12>
 800c114:	9901      	ldr	r1, [sp, #4]
 800c116:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c11a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c11e:	4259      	negs	r1, r3
 800c120:	4159      	adcs	r1, r3
 800c122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c126:	e7eb      	b.n	800c100 <__swhatbuf_r+0x24>

0800c128 <__smakebuf_r>:
 800c128:	898b      	ldrh	r3, [r1, #12]
 800c12a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c12c:	079d      	lsls	r5, r3, #30
 800c12e:	4606      	mov	r6, r0
 800c130:	460c      	mov	r4, r1
 800c132:	d507      	bpl.n	800c144 <__smakebuf_r+0x1c>
 800c134:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c138:	6023      	str	r3, [r4, #0]
 800c13a:	6123      	str	r3, [r4, #16]
 800c13c:	2301      	movs	r3, #1
 800c13e:	6163      	str	r3, [r4, #20]
 800c140:	b003      	add	sp, #12
 800c142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c144:	ab01      	add	r3, sp, #4
 800c146:	466a      	mov	r2, sp
 800c148:	f7ff ffc8 	bl	800c0dc <__swhatbuf_r>
 800c14c:	9f00      	ldr	r7, [sp, #0]
 800c14e:	4605      	mov	r5, r0
 800c150:	4639      	mov	r1, r7
 800c152:	4630      	mov	r0, r6
 800c154:	f7fe fed4 	bl	800af00 <_malloc_r>
 800c158:	b948      	cbnz	r0, 800c16e <__smakebuf_r+0x46>
 800c15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c15e:	059a      	lsls	r2, r3, #22
 800c160:	d4ee      	bmi.n	800c140 <__smakebuf_r+0x18>
 800c162:	f023 0303 	bic.w	r3, r3, #3
 800c166:	f043 0302 	orr.w	r3, r3, #2
 800c16a:	81a3      	strh	r3, [r4, #12]
 800c16c:	e7e2      	b.n	800c134 <__smakebuf_r+0xc>
 800c16e:	89a3      	ldrh	r3, [r4, #12]
 800c170:	6020      	str	r0, [r4, #0]
 800c172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c176:	81a3      	strh	r3, [r4, #12]
 800c178:	9b01      	ldr	r3, [sp, #4]
 800c17a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c17e:	b15b      	cbz	r3, 800c198 <__smakebuf_r+0x70>
 800c180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c184:	4630      	mov	r0, r6
 800c186:	f000 f81d 	bl	800c1c4 <_isatty_r>
 800c18a:	b128      	cbz	r0, 800c198 <__smakebuf_r+0x70>
 800c18c:	89a3      	ldrh	r3, [r4, #12]
 800c18e:	f023 0303 	bic.w	r3, r3, #3
 800c192:	f043 0301 	orr.w	r3, r3, #1
 800c196:	81a3      	strh	r3, [r4, #12]
 800c198:	89a3      	ldrh	r3, [r4, #12]
 800c19a:	431d      	orrs	r5, r3
 800c19c:	81a5      	strh	r5, [r4, #12]
 800c19e:	e7cf      	b.n	800c140 <__smakebuf_r+0x18>

0800c1a0 <_fstat_r>:
 800c1a0:	b538      	push	{r3, r4, r5, lr}
 800c1a2:	4d07      	ldr	r5, [pc, #28]	@ (800c1c0 <_fstat_r+0x20>)
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	4608      	mov	r0, r1
 800c1aa:	4611      	mov	r1, r2
 800c1ac:	602b      	str	r3, [r5, #0]
 800c1ae:	f7f7 fda5 	bl	8003cfc <_fstat>
 800c1b2:	1c43      	adds	r3, r0, #1
 800c1b4:	d102      	bne.n	800c1bc <_fstat_r+0x1c>
 800c1b6:	682b      	ldr	r3, [r5, #0]
 800c1b8:	b103      	cbz	r3, 800c1bc <_fstat_r+0x1c>
 800c1ba:	6023      	str	r3, [r4, #0]
 800c1bc:	bd38      	pop	{r3, r4, r5, pc}
 800c1be:	bf00      	nop
 800c1c0:	20000c68 	.word	0x20000c68

0800c1c4 <_isatty_r>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	4d06      	ldr	r5, [pc, #24]	@ (800c1e0 <_isatty_r+0x1c>)
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	4604      	mov	r4, r0
 800c1cc:	4608      	mov	r0, r1
 800c1ce:	602b      	str	r3, [r5, #0]
 800c1d0:	f7f7 fda4 	bl	8003d1c <_isatty>
 800c1d4:	1c43      	adds	r3, r0, #1
 800c1d6:	d102      	bne.n	800c1de <_isatty_r+0x1a>
 800c1d8:	682b      	ldr	r3, [r5, #0]
 800c1da:	b103      	cbz	r3, 800c1de <_isatty_r+0x1a>
 800c1dc:	6023      	str	r3, [r4, #0]
 800c1de:	bd38      	pop	{r3, r4, r5, pc}
 800c1e0:	20000c68 	.word	0x20000c68

0800c1e4 <fmaxf>:
 800c1e4:	b508      	push	{r3, lr}
 800c1e6:	ed2d 8b02 	vpush	{d8}
 800c1ea:	eeb0 8a40 	vmov.f32	s16, s0
 800c1ee:	eef0 8a60 	vmov.f32	s17, s1
 800c1f2:	f000 f831 	bl	800c258 <__fpclassifyf>
 800c1f6:	b930      	cbnz	r0, 800c206 <fmaxf+0x22>
 800c1f8:	eeb0 8a68 	vmov.f32	s16, s17
 800c1fc:	eeb0 0a48 	vmov.f32	s0, s16
 800c200:	ecbd 8b02 	vpop	{d8}
 800c204:	bd08      	pop	{r3, pc}
 800c206:	eeb0 0a68 	vmov.f32	s0, s17
 800c20a:	f000 f825 	bl	800c258 <__fpclassifyf>
 800c20e:	2800      	cmp	r0, #0
 800c210:	d0f4      	beq.n	800c1fc <fmaxf+0x18>
 800c212:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c21a:	dded      	ble.n	800c1f8 <fmaxf+0x14>
 800c21c:	e7ee      	b.n	800c1fc <fmaxf+0x18>

0800c21e <fminf>:
 800c21e:	b508      	push	{r3, lr}
 800c220:	ed2d 8b02 	vpush	{d8}
 800c224:	eeb0 8a40 	vmov.f32	s16, s0
 800c228:	eef0 8a60 	vmov.f32	s17, s1
 800c22c:	f000 f814 	bl	800c258 <__fpclassifyf>
 800c230:	b930      	cbnz	r0, 800c240 <fminf+0x22>
 800c232:	eeb0 8a68 	vmov.f32	s16, s17
 800c236:	eeb0 0a48 	vmov.f32	s0, s16
 800c23a:	ecbd 8b02 	vpop	{d8}
 800c23e:	bd08      	pop	{r3, pc}
 800c240:	eeb0 0a68 	vmov.f32	s0, s17
 800c244:	f000 f808 	bl	800c258 <__fpclassifyf>
 800c248:	2800      	cmp	r0, #0
 800c24a:	d0f4      	beq.n	800c236 <fminf+0x18>
 800c24c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c254:	d5ed      	bpl.n	800c232 <fminf+0x14>
 800c256:	e7ee      	b.n	800c236 <fminf+0x18>

0800c258 <__fpclassifyf>:
 800c258:	ee10 3a10 	vmov	r3, s0
 800c25c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800c260:	d00d      	beq.n	800c27e <__fpclassifyf+0x26>
 800c262:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800c266:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800c26a:	d30a      	bcc.n	800c282 <__fpclassifyf+0x2a>
 800c26c:	4b07      	ldr	r3, [pc, #28]	@ (800c28c <__fpclassifyf+0x34>)
 800c26e:	1e42      	subs	r2, r0, #1
 800c270:	429a      	cmp	r2, r3
 800c272:	d908      	bls.n	800c286 <__fpclassifyf+0x2e>
 800c274:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800c278:	4258      	negs	r0, r3
 800c27a:	4158      	adcs	r0, r3
 800c27c:	4770      	bx	lr
 800c27e:	2002      	movs	r0, #2
 800c280:	4770      	bx	lr
 800c282:	2004      	movs	r0, #4
 800c284:	4770      	bx	lr
 800c286:	2003      	movs	r0, #3
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	007ffffe 	.word	0x007ffffe

0800c290 <_init>:
 800c290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c292:	bf00      	nop
 800c294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c296:	bc08      	pop	{r3}
 800c298:	469e      	mov	lr, r3
 800c29a:	4770      	bx	lr

0800c29c <_fini>:
 800c29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29e:	bf00      	nop
 800c2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2a2:	bc08      	pop	{r3}
 800c2a4:	469e      	mov	lr, r3
 800c2a6:	4770      	bx	lr
