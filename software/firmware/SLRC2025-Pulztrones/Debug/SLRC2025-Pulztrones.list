
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b898  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  0800ba68  0800ba68  0000ca68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c24c  0800c24c  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c24c  0800c24c  0000d24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c254  0800c254  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c254  0800c254  0000d254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c258  0800c258  0000d258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c25c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c34  200001d8  0800c434  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e0c  0800c434  0000ee0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ee0  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004085  00000000  00000000  000270e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  0002b170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000125c  00000000  00000000  0002c960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282a6  00000000  00000000  0002dbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000205a6  00000000  00000000  00055e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e80c4  00000000  00000000  00076408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015e4cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007290  00000000  00000000  0015e510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  001657a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ba50 	.word	0x0800ba50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800ba50 	.word	0x0800ba50

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <AnalogMux_SelectChannel>:
/**
 * @brief Select a channel on the multiplexer
 * @param channel Channel number (0-15)
 */
void AnalogMux_SelectChannel(uint8_t channel)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
    // Ensure channel is within valid range (0-15)
    if (channel > 15)
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d901      	bls.n	8000fc8 <AnalogMux_SelectChannel+0x14>
        channel = 15;
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	71fb      	strb	r3, [r7, #7]

    // Set S0 (least significant bit)
    if (channel & 0x01)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d006      	beq.n	8000fe0 <AnalogMux_SelectChannel+0x2c>
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fd8:	4823      	ldr	r0, [pc, #140]	@ (8001068 <AnalogMux_SelectChannel+0xb4>)
 8000fda:	f004 fa13 	bl	8005404 <HAL_GPIO_WritePin>
 8000fde:	e005      	b.n	8000fec <AnalogMux_SelectChannel+0x38>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fe6:	4820      	ldr	r0, [pc, #128]	@ (8001068 <AnalogMux_SelectChannel+0xb4>)
 8000fe8:	f004 fa0c 	bl	8005404 <HAL_GPIO_WritePin>

    // Set S1
    if (channel & 0x02)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <AnalogMux_SelectChannel+0x50>
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ffc:	481a      	ldr	r0, [pc, #104]	@ (8001068 <AnalogMux_SelectChannel+0xb4>)
 8000ffe:	f004 fa01 	bl	8005404 <HAL_GPIO_WritePin>
 8001002:	e005      	b.n	8001010 <AnalogMux_SelectChannel+0x5c>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800100a:	4817      	ldr	r0, [pc, #92]	@ (8001068 <AnalogMux_SelectChannel+0xb4>)
 800100c:	f004 f9fa 	bl	8005404 <HAL_GPIO_WritePin>

    // Set S2
    if (channel & 0x04)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	2b00      	cmp	r3, #0
 8001018:	d006      	beq.n	8001028 <AnalogMux_SelectChannel+0x74>
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001020:	4811      	ldr	r0, [pc, #68]	@ (8001068 <AnalogMux_SelectChannel+0xb4>)
 8001022:	f004 f9ef 	bl	8005404 <HAL_GPIO_WritePin>
 8001026:	e005      	b.n	8001034 <AnalogMux_SelectChannel+0x80>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800102e:	480e      	ldr	r0, [pc, #56]	@ (8001068 <AnalogMux_SelectChannel+0xb4>)
 8001030:	f004 f9e8 	bl	8005404 <HAL_GPIO_WritePin>

    // Set S3 (most significant bit)
    if (channel & 0x08)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	2b00      	cmp	r3, #0
 800103c:	d006      	beq.n	800104c <AnalogMux_SelectChannel+0x98>
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001044:	4808      	ldr	r0, [pc, #32]	@ (8001068 <AnalogMux_SelectChannel+0xb4>)
 8001046:	f004 f9dd 	bl	8005404 <HAL_GPIO_WritePin>
 800104a:	e005      	b.n	8001058 <AnalogMux_SelectChannel+0xa4>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <AnalogMux_SelectChannel+0xb4>)
 8001054:	f004 f9d6 	bl	8005404 <HAL_GPIO_WritePin>

    // Add short delay for the multiplexer to settle
    // Typically 0.5-1 microsecond is enough for the CD74HC4067
    delayMicroseconds(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f000 fac7 	bl	80015ec <delayMicroseconds>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40020400 	.word	0x40020400

0800106c <AnalogMux_ReadADC>:
/**
 * @brief Read the ADC value from the currently selected channel
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadADC(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
    uint16_t adcValue = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	80fb      	strh	r3, [r7, #6]

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 8001076:	480b      	ldr	r0, [pc, #44]	@ (80010a4 <AnalogMux_ReadADC+0x38>)
 8001078:	f002 ffd6 	bl	8004028 <HAL_ADC_Start>

    // Wait for conversion to complete (timeout after 100 cycles)
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 800107c:	2164      	movs	r1, #100	@ 0x64
 800107e:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <AnalogMux_ReadADC+0x38>)
 8001080:	f003 f8d7 	bl	8004232 <HAL_ADC_PollForConversion>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d104      	bne.n	8001094 <AnalogMux_ReadADC+0x28>
    {
        // Read the converted value
        adcValue = HAL_ADC_GetValue(&hadc1);
 800108a:	4806      	ldr	r0, [pc, #24]	@ (80010a4 <AnalogMux_ReadADC+0x38>)
 800108c:	f003 f95c 	bl	8004348 <HAL_ADC_GetValue>
 8001090:	4603      	mov	r3, r0
 8001092:	80fb      	strh	r3, [r7, #6]
    }

    // Stop ADC conversion
    HAL_ADC_Stop(&hadc1);
 8001094:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <AnalogMux_ReadADC+0x38>)
 8001096:	f003 f899 	bl	80041cc <HAL_ADC_Stop>

    return adcValue;
 800109a:	88fb      	ldrh	r3, [r7, #6]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000210 	.word	0x20000210

080010a8 <AnalogMux_ReadChannel>:
 * @brief Read ADC value from a specific channel (selects channel then reads)
 * @param channel Channel number (0-15)
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadChannel(uint8_t channel)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
    // Select the desired channel
    AnalogMux_SelectChannel(channel);
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff7d 	bl	8000fb4 <AnalogMux_SelectChannel>

    // Allow settling time for the analog signal
    delayMicroseconds(5);
 80010ba:	2005      	movs	r0, #5
 80010bc:	f000 fa96 	bl	80015ec <delayMicroseconds>

    // Read and return the ADC value
    return AnalogMux_ReadADC();
 80010c0:	f7ff ffd4 	bl	800106c <AnalogMux_ReadADC>
 80010c4:	4603      	mov	r3, r0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <Buzzer_On>:
#include "buzzer.h"
#include "main.h"

// Turn on the buzzer (PC15 high)
void Buzzer_On(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2120      	movs	r1, #32
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <Buzzer_On+0x14>)
 80010da:	f004 f993 	bl	8005404 <HAL_GPIO_WritePin>
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40020000 	.word	0x40020000

080010e8 <Buzzer_Off>:

// Turn off the buzzer (PC15 low)
void Buzzer_Off(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2120      	movs	r1, #32
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <Buzzer_Off+0x14>)
 80010f2:	f004 f987 	bl	8005404 <HAL_GPIO_WritePin>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020000 	.word	0x40020000

08001100 <Buzzer_Toggle>:

// Toggle the buzzer state with a specified delay
void Buzzer_Toggle(uint32_t delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    Buzzer_On();
 8001108:	f7ff ffe2 	bl	80010d0 <Buzzer_On>
    HAL_Delay(delay);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f002 ff23 	bl	8003f58 <HAL_Delay>
    Buzzer_Off();
 8001112:	f7ff ffe9 	bl	80010e8 <Buzzer_Off>
    HAL_Delay(delay);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f002 ff1e 	bl	8003f58 <HAL_Delay>
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <Buzzer_UniquePattern>:

void Buzzer_UniquePattern(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
    // Pattern: Short-Short-Long-Short-Long
    // Total duration: 1000ms (1 second)

    Buzzer_On();
 8001128:	f7ff ffd2 	bl	80010d0 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 800112c:	2064      	movs	r0, #100	@ 0x64
 800112e:	f002 ff13 	bl	8003f58 <HAL_Delay>
    Buzzer_Off();
 8001132:	f7ff ffd9 	bl	80010e8 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 8001136:	2064      	movs	r0, #100	@ 0x64
 8001138:	f002 ff0e 	bl	8003f58 <HAL_Delay>

    Buzzer_On();
 800113c:	f7ff ffc8 	bl	80010d0 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 8001140:	2064      	movs	r0, #100	@ 0x64
 8001142:	f002 ff09 	bl	8003f58 <HAL_Delay>
    Buzzer_Off();
 8001146:	f7ff ffcf 	bl	80010e8 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800114a:	2064      	movs	r0, #100	@ 0x64
 800114c:	f002 ff04 	bl	8003f58 <HAL_Delay>

    Buzzer_On();
 8001150:	f7ff ffbe 	bl	80010d0 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 8001154:	20c8      	movs	r0, #200	@ 0xc8
 8001156:	f002 feff 	bl	8003f58 <HAL_Delay>
    Buzzer_Off();
 800115a:	f7ff ffc5 	bl	80010e8 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800115e:	2064      	movs	r0, #100	@ 0x64
 8001160:	f002 fefa 	bl	8003f58 <HAL_Delay>

    Buzzer_On();
 8001164:	f7ff ffb4 	bl	80010d0 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 8001168:	2064      	movs	r0, #100	@ 0x64
 800116a:	f002 fef5 	bl	8003f58 <HAL_Delay>
    Buzzer_Off();
 800116e:	f7ff ffbb 	bl	80010e8 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 8001172:	2064      	movs	r0, #100	@ 0x64
 8001174:	f002 fef0 	bl	8003f58 <HAL_Delay>

    Buzzer_On();
 8001178:	f7ff ffaa 	bl	80010d0 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 800117c:	20c8      	movs	r0, #200	@ 0xc8
 800117e:	f002 feeb 	bl	8003f58 <HAL_Delay>
    Buzzer_Off();
 8001182:	f7ff ffb1 	bl	80010e8 <Buzzer_Off>
    // No delay at the end to make it exactly 1 second
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}

0800118a <Controller_Init>:
#include "fonts.h"
#include <stdio.h>

static float oldSpeed = 0;

void Controller_Init(Controller *controller) {
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
    // Initialize motor struct
	controller->forward_error = 0;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
	controller->rotational_error = 0;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	605a      	str	r2, [r3, #4]
	controller->previous_forward_error = 0;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
	controller->previous_rotational_error = 0;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
	controller->velocity = 0;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
	controller->omega = 0;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
	controller->left_motor_pwm = 0;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
	controller->right_motor_pwm = 0;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
	controller->controllers_enabled = 1;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]
	controller->feedforward_enabled = 1;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <Controller_ResetControllers>:
}

/**
 * Reset the error integrals for both forward and rotational controllers.
 */
void Controller_ResetControllers(Controller *controller) {
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
    controller->forward_error = 0;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
    controller->rotational_error = 0;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	605a      	str	r2, [r3, #4]
    controller->previous_forward_error = 0;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
    controller->previous_rotational_error = 0;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
	...

08001224 <UpdateControllers>:


/**
 * Update motor controllers based on velocity, angular velocity, and steering adjustment.
 */
void UpdateControllers(Controller *controller, float velocity, float omega, float steering_adjustment) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b090      	sub	sp, #64	@ 0x40
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001230:	edc7 0a01 	vstr	s1, [r7, #4]
 8001234:	ed87 1a00 	vstr	s2, [r7]
    float forward_output, rotational_output, left_output, right_output;
    //float left_speed, right_speed, left_ff, right_ff;

    controller->velocity = velocity;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	611a      	str	r2, [r3, #16]
    controller->omega = omega;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	615a      	str	r2, [r3, #20]

    // Forward motion control
    float forward_increment = velocity * LOOP_INTERVAL;//
 8001244:	4b6c      	ldr	r3, [pc, #432]	@ (80013f8 <UpdateControllers+0x1d4>)
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	ed97 7a02 	vldr	s14, [r7, #8]
 800124e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001252:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    controller->forward_error += forward_increment - robot_fwd_change();
 8001256:	f000 faa5 	bl	80017a4 <robot_fwd_change>
 800125a:	eeb0 7a40 	vmov.f32	s14, s0
 800125e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001262:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	edc3 7a00 	vstr	s15, [r3]
    float forward_diff = controller->forward_error - controller->previous_forward_error;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	ed93 7a00 	vldr	s14, [r3]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001286:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    controller->previous_forward_error = controller->forward_error;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	609a      	str	r2, [r3, #8]
    forward_output = FWD_KP * controller->forward_error + FWD_KD * forward_diff;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	ed93 7a00 	vldr	s14, [r3]
 8001298:	4b58      	ldr	r3, [pc, #352]	@ (80013fc <UpdateControllers+0x1d8>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a2:	4b57      	ldr	r3, [pc, #348]	@ (8001400 <UpdateControllers+0x1dc>)
 80012a4:	edd3 6a00 	vldr	s13, [r3]
 80012a8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80012ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Rotational control
    float rotational_increment = omega * LOOP_INTERVAL;
 80012b8:	4b4f      	ldr	r3, [pc, #316]	@ (80013f8 <UpdateControllers+0x1d4>)
 80012ba:	edd3 7a00 	vldr	s15, [r3]
 80012be:	ed97 7a01 	vldr	s14, [r7, #4]
 80012c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    controller->rotational_error += rotational_increment - robot_rot_change();
 80012ca:	f000 fa7d 	bl	80017c8 <robot_rot_change>
 80012ce:	eeb0 7a40 	vmov.f32	s14, s0
 80012d2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80012d6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80012e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	edc3 7a01 	vstr	s15, [r3, #4]
    controller->rotational_error -= steering_adjustment;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80012f0:	edd7 7a00 	vldr	s15, [r7]
 80012f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	edc3 7a01 	vstr	s15, [r3, #4]
    float rotational_diff = controller->rotational_error - controller->previous_rotational_error;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	ed93 7a01 	vldr	s14, [r3, #4]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	edd3 7a03 	vldr	s15, [r3, #12]
 800130a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    controller->previous_rotational_error = controller->rotational_error;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	60da      	str	r2, [r3, #12]
    rotational_output = ROT_KP * controller->rotational_error + ROT_KD * rotational_diff;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001320:	4b38      	ldr	r3, [pc, #224]	@ (8001404 <UpdateControllers+0x1e0>)
 8001322:	edd3 7a00 	vldr	s15, [r3]
 8001326:	ee27 7a27 	vmul.f32	s14, s14, s15
 800132a:	4b37      	ldr	r3, [pc, #220]	@ (8001408 <UpdateControllers+0x1e4>)
 800132c:	edd3 6a00 	vldr	s13, [r3]
 8001330:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001334:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800133c:	edc7 7a08 	vstr	s15, [r7, #32]

    // Combine forward and rotational outputs
    left_output = forward_output - rotational_output;
 8001340:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001344:	edd7 7a08 	vldr	s15, [r7, #32]
 8001348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    right_output = forward_output + rotational_output;
 8001350:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001354:	edd7 7a08 	vldr	s15, [r7, #32]
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    float tangent_speed = omega * ROBOT_RADIUS * RADIANS_PER_DEGREE;
 8001360:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <UpdateControllers+0x1e8>)
 8001362:	ed93 7a00 	vldr	s14, [r3]
 8001366:	edd7 7a01 	vldr	s15, [r7, #4]
 800136a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800136e:	4b28      	ldr	r3, [pc, #160]	@ (8001410 <UpdateControllers+0x1ec>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001378:	edc7 7a07 	vstr	s15, [r7, #28]

	float left_speed = velocity - tangent_speed;
 800137c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001380:	edd7 7a07 	vldr	s15, [r7, #28]
 8001384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001388:	edc7 7a06 	vstr	s15, [r7, #24]
	float right_speed = velocity + tangent_speed;
 800138c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001390:	edd7 7a07 	vldr	s15, [r7, #28]
 8001394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001398:	edc7 7a05 	vstr	s15, [r7, #20]

	if (controller->feedforward_enabled) {
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d017      	beq.n	80013d6 <UpdateControllers+0x1b2>
		// Feedforward calculation
		left_output += leftFeedForward(left_speed);
 80013a6:	ed97 0a06 	vldr	s0, [r7, #24]
 80013aa:	f000 f833 	bl	8001414 <leftFeedForward>
 80013ae:	eeb0 7a40 	vmov.f32	s14, s0
 80013b2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80013b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013ba:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		right_output += rightFeedForward(right_speed);
 80013be:	ed97 0a05 	vldr	s0, [r7, #20]
 80013c2:	f000 f88d 	bl	80014e0 <rightFeedForward>
 80013c6:	eeb0 7a40 	vmov.f32	s14, s0
 80013ca:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80013ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013d2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	}

    if (controller->controllers_enabled) {
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d007      	beq.n	80013f0 <UpdateControllers+0x1cc>
    	setMotorLPWM(left_output);
 80013e0:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80013e4:	f000 fef4 	bl	80021d0 <setMotorLPWM>
        setMotorRPWM(right_output);
 80013e8:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80013ec:	f000 ff36 	bl	800225c <setMotorRPWM>
    }


}
 80013f0:	bf00      	nop
 80013f2:	3740      	adds	r7, #64	@ 0x40
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	0800ba78 	.word	0x0800ba78
 80013fc:	0800ba88 	.word	0x0800ba88
 8001400:	0800ba8c 	.word	0x0800ba8c
 8001404:	0800ba90 	.word	0x0800ba90
 8001408:	0800ba94 	.word	0x0800ba94
 800140c:	0800ba68 	.word	0x0800ba68
 8001410:	0800ba70 	.word	0x0800ba70

08001414 <leftFeedForward>:


float leftFeedForward(float speed) {
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	ed87 0a01 	vstr	s0, [r7, #4]
//  static float oldSpeed = speed;
  float leftFF = speed * SPEED_FF;
 800141e:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <leftFeedForward+0xb8>)
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	ed97 7a01 	vldr	s14, [r7, #4]
 8001428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142c:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 8001430:	edd7 7a01 	vldr	s15, [r7, #4]
 8001434:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143c:	dd09      	ble.n	8001452 <leftFeedForward+0x3e>
    leftFF += BIAS_FF;
 800143e:	4b24      	ldr	r3, [pc, #144]	@ (80014d0 <leftFeedForward+0xbc>)
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	ed97 7a05 	vldr	s14, [r7, #20]
 8001448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001450:	e00f      	b.n	8001472 <leftFeedForward+0x5e>
  } else if (speed < 0) {
 8001452:	edd7 7a01 	vldr	s15, [r7, #4]
 8001456:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800145a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145e:	d508      	bpl.n	8001472 <leftFeedForward+0x5e>
    leftFF -= BIAS_FF;
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <leftFeedForward+0xbc>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	ed97 7a05 	vldr	s14, [r7, #20]
 800146a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800146e:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <leftFeedForward+0xc0>)
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	ed97 7a01 	vldr	s14, [r7, #4]
 800147c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001480:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <leftFeedForward+0xc4>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148a:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 800148e:	4a11      	ldr	r2, [pc, #68]	@ (80014d4 <leftFeedForward+0xc0>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 8001494:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <leftFeedForward+0xc8>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	ed97 7a04 	vldr	s14, [r7, #16]
 800149e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a2:	edc7 7a03 	vstr	s15, [r7, #12]
  leftFF += accFF;
 80014a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80014aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b2:	edc7 7a05 	vstr	s15, [r7, #20]
  return leftFF;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	ee07 3a90 	vmov	s15, r3
}
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	0800ba7c 	.word	0x0800ba7c
 80014d0:	0800ba84 	.word	0x0800ba84
 80014d4:	200001f4 	.word	0x200001f4
 80014d8:	0800ba74 	.word	0x0800ba74
 80014dc:	0800ba80 	.word	0x0800ba80

080014e0 <rightFeedForward>:

float rightFeedForward(float speed) {
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	ed87 0a01 	vstr	s0, [r7, #4]
  //static float oldSpeed = speed;
  float rightFF = speed * SPEED_FF;
 80014ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <rightFeedForward+0xb8>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80014f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f8:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001508:	dd09      	ble.n	800151e <rightFeedForward+0x3e>
    rightFF += BIAS_FF;
 800150a:	4b24      	ldr	r3, [pc, #144]	@ (800159c <rightFeedForward+0xbc>)
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	ed97 7a05 	vldr	s14, [r7, #20]
 8001514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001518:	edc7 7a05 	vstr	s15, [r7, #20]
 800151c:	e00f      	b.n	800153e <rightFeedForward+0x5e>
  } else if (speed < 0) {
 800151e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001522:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	d508      	bpl.n	800153e <rightFeedForward+0x5e>
    rightFF -= BIAS_FF;
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <rightFeedForward+0xbc>)
 800152e:	edd3 7a00 	vldr	s15, [r3]
 8001532:	ed97 7a05 	vldr	s14, [r7, #20]
 8001536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153a:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 800153e:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <rightFeedForward+0xc0>)
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ed97 7a01 	vldr	s14, [r7, #4]
 8001548:	ee37 7a67 	vsub.f32	s14, s14, s15
 800154c:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <rightFeedForward+0xc4>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001556:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 800155a:	4a11      	ldr	r2, [pc, #68]	@ (80015a0 <rightFeedForward+0xc0>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <rightFeedForward+0xc8>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	ed97 7a04 	vldr	s14, [r7, #16]
 800156a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156e:	edc7 7a03 	vstr	s15, [r7, #12]
  rightFF += accFF;
 8001572:	ed97 7a05 	vldr	s14, [r7, #20]
 8001576:	edd7 7a03 	vldr	s15, [r7, #12]
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	edc7 7a05 	vstr	s15, [r7, #20]
  return rightFF;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	ee07 3a90 	vmov	s15, r3
}
 8001588:	eeb0 0a67 	vmov.f32	s0, s15
 800158c:	371c      	adds	r7, #28
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	0800ba7c 	.word	0x0800ba7c
 800159c:	0800ba84 	.word	0x0800ba84
 80015a0:	200001f4 	.word	0x200001f4
 80015a4:	0800ba74 	.word	0x0800ba74
 80015a8:	0800ba80 	.word	0x0800ba80

080015ac <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <Delay_Init+0x38>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10e      	bne.n	80015da <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <Delay_Init+0x38>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <Delay_Init+0x38>)
 80015c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015c6:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80015c8:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <Delay_Init+0x3c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <Delay_Init+0x3c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <Delay_Init+0x3c>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6013      	str	r3, [r2, #0]
    }
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000edf0 	.word	0xe000edf0
 80015e8:	e0001000 	.word	0xe0001000

080015ec <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 80015f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <delayMicroseconds+0x38>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 180; // Our MCU runs at 180 MHz, so each microsecond lasts 16 clock ticks
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	22b4      	movs	r2, #180	@ 0xb4
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8001604:	bf00      	nop
 8001606:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <delayMicroseconds+0x38>)
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	429a      	cmp	r2, r3
 8001612:	d8f8      	bhi.n	8001606 <delayMicroseconds+0x1a>
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e0001000 	.word	0xe0001000

08001628 <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 800162c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001632:	b21b      	sxth	r3, r3
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 8001644:	4b03      	ldr	r3, [pc, #12]	@ (8001654 <getLeftEncoderCounts+0x14>)
 8001646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001648:	b21b      	sxth	r3, r3
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40010000 	.word	0x40010000

08001658 <resetEncodersinSystick>:
	previous_left_count = 0;
	previous_right_count = 0;

}

void resetEncodersinSystick() {
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 800165c:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <resetEncodersinSystick+0x1c>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 8001662:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40010000 	.word	0x40010000

08001678 <update_Encoder_Data>:

void update_Encoder_Data(){
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
	int16_t left_count = getLeftEncoderCounts();
 800167e:	f7ff ffdf 	bl	8001640 <getLeftEncoderCounts>
 8001682:	4603      	mov	r3, r0
 8001684:	81fb      	strh	r3, [r7, #14]
	int16_t right_count = getRightEncoderCounts();
 8001686:	f7ff ffcf 	bl	8001628 <getRightEncoderCounts>
 800168a:	4603      	mov	r3, r0
 800168c:	81bb      	strh	r3, [r7, #12]

	left_delta = left_count - previous_left_count;
 800168e:	89fa      	ldrh	r2, [r7, #14]
 8001690:	4b3b      	ldr	r3, [pc, #236]	@ (8001780 <update_Encoder_Data+0x108>)
 8001692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001696:	b29b      	uxth	r3, r3
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	b29b      	uxth	r3, r3
 800169c:	b21a      	sxth	r2, r3
 800169e:	4b39      	ldr	r3, [pc, #228]	@ (8001784 <update_Encoder_Data+0x10c>)
 80016a0:	801a      	strh	r2, [r3, #0]
	previous_left_count = left_count;
 80016a2:	4a37      	ldr	r2, [pc, #220]	@ (8001780 <update_Encoder_Data+0x108>)
 80016a4:	89fb      	ldrh	r3, [r7, #14]
 80016a6:	8013      	strh	r3, [r2, #0]

	right_delta = right_count - previous_right_count;
 80016a8:	89ba      	ldrh	r2, [r7, #12]
 80016aa:	4b37      	ldr	r3, [pc, #220]	@ (8001788 <update_Encoder_Data+0x110>)
 80016ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	4b34      	ldr	r3, [pc, #208]	@ (800178c <update_Encoder_Data+0x114>)
 80016ba:	801a      	strh	r2, [r3, #0]
	previous_right_count = right_count;
 80016bc:	4a32      	ldr	r2, [pc, #200]	@ (8001788 <update_Encoder_Data+0x110>)
 80016be:	89bb      	ldrh	r3, [r7, #12]
 80016c0:	8013      	strh	r3, [r2, #0]

	float left_change = left_delta * MM_PER_COUNT_LEFT;
 80016c2:	4b30      	ldr	r3, [pc, #192]	@ (8001784 <update_Encoder_Data+0x10c>)
 80016c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff4b 	bl	8000564 <__aeabi_i2d>
 80016ce:	a32a      	add	r3, pc, #168	@ (adr r3, 8001778 <update_Encoder_Data+0x100>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7fe ffb0 	bl	8000638 <__aeabi_dmul>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f7ff fa82 	bl	8000be8 <__aeabi_d2f>
 80016e4:	4603      	mov	r3, r0
 80016e6:	60bb      	str	r3, [r7, #8]
	float right_change = right_delta * MM_PER_COUNT_RIGHT;
 80016e8:	4b28      	ldr	r3, [pc, #160]	@ (800178c <update_Encoder_Data+0x114>)
 80016ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ff38 	bl	8000564 <__aeabi_i2d>
 80016f4:	a320      	add	r3, pc, #128	@ (adr r3, 8001778 <update_Encoder_Data+0x100>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7fe ff9d 	bl	8000638 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f7ff fa6f 	bl	8000be8 <__aeabi_d2f>
 800170a:	4603      	mov	r3, r0
 800170c:	607b      	str	r3, [r7, #4]

	m_fwd_change = 0.5 * (right_change + left_change);
 800170e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001712:	edd7 7a02 	vldr	s15, [r7, #8]
 8001716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800171e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001722:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <update_Encoder_Data+0x118>)
 8001724:	edc3 7a00 	vstr	s15, [r3]
	m_robot_distance += m_fwd_change;
 8001728:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <update_Encoder_Data+0x11c>)
 800172a:	ed93 7a00 	vldr	s14, [r3]
 800172e:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <update_Encoder_Data+0x118>)
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001738:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <update_Encoder_Data+0x11c>)
 800173a:	edc3 7a00 	vstr	s15, [r3]
	m_rot_change = (right_change - left_change) * DEG_PER_MM_DIFFERENCE;
 800173e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001742:	edd7 7a02 	vldr	s15, [r7, #8]
 8001746:	ee37 7a67 	vsub.f32	s14, s14, s15
 800174a:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <update_Encoder_Data+0x120>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001754:	4b11      	ldr	r3, [pc, #68]	@ (800179c <update_Encoder_Data+0x124>)
 8001756:	edc3 7a00 	vstr	s15, [r3]
	m_robot_angle += m_rot_change;
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <update_Encoder_Data+0x128>)
 800175c:	ed93 7a00 	vldr	s14, [r3]
 8001760:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <update_Encoder_Data+0x124>)
 8001762:	edd3 7a00 	vldr	s15, [r3]
 8001766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176a:	4b0d      	ldr	r3, [pc, #52]	@ (80017a0 <update_Encoder_Data+0x128>)
 800176c:	edc3 7a00 	vstr	s15, [r3]


}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	58e4ab66 	.word	0x58e4ab66
 800177c:	3fb0cd2e 	.word	0x3fb0cd2e
 8001780:	20000204 	.word	0x20000204
 8001784:	20000200 	.word	0x20000200
 8001788:	20000206 	.word	0x20000206
 800178c:	20000202 	.word	0x20000202
 8001790:	20000208 	.word	0x20000208
 8001794:	200001f8 	.word	0x200001f8
 8001798:	0800ba6c 	.word	0x0800ba6c
 800179c:	2000020c 	.word	0x2000020c
 80017a0:	200001fc 	.word	0x200001fc

080017a4 <robot_fwd_change>:
	float omega;
	omega = LOOP_FREQUENCY * m_rot_change;
	return omega;
}

float robot_fwd_change() {
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
	float distance;
	distance = m_fwd_change;
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <robot_fwd_change+0x20>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	607b      	str	r3, [r7, #4]
	return distance;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	ee07 3a90 	vmov	s15, r3
}
 80017b6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	20000208 	.word	0x20000208

080017c8 <robot_rot_change>:

float robot_rot_change() {
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
	float distance;
	distance = m_rot_change;
 80017ce:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <robot_rot_change+0x20>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	607b      	str	r3, [r7, #4]
	return distance;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	ee07 3a90 	vmov	s15, r3
}
 80017da:	eeb0 0a67 	vmov.f32	s0, s15
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	2000020c 	.word	0x2000020c

080017ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f2:	f002 fb3f 	bl	8003e74 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f6:	f000 f8ab 	bl	8001950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017fa:	f000 fb8d 	bl	8001f18 <MX_GPIO_Init>
  MX_DMA_Init();
 80017fe:	f000 fb6b 	bl	8001ed8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001802:	f000 faeb 	bl	8001ddc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001806:	f000 f9c3 	bl	8001b90 <MX_TIM1_Init>
  MX_TIM2_Init();
 800180a:	f000 fa19 	bl	8001c40 <MX_TIM2_Init>
  MX_I2C2_Init();
 800180e:	f000 f991 	bl	8001b34 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8001812:	f000 fb0d 	bl	8001e30 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001816:	f000 fb35 	bl	8001e84 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800181a:	f000 f90b 	bl	8001a34 <MX_ADC1_Init>
  MX_I2C1_Init();
 800181e:	f000 f95b 	bl	8001ad8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001822:	f000 fa61 	bl	8001ce8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001826:	213c      	movs	r1, #60	@ 0x3c
 8001828:	483b      	ldr	r0, [pc, #236]	@ (8001918 <main+0x12c>)
 800182a:	f006 f8cd 	bl	80079c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800182e:	213c      	movs	r1, #60	@ 0x3c
 8001830:	483a      	ldr	r0, [pc, #232]	@ (800191c <main+0x130>)
 8001832:	f006 f8c9 	bl	80079c8 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001836:	2100      	movs	r1, #0
 8001838:	4839      	ldr	r0, [pc, #228]	@ (8001920 <main+0x134>)
 800183a:	f005 ff57 	bl	80076ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800183e:	2104      	movs	r1, #4
 8001840:	4837      	ldr	r0, [pc, #220]	@ (8001920 <main+0x134>)
 8001842:	f005 ff53 	bl	80076ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001846:	2108      	movs	r1, #8
 8001848:	4835      	ldr	r0, [pc, #212]	@ (8001920 <main+0x134>)
 800184a:	f005 ff4f 	bl	80076ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800184e:	210c      	movs	r1, #12
 8001850:	4833      	ldr	r0, [pc, #204]	@ (8001920 <main+0x134>)
 8001852:	f005 ff4b 	bl	80076ec <HAL_TIM_PWM_Start>

  SSD1306_Init();
 8001856:	f002 f8a1 	bl	800399c <SSD1306_Init>
    SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 800185a:	2301      	movs	r3, #1
 800185c:	9301      	str	r3, [sp, #4]
 800185e:	2340      	movs	r3, #64	@ 0x40
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2380      	movs	r3, #128	@ 0x80
 8001864:	4a2f      	ldr	r2, [pc, #188]	@ (8001924 <main+0x138>)
 8001866:	2100      	movs	r1, #0
 8001868:	2000      	movs	r0, #0
 800186a:	f002 fa01 	bl	8003c70 <SSD1306_DrawBitmap>
    SSD1306_UpdateScreen(); // update screen
 800186e:	f002 f959 	bl	8003b24 <SSD1306_UpdateScreen>




	  Buzzer_UniquePattern();
 8001872:	f7ff fc57 	bl	8001124 <Buzzer_UniquePattern>

  /*---------------------Delay--------------------------------*/
  Delay_Init();
 8001876:	f7ff fe99 	bl	80015ac <Delay_Init>
  /*-------------------------------------------------------------------*/

  //AnalogMux_Init();

  UART_Init(&huart3);
 800187a:	482b      	ldr	r0, [pc, #172]	@ (8001928 <main+0x13c>)
 800187c:	f002 f858 	bl	8003930 <UART_Init>

  /*---------------------Servo--------------------------------*/
  Servo_Init(50);  // 50Hz for standard servos
 8001880:	2032      	movs	r0, #50	@ 0x32
 8001882:	f001 fb6b 	bl	8002f5c <Servo_Init>


  // Or use them by name
  //Servo_SetAngleByName("base", 90);  // Set base to 120 degrees

  HAL_Delay(1000);
 8001886:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800188a:	f002 fb65 	bl	8003f58 <HAL_Delay>
  Controller_Init(&controller);
 800188e:	4827      	ldr	r0, [pc, #156]	@ (800192c <main+0x140>)
 8001890:	f7ff fc7b 	bl	800118a <Controller_Init>
    Profile_Reset(&forward_profile);
 8001894:	4826      	ldr	r0, [pc, #152]	@ (8001930 <main+0x144>)
 8001896:	f000 fdf3 	bl	8002480 <Profile_Reset>
    Profile_Reset(&rotation_profile);
 800189a:	4826      	ldr	r0, [pc, #152]	@ (8001934 <main+0x148>)
 800189c:	f000 fdf0 	bl	8002480 <Profile_Reset>
    Motion_Init(&motion, &controller, &forward_profile, &rotation_profile);
 80018a0:	4b24      	ldr	r3, [pc, #144]	@ (8001934 <main+0x148>)
 80018a2:	4a23      	ldr	r2, [pc, #140]	@ (8001930 <main+0x144>)
 80018a4:	4921      	ldr	r1, [pc, #132]	@ (800192c <main+0x140>)
 80018a6:	4824      	ldr	r0, [pc, #144]	@ (8001938 <main+0x14c>)
 80018a8:	f000 fbe2 	bl	8002070 <Motion_Init>
    Controller_ResetControllers(&controller);
 80018ac:	481f      	ldr	r0, [pc, #124]	@ (800192c <main+0x140>)
 80018ae:	f7ff fc9e 	bl	80011ee <Controller_ResetControllers>

  // Reset all servos to center position
  //Servo_ResetAll();

  Buzzer_Toggle(100);
 80018b2:	2064      	movs	r0, #100	@ 0x64
 80018b4:	f7ff fc24 	bl	8001100 <Buzzer_Toggle>

  /*-------------------------------------------------------------------*/
  //HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Enable UART interrupt

  HAL_Delay(2000);
 80018b8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018bc:	f002 fb4c 	bl	8003f58 <HAL_Delay>
  RAYKHA_Calibrate(&raykha_calibration, RAYKHA_LINE_WHITE);
 80018c0:	2101      	movs	r1, #1
 80018c2:	481e      	ldr	r0, [pc, #120]	@ (800193c <main+0x150>)
 80018c4:	f000 ffca 	bl	800285c <RAYKHA_Calibrate>

  Buzzer_Toggle(100);
 80018c8:	2064      	movs	r0, #100	@ 0x64
 80018ca:	f7ff fc19 	bl	8001100 <Buzzer_Toggle>

  set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 80018ce:	2005      	movs	r0, #5
 80018d0:	f001 fa14 	bl	8002cfc <set_steering_mode>

  //HAL_Delay(5000);
  Buzzer_Toggle(100);
 80018d4:	2064      	movs	r0, #100	@ 0x64
 80018d6:	f7ff fc13 	bl	8001100 <Buzzer_Toggle>

  HAL_Delay(2000);
 80018da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018de:	f002 fb3b 	bl	8003f58 <HAL_Delay>

  EnableSysTickFunction();
 80018e2:	f001 ffdf 	bl	80038a4 <EnableSysTickFunction>

  //setMotorLPWM(1);
  //setMotorRPWM(1);

  	  Motion_Move(&motion, 1200, 200, 0, 100);
 80018e6:	eddf 1a16 	vldr	s3, [pc, #88]	@ 8001940 <main+0x154>
 80018ea:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 8001944 <main+0x158>
 80018ee:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8001948 <main+0x15c>
 80018f2:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800194c <main+0x160>
 80018f6:	4810      	ldr	r0, [pc, #64]	@ (8001938 <main+0x14c>)
 80018f8:	f000 fc06 	bl	8002108 <Motion_Move>
//		  UART_Transmit(&huart6, buffer);
//
//		  // Wait for 1 second
//		  HAL_Delay(50);

	  Turn360Servo();
 80018fc:	f001 fb52 	bl	8002fa4 <Turn360Servo>
	    HAL_Delay(780);
 8001900:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 8001904:	f002 fb28 	bl	8003f58 <HAL_Delay>
	    Stop360Servo();
 8001908:	f001 fb64 	bl	8002fd4 <Stop360Servo>
	    HAL_Delay(1000);
 800190c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001910:	f002 fb22 	bl	8003f58 <HAL_Delay>
	  Turn360Servo();
 8001914:	bf00      	nop
 8001916:	e7f1      	b.n	80018fc <main+0x110>
 8001918:	20000300 	.word	0x20000300
 800191c:	20000348 	.word	0x20000348
 8001920:	20000390 	.word	0x20000390
 8001924:	0800bacc 	.word	0x0800bacc
 8001928:	20000420 	.word	0x20000420
 800192c:	200005f4 	.word	0x200005f4
 8001930:	200005ac 	.word	0x200005ac
 8001934:	200005d0 	.word	0x200005d0
 8001938:	20000540 	.word	0x20000540
 800193c:	20000514 	.word	0x20000514
 8001940:	42c80000 	.word	0x42c80000
 8001944:	00000000 	.word	0x00000000
 8001948:	43480000 	.word	0x43480000
 800194c:	44960000 	.word	0x44960000

08001950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b094      	sub	sp, #80	@ 0x50
 8001954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	2234      	movs	r2, #52	@ 0x34
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f008 f8f9 	bl	8009b56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	4b2c      	ldr	r3, [pc, #176]	@ (8001a2c <SystemClock_Config+0xdc>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197c:	4a2b      	ldr	r2, [pc, #172]	@ (8001a2c <SystemClock_Config+0xdc>)
 800197e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001982:	6413      	str	r3, [r2, #64]	@ 0x40
 8001984:	4b29      	ldr	r3, [pc, #164]	@ (8001a2c <SystemClock_Config+0xdc>)
 8001986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001990:	2300      	movs	r3, #0
 8001992:	603b      	str	r3, [r7, #0]
 8001994:	4b26      	ldr	r3, [pc, #152]	@ (8001a30 <SystemClock_Config+0xe0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a25      	ldr	r2, [pc, #148]	@ (8001a30 <SystemClock_Config+0xe0>)
 800199a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b23      	ldr	r3, [pc, #140]	@ (8001a30 <SystemClock_Config+0xe0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019ac:	2302      	movs	r3, #2
 80019ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019b0:	2301      	movs	r3, #1
 80019b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019b4:	2310      	movs	r3, #16
 80019b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019b8:	2302      	movs	r3, #2
 80019ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019bc:	2300      	movs	r3, #0
 80019be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019c0:	2308      	movs	r3, #8
 80019c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80019c4:	23b4      	movs	r3, #180	@ 0xb4
 80019c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019c8:	2302      	movs	r3, #2
 80019ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019cc:	2302      	movs	r3, #2
 80019ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019d0:	2302      	movs	r3, #2
 80019d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4618      	mov	r0, r3
 80019da:	f005 fb99 	bl	8007110 <HAL_RCC_OscConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019e4:	f000 fb3e 	bl	8002064 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019e8:	f004 fff8 	bl	80069dc <HAL_PWREx_EnableOverDrive>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019f2:	f000 fb37 	bl	8002064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f6:	230f      	movs	r3, #15
 80019f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fa:	2302      	movs	r3, #2
 80019fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a02:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a0c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	2105      	movs	r1, #5
 8001a14:	4618      	mov	r0, r3
 8001a16:	f005 f831 	bl	8006a7c <HAL_RCC_ClockConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001a20:	f000 fb20 	bl	8002064 <Error_Handler>
  }
}
 8001a24:	bf00      	nop
 8001a26:	3750      	adds	r7, #80	@ 0x50
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40007000 	.word	0x40007000

08001a34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a46:	4b21      	ldr	r3, [pc, #132]	@ (8001acc <MX_ADC1_Init+0x98>)
 8001a48:	4a21      	ldr	r2, [pc, #132]	@ (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001acc <MX_ADC1_Init+0x98>)
 8001a4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a54:	4b1d      	ldr	r3, [pc, #116]	@ (8001acc <MX_ADC1_Init+0x98>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <MX_ADC1_Init+0x98>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	@ (8001acc <MX_ADC1_Init+0x98>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a66:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <MX_ADC1_Init+0x98>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <MX_ADC1_Init+0x98>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a74:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <MX_ADC1_Init+0x98>)
 8001a76:	4a17      	ldr	r2, [pc, #92]	@ (8001ad4 <MX_ADC1_Init+0xa0>)
 8001a78:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a7a:	4b14      	ldr	r3, [pc, #80]	@ (8001acc <MX_ADC1_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <MX_ADC1_Init+0x98>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a86:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <MX_ADC1_Init+0x98>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <MX_ADC1_Init+0x98>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a94:	480d      	ldr	r0, [pc, #52]	@ (8001acc <MX_ADC1_Init+0x98>)
 8001a96:	f002 fa83 	bl	8003fa0 <HAL_ADC_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001aa0:	f000 fae0 	bl	8002064 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001aa4:	230a      	movs	r3, #10
 8001aa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4805      	ldr	r0, [pc, #20]	@ (8001acc <MX_ADC1_Init+0x98>)
 8001ab6:	f002 fc55 	bl	8004364 <HAL_ADC_ConfigChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ac0:	f000 fad0 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000210 	.word	0x20000210
 8001ad0:	40012000 	.word	0x40012000
 8001ad4:	0f000001 	.word	0x0f000001

08001ad8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001ade:	4a13      	ldr	r2, [pc, #76]	@ (8001b2c <MX_I2C1_Init+0x54>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001ae4:	4a12      	ldr	r2, [pc, #72]	@ (8001b30 <MX_I2C1_Init+0x58>)
 8001ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001af6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001afa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001afc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b02:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b08:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b14:	4804      	ldr	r0, [pc, #16]	@ (8001b28 <MX_I2C1_Init+0x50>)
 8001b16:	f003 fc8f 	bl	8005438 <HAL_I2C_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b20:	f000 faa0 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000258 	.word	0x20000258
 8001b2c:	40005400 	.word	0x40005400
 8001b30:	00061a80 	.word	0x00061a80

08001b34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b38:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <MX_I2C2_Init+0x50>)
 8001b3a:	4a13      	ldr	r2, [pc, #76]	@ (8001b88 <MX_I2C2_Init+0x54>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <MX_I2C2_Init+0x50>)
 8001b40:	4a12      	ldr	r2, [pc, #72]	@ (8001b8c <MX_I2C2_Init+0x58>)
 8001b42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <MX_I2C2_Init+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <MX_I2C2_Init+0x50>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <MX_I2C2_Init+0x50>)
 8001b52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b56:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <MX_I2C2_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <MX_I2C2_Init+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b64:	4b07      	ldr	r3, [pc, #28]	@ (8001b84 <MX_I2C2_Init+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <MX_I2C2_Init+0x50>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	@ (8001b84 <MX_I2C2_Init+0x50>)
 8001b72:	f003 fc61 	bl	8005438 <HAL_I2C_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b7c:	f000 fa72 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200002ac 	.word	0x200002ac
 8001b88:	40005800 	.word	0x40005800
 8001b8c:	000186a0 	.word	0x000186a0

08001b90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08c      	sub	sp, #48	@ 0x30
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	2224      	movs	r2, #36	@ 0x24
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f007 ffd9 	bl	8009b56 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bac:	4b22      	ldr	r3, [pc, #136]	@ (8001c38 <MX_TIM1_Init+0xa8>)
 8001bae:	4a23      	ldr	r2, [pc, #140]	@ (8001c3c <MX_TIM1_Init+0xac>)
 8001bb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bb2:	4b21      	ldr	r3, [pc, #132]	@ (8001c38 <MX_TIM1_Init+0xa8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c38 <MX_TIM1_Init+0xa8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c38 <MX_TIM1_Init+0xa8>)
 8001bc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <MX_TIM1_Init+0xa8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <MX_TIM1_Init+0xa8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd2:	4b19      	ldr	r3, [pc, #100]	@ (8001c38 <MX_TIM1_Init+0xa8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001be0:	2301      	movs	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	4619      	mov	r1, r3
 8001c02:	480d      	ldr	r0, [pc, #52]	@ (8001c38 <MX_TIM1_Init+0xa8>)
 8001c04:	f005 fe3a 	bl	800787c <HAL_TIM_Encoder_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001c0e:	f000 fa29 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4806      	ldr	r0, [pc, #24]	@ (8001c38 <MX_TIM1_Init+0xa8>)
 8001c20:	f006 faa4 	bl	800816c <HAL_TIMEx_MasterConfigSynchronization>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c2a:	f000 fa1b 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	3730      	adds	r7, #48	@ 0x30
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000300 	.word	0x20000300
 8001c3c:	40010000 	.word	0x40010000

08001c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08c      	sub	sp, #48	@ 0x30
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	2224      	movs	r2, #36	@ 0x24
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f007 ff81 	bl	8009b56 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c5c:	4b21      	ldr	r3, [pc, #132]	@ (8001ce4 <MX_TIM2_Init+0xa4>)
 8001c5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce4 <MX_TIM2_Init+0xa4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce4 <MX_TIM2_Init+0xa4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <MX_TIM2_Init+0xa4>)
 8001c72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <MX_TIM2_Init+0xa4>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <MX_TIM2_Init+0xa4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c84:	2303      	movs	r3, #3
 8001c86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	4619      	mov	r1, r3
 8001cae:	480d      	ldr	r0, [pc, #52]	@ (8001ce4 <MX_TIM2_Init+0xa4>)
 8001cb0:	f005 fde4 	bl	800787c <HAL_TIM_Encoder_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001cba:	f000 f9d3 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <MX_TIM2_Init+0xa4>)
 8001ccc:	f006 fa4e 	bl	800816c <HAL_TIMEx_MasterConfigSynchronization>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001cd6:	f000 f9c5 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	3730      	adds	r7, #48	@ 0x30
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000348 	.word	0x20000348

08001ce8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	@ 0x28
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cee:	f107 0320 	add.w	r3, r7, #32
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
 8001d04:	611a      	str	r2, [r3, #16]
 8001d06:	615a      	str	r2, [r3, #20]
 8001d08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d0a:	4b32      	ldr	r3, [pc, #200]	@ (8001dd4 <MX_TIM3_Init+0xec>)
 8001d0c:	4a32      	ldr	r2, [pc, #200]	@ (8001dd8 <MX_TIM3_Init+0xf0>)
 8001d0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d10:	4b30      	ldr	r3, [pc, #192]	@ (8001dd4 <MX_TIM3_Init+0xec>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d16:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd4 <MX_TIM3_Init+0xec>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd4 <MX_TIM3_Init+0xec>)
 8001d1e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001d22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d24:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd4 <MX_TIM3_Init+0xec>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd4 <MX_TIM3_Init+0xec>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d30:	4828      	ldr	r0, [pc, #160]	@ (8001dd4 <MX_TIM3_Init+0xec>)
 8001d32:	f005 fc8b 	bl	800764c <HAL_TIM_PWM_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001d3c:	f000 f992 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d48:	f107 0320 	add.w	r3, r7, #32
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4821      	ldr	r0, [pc, #132]	@ (8001dd4 <MX_TIM3_Init+0xec>)
 8001d50:	f006 fa0c 	bl	800816c <HAL_TIMEx_MasterConfigSynchronization>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001d5a:	f000 f983 	bl	8002064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d5e:	2360      	movs	r3, #96	@ 0x60
 8001d60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	2200      	movs	r2, #0
 8001d72:	4619      	mov	r1, r3
 8001d74:	4817      	ldr	r0, [pc, #92]	@ (8001dd4 <MX_TIM3_Init+0xec>)
 8001d76:	f005 feb5 	bl	8007ae4 <HAL_TIM_PWM_ConfigChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001d80:	f000 f970 	bl	8002064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	2204      	movs	r2, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4812      	ldr	r0, [pc, #72]	@ (8001dd4 <MX_TIM3_Init+0xec>)
 8001d8c:	f005 feaa 	bl	8007ae4 <HAL_TIM_PWM_ConfigChannel>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d96:	f000 f965 	bl	8002064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480c      	ldr	r0, [pc, #48]	@ (8001dd4 <MX_TIM3_Init+0xec>)
 8001da2:	f005 fe9f 	bl	8007ae4 <HAL_TIM_PWM_ConfigChannel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001dac:	f000 f95a 	bl	8002064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	220c      	movs	r2, #12
 8001db4:	4619      	mov	r1, r3
 8001db6:	4807      	ldr	r0, [pc, #28]	@ (8001dd4 <MX_TIM3_Init+0xec>)
 8001db8:	f005 fe94 	bl	8007ae4 <HAL_TIM_PWM_ConfigChannel>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001dc2:	f000 f94f 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dc6:	4803      	ldr	r0, [pc, #12]	@ (8001dd4 <MX_TIM3_Init+0xec>)
 8001dc8:	f001 fac2 	bl	8003350 <HAL_TIM_MspPostInit>

}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	@ 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000390 	.word	0x20000390
 8001dd8:	40000400 	.word	0x40000400

08001ddc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001de0:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <MX_USART2_UART_Init+0x4c>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	@ (8001e2c <MX_USART2_UART_Init+0x50>)
 8001de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001de6:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <MX_USART2_UART_Init+0x4c>)
 8001de8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <MX_USART2_UART_Init+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001df4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <MX_USART2_UART_Init+0x4c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <MX_USART2_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e00:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <MX_USART2_UART_Init+0x4c>)
 8001e02:	220c      	movs	r2, #12
 8001e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e06:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <MX_USART2_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <MX_USART2_UART_Init+0x4c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e12:	4805      	ldr	r0, [pc, #20]	@ (8001e28 <MX_USART2_UART_Init+0x4c>)
 8001e14:	f006 fa26 	bl	8008264 <HAL_UART_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e1e:	f000 f921 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200003d8 	.word	0x200003d8
 8001e2c:	40004400 	.word	0x40004400

08001e30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e34:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <MX_USART3_UART_Init+0x4c>)
 8001e36:	4a12      	ldr	r2, [pc, #72]	@ (8001e80 <MX_USART3_UART_Init+0x50>)
 8001e38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001e3a:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <MX_USART3_UART_Init+0x4c>)
 8001e3c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e42:	4b0e      	ldr	r3, [pc, #56]	@ (8001e7c <MX_USART3_UART_Init+0x4c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e48:	4b0c      	ldr	r3, [pc, #48]	@ (8001e7c <MX_USART3_UART_Init+0x4c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <MX_USART3_UART_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e54:	4b09      	ldr	r3, [pc, #36]	@ (8001e7c <MX_USART3_UART_Init+0x4c>)
 8001e56:	220c      	movs	r2, #12
 8001e58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5a:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <MX_USART3_UART_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e60:	4b06      	ldr	r3, [pc, #24]	@ (8001e7c <MX_USART3_UART_Init+0x4c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e66:	4805      	ldr	r0, [pc, #20]	@ (8001e7c <MX_USART3_UART_Init+0x4c>)
 8001e68:	f006 f9fc 	bl	8008264 <HAL_UART_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e72:	f000 f8f7 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000420 	.word	0x20000420
 8001e80:	40004800 	.word	0x40004800

08001e84 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <MX_USART6_UART_Init+0x4c>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ed4 <MX_USART6_UART_Init+0x50>)
 8001e8c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <MX_USART6_UART_Init+0x4c>)
 8001e90:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e94:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed0 <MX_USART6_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <MX_USART6_UART_Init+0x4c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <MX_USART6_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <MX_USART6_UART_Init+0x4c>)
 8001eaa:	220c      	movs	r2, #12
 8001eac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eae:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <MX_USART6_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <MX_USART6_UART_Init+0x4c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001eba:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <MX_USART6_UART_Init+0x4c>)
 8001ebc:	f006 f9d2 	bl	8008264 <HAL_UART_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001ec6:	f000 f8cd 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000468 	.word	0x20000468
 8001ed4:	40011400 	.word	0x40011400

08001ed8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <MX_DMA_Init+0x3c>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8001f14 <MX_DMA_Init+0x3c>)
 8001ee8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <MX_DMA_Init+0x3c>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	2039      	movs	r0, #57	@ 0x39
 8001f00:	f002 fd39 	bl	8004976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001f04:	2039      	movs	r0, #57	@ 0x39
 8001f06:	f002 fd52 	bl	80049ae <HAL_NVIC_EnableIRQ>

}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800

08001f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	@ 0x28
 8001f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	4b48      	ldr	r3, [pc, #288]	@ (8002054 <MX_GPIO_Init+0x13c>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a47      	ldr	r2, [pc, #284]	@ (8002054 <MX_GPIO_Init+0x13c>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b45      	ldr	r3, [pc, #276]	@ (8002054 <MX_GPIO_Init+0x13c>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b41      	ldr	r3, [pc, #260]	@ (8002054 <MX_GPIO_Init+0x13c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	4a40      	ldr	r2, [pc, #256]	@ (8002054 <MX_GPIO_Init+0x13c>)
 8001f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002054 <MX_GPIO_Init+0x13c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b3a      	ldr	r3, [pc, #232]	@ (8002054 <MX_GPIO_Init+0x13c>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	4a39      	ldr	r2, [pc, #228]	@ (8002054 <MX_GPIO_Init+0x13c>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f76:	4b37      	ldr	r3, [pc, #220]	@ (8002054 <MX_GPIO_Init+0x13c>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	4b33      	ldr	r3, [pc, #204]	@ (8002054 <MX_GPIO_Init+0x13c>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	4a32      	ldr	r2, [pc, #200]	@ (8002054 <MX_GPIO_Init+0x13c>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f92:	4b30      	ldr	r3, [pc, #192]	@ (8002054 <MX_GPIO_Init+0x13c>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIRPUMP_Pin|WATERPUMP_Pin, GPIO_PIN_SET);
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	2106      	movs	r1, #6
 8001fa2:	482d      	ldr	r0, [pc, #180]	@ (8002058 <MX_GPIO_Init+0x140>)
 8001fa4:	f003 fa2e 	bl	8005404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2120      	movs	r1, #32
 8001fac:	482b      	ldr	r0, [pc, #172]	@ (800205c <MX_GPIO_Init+0x144>)
 8001fae:	f003 fa29 	bl	8005404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001fb8:	4829      	ldr	r0, [pc, #164]	@ (8002060 <MX_GPIO_Init+0x148>)
 8001fba:	f003 fa23 	bl	8005404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fc4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4820      	ldr	r0, [pc, #128]	@ (8002058 <MX_GPIO_Init+0x140>)
 8001fd6:	f003 f881 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pins : AIRPUMP_Pin WATERPUMP_Pin */
  GPIO_InitStruct.Pin = AIRPUMP_Pin|WATERPUMP_Pin;
 8001fda:	2306      	movs	r3, #6
 8001fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4819      	ldr	r0, [pc, #100]	@ (8002058 <MX_GPIO_Init+0x140>)
 8001ff2:	f003 f873 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	4813      	ldr	r0, [pc, #76]	@ (800205c <MX_GPIO_Init+0x144>)
 800200e:	f003 f865 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 8002012:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002018:	2301      	movs	r3, #1
 800201a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4619      	mov	r1, r3
 800202a:	480d      	ldr	r0, [pc, #52]	@ (8002060 <MX_GPIO_Init+0x148>)
 800202c:	f003 f856 	bl	80050dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002030:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4619      	mov	r1, r3
 8002044:	4804      	ldr	r0, [pc, #16]	@ (8002058 <MX_GPIO_Init+0x140>)
 8002046:	f003 f849 	bl	80050dc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800204a:	bf00      	nop
 800204c:	3728      	adds	r7, #40	@ 0x28
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	40020800 	.word	0x40020800
 800205c:	40020000 	.word	0x40020000
 8002060:	40020400 	.word	0x40020400

08002064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002068:	b672      	cpsid	i
}
 800206a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <Error_Handler+0x8>

08002070 <Motion_Init>:
#include "uartcom.h"
#include "encoders.h"

extern UART_HandleTypeDef huart6;

void Motion_Init(Motion *motion, Controller *controller, Profile *forward, Profile *rotation) {
 8002070:	b4b0      	push	{r4, r5, r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
    motion->controller = *controller;  // Copy the controller structure
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4614      	mov	r4, r2
 8002084:	461d      	mov	r5, r3
 8002086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800208a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800208c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800208e:	682b      	ldr	r3, [r5, #0]
 8002090:	6023      	str	r3, [r4, #0]
    motion->forward = *forward;        // Copy the forward profile structure
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800209a:	4615      	mov	r5, r2
 800209c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800209e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a4:	682b      	ldr	r3, [r5, #0]
 80020a6:	6023      	str	r3, [r4, #0]
    motion->rotation = *rotation;      // Copy the rotation profile structure
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 80020b0:	4615      	mov	r5, r2
 80020b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ba:	682b      	ldr	r3, [r5, #0]
 80020bc:	6023      	str	r3, [r4, #0]
}
 80020be:	bf00      	nop
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bcb0      	pop	{r4, r5, r7}
 80020c6:	4770      	bx	lr

080020c8 <Motion_Velocity>:

float Motion_Position(Motion *motion) {
    return Profile_GetPosition(&(motion->forward));
}

float Motion_Velocity(Motion *motion) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->forward));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3324      	adds	r3, #36	@ 0x24
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 facf 	bl	8002678 <Profile_GetSpeed>
 80020da:	eef0 7a40 	vmov.f32	s15, s0
}
 80020de:	eeb0 0a67 	vmov.f32	s0, s15
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <Motion_Omega>:

float Motion_Angle(Motion *motion) {
    return Profile_GetPosition(&(motion->rotation));
}

float Motion_Omega(Motion *motion) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->rotation));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3348      	adds	r3, #72	@ 0x48
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fabf 	bl	8002678 <Profile_GetSpeed>
 80020fa:	eef0 7a40 	vmov.f32	s15, s0
}
 80020fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <Motion_Move>:

uint8_t Motion_MoveFinished(Motion *motion) {
    return Profile_IsFinished(&(motion->forward));
}

void Motion_Move(Motion *motion, float distance, float top_speed, float final_speed, float acceleration) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6178      	str	r0, [r7, #20]
 8002110:	ed87 0a04 	vstr	s0, [r7, #16]
 8002114:	edc7 0a03 	vstr	s1, [r7, #12]
 8002118:	ed87 1a02 	vstr	s2, [r7, #8]
 800211c:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Move(&(motion->forward), distance, top_speed, final_speed, acceleration);
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3324      	adds	r3, #36	@ 0x24
 8002124:	edd7 1a01 	vldr	s3, [r7, #4]
 8002128:	ed97 1a02 	vldr	s2, [r7, #8]
 800212c:	edd7 0a03 	vldr	s1, [r7, #12]
 8002130:	ed97 0a04 	vldr	s0, [r7, #16]
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fa47 	bl	80025c8 <Profile_Move>
}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <Motion_Update>:

void Motion_Turn_(Motion *motion, float angle, float omega, float final_speed, float alpha){
	Profile_Move(&(motion->rotation), angle, omega, final_speed, alpha);
}

void Motion_Update(Motion *motion) {
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
    Profile_Update(&(motion->forward));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3324      	adds	r3, #36	@ 0x24
 800214e:	4618      	mov	r0, r3
 8002150:	f000 faa2 	bl	8002698 <Profile_Update>
    Profile_Update(&(motion->rotation));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3348      	adds	r3, #72	@ 0x48
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fa9d 	bl	8002698 <Profile_Update>
    //UART_Transmit_Float(&huart6, ">V", motion->forward.speed, 2);
    //UART_Transmit_Float(&huart6, ">W", robot_speed(), 2);
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm > PWM_MAX)
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7fe fa08 	bl	8000588 <__aeabi_f2d>
 8002178:	a313      	add	r3, pc, #76	@ (adr r3, 80021c8 <limitPWM+0x60>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	f7fe fceb 	bl	8000b58 <__aeabi_dcmpgt>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <limitPWM+0x24>
		return PWM_MAX;
 8002188:	4b0d      	ldr	r3, [pc, #52]	@ (80021c0 <limitPWM+0x58>)
 800218a:	e00d      	b.n	80021a8 <limitPWM+0x40>
	else if (pwm < -PWM_MAX)
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7fe f9fb 	bl	8000588 <__aeabi_f2d>
 8002192:	a309      	add	r3, pc, #36	@ (adr r3, 80021b8 <limitPWM+0x50>)
 8002194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002198:	f7fe fcc0 	bl	8000b1c <__aeabi_dcmplt>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <limitPWM+0x3e>
		return -PWM_MAX;
 80021a2:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <limitPWM+0x5c>)
 80021a4:	e000      	b.n	80021a8 <limitPWM+0x40>
	return pwm;
 80021a6:	687b      	ldr	r3, [r7, #4]
}
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eeb0 0a67 	vmov.f32	s0, s15
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	70a3d70a 	.word	0x70a3d70a
 80021bc:	bfef0a3d 	.word	0xbfef0a3d
 80021c0:	3f7851ec 	.word	0x3f7851ec
 80021c4:	bf7851ec 	.word	0xbf7851ec
 80021c8:	70a3d70a 	.word	0x70a3d70a
 80021cc:	3fef0a3d 	.word	0x3fef0a3d

080021d0 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 80021da:	edd7 7a01 	vldr	s15, [r7, #4]
 80021de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e6:	db13      	blt.n	8002210 <setMotorLPWM+0x40>
		TIM3->CCR4 = 0;
 80021e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002254 <setMotorLPWM+0x84>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80021ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80021f2:	f7ff ffb9 	bl	8002168 <limitPWM>
 80021f6:	eef0 7a40 	vmov.f32	s15, s0
 80021fa:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002258 <setMotorLPWM+0x88>
 80021fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002202:	4b14      	ldr	r3, [pc, #80]	@ (8002254 <setMotorLPWM+0x84>)
 8002204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002208:	ee17 2a90 	vmov	r2, s15
 800220c:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else if (pwm < 0) {
		TIM3->CCR3 = 0;
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 800220e:	e01c      	b.n	800224a <setMotorLPWM+0x7a>
	else if (pwm < 0) {
 8002210:	edd7 7a01 	vldr	s15, [r7, #4]
 8002214:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221c:	d400      	bmi.n	8002220 <setMotorLPWM+0x50>
}
 800221e:	e014      	b.n	800224a <setMotorLPWM+0x7a>
		TIM3->CCR3 = 0;
 8002220:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <setMotorLPWM+0x84>)
 8002222:	2200      	movs	r2, #0
 8002224:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002226:	ed97 0a01 	vldr	s0, [r7, #4]
 800222a:	f7ff ff9d 	bl	8002168 <limitPWM>
 800222e:	eef0 7a40 	vmov.f32	s15, s0
 8002232:	eef1 7a67 	vneg.f32	s15, s15
 8002236:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002258 <setMotorLPWM+0x88>
 800223a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800223e:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <setMotorLPWM+0x84>)
 8002240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002244:	ee17 2a90 	vmov	r2, s15
 8002248:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40000400 	.word	0x40000400
 8002258:	45e0f800 	.word	0x45e0f800

0800225c <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8002266:	edd7 7a01 	vldr	s15, [r7, #4]
 800226a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002272:	db13      	blt.n	800229c <setMotorRPWM+0x40>
		TIM3->CCR2 = 0;
 8002274:	4b1a      	ldr	r3, [pc, #104]	@ (80022e0 <setMotorRPWM+0x84>)
 8002276:	2200      	movs	r2, #0
 8002278:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR1 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800227a:	ed97 0a01 	vldr	s0, [r7, #4]
 800227e:	f7ff ff73 	bl	8002168 <limitPWM>
 8002282:	eef0 7a40 	vmov.f32	s15, s0
 8002286:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80022e4 <setMotorRPWM+0x88>
 800228a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800228e:	4b14      	ldr	r3, [pc, #80]	@ (80022e0 <setMotorRPWM+0x84>)
 8002290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002294:	ee17 2a90 	vmov	r2, s15
 8002298:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else if (pwm < 0) {
		TIM3->CCR1 = 0;
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 800229a:	e01c      	b.n	80022d6 <setMotorRPWM+0x7a>
	else if (pwm < 0) {
 800229c:	edd7 7a01 	vldr	s15, [r7, #4]
 80022a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a8:	d400      	bmi.n	80022ac <setMotorRPWM+0x50>
}
 80022aa:	e014      	b.n	80022d6 <setMotorRPWM+0x7a>
		TIM3->CCR1 = 0;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	@ (80022e0 <setMotorRPWM+0x84>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 80022b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80022b6:	f7ff ff57 	bl	8002168 <limitPWM>
 80022ba:	eef0 7a40 	vmov.f32	s15, s0
 80022be:	eef1 7a67 	vneg.f32	s15, s15
 80022c2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80022e4 <setMotorRPWM+0x88>
 80022c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ca:	4b05      	ldr	r3, [pc, #20]	@ (80022e0 <setMotorRPWM+0x84>)
 80022cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022d0:	ee17 2a90 	vmov	r2, s15
 80022d4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40000400 	.word	0x40000400
 80022e4:	45e0f800 	.word	0x45e0f800

080022e8 <PCA9685_SetBit>:
  * @param  Bit: Bit position to modify (0-7)
  * @param  Value: Value to set (0 or 1)
  * @retval None
  */
void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af04      	add	r7, sp, #16
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
 80022f2:	460b      	mov	r3, r1
 80022f4:	71bb      	strb	r3, [r7, #6]
 80022f6:	4613      	mov	r3, r2
 80022f8:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	230a      	movs	r3, #10
 8002300:	9302      	str	r3, [sp, #8]
 8002302:	2301      	movs	r3, #1
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	f107 030f 	add.w	r3, r7, #15
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2301      	movs	r3, #1
 800230e:	2180      	movs	r1, #128	@ 0x80
 8002310:	4819      	ldr	r0, [pc, #100]	@ (8002378 <PCA9685_SetBit+0x90>)
 8002312:	f003 fbcd 	bl	8005ab0 <HAL_I2C_Mem_Read>
  if (Value == 0)
 8002316:	797b      	ldrb	r3, [r7, #5]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10d      	bne.n	8002338 <PCA9685_SetBit+0x50>
    readValue &= ~(1 << Bit);
 800231c:	79bb      	ldrb	r3, [r7, #6]
 800231e:	2201      	movs	r2, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	b25b      	sxtb	r3, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	b25a      	sxtb	r2, r3
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	b25b      	sxtb	r3, r3
 800232e:	4013      	ands	r3, r2
 8002330:	b25b      	sxtb	r3, r3
 8002332:	b2db      	uxtb	r3, r3
 8002334:	73fb      	strb	r3, [r7, #15]
 8002336:	e00a      	b.n	800234e <PCA9685_SetBit+0x66>
  else
    readValue |= (1 << Bit);
 8002338:	79bb      	ldrb	r3, [r7, #6]
 800233a:	2201      	movs	r2, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	b25a      	sxtb	r2, r3
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	b25b      	sxtb	r3, r3
 8002346:	4313      	orrs	r3, r2
 8002348:	b25b      	sxtb	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	b29a      	uxth	r2, r3
 8002352:	230a      	movs	r3, #10
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	2301      	movs	r3, #1
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	f107 030f 	add.w	r3, r7, #15
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2301      	movs	r3, #1
 8002362:	2180      	movs	r1, #128	@ 0x80
 8002364:	4804      	ldr	r0, [pc, #16]	@ (8002378 <PCA9685_SetBit+0x90>)
 8002366:	f003 faa9 	bl	80058bc <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 800236a:	2001      	movs	r0, #1
 800236c:	f001 fdf4 	bl	8003f58 <HAL_Delay>
}
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200002ac 	.word	0x200002ac

0800237c <PCA9685_SetPWMFrequency>:
  * @brief  Set PWM frequency (24Hz to 1526Hz)
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af04      	add	r7, sp, #16
 8002382:	4603      	mov	r3, r0
 8002384:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;

  // Ensure frequency is within valid range
  if(frequency >= 1526)
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 800238c:	4293      	cmp	r3, r2
 800238e:	d902      	bls.n	8002396 <PCA9685_SetPWMFrequency+0x1a>
    prescale = 0x03;  // Maximum frequency (1526Hz)
 8002390:	2303      	movs	r3, #3
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e00c      	b.n	80023b0 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24)
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	2b18      	cmp	r3, #24
 800239a:	d802      	bhi.n	80023a2 <PCA9685_SetPWMFrequency+0x26>
    prescale = 0xFF;  // Minimum frequency (24Hz)
 800239c:	23ff      	movs	r3, #255	@ 0xff
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e006      	b.n	80023b0 <PCA9685_SetPWMFrequency+0x34>
  else
    // Calculate prescale value based on 25MHz internal oscillator
    prescale = (uint8_t)(25000000 / (4096 * frequency));
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	031b      	lsls	r3, r3, #12
 80023a6:	4a12      	ldr	r2, [pc, #72]	@ (80023f0 <PCA9685_SetPWMFrequency+0x74>)
 80023a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	73fb      	strb	r3, [r7, #15]

  // Enter sleep mode before changing the frequency
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 80023b0:	2201      	movs	r2, #1
 80023b2:	2104      	movs	r1, #4
 80023b4:	2000      	movs	r0, #0
 80023b6:	f7ff ff97 	bl	80022e8 <PCA9685_SetBit>

  // Set the prescale value
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 80023ba:	230a      	movs	r3, #10
 80023bc:	9302      	str	r3, [sp, #8]
 80023be:	2301      	movs	r3, #1
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	f107 030f 	add.w	r3, r7, #15
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	2301      	movs	r3, #1
 80023ca:	22fe      	movs	r2, #254	@ 0xfe
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	4809      	ldr	r0, [pc, #36]	@ (80023f4 <PCA9685_SetPWMFrequency+0x78>)
 80023d0:	f003 fa74 	bl	80058bc <HAL_I2C_Mem_Write>

  // Exit sleep mode
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 80023d4:	2200      	movs	r2, #0
 80023d6:	2104      	movs	r1, #4
 80023d8:	2000      	movs	r0, #0
 80023da:	f7ff ff85 	bl	80022e8 <PCA9685_SetBit>

  // Restart all PWM channels
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 80023de:	2201      	movs	r2, #1
 80023e0:	2107      	movs	r1, #7
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7ff ff80 	bl	80022e8 <PCA9685_SetBit>
}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	017d7840 	.word	0x017d7840
 80023f4:	200002ac 	.word	0x200002ac

080023f8 <PCA9685_Init>:
  * @brief  Initialize PCA9685 with specified frequency
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_Init(uint16_t frequency)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	80fb      	strh	r3, [r7, #6]
  // Set desired PWM frequency (usually 50Hz for standard servos)
  PCA9685_SetPWMFrequency(frequency);
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ffb9 	bl	800237c <PCA9685_SetPWMFrequency>

  // Enable Auto-Increment for efficient register writing
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 800240a:	2201      	movs	r2, #1
 800240c:	2105      	movs	r1, #5
 800240e:	2000      	movs	r0, #0
 8002410:	f7ff ff6a 	bl	80022e8 <PCA9685_SetBit>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <PCA9685_SetPWM>:
  * @param  OnTime: Value between 0-4095 for ON time
  * @param  OffTime: Value between 0-4095 for OFF time
  * @retval None
  */
void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af04      	add	r7, sp, #16
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
 8002426:	460b      	mov	r3, r1
 8002428:	80bb      	strh	r3, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];

  // Calculate register address for the specified channel
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	b2db      	uxtb	r3, r3
 8002434:	3306      	adds	r3, #6
 8002436:	73fb      	strb	r3, [r7, #15]

  // Prepare data bytes for ON and OFF times
  pwm[0] = OnTime & 0xFF;         // ON Low byte
 8002438:	88bb      	ldrh	r3, [r7, #4]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	723b      	strb	r3, [r7, #8]
  pwm[1] = (OnTime >> 8) & 0xFF;  // ON High byte
 800243e:	88bb      	ldrh	r3, [r7, #4]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	b29b      	uxth	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;        // OFF Low byte
 8002448:	887b      	ldrh	r3, [r7, #2]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	72bb      	strb	r3, [r7, #10]
  pwm[3] = (OffTime >> 8) & 0xFF; // OFF High byte
 800244e:	887b      	ldrh	r3, [r7, #2]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	b29b      	uxth	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	72fb      	strb	r3, [r7, #11]

  // Write all 4 bytes in a single I2C transaction
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	b29a      	uxth	r2, r3
 800245c:	230a      	movs	r3, #10
 800245e:	9302      	str	r3, [sp, #8]
 8002460:	2304      	movs	r3, #4
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	f107 0308 	add.w	r3, r7, #8
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	2301      	movs	r3, #1
 800246c:	2180      	movs	r1, #128	@ 0x80
 800246e:	4803      	ldr	r0, [pc, #12]	@ (800247c <PCA9685_SetPWM+0x60>)
 8002470:	f003 fa24 	bl	80058bc <HAL_I2C_Mem_Write>
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	200002ac 	.word	0x200002ac

08002480 <Profile_Reset>:
#include "ssd1306.h"
#include "fonts.h"
#include <stdio.h>

// Reset the profile
void Profile_Reset(Profile *profile) {
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
    profile->position = 0;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
    profile->speed = 0;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	605a      	str	r2, [r3, #4]
    profile->target_speed = 0;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
    profile->state = PS_IDLE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	701a      	strb	r2, [r3, #0]
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <Profile_Start>:
uint8_t Profile_IsFinished(const Profile *profile) {
    return profile->state == PS_FINISHED;
}

// Start a profile
void Profile_Start(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 80024b2:	b480      	push	{r7}
 80024b4:	b087      	sub	sp, #28
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6178      	str	r0, [r7, #20]
 80024ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80024be:	edc7 0a03 	vstr	s1, [r7, #12]
 80024c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80024c6:	edc7 1a01 	vstr	s3, [r7, #4]
    profile->sign = (distance < 0) ? -1 : 1;
 80024ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80024ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d6:	d502      	bpl.n	80024de <Profile_Start+0x2c>
 80024d8:	f04f 32ff 	mov.w	r2, #4294967295
 80024dc:	e000      	b.n	80024e0 <Profile_Start+0x2e>
 80024de:	2201      	movs	r2, #1
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	731a      	strb	r2, [r3, #12]
    if (distance < 0) distance = -distance;
 80024e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80024e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f0:	d505      	bpl.n	80024fe <Profile_Start+0x4c>
 80024f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80024f6:	eef1 7a67 	vneg.f32	s15, s15
 80024fa:	edc7 7a04 	vstr	s15, [r7, #16]

    if (distance < 1.0f) {
 80024fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002502:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250e:	d503      	bpl.n	8002518 <Profile_Start+0x66>
        profile->state = PS_FINISHED;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2203      	movs	r2, #3
 8002514:	701a      	strb	r2, [r3, #0]
        return;
 8002516:	e052      	b.n	80025be <Profile_Start+0x10c>
    }

    if (final_speed > top_speed) {
 8002518:	ed97 7a02 	vldr	s14, [r7, #8]
 800251c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002520:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002528:	dd01      	ble.n	800252e <Profile_Start+0x7c>
        final_speed = top_speed;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	60bb      	str	r3, [r7, #8]
    }

    profile->position = 0;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
    profile->final_position = distance;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	621a      	str	r2, [r3, #32]
    profile->target_speed = profile->sign * fabsf(top_speed);
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800254a:	edd7 7a03 	vldr	s15, [r7, #12]
 800254e:	eef0 7ae7 	vabs.f32	s15, s15
 8002552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	edc3 7a06 	vstr	s15, [r3, #24]
    profile->final_speed = profile->sign * fabsf(final_speed);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002562:	ee07 3a90 	vmov	s15, r3
 8002566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800256a:	edd7 7a02 	vldr	s15, [r7, #8]
 800256e:	eef0 7ae7 	vabs.f32	s15, s15
 8002572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	edc3 7a07 	vstr	s15, [r3, #28]
    profile->acceleration = fabsf(acceleration);
 800257c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002580:	eef0 7ae7 	vabs.f32	s15, s15
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->one_over_acc = (profile->acceleration >= 1) ? (1.0f / profile->acceleration) : 1.0f;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002590:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259c:	db07      	blt.n	80025ae <Profile_Start+0xfc>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	ed93 7a04 	vldr	s14, [r3, #16]
 80025a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ac:	e001      	b.n	80025b2 <Profile_Start+0x100>
 80025ae:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->state = PS_ACCELERATING;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
}
 80025be:	371c      	adds	r7, #28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <Profile_Move>:

// Move a profile (blocking call)
void Profile_Move(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6178      	str	r0, [r7, #20]
 80025d0:	ed87 0a04 	vstr	s0, [r7, #16]
 80025d4:	edc7 0a03 	vstr	s1, [r7, #12]
 80025d8:	ed87 1a02 	vstr	s2, [r7, #8]
 80025dc:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Start(profile, distance, top_speed, final_speed, acceleration);
 80025e0:	edd7 1a01 	vldr	s3, [r7, #4]
 80025e4:	ed97 1a02 	vldr	s2, [r7, #8]
 80025e8:	edd7 0a03 	vldr	s1, [r7, #12]
 80025ec:	ed97 0a04 	vldr	s0, [r7, #16]
 80025f0:	6978      	ldr	r0, [r7, #20]
 80025f2:	f7ff ff5e 	bl	80024b2 <Profile_Start>
    Profile_WaitUntilFinished(profile);
 80025f6:	6978      	ldr	r0, [r7, #20]
 80025f8:	f000 f804 	bl	8002604 <Profile_WaitUntilFinished>
}
 80025fc:	bf00      	nop
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <Profile_WaitUntilFinished>:
    profile->speed = profile->target_speed;
    profile->state = PS_FINISHED;
}

// Wait until the profile finishes
void Profile_WaitUntilFinished(Profile *profile) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
    while (profile->state != PS_FINISHED) {
 800260c:	e002      	b.n	8002614 <Profile_WaitUntilFinished+0x10>
        HAL_Delay(2);
 800260e:	2002      	movs	r0, #2
 8002610:	f001 fca2 	bl	8003f58 <HAL_Delay>
    while (profile->state != PS_FINISHED) {
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b03      	cmp	r3, #3
 800261c:	d1f7      	bne.n	800260e <Profile_WaitUntilFinished+0xa>
    }
}
 800261e:	bf00      	nop
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <Profile_GetBrakingDistance>:

// Get the braking distance
float Profile_GetBrakingDistance(const Profile *profile) {
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
    return fabsf(profile->speed * profile->speed - profile->final_speed * profile->final_speed) * 0.5f * profile->one_over_acc;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	ed93 7a01 	vldr	s14, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	edd3 7a01 	vldr	s15, [r3, #4]
 800263c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	edd3 6a07 	vldr	s13, [r3, #28]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	edd3 7a07 	vldr	s15, [r3, #28]
 800264c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002654:	eef0 7ae7 	vabs.f32	s15, s15
 8002658:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800265c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	edd3 7a05 	vldr	s15, [r3, #20]
 8002666:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800266a:	eeb0 0a67 	vmov.f32	s0, s15
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <Profile_GetSpeed>:
float Profile_GetPosition(const Profile *profile) {
    return profile->position;
}

// Get the current speed
float Profile_GetSpeed(const Profile *profile) {
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
    return profile->speed;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	ee07 3a90 	vmov	s15, r3
}
 8002688:	eeb0 0a67 	vmov.f32	s0, s15
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <Profile_Update>:
void Profile_SetPosition(Profile *profile, float position) {
    profile->position = position;
}

// Update the profile
void Profile_Update(Profile *profile) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
    if (profile->state == PS_IDLE) return;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 80b5 	beq.w	8002816 <Profile_Update+0x17e>

    float delta_v = profile->acceleration * LOOP_INTERVAL;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	ed93 7a04 	vldr	s14, [r3, #16]
 80026b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002820 <Profile_Update+0x188>)
 80026b4:	edd3 7a00 	vldr	s15, [r3]
 80026b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026bc:	edc7 7a03 	vstr	s15, [r7, #12]
    float remaining = fabsf(profile->final_position) - fabsf(profile->position);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80026c6:	eeb0 7ae7 	vabs.f32	s14, s15
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80026d0:	eef0 7ae7 	vabs.f32	s15, s15
 80026d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (profile->state == PS_ACCELERATING) {
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d128      	bne.n	8002738 <Profile_Update+0xa0>
        if (remaining < Profile_GetBrakingDistance(profile)) {
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ff9e 	bl	8002628 <Profile_GetBrakingDistance>
 80026ec:	eeb0 7a40 	vmov.f32	s14, s0
 80026f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80026f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fc:	d51c      	bpl.n	8002738 <Profile_Update+0xa0>
            profile->state = PS_BRAKING;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2202      	movs	r2, #2
 8002702:	701a      	strb	r2, [r3, #0]
            profile->target_speed = (profile->final_speed == 0) ? (profile->sign * 5.0f) : profile->final_speed;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	edd3 7a07 	vldr	s15, [r3, #28]
 800270a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800270e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002712:	d10b      	bne.n	800272c <Profile_Update+0x94>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002722:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800272a:	e002      	b.n	8002732 <Profile_Update+0x9a>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	edc3 7a06 	vstr	s15, [r3, #24]
        }
    }

    if (profile->speed < profile->target_speed) {
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	ed93 7a01 	vldr	s14, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	edd3 7a06 	vldr	s15, [r3, #24]
 8002744:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274c:	d519      	bpl.n	8002782 <Profile_Update+0xea>
        profile->speed += delta_v;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	ed93 7a01 	vldr	s14, [r3, #4]
 8002754:	edd7 7a03 	vldr	s15, [r7, #12]
 8002758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed > profile->target_speed) profile->speed = profile->target_speed;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	ed93 7a01 	vldr	s14, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	edd3 7a06 	vldr	s15, [r3, #24]
 800276e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002776:	dd28      	ble.n	80027ca <Profile_Update+0x132>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699a      	ldr	r2, [r3, #24]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	e023      	b.n	80027ca <Profile_Update+0x132>
    } else if (profile->speed > profile->target_speed) {
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	ed93 7a01 	vldr	s14, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	edd3 7a06 	vldr	s15, [r3, #24]
 800278e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002796:	dd18      	ble.n	80027ca <Profile_Update+0x132>
        profile->speed -= delta_v;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	ed93 7a01 	vldr	s14, [r3, #4]
 800279e:	edd7 7a03 	vldr	s15, [r7, #12]
 80027a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed < profile->target_speed) profile->speed = profile->target_speed;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80027b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c0:	d503      	bpl.n	80027ca <Profile_Update+0x132>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	605a      	str	r2, [r3, #4]
    }

    profile->position += profile->speed * LOOP_INTERVAL;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80027d0:	4b13      	ldr	r3, [pc, #76]	@ (8002820 <Profile_Update+0x188>)
 80027d2:	edd3 7a00 	vldr	s15, [r3]
 80027d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80027e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	edc3 7a02 	vstr	s15, [r3, #8]

    if (profile->state != PS_FINISHED && remaining < 0.125f) {
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d011      	beq.n	8002818 <Profile_Update+0x180>
 80027f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80027f8:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 80027fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002804:	d508      	bpl.n	8002818 <Profile_Update+0x180>
        profile->state = PS_FINISHED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2203      	movs	r2, #3
 800280a:	701a      	strb	r2, [r3, #0]
        profile->target_speed = profile->final_speed;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69da      	ldr	r2, [r3, #28]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	619a      	str	r2, [r3, #24]
 8002814:	e000      	b.n	8002818 <Profile_Update+0x180>
    if (profile->state == PS_IDLE) return;
 8002816:	bf00      	nop
    }

}
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	0800ba78 	.word	0x0800ba78

08002824 <RAYKHA_ReadRaw>:
/**
 * @brief Read raw values from all sensors
 * @param sensor_values Array to store the raw sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 */
void RAYKHA_ReadRaw(uint16_t *sensor_values)
{
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
    // Read each sensor
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 800282c:	2300      	movs	r3, #0
 800282e:	73fb      	strb	r3, [r7, #15]
 8002830:	e00c      	b.n	800284c <RAYKHA_ReadRaw+0x28>
    {
        sensor_values[i] = AnalogMux_ReadChannel(RAYKHA_FIRST_MUX_CHANNEL + i);
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	18d4      	adds	r4, r2, r3
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe fc33 	bl	80010a8 <AnalogMux_ReadChannel>
 8002842:	4603      	mov	r3, r0
 8002844:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	3301      	adds	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b09      	cmp	r3, #9
 8002850:	d9ef      	bls.n	8002832 <RAYKHA_ReadRaw+0xe>
    }
}
 8002852:	bf00      	nop
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	bd90      	pop	{r4, r7, pc}

0800285c <RAYKHA_Calibrate>:
 * @brief Calibrate the sensor array
 * @param calibration Pointer to calibration data structure
 * @param line_type Type of line (RAYKHA_LINE_WHITE or RAYKHA_LINE_BLACK)
 */
void RAYKHA_Calibrate(RAYKHA_Calibration *calibration, uint8_t line_type)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	@ 0x28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	70fb      	strb	r3, [r7, #3]

		uint16_t sensor_values[RAYKHA_NUM_SENSORS];

		// Initialize calibration data
		for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002868:	2300      	movs	r3, #0
 800286a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800286e:	e013      	b.n	8002898 <RAYKHA_Calibrate+0x3c>
		{
			calibration->min_values[i] = 0xFFFF;  // Max possible value
 8002870:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800287a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			calibration->max_values[i] = 0;       // Min possible value
 800287e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	3308      	adds	r3, #8
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	2200      	movs	r2, #0
 800288c:	809a      	strh	r2, [r3, #4]
		for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 800288e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002892:	3301      	adds	r3, #1
 8002894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800289c:	2b09      	cmp	r3, #9
 800289e:	d9e7      	bls.n	8002870 <RAYKHA_Calibrate+0x14>
		}

		calibration->line_type = line_type;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    	for(uint8_t i = 0; i < 100; i++){
 80028a8:	2300      	movs	r3, #0
 80028aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80028ae:	e0ad      	b.n	8002a0c <RAYKHA_Calibrate+0x1b0>
    		// Take multiple samples for more accurate calibration
			for (uint8_t sample = 0; sample < RAYKHA_CALIBRATION_SAMPLES; sample++)
 80028b0:	2300      	movs	r3, #0
 80028b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80028b6:	e053      	b.n	8002960 <RAYKHA_Calibrate+0x104>
			{
				// Read raw sensor values
				RAYKHA_ReadRaw(sensor_values);
 80028b8:	f107 030c 	add.w	r3, r7, #12
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ffb1 	bl	8002824 <RAYKHA_ReadRaw>

				// Update min and max values
				for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80028c8:	e03e      	b.n	8002948 <RAYKHA_Calibrate+0xec>
				{
					if (sensor_values[i] < calibration->min_values[i])
 80028ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	3328      	adds	r3, #40	@ 0x28
 80028d2:	443b      	add	r3, r7
 80028d4:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 80028d8:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d20b      	bcs.n	80028fe <RAYKHA_Calibrate+0xa2>
					{
						calibration->min_values[i] = sensor_values[i];
 80028e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80028ea:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	3328      	adds	r3, #40	@ 0x28
 80028f2:	443b      	add	r3, r7
 80028f4:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					}
					if (sensor_values[i] > calibration->max_values[i])
 80028fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	3328      	adds	r3, #40	@ 0x28
 8002906:	443b      	add	r3, r7
 8002908:	f833 2c1c 	ldrh.w	r2, [r3, #-28]
 800290c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	3308      	adds	r3, #8
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	440b      	add	r3, r1
 8002918:	889b      	ldrh	r3, [r3, #4]
 800291a:	429a      	cmp	r2, r3
 800291c:	d90f      	bls.n	800293e <RAYKHA_Calibrate+0xe2>
					{
						calibration->max_values[i] = sensor_values[i];
 800291e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002922:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	3328      	adds	r3, #40	@ 0x28
 800292a:	443b      	add	r3, r7
 800292c:	f833 0c1c 	ldrh.w	r0, [r3, #-28]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	f101 0308 	add.w	r3, r1, #8
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	4602      	mov	r2, r0
 800293c:	809a      	strh	r2, [r3, #4]
				for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 800293e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002942:	3301      	adds	r3, #1
 8002944:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8002948:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800294c:	2b09      	cmp	r3, #9
 800294e:	d9bc      	bls.n	80028ca <RAYKHA_Calibrate+0x6e>
					}
				}

				// Short delay between samples
				HAL_Delay(10);
 8002950:	200a      	movs	r0, #10
 8002952:	f001 fb01 	bl	8003f58 <HAL_Delay>
			for (uint8_t sample = 0; sample < RAYKHA_CALIBRATION_SAMPLES; sample++)
 8002956:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800295a:	3301      	adds	r3, #1
 800295c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002960:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002964:	2b09      	cmp	r3, #9
 8002966:	d9a7      	bls.n	80028b8 <RAYKHA_Calibrate+0x5c>
			}

			// Add small margins to avoid edge cases
			for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002968:	2300      	movs	r3, #0
 800296a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800296e:	e044      	b.n	80029fa <RAYKHA_Calibrate+0x19e>
			{
				if (calibration->min_values[i] > 20)
 8002970:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800297a:	2b14      	cmp	r3, #20
 800297c:	d90c      	bls.n	8002998 <RAYKHA_Calibrate+0x13c>
					calibration->min_values[i] -= 20;
 800297e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002988:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800298c:	3b14      	subs	r3, #20
 800298e:	b299      	uxth	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002996:	e005      	b.n	80029a4 <RAYKHA_Calibrate+0x148>
				else
					calibration->min_values[i] = 0;
 8002998:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2100      	movs	r1, #0
 80029a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

				if (calibration->max_values[i] < 4075)
 80029a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	3308      	adds	r3, #8
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	889b      	ldrh	r3, [r3, #4]
 80029b2:	f640 72ea 	movw	r2, #4074	@ 0xfea
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d811      	bhi.n	80029de <RAYKHA_Calibrate+0x182>
					calibration->max_values[i] += 20;
 80029ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	3308      	adds	r3, #8
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	889a      	ldrh	r2, [r3, #4]
 80029c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80029cc:	3214      	adds	r2, #20
 80029ce:	b291      	uxth	r1, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	3308      	adds	r3, #8
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	460a      	mov	r2, r1
 80029da:	809a      	strh	r2, [r3, #4]
 80029dc:	e008      	b.n	80029f0 <RAYKHA_Calibrate+0x194>
				else
					calibration->max_values[i] = 4095;
 80029de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	3308      	adds	r3, #8
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80029ee:	809a      	strh	r2, [r3, #4]
			for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 80029f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80029f4:	3301      	adds	r3, #1
 80029f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80029fe:	2b09      	cmp	r3, #9
 8002a00:	d9b6      	bls.n	8002970 <RAYKHA_Calibrate+0x114>
    	for(uint8_t i = 0; i < 100; i++){
 8002a02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002a06:	3301      	adds	r3, #1
 8002a08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002a0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002a10:	2b63      	cmp	r3, #99	@ 0x63
 8002a12:	f67f af4d 	bls.w	80028b0 <RAYKHA_Calibrate+0x54>
			}
    	}

}
 8002a16:	bf00      	nop
 8002a18:	bf00      	nop
 8002a1a:	3728      	adds	r7, #40	@ 0x28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <RAYKHA_ReadCalibrated>:
 * @brief Read calibrated values from all sensors
 * @param sensor_values Array to store the calibrated sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 * @param calibration Pointer to calibration data structure
 */
void RAYKHA_ReadCalibrated(uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8002a20:	b5b0      	push	{r4, r5, r7, lr}
 8002a22:	b08a      	sub	sp, #40	@ 0x28
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
    uint16_t raw_values[RAYKHA_NUM_SENSORS];

    // Read raw values
    RAYKHA_ReadRaw(raw_values);
 8002a2a:	f107 0308 	add.w	r3, r7, #8
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fef8 	bl	8002824 <RAYKHA_ReadRaw>

    // Apply calibration
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002a34:	2300      	movs	r3, #0
 8002a36:	77fb      	strb	r3, [r7, #31]
 8002a38:	e05a      	b.n	8002af0 <RAYKHA_ReadCalibrated+0xd0>
    {
        if (raw_values[i] < calibration->min_values[i])
 8002a3a:	7ffb      	ldrb	r3, [r7, #31]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	3320      	adds	r3, #32
 8002a40:	443b      	add	r3, r7
 8002a42:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002a46:	7ff9      	ldrb	r1, [r7, #31]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d206      	bcs.n	8002a60 <RAYKHA_ReadCalibrated+0x40>
        {
            sensor_values[i] = 0;
 8002a52:	7ffb      	ldrb	r3, [r7, #31]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	e044      	b.n	8002aea <RAYKHA_ReadCalibrated+0xca>
        }
        else if (raw_values[i] > calibration->max_values[i])
 8002a60:	7ffb      	ldrb	r3, [r7, #31]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	3320      	adds	r3, #32
 8002a66:	443b      	add	r3, r7
 8002a68:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002a6c:	7ffb      	ldrb	r3, [r7, #31]
 8002a6e:	6839      	ldr	r1, [r7, #0]
 8002a70:	3308      	adds	r3, #8
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	440b      	add	r3, r1
 8002a76:	889b      	ldrh	r3, [r3, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d907      	bls.n	8002a8c <RAYKHA_ReadCalibrated+0x6c>
        {
            sensor_values[i] = 1000;
 8002a7c:	7ffb      	ldrb	r3, [r7, #31]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a88:	801a      	strh	r2, [r3, #0]
 8002a8a:	e02e      	b.n	8002aea <RAYKHA_ReadCalibrated+0xca>
        }
        else
        {
            // Map to 0-1000 range
            sensor_values[i] = map_range(raw_values[i],
 8002a8c:	7ffb      	ldrb	r3, [r7, #31]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	3320      	adds	r3, #32
 8002a92:	443b      	add	r3, r7
 8002a94:	f833 0c18 	ldrh.w	r0, [r3, #-24]
 8002a98:	7ffa      	ldrb	r2, [r7, #31]
                                        calibration->min_values[i],
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
            sensor_values[i] = map_range(raw_values[i],
 8002aa0:	7ffb      	ldrb	r3, [r7, #31]
                                        calibration->max_values[i],
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	3308      	adds	r3, #8
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	889d      	ldrh	r5, [r3, #4]
            sensor_values[i] = map_range(raw_values[i],
 8002aac:	7ffb      	ldrb	r3, [r7, #31]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	18d4      	adds	r4, r2, r3
 8002ab4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	2300      	movs	r3, #0
 8002abc:	462a      	mov	r2, r5
 8002abe:	f000 f879 	bl	8002bb4 <map_range>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	8023      	strh	r3, [r4, #0]
                                        0, 1000);

		// Invert if needed (for white line on black background)
		if (calibration->line_type == RAYKHA_LINE_WHITE)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d10c      	bne.n	8002aea <RAYKHA_ReadCalibrated+0xca>
		{
			sensor_values[i] = 1000 - sensor_values[i];
 8002ad0:	7ffb      	ldrb	r3, [r7, #31]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	881a      	ldrh	r2, [r3, #0]
 8002ada:	7ffb      	ldrb	r3, [r7, #31]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	440b      	add	r3, r1
 8002ae2:	f5c2 727a 	rsb	r2, r2, #1000	@ 0x3e8
 8002ae6:	b292      	uxth	r2, r2
 8002ae8:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002aea:	7ffb      	ldrb	r3, [r7, #31]
 8002aec:	3301      	adds	r3, #1
 8002aee:	77fb      	strb	r3, [r7, #31]
 8002af0:	7ffb      	ldrb	r3, [r7, #31]
 8002af2:	2b09      	cmp	r3, #9
 8002af4:	d9a1      	bls.n	8002a3a <RAYKHA_ReadCalibrated+0x1a>
		}
        }
    }
}
 8002af6:	bf00      	nop
 8002af8:	bf00      	nop
 8002afa:	3720      	adds	r7, #32
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bdb0      	pop	{r4, r5, r7, pc}

08002b00 <RAYKHA_GetLinePosition>:
 * @param calibration Pointer to calibration data structure
 * @return Line position (0 to 7000, where 0 is the leftmost sensor and 7000 is the rightmost sensor)
 *         Returns -1 if no line is detected
 */
int32_t RAYKHA_GetLinePosition(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
    uint32_t weighted_sum = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
    uint32_t sum = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
    uint8_t line_detected = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]

    // Calculate weighted average
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	73bb      	strb	r3, [r7, #14]
 8002b1a:	e01c      	b.n	8002b56 <RAYKHA_GetLinePosition+0x56>
    {
        uint16_t value = sensor_values[i];
 8002b1c:	7bbb      	ldrb	r3, [r7, #14]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	4413      	add	r3, r2
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	81bb      	strh	r3, [r7, #12]

        // A value above 200 indicates a line
        if (value > 200)
 8002b28:	89bb      	ldrh	r3, [r7, #12]
 8002b2a:	2bc8      	cmp	r3, #200	@ 0xc8
 8002b2c:	d901      	bls.n	8002b32 <RAYKHA_GetLinePosition+0x32>
        {
            line_detected = 1;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
        }

        weighted_sum += (uint32_t)value * (i * 1000);
 8002b32:	89bb      	ldrh	r3, [r7, #12]
 8002b34:	7bba      	ldrb	r2, [r7, #14]
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4413      	add	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
        sum += value;
 8002b48:	89bb      	ldrh	r3, [r7, #12]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002b50:	7bbb      	ldrb	r3, [r7, #14]
 8002b52:	3301      	adds	r3, #1
 8002b54:	73bb      	strb	r3, [r7, #14]
 8002b56:	7bbb      	ldrb	r3, [r7, #14]
 8002b58:	2b09      	cmp	r3, #9
 8002b5a:	d9df      	bls.n	8002b1c <RAYKHA_GetLinePosition+0x1c>
    }

    // Check if line is detected
    if (!line_detected || sum < 100)
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <RAYKHA_GetLinePosition+0x68>
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b63      	cmp	r3, #99	@ 0x63
 8002b66:	d802      	bhi.n	8002b6e <RAYKHA_GetLinePosition+0x6e>
    {
        return -1;
 8002b68:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6c:	e003      	b.n	8002b76 <RAYKHA_GetLinePosition+0x76>
    }

    return weighted_sum / sum;
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <RAYKHA_GetPositionForPID>:
 * @param calibration Pointer to calibration data structure
 * @return Line position centered around 0 (-3500 to 3500)
 *         Returns a large value (9999) if no line is detected
 */
int32_t RAYKHA_GetPositionForPID(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
    int32_t position = RAYKHA_GetLinePosition(sensor_values, calibration);
 8002b8c:	6839      	ldr	r1, [r7, #0]
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ffb6 	bl	8002b00 <RAYKHA_GetLinePosition>
 8002b94:	60f8      	str	r0, [r7, #12]

    // If no line detected, return a large value
    if (position == -1)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9c:	d102      	bne.n	8002ba4 <RAYKHA_GetPositionForPID+0x22>
    {
        return 9999;
 8002b9e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002ba2:	e003      	b.n	8002bac <RAYKHA_GetPositionForPID+0x2a>
    }

    // Center the position around 0
    // The center of the sensor array is at 3500
    return position - 4500;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 8002baa:	3b14      	subs	r3, #20
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <map_range>:
 * @param out_min Minimum output value
 * @param out_max Maximum output value
 * @return Mapped value
 */
static uint16_t map_range(uint16_t value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 8002bb4:	b490      	push	{r4, r7}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4604      	mov	r4, r0
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4623      	mov	r3, r4
 8002bc4:	80fb      	strh	r3, [r7, #6]
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	80bb      	strh	r3, [r7, #4]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	807b      	strh	r3, [r7, #2]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	803b      	strh	r3, [r7, #0]
    // Check for division by zero
    if (in_max <= in_min) return out_min;
 8002bd2:	887a      	ldrh	r2, [r7, #2]
 8002bd4:	88bb      	ldrh	r3, [r7, #4]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d801      	bhi.n	8002bde <map_range+0x2a>
 8002bda:	883b      	ldrh	r3, [r7, #0]
 8002bdc:	e01d      	b.n	8002c1a <map_range+0x66>

    // Map the value
    int32_t result = (int32_t)(value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002bde:	88fa      	ldrh	r2, [r7, #6]
 8002be0:	88bb      	ldrh	r3, [r7, #4]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	8b39      	ldrh	r1, [r7, #24]
 8002be6:	883a      	ldrh	r2, [r7, #0]
 8002be8:	1a8a      	subs	r2, r1, r2
 8002bea:	fb03 f202 	mul.w	r2, r3, r2
 8002bee:	8879      	ldrh	r1, [r7, #2]
 8002bf0:	88bb      	ldrh	r3, [r7, #4]
 8002bf2:	1acb      	subs	r3, r1, r3
 8002bf4:	fb92 f2f3 	sdiv	r2, r2, r3
 8002bf8:	883b      	ldrh	r3, [r7, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

    // Constrain the result
    if (result < out_min) result = out_min;
 8002bfe:	883b      	ldrh	r3, [r7, #0]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	da01      	bge.n	8002c0a <map_range+0x56>
 8002c06:	883b      	ldrh	r3, [r7, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
    if (result > out_max) result = out_max;
 8002c0a:	8b3b      	ldrh	r3, [r7, #24]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	dd01      	ble.n	8002c16 <map_range+0x62>
 8002c12:	8b3b      	ldrh	r3, [r7, #24]
 8002c14:	60fb      	str	r3, [r7, #12]

    return (uint16_t)result;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	b29b      	uxth	r3, r3
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc90      	pop	{r4, r7}
 8002c22:	4770      	bx	lr

08002c24 <get_steering_feedback>:
	rfs.raw = 0;
	rws.raw = 0;
}


float get_steering_feedback() {
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return m_steering_adjustment;
 8002c28:	4b04      	ldr	r3, [pc, #16]	@ (8002c3c <get_steering_feedback+0x18>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	ee07 3a90 	vmov	s15, r3
}
 8002c30:	eeb0 0a67 	vmov.f32	s0, s15
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	20000620 	.word	0x20000620

08002c40 <CalculateSteeringAdjustment>:




/* Calculate steering adjustment */
float CalculateSteeringAdjustment() {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
    float pTerm = STEERING_KP * m_cross_track_error;
 8002c46:	4b26      	ldr	r3, [pc, #152]	@ (8002ce0 <CalculateSteeringAdjustment+0xa0>)
 8002c48:	ed93 7a00 	vldr	s14, [r3]
 8002c4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ce4 <CalculateSteeringAdjustment+0xa4>)
 8002c4e:	edd3 7a00 	vldr	s15, [r3]
 8002c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c56:	edc7 7a03 	vstr	s15, [r7, #12]
    float dTerm = STEERING_KD * (m_cross_track_error - m_last_steering_error);
 8002c5a:	4b22      	ldr	r3, [pc, #136]	@ (8002ce4 <CalculateSteeringAdjustment+0xa4>)
 8002c5c:	ed93 7a00 	vldr	s14, [r3]
 8002c60:	4b21      	ldr	r3, [pc, #132]	@ (8002ce8 <CalculateSteeringAdjustment+0xa8>)
 8002c62:	edd3 7a00 	vldr	s15, [r3]
 8002c66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c6a:	4b20      	ldr	r3, [pc, #128]	@ (8002cec <CalculateSteeringAdjustment+0xac>)
 8002c6c:	edd3 7a00 	vldr	s15, [r3]
 8002c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c74:	edc7 7a02 	vstr	s15, [r7, #8]
    float adjustment = pTerm + dTerm * LOOP_FREQUENCY;
 8002c78:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf0 <CalculateSteeringAdjustment+0xb0>)
 8002c7a:	ed93 7a00 	vldr	s14, [r3]
 8002c7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c86:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8e:	edc7 7a01 	vstr	s15, [r7, #4]
    adjustment = fminf(fmaxf(adjustment, -STEERING_ADJUST_LIMIT), STEERING_ADJUST_LIMIT);
 8002c92:	4b18      	ldr	r3, [pc, #96]	@ (8002cf4 <CalculateSteeringAdjustment+0xb4>)
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	eef1 7a67 	vneg.f32	s15, s15
 8002c9c:	eef0 0a67 	vmov.f32	s1, s15
 8002ca0:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ca4:	f008 fe7e 	bl	800b9a4 <fmaxf>
 8002ca8:	eeb0 7a40 	vmov.f32	s14, s0
 8002cac:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <CalculateSteeringAdjustment+0xb4>)
 8002cae:	edd3 7a00 	vldr	s15, [r3]
 8002cb2:	eef0 0a67 	vmov.f32	s1, s15
 8002cb6:	eeb0 0a47 	vmov.f32	s0, s14
 8002cba:	f008 fe90 	bl	800b9de <fminf>
 8002cbe:	ed87 0a01 	vstr	s0, [r7, #4]
    m_last_steering_error = m_cross_track_error;
 8002cc2:	4b08      	ldr	r3, [pc, #32]	@ (8002ce4 <CalculateSteeringAdjustment+0xa4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a08      	ldr	r2, [pc, #32]	@ (8002ce8 <CalculateSteeringAdjustment+0xa8>)
 8002cc8:	6013      	str	r3, [r2, #0]
    m_steering_adjustment = adjustment;
 8002cca:	4a0b      	ldr	r2, [pc, #44]	@ (8002cf8 <CalculateSteeringAdjustment+0xb8>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6013      	str	r3, [r2, #0]
    return adjustment;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	ee07 3a90 	vmov	s15, r3
}
 8002cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	0800ba98 	.word	0x0800ba98
 8002ce4:	2000061c 	.word	0x2000061c
 8002ce8:	20000618 	.word	0x20000618
 8002cec:	0800ba9c 	.word	0x0800ba9c
 8002cf0:	0800ba74 	.word	0x0800ba74
 8002cf4:	0800baa0 	.word	0x0800baa0
 8002cf8:	20000620 	.word	0x20000620

08002cfc <set_steering_mode>:

void set_steering_mode(uint8_t mode){
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
	m_last_steering_error = m_cross_track_error;
 8002d06:	4b08      	ldr	r3, [pc, #32]	@ (8002d28 <set_steering_mode+0x2c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a08      	ldr	r2, [pc, #32]	@ (8002d2c <set_steering_mode+0x30>)
 8002d0c:	6013      	str	r3, [r2, #0]
	m_steering_adjustment = 0;
 8002d0e:	4b08      	ldr	r3, [pc, #32]	@ (8002d30 <set_steering_mode+0x34>)
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
	g_steering_mode = mode;
 8002d16:	4a07      	ldr	r2, [pc, #28]	@ (8002d34 <set_steering_mode+0x38>)
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	7013      	strb	r3, [r2, #0]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	2000061c 	.word	0x2000061c
 8002d2c:	20000618 	.word	0x20000618
 8002d30:	20000620 	.word	0x20000620
 8002d34:	20000000 	.word	0x20000000

08002d38 <Sensors_Update>:
	    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
}


/* Update sensor readings and calculate cross-track error */
void Sensors_Update() {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
    // Read ADC values for all sensor channels
	int error = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]

	if(g_steering_mode == STEERING_CENTER_LINE_FOLLOW){
 8002d42:	4b74      	ldr	r3, [pc, #464]	@ (8002f14 <Sensors_Update+0x1dc>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b05      	cmp	r3, #5
 8002d4a:	d10e      	bne.n	8002d6a <Sensors_Update+0x32>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 8002d4c:	4972      	ldr	r1, [pc, #456]	@ (8002f18 <Sensors_Update+0x1e0>)
 8002d4e:	4873      	ldr	r0, [pc, #460]	@ (8002f1c <Sensors_Update+0x1e4>)
 8002d50:	f7ff fe66 	bl	8002a20 <RAYKHA_ReadCalibrated>

		/* Get position for PID controller (centered around 0) */
		line_position = RAYKHA_GetPositionForPID(sensor_values, &raykha_calibration);
 8002d54:	4970      	ldr	r1, [pc, #448]	@ (8002f18 <Sensors_Update+0x1e0>)
 8002d56:	4871      	ldr	r0, [pc, #452]	@ (8002f1c <Sensors_Update+0x1e4>)
 8002d58:	f7ff ff13 	bl	8002b82 <RAYKHA_GetPositionForPID>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	4a70      	ldr	r2, [pc, #448]	@ (8002f20 <Sensors_Update+0x1e8>)
 8002d60:	6013      	str	r3, [r2, #0]

		error = line_position;
 8002d62:	4b6f      	ldr	r3, [pc, #444]	@ (8002f20 <Sensors_Update+0x1e8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	e0c5      	b.n	8002ef6 <Sensors_Update+0x1be>
	}

	else if(g_steering_mode == STEER_NORMAL){
 8002d6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002f14 <Sensors_Update+0x1dc>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f040 809f 	bne.w	8002eb4 <Sensors_Update+0x17c>
		if(lws.raw < 500)lws.raw = 500;
 8002d76:	4b6b      	ldr	r3, [pc, #428]	@ (8002f24 <Sensors_Update+0x1ec>)
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002d80:	d203      	bcs.n	8002d8a <Sensors_Update+0x52>
 8002d82:	4b68      	ldr	r3, [pc, #416]	@ (8002f24 <Sensors_Update+0x1ec>)
 8002d84:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002d88:	801a      	strh	r2, [r3, #0]
		if(rws.raw < 500)rws.raw = 500;
 8002d8a:	4b67      	ldr	r3, [pc, #412]	@ (8002f28 <Sensors_Update+0x1f0>)
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002d94:	d203      	bcs.n	8002d9e <Sensors_Update+0x66>
 8002d96:	4b64      	ldr	r3, [pc, #400]	@ (8002f28 <Sensors_Update+0x1f0>)
 8002d98:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002d9c:	801a      	strh	r2, [r3, #0]
		if(cfs.raw < 400)cfs.raw = 400;
 8002d9e:	4b63      	ldr	r3, [pc, #396]	@ (8002f2c <Sensors_Update+0x1f4>)
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002da8:	d203      	bcs.n	8002db2 <Sensors_Update+0x7a>
 8002daa:	4b60      	ldr	r3, [pc, #384]	@ (8002f2c <Sensors_Update+0x1f4>)
 8002dac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002db0:	801a      	strh	r2, [r3, #0]
		//UART_Transmit_Int(&huart6, ">L", lws.value);
		//UART_Transmit_Int(&huart6, ">F", cfs.value);
		//UART_Transmit_Int(&huart6, ">R", rws.value);

		// Update wall detection flags
		see_left_wall = (lws.value < LEFT_THRESHOLD);
 8002db2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <Sensors_Update+0x1ec>)
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	4b5e      	ldr	r3, [pc, #376]	@ (8002f30 <Sensors_Update+0x1f8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	bfb4      	ite	lt
 8002dbe:	2301      	movlt	r3, #1
 8002dc0:	2300      	movge	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8002f34 <Sensors_Update+0x1fc>)
 8002dc8:	701a      	strb	r2, [r3, #0]
		see_right_wall = (rws.value < RIGHT_THRESHOLD);
 8002dca:	4b57      	ldr	r3, [pc, #348]	@ (8002f28 <Sensors_Update+0x1f0>)
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	4b5a      	ldr	r3, [pc, #360]	@ (8002f38 <Sensors_Update+0x200>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	bfb4      	ite	lt
 8002dd6:	2301      	movlt	r3, #1
 8002dd8:	2300      	movge	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b57      	ldr	r3, [pc, #348]	@ (8002f3c <Sensors_Update+0x204>)
 8002de0:	701a      	strb	r2, [r3, #0]
		m_front_sum = cfs.value;
 8002de2:	4b52      	ldr	r3, [pc, #328]	@ (8002f2c <Sensors_Update+0x1f4>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dee:	4b54      	ldr	r3, [pc, #336]	@ (8002f40 <Sensors_Update+0x208>)
 8002df0:	edc3 7a00 	vstr	s15, [r3]
		//m_front_diff = lfs.value - rfs.value;
		see_front_wall = (m_front_sum < FRONT_THRESHOLD);
 8002df4:	4b53      	ldr	r3, [pc, #332]	@ (8002f44 <Sensors_Update+0x20c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	ee07 3a90 	vmov	s15, r3
 8002dfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e00:	4b4f      	ldr	r3, [pc, #316]	@ (8002f40 <Sensors_Update+0x208>)
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0e:	bfcc      	ite	gt
 8002e10:	2301      	movgt	r3, #1
 8002e12:	2300      	movle	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	4b4b      	ldr	r3, [pc, #300]	@ (8002f48 <Sensors_Update+0x210>)
 8002e1a:	701a      	strb	r2, [r3, #0]



		// Calculate cross-track error
		error = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
		int left_error = SIDE_NOMINAL - lws.value;
 8002e20:	4b4a      	ldr	r3, [pc, #296]	@ (8002f4c <Sensors_Update+0x214>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b3f      	ldr	r3, [pc, #252]	@ (8002f24 <Sensors_Update+0x1ec>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	60bb      	str	r3, [r7, #8]
		int right_error = SIDE_NOMINAL - rws.value;
 8002e2c:	4b47      	ldr	r3, [pc, #284]	@ (8002f4c <Sensors_Update+0x214>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b3d      	ldr	r3, [pc, #244]	@ (8002f28 <Sensors_Update+0x1f0>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	607b      	str	r3, [r7, #4]

		if (g_steering_mode == STEER_NORMAL) {
 8002e38:	4b36      	ldr	r3, [pc, #216]	@ (8002f14 <Sensors_Update+0x1dc>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d123      	bne.n	8002e8a <Sensors_Update+0x152>
			if (see_left_wall && see_right_wall) {
 8002e42:	4b3c      	ldr	r3, [pc, #240]	@ (8002f34 <Sensors_Update+0x1fc>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d009      	beq.n	8002e60 <Sensors_Update+0x128>
 8002e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f3c <Sensors_Update+0x204>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d004      	beq.n	8002e60 <Sensors_Update+0x128>
				error = left_error - right_error;
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	e04a      	b.n	8002ef6 <Sensors_Update+0x1be>
			} else if (see_left_wall) {
 8002e60:	4b34      	ldr	r3, [pc, #208]	@ (8002f34 <Sensors_Update+0x1fc>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <Sensors_Update+0x13a>
				error = 2 * left_error;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	e041      	b.n	8002ef6 <Sensors_Update+0x1be>
			} else if (see_right_wall) {
 8002e72:	4b32      	ldr	r3, [pc, #200]	@ (8002f3c <Sensors_Update+0x204>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d03c      	beq.n	8002ef6 <Sensors_Update+0x1be>
				error = -2 * right_error;
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	07db      	lsls	r3, r3, #31
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	e035      	b.n	8002ef6 <Sensors_Update+0x1be>
			}
		} else if (g_steering_mode == STEER_LEFT_WALL) {
 8002e8a:	4b22      	ldr	r3, [pc, #136]	@ (8002f14 <Sensors_Update+0x1dc>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d103      	bne.n	8002e9c <Sensors_Update+0x164>
			error = 2 * left_error;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	e02c      	b.n	8002ef6 <Sensors_Update+0x1be>
		} else if (g_steering_mode == STEER_RIGHT_WALL) {
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f14 <Sensors_Update+0x1dc>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d127      	bne.n	8002ef6 <Sensors_Update+0x1be>
			error = -2 * right_error;
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	07db      	lsls	r3, r3, #31
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e020      	b.n	8002ef6 <Sensors_Update+0x1be>
		}
    }
    else if(g_steering_mode == STEERING_FRONT_WALL){
 8002eb4:	4b17      	ldr	r3, [pc, #92]	@ (8002f14 <Sensors_Update+0x1dc>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d11b      	bne.n	8002ef6 <Sensors_Update+0x1be>


    	if(lfs.raw > 250)lfs.raw = 250;
 8002ebe:	4b24      	ldr	r3, [pc, #144]	@ (8002f50 <Sensors_Update+0x218>)
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2bfa      	cmp	r3, #250	@ 0xfa
 8002ec6:	d902      	bls.n	8002ece <Sensors_Update+0x196>
 8002ec8:	4b21      	ldr	r3, [pc, #132]	@ (8002f50 <Sensors_Update+0x218>)
 8002eca:	22fa      	movs	r2, #250	@ 0xfa
 8002ecc:	801a      	strh	r2, [r3, #0]
		if(rfs.raw > 230)rfs.raw = 230;
 8002ece:	4b21      	ldr	r3, [pc, #132]	@ (8002f54 <Sensors_Update+0x21c>)
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2be6      	cmp	r3, #230	@ 0xe6
 8002ed6:	d902      	bls.n	8002ede <Sensors_Update+0x1a6>
 8002ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f54 <Sensors_Update+0x21c>)
 8002eda:	22e6      	movs	r2, #230	@ 0xe6
 8002edc:	801a      	strh	r2, [r3, #0]
		if(cfs.raw < 400)cfs.raw = 400;
 8002ede:	4b13      	ldr	r3, [pc, #76]	@ (8002f2c <Sensors_Update+0x1f4>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002ee8:	d203      	bcs.n	8002ef2 <Sensors_Update+0x1ba>
 8002eea:	4b10      	ldr	r3, [pc, #64]	@ (8002f2c <Sensors_Update+0x1f4>)
 8002eec:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002ef0:	801a      	strh	r2, [r3, #0]



		error = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]

//    if (see_front_wall) {
//        error = 0;  // Ignore steering near front walls
//    }

    m_cross_track_error = error;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	ee07 3a90 	vmov	s15, r3
 8002efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f00:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <Sensors_Update+0x220>)
 8002f02:	edc3 7a00 	vstr	s15, [r3]
    CalculateSteeringAdjustment();
 8002f06:	f7ff fe9b 	bl	8002c40 <CalculateSteeringAdjustment>
    //send_sensor_data();
}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000000 	.word	0x20000000
 8002f18:	20000514 	.word	0x20000514
 8002f1c:	20000654 	.word	0x20000654
 8002f20:	20000668 	.word	0x20000668
 8002f24:	2000062c 	.word	0x2000062c
 8002f28:	20000644 	.word	0x20000644
 8002f2c:	20000634 	.word	0x20000634
 8002f30:	0800baa8 	.word	0x0800baa8
 8002f34:	2000064d 	.word	0x2000064d
 8002f38:	0800baac 	.word	0x0800baac
 8002f3c:	2000064e 	.word	0x2000064e
 8002f40:	20000650 	.word	0x20000650
 8002f44:	0800bab0 	.word	0x0800bab0
 8002f48:	2000064c 	.word	0x2000064c
 8002f4c:	0800baa4 	.word	0x0800baa4
 8002f50:	20000624 	.word	0x20000624
 8002f54:	2000063c 	.word	0x2000063c
 8002f58:	2000061c 	.word	0x2000061c

08002f5c <Servo_Init>:
  * @brief  Initialize the servo control system
  * @param  frequency: PWM frequency for the servos (typically 50Hz)
  * @retval None
  */
void Servo_Init(uint16_t frequency)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	80fb      	strh	r3, [r7, #6]
    if (isInitialized)
 8002f66:	4b0c      	ldr	r3, [pc, #48]	@ (8002f98 <Servo_Init+0x3c>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d110      	bne.n	8002f90 <Servo_Init+0x34>
        return;

    // Initialize PCA9685 with the specified frequency
    PCA9685_Init(frequency);
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fa41 	bl	80023f8 <PCA9685_Init>

    // Clear the servo array
    memset(servos, 0, sizeof(servos));
 8002f76:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4807      	ldr	r0, [pc, #28]	@ (8002f9c <Servo_Init+0x40>)
 8002f7e:	f006 fdea 	bl	8009b56 <memset>
    servoCount = 0;
 8002f82:	4b07      	ldr	r3, [pc, #28]	@ (8002fa0 <Servo_Init+0x44>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
    isInitialized = 1;
 8002f88:	4b03      	ldr	r3, [pc, #12]	@ (8002f98 <Servo_Init+0x3c>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	e000      	b.n	8002f92 <Servo_Init+0x36>
        return;
 8002f90:	bf00      	nop
}
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	200008ad 	.word	0x200008ad
 8002f9c:	2000066c 	.word	0x2000066c
 8002fa0:	200008ac 	.word	0x200008ac

08002fa4 <Turn360Servo>:
    }
}


void Turn360Servo()
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
  float pwmValue;


  pwmValue = 298.00;
 8002faa:	4b09      	ldr	r3, [pc, #36]	@ (8002fd0 <Turn360Servo+0x2c>)
 8002fac:	607b      	str	r3, [r7, #4]

  // Set PWM with calculated value
  PCA9685_SetPWM(14, 0, (uint16_t)pwmValue);
 8002fae:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fb6:	ee17 3a90 	vmov	r3, s15
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	200e      	movs	r0, #14
 8002fc2:	f7ff fa2b 	bl	800241c <PCA9685_SetPWM>
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	43950000 	.word	0x43950000

08002fd4 <Stop360Servo>:

void Stop360Servo()
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
	float pwmValue;


	  pwmValue = 305;
 8002fda:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <Stop360Servo+0x2c>)
 8002fdc:	607b      	str	r3, [r7, #4]

	  // Set PWM with calculated value
	  PCA9685_SetPWM(14, 0, (uint16_t)pwmValue);
 8002fde:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fe6:	ee17 3a90 	vmov	r3, s15
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	2100      	movs	r1, #0
 8002ff0:	200e      	movs	r0, #14
 8002ff2:	f7ff fa13 	bl	800241c <PCA9685_SetPWM>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	43988000 	.word	0x43988000

08003004 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	4b10      	ldr	r3, [pc, #64]	@ (8003050 <HAL_MspInit+0x4c>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003012:	4a0f      	ldr	r2, [pc, #60]	@ (8003050 <HAL_MspInit+0x4c>)
 8003014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003018:	6453      	str	r3, [r2, #68]	@ 0x44
 800301a:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <HAL_MspInit+0x4c>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <HAL_MspInit+0x4c>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	4a08      	ldr	r2, [pc, #32]	@ (8003050 <HAL_MspInit+0x4c>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003034:	6413      	str	r3, [r2, #64]	@ 0x40
 8003036:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <HAL_MspInit+0x4c>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003042:	2007      	movs	r0, #7
 8003044:	f001 fc8c 	bl	8004960 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40023800 	.word	0x40023800

08003054 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	@ 0x28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	60da      	str	r2, [r3, #12]
 800306a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a17      	ldr	r2, [pc, #92]	@ (80030d0 <HAL_ADC_MspInit+0x7c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d127      	bne.n	80030c6 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	4b16      	ldr	r3, [pc, #88]	@ (80030d4 <HAL_ADC_MspInit+0x80>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	4a15      	ldr	r2, [pc, #84]	@ (80030d4 <HAL_ADC_MspInit+0x80>)
 8003080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003084:	6453      	str	r3, [r2, #68]	@ 0x44
 8003086:	4b13      	ldr	r3, [pc, #76]	@ (80030d4 <HAL_ADC_MspInit+0x80>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <HAL_ADC_MspInit+0x80>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	4a0e      	ldr	r2, [pc, #56]	@ (80030d4 <HAL_ADC_MspInit+0x80>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a2:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <HAL_ADC_MspInit+0x80>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_ADC_Pin;
 80030ae:	2301      	movs	r3, #1
 80030b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030b2:	2303      	movs	r3, #3
 80030b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_ADC_GPIO_Port, &GPIO_InitStruct);
 80030ba:	f107 0314 	add.w	r3, r7, #20
 80030be:	4619      	mov	r1, r3
 80030c0:	4805      	ldr	r0, [pc, #20]	@ (80030d8 <HAL_ADC_MspInit+0x84>)
 80030c2:	f002 f80b 	bl	80050dc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80030c6:	bf00      	nop
 80030c8:	3728      	adds	r7, #40	@ 0x28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40012000 	.word	0x40012000
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40020800 	.word	0x40020800

080030dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08c      	sub	sp, #48	@ 0x30
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e4:	f107 031c 	add.w	r3, r7, #28
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a42      	ldr	r2, [pc, #264]	@ (8003204 <HAL_I2C_MspInit+0x128>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d12c      	bne.n	8003158 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	4b41      	ldr	r3, [pc, #260]	@ (8003208 <HAL_I2C_MspInit+0x12c>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	4a40      	ldr	r2, [pc, #256]	@ (8003208 <HAL_I2C_MspInit+0x12c>)
 8003108:	f043 0302 	orr.w	r3, r3, #2
 800310c:	6313      	str	r3, [r2, #48]	@ 0x30
 800310e:	4b3e      	ldr	r3, [pc, #248]	@ (8003208 <HAL_I2C_MspInit+0x12c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800311a:	23c0      	movs	r3, #192	@ 0xc0
 800311c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800311e:	2312      	movs	r3, #18
 8003120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003122:	2300      	movs	r3, #0
 8003124:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003126:	2303      	movs	r3, #3
 8003128:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800312a:	2304      	movs	r3, #4
 800312c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800312e:	f107 031c 	add.w	r3, r7, #28
 8003132:	4619      	mov	r1, r3
 8003134:	4835      	ldr	r0, [pc, #212]	@ (800320c <HAL_I2C_MspInit+0x130>)
 8003136:	f001 ffd1 	bl	80050dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	4b32      	ldr	r3, [pc, #200]	@ (8003208 <HAL_I2C_MspInit+0x12c>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	4a31      	ldr	r2, [pc, #196]	@ (8003208 <HAL_I2C_MspInit+0x12c>)
 8003144:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003148:	6413      	str	r3, [r2, #64]	@ 0x40
 800314a:	4b2f      	ldr	r3, [pc, #188]	@ (8003208 <HAL_I2C_MspInit+0x12c>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003156:	e050      	b.n	80031fa <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a2c      	ldr	r2, [pc, #176]	@ (8003210 <HAL_I2C_MspInit+0x134>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d14b      	bne.n	80031fa <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	4b28      	ldr	r3, [pc, #160]	@ (8003208 <HAL_I2C_MspInit+0x12c>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	4a27      	ldr	r2, [pc, #156]	@ (8003208 <HAL_I2C_MspInit+0x12c>)
 800316c:	f043 0302 	orr.w	r3, r3, #2
 8003170:	6313      	str	r3, [r2, #48]	@ 0x30
 8003172:	4b25      	ldr	r3, [pc, #148]	@ (8003208 <HAL_I2C_MspInit+0x12c>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	4b21      	ldr	r3, [pc, #132]	@ (8003208 <HAL_I2C_MspInit+0x12c>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	4a20      	ldr	r2, [pc, #128]	@ (8003208 <HAL_I2C_MspInit+0x12c>)
 8003188:	f043 0304 	orr.w	r3, r3, #4
 800318c:	6313      	str	r3, [r2, #48]	@ 0x30
 800318e:	4b1e      	ldr	r3, [pc, #120]	@ (8003208 <HAL_I2C_MspInit+0x12c>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800319a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800319e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031a0:	2312      	movs	r3, #18
 80031a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a8:	2303      	movs	r3, #3
 80031aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031ac:	2304      	movs	r3, #4
 80031ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b0:	f107 031c 	add.w	r3, r7, #28
 80031b4:	4619      	mov	r1, r3
 80031b6:	4815      	ldr	r0, [pc, #84]	@ (800320c <HAL_I2C_MspInit+0x130>)
 80031b8:	f001 ff90 	bl	80050dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80031bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031c2:	2312      	movs	r3, #18
 80031c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ca:	2303      	movs	r3, #3
 80031cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80031ce:	2304      	movs	r3, #4
 80031d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d2:	f107 031c 	add.w	r3, r7, #28
 80031d6:	4619      	mov	r1, r3
 80031d8:	480e      	ldr	r0, [pc, #56]	@ (8003214 <HAL_I2C_MspInit+0x138>)
 80031da:	f001 ff7f 	bl	80050dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	4b09      	ldr	r3, [pc, #36]	@ (8003208 <HAL_I2C_MspInit+0x12c>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	4a08      	ldr	r2, [pc, #32]	@ (8003208 <HAL_I2C_MspInit+0x12c>)
 80031e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80031ee:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <HAL_I2C_MspInit+0x12c>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
}
 80031fa:	bf00      	nop
 80031fc:	3730      	adds	r7, #48	@ 0x30
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40005400 	.word	0x40005400
 8003208:	40023800 	.word	0x40023800
 800320c:	40020400 	.word	0x40020400
 8003210:	40005800 	.word	0x40005800
 8003214:	40020800 	.word	0x40020800

08003218 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08c      	sub	sp, #48	@ 0x30
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	f107 031c 	add.w	r3, r7, #28
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a32      	ldr	r2, [pc, #200]	@ (8003300 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d12d      	bne.n	8003296 <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	4b31      	ldr	r3, [pc, #196]	@ (8003304 <HAL_TIM_Encoder_MspInit+0xec>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	4a30      	ldr	r2, [pc, #192]	@ (8003304 <HAL_TIM_Encoder_MspInit+0xec>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6453      	str	r3, [r2, #68]	@ 0x44
 800324a:	4b2e      	ldr	r3, [pc, #184]	@ (8003304 <HAL_TIM_Encoder_MspInit+0xec>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	4b2a      	ldr	r3, [pc, #168]	@ (8003304 <HAL_TIM_Encoder_MspInit+0xec>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325e:	4a29      	ldr	r2, [pc, #164]	@ (8003304 <HAL_TIM_Encoder_MspInit+0xec>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6313      	str	r3, [r2, #48]	@ 0x30
 8003266:	4b27      	ldr	r3, [pc, #156]	@ (8003304 <HAL_TIM_Encoder_MspInit+0xec>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8003272:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003278:	2302      	movs	r3, #2
 800327a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003280:	2300      	movs	r3, #0
 8003282:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003284:	2301      	movs	r3, #1
 8003286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003288:	f107 031c 	add.w	r3, r7, #28
 800328c:	4619      	mov	r1, r3
 800328e:	481e      	ldr	r0, [pc, #120]	@ (8003308 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003290:	f001 ff24 	bl	80050dc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003294:	e030      	b.n	80032f8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800329e:	d12b      	bne.n	80032f8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	4b17      	ldr	r3, [pc, #92]	@ (8003304 <HAL_TIM_Encoder_MspInit+0xec>)
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	4a16      	ldr	r2, [pc, #88]	@ (8003304 <HAL_TIM_Encoder_MspInit+0xec>)
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80032b0:	4b14      	ldr	r3, [pc, #80]	@ (8003304 <HAL_TIM_Encoder_MspInit+0xec>)
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	4b10      	ldr	r3, [pc, #64]	@ (8003304 <HAL_TIM_Encoder_MspInit+0xec>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003304 <HAL_TIM_Encoder_MspInit+0xec>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80032cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003304 <HAL_TIM_Encoder_MspInit+0xec>)
 80032ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 80032d8:	2303      	movs	r3, #3
 80032da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032dc:	2302      	movs	r3, #2
 80032de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e4:	2300      	movs	r3, #0
 80032e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032e8:	2301      	movs	r3, #1
 80032ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ec:	f107 031c 	add.w	r3, r7, #28
 80032f0:	4619      	mov	r1, r3
 80032f2:	4805      	ldr	r0, [pc, #20]	@ (8003308 <HAL_TIM_Encoder_MspInit+0xf0>)
 80032f4:	f001 fef2 	bl	80050dc <HAL_GPIO_Init>
}
 80032f8:	bf00      	nop
 80032fa:	3730      	adds	r7, #48	@ 0x30
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40010000 	.word	0x40010000
 8003304:	40023800 	.word	0x40023800
 8003308:	40020000 	.word	0x40020000

0800330c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a0b      	ldr	r2, [pc, #44]	@ (8003348 <HAL_TIM_PWM_MspInit+0x3c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d10d      	bne.n	800333a <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	4b0a      	ldr	r3, [pc, #40]	@ (800334c <HAL_TIM_PWM_MspInit+0x40>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	4a09      	ldr	r2, [pc, #36]	@ (800334c <HAL_TIM_PWM_MspInit+0x40>)
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	6413      	str	r3, [r2, #64]	@ 0x40
 800332e:	4b07      	ldr	r3, [pc, #28]	@ (800334c <HAL_TIM_PWM_MspInit+0x40>)
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	40000400 	.word	0x40000400
 800334c:	40023800 	.word	0x40023800

08003350 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	@ 0x28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003358:	f107 0314 	add.w	r3, r7, #20
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a21      	ldr	r2, [pc, #132]	@ (80033f4 <HAL_TIM_MspPostInit+0xa4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d13b      	bne.n	80033ea <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	4b20      	ldr	r3, [pc, #128]	@ (80033f8 <HAL_TIM_MspPostInit+0xa8>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337a:	4a1f      	ldr	r2, [pc, #124]	@ (80033f8 <HAL_TIM_MspPostInit+0xa8>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6313      	str	r3, [r2, #48]	@ 0x30
 8003382:	4b1d      	ldr	r3, [pc, #116]	@ (80033f8 <HAL_TIM_MspPostInit+0xa8>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	4b19      	ldr	r3, [pc, #100]	@ (80033f8 <HAL_TIM_MspPostInit+0xa8>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003396:	4a18      	ldr	r2, [pc, #96]	@ (80033f8 <HAL_TIM_MspPostInit+0xa8>)
 8003398:	f043 0302 	orr.w	r3, r3, #2
 800339c:	6313      	str	r3, [r2, #48]	@ 0x30
 800339e:	4b16      	ldr	r3, [pc, #88]	@ (80033f8 <HAL_TIM_MspPostInit+0xa8>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033aa:	23c0      	movs	r3, #192	@ 0xc0
 80033ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ae:	2302      	movs	r3, #2
 80033b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b6:	2300      	movs	r3, #0
 80033b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033ba:	2302      	movs	r3, #2
 80033bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033be:	f107 0314 	add.w	r3, r7, #20
 80033c2:	4619      	mov	r1, r3
 80033c4:	480d      	ldr	r0, [pc, #52]	@ (80033fc <HAL_TIM_MspPostInit+0xac>)
 80033c6:	f001 fe89 	bl	80050dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033ca:	2303      	movs	r3, #3
 80033cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ce:	2302      	movs	r3, #2
 80033d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	2300      	movs	r3, #0
 80033d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033da:	2302      	movs	r3, #2
 80033dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033de:	f107 0314 	add.w	r3, r7, #20
 80033e2:	4619      	mov	r1, r3
 80033e4:	4806      	ldr	r0, [pc, #24]	@ (8003400 <HAL_TIM_MspPostInit+0xb0>)
 80033e6:	f001 fe79 	bl	80050dc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80033ea:	bf00      	nop
 80033ec:	3728      	adds	r7, #40	@ 0x28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40020000 	.word	0x40020000
 8003400:	40020400 	.word	0x40020400

08003404 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08e      	sub	sp, #56	@ 0x38
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a66      	ldr	r2, [pc, #408]	@ (80035bc <HAL_UART_MspInit+0x1b8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d12c      	bne.n	8003480 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	623b      	str	r3, [r7, #32]
 800342a:	4b65      	ldr	r3, [pc, #404]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	4a64      	ldr	r2, [pc, #400]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 8003430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003434:	6413      	str	r3, [r2, #64]	@ 0x40
 8003436:	4b62      	ldr	r3, [pc, #392]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	623b      	str	r3, [r7, #32]
 8003440:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	4b5e      	ldr	r3, [pc, #376]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	4a5d      	ldr	r2, [pc, #372]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6313      	str	r3, [r2, #48]	@ 0x30
 8003452:	4b5b      	ldr	r3, [pc, #364]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800345e:	230c      	movs	r3, #12
 8003460:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003462:	2302      	movs	r3, #2
 8003464:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346a:	2303      	movs	r3, #3
 800346c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800346e:	2307      	movs	r3, #7
 8003470:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003476:	4619      	mov	r1, r3
 8003478:	4852      	ldr	r0, [pc, #328]	@ (80035c4 <HAL_UART_MspInit+0x1c0>)
 800347a:	f001 fe2f 	bl	80050dc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800347e:	e099      	b.n	80035b4 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a50      	ldr	r2, [pc, #320]	@ (80035c8 <HAL_UART_MspInit+0x1c4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d12d      	bne.n	80034e6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	4b4c      	ldr	r3, [pc, #304]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	4a4b      	ldr	r2, [pc, #300]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 8003494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003498:	6413      	str	r3, [r2, #64]	@ 0x40
 800349a:	4b49      	ldr	r3, [pc, #292]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034a2:	61bb      	str	r3, [r7, #24]
 80034a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	4b45      	ldr	r3, [pc, #276]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	4a44      	ldr	r2, [pc, #272]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 80034b0:	f043 0304 	orr.w	r3, r3, #4
 80034b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b6:	4b42      	ldr	r3, [pc, #264]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80034c2:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d0:	2303      	movs	r3, #3
 80034d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034d4:	2307      	movs	r3, #7
 80034d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034dc:	4619      	mov	r1, r3
 80034de:	483b      	ldr	r0, [pc, #236]	@ (80035cc <HAL_UART_MspInit+0x1c8>)
 80034e0:	f001 fdfc 	bl	80050dc <HAL_GPIO_Init>
}
 80034e4:	e066      	b.n	80035b4 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a39      	ldr	r2, [pc, #228]	@ (80035d0 <HAL_UART_MspInit+0x1cc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d161      	bne.n	80035b4 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80034f0:	2300      	movs	r3, #0
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	4b32      	ldr	r3, [pc, #200]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 80034f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f8:	4a31      	ldr	r2, [pc, #196]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 80034fa:	f043 0320 	orr.w	r3, r3, #32
 80034fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8003500:	4b2f      	ldr	r3, [pc, #188]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 8003502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	4b2b      	ldr	r3, [pc, #172]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003514:	4a2a      	ldr	r2, [pc, #168]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 8003516:	f043 0304 	orr.w	r3, r3, #4
 800351a:	6313      	str	r3, [r2, #48]	@ 0x30
 800351c:	4b28      	ldr	r3, [pc, #160]	@ (80035c0 <HAL_UART_MspInit+0x1bc>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003528:	23c0      	movs	r3, #192	@ 0xc0
 800352a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	2302      	movs	r3, #2
 800352e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003534:	2303      	movs	r3, #3
 8003536:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003538:	2308      	movs	r3, #8
 800353a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800353c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003540:	4619      	mov	r1, r3
 8003542:	4822      	ldr	r0, [pc, #136]	@ (80035cc <HAL_UART_MspInit+0x1c8>)
 8003544:	f001 fdca 	bl	80050dc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003548:	4b22      	ldr	r3, [pc, #136]	@ (80035d4 <HAL_UART_MspInit+0x1d0>)
 800354a:	4a23      	ldr	r2, [pc, #140]	@ (80035d8 <HAL_UART_MspInit+0x1d4>)
 800354c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800354e:	4b21      	ldr	r3, [pc, #132]	@ (80035d4 <HAL_UART_MspInit+0x1d0>)
 8003550:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003554:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003556:	4b1f      	ldr	r3, [pc, #124]	@ (80035d4 <HAL_UART_MspInit+0x1d0>)
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800355c:	4b1d      	ldr	r3, [pc, #116]	@ (80035d4 <HAL_UART_MspInit+0x1d0>)
 800355e:	2200      	movs	r2, #0
 8003560:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003562:	4b1c      	ldr	r3, [pc, #112]	@ (80035d4 <HAL_UART_MspInit+0x1d0>)
 8003564:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003568:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800356a:	4b1a      	ldr	r3, [pc, #104]	@ (80035d4 <HAL_UART_MspInit+0x1d0>)
 800356c:	2200      	movs	r2, #0
 800356e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003570:	4b18      	ldr	r3, [pc, #96]	@ (80035d4 <HAL_UART_MspInit+0x1d0>)
 8003572:	2200      	movs	r2, #0
 8003574:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003576:	4b17      	ldr	r3, [pc, #92]	@ (80035d4 <HAL_UART_MspInit+0x1d0>)
 8003578:	2200      	movs	r2, #0
 800357a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800357c:	4b15      	ldr	r3, [pc, #84]	@ (80035d4 <HAL_UART_MspInit+0x1d0>)
 800357e:	2200      	movs	r2, #0
 8003580:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003582:	4b14      	ldr	r3, [pc, #80]	@ (80035d4 <HAL_UART_MspInit+0x1d0>)
 8003584:	2200      	movs	r2, #0
 8003586:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003588:	4812      	ldr	r0, [pc, #72]	@ (80035d4 <HAL_UART_MspInit+0x1d0>)
 800358a:	f001 fa2b 	bl	80049e4 <HAL_DMA_Init>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_UART_MspInit+0x194>
      Error_Handler();
 8003594:	f7fe fd66 	bl	8002064 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a0e      	ldr	r2, [pc, #56]	@ (80035d4 <HAL_UART_MspInit+0x1d0>)
 800359c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800359e:	4a0d      	ldr	r2, [pc, #52]	@ (80035d4 <HAL_UART_MspInit+0x1d0>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80035a4:	2200      	movs	r2, #0
 80035a6:	2100      	movs	r1, #0
 80035a8:	2047      	movs	r0, #71	@ 0x47
 80035aa:	f001 f9e4 	bl	8004976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80035ae:	2047      	movs	r0, #71	@ 0x47
 80035b0:	f001 f9fd 	bl	80049ae <HAL_NVIC_EnableIRQ>
}
 80035b4:	bf00      	nop
 80035b6:	3738      	adds	r7, #56	@ 0x38
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40004400 	.word	0x40004400
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40020000 	.word	0x40020000
 80035c8:	40004800 	.word	0x40004800
 80035cc:	40020800 	.word	0x40020800
 80035d0:	40011400 	.word	0x40011400
 80035d4:	200004b0 	.word	0x200004b0
 80035d8:	40026428 	.word	0x40026428

080035dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035e0:	bf00      	nop
 80035e2:	e7fd      	b.n	80035e0 <NMI_Handler+0x4>

080035e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <HardFault_Handler+0x4>

080035ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035f0:	bf00      	nop
 80035f2:	e7fd      	b.n	80035f0 <MemManage_Handler+0x4>

080035f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035f8:	bf00      	nop
 80035fa:	e7fd      	b.n	80035f8 <BusFault_Handler+0x4>

080035fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003600:	bf00      	nop
 8003602:	e7fd      	b.n	8003600 <UsageFault_Handler+0x4>

08003604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003612:	b480      	push	{r7}
 8003614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003634:	f000 fc70 	bl	8003f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick_accumulator += 1;  // Increment by 1 ms
 8003638:	4b0c      	ldr	r3, [pc, #48]	@ (800366c <SysTick_Handler+0x3c>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	3301      	adds	r3, #1
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4b0a      	ldr	r3, [pc, #40]	@ (800366c <SysTick_Handler+0x3c>)
 8003644:	701a      	strb	r2, [r3, #0]
  if(systick_function_enabled){
 8003646:	4b0a      	ldr	r3, [pc, #40]	@ (8003670 <SysTick_Handler+0x40>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d009      	beq.n	8003664 <SysTick_Handler+0x34>
	  if (tick_accumulator >= TICK_INTERVAL) {
 8003650:	4b06      	ldr	r3, [pc, #24]	@ (800366c <SysTick_Handler+0x3c>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b13      	cmp	r3, #19
 8003658:	d904      	bls.n	8003664 <SysTick_Handler+0x34>
	        tick_accumulator = 0;  // Accumulate remainder
 800365a:	4b04      	ldr	r3, [pc, #16]	@ (800366c <SysTick_Handler+0x3c>)
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
	        SysTickFunction();
 8003660:	f000 f8f4 	bl	800384c <SysTickFunction>
	      }
  }

  CheckEncoderCounts();
 8003664:	f000 f92a 	bl	80038bc <CheckEncoderCounts>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003668:	bf00      	nop
 800366a:	bd80      	pop	{r7, pc}
 800366c:	200008ae 	.word	0x200008ae
 8003670:	20000510 	.word	0x20000510

08003674 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003678:	4802      	ldr	r0, [pc, #8]	@ (8003684 <DMA2_Stream1_IRQHandler+0x10>)
 800367a:	f001 faf3 	bl	8004c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	200004b0 	.word	0x200004b0

08003688 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800368c:	4802      	ldr	r0, [pc, #8]	@ (8003698 <USART6_IRQHandler+0x10>)
 800368e:	f004 fe39 	bl	8008304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000468 	.word	0x20000468

0800369c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return 1;
 80036a0:	2301      	movs	r3, #1
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <_kill>:

int _kill(int pid, int sig)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036b6:	f006 faa1 	bl	8009bfc <__errno>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2216      	movs	r2, #22
 80036be:	601a      	str	r2, [r3, #0]
  return -1;
 80036c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_exit>:

void _exit (int status)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036d4:	f04f 31ff 	mov.w	r1, #4294967295
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff ffe7 	bl	80036ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80036de:	bf00      	nop
 80036e0:	e7fd      	b.n	80036de <_exit+0x12>

080036e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b086      	sub	sp, #24
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e00a      	b.n	800370a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036f4:	f3af 8000 	nop.w
 80036f8:	4601      	mov	r1, r0
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	60ba      	str	r2, [r7, #8]
 8003700:	b2ca      	uxtb	r2, r1
 8003702:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	3301      	adds	r3, #1
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	dbf0      	blt.n	80036f4 <_read+0x12>
  }

  return len;
 8003712:	687b      	ldr	r3, [r7, #4]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	e009      	b.n	8003742 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	60ba      	str	r2, [r7, #8]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	3301      	adds	r3, #1
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	dbf1      	blt.n	800372e <_write+0x12>
  }
  return len;
 800374a:	687b      	ldr	r3, [r7, #4]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <_close>:

int _close(int file)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800375c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800377c:	605a      	str	r2, [r3, #4]
  return 0;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <_isatty>:

int _isatty(int file)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003794:	2301      	movs	r3, #1
}
 8003796:	4618      	mov	r0, r3
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b085      	sub	sp, #20
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037c4:	4a14      	ldr	r2, [pc, #80]	@ (8003818 <_sbrk+0x5c>)
 80037c6:	4b15      	ldr	r3, [pc, #84]	@ (800381c <_sbrk+0x60>)
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037d0:	4b13      	ldr	r3, [pc, #76]	@ (8003820 <_sbrk+0x64>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037d8:	4b11      	ldr	r3, [pc, #68]	@ (8003820 <_sbrk+0x64>)
 80037da:	4a12      	ldr	r2, [pc, #72]	@ (8003824 <_sbrk+0x68>)
 80037dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037de:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <_sbrk+0x64>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d207      	bcs.n	80037fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037ec:	f006 fa06 	bl	8009bfc <__errno>
 80037f0:	4603      	mov	r3, r0
 80037f2:	220c      	movs	r2, #12
 80037f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037f6:	f04f 33ff 	mov.w	r3, #4294967295
 80037fa:	e009      	b.n	8003810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037fc:	4b08      	ldr	r3, [pc, #32]	@ (8003820 <_sbrk+0x64>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003802:	4b07      	ldr	r3, [pc, #28]	@ (8003820 <_sbrk+0x64>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4413      	add	r3, r2
 800380a:	4a05      	ldr	r2, [pc, #20]	@ (8003820 <_sbrk+0x64>)
 800380c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800380e:	68fb      	ldr	r3, [r7, #12]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20020000 	.word	0x20020000
 800381c:	00000400 	.word	0x00000400
 8003820:	200008b0 	.word	0x200008b0
 8003824:	20000e10 	.word	0x20000e10

08003828 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800382c:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <SystemInit+0x20>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003832:	4a05      	ldr	r2, [pc, #20]	@ (8003848 <SystemInit+0x20>)
 8003834:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003838:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800383c:	bf00      	nop
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <SysTickFunction>:
extern Motion motion;

extern volatile uint8_t systick_function_enabled;
extern UART_HandleTypeDef huart3;

void SysTickFunction(void) {
 800384c:	b580      	push	{r7, lr}
 800384e:	ed2d 8b02 	vpush	{d8}
 8003852:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */
	//--------------------------------------------------------------------
		update_Encoder_Data();
 8003854:	f7fd ff10 	bl	8001678 <update_Encoder_Data>
		Motion_Update(&motion);
 8003858:	4810      	ldr	r0, [pc, #64]	@ (800389c <SysTickFunction+0x50>)
 800385a:	f7fe fc72 	bl	8002142 <Motion_Update>
		Sensors_Update();
 800385e:	f7ff fa6b 	bl	8002d38 <Sensors_Update>

		UpdateControllers(&controller, Motion_Velocity(&motion), Motion_Omega(&motion), get_steering_feedback());
 8003862:	480e      	ldr	r0, [pc, #56]	@ (800389c <SysTickFunction+0x50>)
 8003864:	f7fe fc30 	bl	80020c8 <Motion_Velocity>
 8003868:	eeb0 8a40 	vmov.f32	s16, s0
 800386c:	480b      	ldr	r0, [pc, #44]	@ (800389c <SysTickFunction+0x50>)
 800386e:	f7fe fc3b 	bl	80020e8 <Motion_Omega>
 8003872:	eef0 8a40 	vmov.f32	s17, s0
 8003876:	f7ff f9d5 	bl	8002c24 <get_steering_feedback>
 800387a:	eef0 7a40 	vmov.f32	s15, s0
 800387e:	eeb0 1a67 	vmov.f32	s2, s15
 8003882:	eef0 0a68 	vmov.f32	s1, s17
 8003886:	eeb0 0a48 	vmov.f32	s0, s16
 800388a:	4805      	ldr	r0, [pc, #20]	@ (80038a0 <SysTickFunction+0x54>)
 800388c:	f7fd fcca 	bl	8001224 <UpdateControllers>
	//--------------------------------------------------------------------
		//UART_Transmit_EncoderData(&huart3);



}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	ecbd 8b02 	vpop	{d8}
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000540 	.word	0x20000540
 80038a0:	200005f4 	.word	0x200005f4

080038a4 <EnableSysTickFunction>:



void EnableSysTickFunction(void) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  //HAL_Delay(10);
  systick_function_enabled = 1;
 80038a8:	4b03      	ldr	r3, [pc, #12]	@ (80038b8 <EnableSysTickFunction+0x14>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10);
 80038ae:	200a      	movs	r0, #10
 80038b0:	f000 fb52 	bl	8003f58 <HAL_Delay>
}
 80038b4:	bf00      	nop
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20000510 	.word	0x20000510

080038bc <CheckEncoderCounts>:
	//HAL_Delay(10);
  systick_function_enabled = 0;
  HAL_Delay(10);
}

void CheckEncoderCounts(void){
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
		 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
		 *
		 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
		 * turning. But that'll be approximately never in Micromouse :)
		 */
		if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 80038c2:	f7fd feb1 	bl	8001628 <getRightEncoderCounts>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461a      	mov	r2, r3
 80038ca:	f647 1318 	movw	r3, #31000	@ 0x7918
 80038ce:	429a      	cmp	r2, r3
 80038d0:	dc15      	bgt.n	80038fe <CheckEncoderCounts+0x42>
 80038d2:	f7fd feb5 	bl	8001640 <getLeftEncoderCounts>
 80038d6:	4603      	mov	r3, r0
 80038d8:	461a      	mov	r2, r3
 80038da:	f647 1318 	movw	r3, #31000	@ 0x7918
 80038de:	429a      	cmp	r2, r3
 80038e0:	dc0d      	bgt.n	80038fe <CheckEncoderCounts+0x42>
				|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 80038e2:	f7fd fea1 	bl	8001628 <getRightEncoderCounts>
 80038e6:	4603      	mov	r3, r0
 80038e8:	461a      	mov	r2, r3
 80038ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003928 <CheckEncoderCounts+0x6c>)
 80038ec:	429a      	cmp	r2, r3
 80038ee:	db06      	blt.n	80038fe <CheckEncoderCounts+0x42>
 80038f0:	f7fd fea6 	bl	8001640 <getLeftEncoderCounts>
 80038f4:	4603      	mov	r3, r0
 80038f6:	461a      	mov	r2, r3
 80038f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <CheckEncoderCounts+0x6c>)
 80038fa:	429a      	cmp	r2, r3
 80038fc:	da10      	bge.n	8003920 <CheckEncoderCounts+0x64>
			int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 80038fe:	f7fd fe93 	bl	8001628 <getRightEncoderCounts>
 8003902:	4603      	mov	r3, r0
 8003904:	b29c      	uxth	r4, r3
 8003906:	f7fd fe9b 	bl	8001640 <getLeftEncoderCounts>
 800390a:	4603      	mov	r3, r0
 800390c:	b29b      	uxth	r3, r3
 800390e:	1ae3      	subs	r3, r4, r3
 8003910:	b29b      	uxth	r3, r3
 8003912:	80fb      	strh	r3, [r7, #6]
			resetEncodersinSystick();
 8003914:	f7fd fea0 	bl	8001658 <resetEncodersinSystick>
			TIM1->CNT = (int16_t) difference;
 8003918:	4a04      	ldr	r2, [pc, #16]	@ (800392c <CheckEncoderCounts+0x70>)
 800391a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800391e:	6253      	str	r3, [r2, #36]	@ 0x24
		}
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bd90      	pop	{r4, r7, pc}
 8003928:	ffff86e8 	.word	0xffff86e8
 800392c:	40010000 	.word	0x40010000

08003930 <UART_Init>:
#include "string.h"
#include "encoders.h"

// UART Initialization function
void UART_Init(UART_HandleTypeDef *huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
    // You can customize this function depending on your UART configuration
    // Initialize UART with the desired configuration (baud rate, parity, stop bits, etc.)
    HAL_UART_Init(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f004 fc93 	bl	8008264 <HAL_UART_Init>
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003948:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003980 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800394c:	f7ff ff6c 	bl	8003828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003950:	480c      	ldr	r0, [pc, #48]	@ (8003984 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003952:	490d      	ldr	r1, [pc, #52]	@ (8003988 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003954:	4a0d      	ldr	r2, [pc, #52]	@ (800398c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003958:	e002      	b.n	8003960 <LoopCopyDataInit>

0800395a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800395a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800395c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800395e:	3304      	adds	r3, #4

08003960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003964:	d3f9      	bcc.n	800395a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003966:	4a0a      	ldr	r2, [pc, #40]	@ (8003990 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003968:	4c0a      	ldr	r4, [pc, #40]	@ (8003994 <LoopFillZerobss+0x22>)
  movs r3, #0
 800396a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800396c:	e001      	b.n	8003972 <LoopFillZerobss>

0800396e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800396e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003970:	3204      	adds	r2, #4

08003972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003974:	d3fb      	bcc.n	800396e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003976:	f006 f947 	bl	8009c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800397a:	f7fd ff37 	bl	80017ec <main>
  bx  lr    
 800397e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003980:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003988:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800398c:	0800c25c 	.word	0x0800c25c
  ldr r2, =_sbss
 8003990:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003994:	20000e0c 	.word	0x20000e0c

08003998 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003998:	e7fe      	b.n	8003998 <ADC_IRQHandler>
	...

0800399c <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80039a2:	f000 f9cd 	bl	8003d40 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80039a6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80039aa:	2201      	movs	r2, #1
 80039ac:	2178      	movs	r1, #120	@ 0x78
 80039ae:	485b      	ldr	r0, [pc, #364]	@ (8003b1c <SSD1306_Init+0x180>)
 80039b0:	f002 fab0 	bl	8005f14 <HAL_I2C_IsDeviceReady>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e0a9      	b.n	8003b12 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80039be:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80039c2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80039c4:	e002      	b.n	80039cc <SSD1306_Init+0x30>
		p--;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	607b      	str	r3, [r7, #4]
	while(p>0)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f9      	bne.n	80039c6 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80039d2:	22ae      	movs	r2, #174	@ 0xae
 80039d4:	2100      	movs	r1, #0
 80039d6:	2078      	movs	r0, #120	@ 0x78
 80039d8:	f000 fa2e 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80039dc:	2220      	movs	r2, #32
 80039de:	2100      	movs	r1, #0
 80039e0:	2078      	movs	r0, #120	@ 0x78
 80039e2:	f000 fa29 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80039e6:	2210      	movs	r2, #16
 80039e8:	2100      	movs	r1, #0
 80039ea:	2078      	movs	r0, #120	@ 0x78
 80039ec:	f000 fa24 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80039f0:	22b0      	movs	r2, #176	@ 0xb0
 80039f2:	2100      	movs	r1, #0
 80039f4:	2078      	movs	r0, #120	@ 0x78
 80039f6:	f000 fa1f 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80039fa:	22c8      	movs	r2, #200	@ 0xc8
 80039fc:	2100      	movs	r1, #0
 80039fe:	2078      	movs	r0, #120	@ 0x78
 8003a00:	f000 fa1a 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003a04:	2200      	movs	r2, #0
 8003a06:	2100      	movs	r1, #0
 8003a08:	2078      	movs	r0, #120	@ 0x78
 8003a0a:	f000 fa15 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003a0e:	2210      	movs	r2, #16
 8003a10:	2100      	movs	r1, #0
 8003a12:	2078      	movs	r0, #120	@ 0x78
 8003a14:	f000 fa10 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003a18:	2240      	movs	r2, #64	@ 0x40
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	2078      	movs	r0, #120	@ 0x78
 8003a1e:	f000 fa0b 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003a22:	2281      	movs	r2, #129	@ 0x81
 8003a24:	2100      	movs	r1, #0
 8003a26:	2078      	movs	r0, #120	@ 0x78
 8003a28:	f000 fa06 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003a2c:	22ff      	movs	r2, #255	@ 0xff
 8003a2e:	2100      	movs	r1, #0
 8003a30:	2078      	movs	r0, #120	@ 0x78
 8003a32:	f000 fa01 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003a36:	22a1      	movs	r2, #161	@ 0xa1
 8003a38:	2100      	movs	r1, #0
 8003a3a:	2078      	movs	r0, #120	@ 0x78
 8003a3c:	f000 f9fc 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003a40:	22a6      	movs	r2, #166	@ 0xa6
 8003a42:	2100      	movs	r1, #0
 8003a44:	2078      	movs	r0, #120	@ 0x78
 8003a46:	f000 f9f7 	bl	8003e38 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003a4a:	22a8      	movs	r2, #168	@ 0xa8
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	2078      	movs	r0, #120	@ 0x78
 8003a50:	f000 f9f2 	bl	8003e38 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8003a54:	223f      	movs	r2, #63	@ 0x3f
 8003a56:	2100      	movs	r1, #0
 8003a58:	2078      	movs	r0, #120	@ 0x78
 8003a5a:	f000 f9ed 	bl	8003e38 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003a5e:	22a4      	movs	r2, #164	@ 0xa4
 8003a60:	2100      	movs	r1, #0
 8003a62:	2078      	movs	r0, #120	@ 0x78
 8003a64:	f000 f9e8 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003a68:	22d3      	movs	r2, #211	@ 0xd3
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	2078      	movs	r0, #120	@ 0x78
 8003a6e:	f000 f9e3 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003a72:	2200      	movs	r2, #0
 8003a74:	2100      	movs	r1, #0
 8003a76:	2078      	movs	r0, #120	@ 0x78
 8003a78:	f000 f9de 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003a7c:	22d5      	movs	r2, #213	@ 0xd5
 8003a7e:	2100      	movs	r1, #0
 8003a80:	2078      	movs	r0, #120	@ 0x78
 8003a82:	f000 f9d9 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003a86:	22f0      	movs	r2, #240	@ 0xf0
 8003a88:	2100      	movs	r1, #0
 8003a8a:	2078      	movs	r0, #120	@ 0x78
 8003a8c:	f000 f9d4 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003a90:	22d9      	movs	r2, #217	@ 0xd9
 8003a92:	2100      	movs	r1, #0
 8003a94:	2078      	movs	r0, #120	@ 0x78
 8003a96:	f000 f9cf 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003a9a:	2222      	movs	r2, #34	@ 0x22
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	2078      	movs	r0, #120	@ 0x78
 8003aa0:	f000 f9ca 	bl	8003e38 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003aa4:	22da      	movs	r2, #218	@ 0xda
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	2078      	movs	r0, #120	@ 0x78
 8003aaa:	f000 f9c5 	bl	8003e38 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8003aae:	2212      	movs	r2, #18
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	2078      	movs	r0, #120	@ 0x78
 8003ab4:	f000 f9c0 	bl	8003e38 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003ab8:	22db      	movs	r2, #219	@ 0xdb
 8003aba:	2100      	movs	r1, #0
 8003abc:	2078      	movs	r0, #120	@ 0x78
 8003abe:	f000 f9bb 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	2078      	movs	r0, #120	@ 0x78
 8003ac8:	f000 f9b6 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003acc:	228d      	movs	r2, #141	@ 0x8d
 8003ace:	2100      	movs	r1, #0
 8003ad0:	2078      	movs	r0, #120	@ 0x78
 8003ad2:	f000 f9b1 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003ad6:	2214      	movs	r2, #20
 8003ad8:	2100      	movs	r1, #0
 8003ada:	2078      	movs	r0, #120	@ 0x78
 8003adc:	f000 f9ac 	bl	8003e38 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003ae0:	22af      	movs	r2, #175	@ 0xaf
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	2078      	movs	r0, #120	@ 0x78
 8003ae6:	f000 f9a7 	bl	8003e38 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8003aea:	222e      	movs	r2, #46	@ 0x2e
 8003aec:	2100      	movs	r1, #0
 8003aee:	2078      	movs	r0, #120	@ 0x78
 8003af0:	f000 f9a2 	bl	8003e38 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003af4:	2000      	movs	r0, #0
 8003af6:	f000 f843 	bl	8003b80 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8003afa:	f000 f813 	bl	8003b24 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8003afe:	4b08      	ldr	r3, [pc, #32]	@ (8003b20 <SSD1306_Init+0x184>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003b04:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <SSD1306_Init+0x184>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003b0a:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <SSD1306_Init+0x184>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8003b10:	2301      	movs	r3, #1
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000258 	.word	0x20000258
 8003b20:	20000cb4 	.word	0x20000cb4

08003b24 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	71fb      	strb	r3, [r7, #7]
 8003b2e:	e01d      	b.n	8003b6c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003b30:	79fb      	ldrb	r3, [r7, #7]
 8003b32:	3b50      	subs	r3, #80	@ 0x50
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	2100      	movs	r1, #0
 8003b3a:	2078      	movs	r0, #120	@ 0x78
 8003b3c:	f000 f97c 	bl	8003e38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003b40:	2200      	movs	r2, #0
 8003b42:	2100      	movs	r1, #0
 8003b44:	2078      	movs	r0, #120	@ 0x78
 8003b46:	f000 f977 	bl	8003e38 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003b4a:	2210      	movs	r2, #16
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	2078      	movs	r0, #120	@ 0x78
 8003b50:	f000 f972 	bl	8003e38 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	01db      	lsls	r3, r3, #7
 8003b58:	4a08      	ldr	r2, [pc, #32]	@ (8003b7c <SSD1306_UpdateScreen+0x58>)
 8003b5a:	441a      	add	r2, r3
 8003b5c:	2380      	movs	r3, #128	@ 0x80
 8003b5e:	2140      	movs	r1, #64	@ 0x40
 8003b60:	2078      	movs	r0, #120	@ 0x78
 8003b62:	f000 f903 	bl	8003d6c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	71fb      	strb	r3, [r7, #7]
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	2b07      	cmp	r3, #7
 8003b70:	d9de      	bls.n	8003b30 <SSD1306_UpdateScreen+0xc>
	}
}
 8003b72:	bf00      	nop
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	200008b4 	.word	0x200008b4

08003b80 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <SSD1306_Fill+0x14>
 8003b90:	2300      	movs	r3, #0
 8003b92:	e000      	b.n	8003b96 <SSD1306_Fill+0x16>
 8003b94:	23ff      	movs	r3, #255	@ 0xff
 8003b96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4803      	ldr	r0, [pc, #12]	@ (8003bac <SSD1306_Fill+0x2c>)
 8003b9e:	f005 ffda 	bl	8009b56 <memset>
}
 8003ba2:	bf00      	nop
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	200008b4 	.word	0x200008b4

08003bb0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	80fb      	strh	r3, [r7, #6]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	80bb      	strh	r3, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	70fb      	strb	r3, [r7, #3]
	if (
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bc6:	d848      	bhi.n	8003c5a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003bc8:	88bb      	ldrh	r3, [r7, #4]
 8003bca:	2b3f      	cmp	r3, #63	@ 0x3f
 8003bcc:	d845      	bhi.n	8003c5a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003bce:	4b26      	ldr	r3, [pc, #152]	@ (8003c68 <SSD1306_DrawPixel+0xb8>)
 8003bd0:	791b      	ldrb	r3, [r3, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d006      	beq.n	8003be4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003be4:	78fb      	ldrb	r3, [r7, #3]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d11a      	bne.n	8003c20 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003bea:	88fa      	ldrh	r2, [r7, #6]
 8003bec:	88bb      	ldrh	r3, [r7, #4]
 8003bee:	08db      	lsrs	r3, r3, #3
 8003bf0:	b298      	uxth	r0, r3
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	01db      	lsls	r3, r3, #7
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c6c <SSD1306_DrawPixel+0xbc>)
 8003bfa:	5cd3      	ldrb	r3, [r2, r3]
 8003bfc:	b25a      	sxtb	r2, r3
 8003bfe:	88bb      	ldrh	r3, [r7, #4]
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	2101      	movs	r1, #1
 8003c06:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0a:	b25b      	sxtb	r3, r3
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	b259      	sxtb	r1, r3
 8003c10:	88fa      	ldrh	r2, [r7, #6]
 8003c12:	4603      	mov	r3, r0
 8003c14:	01db      	lsls	r3, r3, #7
 8003c16:	4413      	add	r3, r2
 8003c18:	b2c9      	uxtb	r1, r1
 8003c1a:	4a14      	ldr	r2, [pc, #80]	@ (8003c6c <SSD1306_DrawPixel+0xbc>)
 8003c1c:	54d1      	strb	r1, [r2, r3]
 8003c1e:	e01d      	b.n	8003c5c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003c20:	88fa      	ldrh	r2, [r7, #6]
 8003c22:	88bb      	ldrh	r3, [r7, #4]
 8003c24:	08db      	lsrs	r3, r3, #3
 8003c26:	b298      	uxth	r0, r3
 8003c28:	4603      	mov	r3, r0
 8003c2a:	01db      	lsls	r3, r3, #7
 8003c2c:	4413      	add	r3, r2
 8003c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8003c6c <SSD1306_DrawPixel+0xbc>)
 8003c30:	5cd3      	ldrb	r3, [r2, r3]
 8003c32:	b25a      	sxtb	r2, r3
 8003c34:	88bb      	ldrh	r3, [r7, #4]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c40:	b25b      	sxtb	r3, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	b25b      	sxtb	r3, r3
 8003c46:	4013      	ands	r3, r2
 8003c48:	b259      	sxtb	r1, r3
 8003c4a:	88fa      	ldrh	r2, [r7, #6]
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	01db      	lsls	r3, r3, #7
 8003c50:	4413      	add	r3, r2
 8003c52:	b2c9      	uxtb	r1, r1
 8003c54:	4a05      	ldr	r2, [pc, #20]	@ (8003c6c <SSD1306_DrawPixel+0xbc>)
 8003c56:	54d1      	strb	r1, [r2, r3]
 8003c58:	e000      	b.n	8003c5c <SSD1306_DrawPixel+0xac>
		return;
 8003c5a:	bf00      	nop
	}
}
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000cb4 	.word	0x20000cb4
 8003c6c:	200008b4 	.word	0x200008b4

08003c70 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60ba      	str	r2, [r7, #8]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	81fb      	strh	r3, [r7, #14]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	81bb      	strh	r3, [r7, #12]
 8003c82:	4613      	mov	r3, r2
 8003c84:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c8a:	3307      	adds	r3, #7
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	da00      	bge.n	8003c92 <SSD1306_DrawBitmap+0x22>
 8003c90:	3307      	adds	r3, #7
 8003c92:	10db      	asrs	r3, r3, #3
 8003c94:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	82bb      	strh	r3, [r7, #20]
 8003c9e:	e044      	b.n	8003d2a <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	827b      	strh	r3, [r7, #18]
 8003ca4:	e02f      	b.n	8003d06 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8003ca6:	8a7b      	ldrh	r3, [r7, #18]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8003cb0:	7dfb      	ldrb	r3, [r7, #23]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	75fb      	strb	r3, [r7, #23]
 8003cb6:	e012      	b.n	8003cde <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8003cb8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003cbc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003cc0:	fb03 f202 	mul.w	r2, r3, r2
 8003cc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	da00      	bge.n	8003cce <SSD1306_DrawBitmap+0x5e>
 8003ccc:	3307      	adds	r3, #7
 8003cce:	10db      	asrs	r3, r3, #3
 8003cd0:	b21b      	sxth	r3, r3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4413      	add	r3, r2
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8003cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	da09      	bge.n	8003cfa <SSD1306_DrawBitmap+0x8a>
 8003ce6:	89fa      	ldrh	r2, [r7, #14]
 8003ce8:	8a7b      	ldrh	r3, [r7, #18]
 8003cea:	4413      	add	r3, r2
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	89b9      	ldrh	r1, [r7, #12]
 8003cf0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff ff5b 	bl	8003bb0 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8003cfa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3301      	adds	r3, #1
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	827b      	strh	r3, [r7, #18]
 8003d06:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	dbc9      	blt.n	8003ca6 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8003d12:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3301      	adds	r3, #1
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	82bb      	strh	r3, [r7, #20]
 8003d1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3301      	adds	r3, #1
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	81bb      	strh	r3, [r7, #12]
 8003d2a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003d2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	dbb4      	blt.n	8003ca0 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8003d36:	bf00      	nop
 8003d38:	bf00      	nop
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003d46:	4b08      	ldr	r3, [pc, #32]	@ (8003d68 <ssd1306_I2C_Init+0x28>)
 8003d48:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003d4a:	e002      	b.n	8003d52 <ssd1306_I2C_Init+0x12>
		p--;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1f9      	bne.n	8003d4c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	0003d090 	.word	0x0003d090

08003d6c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003d6c:	b590      	push	{r4, r7, lr}
 8003d6e:	b0c7      	sub	sp, #284	@ 0x11c
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	4604      	mov	r4, r0
 8003d74:	4608      	mov	r0, r1
 8003d76:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8003d7a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8003d7e:	600a      	str	r2, [r1, #0]
 8003d80:	4619      	mov	r1, r3
 8003d82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003d86:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003d8a:	4622      	mov	r2, r4
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003d92:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003d96:	4602      	mov	r2, r0
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003d9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003da2:	460a      	mov	r2, r1
 8003da4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003da6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003daa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003dae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003db2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8003db6:	7812      	ldrb	r2, [r2, #0]
 8003db8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003dc0:	e015      	b.n	8003dee <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8003dc2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003dc6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003dca:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	441a      	add	r2, r3
 8003dd2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	7811      	ldrb	r1, [r2, #0]
 8003dda:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003dde:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8003de2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003de4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003de8:	3301      	adds	r3, #1
 8003dea:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003dee:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003df8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003dfc:	8812      	ldrh	r2, [r2, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d8df      	bhi.n	8003dc2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8003e02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003e06:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	b299      	uxth	r1, r3
 8003e0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003e12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	f107 020c 	add.w	r2, r7, #12
 8003e20:	200a      	movs	r0, #10
 8003e22:	9000      	str	r0, [sp, #0]
 8003e24:	4803      	ldr	r0, [pc, #12]	@ (8003e34 <ssd1306_I2C_WriteMulti+0xc8>)
 8003e26:	f001 fc4b 	bl	80056c0 <HAL_I2C_Master_Transmit>
}
 8003e2a:	bf00      	nop
 8003e2c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd90      	pop	{r4, r7, pc}
 8003e34:	20000258 	.word	0x20000258

08003e38 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
 8003e42:	460b      	mov	r3, r1
 8003e44:	71bb      	strb	r3, [r7, #6]
 8003e46:	4613      	mov	r3, r2
 8003e48:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003e4a:	79bb      	ldrb	r3, [r7, #6]
 8003e4c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003e4e:	797b      	ldrb	r3, [r7, #5]
 8003e50:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	b299      	uxth	r1, r3
 8003e56:	f107 020c 	add.w	r2, r7, #12
 8003e5a:	230a      	movs	r3, #10
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	2302      	movs	r3, #2
 8003e60:	4803      	ldr	r0, [pc, #12]	@ (8003e70 <ssd1306_I2C_Write+0x38>)
 8003e62:	f001 fc2d 	bl	80056c0 <HAL_I2C_Master_Transmit>
}
 8003e66:	bf00      	nop
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000258 	.word	0x20000258

08003e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e78:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb4 <HAL_Init+0x40>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb4 <HAL_Init+0x40>)
 8003e7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e84:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <HAL_Init+0x40>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a0a      	ldr	r2, [pc, #40]	@ (8003eb4 <HAL_Init+0x40>)
 8003e8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e90:	4b08      	ldr	r3, [pc, #32]	@ (8003eb4 <HAL_Init+0x40>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a07      	ldr	r2, [pc, #28]	@ (8003eb4 <HAL_Init+0x40>)
 8003e96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e9c:	2003      	movs	r0, #3
 8003e9e:	f000 fd5f 	bl	8004960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	f000 f808 	bl	8003eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ea8:	f7ff f8ac 	bl	8003004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023c00 	.word	0x40023c00

08003eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ec0:	4b12      	ldr	r3, [pc, #72]	@ (8003f0c <HAL_InitTick+0x54>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4b12      	ldr	r3, [pc, #72]	@ (8003f10 <HAL_InitTick+0x58>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fd77 	bl	80049ca <HAL_SYSTICK_Config>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e00e      	b.n	8003f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b0f      	cmp	r3, #15
 8003eea:	d80a      	bhi.n	8003f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eec:	2200      	movs	r2, #0
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef4:	f000 fd3f 	bl	8004976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ef8:	4a06      	ldr	r2, [pc, #24]	@ (8003f14 <HAL_InitTick+0x5c>)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e000      	b.n	8003f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	20000004 	.word	0x20000004
 8003f10:	2000000c 	.word	0x2000000c
 8003f14:	20000008 	.word	0x20000008

08003f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f1c:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <HAL_IncTick+0x20>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b06      	ldr	r3, [pc, #24]	@ (8003f3c <HAL_IncTick+0x24>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4413      	add	r3, r2
 8003f28:	4a04      	ldr	r2, [pc, #16]	@ (8003f3c <HAL_IncTick+0x24>)
 8003f2a:	6013      	str	r3, [r2, #0]
}
 8003f2c:	bf00      	nop
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	2000000c 	.word	0x2000000c
 8003f3c:	20000cbc 	.word	0x20000cbc

08003f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return uwTick;
 8003f44:	4b03      	ldr	r3, [pc, #12]	@ (8003f54 <HAL_GetTick+0x14>)
 8003f46:	681b      	ldr	r3, [r3, #0]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000cbc 	.word	0x20000cbc

08003f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f60:	f7ff ffee 	bl	8003f40 <HAL_GetTick>
 8003f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d005      	beq.n	8003f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f72:	4b0a      	ldr	r3, [pc, #40]	@ (8003f9c <HAL_Delay+0x44>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f7e:	bf00      	nop
 8003f80:	f7ff ffde 	bl	8003f40 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d8f7      	bhi.n	8003f80 <HAL_Delay+0x28>
  {
  }
}
 8003f90:	bf00      	nop
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	2000000c 	.word	0x2000000c

08003fa0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e033      	b.n	800401e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff f848 	bl	8003054 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d118      	bne.n	8004010 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003fe6:	f023 0302 	bic.w	r3, r3, #2
 8003fea:	f043 0202 	orr.w	r2, r3, #2
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fae8 	bl	80045c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	f043 0201 	orr.w	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	641a      	str	r2, [r3, #64]	@ 0x40
 800400e:	e001      	b.n	8004014 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_ADC_Start+0x1a>
 800403e:	2302      	movs	r3, #2
 8004040:	e0b2      	b.n	80041a8 <HAL_ADC_Start+0x180>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b01      	cmp	r3, #1
 8004056:	d018      	beq.n	800408a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004068:	4b52      	ldr	r3, [pc, #328]	@ (80041b4 <HAL_ADC_Start+0x18c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a52      	ldr	r2, [pc, #328]	@ (80041b8 <HAL_ADC_Start+0x190>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	0c9a      	lsrs	r2, r3, #18
 8004074:	4613      	mov	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4413      	add	r3, r2
 800407a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800407c:	e002      	b.n	8004084 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	3b01      	subs	r3, #1
 8004082:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f9      	bne.n	800407e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b01      	cmp	r3, #1
 8004096:	d17a      	bne.n	800418e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80040a0:	f023 0301 	bic.w	r3, r3, #1
 80040a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80040c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d6:	d106      	bne.n	80040e6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040dc:	f023 0206 	bic.w	r2, r3, #6
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80040e4:	e002      	b.n	80040ec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040f4:	4b31      	ldr	r3, [pc, #196]	@ (80041bc <HAL_ADC_Start+0x194>)
 80040f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004100:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	2b00      	cmp	r3, #0
 800410c:	d12a      	bne.n	8004164 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a2b      	ldr	r2, [pc, #172]	@ (80041c0 <HAL_ADC_Start+0x198>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d015      	beq.n	8004144 <HAL_ADC_Start+0x11c>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a29      	ldr	r2, [pc, #164]	@ (80041c4 <HAL_ADC_Start+0x19c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d105      	bne.n	800412e <HAL_ADC_Start+0x106>
 8004122:	4b26      	ldr	r3, [pc, #152]	@ (80041bc <HAL_ADC_Start+0x194>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a25      	ldr	r2, [pc, #148]	@ (80041c8 <HAL_ADC_Start+0x1a0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d136      	bne.n	80041a6 <HAL_ADC_Start+0x17e>
 8004138:	4b20      	ldr	r3, [pc, #128]	@ (80041bc <HAL_ADC_Start+0x194>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b00      	cmp	r3, #0
 8004142:	d130      	bne.n	80041a6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d129      	bne.n	80041a6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004160:	609a      	str	r2, [r3, #8]
 8004162:	e020      	b.n	80041a6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a15      	ldr	r2, [pc, #84]	@ (80041c0 <HAL_ADC_Start+0x198>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d11b      	bne.n	80041a6 <HAL_ADC_Start+0x17e>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d114      	bne.n	80041a6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	e00b      	b.n	80041a6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	f043 0210 	orr.w	r2, r3, #16
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	f043 0201 	orr.w	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	20000004 	.word	0x20000004
 80041b8:	431bde83 	.word	0x431bde83
 80041bc:	40012300 	.word	0x40012300
 80041c0:	40012000 	.word	0x40012000
 80041c4:	40012100 	.word	0x40012100
 80041c8:	40012200 	.word	0x40012200

080041cc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_ADC_Stop+0x16>
 80041de:	2302      	movs	r3, #2
 80041e0:	e021      	b.n	8004226 <HAL_ADC_Stop+0x5a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d109      	bne.n	800421c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004210:	f023 0301 	bic.w	r3, r3, #1
 8004214:	f043 0201 	orr.w	r2, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800424a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800424e:	d113      	bne.n	8004278 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800425a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800425e:	d10b      	bne.n	8004278 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e063      	b.n	8004340 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004278:	f7ff fe62 	bl	8003f40 <HAL_GetTick>
 800427c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800427e:	e021      	b.n	80042c4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d01d      	beq.n	80042c4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <HAL_ADC_PollForConversion+0x6c>
 800428e:	f7ff fe57 	bl	8003f40 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d212      	bcs.n	80042c4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d00b      	beq.n	80042c4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	f043 0204 	orr.w	r2, r3, #4
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e03d      	b.n	8004340 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d1d6      	bne.n	8004280 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f06f 0212 	mvn.w	r2, #18
 80042da:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d123      	bne.n	800433e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d11f      	bne.n	800433e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004308:	2b00      	cmp	r3, #0
 800430a:	d006      	beq.n	800431a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004316:	2b00      	cmp	r3, #0
 8004318:	d111      	bne.n	800433e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d105      	bne.n	800433e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	f043 0201 	orr.w	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004356:	4618      	mov	r0, r3
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x1c>
 800437c:	2302      	movs	r3, #2
 800437e:	e113      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x244>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b09      	cmp	r3, #9
 800438e:	d925      	bls.n	80043dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68d9      	ldr	r1, [r3, #12]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	b29b      	uxth	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	4613      	mov	r3, r2
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	4413      	add	r3, r2
 80043a4:	3b1e      	subs	r3, #30
 80043a6:	2207      	movs	r2, #7
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	43da      	mvns	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	400a      	ands	r2, r1
 80043b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68d9      	ldr	r1, [r3, #12]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	4618      	mov	r0, r3
 80043c8:	4603      	mov	r3, r0
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	4403      	add	r3, r0
 80043ce:	3b1e      	subs	r3, #30
 80043d0:	409a      	lsls	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	60da      	str	r2, [r3, #12]
 80043da:	e022      	b.n	8004422 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6919      	ldr	r1, [r3, #16]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	461a      	mov	r2, r3
 80043ea:	4613      	mov	r3, r2
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	4413      	add	r3, r2
 80043f0:	2207      	movs	r2, #7
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	43da      	mvns	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	400a      	ands	r2, r1
 80043fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6919      	ldr	r1, [r3, #16]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	4618      	mov	r0, r3
 8004412:	4603      	mov	r3, r0
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	4403      	add	r3, r0
 8004418:	409a      	lsls	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b06      	cmp	r3, #6
 8004428:	d824      	bhi.n	8004474 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	3b05      	subs	r3, #5
 800443c:	221f      	movs	r2, #31
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43da      	mvns	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	400a      	ands	r2, r1
 800444a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	4618      	mov	r0, r3
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	3b05      	subs	r3, #5
 8004466:	fa00 f203 	lsl.w	r2, r0, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	635a      	str	r2, [r3, #52]	@ 0x34
 8004472:	e04c      	b.n	800450e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b0c      	cmp	r3, #12
 800447a:	d824      	bhi.n	80044c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	3b23      	subs	r3, #35	@ 0x23
 800448e:	221f      	movs	r2, #31
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43da      	mvns	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	400a      	ands	r2, r1
 800449c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	4618      	mov	r0, r3
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	3b23      	subs	r3, #35	@ 0x23
 80044b8:	fa00 f203 	lsl.w	r2, r0, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80044c4:	e023      	b.n	800450e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	3b41      	subs	r3, #65	@ 0x41
 80044d8:	221f      	movs	r2, #31
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43da      	mvns	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	400a      	ands	r2, r1
 80044e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	4618      	mov	r0, r3
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	3b41      	subs	r3, #65	@ 0x41
 8004502:	fa00 f203 	lsl.w	r2, r0, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800450e:	4b29      	ldr	r3, [pc, #164]	@ (80045b4 <HAL_ADC_ConfigChannel+0x250>)
 8004510:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a28      	ldr	r2, [pc, #160]	@ (80045b8 <HAL_ADC_ConfigChannel+0x254>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d10f      	bne.n	800453c <HAL_ADC_ConfigChannel+0x1d8>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b12      	cmp	r3, #18
 8004522:	d10b      	bne.n	800453c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a1d      	ldr	r2, [pc, #116]	@ (80045b8 <HAL_ADC_ConfigChannel+0x254>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d12b      	bne.n	800459e <HAL_ADC_ConfigChannel+0x23a>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1c      	ldr	r2, [pc, #112]	@ (80045bc <HAL_ADC_ConfigChannel+0x258>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <HAL_ADC_ConfigChannel+0x1f4>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b11      	cmp	r3, #17
 8004556:	d122      	bne.n	800459e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a11      	ldr	r2, [pc, #68]	@ (80045bc <HAL_ADC_ConfigChannel+0x258>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d111      	bne.n	800459e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800457a:	4b11      	ldr	r3, [pc, #68]	@ (80045c0 <HAL_ADC_ConfigChannel+0x25c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a11      	ldr	r2, [pc, #68]	@ (80045c4 <HAL_ADC_ConfigChannel+0x260>)
 8004580:	fba2 2303 	umull	r2, r3, r2, r3
 8004584:	0c9a      	lsrs	r2, r3, #18
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004590:	e002      	b.n	8004598 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	3b01      	subs	r3, #1
 8004596:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f9      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	40012300 	.word	0x40012300
 80045b8:	40012000 	.word	0x40012000
 80045bc:	10000012 	.word	0x10000012
 80045c0:	20000004 	.word	0x20000004
 80045c4:	431bde83 	.word	0x431bde83

080045c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045d0:	4b79      	ldr	r3, [pc, #484]	@ (80047b8 <ADC_Init+0x1f0>)
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	431a      	orrs	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6859      	ldr	r1, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	021a      	lsls	r2, r3, #8
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004620:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6859      	ldr	r1, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004642:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6899      	ldr	r1, [r3, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465a:	4a58      	ldr	r2, [pc, #352]	@ (80047bc <ADC_Init+0x1f4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d022      	beq.n	80046a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800466e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6899      	ldr	r1, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004690:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6899      	ldr	r1, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	e00f      	b.n	80046c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80046b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80046c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0202 	bic.w	r2, r2, #2
 80046d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6899      	ldr	r1, [r3, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	7e1b      	ldrb	r3, [r3, #24]
 80046e0:	005a      	lsls	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01b      	beq.n	800472c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004702:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004712:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6859      	ldr	r1, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471e:	3b01      	subs	r3, #1
 8004720:	035a      	lsls	r2, r3, #13
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
 800472a:	e007      	b.n	800473c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800473a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800474a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	3b01      	subs	r3, #1
 8004758:	051a      	lsls	r2, r3, #20
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004770:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6899      	ldr	r1, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800477e:	025a      	lsls	r2, r3, #9
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004796:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6899      	ldr	r1, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	029a      	lsls	r2, r3, #10
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	609a      	str	r2, [r3, #8]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	40012300 	.word	0x40012300
 80047bc:	0f000001 	.word	0x0f000001

080047c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004804 <__NVIC_SetPriorityGrouping+0x44>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80047dc:	4013      	ands	r3, r2
 80047de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047f2:	4a04      	ldr	r2, [pc, #16]	@ (8004804 <__NVIC_SetPriorityGrouping+0x44>)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	60d3      	str	r3, [r2, #12]
}
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	e000ed00 	.word	0xe000ed00

08004808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800480c:	4b04      	ldr	r3, [pc, #16]	@ (8004820 <__NVIC_GetPriorityGrouping+0x18>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	0a1b      	lsrs	r3, r3, #8
 8004812:	f003 0307 	and.w	r3, r3, #7
}
 8004816:	4618      	mov	r0, r3
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	e000ed00 	.word	0xe000ed00

08004824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	2b00      	cmp	r3, #0
 8004834:	db0b      	blt.n	800484e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	f003 021f 	and.w	r2, r3, #31
 800483c:	4907      	ldr	r1, [pc, #28]	@ (800485c <__NVIC_EnableIRQ+0x38>)
 800483e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	2001      	movs	r0, #1
 8004846:	fa00 f202 	lsl.w	r2, r0, r2
 800484a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	e000e100 	.word	0xe000e100

08004860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	6039      	str	r1, [r7, #0]
 800486a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800486c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004870:	2b00      	cmp	r3, #0
 8004872:	db0a      	blt.n	800488a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	b2da      	uxtb	r2, r3
 8004878:	490c      	ldr	r1, [pc, #48]	@ (80048ac <__NVIC_SetPriority+0x4c>)
 800487a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487e:	0112      	lsls	r2, r2, #4
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	440b      	add	r3, r1
 8004884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004888:	e00a      	b.n	80048a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	b2da      	uxtb	r2, r3
 800488e:	4908      	ldr	r1, [pc, #32]	@ (80048b0 <__NVIC_SetPriority+0x50>)
 8004890:	79fb      	ldrb	r3, [r7, #7]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	3b04      	subs	r3, #4
 8004898:	0112      	lsls	r2, r2, #4
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	440b      	add	r3, r1
 800489e:	761a      	strb	r2, [r3, #24]
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	e000e100 	.word	0xe000e100
 80048b0:	e000ed00 	.word	0xe000ed00

080048b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b089      	sub	sp, #36	@ 0x24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f1c3 0307 	rsb	r3, r3, #7
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	bf28      	it	cs
 80048d2:	2304      	movcs	r3, #4
 80048d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	3304      	adds	r3, #4
 80048da:	2b06      	cmp	r3, #6
 80048dc:	d902      	bls.n	80048e4 <NVIC_EncodePriority+0x30>
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	3b03      	subs	r3, #3
 80048e2:	e000      	b.n	80048e6 <NVIC_EncodePriority+0x32>
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048e8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43da      	mvns	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	401a      	ands	r2, r3
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	fa01 f303 	lsl.w	r3, r1, r3
 8004906:	43d9      	mvns	r1, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800490c:	4313      	orrs	r3, r2
         );
}
 800490e:	4618      	mov	r0, r3
 8004910:	3724      	adds	r7, #36	@ 0x24
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3b01      	subs	r3, #1
 8004928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800492c:	d301      	bcc.n	8004932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800492e:	2301      	movs	r3, #1
 8004930:	e00f      	b.n	8004952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004932:	4a0a      	ldr	r2, [pc, #40]	@ (800495c <SysTick_Config+0x40>)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3b01      	subs	r3, #1
 8004938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800493a:	210f      	movs	r1, #15
 800493c:	f04f 30ff 	mov.w	r0, #4294967295
 8004940:	f7ff ff8e 	bl	8004860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004944:	4b05      	ldr	r3, [pc, #20]	@ (800495c <SysTick_Config+0x40>)
 8004946:	2200      	movs	r2, #0
 8004948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800494a:	4b04      	ldr	r3, [pc, #16]	@ (800495c <SysTick_Config+0x40>)
 800494c:	2207      	movs	r2, #7
 800494e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	e000e010 	.word	0xe000e010

08004960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff ff29 	bl	80047c0 <__NVIC_SetPriorityGrouping>
}
 800496e:	bf00      	nop
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004976:	b580      	push	{r7, lr}
 8004978:	b086      	sub	sp, #24
 800497a:	af00      	add	r7, sp, #0
 800497c:	4603      	mov	r3, r0
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	607a      	str	r2, [r7, #4]
 8004982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004988:	f7ff ff3e 	bl	8004808 <__NVIC_GetPriorityGrouping>
 800498c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	6978      	ldr	r0, [r7, #20]
 8004994:	f7ff ff8e 	bl	80048b4 <NVIC_EncodePriority>
 8004998:	4602      	mov	r2, r0
 800499a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800499e:	4611      	mov	r1, r2
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff ff5d 	bl	8004860 <__NVIC_SetPriority>
}
 80049a6:	bf00      	nop
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	4603      	mov	r3, r0
 80049b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff ff31 	bl	8004824 <__NVIC_EnableIRQ>
}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b082      	sub	sp, #8
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff ffa2 	bl	800491c <SysTick_Config>
 80049d8:	4603      	mov	r3, r0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049f0:	f7ff faa6 	bl	8003f40 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e099      	b.n	8004b34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0201 	bic.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a20:	e00f      	b.n	8004a42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a22:	f7ff fa8d 	bl	8003f40 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b05      	cmp	r3, #5
 8004a2e:	d908      	bls.n	8004a42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2203      	movs	r2, #3
 8004a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e078      	b.n	8004b34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e8      	bne.n	8004a22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4b38      	ldr	r3, [pc, #224]	@ (8004b3c <HAL_DMA_Init+0x158>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d107      	bne.n	8004aac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f023 0307 	bic.w	r3, r3, #7
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d117      	bne.n	8004b06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00e      	beq.n	8004b06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fa7b 	bl	8004fe4 <DMA_CheckFifoParam>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2240      	movs	r2, #64	@ 0x40
 8004af8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004b02:	2301      	movs	r3, #1
 8004b04:	e016      	b.n	8004b34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fa32 	bl	8004f78 <DMA_CalcBaseAndBitshift>
 8004b14:	4603      	mov	r3, r0
 8004b16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1c:	223f      	movs	r2, #63	@ 0x3f
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	f010803f 	.word	0xf010803f

08004b40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b4e:	f7ff f9f7 	bl	8003f40 <HAL_GetTick>
 8004b52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d008      	beq.n	8004b72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2280      	movs	r2, #128	@ 0x80
 8004b64:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e052      	b.n	8004c18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0216 	bic.w	r2, r2, #22
 8004b80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695a      	ldr	r2, [r3, #20]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <HAL_DMA_Abort+0x62>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d007      	beq.n	8004bb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0208 	bic.w	r2, r2, #8
 8004bb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0201 	bic.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bc2:	e013      	b.n	8004bec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bc4:	f7ff f9bc 	bl	8003f40 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b05      	cmp	r3, #5
 8004bd0:	d90c      	bls.n	8004bec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2203      	movs	r2, #3
 8004bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e015      	b.n	8004c18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1e4      	bne.n	8004bc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bfe:	223f      	movs	r2, #63	@ 0x3f
 8004c00:	409a      	lsls	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d004      	beq.n	8004c3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2280      	movs	r2, #128	@ 0x80
 8004c38:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e00c      	b.n	8004c58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2205      	movs	r2, #5
 8004c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0201 	bic.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c70:	4b8e      	ldr	r3, [pc, #568]	@ (8004eac <HAL_DMA_IRQHandler+0x248>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a8e      	ldr	r2, [pc, #568]	@ (8004eb0 <HAL_DMA_IRQHandler+0x24c>)
 8004c76:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7a:	0a9b      	lsrs	r3, r3, #10
 8004c7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c8e:	2208      	movs	r2, #8
 8004c90:	409a      	lsls	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d01a      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d013      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0204 	bic.w	r2, r2, #4
 8004cb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc8:	f043 0201 	orr.w	r2, r3, #1
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d012      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00b      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	409a      	lsls	r2, r3
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cfe:	f043 0202 	orr.w	r2, r3, #2
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	409a      	lsls	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4013      	ands	r3, r2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d012      	beq.n	8004d3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00b      	beq.n	8004d3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d28:	2204      	movs	r2, #4
 8004d2a:	409a      	lsls	r2, r3
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d34:	f043 0204 	orr.w	r2, r3, #4
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d40:	2210      	movs	r2, #16
 8004d42:	409a      	lsls	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4013      	ands	r3, r2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d043      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d03c      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d5e:	2210      	movs	r2, #16
 8004d60:	409a      	lsls	r2, r3
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d018      	beq.n	8004da6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d108      	bne.n	8004d94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d024      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	4798      	blx	r3
 8004d92:	e01f      	b.n	8004dd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01b      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	4798      	blx	r3
 8004da4:	e016      	b.n	8004dd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d107      	bne.n	8004dc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0208 	bic.w	r2, r2, #8
 8004dc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd8:	2220      	movs	r2, #32
 8004dda:	409a      	lsls	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 808f 	beq.w	8004f04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0310 	and.w	r3, r3, #16
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 8087 	beq.w	8004f04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	409a      	lsls	r2, r3
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b05      	cmp	r3, #5
 8004e0c:	d136      	bne.n	8004e7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0216 	bic.w	r2, r2, #22
 8004e1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695a      	ldr	r2, [r3, #20]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d103      	bne.n	8004e3e <HAL_DMA_IRQHandler+0x1da>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d007      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0208 	bic.w	r2, r2, #8
 8004e4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e52:	223f      	movs	r2, #63	@ 0x3f
 8004e54:	409a      	lsls	r2, r3
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d07e      	beq.n	8004f70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	4798      	blx	r3
        }
        return;
 8004e7a:	e079      	b.n	8004f70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d01d      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10d      	bne.n	8004eb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d031      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	4798      	blx	r3
 8004ea8:	e02c      	b.n	8004f04 <HAL_DMA_IRQHandler+0x2a0>
 8004eaa:	bf00      	nop
 8004eac:	20000004 	.word	0x20000004
 8004eb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d023      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	4798      	blx	r3
 8004ec4:	e01e      	b.n	8004f04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10f      	bne.n	8004ef4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0210 	bic.w	r2, r2, #16
 8004ee2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d032      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d022      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2205      	movs	r2, #5
 8004f1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0201 	bic.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	3301      	adds	r3, #1
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d307      	bcc.n	8004f4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f2      	bne.n	8004f30 <HAL_DMA_IRQHandler+0x2cc>
 8004f4a:	e000      	b.n	8004f4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d005      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	4798      	blx	r3
 8004f6e:	e000      	b.n	8004f72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f70:	bf00      	nop
    }
  }
}
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	3b10      	subs	r3, #16
 8004f88:	4a14      	ldr	r2, [pc, #80]	@ (8004fdc <DMA_CalcBaseAndBitshift+0x64>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	091b      	lsrs	r3, r3, #4
 8004f90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f92:	4a13      	ldr	r2, [pc, #76]	@ (8004fe0 <DMA_CalcBaseAndBitshift+0x68>)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d909      	bls.n	8004fba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004fae:	f023 0303 	bic.w	r3, r3, #3
 8004fb2:	1d1a      	adds	r2, r3, #4
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fb8:	e007      	b.n	8004fca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004fc2:	f023 0303 	bic.w	r3, r3, #3
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	aaaaaaab 	.word	0xaaaaaaab
 8004fe0:	0800becc 	.word	0x0800becc

08004fe4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d11f      	bne.n	800503e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b03      	cmp	r3, #3
 8005002:	d856      	bhi.n	80050b2 <DMA_CheckFifoParam+0xce>
 8005004:	a201      	add	r2, pc, #4	@ (adr r2, 800500c <DMA_CheckFifoParam+0x28>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	0800501d 	.word	0x0800501d
 8005010:	0800502f 	.word	0x0800502f
 8005014:	0800501d 	.word	0x0800501d
 8005018:	080050b3 	.word	0x080050b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005020:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d046      	beq.n	80050b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800502c:	e043      	b.n	80050b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005032:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005036:	d140      	bne.n	80050ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800503c:	e03d      	b.n	80050ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005046:	d121      	bne.n	800508c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b03      	cmp	r3, #3
 800504c:	d837      	bhi.n	80050be <DMA_CheckFifoParam+0xda>
 800504e:	a201      	add	r2, pc, #4	@ (adr r2, 8005054 <DMA_CheckFifoParam+0x70>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	08005065 	.word	0x08005065
 8005058:	0800506b 	.word	0x0800506b
 800505c:	08005065 	.word	0x08005065
 8005060:	0800507d 	.word	0x0800507d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	73fb      	strb	r3, [r7, #15]
      break;
 8005068:	e030      	b.n	80050cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d025      	beq.n	80050c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800507a:	e022      	b.n	80050c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005080:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005084:	d11f      	bne.n	80050c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800508a:	e01c      	b.n	80050c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d903      	bls.n	800509a <DMA_CheckFifoParam+0xb6>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b03      	cmp	r3, #3
 8005096:	d003      	beq.n	80050a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005098:	e018      	b.n	80050cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	73fb      	strb	r3, [r7, #15]
      break;
 800509e:	e015      	b.n	80050cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00e      	beq.n	80050ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
      break;
 80050b0:	e00b      	b.n	80050ca <DMA_CheckFifoParam+0xe6>
      break;
 80050b2:	bf00      	nop
 80050b4:	e00a      	b.n	80050cc <DMA_CheckFifoParam+0xe8>
      break;
 80050b6:	bf00      	nop
 80050b8:	e008      	b.n	80050cc <DMA_CheckFifoParam+0xe8>
      break;
 80050ba:	bf00      	nop
 80050bc:	e006      	b.n	80050cc <DMA_CheckFifoParam+0xe8>
      break;
 80050be:	bf00      	nop
 80050c0:	e004      	b.n	80050cc <DMA_CheckFifoParam+0xe8>
      break;
 80050c2:	bf00      	nop
 80050c4:	e002      	b.n	80050cc <DMA_CheckFifoParam+0xe8>
      break;   
 80050c6:	bf00      	nop
 80050c8:	e000      	b.n	80050cc <DMA_CheckFifoParam+0xe8>
      break;
 80050ca:	bf00      	nop
    }
  } 
  
  return status; 
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop

080050dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050dc:	b480      	push	{r7}
 80050de:	b089      	sub	sp, #36	@ 0x24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050f2:	2300      	movs	r3, #0
 80050f4:	61fb      	str	r3, [r7, #28]
 80050f6:	e165      	b.n	80053c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050f8:	2201      	movs	r2, #1
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4013      	ands	r3, r2
 800510a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	429a      	cmp	r2, r3
 8005112:	f040 8154 	bne.w	80053be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	2b01      	cmp	r3, #1
 8005120:	d005      	beq.n	800512e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800512a:	2b02      	cmp	r3, #2
 800512c:	d130      	bne.n	8005190 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	2203      	movs	r2, #3
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	43db      	mvns	r3, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4013      	ands	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	4313      	orrs	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005164:	2201      	movs	r2, #1
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	43db      	mvns	r3, r3
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	4013      	ands	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	091b      	lsrs	r3, r3, #4
 800517a:	f003 0201 	and.w	r2, r3, #1
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	4313      	orrs	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	2b03      	cmp	r3, #3
 800519a:	d017      	beq.n	80051cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	2203      	movs	r2, #3
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	43db      	mvns	r3, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4013      	ands	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d123      	bne.n	8005220 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	08da      	lsrs	r2, r3, #3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3208      	adds	r2, #8
 80051e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	220f      	movs	r2, #15
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	43db      	mvns	r3, r3
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	4013      	ands	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4313      	orrs	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	08da      	lsrs	r2, r3, #3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3208      	adds	r2, #8
 800521a:	69b9      	ldr	r1, [r7, #24]
 800521c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	2203      	movs	r2, #3
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	43db      	mvns	r3, r3
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	4013      	ands	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f003 0203 	and.w	r2, r3, #3
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	fa02 f303 	lsl.w	r3, r2, r3
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4313      	orrs	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 80ae 	beq.w	80053be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	4b5d      	ldr	r3, [pc, #372]	@ (80053dc <HAL_GPIO_Init+0x300>)
 8005268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526a:	4a5c      	ldr	r2, [pc, #368]	@ (80053dc <HAL_GPIO_Init+0x300>)
 800526c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005270:	6453      	str	r3, [r2, #68]	@ 0x44
 8005272:	4b5a      	ldr	r3, [pc, #360]	@ (80053dc <HAL_GPIO_Init+0x300>)
 8005274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005276:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800527e:	4a58      	ldr	r2, [pc, #352]	@ (80053e0 <HAL_GPIO_Init+0x304>)
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	089b      	lsrs	r3, r3, #2
 8005284:	3302      	adds	r3, #2
 8005286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f003 0303 	and.w	r3, r3, #3
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	220f      	movs	r2, #15
 8005296:	fa02 f303 	lsl.w	r3, r2, r3
 800529a:	43db      	mvns	r3, r3
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	4013      	ands	r3, r2
 80052a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a4f      	ldr	r2, [pc, #316]	@ (80053e4 <HAL_GPIO_Init+0x308>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d025      	beq.n	80052f6 <HAL_GPIO_Init+0x21a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a4e      	ldr	r2, [pc, #312]	@ (80053e8 <HAL_GPIO_Init+0x30c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d01f      	beq.n	80052f2 <HAL_GPIO_Init+0x216>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a4d      	ldr	r2, [pc, #308]	@ (80053ec <HAL_GPIO_Init+0x310>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d019      	beq.n	80052ee <HAL_GPIO_Init+0x212>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a4c      	ldr	r2, [pc, #304]	@ (80053f0 <HAL_GPIO_Init+0x314>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <HAL_GPIO_Init+0x20e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a4b      	ldr	r2, [pc, #300]	@ (80053f4 <HAL_GPIO_Init+0x318>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00d      	beq.n	80052e6 <HAL_GPIO_Init+0x20a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a4a      	ldr	r2, [pc, #296]	@ (80053f8 <HAL_GPIO_Init+0x31c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d007      	beq.n	80052e2 <HAL_GPIO_Init+0x206>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a49      	ldr	r2, [pc, #292]	@ (80053fc <HAL_GPIO_Init+0x320>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d101      	bne.n	80052de <HAL_GPIO_Init+0x202>
 80052da:	2306      	movs	r3, #6
 80052dc:	e00c      	b.n	80052f8 <HAL_GPIO_Init+0x21c>
 80052de:	2307      	movs	r3, #7
 80052e0:	e00a      	b.n	80052f8 <HAL_GPIO_Init+0x21c>
 80052e2:	2305      	movs	r3, #5
 80052e4:	e008      	b.n	80052f8 <HAL_GPIO_Init+0x21c>
 80052e6:	2304      	movs	r3, #4
 80052e8:	e006      	b.n	80052f8 <HAL_GPIO_Init+0x21c>
 80052ea:	2303      	movs	r3, #3
 80052ec:	e004      	b.n	80052f8 <HAL_GPIO_Init+0x21c>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e002      	b.n	80052f8 <HAL_GPIO_Init+0x21c>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <HAL_GPIO_Init+0x21c>
 80052f6:	2300      	movs	r3, #0
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	f002 0203 	and.w	r2, r2, #3
 80052fe:	0092      	lsls	r2, r2, #2
 8005300:	4093      	lsls	r3, r2
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	4313      	orrs	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005308:	4935      	ldr	r1, [pc, #212]	@ (80053e0 <HAL_GPIO_Init+0x304>)
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	089b      	lsrs	r3, r3, #2
 800530e:	3302      	adds	r3, #2
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005316:	4b3a      	ldr	r3, [pc, #232]	@ (8005400 <HAL_GPIO_Init+0x324>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	43db      	mvns	r3, r3
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	4013      	ands	r3, r2
 8005324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800533a:	4a31      	ldr	r2, [pc, #196]	@ (8005400 <HAL_GPIO_Init+0x324>)
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005340:	4b2f      	ldr	r3, [pc, #188]	@ (8005400 <HAL_GPIO_Init+0x324>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	43db      	mvns	r3, r3
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	4013      	ands	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005364:	4a26      	ldr	r2, [pc, #152]	@ (8005400 <HAL_GPIO_Init+0x324>)
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800536a:	4b25      	ldr	r3, [pc, #148]	@ (8005400 <HAL_GPIO_Init+0x324>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	43db      	mvns	r3, r3
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	4013      	ands	r3, r2
 8005378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	4313      	orrs	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800538e:	4a1c      	ldr	r2, [pc, #112]	@ (8005400 <HAL_GPIO_Init+0x324>)
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005394:	4b1a      	ldr	r3, [pc, #104]	@ (8005400 <HAL_GPIO_Init+0x324>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	43db      	mvns	r3, r3
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	4013      	ands	r3, r2
 80053a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053b8:	4a11      	ldr	r2, [pc, #68]	@ (8005400 <HAL_GPIO_Init+0x324>)
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	3301      	adds	r3, #1
 80053c2:	61fb      	str	r3, [r7, #28]
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	2b0f      	cmp	r3, #15
 80053c8:	f67f ae96 	bls.w	80050f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053cc:	bf00      	nop
 80053ce:	bf00      	nop
 80053d0:	3724      	adds	r7, #36	@ 0x24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40023800 	.word	0x40023800
 80053e0:	40013800 	.word	0x40013800
 80053e4:	40020000 	.word	0x40020000
 80053e8:	40020400 	.word	0x40020400
 80053ec:	40020800 	.word	0x40020800
 80053f0:	40020c00 	.word	0x40020c00
 80053f4:	40021000 	.word	0x40021000
 80053f8:	40021400 	.word	0x40021400
 80053fc:	40021800 	.word	0x40021800
 8005400:	40013c00 	.word	0x40013c00

08005404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	807b      	strh	r3, [r7, #2]
 8005410:	4613      	mov	r3, r2
 8005412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005414:	787b      	ldrb	r3, [r7, #1]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800541a:	887a      	ldrh	r2, [r7, #2]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005420:	e003      	b.n	800542a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005422:	887b      	ldrh	r3, [r7, #2]
 8005424:	041a      	lsls	r2, r3, #16
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	619a      	str	r2, [r3, #24]
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e12b      	b.n	80056a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fd fe3c 	bl	80030dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2224      	movs	r2, #36	@ 0x24
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0201 	bic.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800548a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800549a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800549c:	f001 fbe0 	bl	8006c60 <HAL_RCC_GetPCLK1Freq>
 80054a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	4a81      	ldr	r2, [pc, #516]	@ (80056ac <HAL_I2C_Init+0x274>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d807      	bhi.n	80054bc <HAL_I2C_Init+0x84>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4a80      	ldr	r2, [pc, #512]	@ (80056b0 <HAL_I2C_Init+0x278>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	bf94      	ite	ls
 80054b4:	2301      	movls	r3, #1
 80054b6:	2300      	movhi	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	e006      	b.n	80054ca <HAL_I2C_Init+0x92>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4a7d      	ldr	r2, [pc, #500]	@ (80056b4 <HAL_I2C_Init+0x27c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	bf94      	ite	ls
 80054c4:	2301      	movls	r3, #1
 80054c6:	2300      	movhi	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e0e7      	b.n	80056a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4a78      	ldr	r2, [pc, #480]	@ (80056b8 <HAL_I2C_Init+0x280>)
 80054d6:	fba2 2303 	umull	r2, r3, r2, r3
 80054da:	0c9b      	lsrs	r3, r3, #18
 80054dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	4a6a      	ldr	r2, [pc, #424]	@ (80056ac <HAL_I2C_Init+0x274>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d802      	bhi.n	800550c <HAL_I2C_Init+0xd4>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	3301      	adds	r3, #1
 800550a:	e009      	b.n	8005520 <HAL_I2C_Init+0xe8>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005512:	fb02 f303 	mul.w	r3, r2, r3
 8005516:	4a69      	ldr	r2, [pc, #420]	@ (80056bc <HAL_I2C_Init+0x284>)
 8005518:	fba2 2303 	umull	r2, r3, r2, r3
 800551c:	099b      	lsrs	r3, r3, #6
 800551e:	3301      	adds	r3, #1
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	430b      	orrs	r3, r1
 8005526:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005532:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	495c      	ldr	r1, [pc, #368]	@ (80056ac <HAL_I2C_Init+0x274>)
 800553c:	428b      	cmp	r3, r1
 800553e:	d819      	bhi.n	8005574 <HAL_I2C_Init+0x13c>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1e59      	subs	r1, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	fbb1 f3f3 	udiv	r3, r1, r3
 800554e:	1c59      	adds	r1, r3, #1
 8005550:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005554:	400b      	ands	r3, r1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <HAL_I2C_Init+0x138>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1e59      	subs	r1, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	fbb1 f3f3 	udiv	r3, r1, r3
 8005568:	3301      	adds	r3, #1
 800556a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556e:	e051      	b.n	8005614 <HAL_I2C_Init+0x1dc>
 8005570:	2304      	movs	r3, #4
 8005572:	e04f      	b.n	8005614 <HAL_I2C_Init+0x1dc>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d111      	bne.n	80055a0 <HAL_I2C_Init+0x168>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	1e58      	subs	r0, r3, #1
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6859      	ldr	r1, [r3, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	440b      	add	r3, r1
 800558a:	fbb0 f3f3 	udiv	r3, r0, r3
 800558e:	3301      	adds	r3, #1
 8005590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005594:	2b00      	cmp	r3, #0
 8005596:	bf0c      	ite	eq
 8005598:	2301      	moveq	r3, #1
 800559a:	2300      	movne	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	e012      	b.n	80055c6 <HAL_I2C_Init+0x18e>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	1e58      	subs	r0, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6859      	ldr	r1, [r3, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	0099      	lsls	r1, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80055b6:	3301      	adds	r3, #1
 80055b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bf0c      	ite	eq
 80055c0:	2301      	moveq	r3, #1
 80055c2:	2300      	movne	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <HAL_I2C_Init+0x196>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e022      	b.n	8005614 <HAL_I2C_Init+0x1dc>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10e      	bne.n	80055f4 <HAL_I2C_Init+0x1bc>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	1e58      	subs	r0, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6859      	ldr	r1, [r3, #4]
 80055de:	460b      	mov	r3, r1
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	440b      	add	r3, r1
 80055e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80055e8:	3301      	adds	r3, #1
 80055ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055f2:	e00f      	b.n	8005614 <HAL_I2C_Init+0x1dc>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	1e58      	subs	r0, r3, #1
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6859      	ldr	r1, [r3, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	0099      	lsls	r1, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	fbb0 f3f3 	udiv	r3, r0, r3
 800560a:	3301      	adds	r3, #1
 800560c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005610:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	6809      	ldr	r1, [r1, #0]
 8005618:	4313      	orrs	r3, r2
 800561a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69da      	ldr	r2, [r3, #28]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	431a      	orrs	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005642:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6911      	ldr	r1, [r2, #16]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	68d2      	ldr	r2, [r2, #12]
 800564e:	4311      	orrs	r1, r2
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	430b      	orrs	r3, r1
 8005656:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	695a      	ldr	r2, [r3, #20]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	431a      	orrs	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	000186a0 	.word	0x000186a0
 80056b0:	001e847f 	.word	0x001e847f
 80056b4:	003d08ff 	.word	0x003d08ff
 80056b8:	431bde83 	.word	0x431bde83
 80056bc:	10624dd3 	.word	0x10624dd3

080056c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	607a      	str	r2, [r7, #4]
 80056ca:	461a      	mov	r2, r3
 80056cc:	460b      	mov	r3, r1
 80056ce:	817b      	strh	r3, [r7, #10]
 80056d0:	4613      	mov	r3, r2
 80056d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056d4:	f7fe fc34 	bl	8003f40 <HAL_GetTick>
 80056d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	f040 80e0 	bne.w	80058a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	2319      	movs	r3, #25
 80056ee:	2201      	movs	r2, #1
 80056f0:	4970      	ldr	r1, [pc, #448]	@ (80058b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 ff3c 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80056fe:	2302      	movs	r3, #2
 8005700:	e0d3      	b.n	80058aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_I2C_Master_Transmit+0x50>
 800570c:	2302      	movs	r3, #2
 800570e:	e0cc      	b.n	80058aa <HAL_I2C_Master_Transmit+0x1ea>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b01      	cmp	r3, #1
 8005724:	d007      	beq.n	8005736 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0201 	orr.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005744:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2221      	movs	r2, #33	@ 0x21
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2210      	movs	r2, #16
 8005752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	893a      	ldrh	r2, [r7, #8]
 8005766:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4a50      	ldr	r2, [pc, #320]	@ (80058b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005776:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005778:	8979      	ldrh	r1, [r7, #10]
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	6a3a      	ldr	r2, [r7, #32]
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 fcf6 	bl	8006170 <I2C_MasterRequestWrite>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e08d      	b.n	80058aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800578e:	2300      	movs	r3, #0
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80057a4:	e066      	b.n	8005874 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	6a39      	ldr	r1, [r7, #32]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 fffa 	bl	80067a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00d      	beq.n	80057d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d107      	bne.n	80057ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e06b      	b.n	80058aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	781a      	ldrb	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057fa:	3b01      	subs	r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b04      	cmp	r3, #4
 800580e:	d11b      	bne.n	8005848 <HAL_I2C_Master_Transmit+0x188>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005814:	2b00      	cmp	r3, #0
 8005816:	d017      	beq.n	8005848 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581c:	781a      	ldrb	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005832:	b29b      	uxth	r3, r3
 8005834:	3b01      	subs	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	6a39      	ldr	r1, [r7, #32]
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 fff1 	bl	8006834 <I2C_WaitOnBTFFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00d      	beq.n	8005874 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585c:	2b04      	cmp	r3, #4
 800585e:	d107      	bne.n	8005870 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800586e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e01a      	b.n	80058aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005878:	2b00      	cmp	r3, #0
 800587a:	d194      	bne.n	80057a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800588a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	e000      	b.n	80058aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80058a8:	2302      	movs	r3, #2
  }
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	00100002 	.word	0x00100002
 80058b8:	ffff0000 	.word	0xffff0000

080058bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	4608      	mov	r0, r1
 80058c6:	4611      	mov	r1, r2
 80058c8:	461a      	mov	r2, r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	817b      	strh	r3, [r7, #10]
 80058ce:	460b      	mov	r3, r1
 80058d0:	813b      	strh	r3, [r7, #8]
 80058d2:	4613      	mov	r3, r2
 80058d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058d6:	f7fe fb33 	bl	8003f40 <HAL_GetTick>
 80058da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	f040 80d9 	bne.w	8005a9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	2319      	movs	r3, #25
 80058f0:	2201      	movs	r2, #1
 80058f2:	496d      	ldr	r1, [pc, #436]	@ (8005aa8 <HAL_I2C_Mem_Write+0x1ec>)
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fe3b 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005900:	2302      	movs	r3, #2
 8005902:	e0cc      	b.n	8005a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_I2C_Mem_Write+0x56>
 800590e:	2302      	movs	r3, #2
 8005910:	e0c5      	b.n	8005a9e <HAL_I2C_Mem_Write+0x1e2>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b01      	cmp	r3, #1
 8005926:	d007      	beq.n	8005938 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005946:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2221      	movs	r2, #33	@ 0x21
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2240      	movs	r2, #64	@ 0x40
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a3a      	ldr	r2, [r7, #32]
 8005962:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005968:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596e:	b29a      	uxth	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4a4d      	ldr	r2, [pc, #308]	@ (8005aac <HAL_I2C_Mem_Write+0x1f0>)
 8005978:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800597a:	88f8      	ldrh	r0, [r7, #6]
 800597c:	893a      	ldrh	r2, [r7, #8]
 800597e:	8979      	ldrh	r1, [r7, #10]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	9301      	str	r3, [sp, #4]
 8005984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	4603      	mov	r3, r0
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 fc72 	bl	8006274 <I2C_RequestMemoryWrite>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d052      	beq.n	8005a3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e081      	b.n	8005a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 ff00 	bl	80067a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00d      	beq.n	80059c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d107      	bne.n	80059c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e06b      	b.n	8005a9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ca:	781a      	ldrb	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d11b      	bne.n	8005a3c <HAL_I2C_Mem_Write+0x180>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d017      	beq.n	8005a3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1aa      	bne.n	800599a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 fef3 	bl	8006834 <I2C_WaitOnBTFFlagUntilTimeout>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00d      	beq.n	8005a70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d107      	bne.n	8005a6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e016      	b.n	8005a9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e000      	b.n	8005a9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005a9c:	2302      	movs	r3, #2
  }
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	00100002 	.word	0x00100002
 8005aac:	ffff0000 	.word	0xffff0000

08005ab0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08c      	sub	sp, #48	@ 0x30
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	4608      	mov	r0, r1
 8005aba:	4611      	mov	r1, r2
 8005abc:	461a      	mov	r2, r3
 8005abe:	4603      	mov	r3, r0
 8005ac0:	817b      	strh	r3, [r7, #10]
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	813b      	strh	r3, [r7, #8]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005aca:	f7fe fa39 	bl	8003f40 <HAL_GetTick>
 8005ace:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	f040 8214 	bne.w	8005f06 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	2319      	movs	r3, #25
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	497b      	ldr	r1, [pc, #492]	@ (8005cd4 <HAL_I2C_Mem_Read+0x224>)
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 fd41 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005af4:	2302      	movs	r3, #2
 8005af6:	e207      	b.n	8005f08 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_I2C_Mem_Read+0x56>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e200      	b.n	8005f08 <HAL_I2C_Mem_Read+0x458>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d007      	beq.n	8005b2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2222      	movs	r2, #34	@ 0x22
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2240      	movs	r2, #64	@ 0x40
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4a5b      	ldr	r2, [pc, #364]	@ (8005cd8 <HAL_I2C_Mem_Read+0x228>)
 8005b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b6e:	88f8      	ldrh	r0, [r7, #6]
 8005b70:	893a      	ldrh	r2, [r7, #8]
 8005b72:	8979      	ldrh	r1, [r7, #10]
 8005b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 fc0e 	bl	80063a0 <I2C_RequestMemoryRead>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e1bc      	b.n	8005f08 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d113      	bne.n	8005bbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b96:	2300      	movs	r3, #0
 8005b98:	623b      	str	r3, [r7, #32]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	623b      	str	r3, [r7, #32]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	623b      	str	r3, [r7, #32]
 8005baa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	e190      	b.n	8005ee0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d11b      	bne.n	8005bfe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	61fb      	str	r3, [r7, #28]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	61fb      	str	r3, [r7, #28]
 8005bea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	e170      	b.n	8005ee0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d11b      	bne.n	8005c3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c26:	2300      	movs	r3, #0
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	61bb      	str	r3, [r7, #24]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	e150      	b.n	8005ee0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c3e:	2300      	movs	r3, #0
 8005c40:	617b      	str	r3, [r7, #20]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005c54:	e144      	b.n	8005ee0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	f200 80f1 	bhi.w	8005e42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d123      	bne.n	8005cb0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fe29 	bl	80068c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e145      	b.n	8005f08 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691a      	ldr	r2, [r3, #16]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cae:	e117      	b.n	8005ee0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d14e      	bne.n	8005d56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	4906      	ldr	r1, [pc, #24]	@ (8005cdc <HAL_I2C_Mem_Read+0x22c>)
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 fc54 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d008      	beq.n	8005ce0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e11a      	b.n	8005f08 <HAL_I2C_Mem_Read+0x458>
 8005cd2:	bf00      	nop
 8005cd4:	00100002 	.word	0x00100002
 8005cd8:	ffff0000 	.word	0xffff0000
 8005cdc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691a      	ldr	r2, [r3, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d54:	e0c4      	b.n	8005ee0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	496c      	ldr	r1, [pc, #432]	@ (8005f10 <HAL_I2C_Mem_Read+0x460>)
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 fc05 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e0cb      	b.n	8005f08 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db8:	2200      	movs	r2, #0
 8005dba:	4955      	ldr	r1, [pc, #340]	@ (8005f10 <HAL_I2C_Mem_Read+0x460>)
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 fbd7 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e09d      	b.n	8005f08 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e40:	e04e      	b.n	8005ee0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 fd3c 	bl	80068c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e058      	b.n	8005f08 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e60:	b2d2      	uxtb	r2, r2
 8005e62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e72:	3b01      	subs	r3, #1
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	3b01      	subs	r3, #1
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	f003 0304 	and.w	r3, r3, #4
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d124      	bne.n	8005ee0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d107      	bne.n	8005eae <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f47f aeb6 	bne.w	8005c56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e000      	b.n	8005f08 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005f06:	2302      	movs	r3, #2
  }
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3728      	adds	r7, #40	@ 0x28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	00010004 	.word	0x00010004

08005f14 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08a      	sub	sp, #40	@ 0x28
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	607a      	str	r2, [r7, #4]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	460b      	mov	r3, r1
 8005f22:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005f24:	f7fe f80c 	bl	8003f40 <HAL_GetTick>
 8005f28:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	f040 8111 	bne.w	800615e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	2319      	movs	r3, #25
 8005f42:	2201      	movs	r2, #1
 8005f44:	4988      	ldr	r1, [pc, #544]	@ (8006168 <HAL_I2C_IsDeviceReady+0x254>)
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 fb12 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005f52:	2302      	movs	r3, #2
 8005f54:	e104      	b.n	8006160 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_I2C_IsDeviceReady+0x50>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e0fd      	b.n	8006160 <HAL_I2C_IsDeviceReady+0x24c>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d007      	beq.n	8005f8a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0201 	orr.w	r2, r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2224      	movs	r2, #36	@ 0x24
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4a70      	ldr	r2, [pc, #448]	@ (800616c <HAL_I2C_IsDeviceReady+0x258>)
 8005fac:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fbc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 fad0 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00d      	beq.n	8005ff2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fe4:	d103      	bne.n	8005fee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fec:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e0b6      	b.n	8006160 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ff2:	897b      	ldrh	r3, [r7, #10]
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006000:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006002:	f7fd ff9d 	bl	8003f40 <HAL_GetTick>
 8006006:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b02      	cmp	r3, #2
 8006014:	bf0c      	ite	eq
 8006016:	2301      	moveq	r3, #1
 8006018:	2300      	movne	r3, #0
 800601a:	b2db      	uxtb	r3, r3
 800601c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800602c:	bf0c      	ite	eq
 800602e:	2301      	moveq	r3, #1
 8006030:	2300      	movne	r3, #0
 8006032:	b2db      	uxtb	r3, r3
 8006034:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006036:	e025      	b.n	8006084 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006038:	f7fd ff82 	bl	8003f40 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d302      	bcc.n	800604e <HAL_I2C_IsDeviceReady+0x13a>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d103      	bne.n	8006056 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	22a0      	movs	r2, #160	@ 0xa0
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b02      	cmp	r3, #2
 8006062:	bf0c      	ite	eq
 8006064:	2301      	moveq	r3, #1
 8006066:	2300      	movne	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800607a:	bf0c      	ite	eq
 800607c:	2301      	moveq	r3, #1
 800607e:	2300      	movne	r3, #0
 8006080:	b2db      	uxtb	r3, r3
 8006082:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2ba0      	cmp	r3, #160	@ 0xa0
 800608e:	d005      	beq.n	800609c <HAL_I2C_IsDeviceReady+0x188>
 8006090:	7dfb      	ldrb	r3, [r7, #23]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d102      	bne.n	800609c <HAL_I2C_IsDeviceReady+0x188>
 8006096:	7dbb      	ldrb	r3, [r7, #22]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0cd      	beq.n	8006038 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d129      	bne.n	8006106 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060c2:	2300      	movs	r3, #0
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	613b      	str	r3, [r7, #16]
 80060d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	2319      	movs	r3, #25
 80060de:	2201      	movs	r2, #1
 80060e0:	4921      	ldr	r1, [pc, #132]	@ (8006168 <HAL_I2C_IsDeviceReady+0x254>)
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 fa44 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e036      	b.n	8006160 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	e02c      	b.n	8006160 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006114:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800611e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	2319      	movs	r3, #25
 8006126:	2201      	movs	r2, #1
 8006128:	490f      	ldr	r1, [pc, #60]	@ (8006168 <HAL_I2C_IsDeviceReady+0x254>)
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fa20 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e012      	b.n	8006160 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	3301      	adds	r3, #1
 800613e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	429a      	cmp	r2, r3
 8006146:	f4ff af32 	bcc.w	8005fae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800615e:	2302      	movs	r3, #2
  }
}
 8006160:	4618      	mov	r0, r3
 8006162:	3720      	adds	r7, #32
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	00100002 	.word	0x00100002
 800616c:	ffff0000 	.word	0xffff0000

08006170 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af02      	add	r7, sp, #8
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	607a      	str	r2, [r7, #4]
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	460b      	mov	r3, r1
 800617e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006184:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b08      	cmp	r3, #8
 800618a:	d006      	beq.n	800619a <I2C_MasterRequestWrite+0x2a>
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d003      	beq.n	800619a <I2C_MasterRequestWrite+0x2a>
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006198:	d108      	bne.n	80061ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	e00b      	b.n	80061c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b0:	2b12      	cmp	r3, #18
 80061b2:	d107      	bne.n	80061c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 f9cd 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00d      	beq.n	80061f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061ea:	d103      	bne.n	80061f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e035      	b.n	8006264 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006200:	d108      	bne.n	8006214 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006202:	897b      	ldrh	r3, [r7, #10]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	461a      	mov	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006210:	611a      	str	r2, [r3, #16]
 8006212:	e01b      	b.n	800624c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006214:	897b      	ldrh	r3, [r7, #10]
 8006216:	11db      	asrs	r3, r3, #7
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f003 0306 	and.w	r3, r3, #6
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f063 030f 	orn	r3, r3, #15
 8006224:	b2da      	uxtb	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	490e      	ldr	r1, [pc, #56]	@ (800626c <I2C_MasterRequestWrite+0xfc>)
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 fa16 	bl	8006664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e010      	b.n	8006264 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006242:	897b      	ldrh	r3, [r7, #10]
 8006244:	b2da      	uxtb	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	4907      	ldr	r1, [pc, #28]	@ (8006270 <I2C_MasterRequestWrite+0x100>)
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fa06 	bl	8006664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	00010008 	.word	0x00010008
 8006270:	00010002 	.word	0x00010002

08006274 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	4608      	mov	r0, r1
 800627e:	4611      	mov	r1, r2
 8006280:	461a      	mov	r2, r3
 8006282:	4603      	mov	r3, r0
 8006284:	817b      	strh	r3, [r7, #10]
 8006286:	460b      	mov	r3, r1
 8006288:	813b      	strh	r3, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800629c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 f960 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00d      	beq.n	80062d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062c4:	d103      	bne.n	80062ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e05f      	b.n	8006392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062d2:	897b      	ldrh	r3, [r7, #10]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80062e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e4:	6a3a      	ldr	r2, [r7, #32]
 80062e6:	492d      	ldr	r1, [pc, #180]	@ (800639c <I2C_RequestMemoryWrite+0x128>)
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 f9bb 	bl	8006664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e04c      	b.n	8006392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800630e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006310:	6a39      	ldr	r1, [r7, #32]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 fa46 	bl	80067a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00d      	beq.n	800633a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006322:	2b04      	cmp	r3, #4
 8006324:	d107      	bne.n	8006336 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006334:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e02b      	b.n	8006392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800633a:	88fb      	ldrh	r3, [r7, #6]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d105      	bne.n	800634c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006340:	893b      	ldrh	r3, [r7, #8]
 8006342:	b2da      	uxtb	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	611a      	str	r2, [r3, #16]
 800634a:	e021      	b.n	8006390 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800634c:	893b      	ldrh	r3, [r7, #8]
 800634e:	0a1b      	lsrs	r3, r3, #8
 8006350:	b29b      	uxth	r3, r3
 8006352:	b2da      	uxtb	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800635a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800635c:	6a39      	ldr	r1, [r7, #32]
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 fa20 	bl	80067a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00d      	beq.n	8006386 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636e:	2b04      	cmp	r3, #4
 8006370:	d107      	bne.n	8006382 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006380:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e005      	b.n	8006392 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006386:	893b      	ldrh	r3, [r7, #8]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	00010002 	.word	0x00010002

080063a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	4608      	mov	r0, r1
 80063aa:	4611      	mov	r1, r2
 80063ac:	461a      	mov	r2, r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	817b      	strh	r3, [r7, #10]
 80063b2:	460b      	mov	r3, r1
 80063b4:	813b      	strh	r3, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 f8c2 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00d      	beq.n	800640e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006400:	d103      	bne.n	800640a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006408:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e0aa      	b.n	8006564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800640e:	897b      	ldrh	r3, [r7, #10]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800641c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	6a3a      	ldr	r2, [r7, #32]
 8006422:	4952      	ldr	r1, [pc, #328]	@ (800656c <I2C_RequestMemoryRead+0x1cc>)
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f91d 	bl	8006664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e097      	b.n	8006564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006434:	2300      	movs	r3, #0
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	617b      	str	r3, [r7, #20]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800644a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800644c:	6a39      	ldr	r1, [r7, #32]
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 f9a8 	bl	80067a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00d      	beq.n	8006476 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645e:	2b04      	cmp	r3, #4
 8006460:	d107      	bne.n	8006472 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006470:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e076      	b.n	8006564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d105      	bne.n	8006488 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800647c:	893b      	ldrh	r3, [r7, #8]
 800647e:	b2da      	uxtb	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	611a      	str	r2, [r3, #16]
 8006486:	e021      	b.n	80064cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006488:	893b      	ldrh	r3, [r7, #8]
 800648a:	0a1b      	lsrs	r3, r3, #8
 800648c:	b29b      	uxth	r3, r3
 800648e:	b2da      	uxtb	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006498:	6a39      	ldr	r1, [r7, #32]
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 f982 	bl	80067a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00d      	beq.n	80064c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d107      	bne.n	80064be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e050      	b.n	8006564 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064c2:	893b      	ldrh	r3, [r7, #8]
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ce:	6a39      	ldr	r1, [r7, #32]
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 f967 	bl	80067a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00d      	beq.n	80064f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d107      	bne.n	80064f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e035      	b.n	8006564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006506:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	2200      	movs	r2, #0
 8006510:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 f82b 	bl	8006570 <I2C_WaitOnFlagUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00d      	beq.n	800653c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800652a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800652e:	d103      	bne.n	8006538 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006536:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e013      	b.n	8006564 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800653c:	897b      	ldrh	r3, [r7, #10]
 800653e:	b2db      	uxtb	r3, r3
 8006540:	f043 0301 	orr.w	r3, r3, #1
 8006544:	b2da      	uxtb	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800654c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654e:	6a3a      	ldr	r2, [r7, #32]
 8006550:	4906      	ldr	r1, [pc, #24]	@ (800656c <I2C_RequestMemoryRead+0x1cc>)
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f886 	bl	8006664 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e000      	b.n	8006564 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	00010002 	.word	0x00010002

08006570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	603b      	str	r3, [r7, #0]
 800657c:	4613      	mov	r3, r2
 800657e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006580:	e048      	b.n	8006614 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006588:	d044      	beq.n	8006614 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800658a:	f7fd fcd9 	bl	8003f40 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d302      	bcc.n	80065a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d139      	bne.n	8006614 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	0c1b      	lsrs	r3, r3, #16
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d10d      	bne.n	80065c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	43da      	mvns	r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	4013      	ands	r3, r2
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bf0c      	ite	eq
 80065bc:	2301      	moveq	r3, #1
 80065be:	2300      	movne	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	461a      	mov	r2, r3
 80065c4:	e00c      	b.n	80065e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	43da      	mvns	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	4013      	ands	r3, r2
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bf0c      	ite	eq
 80065d8:	2301      	moveq	r3, #1
 80065da:	2300      	movne	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d116      	bne.n	8006614 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2220      	movs	r2, #32
 80065f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006600:	f043 0220 	orr.w	r2, r3, #32
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e023      	b.n	800665c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	0c1b      	lsrs	r3, r3, #16
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b01      	cmp	r3, #1
 800661c:	d10d      	bne.n	800663a <I2C_WaitOnFlagUntilTimeout+0xca>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	43da      	mvns	r2, r3
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	4013      	ands	r3, r2
 800662a:	b29b      	uxth	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	bf0c      	ite	eq
 8006630:	2301      	moveq	r3, #1
 8006632:	2300      	movne	r3, #0
 8006634:	b2db      	uxtb	r3, r3
 8006636:	461a      	mov	r2, r3
 8006638:	e00c      	b.n	8006654 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	43da      	mvns	r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	4013      	ands	r3, r2
 8006646:	b29b      	uxth	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	bf0c      	ite	eq
 800664c:	2301      	moveq	r3, #1
 800664e:	2300      	movne	r3, #0
 8006650:	b2db      	uxtb	r3, r3
 8006652:	461a      	mov	r2, r3
 8006654:	79fb      	ldrb	r3, [r7, #7]
 8006656:	429a      	cmp	r2, r3
 8006658:	d093      	beq.n	8006582 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
 8006670:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006672:	e071      	b.n	8006758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800667e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006682:	d123      	bne.n	80066cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006692:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800669c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b8:	f043 0204 	orr.w	r2, r3, #4
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e067      	b.n	800679c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d2:	d041      	beq.n	8006758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066d4:	f7fd fc34 	bl	8003f40 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d302      	bcc.n	80066ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d136      	bne.n	8006758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	0c1b      	lsrs	r3, r3, #16
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d10c      	bne.n	800670e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	43da      	mvns	r2, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4013      	ands	r3, r2
 8006700:	b29b      	uxth	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	bf14      	ite	ne
 8006706:	2301      	movne	r3, #1
 8006708:	2300      	moveq	r3, #0
 800670a:	b2db      	uxtb	r3, r3
 800670c:	e00b      	b.n	8006726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	43da      	mvns	r2, r3
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	4013      	ands	r3, r2
 800671a:	b29b      	uxth	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	bf14      	ite	ne
 8006720:	2301      	movne	r3, #1
 8006722:	2300      	moveq	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d016      	beq.n	8006758 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2220      	movs	r2, #32
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006744:	f043 0220 	orr.w	r2, r3, #32
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e021      	b.n	800679c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	0c1b      	lsrs	r3, r3, #16
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b01      	cmp	r3, #1
 8006760:	d10c      	bne.n	800677c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	43da      	mvns	r2, r3
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	4013      	ands	r3, r2
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	bf14      	ite	ne
 8006774:	2301      	movne	r3, #1
 8006776:	2300      	moveq	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	e00b      	b.n	8006794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	43da      	mvns	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4013      	ands	r3, r2
 8006788:	b29b      	uxth	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	bf14      	ite	ne
 800678e:	2301      	movne	r3, #1
 8006790:	2300      	moveq	r3, #0
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	f47f af6d 	bne.w	8006674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067b0:	e034      	b.n	800681c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 f8e3 	bl	800697e <I2C_IsAcknowledgeFailed>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e034      	b.n	800682c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c8:	d028      	beq.n	800681c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ca:	f7fd fbb9 	bl	8003f40 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d302      	bcc.n	80067e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d11d      	bne.n	800681c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ea:	2b80      	cmp	r3, #128	@ 0x80
 80067ec:	d016      	beq.n	800681c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006808:	f043 0220 	orr.w	r2, r3, #32
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e007      	b.n	800682c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006826:	2b80      	cmp	r3, #128	@ 0x80
 8006828:	d1c3      	bne.n	80067b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006840:	e034      	b.n	80068ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 f89b 	bl	800697e <I2C_IsAcknowledgeFailed>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e034      	b.n	80068bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d028      	beq.n	80068ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fd fb71 	bl	8003f40 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d11d      	bne.n	80068ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b04      	cmp	r3, #4
 800687c:	d016      	beq.n	80068ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2220      	movs	r2, #32
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006898:	f043 0220 	orr.w	r2, r3, #32
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e007      	b.n	80068bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	f003 0304 	and.w	r3, r3, #4
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d1c3      	bne.n	8006842 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068d0:	e049      	b.n	8006966 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	2b10      	cmp	r3, #16
 80068de:	d119      	bne.n	8006914 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f06f 0210 	mvn.w	r2, #16
 80068e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e030      	b.n	8006976 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006914:	f7fd fb14 	bl	8003f40 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	429a      	cmp	r2, r3
 8006922:	d302      	bcc.n	800692a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d11d      	bne.n	8006966 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006934:	2b40      	cmp	r3, #64	@ 0x40
 8006936:	d016      	beq.n	8006966 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006952:	f043 0220 	orr.w	r2, r3, #32
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e007      	b.n	8006976 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006970:	2b40      	cmp	r3, #64	@ 0x40
 8006972:	d1ae      	bne.n	80068d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006994:	d11b      	bne.n	80069ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800699e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ba:	f043 0204 	orr.w	r2, r3, #4
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e000      	b.n	80069d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80069e6:	2300      	movs	r3, #0
 80069e8:	603b      	str	r3, [r7, #0]
 80069ea:	4b20      	ldr	r3, [pc, #128]	@ (8006a6c <HAL_PWREx_EnableOverDrive+0x90>)
 80069ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ee:	4a1f      	ldr	r2, [pc, #124]	@ (8006a6c <HAL_PWREx_EnableOverDrive+0x90>)
 80069f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80069f6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a6c <HAL_PWREx_EnableOverDrive+0x90>)
 80069f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069fe:	603b      	str	r3, [r7, #0]
 8006a00:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006a02:	4b1b      	ldr	r3, [pc, #108]	@ (8006a70 <HAL_PWREx_EnableOverDrive+0x94>)
 8006a04:	2201      	movs	r2, #1
 8006a06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a08:	f7fd fa9a 	bl	8003f40 <HAL_GetTick>
 8006a0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a0e:	e009      	b.n	8006a24 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a10:	f7fd fa96 	bl	8003f40 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a1e:	d901      	bls.n	8006a24 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e01f      	b.n	8006a64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a24:	4b13      	ldr	r3, [pc, #76]	@ (8006a74 <HAL_PWREx_EnableOverDrive+0x98>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a30:	d1ee      	bne.n	8006a10 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006a32:	4b11      	ldr	r3, [pc, #68]	@ (8006a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a38:	f7fd fa82 	bl	8003f40 <HAL_GetTick>
 8006a3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a3e:	e009      	b.n	8006a54 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a40:	f7fd fa7e 	bl	8003f40 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a4e:	d901      	bls.n	8006a54 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e007      	b.n	8006a64 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a54:	4b07      	ldr	r3, [pc, #28]	@ (8006a74 <HAL_PWREx_EnableOverDrive+0x98>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a60:	d1ee      	bne.n	8006a40 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40023800 	.word	0x40023800
 8006a70:	420e0040 	.word	0x420e0040
 8006a74:	40007000 	.word	0x40007000
 8006a78:	420e0044 	.word	0x420e0044

08006a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e0cc      	b.n	8006c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a90:	4b68      	ldr	r3, [pc, #416]	@ (8006c34 <HAL_RCC_ClockConfig+0x1b8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 030f 	and.w	r3, r3, #15
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d90c      	bls.n	8006ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a9e:	4b65      	ldr	r3, [pc, #404]	@ (8006c34 <HAL_RCC_ClockConfig+0x1b8>)
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa6:	4b63      	ldr	r3, [pc, #396]	@ (8006c34 <HAL_RCC_ClockConfig+0x1b8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d001      	beq.n	8006ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e0b8      	b.n	8006c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d020      	beq.n	8006b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d005      	beq.n	8006adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ad0:	4b59      	ldr	r3, [pc, #356]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	4a58      	ldr	r2, [pc, #352]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006ada:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0308 	and.w	r3, r3, #8
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ae8:	4b53      	ldr	r3, [pc, #332]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	4a52      	ldr	r2, [pc, #328]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006aee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006af4:	4b50      	ldr	r3, [pc, #320]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	494d      	ldr	r1, [pc, #308]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d044      	beq.n	8006b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d107      	bne.n	8006b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b1a:	4b47      	ldr	r3, [pc, #284]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d119      	bne.n	8006b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e07f      	b.n	8006c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d003      	beq.n	8006b3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d107      	bne.n	8006b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d109      	bne.n	8006b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e06f      	b.n	8006c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e067      	b.n	8006c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b5a:	4b37      	ldr	r3, [pc, #220]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f023 0203 	bic.w	r2, r3, #3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	4934      	ldr	r1, [pc, #208]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b6c:	f7fd f9e8 	bl	8003f40 <HAL_GetTick>
 8006b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b72:	e00a      	b.n	8006b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b74:	f7fd f9e4 	bl	8003f40 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e04f      	b.n	8006c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f003 020c 	and.w	r2, r3, #12
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d1eb      	bne.n	8006b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b9c:	4b25      	ldr	r3, [pc, #148]	@ (8006c34 <HAL_RCC_ClockConfig+0x1b8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 030f 	and.w	r3, r3, #15
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d20c      	bcs.n	8006bc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006baa:	4b22      	ldr	r3, [pc, #136]	@ (8006c34 <HAL_RCC_ClockConfig+0x1b8>)
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bb2:	4b20      	ldr	r3, [pc, #128]	@ (8006c34 <HAL_RCC_ClockConfig+0x1b8>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d001      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e032      	b.n	8006c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d008      	beq.n	8006be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bd0:	4b19      	ldr	r3, [pc, #100]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	4916      	ldr	r1, [pc, #88]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0308 	and.w	r3, r3, #8
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bee:	4b12      	ldr	r3, [pc, #72]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	490e      	ldr	r1, [pc, #56]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c02:	f000 f855 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 8006c06:	4602      	mov	r2, r0
 8006c08:	4b0b      	ldr	r3, [pc, #44]	@ (8006c38 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	091b      	lsrs	r3, r3, #4
 8006c0e:	f003 030f 	and.w	r3, r3, #15
 8006c12:	490a      	ldr	r1, [pc, #40]	@ (8006c3c <HAL_RCC_ClockConfig+0x1c0>)
 8006c14:	5ccb      	ldrb	r3, [r1, r3]
 8006c16:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1a:	4a09      	ldr	r2, [pc, #36]	@ (8006c40 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006c1e:	4b09      	ldr	r3, [pc, #36]	@ (8006c44 <HAL_RCC_ClockConfig+0x1c8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fd f948 	bl	8003eb8 <HAL_InitTick>

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	40023c00 	.word	0x40023c00
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	0800bab4 	.word	0x0800bab4
 8006c40:	20000004 	.word	0x20000004
 8006c44:	20000008 	.word	0x20000008

08006c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c4c:	4b03      	ldr	r3, [pc, #12]	@ (8006c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	20000004 	.word	0x20000004

08006c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c64:	f7ff fff0 	bl	8006c48 <HAL_RCC_GetHCLKFreq>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	4b05      	ldr	r3, [pc, #20]	@ (8006c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	0a9b      	lsrs	r3, r3, #10
 8006c70:	f003 0307 	and.w	r3, r3, #7
 8006c74:	4903      	ldr	r1, [pc, #12]	@ (8006c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c76:	5ccb      	ldrb	r3, [r1, r3]
 8006c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	40023800 	.word	0x40023800
 8006c84:	0800bac4 	.word	0x0800bac4

08006c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c8c:	f7ff ffdc 	bl	8006c48 <HAL_RCC_GetHCLKFreq>
 8006c90:	4602      	mov	r2, r0
 8006c92:	4b05      	ldr	r3, [pc, #20]	@ (8006ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	0b5b      	lsrs	r3, r3, #13
 8006c98:	f003 0307 	and.w	r3, r3, #7
 8006c9c:	4903      	ldr	r1, [pc, #12]	@ (8006cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c9e:	5ccb      	ldrb	r3, [r1, r3]
 8006ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	0800bac4 	.word	0x0800bac4

08006cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cb4:	b0ae      	sub	sp, #184	@ 0xb8
 8006cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cd6:	4bcb      	ldr	r3, [pc, #812]	@ (8007004 <HAL_RCC_GetSysClockFreq+0x354>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 030c 	and.w	r3, r3, #12
 8006cde:	2b0c      	cmp	r3, #12
 8006ce0:	f200 8206 	bhi.w	80070f0 <HAL_RCC_GetSysClockFreq+0x440>
 8006ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <HAL_RCC_GetSysClockFreq+0x3c>)
 8006ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cea:	bf00      	nop
 8006cec:	08006d21 	.word	0x08006d21
 8006cf0:	080070f1 	.word	0x080070f1
 8006cf4:	080070f1 	.word	0x080070f1
 8006cf8:	080070f1 	.word	0x080070f1
 8006cfc:	08006d29 	.word	0x08006d29
 8006d00:	080070f1 	.word	0x080070f1
 8006d04:	080070f1 	.word	0x080070f1
 8006d08:	080070f1 	.word	0x080070f1
 8006d0c:	08006d31 	.word	0x08006d31
 8006d10:	080070f1 	.word	0x080070f1
 8006d14:	080070f1 	.word	0x080070f1
 8006d18:	080070f1 	.word	0x080070f1
 8006d1c:	08006f21 	.word	0x08006f21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d20:	4bb9      	ldr	r3, [pc, #740]	@ (8007008 <HAL_RCC_GetSysClockFreq+0x358>)
 8006d22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006d26:	e1e7      	b.n	80070f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d28:	4bb8      	ldr	r3, [pc, #736]	@ (800700c <HAL_RCC_GetSysClockFreq+0x35c>)
 8006d2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006d2e:	e1e3      	b.n	80070f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d30:	4bb4      	ldr	r3, [pc, #720]	@ (8007004 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d3c:	4bb1      	ldr	r3, [pc, #708]	@ (8007004 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d071      	beq.n	8006e2c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d48:	4bae      	ldr	r3, [pc, #696]	@ (8007004 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	099b      	lsrs	r3, r3, #6
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d54:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d64:	2300      	movs	r3, #0
 8006d66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006d6e:	4622      	mov	r2, r4
 8006d70:	462b      	mov	r3, r5
 8006d72:	f04f 0000 	mov.w	r0, #0
 8006d76:	f04f 0100 	mov.w	r1, #0
 8006d7a:	0159      	lsls	r1, r3, #5
 8006d7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d80:	0150      	lsls	r0, r2, #5
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	4621      	mov	r1, r4
 8006d88:	1a51      	subs	r1, r2, r1
 8006d8a:	6439      	str	r1, [r7, #64]	@ 0x40
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	eb63 0301 	sbc.w	r3, r3, r1
 8006d92:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006da0:	4649      	mov	r1, r9
 8006da2:	018b      	lsls	r3, r1, #6
 8006da4:	4641      	mov	r1, r8
 8006da6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006daa:	4641      	mov	r1, r8
 8006dac:	018a      	lsls	r2, r1, #6
 8006dae:	4641      	mov	r1, r8
 8006db0:	1a51      	subs	r1, r2, r1
 8006db2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006db4:	4649      	mov	r1, r9
 8006db6:	eb63 0301 	sbc.w	r3, r3, r1
 8006dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dbc:	f04f 0200 	mov.w	r2, #0
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006dc8:	4649      	mov	r1, r9
 8006dca:	00cb      	lsls	r3, r1, #3
 8006dcc:	4641      	mov	r1, r8
 8006dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dd2:	4641      	mov	r1, r8
 8006dd4:	00ca      	lsls	r2, r1, #3
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4603      	mov	r3, r0
 8006ddc:	4622      	mov	r2, r4
 8006dde:	189b      	adds	r3, r3, r2
 8006de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006de2:	462b      	mov	r3, r5
 8006de4:	460a      	mov	r2, r1
 8006de6:	eb42 0303 	adc.w	r3, r2, r3
 8006dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dec:	f04f 0200 	mov.w	r2, #0
 8006df0:	f04f 0300 	mov.w	r3, #0
 8006df4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006df8:	4629      	mov	r1, r5
 8006dfa:	024b      	lsls	r3, r1, #9
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e02:	4621      	mov	r1, r4
 8006e04:	024a      	lsls	r2, r1, #9
 8006e06:	4610      	mov	r0, r2
 8006e08:	4619      	mov	r1, r3
 8006e0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006e1c:	f7f9 ff34 	bl	8000c88 <__aeabi_uldivmod>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	4613      	mov	r3, r2
 8006e26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e2a:	e067      	b.n	8006efc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e2c:	4b75      	ldr	r3, [pc, #468]	@ (8007004 <HAL_RCC_GetSysClockFreq+0x354>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	099b      	lsrs	r3, r3, #6
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e38:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006e3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e46:	2300      	movs	r3, #0
 8006e48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e4a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006e4e:	4622      	mov	r2, r4
 8006e50:	462b      	mov	r3, r5
 8006e52:	f04f 0000 	mov.w	r0, #0
 8006e56:	f04f 0100 	mov.w	r1, #0
 8006e5a:	0159      	lsls	r1, r3, #5
 8006e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e60:	0150      	lsls	r0, r2, #5
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4621      	mov	r1, r4
 8006e68:	1a51      	subs	r1, r2, r1
 8006e6a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8006e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e74:	f04f 0200 	mov.w	r2, #0
 8006e78:	f04f 0300 	mov.w	r3, #0
 8006e7c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006e80:	4649      	mov	r1, r9
 8006e82:	018b      	lsls	r3, r1, #6
 8006e84:	4641      	mov	r1, r8
 8006e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e8a:	4641      	mov	r1, r8
 8006e8c:	018a      	lsls	r2, r1, #6
 8006e8e:	4641      	mov	r1, r8
 8006e90:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e94:	4649      	mov	r1, r9
 8006e96:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e9a:	f04f 0200 	mov.w	r2, #0
 8006e9e:	f04f 0300 	mov.w	r3, #0
 8006ea2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ea6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006eaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006eae:	4692      	mov	sl, r2
 8006eb0:	469b      	mov	fp, r3
 8006eb2:	4623      	mov	r3, r4
 8006eb4:	eb1a 0303 	adds.w	r3, sl, r3
 8006eb8:	623b      	str	r3, [r7, #32]
 8006eba:	462b      	mov	r3, r5
 8006ebc:	eb4b 0303 	adc.w	r3, fp, r3
 8006ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec2:	f04f 0200 	mov.w	r2, #0
 8006ec6:	f04f 0300 	mov.w	r3, #0
 8006eca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006ece:	4629      	mov	r1, r5
 8006ed0:	028b      	lsls	r3, r1, #10
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ed8:	4621      	mov	r1, r4
 8006eda:	028a      	lsls	r2, r1, #10
 8006edc:	4610      	mov	r0, r2
 8006ede:	4619      	mov	r1, r3
 8006ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ee8:	677a      	str	r2, [r7, #116]	@ 0x74
 8006eea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006eee:	f7f9 fecb 	bl	8000c88 <__aeabi_uldivmod>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006efc:	4b41      	ldr	r3, [pc, #260]	@ (8007004 <HAL_RCC_GetSysClockFreq+0x354>)
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	0c1b      	lsrs	r3, r3, #16
 8006f02:	f003 0303 	and.w	r3, r3, #3
 8006f06:	3301      	adds	r3, #1
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006f0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006f1e:	e0eb      	b.n	80070f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f20:	4b38      	ldr	r3, [pc, #224]	@ (8007004 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f2c:	4b35      	ldr	r3, [pc, #212]	@ (8007004 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d06b      	beq.n	8007010 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f38:	4b32      	ldr	r3, [pc, #200]	@ (8007004 <HAL_RCC_GetSysClockFreq+0x354>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	099b      	lsrs	r3, r3, #6
 8006f3e:	2200      	movs	r2, #0
 8006f40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006f54:	4622      	mov	r2, r4
 8006f56:	462b      	mov	r3, r5
 8006f58:	f04f 0000 	mov.w	r0, #0
 8006f5c:	f04f 0100 	mov.w	r1, #0
 8006f60:	0159      	lsls	r1, r3, #5
 8006f62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f66:	0150      	lsls	r0, r2, #5
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	1a51      	subs	r1, r2, r1
 8006f70:	61b9      	str	r1, [r7, #24]
 8006f72:	4629      	mov	r1, r5
 8006f74:	eb63 0301 	sbc.w	r3, r3, r1
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006f86:	4659      	mov	r1, fp
 8006f88:	018b      	lsls	r3, r1, #6
 8006f8a:	4651      	mov	r1, sl
 8006f8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f90:	4651      	mov	r1, sl
 8006f92:	018a      	lsls	r2, r1, #6
 8006f94:	4651      	mov	r1, sl
 8006f96:	ebb2 0801 	subs.w	r8, r2, r1
 8006f9a:	4659      	mov	r1, fp
 8006f9c:	eb63 0901 	sbc.w	r9, r3, r1
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	f04f 0300 	mov.w	r3, #0
 8006fa8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fb4:	4690      	mov	r8, r2
 8006fb6:	4699      	mov	r9, r3
 8006fb8:	4623      	mov	r3, r4
 8006fba:	eb18 0303 	adds.w	r3, r8, r3
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	462b      	mov	r3, r5
 8006fc2:	eb49 0303 	adc.w	r3, r9, r3
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	f04f 0200 	mov.w	r2, #0
 8006fcc:	f04f 0300 	mov.w	r3, #0
 8006fd0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	024b      	lsls	r3, r1, #9
 8006fd8:	4621      	mov	r1, r4
 8006fda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006fde:	4621      	mov	r1, r4
 8006fe0:	024a      	lsls	r2, r1, #9
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fea:	2200      	movs	r2, #0
 8006fec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006ff0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ff4:	f7f9 fe48 	bl	8000c88 <__aeabi_uldivmod>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007002:	e065      	b.n	80070d0 <HAL_RCC_GetSysClockFreq+0x420>
 8007004:	40023800 	.word	0x40023800
 8007008:	00f42400 	.word	0x00f42400
 800700c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007010:	4b3d      	ldr	r3, [pc, #244]	@ (8007108 <HAL_RCC_GetSysClockFreq+0x458>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	099b      	lsrs	r3, r3, #6
 8007016:	2200      	movs	r2, #0
 8007018:	4618      	mov	r0, r3
 800701a:	4611      	mov	r1, r2
 800701c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007020:	653b      	str	r3, [r7, #80]	@ 0x50
 8007022:	2300      	movs	r3, #0
 8007024:	657b      	str	r3, [r7, #84]	@ 0x54
 8007026:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800702a:	4642      	mov	r2, r8
 800702c:	464b      	mov	r3, r9
 800702e:	f04f 0000 	mov.w	r0, #0
 8007032:	f04f 0100 	mov.w	r1, #0
 8007036:	0159      	lsls	r1, r3, #5
 8007038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800703c:	0150      	lsls	r0, r2, #5
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	4641      	mov	r1, r8
 8007044:	1a51      	subs	r1, r2, r1
 8007046:	60b9      	str	r1, [r7, #8]
 8007048:	4649      	mov	r1, r9
 800704a:	eb63 0301 	sbc.w	r3, r3, r1
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	f04f 0200 	mov.w	r2, #0
 8007054:	f04f 0300 	mov.w	r3, #0
 8007058:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800705c:	4659      	mov	r1, fp
 800705e:	018b      	lsls	r3, r1, #6
 8007060:	4651      	mov	r1, sl
 8007062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007066:	4651      	mov	r1, sl
 8007068:	018a      	lsls	r2, r1, #6
 800706a:	4651      	mov	r1, sl
 800706c:	1a54      	subs	r4, r2, r1
 800706e:	4659      	mov	r1, fp
 8007070:	eb63 0501 	sbc.w	r5, r3, r1
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	f04f 0300 	mov.w	r3, #0
 800707c:	00eb      	lsls	r3, r5, #3
 800707e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007082:	00e2      	lsls	r2, r4, #3
 8007084:	4614      	mov	r4, r2
 8007086:	461d      	mov	r5, r3
 8007088:	4643      	mov	r3, r8
 800708a:	18e3      	adds	r3, r4, r3
 800708c:	603b      	str	r3, [r7, #0]
 800708e:	464b      	mov	r3, r9
 8007090:	eb45 0303 	adc.w	r3, r5, r3
 8007094:	607b      	str	r3, [r7, #4]
 8007096:	f04f 0200 	mov.w	r2, #0
 800709a:	f04f 0300 	mov.w	r3, #0
 800709e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070a2:	4629      	mov	r1, r5
 80070a4:	028b      	lsls	r3, r1, #10
 80070a6:	4621      	mov	r1, r4
 80070a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070ac:	4621      	mov	r1, r4
 80070ae:	028a      	lsls	r2, r1, #10
 80070b0:	4610      	mov	r0, r2
 80070b2:	4619      	mov	r1, r3
 80070b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070b8:	2200      	movs	r2, #0
 80070ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070bc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80070be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80070c2:	f7f9 fde1 	bl	8000c88 <__aeabi_uldivmod>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4613      	mov	r3, r2
 80070cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80070d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007108 <HAL_RCC_GetSysClockFreq+0x458>)
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	0f1b      	lsrs	r3, r3, #28
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80070de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80070e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80070e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80070ee:	e003      	b.n	80070f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070f0:	4b06      	ldr	r3, [pc, #24]	@ (800710c <HAL_RCC_GetSysClockFreq+0x45c>)
 80070f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80070f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	37b8      	adds	r7, #184	@ 0xb8
 8007100:	46bd      	mov	sp, r7
 8007102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007106:	bf00      	nop
 8007108:	40023800 	.word	0x40023800
 800710c:	00f42400 	.word	0x00f42400

08007110 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e28d      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 8083 	beq.w	8007236 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007130:	4b94      	ldr	r3, [pc, #592]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 030c 	and.w	r3, r3, #12
 8007138:	2b04      	cmp	r3, #4
 800713a:	d019      	beq.n	8007170 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800713c:	4b91      	ldr	r3, [pc, #580]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f003 030c 	and.w	r3, r3, #12
        || \
 8007144:	2b08      	cmp	r3, #8
 8007146:	d106      	bne.n	8007156 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007148:	4b8e      	ldr	r3, [pc, #568]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007150:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007154:	d00c      	beq.n	8007170 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007156:	4b8b      	ldr	r3, [pc, #556]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800715e:	2b0c      	cmp	r3, #12
 8007160:	d112      	bne.n	8007188 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007162:	4b88      	ldr	r3, [pc, #544]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800716a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800716e:	d10b      	bne.n	8007188 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007170:	4b84      	ldr	r3, [pc, #528]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d05b      	beq.n	8007234 <HAL_RCC_OscConfig+0x124>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d157      	bne.n	8007234 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e25a      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007190:	d106      	bne.n	80071a0 <HAL_RCC_OscConfig+0x90>
 8007192:	4b7c      	ldr	r3, [pc, #496]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a7b      	ldr	r2, [pc, #492]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 8007198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	e01d      	b.n	80071dc <HAL_RCC_OscConfig+0xcc>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071a8:	d10c      	bne.n	80071c4 <HAL_RCC_OscConfig+0xb4>
 80071aa:	4b76      	ldr	r3, [pc, #472]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a75      	ldr	r2, [pc, #468]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 80071b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	4b73      	ldr	r3, [pc, #460]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a72      	ldr	r2, [pc, #456]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 80071bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071c0:	6013      	str	r3, [r2, #0]
 80071c2:	e00b      	b.n	80071dc <HAL_RCC_OscConfig+0xcc>
 80071c4:	4b6f      	ldr	r3, [pc, #444]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a6e      	ldr	r2, [pc, #440]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 80071ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071ce:	6013      	str	r3, [r2, #0]
 80071d0:	4b6c      	ldr	r3, [pc, #432]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a6b      	ldr	r2, [pc, #428]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 80071d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d013      	beq.n	800720c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e4:	f7fc feac 	bl	8003f40 <HAL_GetTick>
 80071e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ea:	e008      	b.n	80071fe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071ec:	f7fc fea8 	bl	8003f40 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b64      	cmp	r3, #100	@ 0x64
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e21f      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071fe:	4b61      	ldr	r3, [pc, #388]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0f0      	beq.n	80071ec <HAL_RCC_OscConfig+0xdc>
 800720a:	e014      	b.n	8007236 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800720c:	f7fc fe98 	bl	8003f40 <HAL_GetTick>
 8007210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007212:	e008      	b.n	8007226 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007214:	f7fc fe94 	bl	8003f40 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	2b64      	cmp	r3, #100	@ 0x64
 8007220:	d901      	bls.n	8007226 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e20b      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007226:	4b57      	ldr	r3, [pc, #348]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1f0      	bne.n	8007214 <HAL_RCC_OscConfig+0x104>
 8007232:	e000      	b.n	8007236 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d06f      	beq.n	8007322 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007242:	4b50      	ldr	r3, [pc, #320]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 030c 	and.w	r3, r3, #12
 800724a:	2b00      	cmp	r3, #0
 800724c:	d017      	beq.n	800727e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800724e:	4b4d      	ldr	r3, [pc, #308]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f003 030c 	and.w	r3, r3, #12
        || \
 8007256:	2b08      	cmp	r3, #8
 8007258:	d105      	bne.n	8007266 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800725a:	4b4a      	ldr	r3, [pc, #296]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00b      	beq.n	800727e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007266:	4b47      	ldr	r3, [pc, #284]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800726e:	2b0c      	cmp	r3, #12
 8007270:	d11c      	bne.n	80072ac <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007272:	4b44      	ldr	r3, [pc, #272]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d116      	bne.n	80072ac <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800727e:	4b41      	ldr	r3, [pc, #260]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d005      	beq.n	8007296 <HAL_RCC_OscConfig+0x186>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d001      	beq.n	8007296 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e1d3      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007296:	4b3b      	ldr	r3, [pc, #236]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	4937      	ldr	r1, [pc, #220]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072aa:	e03a      	b.n	8007322 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d020      	beq.n	80072f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072b4:	4b34      	ldr	r3, [pc, #208]	@ (8007388 <HAL_RCC_OscConfig+0x278>)
 80072b6:	2201      	movs	r2, #1
 80072b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ba:	f7fc fe41 	bl	8003f40 <HAL_GetTick>
 80072be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072c0:	e008      	b.n	80072d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072c2:	f7fc fe3d 	bl	8003f40 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d901      	bls.n	80072d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e1b4      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d0f0      	beq.n	80072c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072e0:	4b28      	ldr	r3, [pc, #160]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	4925      	ldr	r1, [pc, #148]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	600b      	str	r3, [r1, #0]
 80072f4:	e015      	b.n	8007322 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072f6:	4b24      	ldr	r3, [pc, #144]	@ (8007388 <HAL_RCC_OscConfig+0x278>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072fc:	f7fc fe20 	bl	8003f40 <HAL_GetTick>
 8007300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007304:	f7fc fe1c 	bl	8003f40 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b02      	cmp	r3, #2
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e193      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007316:	4b1b      	ldr	r3, [pc, #108]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0302 	and.w	r3, r3, #2
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1f0      	bne.n	8007304 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0308 	and.w	r3, r3, #8
 800732a:	2b00      	cmp	r3, #0
 800732c:	d036      	beq.n	800739c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d016      	beq.n	8007364 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007336:	4b15      	ldr	r3, [pc, #84]	@ (800738c <HAL_RCC_OscConfig+0x27c>)
 8007338:	2201      	movs	r2, #1
 800733a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800733c:	f7fc fe00 	bl	8003f40 <HAL_GetTick>
 8007340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007344:	f7fc fdfc 	bl	8003f40 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e173      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007356:	4b0b      	ldr	r3, [pc, #44]	@ (8007384 <HAL_RCC_OscConfig+0x274>)
 8007358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800735a:	f003 0302 	and.w	r3, r3, #2
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0f0      	beq.n	8007344 <HAL_RCC_OscConfig+0x234>
 8007362:	e01b      	b.n	800739c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007364:	4b09      	ldr	r3, [pc, #36]	@ (800738c <HAL_RCC_OscConfig+0x27c>)
 8007366:	2200      	movs	r2, #0
 8007368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800736a:	f7fc fde9 	bl	8003f40 <HAL_GetTick>
 800736e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007370:	e00e      	b.n	8007390 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007372:	f7fc fde5 	bl	8003f40 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d907      	bls.n	8007390 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e15c      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
 8007384:	40023800 	.word	0x40023800
 8007388:	42470000 	.word	0x42470000
 800738c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007390:	4b8a      	ldr	r3, [pc, #552]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 8007392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1ea      	bne.n	8007372 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8097 	beq.w	80074d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073aa:	2300      	movs	r3, #0
 80073ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073ae:	4b83      	ldr	r3, [pc, #524]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 80073b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10f      	bne.n	80073da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073ba:	2300      	movs	r3, #0
 80073bc:	60bb      	str	r3, [r7, #8]
 80073be:	4b7f      	ldr	r3, [pc, #508]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 80073c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c2:	4a7e      	ldr	r2, [pc, #504]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 80073c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80073ca:	4b7c      	ldr	r3, [pc, #496]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 80073cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073d2:	60bb      	str	r3, [r7, #8]
 80073d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073d6:	2301      	movs	r3, #1
 80073d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073da:	4b79      	ldr	r3, [pc, #484]	@ (80075c0 <HAL_RCC_OscConfig+0x4b0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d118      	bne.n	8007418 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073e6:	4b76      	ldr	r3, [pc, #472]	@ (80075c0 <HAL_RCC_OscConfig+0x4b0>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a75      	ldr	r2, [pc, #468]	@ (80075c0 <HAL_RCC_OscConfig+0x4b0>)
 80073ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073f2:	f7fc fda5 	bl	8003f40 <HAL_GetTick>
 80073f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073f8:	e008      	b.n	800740c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073fa:	f7fc fda1 	bl	8003f40 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d901      	bls.n	800740c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e118      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800740c:	4b6c      	ldr	r3, [pc, #432]	@ (80075c0 <HAL_RCC_OscConfig+0x4b0>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007414:	2b00      	cmp	r3, #0
 8007416:	d0f0      	beq.n	80073fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d106      	bne.n	800742e <HAL_RCC_OscConfig+0x31e>
 8007420:	4b66      	ldr	r3, [pc, #408]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 8007422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007424:	4a65      	ldr	r2, [pc, #404]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 8007426:	f043 0301 	orr.w	r3, r3, #1
 800742a:	6713      	str	r3, [r2, #112]	@ 0x70
 800742c:	e01c      	b.n	8007468 <HAL_RCC_OscConfig+0x358>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	2b05      	cmp	r3, #5
 8007434:	d10c      	bne.n	8007450 <HAL_RCC_OscConfig+0x340>
 8007436:	4b61      	ldr	r3, [pc, #388]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 8007438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800743a:	4a60      	ldr	r2, [pc, #384]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 800743c:	f043 0304 	orr.w	r3, r3, #4
 8007440:	6713      	str	r3, [r2, #112]	@ 0x70
 8007442:	4b5e      	ldr	r3, [pc, #376]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 8007444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007446:	4a5d      	ldr	r2, [pc, #372]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 8007448:	f043 0301 	orr.w	r3, r3, #1
 800744c:	6713      	str	r3, [r2, #112]	@ 0x70
 800744e:	e00b      	b.n	8007468 <HAL_RCC_OscConfig+0x358>
 8007450:	4b5a      	ldr	r3, [pc, #360]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 8007452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007454:	4a59      	ldr	r2, [pc, #356]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 8007456:	f023 0301 	bic.w	r3, r3, #1
 800745a:	6713      	str	r3, [r2, #112]	@ 0x70
 800745c:	4b57      	ldr	r3, [pc, #348]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 800745e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007460:	4a56      	ldr	r2, [pc, #344]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 8007462:	f023 0304 	bic.w	r3, r3, #4
 8007466:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d015      	beq.n	800749c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007470:	f7fc fd66 	bl	8003f40 <HAL_GetTick>
 8007474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007476:	e00a      	b.n	800748e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007478:	f7fc fd62 	bl	8003f40 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007486:	4293      	cmp	r3, r2
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e0d7      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800748e:	4b4b      	ldr	r3, [pc, #300]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 8007490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0ee      	beq.n	8007478 <HAL_RCC_OscConfig+0x368>
 800749a:	e014      	b.n	80074c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800749c:	f7fc fd50 	bl	8003f40 <HAL_GetTick>
 80074a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074a2:	e00a      	b.n	80074ba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074a4:	f7fc fd4c 	bl	8003f40 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e0c1      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074ba:	4b40      	ldr	r3, [pc, #256]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 80074bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1ee      	bne.n	80074a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d105      	bne.n	80074d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074cc:	4b3b      	ldr	r3, [pc, #236]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 80074ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d0:	4a3a      	ldr	r2, [pc, #232]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 80074d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 80ad 	beq.w	800763c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074e2:	4b36      	ldr	r3, [pc, #216]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f003 030c 	and.w	r3, r3, #12
 80074ea:	2b08      	cmp	r3, #8
 80074ec:	d060      	beq.n	80075b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d145      	bne.n	8007582 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074f6:	4b33      	ldr	r3, [pc, #204]	@ (80075c4 <HAL_RCC_OscConfig+0x4b4>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074fc:	f7fc fd20 	bl	8003f40 <HAL_GetTick>
 8007500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007502:	e008      	b.n	8007516 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007504:	f7fc fd1c 	bl	8003f40 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	2b02      	cmp	r3, #2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e093      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007516:	4b29      	ldr	r3, [pc, #164]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1f0      	bne.n	8007504 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69da      	ldr	r2, [r3, #28]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	431a      	orrs	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007530:	019b      	lsls	r3, r3, #6
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007538:	085b      	lsrs	r3, r3, #1
 800753a:	3b01      	subs	r3, #1
 800753c:	041b      	lsls	r3, r3, #16
 800753e:	431a      	orrs	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007544:	061b      	lsls	r3, r3, #24
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800754c:	071b      	lsls	r3, r3, #28
 800754e:	491b      	ldr	r1, [pc, #108]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 8007550:	4313      	orrs	r3, r2
 8007552:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007554:	4b1b      	ldr	r3, [pc, #108]	@ (80075c4 <HAL_RCC_OscConfig+0x4b4>)
 8007556:	2201      	movs	r2, #1
 8007558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755a:	f7fc fcf1 	bl	8003f40 <HAL_GetTick>
 800755e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007560:	e008      	b.n	8007574 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007562:	f7fc fced 	bl	8003f40 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	2b02      	cmp	r3, #2
 800756e:	d901      	bls.n	8007574 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e064      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007574:	4b11      	ldr	r3, [pc, #68]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0f0      	beq.n	8007562 <HAL_RCC_OscConfig+0x452>
 8007580:	e05c      	b.n	800763c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007582:	4b10      	ldr	r3, [pc, #64]	@ (80075c4 <HAL_RCC_OscConfig+0x4b4>)
 8007584:	2200      	movs	r2, #0
 8007586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007588:	f7fc fcda 	bl	8003f40 <HAL_GetTick>
 800758c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800758e:	e008      	b.n	80075a2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007590:	f7fc fcd6 	bl	8003f40 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	2b02      	cmp	r3, #2
 800759c:	d901      	bls.n	80075a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e04d      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075a2:	4b06      	ldr	r3, [pc, #24]	@ (80075bc <HAL_RCC_OscConfig+0x4ac>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1f0      	bne.n	8007590 <HAL_RCC_OscConfig+0x480>
 80075ae:	e045      	b.n	800763c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d107      	bne.n	80075c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e040      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
 80075bc:	40023800 	.word	0x40023800
 80075c0:	40007000 	.word	0x40007000
 80075c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075c8:	4b1f      	ldr	r3, [pc, #124]	@ (8007648 <HAL_RCC_OscConfig+0x538>)
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d030      	beq.n	8007638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d129      	bne.n	8007638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d122      	bne.n	8007638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80075f8:	4013      	ands	r3, r2
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80075fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007600:	4293      	cmp	r3, r2
 8007602:	d119      	bne.n	8007638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800760e:	085b      	lsrs	r3, r3, #1
 8007610:	3b01      	subs	r3, #1
 8007612:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007614:	429a      	cmp	r2, r3
 8007616:	d10f      	bne.n	8007638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007622:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007624:	429a      	cmp	r2, r3
 8007626:	d107      	bne.n	8007638 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007632:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007634:	429a      	cmp	r2, r3
 8007636:	d001      	beq.n	800763c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e000      	b.n	800763e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	40023800 	.word	0x40023800

0800764c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e041      	b.n	80076e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d106      	bne.n	8007678 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fb fe4a 	bl	800330c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3304      	adds	r3, #4
 8007688:	4619      	mov	r1, r3
 800768a:	4610      	mov	r0, r2
 800768c:	f000 faec 	bl	8007c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d109      	bne.n	8007710 <HAL_TIM_PWM_Start+0x24>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b01      	cmp	r3, #1
 8007706:	bf14      	ite	ne
 8007708:	2301      	movne	r3, #1
 800770a:	2300      	moveq	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	e022      	b.n	8007756 <HAL_TIM_PWM_Start+0x6a>
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	2b04      	cmp	r3, #4
 8007714:	d109      	bne.n	800772a <HAL_TIM_PWM_Start+0x3e>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b01      	cmp	r3, #1
 8007720:	bf14      	ite	ne
 8007722:	2301      	movne	r3, #1
 8007724:	2300      	moveq	r3, #0
 8007726:	b2db      	uxtb	r3, r3
 8007728:	e015      	b.n	8007756 <HAL_TIM_PWM_Start+0x6a>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b08      	cmp	r3, #8
 800772e:	d109      	bne.n	8007744 <HAL_TIM_PWM_Start+0x58>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b01      	cmp	r3, #1
 800773a:	bf14      	ite	ne
 800773c:	2301      	movne	r3, #1
 800773e:	2300      	moveq	r3, #0
 8007740:	b2db      	uxtb	r3, r3
 8007742:	e008      	b.n	8007756 <HAL_TIM_PWM_Start+0x6a>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b01      	cmp	r3, #1
 800774e:	bf14      	ite	ne
 8007750:	2301      	movne	r3, #1
 8007752:	2300      	moveq	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e07c      	b.n	8007858 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d104      	bne.n	800776e <HAL_TIM_PWM_Start+0x82>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2202      	movs	r2, #2
 8007768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800776c:	e013      	b.n	8007796 <HAL_TIM_PWM_Start+0xaa>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b04      	cmp	r3, #4
 8007772:	d104      	bne.n	800777e <HAL_TIM_PWM_Start+0x92>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2202      	movs	r2, #2
 8007778:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800777c:	e00b      	b.n	8007796 <HAL_TIM_PWM_Start+0xaa>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b08      	cmp	r3, #8
 8007782:	d104      	bne.n	800778e <HAL_TIM_PWM_Start+0xa2>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800778c:	e003      	b.n	8007796 <HAL_TIM_PWM_Start+0xaa>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2202      	movs	r2, #2
 8007792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2201      	movs	r2, #1
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 fcbe 	bl	8008120 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a2d      	ldr	r2, [pc, #180]	@ (8007860 <HAL_TIM_PWM_Start+0x174>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d004      	beq.n	80077b8 <HAL_TIM_PWM_Start+0xcc>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a2c      	ldr	r2, [pc, #176]	@ (8007864 <HAL_TIM_PWM_Start+0x178>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d101      	bne.n	80077bc <HAL_TIM_PWM_Start+0xd0>
 80077b8:	2301      	movs	r3, #1
 80077ba:	e000      	b.n	80077be <HAL_TIM_PWM_Start+0xd2>
 80077bc:	2300      	movs	r3, #0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d007      	beq.n	80077d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a22      	ldr	r2, [pc, #136]	@ (8007860 <HAL_TIM_PWM_Start+0x174>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d022      	beq.n	8007822 <HAL_TIM_PWM_Start+0x136>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077e4:	d01d      	beq.n	8007822 <HAL_TIM_PWM_Start+0x136>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007868 <HAL_TIM_PWM_Start+0x17c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d018      	beq.n	8007822 <HAL_TIM_PWM_Start+0x136>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a1d      	ldr	r2, [pc, #116]	@ (800786c <HAL_TIM_PWM_Start+0x180>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d013      	beq.n	8007822 <HAL_TIM_PWM_Start+0x136>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a1c      	ldr	r2, [pc, #112]	@ (8007870 <HAL_TIM_PWM_Start+0x184>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d00e      	beq.n	8007822 <HAL_TIM_PWM_Start+0x136>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a16      	ldr	r2, [pc, #88]	@ (8007864 <HAL_TIM_PWM_Start+0x178>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d009      	beq.n	8007822 <HAL_TIM_PWM_Start+0x136>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a18      	ldr	r2, [pc, #96]	@ (8007874 <HAL_TIM_PWM_Start+0x188>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d004      	beq.n	8007822 <HAL_TIM_PWM_Start+0x136>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a16      	ldr	r2, [pc, #88]	@ (8007878 <HAL_TIM_PWM_Start+0x18c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d111      	bne.n	8007846 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 0307 	and.w	r3, r3, #7
 800782c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2b06      	cmp	r3, #6
 8007832:	d010      	beq.n	8007856 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 0201 	orr.w	r2, r2, #1
 8007842:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007844:	e007      	b.n	8007856 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f042 0201 	orr.w	r2, r2, #1
 8007854:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	40010000 	.word	0x40010000
 8007864:	40010400 	.word	0x40010400
 8007868:	40000400 	.word	0x40000400
 800786c:	40000800 	.word	0x40000800
 8007870:	40000c00 	.word	0x40000c00
 8007874:	40014000 	.word	0x40014000
 8007878:	40001800 	.word	0x40001800

0800787c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e097      	b.n	80079c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d106      	bne.n	80078aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7fb fcb7 	bl	8003218 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2202      	movs	r2, #2
 80078ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	6812      	ldr	r2, [r2, #0]
 80078bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078c0:	f023 0307 	bic.w	r3, r3, #7
 80078c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	3304      	adds	r3, #4
 80078ce:	4619      	mov	r1, r3
 80078d0:	4610      	mov	r0, r2
 80078d2:	f000 f9c9 	bl	8007c68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078fe:	f023 0303 	bic.w	r3, r3, #3
 8007902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	021b      	lsls	r3, r3, #8
 800790e:	4313      	orrs	r3, r2
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	4313      	orrs	r3, r2
 8007914:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800791c:	f023 030c 	bic.w	r3, r3, #12
 8007920:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007928:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800792c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	021b      	lsls	r3, r3, #8
 8007938:	4313      	orrs	r3, r2
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	4313      	orrs	r3, r2
 800793e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	011a      	lsls	r2, r3, #4
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	031b      	lsls	r3, r3, #12
 800794c:	4313      	orrs	r3, r2
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	4313      	orrs	r3, r2
 8007952:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800795a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007962:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	011b      	lsls	r3, r3, #4
 800796e:	4313      	orrs	r3, r2
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80079f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d110      	bne.n	8007a1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d102      	bne.n	8007a04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80079fe:	7b7b      	ldrb	r3, [r7, #13]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d001      	beq.n	8007a08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e069      	b.n	8007adc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a18:	e031      	b.n	8007a7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d110      	bne.n	8007a42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d102      	bne.n	8007a2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a26:	7b3b      	ldrb	r3, [r7, #12]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d001      	beq.n	8007a30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e055      	b.n	8007adc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a40:	e01d      	b.n	8007a7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d108      	bne.n	8007a5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d105      	bne.n	8007a5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a4e:	7b7b      	ldrb	r3, [r7, #13]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d102      	bne.n	8007a5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a54:	7b3b      	ldrb	r3, [r7, #12]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d001      	beq.n	8007a5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e03e      	b.n	8007adc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2202      	movs	r2, #2
 8007a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2202      	movs	r2, #2
 8007a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d003      	beq.n	8007a8c <HAL_TIM_Encoder_Start+0xc4>
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	2b04      	cmp	r3, #4
 8007a88:	d008      	beq.n	8007a9c <HAL_TIM_Encoder_Start+0xd4>
 8007a8a:	e00f      	b.n	8007aac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2201      	movs	r2, #1
 8007a92:	2100      	movs	r1, #0
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 fb43 	bl	8008120 <TIM_CCxChannelCmd>
      break;
 8007a9a:	e016      	b.n	8007aca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	2104      	movs	r1, #4
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 fb3b 	bl	8008120 <TIM_CCxChannelCmd>
      break;
 8007aaa:	e00e      	b.n	8007aca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 fb33 	bl	8008120 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	2104      	movs	r1, #4
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fb2c 	bl	8008120 <TIM_CCxChannelCmd>
      break;
 8007ac8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f042 0201 	orr.w	r2, r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d101      	bne.n	8007b02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007afe:	2302      	movs	r3, #2
 8007b00:	e0ae      	b.n	8007c60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b0c      	cmp	r3, #12
 8007b0e:	f200 809f 	bhi.w	8007c50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007b12:	a201      	add	r2, pc, #4	@ (adr r2, 8007b18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b18:	08007b4d 	.word	0x08007b4d
 8007b1c:	08007c51 	.word	0x08007c51
 8007b20:	08007c51 	.word	0x08007c51
 8007b24:	08007c51 	.word	0x08007c51
 8007b28:	08007b8d 	.word	0x08007b8d
 8007b2c:	08007c51 	.word	0x08007c51
 8007b30:	08007c51 	.word	0x08007c51
 8007b34:	08007c51 	.word	0x08007c51
 8007b38:	08007bcf 	.word	0x08007bcf
 8007b3c:	08007c51 	.word	0x08007c51
 8007b40:	08007c51 	.word	0x08007c51
 8007b44:	08007c51 	.word	0x08007c51
 8007b48:	08007c0f 	.word	0x08007c0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68b9      	ldr	r1, [r7, #8]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 f934 	bl	8007dc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	699a      	ldr	r2, [r3, #24]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f042 0208 	orr.w	r2, r2, #8
 8007b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	699a      	ldr	r2, [r3, #24]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 0204 	bic.w	r2, r2, #4
 8007b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6999      	ldr	r1, [r3, #24]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	691a      	ldr	r2, [r3, #16]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	619a      	str	r2, [r3, #24]
      break;
 8007b8a:	e064      	b.n	8007c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68b9      	ldr	r1, [r7, #8]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 f984 	bl	8007ea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	699a      	ldr	r2, [r3, #24]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	699a      	ldr	r2, [r3, #24]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6999      	ldr	r1, [r3, #24]
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	021a      	lsls	r2, r3, #8
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	619a      	str	r2, [r3, #24]
      break;
 8007bcc:	e043      	b.n	8007c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68b9      	ldr	r1, [r7, #8]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 f9d9 	bl	8007f8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69da      	ldr	r2, [r3, #28]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f042 0208 	orr.w	r2, r2, #8
 8007be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	69da      	ldr	r2, [r3, #28]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0204 	bic.w	r2, r2, #4
 8007bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69d9      	ldr	r1, [r3, #28]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	691a      	ldr	r2, [r3, #16]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	61da      	str	r2, [r3, #28]
      break;
 8007c0c:	e023      	b.n	8007c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68b9      	ldr	r1, [r7, #8]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 fa2d 	bl	8008074 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	69da      	ldr	r2, [r3, #28]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	69da      	ldr	r2, [r3, #28]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69d9      	ldr	r1, [r3, #28]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	021a      	lsls	r2, r3, #8
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	61da      	str	r2, [r3, #28]
      break;
 8007c4e:	e002      	b.n	8007c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	75fb      	strb	r3, [r7, #23]
      break;
 8007c54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a46      	ldr	r2, [pc, #280]	@ (8007d94 <TIM_Base_SetConfig+0x12c>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d013      	beq.n	8007ca8 <TIM_Base_SetConfig+0x40>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c86:	d00f      	beq.n	8007ca8 <TIM_Base_SetConfig+0x40>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a43      	ldr	r2, [pc, #268]	@ (8007d98 <TIM_Base_SetConfig+0x130>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d00b      	beq.n	8007ca8 <TIM_Base_SetConfig+0x40>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a42      	ldr	r2, [pc, #264]	@ (8007d9c <TIM_Base_SetConfig+0x134>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d007      	beq.n	8007ca8 <TIM_Base_SetConfig+0x40>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a41      	ldr	r2, [pc, #260]	@ (8007da0 <TIM_Base_SetConfig+0x138>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d003      	beq.n	8007ca8 <TIM_Base_SetConfig+0x40>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a40      	ldr	r2, [pc, #256]	@ (8007da4 <TIM_Base_SetConfig+0x13c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d108      	bne.n	8007cba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a35      	ldr	r2, [pc, #212]	@ (8007d94 <TIM_Base_SetConfig+0x12c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d02b      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cc8:	d027      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a32      	ldr	r2, [pc, #200]	@ (8007d98 <TIM_Base_SetConfig+0x130>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d023      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a31      	ldr	r2, [pc, #196]	@ (8007d9c <TIM_Base_SetConfig+0x134>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d01f      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a30      	ldr	r2, [pc, #192]	@ (8007da0 <TIM_Base_SetConfig+0x138>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d01b      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a2f      	ldr	r2, [pc, #188]	@ (8007da4 <TIM_Base_SetConfig+0x13c>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d017      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a2e      	ldr	r2, [pc, #184]	@ (8007da8 <TIM_Base_SetConfig+0x140>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d013      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8007dac <TIM_Base_SetConfig+0x144>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d00f      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8007db0 <TIM_Base_SetConfig+0x148>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d00b      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a2b      	ldr	r2, [pc, #172]	@ (8007db4 <TIM_Base_SetConfig+0x14c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d007      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8007db8 <TIM_Base_SetConfig+0x150>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d003      	beq.n	8007d1a <TIM_Base_SetConfig+0xb2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a29      	ldr	r2, [pc, #164]	@ (8007dbc <TIM_Base_SetConfig+0x154>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d108      	bne.n	8007d2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	689a      	ldr	r2, [r3, #8]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a10      	ldr	r2, [pc, #64]	@ (8007d94 <TIM_Base_SetConfig+0x12c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d003      	beq.n	8007d60 <TIM_Base_SetConfig+0xf8>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a12      	ldr	r2, [pc, #72]	@ (8007da4 <TIM_Base_SetConfig+0x13c>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d103      	bne.n	8007d68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	691a      	ldr	r2, [r3, #16]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d105      	bne.n	8007d86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	f023 0201 	bic.w	r2, r3, #1
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	611a      	str	r2, [r3, #16]
  }
}
 8007d86:	bf00      	nop
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	40010000 	.word	0x40010000
 8007d98:	40000400 	.word	0x40000400
 8007d9c:	40000800 	.word	0x40000800
 8007da0:	40000c00 	.word	0x40000c00
 8007da4:	40010400 	.word	0x40010400
 8007da8:	40014000 	.word	0x40014000
 8007dac:	40014400 	.word	0x40014400
 8007db0:	40014800 	.word	0x40014800
 8007db4:	40001800 	.word	0x40001800
 8007db8:	40001c00 	.word	0x40001c00
 8007dbc:	40002000 	.word	0x40002000

08007dc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a1b      	ldr	r3, [r3, #32]
 8007dd4:	f023 0201 	bic.w	r2, r3, #1
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f023 0303 	bic.w	r3, r3, #3
 8007df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f023 0302 	bic.w	r3, r3, #2
 8007e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a20      	ldr	r2, [pc, #128]	@ (8007e98 <TIM_OC1_SetConfig+0xd8>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d003      	beq.n	8007e24 <TIM_OC1_SetConfig+0x64>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8007e9c <TIM_OC1_SetConfig+0xdc>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d10c      	bne.n	8007e3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	f023 0308 	bic.w	r3, r3, #8
 8007e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f023 0304 	bic.w	r3, r3, #4
 8007e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a15      	ldr	r2, [pc, #84]	@ (8007e98 <TIM_OC1_SetConfig+0xd8>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d003      	beq.n	8007e4e <TIM_OC1_SetConfig+0x8e>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a14      	ldr	r2, [pc, #80]	@ (8007e9c <TIM_OC1_SetConfig+0xdc>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d111      	bne.n	8007e72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	621a      	str	r2, [r3, #32]
}
 8007e8c:	bf00      	nop
 8007e8e:	371c      	adds	r7, #28
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	40010000 	.word	0x40010000
 8007e9c:	40010400 	.word	0x40010400

08007ea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a1b      	ldr	r3, [r3, #32]
 8007eb4:	f023 0210 	bic.w	r2, r3, #16
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	021b      	lsls	r3, r3, #8
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	f023 0320 	bic.w	r3, r3, #32
 8007eea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	011b      	lsls	r3, r3, #4
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a22      	ldr	r2, [pc, #136]	@ (8007f84 <TIM_OC2_SetConfig+0xe4>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d003      	beq.n	8007f08 <TIM_OC2_SetConfig+0x68>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a21      	ldr	r2, [pc, #132]	@ (8007f88 <TIM_OC2_SetConfig+0xe8>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d10d      	bne.n	8007f24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a17      	ldr	r2, [pc, #92]	@ (8007f84 <TIM_OC2_SetConfig+0xe4>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d003      	beq.n	8007f34 <TIM_OC2_SetConfig+0x94>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a16      	ldr	r2, [pc, #88]	@ (8007f88 <TIM_OC2_SetConfig+0xe8>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d113      	bne.n	8007f5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	621a      	str	r2, [r3, #32]
}
 8007f76:	bf00      	nop
 8007f78:	371c      	adds	r7, #28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	40010000 	.word	0x40010000
 8007f88:	40010400 	.word	0x40010400

08007f8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a1b      	ldr	r3, [r3, #32]
 8007fa0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f023 0303 	bic.w	r3, r3, #3
 8007fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	021b      	lsls	r3, r3, #8
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a21      	ldr	r2, [pc, #132]	@ (800806c <TIM_OC3_SetConfig+0xe0>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d003      	beq.n	8007ff2 <TIM_OC3_SetConfig+0x66>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a20      	ldr	r2, [pc, #128]	@ (8008070 <TIM_OC3_SetConfig+0xe4>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d10d      	bne.n	800800e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	021b      	lsls	r3, r3, #8
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	4313      	orrs	r3, r2
 8008004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800800c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a16      	ldr	r2, [pc, #88]	@ (800806c <TIM_OC3_SetConfig+0xe0>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d003      	beq.n	800801e <TIM_OC3_SetConfig+0x92>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a15      	ldr	r2, [pc, #84]	@ (8008070 <TIM_OC3_SetConfig+0xe4>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d113      	bne.n	8008046 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800802c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	011b      	lsls	r3, r3, #4
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	4313      	orrs	r3, r2
 8008038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	011b      	lsls	r3, r3, #4
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	4313      	orrs	r3, r2
 8008044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	621a      	str	r2, [r3, #32]
}
 8008060:	bf00      	nop
 8008062:	371c      	adds	r7, #28
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	40010000 	.word	0x40010000
 8008070:	40010400 	.word	0x40010400

08008074 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008074:	b480      	push	{r7}
 8008076:	b087      	sub	sp, #28
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a1b      	ldr	r3, [r3, #32]
 8008088:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	021b      	lsls	r3, r3, #8
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80080be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	031b      	lsls	r3, r3, #12
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a12      	ldr	r2, [pc, #72]	@ (8008118 <TIM_OC4_SetConfig+0xa4>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d003      	beq.n	80080dc <TIM_OC4_SetConfig+0x68>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a11      	ldr	r2, [pc, #68]	@ (800811c <TIM_OC4_SetConfig+0xa8>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d109      	bne.n	80080f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	019b      	lsls	r3, r3, #6
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	621a      	str	r2, [r3, #32]
}
 800810a:	bf00      	nop
 800810c:	371c      	adds	r7, #28
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	40010000 	.word	0x40010000
 800811c:	40010400 	.word	0x40010400

08008120 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008120:	b480      	push	{r7}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f003 031f 	and.w	r3, r3, #31
 8008132:	2201      	movs	r2, #1
 8008134:	fa02 f303 	lsl.w	r3, r2, r3
 8008138:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6a1a      	ldr	r2, [r3, #32]
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	43db      	mvns	r3, r3
 8008142:	401a      	ands	r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6a1a      	ldr	r2, [r3, #32]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f003 031f 	and.w	r3, r3, #31
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	fa01 f303 	lsl.w	r3, r1, r3
 8008158:	431a      	orrs	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	621a      	str	r2, [r3, #32]
}
 800815e:	bf00      	nop
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
	...

0800816c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800817c:	2b01      	cmp	r3, #1
 800817e:	d101      	bne.n	8008184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008180:	2302      	movs	r3, #2
 8008182:	e05a      	b.n	800823a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a21      	ldr	r2, [pc, #132]	@ (8008248 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d022      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081d0:	d01d      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a1d      	ldr	r2, [pc, #116]	@ (800824c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d018      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a1b      	ldr	r2, [pc, #108]	@ (8008250 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d013      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008254 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00e      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a18      	ldr	r2, [pc, #96]	@ (8008258 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d009      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a17      	ldr	r2, [pc, #92]	@ (800825c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d004      	beq.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a15      	ldr	r2, [pc, #84]	@ (8008260 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d10c      	bne.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	4313      	orrs	r3, r2
 800821e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	40010000 	.word	0x40010000
 800824c:	40000400 	.word	0x40000400
 8008250:	40000800 	.word	0x40000800
 8008254:	40000c00 	.word	0x40000c00
 8008258:	40010400 	.word	0x40010400
 800825c:	40014000 	.word	0x40014000
 8008260:	40001800 	.word	0x40001800

08008264 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e042      	b.n	80082fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d106      	bne.n	8008290 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7fb f8ba 	bl	8003404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2224      	movs	r2, #36	@ 0x24
 8008294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68da      	ldr	r2, [r3, #12]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80082a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fc85 	bl	8008bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	691a      	ldr	r2, [r3, #16]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	695a      	ldr	r2, [r3, #20]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80082dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2220      	movs	r2, #32
 80082e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2220      	movs	r2, #32
 80082f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b0ba      	sub	sp, #232	@ 0xe8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800832a:	2300      	movs	r3, #0
 800832c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008330:	2300      	movs	r3, #0
 8008332:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10f      	bne.n	800836a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800834a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800834e:	f003 0320 	and.w	r3, r3, #32
 8008352:	2b00      	cmp	r3, #0
 8008354:	d009      	beq.n	800836a <HAL_UART_IRQHandler+0x66>
 8008356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800835a:	f003 0320 	and.w	r3, r3, #32
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fb69 	bl	8008a3a <UART_Receive_IT>
      return;
 8008368:	e25b      	b.n	8008822 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800836a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 80de 	beq.w	8008530 <HAL_UART_IRQHandler+0x22c>
 8008374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	d106      	bne.n	800838e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008384:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 80d1 	beq.w	8008530 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800838e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00b      	beq.n	80083b2 <HAL_UART_IRQHandler+0xae>
 800839a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800839e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d005      	beq.n	80083b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083aa:	f043 0201 	orr.w	r2, r3, #1
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083b6:	f003 0304 	and.w	r3, r3, #4
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00b      	beq.n	80083d6 <HAL_UART_IRQHandler+0xd2>
 80083be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d005      	beq.n	80083d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ce:	f043 0202 	orr.w	r2, r3, #2
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00b      	beq.n	80083fa <HAL_UART_IRQHandler+0xf6>
 80083e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d005      	beq.n	80083fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f2:	f043 0204 	orr.w	r2, r3, #4
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80083fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083fe:	f003 0308 	and.w	r3, r3, #8
 8008402:	2b00      	cmp	r3, #0
 8008404:	d011      	beq.n	800842a <HAL_UART_IRQHandler+0x126>
 8008406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800840a:	f003 0320 	and.w	r3, r3, #32
 800840e:	2b00      	cmp	r3, #0
 8008410:	d105      	bne.n	800841e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d005      	beq.n	800842a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008422:	f043 0208 	orr.w	r2, r3, #8
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 81f2 	beq.w	8008818 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008438:	f003 0320 	and.w	r3, r3, #32
 800843c:	2b00      	cmp	r3, #0
 800843e:	d008      	beq.n	8008452 <HAL_UART_IRQHandler+0x14e>
 8008440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008444:	f003 0320 	and.w	r3, r3, #32
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 faf4 	bl	8008a3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	695b      	ldr	r3, [r3, #20]
 8008458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800845c:	2b40      	cmp	r3, #64	@ 0x40
 800845e:	bf0c      	ite	eq
 8008460:	2301      	moveq	r3, #1
 8008462:	2300      	movne	r3, #0
 8008464:	b2db      	uxtb	r3, r3
 8008466:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800846e:	f003 0308 	and.w	r3, r3, #8
 8008472:	2b00      	cmp	r3, #0
 8008474:	d103      	bne.n	800847e <HAL_UART_IRQHandler+0x17a>
 8008476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800847a:	2b00      	cmp	r3, #0
 800847c:	d04f      	beq.n	800851e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f9fc 	bl	800887c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800848e:	2b40      	cmp	r3, #64	@ 0x40
 8008490:	d141      	bne.n	8008516 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3314      	adds	r3, #20
 8008498:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80084a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80084ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3314      	adds	r3, #20
 80084ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80084be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80084c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80084ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80084ce:	e841 2300 	strex	r3, r2, [r1]
 80084d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80084d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1d9      	bne.n	8008492 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d013      	beq.n	800850e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ea:	4a7e      	ldr	r2, [pc, #504]	@ (80086e4 <HAL_UART_IRQHandler+0x3e0>)
 80084ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fc fb94 	bl	8004c20 <HAL_DMA_Abort_IT>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d016      	beq.n	800852c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008508:	4610      	mov	r0, r2
 800850a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800850c:	e00e      	b.n	800852c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f99e 	bl	8008850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008514:	e00a      	b.n	800852c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f99a 	bl	8008850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800851c:	e006      	b.n	800852c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f996 	bl	8008850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2200      	movs	r2, #0
 8008528:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800852a:	e175      	b.n	8008818 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800852c:	bf00      	nop
    return;
 800852e:	e173      	b.n	8008818 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008534:	2b01      	cmp	r3, #1
 8008536:	f040 814f 	bne.w	80087d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800853a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800853e:	f003 0310 	and.w	r3, r3, #16
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 8148 	beq.w	80087d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800854c:	f003 0310 	and.w	r3, r3, #16
 8008550:	2b00      	cmp	r3, #0
 8008552:	f000 8141 	beq.w	80087d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008556:	2300      	movs	r3, #0
 8008558:	60bb      	str	r3, [r7, #8]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	60bb      	str	r3, [r7, #8]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	60bb      	str	r3, [r7, #8]
 800856a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008576:	2b40      	cmp	r3, #64	@ 0x40
 8008578:	f040 80b6 	bne.w	80086e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008588:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 8145 	beq.w	800881c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008596:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800859a:	429a      	cmp	r2, r3
 800859c:	f080 813e 	bcs.w	800881c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80085a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085b2:	f000 8088 	beq.w	80086c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	330c      	adds	r3, #12
 80085bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80085c4:	e853 3f00 	ldrex	r3, [r3]
 80085c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80085cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80085d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	330c      	adds	r3, #12
 80085de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80085e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80085e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80085ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80085fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1d9      	bne.n	80085b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	3314      	adds	r3, #20
 8008608:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008612:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008614:	f023 0301 	bic.w	r3, r3, #1
 8008618:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3314      	adds	r3, #20
 8008622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008626:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800862a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800862e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008638:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e1      	bne.n	8008602 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3314      	adds	r3, #20
 8008644:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800864e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008650:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3314      	adds	r3, #20
 800865e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008662:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008664:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008668:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008670:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e3      	bne.n	800863e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	330c      	adds	r3, #12
 800868a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800868e:	e853 3f00 	ldrex	r3, [r3]
 8008692:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008696:	f023 0310 	bic.w	r3, r3, #16
 800869a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	330c      	adds	r3, #12
 80086a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80086a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80086aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80086ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086b0:	e841 2300 	strex	r3, r2, [r1]
 80086b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80086b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d1e3      	bne.n	8008684 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fc fa3d 	bl	8004b40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2202      	movs	r2, #2
 80086ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	b29b      	uxth	r3, r3
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f8c1 	bl	8008864 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086e2:	e09b      	b.n	800881c <HAL_UART_IRQHandler+0x518>
 80086e4:	08008943 	.word	0x08008943
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 808e 	beq.w	8008820 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008704:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 8089 	beq.w	8008820 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	330c      	adds	r3, #12
 8008714:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800871e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008720:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008724:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	330c      	adds	r3, #12
 800872e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008732:	647a      	str	r2, [r7, #68]	@ 0x44
 8008734:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008736:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008738:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800873a:	e841 2300 	strex	r3, r2, [r1]
 800873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e3      	bne.n	800870e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3314      	adds	r3, #20
 800874c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008750:	e853 3f00 	ldrex	r3, [r3]
 8008754:	623b      	str	r3, [r7, #32]
   return(result);
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	f023 0301 	bic.w	r3, r3, #1
 800875c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3314      	adds	r3, #20
 8008766:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800876a:	633a      	str	r2, [r7, #48]	@ 0x30
 800876c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008772:	e841 2300 	strex	r3, r2, [r1]
 8008776:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e3      	bne.n	8008746 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2220      	movs	r2, #32
 8008782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	330c      	adds	r3, #12
 8008792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	e853 3f00 	ldrex	r3, [r3]
 800879a:	60fb      	str	r3, [r7, #12]
   return(result);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f023 0310 	bic.w	r3, r3, #16
 80087a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	330c      	adds	r3, #12
 80087ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80087b0:	61fa      	str	r2, [r7, #28]
 80087b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b4:	69b9      	ldr	r1, [r7, #24]
 80087b6:	69fa      	ldr	r2, [r7, #28]
 80087b8:	e841 2300 	strex	r3, r2, [r1]
 80087bc:	617b      	str	r3, [r7, #20]
   return(result);
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1e3      	bne.n	800878c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f847 	bl	8008864 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087d6:	e023      	b.n	8008820 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80087d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d009      	beq.n	80087f8 <HAL_UART_IRQHandler+0x4f4>
 80087e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d003      	beq.n	80087f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 f8ba 	bl	800896a <UART_Transmit_IT>
    return;
 80087f6:	e014      	b.n	8008822 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80087f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00e      	beq.n	8008822 <HAL_UART_IRQHandler+0x51e>
 8008804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800880c:	2b00      	cmp	r3, #0
 800880e:	d008      	beq.n	8008822 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f8fa 	bl	8008a0a <UART_EndTransmit_IT>
    return;
 8008816:	e004      	b.n	8008822 <HAL_UART_IRQHandler+0x51e>
    return;
 8008818:	bf00      	nop
 800881a:	e002      	b.n	8008822 <HAL_UART_IRQHandler+0x51e>
      return;
 800881c:	bf00      	nop
 800881e:	e000      	b.n	8008822 <HAL_UART_IRQHandler+0x51e>
      return;
 8008820:	bf00      	nop
  }
}
 8008822:	37e8      	adds	r7, #232	@ 0xe8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800887c:	b480      	push	{r7}
 800887e:	b095      	sub	sp, #84	@ 0x54
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	330c      	adds	r3, #12
 800888a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800888e:	e853 3f00 	ldrex	r3, [r3]
 8008892:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008896:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800889a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	330c      	adds	r3, #12
 80088a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80088a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80088a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088ac:	e841 2300 	strex	r3, r2, [r1]
 80088b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1e5      	bne.n	8008884 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3314      	adds	r3, #20
 80088be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	6a3b      	ldr	r3, [r7, #32]
 80088c2:	e853 3f00 	ldrex	r3, [r3]
 80088c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	f023 0301 	bic.w	r3, r3, #1
 80088ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3314      	adds	r3, #20
 80088d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088e0:	e841 2300 	strex	r3, r2, [r1]
 80088e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e5      	bne.n	80088b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d119      	bne.n	8008928 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	330c      	adds	r3, #12
 80088fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	e853 3f00 	ldrex	r3, [r3]
 8008902:	60bb      	str	r3, [r7, #8]
   return(result);
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f023 0310 	bic.w	r3, r3, #16
 800890a:	647b      	str	r3, [r7, #68]	@ 0x44
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	330c      	adds	r3, #12
 8008912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008914:	61ba      	str	r2, [r7, #24]
 8008916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008918:	6979      	ldr	r1, [r7, #20]
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	e841 2300 	strex	r3, r2, [r1]
 8008920:	613b      	str	r3, [r7, #16]
   return(result);
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e5      	bne.n	80088f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2220      	movs	r2, #32
 800892c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008936:	bf00      	nop
 8008938:	3754      	adds	r7, #84	@ 0x54
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr

08008942 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800894e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f7ff ff77 	bl	8008850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008962:	bf00      	nop
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800896a:	b480      	push	{r7}
 800896c:	b085      	sub	sp, #20
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b21      	cmp	r3, #33	@ 0x21
 800897c:	d13e      	bne.n	80089fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008986:	d114      	bne.n	80089b2 <UART_Transmit_IT+0x48>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d110      	bne.n	80089b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	1c9a      	adds	r2, r3, #2
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	621a      	str	r2, [r3, #32]
 80089b0:	e008      	b.n	80089c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	1c59      	adds	r1, r3, #1
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	6211      	str	r1, [r2, #32]
 80089bc:	781a      	ldrb	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	3b01      	subs	r3, #1
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	4619      	mov	r1, r3
 80089d2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10f      	bne.n	80089f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80089e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68da      	ldr	r2, [r3, #12]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	e000      	b.n	80089fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089fc:	2302      	movs	r3, #2
  }
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68da      	ldr	r2, [r3, #12]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7ff fefc 	bl	8008828 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b08c      	sub	sp, #48	@ 0x30
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b22      	cmp	r3, #34	@ 0x22
 8008a4c:	f040 80ae 	bne.w	8008bac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a58:	d117      	bne.n	8008a8a <UART_Receive_IT+0x50>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d113      	bne.n	8008a8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a82:	1c9a      	adds	r2, r3, #2
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a88:	e026      	b.n	8008ad8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008a90:	2300      	movs	r3, #0
 8008a92:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a9c:	d007      	beq.n	8008aae <UART_Receive_IT+0x74>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10a      	bne.n	8008abc <UART_Receive_IT+0x82>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d106      	bne.n	8008abc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab8:	701a      	strb	r2, [r3, #0]
 8008aba:	e008      	b.n	8008ace <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008acc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad2:	1c5a      	adds	r2, r3, #1
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d15d      	bne.n	8008ba8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68da      	ldr	r2, [r3, #12]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f022 0220 	bic.w	r2, r2, #32
 8008afa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68da      	ldr	r2, [r3, #12]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008b0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	695a      	ldr	r2, [r3, #20]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 0201 	bic.w	r2, r2, #1
 8008b1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d135      	bne.n	8008b9e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	330c      	adds	r3, #12
 8008b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	e853 3f00 	ldrex	r3, [r3]
 8008b46:	613b      	str	r3, [r7, #16]
   return(result);
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f023 0310 	bic.w	r3, r3, #16
 8008b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	330c      	adds	r3, #12
 8008b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b58:	623a      	str	r2, [r7, #32]
 8008b5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5c:	69f9      	ldr	r1, [r7, #28]
 8008b5e:	6a3a      	ldr	r2, [r7, #32]
 8008b60:	e841 2300 	strex	r3, r2, [r1]
 8008b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1e5      	bne.n	8008b38 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0310 	and.w	r3, r3, #16
 8008b76:	2b10      	cmp	r3, #16
 8008b78:	d10a      	bne.n	8008b90 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	60fb      	str	r3, [r7, #12]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff fe64 	bl	8008864 <HAL_UARTEx_RxEventCallback>
 8008b9c:	e002      	b.n	8008ba4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7ff fe4c 	bl	800883c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	e002      	b.n	8008bae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	e000      	b.n	8008bae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008bac:	2302      	movs	r3, #2
  }
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3730      	adds	r7, #48	@ 0x30
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bbc:	b0c0      	sub	sp, #256	@ 0x100
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bd4:	68d9      	ldr	r1, [r3, #12]
 8008bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	ea40 0301 	orr.w	r3, r0, r1
 8008be0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	431a      	orrs	r2, r3
 8008bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf4:	695b      	ldr	r3, [r3, #20]
 8008bf6:	431a      	orrs	r2, r3
 8008bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008c10:	f021 010c 	bic.w	r1, r1, #12
 8008c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008c1e:	430b      	orrs	r3, r1
 8008c20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c32:	6999      	ldr	r1, [r3, #24]
 8008c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	ea40 0301 	orr.w	r3, r0, r1
 8008c3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	4b8f      	ldr	r3, [pc, #572]	@ (8008e84 <UART_SetConfig+0x2cc>)
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d005      	beq.n	8008c58 <UART_SetConfig+0xa0>
 8008c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4b8d      	ldr	r3, [pc, #564]	@ (8008e88 <UART_SetConfig+0x2d0>)
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d104      	bne.n	8008c62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c58:	f7fe f816 	bl	8006c88 <HAL_RCC_GetPCLK2Freq>
 8008c5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008c60:	e003      	b.n	8008c6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c62:	f7fd fffd 	bl	8006c60 <HAL_RCC_GetPCLK1Freq>
 8008c66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c6e:	69db      	ldr	r3, [r3, #28]
 8008c70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c74:	f040 810c 	bne.w	8008e90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008c82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008c86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	462b      	mov	r3, r5
 8008c8e:	1891      	adds	r1, r2, r2
 8008c90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008c92:	415b      	adcs	r3, r3
 8008c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	eb12 0801 	adds.w	r8, r2, r1
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	eb43 0901 	adc.w	r9, r3, r1
 8008ca6:	f04f 0200 	mov.w	r2, #0
 8008caa:	f04f 0300 	mov.w	r3, #0
 8008cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cba:	4690      	mov	r8, r2
 8008cbc:	4699      	mov	r9, r3
 8008cbe:	4623      	mov	r3, r4
 8008cc0:	eb18 0303 	adds.w	r3, r8, r3
 8008cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008cc8:	462b      	mov	r3, r5
 8008cca:	eb49 0303 	adc.w	r3, r9, r3
 8008cce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008cde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008ce2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	18db      	adds	r3, r3, r3
 8008cea:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cec:	4613      	mov	r3, r2
 8008cee:	eb42 0303 	adc.w	r3, r2, r3
 8008cf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008cf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008cfc:	f7f7 ffc4 	bl	8000c88 <__aeabi_uldivmod>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4b61      	ldr	r3, [pc, #388]	@ (8008e8c <UART_SetConfig+0x2d4>)
 8008d06:	fba3 2302 	umull	r2, r3, r3, r2
 8008d0a:	095b      	lsrs	r3, r3, #5
 8008d0c:	011c      	lsls	r4, r3, #4
 8008d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d12:	2200      	movs	r2, #0
 8008d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008d1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008d20:	4642      	mov	r2, r8
 8008d22:	464b      	mov	r3, r9
 8008d24:	1891      	adds	r1, r2, r2
 8008d26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008d28:	415b      	adcs	r3, r3
 8008d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008d30:	4641      	mov	r1, r8
 8008d32:	eb12 0a01 	adds.w	sl, r2, r1
 8008d36:	4649      	mov	r1, r9
 8008d38:	eb43 0b01 	adc.w	fp, r3, r1
 8008d3c:	f04f 0200 	mov.w	r2, #0
 8008d40:	f04f 0300 	mov.w	r3, #0
 8008d44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d50:	4692      	mov	sl, r2
 8008d52:	469b      	mov	fp, r3
 8008d54:	4643      	mov	r3, r8
 8008d56:	eb1a 0303 	adds.w	r3, sl, r3
 8008d5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d5e:	464b      	mov	r3, r9
 8008d60:	eb4b 0303 	adc.w	r3, fp, r3
 8008d64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008d78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	18db      	adds	r3, r3, r3
 8008d80:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d82:	4613      	mov	r3, r2
 8008d84:	eb42 0303 	adc.w	r3, r2, r3
 8008d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008d8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008d92:	f7f7 ff79 	bl	8000c88 <__aeabi_uldivmod>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8008e8c <UART_SetConfig+0x2d4>)
 8008d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8008da2:	095b      	lsrs	r3, r3, #5
 8008da4:	2264      	movs	r2, #100	@ 0x64
 8008da6:	fb02 f303 	mul.w	r3, r2, r3
 8008daa:	1acb      	subs	r3, r1, r3
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008db2:	4b36      	ldr	r3, [pc, #216]	@ (8008e8c <UART_SetConfig+0x2d4>)
 8008db4:	fba3 2302 	umull	r2, r3, r3, r2
 8008db8:	095b      	lsrs	r3, r3, #5
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008dc0:	441c      	add	r4, r3
 8008dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008dcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008dd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008dd4:	4642      	mov	r2, r8
 8008dd6:	464b      	mov	r3, r9
 8008dd8:	1891      	adds	r1, r2, r2
 8008dda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008ddc:	415b      	adcs	r3, r3
 8008dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008de0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008de4:	4641      	mov	r1, r8
 8008de6:	1851      	adds	r1, r2, r1
 8008de8:	6339      	str	r1, [r7, #48]	@ 0x30
 8008dea:	4649      	mov	r1, r9
 8008dec:	414b      	adcs	r3, r1
 8008dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8008df0:	f04f 0200 	mov.w	r2, #0
 8008df4:	f04f 0300 	mov.w	r3, #0
 8008df8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008dfc:	4659      	mov	r1, fp
 8008dfe:	00cb      	lsls	r3, r1, #3
 8008e00:	4651      	mov	r1, sl
 8008e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e06:	4651      	mov	r1, sl
 8008e08:	00ca      	lsls	r2, r1, #3
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	4603      	mov	r3, r0
 8008e10:	4642      	mov	r2, r8
 8008e12:	189b      	adds	r3, r3, r2
 8008e14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e18:	464b      	mov	r3, r9
 8008e1a:	460a      	mov	r2, r1
 8008e1c:	eb42 0303 	adc.w	r3, r2, r3
 8008e20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008e34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008e38:	460b      	mov	r3, r1
 8008e3a:	18db      	adds	r3, r3, r3
 8008e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e3e:	4613      	mov	r3, r2
 8008e40:	eb42 0303 	adc.w	r3, r2, r3
 8008e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008e4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008e4e:	f7f7 ff1b 	bl	8000c88 <__aeabi_uldivmod>
 8008e52:	4602      	mov	r2, r0
 8008e54:	460b      	mov	r3, r1
 8008e56:	4b0d      	ldr	r3, [pc, #52]	@ (8008e8c <UART_SetConfig+0x2d4>)
 8008e58:	fba3 1302 	umull	r1, r3, r3, r2
 8008e5c:	095b      	lsrs	r3, r3, #5
 8008e5e:	2164      	movs	r1, #100	@ 0x64
 8008e60:	fb01 f303 	mul.w	r3, r1, r3
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	3332      	adds	r3, #50	@ 0x32
 8008e6a:	4a08      	ldr	r2, [pc, #32]	@ (8008e8c <UART_SetConfig+0x2d4>)
 8008e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e70:	095b      	lsrs	r3, r3, #5
 8008e72:	f003 0207 	and.w	r2, r3, #7
 8008e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4422      	add	r2, r4
 8008e7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e80:	e106      	b.n	8009090 <UART_SetConfig+0x4d8>
 8008e82:	bf00      	nop
 8008e84:	40011000 	.word	0x40011000
 8008e88:	40011400 	.word	0x40011400
 8008e8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e94:	2200      	movs	r2, #0
 8008e96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008e9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008e9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008ea2:	4642      	mov	r2, r8
 8008ea4:	464b      	mov	r3, r9
 8008ea6:	1891      	adds	r1, r2, r2
 8008ea8:	6239      	str	r1, [r7, #32]
 8008eaa:	415b      	adcs	r3, r3
 8008eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008eb2:	4641      	mov	r1, r8
 8008eb4:	1854      	adds	r4, r2, r1
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	eb43 0501 	adc.w	r5, r3, r1
 8008ebc:	f04f 0200 	mov.w	r2, #0
 8008ec0:	f04f 0300 	mov.w	r3, #0
 8008ec4:	00eb      	lsls	r3, r5, #3
 8008ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008eca:	00e2      	lsls	r2, r4, #3
 8008ecc:	4614      	mov	r4, r2
 8008ece:	461d      	mov	r5, r3
 8008ed0:	4643      	mov	r3, r8
 8008ed2:	18e3      	adds	r3, r4, r3
 8008ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ed8:	464b      	mov	r3, r9
 8008eda:	eb45 0303 	adc.w	r3, r5, r3
 8008ede:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008eee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008ef2:	f04f 0200 	mov.w	r2, #0
 8008ef6:	f04f 0300 	mov.w	r3, #0
 8008efa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008efe:	4629      	mov	r1, r5
 8008f00:	008b      	lsls	r3, r1, #2
 8008f02:	4621      	mov	r1, r4
 8008f04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f08:	4621      	mov	r1, r4
 8008f0a:	008a      	lsls	r2, r1, #2
 8008f0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008f10:	f7f7 feba 	bl	8000c88 <__aeabi_uldivmod>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4b60      	ldr	r3, [pc, #384]	@ (800909c <UART_SetConfig+0x4e4>)
 8008f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8008f1e:	095b      	lsrs	r3, r3, #5
 8008f20:	011c      	lsls	r4, r3, #4
 8008f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f26:	2200      	movs	r2, #0
 8008f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008f30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008f34:	4642      	mov	r2, r8
 8008f36:	464b      	mov	r3, r9
 8008f38:	1891      	adds	r1, r2, r2
 8008f3a:	61b9      	str	r1, [r7, #24]
 8008f3c:	415b      	adcs	r3, r3
 8008f3e:	61fb      	str	r3, [r7, #28]
 8008f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f44:	4641      	mov	r1, r8
 8008f46:	1851      	adds	r1, r2, r1
 8008f48:	6139      	str	r1, [r7, #16]
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	414b      	adcs	r3, r1
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	f04f 0200 	mov.w	r2, #0
 8008f54:	f04f 0300 	mov.w	r3, #0
 8008f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f5c:	4659      	mov	r1, fp
 8008f5e:	00cb      	lsls	r3, r1, #3
 8008f60:	4651      	mov	r1, sl
 8008f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f66:	4651      	mov	r1, sl
 8008f68:	00ca      	lsls	r2, r1, #3
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4603      	mov	r3, r0
 8008f70:	4642      	mov	r2, r8
 8008f72:	189b      	adds	r3, r3, r2
 8008f74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f78:	464b      	mov	r3, r9
 8008f7a:	460a      	mov	r2, r1
 8008f7c:	eb42 0303 	adc.w	r3, r2, r3
 8008f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008f90:	f04f 0200 	mov.w	r2, #0
 8008f94:	f04f 0300 	mov.w	r3, #0
 8008f98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008f9c:	4649      	mov	r1, r9
 8008f9e:	008b      	lsls	r3, r1, #2
 8008fa0:	4641      	mov	r1, r8
 8008fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fa6:	4641      	mov	r1, r8
 8008fa8:	008a      	lsls	r2, r1, #2
 8008faa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008fae:	f7f7 fe6b 	bl	8000c88 <__aeabi_uldivmod>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	4b38      	ldr	r3, [pc, #224]	@ (800909c <UART_SetConfig+0x4e4>)
 8008fba:	fba3 2301 	umull	r2, r3, r3, r1
 8008fbe:	095b      	lsrs	r3, r3, #5
 8008fc0:	2264      	movs	r2, #100	@ 0x64
 8008fc2:	fb02 f303 	mul.w	r3, r2, r3
 8008fc6:	1acb      	subs	r3, r1, r3
 8008fc8:	011b      	lsls	r3, r3, #4
 8008fca:	3332      	adds	r3, #50	@ 0x32
 8008fcc:	4a33      	ldr	r2, [pc, #204]	@ (800909c <UART_SetConfig+0x4e4>)
 8008fce:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd2:	095b      	lsrs	r3, r3, #5
 8008fd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008fd8:	441c      	add	r4, r3
 8008fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fde:	2200      	movs	r2, #0
 8008fe0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008fe2:	677a      	str	r2, [r7, #116]	@ 0x74
 8008fe4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008fe8:	4642      	mov	r2, r8
 8008fea:	464b      	mov	r3, r9
 8008fec:	1891      	adds	r1, r2, r2
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	415b      	adcs	r3, r3
 8008ff2:	60fb      	str	r3, [r7, #12]
 8008ff4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ff8:	4641      	mov	r1, r8
 8008ffa:	1851      	adds	r1, r2, r1
 8008ffc:	6039      	str	r1, [r7, #0]
 8008ffe:	4649      	mov	r1, r9
 8009000:	414b      	adcs	r3, r1
 8009002:	607b      	str	r3, [r7, #4]
 8009004:	f04f 0200 	mov.w	r2, #0
 8009008:	f04f 0300 	mov.w	r3, #0
 800900c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009010:	4659      	mov	r1, fp
 8009012:	00cb      	lsls	r3, r1, #3
 8009014:	4651      	mov	r1, sl
 8009016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800901a:	4651      	mov	r1, sl
 800901c:	00ca      	lsls	r2, r1, #3
 800901e:	4610      	mov	r0, r2
 8009020:	4619      	mov	r1, r3
 8009022:	4603      	mov	r3, r0
 8009024:	4642      	mov	r2, r8
 8009026:	189b      	adds	r3, r3, r2
 8009028:	66bb      	str	r3, [r7, #104]	@ 0x68
 800902a:	464b      	mov	r3, r9
 800902c:	460a      	mov	r2, r1
 800902e:	eb42 0303 	adc.w	r3, r2, r3
 8009032:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	663b      	str	r3, [r7, #96]	@ 0x60
 800903e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009040:	f04f 0200 	mov.w	r2, #0
 8009044:	f04f 0300 	mov.w	r3, #0
 8009048:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800904c:	4649      	mov	r1, r9
 800904e:	008b      	lsls	r3, r1, #2
 8009050:	4641      	mov	r1, r8
 8009052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009056:	4641      	mov	r1, r8
 8009058:	008a      	lsls	r2, r1, #2
 800905a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800905e:	f7f7 fe13 	bl	8000c88 <__aeabi_uldivmod>
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	4b0d      	ldr	r3, [pc, #52]	@ (800909c <UART_SetConfig+0x4e4>)
 8009068:	fba3 1302 	umull	r1, r3, r3, r2
 800906c:	095b      	lsrs	r3, r3, #5
 800906e:	2164      	movs	r1, #100	@ 0x64
 8009070:	fb01 f303 	mul.w	r3, r1, r3
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	011b      	lsls	r3, r3, #4
 8009078:	3332      	adds	r3, #50	@ 0x32
 800907a:	4a08      	ldr	r2, [pc, #32]	@ (800909c <UART_SetConfig+0x4e4>)
 800907c:	fba2 2303 	umull	r2, r3, r2, r3
 8009080:	095b      	lsrs	r3, r3, #5
 8009082:	f003 020f 	and.w	r2, r3, #15
 8009086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4422      	add	r2, r4
 800908e:	609a      	str	r2, [r3, #8]
}
 8009090:	bf00      	nop
 8009092:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009096:	46bd      	mov	sp, r7
 8009098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800909c:	51eb851f 	.word	0x51eb851f

080090a0 <__cvt>:
 80090a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090a4:	ec57 6b10 	vmov	r6, r7, d0
 80090a8:	2f00      	cmp	r7, #0
 80090aa:	460c      	mov	r4, r1
 80090ac:	4619      	mov	r1, r3
 80090ae:	463b      	mov	r3, r7
 80090b0:	bfbb      	ittet	lt
 80090b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80090b6:	461f      	movlt	r7, r3
 80090b8:	2300      	movge	r3, #0
 80090ba:	232d      	movlt	r3, #45	@ 0x2d
 80090bc:	700b      	strb	r3, [r1, #0]
 80090be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80090c4:	4691      	mov	r9, r2
 80090c6:	f023 0820 	bic.w	r8, r3, #32
 80090ca:	bfbc      	itt	lt
 80090cc:	4632      	movlt	r2, r6
 80090ce:	4616      	movlt	r6, r2
 80090d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80090d4:	d005      	beq.n	80090e2 <__cvt+0x42>
 80090d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80090da:	d100      	bne.n	80090de <__cvt+0x3e>
 80090dc:	3401      	adds	r4, #1
 80090de:	2102      	movs	r1, #2
 80090e0:	e000      	b.n	80090e4 <__cvt+0x44>
 80090e2:	2103      	movs	r1, #3
 80090e4:	ab03      	add	r3, sp, #12
 80090e6:	9301      	str	r3, [sp, #4]
 80090e8:	ab02      	add	r3, sp, #8
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	ec47 6b10 	vmov	d0, r6, r7
 80090f0:	4653      	mov	r3, sl
 80090f2:	4622      	mov	r2, r4
 80090f4:	f000 fe48 	bl	8009d88 <_dtoa_r>
 80090f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80090fc:	4605      	mov	r5, r0
 80090fe:	d119      	bne.n	8009134 <__cvt+0x94>
 8009100:	f019 0f01 	tst.w	r9, #1
 8009104:	d00e      	beq.n	8009124 <__cvt+0x84>
 8009106:	eb00 0904 	add.w	r9, r0, r4
 800910a:	2200      	movs	r2, #0
 800910c:	2300      	movs	r3, #0
 800910e:	4630      	mov	r0, r6
 8009110:	4639      	mov	r1, r7
 8009112:	f7f7 fcf9 	bl	8000b08 <__aeabi_dcmpeq>
 8009116:	b108      	cbz	r0, 800911c <__cvt+0x7c>
 8009118:	f8cd 900c 	str.w	r9, [sp, #12]
 800911c:	2230      	movs	r2, #48	@ 0x30
 800911e:	9b03      	ldr	r3, [sp, #12]
 8009120:	454b      	cmp	r3, r9
 8009122:	d31e      	bcc.n	8009162 <__cvt+0xc2>
 8009124:	9b03      	ldr	r3, [sp, #12]
 8009126:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009128:	1b5b      	subs	r3, r3, r5
 800912a:	4628      	mov	r0, r5
 800912c:	6013      	str	r3, [r2, #0]
 800912e:	b004      	add	sp, #16
 8009130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009134:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009138:	eb00 0904 	add.w	r9, r0, r4
 800913c:	d1e5      	bne.n	800910a <__cvt+0x6a>
 800913e:	7803      	ldrb	r3, [r0, #0]
 8009140:	2b30      	cmp	r3, #48	@ 0x30
 8009142:	d10a      	bne.n	800915a <__cvt+0xba>
 8009144:	2200      	movs	r2, #0
 8009146:	2300      	movs	r3, #0
 8009148:	4630      	mov	r0, r6
 800914a:	4639      	mov	r1, r7
 800914c:	f7f7 fcdc 	bl	8000b08 <__aeabi_dcmpeq>
 8009150:	b918      	cbnz	r0, 800915a <__cvt+0xba>
 8009152:	f1c4 0401 	rsb	r4, r4, #1
 8009156:	f8ca 4000 	str.w	r4, [sl]
 800915a:	f8da 3000 	ldr.w	r3, [sl]
 800915e:	4499      	add	r9, r3
 8009160:	e7d3      	b.n	800910a <__cvt+0x6a>
 8009162:	1c59      	adds	r1, r3, #1
 8009164:	9103      	str	r1, [sp, #12]
 8009166:	701a      	strb	r2, [r3, #0]
 8009168:	e7d9      	b.n	800911e <__cvt+0x7e>

0800916a <__exponent>:
 800916a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800916c:	2900      	cmp	r1, #0
 800916e:	bfba      	itte	lt
 8009170:	4249      	neglt	r1, r1
 8009172:	232d      	movlt	r3, #45	@ 0x2d
 8009174:	232b      	movge	r3, #43	@ 0x2b
 8009176:	2909      	cmp	r1, #9
 8009178:	7002      	strb	r2, [r0, #0]
 800917a:	7043      	strb	r3, [r0, #1]
 800917c:	dd29      	ble.n	80091d2 <__exponent+0x68>
 800917e:	f10d 0307 	add.w	r3, sp, #7
 8009182:	461d      	mov	r5, r3
 8009184:	270a      	movs	r7, #10
 8009186:	461a      	mov	r2, r3
 8009188:	fbb1 f6f7 	udiv	r6, r1, r7
 800918c:	fb07 1416 	mls	r4, r7, r6, r1
 8009190:	3430      	adds	r4, #48	@ 0x30
 8009192:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009196:	460c      	mov	r4, r1
 8009198:	2c63      	cmp	r4, #99	@ 0x63
 800919a:	f103 33ff 	add.w	r3, r3, #4294967295
 800919e:	4631      	mov	r1, r6
 80091a0:	dcf1      	bgt.n	8009186 <__exponent+0x1c>
 80091a2:	3130      	adds	r1, #48	@ 0x30
 80091a4:	1e94      	subs	r4, r2, #2
 80091a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80091aa:	1c41      	adds	r1, r0, #1
 80091ac:	4623      	mov	r3, r4
 80091ae:	42ab      	cmp	r3, r5
 80091b0:	d30a      	bcc.n	80091c8 <__exponent+0x5e>
 80091b2:	f10d 0309 	add.w	r3, sp, #9
 80091b6:	1a9b      	subs	r3, r3, r2
 80091b8:	42ac      	cmp	r4, r5
 80091ba:	bf88      	it	hi
 80091bc:	2300      	movhi	r3, #0
 80091be:	3302      	adds	r3, #2
 80091c0:	4403      	add	r3, r0
 80091c2:	1a18      	subs	r0, r3, r0
 80091c4:	b003      	add	sp, #12
 80091c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80091cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80091d0:	e7ed      	b.n	80091ae <__exponent+0x44>
 80091d2:	2330      	movs	r3, #48	@ 0x30
 80091d4:	3130      	adds	r1, #48	@ 0x30
 80091d6:	7083      	strb	r3, [r0, #2]
 80091d8:	70c1      	strb	r1, [r0, #3]
 80091da:	1d03      	adds	r3, r0, #4
 80091dc:	e7f1      	b.n	80091c2 <__exponent+0x58>
	...

080091e0 <_printf_float>:
 80091e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e4:	b08d      	sub	sp, #52	@ 0x34
 80091e6:	460c      	mov	r4, r1
 80091e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80091ec:	4616      	mov	r6, r2
 80091ee:	461f      	mov	r7, r3
 80091f0:	4605      	mov	r5, r0
 80091f2:	f000 fcb9 	bl	8009b68 <_localeconv_r>
 80091f6:	6803      	ldr	r3, [r0, #0]
 80091f8:	9304      	str	r3, [sp, #16]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7f7 f858 	bl	80002b0 <strlen>
 8009200:	2300      	movs	r3, #0
 8009202:	930a      	str	r3, [sp, #40]	@ 0x28
 8009204:	f8d8 3000 	ldr.w	r3, [r8]
 8009208:	9005      	str	r0, [sp, #20]
 800920a:	3307      	adds	r3, #7
 800920c:	f023 0307 	bic.w	r3, r3, #7
 8009210:	f103 0208 	add.w	r2, r3, #8
 8009214:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009218:	f8d4 b000 	ldr.w	fp, [r4]
 800921c:	f8c8 2000 	str.w	r2, [r8]
 8009220:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009224:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009228:	9307      	str	r3, [sp, #28]
 800922a:	f8cd 8018 	str.w	r8, [sp, #24]
 800922e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009236:	4b9c      	ldr	r3, [pc, #624]	@ (80094a8 <_printf_float+0x2c8>)
 8009238:	f04f 32ff 	mov.w	r2, #4294967295
 800923c:	f7f7 fc96 	bl	8000b6c <__aeabi_dcmpun>
 8009240:	bb70      	cbnz	r0, 80092a0 <_printf_float+0xc0>
 8009242:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009246:	4b98      	ldr	r3, [pc, #608]	@ (80094a8 <_printf_float+0x2c8>)
 8009248:	f04f 32ff 	mov.w	r2, #4294967295
 800924c:	f7f7 fc70 	bl	8000b30 <__aeabi_dcmple>
 8009250:	bb30      	cbnz	r0, 80092a0 <_printf_float+0xc0>
 8009252:	2200      	movs	r2, #0
 8009254:	2300      	movs	r3, #0
 8009256:	4640      	mov	r0, r8
 8009258:	4649      	mov	r1, r9
 800925a:	f7f7 fc5f 	bl	8000b1c <__aeabi_dcmplt>
 800925e:	b110      	cbz	r0, 8009266 <_printf_float+0x86>
 8009260:	232d      	movs	r3, #45	@ 0x2d
 8009262:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009266:	4a91      	ldr	r2, [pc, #580]	@ (80094ac <_printf_float+0x2cc>)
 8009268:	4b91      	ldr	r3, [pc, #580]	@ (80094b0 <_printf_float+0x2d0>)
 800926a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800926e:	bf8c      	ite	hi
 8009270:	4690      	movhi	r8, r2
 8009272:	4698      	movls	r8, r3
 8009274:	2303      	movs	r3, #3
 8009276:	6123      	str	r3, [r4, #16]
 8009278:	f02b 0304 	bic.w	r3, fp, #4
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	f04f 0900 	mov.w	r9, #0
 8009282:	9700      	str	r7, [sp, #0]
 8009284:	4633      	mov	r3, r6
 8009286:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009288:	4621      	mov	r1, r4
 800928a:	4628      	mov	r0, r5
 800928c:	f000 f9d2 	bl	8009634 <_printf_common>
 8009290:	3001      	adds	r0, #1
 8009292:	f040 808d 	bne.w	80093b0 <_printf_float+0x1d0>
 8009296:	f04f 30ff 	mov.w	r0, #4294967295
 800929a:	b00d      	add	sp, #52	@ 0x34
 800929c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a0:	4642      	mov	r2, r8
 80092a2:	464b      	mov	r3, r9
 80092a4:	4640      	mov	r0, r8
 80092a6:	4649      	mov	r1, r9
 80092a8:	f7f7 fc60 	bl	8000b6c <__aeabi_dcmpun>
 80092ac:	b140      	cbz	r0, 80092c0 <_printf_float+0xe0>
 80092ae:	464b      	mov	r3, r9
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	bfbc      	itt	lt
 80092b4:	232d      	movlt	r3, #45	@ 0x2d
 80092b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80092ba:	4a7e      	ldr	r2, [pc, #504]	@ (80094b4 <_printf_float+0x2d4>)
 80092bc:	4b7e      	ldr	r3, [pc, #504]	@ (80094b8 <_printf_float+0x2d8>)
 80092be:	e7d4      	b.n	800926a <_printf_float+0x8a>
 80092c0:	6863      	ldr	r3, [r4, #4]
 80092c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80092c6:	9206      	str	r2, [sp, #24]
 80092c8:	1c5a      	adds	r2, r3, #1
 80092ca:	d13b      	bne.n	8009344 <_printf_float+0x164>
 80092cc:	2306      	movs	r3, #6
 80092ce:	6063      	str	r3, [r4, #4]
 80092d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80092d4:	2300      	movs	r3, #0
 80092d6:	6022      	str	r2, [r4, #0]
 80092d8:	9303      	str	r3, [sp, #12]
 80092da:	ab0a      	add	r3, sp, #40	@ 0x28
 80092dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80092e0:	ab09      	add	r3, sp, #36	@ 0x24
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	6861      	ldr	r1, [r4, #4]
 80092e6:	ec49 8b10 	vmov	d0, r8, r9
 80092ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80092ee:	4628      	mov	r0, r5
 80092f0:	f7ff fed6 	bl	80090a0 <__cvt>
 80092f4:	9b06      	ldr	r3, [sp, #24]
 80092f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80092f8:	2b47      	cmp	r3, #71	@ 0x47
 80092fa:	4680      	mov	r8, r0
 80092fc:	d129      	bne.n	8009352 <_printf_float+0x172>
 80092fe:	1cc8      	adds	r0, r1, #3
 8009300:	db02      	blt.n	8009308 <_printf_float+0x128>
 8009302:	6863      	ldr	r3, [r4, #4]
 8009304:	4299      	cmp	r1, r3
 8009306:	dd41      	ble.n	800938c <_printf_float+0x1ac>
 8009308:	f1aa 0a02 	sub.w	sl, sl, #2
 800930c:	fa5f fa8a 	uxtb.w	sl, sl
 8009310:	3901      	subs	r1, #1
 8009312:	4652      	mov	r2, sl
 8009314:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009318:	9109      	str	r1, [sp, #36]	@ 0x24
 800931a:	f7ff ff26 	bl	800916a <__exponent>
 800931e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009320:	1813      	adds	r3, r2, r0
 8009322:	2a01      	cmp	r2, #1
 8009324:	4681      	mov	r9, r0
 8009326:	6123      	str	r3, [r4, #16]
 8009328:	dc02      	bgt.n	8009330 <_printf_float+0x150>
 800932a:	6822      	ldr	r2, [r4, #0]
 800932c:	07d2      	lsls	r2, r2, #31
 800932e:	d501      	bpl.n	8009334 <_printf_float+0x154>
 8009330:	3301      	adds	r3, #1
 8009332:	6123      	str	r3, [r4, #16]
 8009334:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009338:	2b00      	cmp	r3, #0
 800933a:	d0a2      	beq.n	8009282 <_printf_float+0xa2>
 800933c:	232d      	movs	r3, #45	@ 0x2d
 800933e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009342:	e79e      	b.n	8009282 <_printf_float+0xa2>
 8009344:	9a06      	ldr	r2, [sp, #24]
 8009346:	2a47      	cmp	r2, #71	@ 0x47
 8009348:	d1c2      	bne.n	80092d0 <_printf_float+0xf0>
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1c0      	bne.n	80092d0 <_printf_float+0xf0>
 800934e:	2301      	movs	r3, #1
 8009350:	e7bd      	b.n	80092ce <_printf_float+0xee>
 8009352:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009356:	d9db      	bls.n	8009310 <_printf_float+0x130>
 8009358:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800935c:	d118      	bne.n	8009390 <_printf_float+0x1b0>
 800935e:	2900      	cmp	r1, #0
 8009360:	6863      	ldr	r3, [r4, #4]
 8009362:	dd0b      	ble.n	800937c <_printf_float+0x19c>
 8009364:	6121      	str	r1, [r4, #16]
 8009366:	b913      	cbnz	r3, 800936e <_printf_float+0x18e>
 8009368:	6822      	ldr	r2, [r4, #0]
 800936a:	07d0      	lsls	r0, r2, #31
 800936c:	d502      	bpl.n	8009374 <_printf_float+0x194>
 800936e:	3301      	adds	r3, #1
 8009370:	440b      	add	r3, r1
 8009372:	6123      	str	r3, [r4, #16]
 8009374:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009376:	f04f 0900 	mov.w	r9, #0
 800937a:	e7db      	b.n	8009334 <_printf_float+0x154>
 800937c:	b913      	cbnz	r3, 8009384 <_printf_float+0x1a4>
 800937e:	6822      	ldr	r2, [r4, #0]
 8009380:	07d2      	lsls	r2, r2, #31
 8009382:	d501      	bpl.n	8009388 <_printf_float+0x1a8>
 8009384:	3302      	adds	r3, #2
 8009386:	e7f4      	b.n	8009372 <_printf_float+0x192>
 8009388:	2301      	movs	r3, #1
 800938a:	e7f2      	b.n	8009372 <_printf_float+0x192>
 800938c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009390:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009392:	4299      	cmp	r1, r3
 8009394:	db05      	blt.n	80093a2 <_printf_float+0x1c2>
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	6121      	str	r1, [r4, #16]
 800939a:	07d8      	lsls	r0, r3, #31
 800939c:	d5ea      	bpl.n	8009374 <_printf_float+0x194>
 800939e:	1c4b      	adds	r3, r1, #1
 80093a0:	e7e7      	b.n	8009372 <_printf_float+0x192>
 80093a2:	2900      	cmp	r1, #0
 80093a4:	bfd4      	ite	le
 80093a6:	f1c1 0202 	rsble	r2, r1, #2
 80093aa:	2201      	movgt	r2, #1
 80093ac:	4413      	add	r3, r2
 80093ae:	e7e0      	b.n	8009372 <_printf_float+0x192>
 80093b0:	6823      	ldr	r3, [r4, #0]
 80093b2:	055a      	lsls	r2, r3, #21
 80093b4:	d407      	bmi.n	80093c6 <_printf_float+0x1e6>
 80093b6:	6923      	ldr	r3, [r4, #16]
 80093b8:	4642      	mov	r2, r8
 80093ba:	4631      	mov	r1, r6
 80093bc:	4628      	mov	r0, r5
 80093be:	47b8      	blx	r7
 80093c0:	3001      	adds	r0, #1
 80093c2:	d12b      	bne.n	800941c <_printf_float+0x23c>
 80093c4:	e767      	b.n	8009296 <_printf_float+0xb6>
 80093c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80093ca:	f240 80dd 	bls.w	8009588 <_printf_float+0x3a8>
 80093ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80093d2:	2200      	movs	r2, #0
 80093d4:	2300      	movs	r3, #0
 80093d6:	f7f7 fb97 	bl	8000b08 <__aeabi_dcmpeq>
 80093da:	2800      	cmp	r0, #0
 80093dc:	d033      	beq.n	8009446 <_printf_float+0x266>
 80093de:	4a37      	ldr	r2, [pc, #220]	@ (80094bc <_printf_float+0x2dc>)
 80093e0:	2301      	movs	r3, #1
 80093e2:	4631      	mov	r1, r6
 80093e4:	4628      	mov	r0, r5
 80093e6:	47b8      	blx	r7
 80093e8:	3001      	adds	r0, #1
 80093ea:	f43f af54 	beq.w	8009296 <_printf_float+0xb6>
 80093ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80093f2:	4543      	cmp	r3, r8
 80093f4:	db02      	blt.n	80093fc <_printf_float+0x21c>
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	07d8      	lsls	r0, r3, #31
 80093fa:	d50f      	bpl.n	800941c <_printf_float+0x23c>
 80093fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009400:	4631      	mov	r1, r6
 8009402:	4628      	mov	r0, r5
 8009404:	47b8      	blx	r7
 8009406:	3001      	adds	r0, #1
 8009408:	f43f af45 	beq.w	8009296 <_printf_float+0xb6>
 800940c:	f04f 0900 	mov.w	r9, #0
 8009410:	f108 38ff 	add.w	r8, r8, #4294967295
 8009414:	f104 0a1a 	add.w	sl, r4, #26
 8009418:	45c8      	cmp	r8, r9
 800941a:	dc09      	bgt.n	8009430 <_printf_float+0x250>
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	079b      	lsls	r3, r3, #30
 8009420:	f100 8103 	bmi.w	800962a <_printf_float+0x44a>
 8009424:	68e0      	ldr	r0, [r4, #12]
 8009426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009428:	4298      	cmp	r0, r3
 800942a:	bfb8      	it	lt
 800942c:	4618      	movlt	r0, r3
 800942e:	e734      	b.n	800929a <_printf_float+0xba>
 8009430:	2301      	movs	r3, #1
 8009432:	4652      	mov	r2, sl
 8009434:	4631      	mov	r1, r6
 8009436:	4628      	mov	r0, r5
 8009438:	47b8      	blx	r7
 800943a:	3001      	adds	r0, #1
 800943c:	f43f af2b 	beq.w	8009296 <_printf_float+0xb6>
 8009440:	f109 0901 	add.w	r9, r9, #1
 8009444:	e7e8      	b.n	8009418 <_printf_float+0x238>
 8009446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009448:	2b00      	cmp	r3, #0
 800944a:	dc39      	bgt.n	80094c0 <_printf_float+0x2e0>
 800944c:	4a1b      	ldr	r2, [pc, #108]	@ (80094bc <_printf_float+0x2dc>)
 800944e:	2301      	movs	r3, #1
 8009450:	4631      	mov	r1, r6
 8009452:	4628      	mov	r0, r5
 8009454:	47b8      	blx	r7
 8009456:	3001      	adds	r0, #1
 8009458:	f43f af1d 	beq.w	8009296 <_printf_float+0xb6>
 800945c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009460:	ea59 0303 	orrs.w	r3, r9, r3
 8009464:	d102      	bne.n	800946c <_printf_float+0x28c>
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	07d9      	lsls	r1, r3, #31
 800946a:	d5d7      	bpl.n	800941c <_printf_float+0x23c>
 800946c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009470:	4631      	mov	r1, r6
 8009472:	4628      	mov	r0, r5
 8009474:	47b8      	blx	r7
 8009476:	3001      	adds	r0, #1
 8009478:	f43f af0d 	beq.w	8009296 <_printf_float+0xb6>
 800947c:	f04f 0a00 	mov.w	sl, #0
 8009480:	f104 0b1a 	add.w	fp, r4, #26
 8009484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009486:	425b      	negs	r3, r3
 8009488:	4553      	cmp	r3, sl
 800948a:	dc01      	bgt.n	8009490 <_printf_float+0x2b0>
 800948c:	464b      	mov	r3, r9
 800948e:	e793      	b.n	80093b8 <_printf_float+0x1d8>
 8009490:	2301      	movs	r3, #1
 8009492:	465a      	mov	r2, fp
 8009494:	4631      	mov	r1, r6
 8009496:	4628      	mov	r0, r5
 8009498:	47b8      	blx	r7
 800949a:	3001      	adds	r0, #1
 800949c:	f43f aefb 	beq.w	8009296 <_printf_float+0xb6>
 80094a0:	f10a 0a01 	add.w	sl, sl, #1
 80094a4:	e7ee      	b.n	8009484 <_printf_float+0x2a4>
 80094a6:	bf00      	nop
 80094a8:	7fefffff 	.word	0x7fefffff
 80094ac:	0800bed8 	.word	0x0800bed8
 80094b0:	0800bed4 	.word	0x0800bed4
 80094b4:	0800bee0 	.word	0x0800bee0
 80094b8:	0800bedc 	.word	0x0800bedc
 80094bc:	0800bee4 	.word	0x0800bee4
 80094c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80094c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80094c6:	4553      	cmp	r3, sl
 80094c8:	bfa8      	it	ge
 80094ca:	4653      	movge	r3, sl
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	4699      	mov	r9, r3
 80094d0:	dc36      	bgt.n	8009540 <_printf_float+0x360>
 80094d2:	f04f 0b00 	mov.w	fp, #0
 80094d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094da:	f104 021a 	add.w	r2, r4, #26
 80094de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80094e0:	9306      	str	r3, [sp, #24]
 80094e2:	eba3 0309 	sub.w	r3, r3, r9
 80094e6:	455b      	cmp	r3, fp
 80094e8:	dc31      	bgt.n	800954e <_printf_float+0x36e>
 80094ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ec:	459a      	cmp	sl, r3
 80094ee:	dc3a      	bgt.n	8009566 <_printf_float+0x386>
 80094f0:	6823      	ldr	r3, [r4, #0]
 80094f2:	07da      	lsls	r2, r3, #31
 80094f4:	d437      	bmi.n	8009566 <_printf_float+0x386>
 80094f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094f8:	ebaa 0903 	sub.w	r9, sl, r3
 80094fc:	9b06      	ldr	r3, [sp, #24]
 80094fe:	ebaa 0303 	sub.w	r3, sl, r3
 8009502:	4599      	cmp	r9, r3
 8009504:	bfa8      	it	ge
 8009506:	4699      	movge	r9, r3
 8009508:	f1b9 0f00 	cmp.w	r9, #0
 800950c:	dc33      	bgt.n	8009576 <_printf_float+0x396>
 800950e:	f04f 0800 	mov.w	r8, #0
 8009512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009516:	f104 0b1a 	add.w	fp, r4, #26
 800951a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800951c:	ebaa 0303 	sub.w	r3, sl, r3
 8009520:	eba3 0309 	sub.w	r3, r3, r9
 8009524:	4543      	cmp	r3, r8
 8009526:	f77f af79 	ble.w	800941c <_printf_float+0x23c>
 800952a:	2301      	movs	r3, #1
 800952c:	465a      	mov	r2, fp
 800952e:	4631      	mov	r1, r6
 8009530:	4628      	mov	r0, r5
 8009532:	47b8      	blx	r7
 8009534:	3001      	adds	r0, #1
 8009536:	f43f aeae 	beq.w	8009296 <_printf_float+0xb6>
 800953a:	f108 0801 	add.w	r8, r8, #1
 800953e:	e7ec      	b.n	800951a <_printf_float+0x33a>
 8009540:	4642      	mov	r2, r8
 8009542:	4631      	mov	r1, r6
 8009544:	4628      	mov	r0, r5
 8009546:	47b8      	blx	r7
 8009548:	3001      	adds	r0, #1
 800954a:	d1c2      	bne.n	80094d2 <_printf_float+0x2f2>
 800954c:	e6a3      	b.n	8009296 <_printf_float+0xb6>
 800954e:	2301      	movs	r3, #1
 8009550:	4631      	mov	r1, r6
 8009552:	4628      	mov	r0, r5
 8009554:	9206      	str	r2, [sp, #24]
 8009556:	47b8      	blx	r7
 8009558:	3001      	adds	r0, #1
 800955a:	f43f ae9c 	beq.w	8009296 <_printf_float+0xb6>
 800955e:	9a06      	ldr	r2, [sp, #24]
 8009560:	f10b 0b01 	add.w	fp, fp, #1
 8009564:	e7bb      	b.n	80094de <_printf_float+0x2fe>
 8009566:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800956a:	4631      	mov	r1, r6
 800956c:	4628      	mov	r0, r5
 800956e:	47b8      	blx	r7
 8009570:	3001      	adds	r0, #1
 8009572:	d1c0      	bne.n	80094f6 <_printf_float+0x316>
 8009574:	e68f      	b.n	8009296 <_printf_float+0xb6>
 8009576:	9a06      	ldr	r2, [sp, #24]
 8009578:	464b      	mov	r3, r9
 800957a:	4442      	add	r2, r8
 800957c:	4631      	mov	r1, r6
 800957e:	4628      	mov	r0, r5
 8009580:	47b8      	blx	r7
 8009582:	3001      	adds	r0, #1
 8009584:	d1c3      	bne.n	800950e <_printf_float+0x32e>
 8009586:	e686      	b.n	8009296 <_printf_float+0xb6>
 8009588:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800958c:	f1ba 0f01 	cmp.w	sl, #1
 8009590:	dc01      	bgt.n	8009596 <_printf_float+0x3b6>
 8009592:	07db      	lsls	r3, r3, #31
 8009594:	d536      	bpl.n	8009604 <_printf_float+0x424>
 8009596:	2301      	movs	r3, #1
 8009598:	4642      	mov	r2, r8
 800959a:	4631      	mov	r1, r6
 800959c:	4628      	mov	r0, r5
 800959e:	47b8      	blx	r7
 80095a0:	3001      	adds	r0, #1
 80095a2:	f43f ae78 	beq.w	8009296 <_printf_float+0xb6>
 80095a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095aa:	4631      	mov	r1, r6
 80095ac:	4628      	mov	r0, r5
 80095ae:	47b8      	blx	r7
 80095b0:	3001      	adds	r0, #1
 80095b2:	f43f ae70 	beq.w	8009296 <_printf_float+0xb6>
 80095b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80095ba:	2200      	movs	r2, #0
 80095bc:	2300      	movs	r3, #0
 80095be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095c2:	f7f7 faa1 	bl	8000b08 <__aeabi_dcmpeq>
 80095c6:	b9c0      	cbnz	r0, 80095fa <_printf_float+0x41a>
 80095c8:	4653      	mov	r3, sl
 80095ca:	f108 0201 	add.w	r2, r8, #1
 80095ce:	4631      	mov	r1, r6
 80095d0:	4628      	mov	r0, r5
 80095d2:	47b8      	blx	r7
 80095d4:	3001      	adds	r0, #1
 80095d6:	d10c      	bne.n	80095f2 <_printf_float+0x412>
 80095d8:	e65d      	b.n	8009296 <_printf_float+0xb6>
 80095da:	2301      	movs	r3, #1
 80095dc:	465a      	mov	r2, fp
 80095de:	4631      	mov	r1, r6
 80095e0:	4628      	mov	r0, r5
 80095e2:	47b8      	blx	r7
 80095e4:	3001      	adds	r0, #1
 80095e6:	f43f ae56 	beq.w	8009296 <_printf_float+0xb6>
 80095ea:	f108 0801 	add.w	r8, r8, #1
 80095ee:	45d0      	cmp	r8, sl
 80095f0:	dbf3      	blt.n	80095da <_printf_float+0x3fa>
 80095f2:	464b      	mov	r3, r9
 80095f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80095f8:	e6df      	b.n	80093ba <_printf_float+0x1da>
 80095fa:	f04f 0800 	mov.w	r8, #0
 80095fe:	f104 0b1a 	add.w	fp, r4, #26
 8009602:	e7f4      	b.n	80095ee <_printf_float+0x40e>
 8009604:	2301      	movs	r3, #1
 8009606:	4642      	mov	r2, r8
 8009608:	e7e1      	b.n	80095ce <_printf_float+0x3ee>
 800960a:	2301      	movs	r3, #1
 800960c:	464a      	mov	r2, r9
 800960e:	4631      	mov	r1, r6
 8009610:	4628      	mov	r0, r5
 8009612:	47b8      	blx	r7
 8009614:	3001      	adds	r0, #1
 8009616:	f43f ae3e 	beq.w	8009296 <_printf_float+0xb6>
 800961a:	f108 0801 	add.w	r8, r8, #1
 800961e:	68e3      	ldr	r3, [r4, #12]
 8009620:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009622:	1a5b      	subs	r3, r3, r1
 8009624:	4543      	cmp	r3, r8
 8009626:	dcf0      	bgt.n	800960a <_printf_float+0x42a>
 8009628:	e6fc      	b.n	8009424 <_printf_float+0x244>
 800962a:	f04f 0800 	mov.w	r8, #0
 800962e:	f104 0919 	add.w	r9, r4, #25
 8009632:	e7f4      	b.n	800961e <_printf_float+0x43e>

08009634 <_printf_common>:
 8009634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009638:	4616      	mov	r6, r2
 800963a:	4698      	mov	r8, r3
 800963c:	688a      	ldr	r2, [r1, #8]
 800963e:	690b      	ldr	r3, [r1, #16]
 8009640:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009644:	4293      	cmp	r3, r2
 8009646:	bfb8      	it	lt
 8009648:	4613      	movlt	r3, r2
 800964a:	6033      	str	r3, [r6, #0]
 800964c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009650:	4607      	mov	r7, r0
 8009652:	460c      	mov	r4, r1
 8009654:	b10a      	cbz	r2, 800965a <_printf_common+0x26>
 8009656:	3301      	adds	r3, #1
 8009658:	6033      	str	r3, [r6, #0]
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	0699      	lsls	r1, r3, #26
 800965e:	bf42      	ittt	mi
 8009660:	6833      	ldrmi	r3, [r6, #0]
 8009662:	3302      	addmi	r3, #2
 8009664:	6033      	strmi	r3, [r6, #0]
 8009666:	6825      	ldr	r5, [r4, #0]
 8009668:	f015 0506 	ands.w	r5, r5, #6
 800966c:	d106      	bne.n	800967c <_printf_common+0x48>
 800966e:	f104 0a19 	add.w	sl, r4, #25
 8009672:	68e3      	ldr	r3, [r4, #12]
 8009674:	6832      	ldr	r2, [r6, #0]
 8009676:	1a9b      	subs	r3, r3, r2
 8009678:	42ab      	cmp	r3, r5
 800967a:	dc26      	bgt.n	80096ca <_printf_common+0x96>
 800967c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009680:	6822      	ldr	r2, [r4, #0]
 8009682:	3b00      	subs	r3, #0
 8009684:	bf18      	it	ne
 8009686:	2301      	movne	r3, #1
 8009688:	0692      	lsls	r2, r2, #26
 800968a:	d42b      	bmi.n	80096e4 <_printf_common+0xb0>
 800968c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009690:	4641      	mov	r1, r8
 8009692:	4638      	mov	r0, r7
 8009694:	47c8      	blx	r9
 8009696:	3001      	adds	r0, #1
 8009698:	d01e      	beq.n	80096d8 <_printf_common+0xa4>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	6922      	ldr	r2, [r4, #16]
 800969e:	f003 0306 	and.w	r3, r3, #6
 80096a2:	2b04      	cmp	r3, #4
 80096a4:	bf02      	ittt	eq
 80096a6:	68e5      	ldreq	r5, [r4, #12]
 80096a8:	6833      	ldreq	r3, [r6, #0]
 80096aa:	1aed      	subeq	r5, r5, r3
 80096ac:	68a3      	ldr	r3, [r4, #8]
 80096ae:	bf0c      	ite	eq
 80096b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096b4:	2500      	movne	r5, #0
 80096b6:	4293      	cmp	r3, r2
 80096b8:	bfc4      	itt	gt
 80096ba:	1a9b      	subgt	r3, r3, r2
 80096bc:	18ed      	addgt	r5, r5, r3
 80096be:	2600      	movs	r6, #0
 80096c0:	341a      	adds	r4, #26
 80096c2:	42b5      	cmp	r5, r6
 80096c4:	d11a      	bne.n	80096fc <_printf_common+0xc8>
 80096c6:	2000      	movs	r0, #0
 80096c8:	e008      	b.n	80096dc <_printf_common+0xa8>
 80096ca:	2301      	movs	r3, #1
 80096cc:	4652      	mov	r2, sl
 80096ce:	4641      	mov	r1, r8
 80096d0:	4638      	mov	r0, r7
 80096d2:	47c8      	blx	r9
 80096d4:	3001      	adds	r0, #1
 80096d6:	d103      	bne.n	80096e0 <_printf_common+0xac>
 80096d8:	f04f 30ff 	mov.w	r0, #4294967295
 80096dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e0:	3501      	adds	r5, #1
 80096e2:	e7c6      	b.n	8009672 <_printf_common+0x3e>
 80096e4:	18e1      	adds	r1, r4, r3
 80096e6:	1c5a      	adds	r2, r3, #1
 80096e8:	2030      	movs	r0, #48	@ 0x30
 80096ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80096ee:	4422      	add	r2, r4
 80096f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80096f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80096f8:	3302      	adds	r3, #2
 80096fa:	e7c7      	b.n	800968c <_printf_common+0x58>
 80096fc:	2301      	movs	r3, #1
 80096fe:	4622      	mov	r2, r4
 8009700:	4641      	mov	r1, r8
 8009702:	4638      	mov	r0, r7
 8009704:	47c8      	blx	r9
 8009706:	3001      	adds	r0, #1
 8009708:	d0e6      	beq.n	80096d8 <_printf_common+0xa4>
 800970a:	3601      	adds	r6, #1
 800970c:	e7d9      	b.n	80096c2 <_printf_common+0x8e>
	...

08009710 <_printf_i>:
 8009710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009714:	7e0f      	ldrb	r7, [r1, #24]
 8009716:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009718:	2f78      	cmp	r7, #120	@ 0x78
 800971a:	4691      	mov	r9, r2
 800971c:	4680      	mov	r8, r0
 800971e:	460c      	mov	r4, r1
 8009720:	469a      	mov	sl, r3
 8009722:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009726:	d807      	bhi.n	8009738 <_printf_i+0x28>
 8009728:	2f62      	cmp	r7, #98	@ 0x62
 800972a:	d80a      	bhi.n	8009742 <_printf_i+0x32>
 800972c:	2f00      	cmp	r7, #0
 800972e:	f000 80d1 	beq.w	80098d4 <_printf_i+0x1c4>
 8009732:	2f58      	cmp	r7, #88	@ 0x58
 8009734:	f000 80b8 	beq.w	80098a8 <_printf_i+0x198>
 8009738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800973c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009740:	e03a      	b.n	80097b8 <_printf_i+0xa8>
 8009742:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009746:	2b15      	cmp	r3, #21
 8009748:	d8f6      	bhi.n	8009738 <_printf_i+0x28>
 800974a:	a101      	add	r1, pc, #4	@ (adr r1, 8009750 <_printf_i+0x40>)
 800974c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009750:	080097a9 	.word	0x080097a9
 8009754:	080097bd 	.word	0x080097bd
 8009758:	08009739 	.word	0x08009739
 800975c:	08009739 	.word	0x08009739
 8009760:	08009739 	.word	0x08009739
 8009764:	08009739 	.word	0x08009739
 8009768:	080097bd 	.word	0x080097bd
 800976c:	08009739 	.word	0x08009739
 8009770:	08009739 	.word	0x08009739
 8009774:	08009739 	.word	0x08009739
 8009778:	08009739 	.word	0x08009739
 800977c:	080098bb 	.word	0x080098bb
 8009780:	080097e7 	.word	0x080097e7
 8009784:	08009875 	.word	0x08009875
 8009788:	08009739 	.word	0x08009739
 800978c:	08009739 	.word	0x08009739
 8009790:	080098dd 	.word	0x080098dd
 8009794:	08009739 	.word	0x08009739
 8009798:	080097e7 	.word	0x080097e7
 800979c:	08009739 	.word	0x08009739
 80097a0:	08009739 	.word	0x08009739
 80097a4:	0800987d 	.word	0x0800987d
 80097a8:	6833      	ldr	r3, [r6, #0]
 80097aa:	1d1a      	adds	r2, r3, #4
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6032      	str	r2, [r6, #0]
 80097b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80097b8:	2301      	movs	r3, #1
 80097ba:	e09c      	b.n	80098f6 <_printf_i+0x1e6>
 80097bc:	6833      	ldr	r3, [r6, #0]
 80097be:	6820      	ldr	r0, [r4, #0]
 80097c0:	1d19      	adds	r1, r3, #4
 80097c2:	6031      	str	r1, [r6, #0]
 80097c4:	0606      	lsls	r6, r0, #24
 80097c6:	d501      	bpl.n	80097cc <_printf_i+0xbc>
 80097c8:	681d      	ldr	r5, [r3, #0]
 80097ca:	e003      	b.n	80097d4 <_printf_i+0xc4>
 80097cc:	0645      	lsls	r5, r0, #25
 80097ce:	d5fb      	bpl.n	80097c8 <_printf_i+0xb8>
 80097d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80097d4:	2d00      	cmp	r5, #0
 80097d6:	da03      	bge.n	80097e0 <_printf_i+0xd0>
 80097d8:	232d      	movs	r3, #45	@ 0x2d
 80097da:	426d      	negs	r5, r5
 80097dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097e0:	4858      	ldr	r0, [pc, #352]	@ (8009944 <_printf_i+0x234>)
 80097e2:	230a      	movs	r3, #10
 80097e4:	e011      	b.n	800980a <_printf_i+0xfa>
 80097e6:	6821      	ldr	r1, [r4, #0]
 80097e8:	6833      	ldr	r3, [r6, #0]
 80097ea:	0608      	lsls	r0, r1, #24
 80097ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80097f0:	d402      	bmi.n	80097f8 <_printf_i+0xe8>
 80097f2:	0649      	lsls	r1, r1, #25
 80097f4:	bf48      	it	mi
 80097f6:	b2ad      	uxthmi	r5, r5
 80097f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80097fa:	4852      	ldr	r0, [pc, #328]	@ (8009944 <_printf_i+0x234>)
 80097fc:	6033      	str	r3, [r6, #0]
 80097fe:	bf14      	ite	ne
 8009800:	230a      	movne	r3, #10
 8009802:	2308      	moveq	r3, #8
 8009804:	2100      	movs	r1, #0
 8009806:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800980a:	6866      	ldr	r6, [r4, #4]
 800980c:	60a6      	str	r6, [r4, #8]
 800980e:	2e00      	cmp	r6, #0
 8009810:	db05      	blt.n	800981e <_printf_i+0x10e>
 8009812:	6821      	ldr	r1, [r4, #0]
 8009814:	432e      	orrs	r6, r5
 8009816:	f021 0104 	bic.w	r1, r1, #4
 800981a:	6021      	str	r1, [r4, #0]
 800981c:	d04b      	beq.n	80098b6 <_printf_i+0x1a6>
 800981e:	4616      	mov	r6, r2
 8009820:	fbb5 f1f3 	udiv	r1, r5, r3
 8009824:	fb03 5711 	mls	r7, r3, r1, r5
 8009828:	5dc7      	ldrb	r7, [r0, r7]
 800982a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800982e:	462f      	mov	r7, r5
 8009830:	42bb      	cmp	r3, r7
 8009832:	460d      	mov	r5, r1
 8009834:	d9f4      	bls.n	8009820 <_printf_i+0x110>
 8009836:	2b08      	cmp	r3, #8
 8009838:	d10b      	bne.n	8009852 <_printf_i+0x142>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	07df      	lsls	r7, r3, #31
 800983e:	d508      	bpl.n	8009852 <_printf_i+0x142>
 8009840:	6923      	ldr	r3, [r4, #16]
 8009842:	6861      	ldr	r1, [r4, #4]
 8009844:	4299      	cmp	r1, r3
 8009846:	bfde      	ittt	le
 8009848:	2330      	movle	r3, #48	@ 0x30
 800984a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800984e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009852:	1b92      	subs	r2, r2, r6
 8009854:	6122      	str	r2, [r4, #16]
 8009856:	f8cd a000 	str.w	sl, [sp]
 800985a:	464b      	mov	r3, r9
 800985c:	aa03      	add	r2, sp, #12
 800985e:	4621      	mov	r1, r4
 8009860:	4640      	mov	r0, r8
 8009862:	f7ff fee7 	bl	8009634 <_printf_common>
 8009866:	3001      	adds	r0, #1
 8009868:	d14a      	bne.n	8009900 <_printf_i+0x1f0>
 800986a:	f04f 30ff 	mov.w	r0, #4294967295
 800986e:	b004      	add	sp, #16
 8009870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009874:	6823      	ldr	r3, [r4, #0]
 8009876:	f043 0320 	orr.w	r3, r3, #32
 800987a:	6023      	str	r3, [r4, #0]
 800987c:	4832      	ldr	r0, [pc, #200]	@ (8009948 <_printf_i+0x238>)
 800987e:	2778      	movs	r7, #120	@ 0x78
 8009880:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009884:	6823      	ldr	r3, [r4, #0]
 8009886:	6831      	ldr	r1, [r6, #0]
 8009888:	061f      	lsls	r7, r3, #24
 800988a:	f851 5b04 	ldr.w	r5, [r1], #4
 800988e:	d402      	bmi.n	8009896 <_printf_i+0x186>
 8009890:	065f      	lsls	r7, r3, #25
 8009892:	bf48      	it	mi
 8009894:	b2ad      	uxthmi	r5, r5
 8009896:	6031      	str	r1, [r6, #0]
 8009898:	07d9      	lsls	r1, r3, #31
 800989a:	bf44      	itt	mi
 800989c:	f043 0320 	orrmi.w	r3, r3, #32
 80098a0:	6023      	strmi	r3, [r4, #0]
 80098a2:	b11d      	cbz	r5, 80098ac <_printf_i+0x19c>
 80098a4:	2310      	movs	r3, #16
 80098a6:	e7ad      	b.n	8009804 <_printf_i+0xf4>
 80098a8:	4826      	ldr	r0, [pc, #152]	@ (8009944 <_printf_i+0x234>)
 80098aa:	e7e9      	b.n	8009880 <_printf_i+0x170>
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	f023 0320 	bic.w	r3, r3, #32
 80098b2:	6023      	str	r3, [r4, #0]
 80098b4:	e7f6      	b.n	80098a4 <_printf_i+0x194>
 80098b6:	4616      	mov	r6, r2
 80098b8:	e7bd      	b.n	8009836 <_printf_i+0x126>
 80098ba:	6833      	ldr	r3, [r6, #0]
 80098bc:	6825      	ldr	r5, [r4, #0]
 80098be:	6961      	ldr	r1, [r4, #20]
 80098c0:	1d18      	adds	r0, r3, #4
 80098c2:	6030      	str	r0, [r6, #0]
 80098c4:	062e      	lsls	r6, r5, #24
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	d501      	bpl.n	80098ce <_printf_i+0x1be>
 80098ca:	6019      	str	r1, [r3, #0]
 80098cc:	e002      	b.n	80098d4 <_printf_i+0x1c4>
 80098ce:	0668      	lsls	r0, r5, #25
 80098d0:	d5fb      	bpl.n	80098ca <_printf_i+0x1ba>
 80098d2:	8019      	strh	r1, [r3, #0]
 80098d4:	2300      	movs	r3, #0
 80098d6:	6123      	str	r3, [r4, #16]
 80098d8:	4616      	mov	r6, r2
 80098da:	e7bc      	b.n	8009856 <_printf_i+0x146>
 80098dc:	6833      	ldr	r3, [r6, #0]
 80098de:	1d1a      	adds	r2, r3, #4
 80098e0:	6032      	str	r2, [r6, #0]
 80098e2:	681e      	ldr	r6, [r3, #0]
 80098e4:	6862      	ldr	r2, [r4, #4]
 80098e6:	2100      	movs	r1, #0
 80098e8:	4630      	mov	r0, r6
 80098ea:	f7f6 fc91 	bl	8000210 <memchr>
 80098ee:	b108      	cbz	r0, 80098f4 <_printf_i+0x1e4>
 80098f0:	1b80      	subs	r0, r0, r6
 80098f2:	6060      	str	r0, [r4, #4]
 80098f4:	6863      	ldr	r3, [r4, #4]
 80098f6:	6123      	str	r3, [r4, #16]
 80098f8:	2300      	movs	r3, #0
 80098fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098fe:	e7aa      	b.n	8009856 <_printf_i+0x146>
 8009900:	6923      	ldr	r3, [r4, #16]
 8009902:	4632      	mov	r2, r6
 8009904:	4649      	mov	r1, r9
 8009906:	4640      	mov	r0, r8
 8009908:	47d0      	blx	sl
 800990a:	3001      	adds	r0, #1
 800990c:	d0ad      	beq.n	800986a <_printf_i+0x15a>
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	079b      	lsls	r3, r3, #30
 8009912:	d413      	bmi.n	800993c <_printf_i+0x22c>
 8009914:	68e0      	ldr	r0, [r4, #12]
 8009916:	9b03      	ldr	r3, [sp, #12]
 8009918:	4298      	cmp	r0, r3
 800991a:	bfb8      	it	lt
 800991c:	4618      	movlt	r0, r3
 800991e:	e7a6      	b.n	800986e <_printf_i+0x15e>
 8009920:	2301      	movs	r3, #1
 8009922:	4632      	mov	r2, r6
 8009924:	4649      	mov	r1, r9
 8009926:	4640      	mov	r0, r8
 8009928:	47d0      	blx	sl
 800992a:	3001      	adds	r0, #1
 800992c:	d09d      	beq.n	800986a <_printf_i+0x15a>
 800992e:	3501      	adds	r5, #1
 8009930:	68e3      	ldr	r3, [r4, #12]
 8009932:	9903      	ldr	r1, [sp, #12]
 8009934:	1a5b      	subs	r3, r3, r1
 8009936:	42ab      	cmp	r3, r5
 8009938:	dcf2      	bgt.n	8009920 <_printf_i+0x210>
 800993a:	e7eb      	b.n	8009914 <_printf_i+0x204>
 800993c:	2500      	movs	r5, #0
 800993e:	f104 0619 	add.w	r6, r4, #25
 8009942:	e7f5      	b.n	8009930 <_printf_i+0x220>
 8009944:	0800bee6 	.word	0x0800bee6
 8009948:	0800bef7 	.word	0x0800bef7

0800994c <std>:
 800994c:	2300      	movs	r3, #0
 800994e:	b510      	push	{r4, lr}
 8009950:	4604      	mov	r4, r0
 8009952:	e9c0 3300 	strd	r3, r3, [r0]
 8009956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800995a:	6083      	str	r3, [r0, #8]
 800995c:	8181      	strh	r1, [r0, #12]
 800995e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009960:	81c2      	strh	r2, [r0, #14]
 8009962:	6183      	str	r3, [r0, #24]
 8009964:	4619      	mov	r1, r3
 8009966:	2208      	movs	r2, #8
 8009968:	305c      	adds	r0, #92	@ 0x5c
 800996a:	f000 f8f4 	bl	8009b56 <memset>
 800996e:	4b0d      	ldr	r3, [pc, #52]	@ (80099a4 <std+0x58>)
 8009970:	6263      	str	r3, [r4, #36]	@ 0x24
 8009972:	4b0d      	ldr	r3, [pc, #52]	@ (80099a8 <std+0x5c>)
 8009974:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009976:	4b0d      	ldr	r3, [pc, #52]	@ (80099ac <std+0x60>)
 8009978:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800997a:	4b0d      	ldr	r3, [pc, #52]	@ (80099b0 <std+0x64>)
 800997c:	6323      	str	r3, [r4, #48]	@ 0x30
 800997e:	4b0d      	ldr	r3, [pc, #52]	@ (80099b4 <std+0x68>)
 8009980:	6224      	str	r4, [r4, #32]
 8009982:	429c      	cmp	r4, r3
 8009984:	d006      	beq.n	8009994 <std+0x48>
 8009986:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800998a:	4294      	cmp	r4, r2
 800998c:	d002      	beq.n	8009994 <std+0x48>
 800998e:	33d0      	adds	r3, #208	@ 0xd0
 8009990:	429c      	cmp	r4, r3
 8009992:	d105      	bne.n	80099a0 <std+0x54>
 8009994:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800999c:	f000 b958 	b.w	8009c50 <__retarget_lock_init_recursive>
 80099a0:	bd10      	pop	{r4, pc}
 80099a2:	bf00      	nop
 80099a4:	08009ad1 	.word	0x08009ad1
 80099a8:	08009af3 	.word	0x08009af3
 80099ac:	08009b2b 	.word	0x08009b2b
 80099b0:	08009b4f 	.word	0x08009b4f
 80099b4:	20000cc0 	.word	0x20000cc0

080099b8 <stdio_exit_handler>:
 80099b8:	4a02      	ldr	r2, [pc, #8]	@ (80099c4 <stdio_exit_handler+0xc>)
 80099ba:	4903      	ldr	r1, [pc, #12]	@ (80099c8 <stdio_exit_handler+0x10>)
 80099bc:	4803      	ldr	r0, [pc, #12]	@ (80099cc <stdio_exit_handler+0x14>)
 80099be:	f000 b869 	b.w	8009a94 <_fwalk_sglue>
 80099c2:	bf00      	nop
 80099c4:	20000010 	.word	0x20000010
 80099c8:	0800b325 	.word	0x0800b325
 80099cc:	20000020 	.word	0x20000020

080099d0 <cleanup_stdio>:
 80099d0:	6841      	ldr	r1, [r0, #4]
 80099d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009a04 <cleanup_stdio+0x34>)
 80099d4:	4299      	cmp	r1, r3
 80099d6:	b510      	push	{r4, lr}
 80099d8:	4604      	mov	r4, r0
 80099da:	d001      	beq.n	80099e0 <cleanup_stdio+0x10>
 80099dc:	f001 fca2 	bl	800b324 <_fflush_r>
 80099e0:	68a1      	ldr	r1, [r4, #8]
 80099e2:	4b09      	ldr	r3, [pc, #36]	@ (8009a08 <cleanup_stdio+0x38>)
 80099e4:	4299      	cmp	r1, r3
 80099e6:	d002      	beq.n	80099ee <cleanup_stdio+0x1e>
 80099e8:	4620      	mov	r0, r4
 80099ea:	f001 fc9b 	bl	800b324 <_fflush_r>
 80099ee:	68e1      	ldr	r1, [r4, #12]
 80099f0:	4b06      	ldr	r3, [pc, #24]	@ (8009a0c <cleanup_stdio+0x3c>)
 80099f2:	4299      	cmp	r1, r3
 80099f4:	d004      	beq.n	8009a00 <cleanup_stdio+0x30>
 80099f6:	4620      	mov	r0, r4
 80099f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099fc:	f001 bc92 	b.w	800b324 <_fflush_r>
 8009a00:	bd10      	pop	{r4, pc}
 8009a02:	bf00      	nop
 8009a04:	20000cc0 	.word	0x20000cc0
 8009a08:	20000d28 	.word	0x20000d28
 8009a0c:	20000d90 	.word	0x20000d90

08009a10 <global_stdio_init.part.0>:
 8009a10:	b510      	push	{r4, lr}
 8009a12:	4b0b      	ldr	r3, [pc, #44]	@ (8009a40 <global_stdio_init.part.0+0x30>)
 8009a14:	4c0b      	ldr	r4, [pc, #44]	@ (8009a44 <global_stdio_init.part.0+0x34>)
 8009a16:	4a0c      	ldr	r2, [pc, #48]	@ (8009a48 <global_stdio_init.part.0+0x38>)
 8009a18:	601a      	str	r2, [r3, #0]
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2104      	movs	r1, #4
 8009a20:	f7ff ff94 	bl	800994c <std>
 8009a24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009a28:	2201      	movs	r2, #1
 8009a2a:	2109      	movs	r1, #9
 8009a2c:	f7ff ff8e 	bl	800994c <std>
 8009a30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009a34:	2202      	movs	r2, #2
 8009a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a3a:	2112      	movs	r1, #18
 8009a3c:	f7ff bf86 	b.w	800994c <std>
 8009a40:	20000df8 	.word	0x20000df8
 8009a44:	20000cc0 	.word	0x20000cc0
 8009a48:	080099b9 	.word	0x080099b9

08009a4c <__sfp_lock_acquire>:
 8009a4c:	4801      	ldr	r0, [pc, #4]	@ (8009a54 <__sfp_lock_acquire+0x8>)
 8009a4e:	f000 b900 	b.w	8009c52 <__retarget_lock_acquire_recursive>
 8009a52:	bf00      	nop
 8009a54:	20000e01 	.word	0x20000e01

08009a58 <__sfp_lock_release>:
 8009a58:	4801      	ldr	r0, [pc, #4]	@ (8009a60 <__sfp_lock_release+0x8>)
 8009a5a:	f000 b8fb 	b.w	8009c54 <__retarget_lock_release_recursive>
 8009a5e:	bf00      	nop
 8009a60:	20000e01 	.word	0x20000e01

08009a64 <__sinit>:
 8009a64:	b510      	push	{r4, lr}
 8009a66:	4604      	mov	r4, r0
 8009a68:	f7ff fff0 	bl	8009a4c <__sfp_lock_acquire>
 8009a6c:	6a23      	ldr	r3, [r4, #32]
 8009a6e:	b11b      	cbz	r3, 8009a78 <__sinit+0x14>
 8009a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a74:	f7ff bff0 	b.w	8009a58 <__sfp_lock_release>
 8009a78:	4b04      	ldr	r3, [pc, #16]	@ (8009a8c <__sinit+0x28>)
 8009a7a:	6223      	str	r3, [r4, #32]
 8009a7c:	4b04      	ldr	r3, [pc, #16]	@ (8009a90 <__sinit+0x2c>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1f5      	bne.n	8009a70 <__sinit+0xc>
 8009a84:	f7ff ffc4 	bl	8009a10 <global_stdio_init.part.0>
 8009a88:	e7f2      	b.n	8009a70 <__sinit+0xc>
 8009a8a:	bf00      	nop
 8009a8c:	080099d1 	.word	0x080099d1
 8009a90:	20000df8 	.word	0x20000df8

08009a94 <_fwalk_sglue>:
 8009a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a98:	4607      	mov	r7, r0
 8009a9a:	4688      	mov	r8, r1
 8009a9c:	4614      	mov	r4, r2
 8009a9e:	2600      	movs	r6, #0
 8009aa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009aa4:	f1b9 0901 	subs.w	r9, r9, #1
 8009aa8:	d505      	bpl.n	8009ab6 <_fwalk_sglue+0x22>
 8009aaa:	6824      	ldr	r4, [r4, #0]
 8009aac:	2c00      	cmp	r4, #0
 8009aae:	d1f7      	bne.n	8009aa0 <_fwalk_sglue+0xc>
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ab6:	89ab      	ldrh	r3, [r5, #12]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d907      	bls.n	8009acc <_fwalk_sglue+0x38>
 8009abc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	d003      	beq.n	8009acc <_fwalk_sglue+0x38>
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	4638      	mov	r0, r7
 8009ac8:	47c0      	blx	r8
 8009aca:	4306      	orrs	r6, r0
 8009acc:	3568      	adds	r5, #104	@ 0x68
 8009ace:	e7e9      	b.n	8009aa4 <_fwalk_sglue+0x10>

08009ad0 <__sread>:
 8009ad0:	b510      	push	{r4, lr}
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad8:	f000 f86c 	bl	8009bb4 <_read_r>
 8009adc:	2800      	cmp	r0, #0
 8009ade:	bfab      	itete	ge
 8009ae0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009ae2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ae4:	181b      	addge	r3, r3, r0
 8009ae6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009aea:	bfac      	ite	ge
 8009aec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009aee:	81a3      	strhlt	r3, [r4, #12]
 8009af0:	bd10      	pop	{r4, pc}

08009af2 <__swrite>:
 8009af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af6:	461f      	mov	r7, r3
 8009af8:	898b      	ldrh	r3, [r1, #12]
 8009afa:	05db      	lsls	r3, r3, #23
 8009afc:	4605      	mov	r5, r0
 8009afe:	460c      	mov	r4, r1
 8009b00:	4616      	mov	r6, r2
 8009b02:	d505      	bpl.n	8009b10 <__swrite+0x1e>
 8009b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b08:	2302      	movs	r3, #2
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f000 f840 	bl	8009b90 <_lseek_r>
 8009b10:	89a3      	ldrh	r3, [r4, #12]
 8009b12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b1a:	81a3      	strh	r3, [r4, #12]
 8009b1c:	4632      	mov	r2, r6
 8009b1e:	463b      	mov	r3, r7
 8009b20:	4628      	mov	r0, r5
 8009b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b26:	f000 b857 	b.w	8009bd8 <_write_r>

08009b2a <__sseek>:
 8009b2a:	b510      	push	{r4, lr}
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b32:	f000 f82d 	bl	8009b90 <_lseek_r>
 8009b36:	1c43      	adds	r3, r0, #1
 8009b38:	89a3      	ldrh	r3, [r4, #12]
 8009b3a:	bf15      	itete	ne
 8009b3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009b3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009b42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009b46:	81a3      	strheq	r3, [r4, #12]
 8009b48:	bf18      	it	ne
 8009b4a:	81a3      	strhne	r3, [r4, #12]
 8009b4c:	bd10      	pop	{r4, pc}

08009b4e <__sclose>:
 8009b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b52:	f000 b80d 	b.w	8009b70 <_close_r>

08009b56 <memset>:
 8009b56:	4402      	add	r2, r0
 8009b58:	4603      	mov	r3, r0
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d100      	bne.n	8009b60 <memset+0xa>
 8009b5e:	4770      	bx	lr
 8009b60:	f803 1b01 	strb.w	r1, [r3], #1
 8009b64:	e7f9      	b.n	8009b5a <memset+0x4>
	...

08009b68 <_localeconv_r>:
 8009b68:	4800      	ldr	r0, [pc, #0]	@ (8009b6c <_localeconv_r+0x4>)
 8009b6a:	4770      	bx	lr
 8009b6c:	2000015c 	.word	0x2000015c

08009b70 <_close_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	4d06      	ldr	r5, [pc, #24]	@ (8009b8c <_close_r+0x1c>)
 8009b74:	2300      	movs	r3, #0
 8009b76:	4604      	mov	r4, r0
 8009b78:	4608      	mov	r0, r1
 8009b7a:	602b      	str	r3, [r5, #0]
 8009b7c:	f7f9 fdea 	bl	8003754 <_close>
 8009b80:	1c43      	adds	r3, r0, #1
 8009b82:	d102      	bne.n	8009b8a <_close_r+0x1a>
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	b103      	cbz	r3, 8009b8a <_close_r+0x1a>
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	20000dfc 	.word	0x20000dfc

08009b90 <_lseek_r>:
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	4d07      	ldr	r5, [pc, #28]	@ (8009bb0 <_lseek_r+0x20>)
 8009b94:	4604      	mov	r4, r0
 8009b96:	4608      	mov	r0, r1
 8009b98:	4611      	mov	r1, r2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	602a      	str	r2, [r5, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f7f9 fdff 	bl	80037a2 <_lseek>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	d102      	bne.n	8009bae <_lseek_r+0x1e>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	b103      	cbz	r3, 8009bae <_lseek_r+0x1e>
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	20000dfc 	.word	0x20000dfc

08009bb4 <_read_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	4d07      	ldr	r5, [pc, #28]	@ (8009bd4 <_read_r+0x20>)
 8009bb8:	4604      	mov	r4, r0
 8009bba:	4608      	mov	r0, r1
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	602a      	str	r2, [r5, #0]
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	f7f9 fd8d 	bl	80036e2 <_read>
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	d102      	bne.n	8009bd2 <_read_r+0x1e>
 8009bcc:	682b      	ldr	r3, [r5, #0]
 8009bce:	b103      	cbz	r3, 8009bd2 <_read_r+0x1e>
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	bd38      	pop	{r3, r4, r5, pc}
 8009bd4:	20000dfc 	.word	0x20000dfc

08009bd8 <_write_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	4d07      	ldr	r5, [pc, #28]	@ (8009bf8 <_write_r+0x20>)
 8009bdc:	4604      	mov	r4, r0
 8009bde:	4608      	mov	r0, r1
 8009be0:	4611      	mov	r1, r2
 8009be2:	2200      	movs	r2, #0
 8009be4:	602a      	str	r2, [r5, #0]
 8009be6:	461a      	mov	r2, r3
 8009be8:	f7f9 fd98 	bl	800371c <_write>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	d102      	bne.n	8009bf6 <_write_r+0x1e>
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	b103      	cbz	r3, 8009bf6 <_write_r+0x1e>
 8009bf4:	6023      	str	r3, [r4, #0]
 8009bf6:	bd38      	pop	{r3, r4, r5, pc}
 8009bf8:	20000dfc 	.word	0x20000dfc

08009bfc <__errno>:
 8009bfc:	4b01      	ldr	r3, [pc, #4]	@ (8009c04 <__errno+0x8>)
 8009bfe:	6818      	ldr	r0, [r3, #0]
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	2000001c 	.word	0x2000001c

08009c08 <__libc_init_array>:
 8009c08:	b570      	push	{r4, r5, r6, lr}
 8009c0a:	4d0d      	ldr	r5, [pc, #52]	@ (8009c40 <__libc_init_array+0x38>)
 8009c0c:	4c0d      	ldr	r4, [pc, #52]	@ (8009c44 <__libc_init_array+0x3c>)
 8009c0e:	1b64      	subs	r4, r4, r5
 8009c10:	10a4      	asrs	r4, r4, #2
 8009c12:	2600      	movs	r6, #0
 8009c14:	42a6      	cmp	r6, r4
 8009c16:	d109      	bne.n	8009c2c <__libc_init_array+0x24>
 8009c18:	4d0b      	ldr	r5, [pc, #44]	@ (8009c48 <__libc_init_array+0x40>)
 8009c1a:	4c0c      	ldr	r4, [pc, #48]	@ (8009c4c <__libc_init_array+0x44>)
 8009c1c:	f001 ff18 	bl	800ba50 <_init>
 8009c20:	1b64      	subs	r4, r4, r5
 8009c22:	10a4      	asrs	r4, r4, #2
 8009c24:	2600      	movs	r6, #0
 8009c26:	42a6      	cmp	r6, r4
 8009c28:	d105      	bne.n	8009c36 <__libc_init_array+0x2e>
 8009c2a:	bd70      	pop	{r4, r5, r6, pc}
 8009c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c30:	4798      	blx	r3
 8009c32:	3601      	adds	r6, #1
 8009c34:	e7ee      	b.n	8009c14 <__libc_init_array+0xc>
 8009c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c3a:	4798      	blx	r3
 8009c3c:	3601      	adds	r6, #1
 8009c3e:	e7f2      	b.n	8009c26 <__libc_init_array+0x1e>
 8009c40:	0800c254 	.word	0x0800c254
 8009c44:	0800c254 	.word	0x0800c254
 8009c48:	0800c254 	.word	0x0800c254
 8009c4c:	0800c258 	.word	0x0800c258

08009c50 <__retarget_lock_init_recursive>:
 8009c50:	4770      	bx	lr

08009c52 <__retarget_lock_acquire_recursive>:
 8009c52:	4770      	bx	lr

08009c54 <__retarget_lock_release_recursive>:
 8009c54:	4770      	bx	lr

08009c56 <memcpy>:
 8009c56:	440a      	add	r2, r1
 8009c58:	4291      	cmp	r1, r2
 8009c5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c5e:	d100      	bne.n	8009c62 <memcpy+0xc>
 8009c60:	4770      	bx	lr
 8009c62:	b510      	push	{r4, lr}
 8009c64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c6c:	4291      	cmp	r1, r2
 8009c6e:	d1f9      	bne.n	8009c64 <memcpy+0xe>
 8009c70:	bd10      	pop	{r4, pc}

08009c72 <quorem>:
 8009c72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c76:	6903      	ldr	r3, [r0, #16]
 8009c78:	690c      	ldr	r4, [r1, #16]
 8009c7a:	42a3      	cmp	r3, r4
 8009c7c:	4607      	mov	r7, r0
 8009c7e:	db7e      	blt.n	8009d7e <quorem+0x10c>
 8009c80:	3c01      	subs	r4, #1
 8009c82:	f101 0814 	add.w	r8, r1, #20
 8009c86:	00a3      	lsls	r3, r4, #2
 8009c88:	f100 0514 	add.w	r5, r0, #20
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c92:	9301      	str	r3, [sp, #4]
 8009c94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ca4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ca8:	d32e      	bcc.n	8009d08 <quorem+0x96>
 8009caa:	f04f 0a00 	mov.w	sl, #0
 8009cae:	46c4      	mov	ip, r8
 8009cb0:	46ae      	mov	lr, r5
 8009cb2:	46d3      	mov	fp, sl
 8009cb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009cb8:	b298      	uxth	r0, r3
 8009cba:	fb06 a000 	mla	r0, r6, r0, sl
 8009cbe:	0c02      	lsrs	r2, r0, #16
 8009cc0:	0c1b      	lsrs	r3, r3, #16
 8009cc2:	fb06 2303 	mla	r3, r6, r3, r2
 8009cc6:	f8de 2000 	ldr.w	r2, [lr]
 8009cca:	b280      	uxth	r0, r0
 8009ccc:	b292      	uxth	r2, r2
 8009cce:	1a12      	subs	r2, r2, r0
 8009cd0:	445a      	add	r2, fp
 8009cd2:	f8de 0000 	ldr.w	r0, [lr]
 8009cd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009ce0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009ce4:	b292      	uxth	r2, r2
 8009ce6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009cea:	45e1      	cmp	r9, ip
 8009cec:	f84e 2b04 	str.w	r2, [lr], #4
 8009cf0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009cf4:	d2de      	bcs.n	8009cb4 <quorem+0x42>
 8009cf6:	9b00      	ldr	r3, [sp, #0]
 8009cf8:	58eb      	ldr	r3, [r5, r3]
 8009cfa:	b92b      	cbnz	r3, 8009d08 <quorem+0x96>
 8009cfc:	9b01      	ldr	r3, [sp, #4]
 8009cfe:	3b04      	subs	r3, #4
 8009d00:	429d      	cmp	r5, r3
 8009d02:	461a      	mov	r2, r3
 8009d04:	d32f      	bcc.n	8009d66 <quorem+0xf4>
 8009d06:	613c      	str	r4, [r7, #16]
 8009d08:	4638      	mov	r0, r7
 8009d0a:	f001 f97f 	bl	800b00c <__mcmp>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	db25      	blt.n	8009d5e <quorem+0xec>
 8009d12:	4629      	mov	r1, r5
 8009d14:	2000      	movs	r0, #0
 8009d16:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d1a:	f8d1 c000 	ldr.w	ip, [r1]
 8009d1e:	fa1f fe82 	uxth.w	lr, r2
 8009d22:	fa1f f38c 	uxth.w	r3, ip
 8009d26:	eba3 030e 	sub.w	r3, r3, lr
 8009d2a:	4403      	add	r3, r0
 8009d2c:	0c12      	lsrs	r2, r2, #16
 8009d2e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009d32:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d3c:	45c1      	cmp	r9, r8
 8009d3e:	f841 3b04 	str.w	r3, [r1], #4
 8009d42:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d46:	d2e6      	bcs.n	8009d16 <quorem+0xa4>
 8009d48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d50:	b922      	cbnz	r2, 8009d5c <quorem+0xea>
 8009d52:	3b04      	subs	r3, #4
 8009d54:	429d      	cmp	r5, r3
 8009d56:	461a      	mov	r2, r3
 8009d58:	d30b      	bcc.n	8009d72 <quorem+0x100>
 8009d5a:	613c      	str	r4, [r7, #16]
 8009d5c:	3601      	adds	r6, #1
 8009d5e:	4630      	mov	r0, r6
 8009d60:	b003      	add	sp, #12
 8009d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d66:	6812      	ldr	r2, [r2, #0]
 8009d68:	3b04      	subs	r3, #4
 8009d6a:	2a00      	cmp	r2, #0
 8009d6c:	d1cb      	bne.n	8009d06 <quorem+0x94>
 8009d6e:	3c01      	subs	r4, #1
 8009d70:	e7c6      	b.n	8009d00 <quorem+0x8e>
 8009d72:	6812      	ldr	r2, [r2, #0]
 8009d74:	3b04      	subs	r3, #4
 8009d76:	2a00      	cmp	r2, #0
 8009d78:	d1ef      	bne.n	8009d5a <quorem+0xe8>
 8009d7a:	3c01      	subs	r4, #1
 8009d7c:	e7ea      	b.n	8009d54 <quorem+0xe2>
 8009d7e:	2000      	movs	r0, #0
 8009d80:	e7ee      	b.n	8009d60 <quorem+0xee>
 8009d82:	0000      	movs	r0, r0
 8009d84:	0000      	movs	r0, r0
	...

08009d88 <_dtoa_r>:
 8009d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	69c7      	ldr	r7, [r0, #28]
 8009d8e:	b097      	sub	sp, #92	@ 0x5c
 8009d90:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009d94:	ec55 4b10 	vmov	r4, r5, d0
 8009d98:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009d9a:	9107      	str	r1, [sp, #28]
 8009d9c:	4681      	mov	r9, r0
 8009d9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009da0:	9311      	str	r3, [sp, #68]	@ 0x44
 8009da2:	b97f      	cbnz	r7, 8009dc4 <_dtoa_r+0x3c>
 8009da4:	2010      	movs	r0, #16
 8009da6:	f000 fe09 	bl	800a9bc <malloc>
 8009daa:	4602      	mov	r2, r0
 8009dac:	f8c9 001c 	str.w	r0, [r9, #28]
 8009db0:	b920      	cbnz	r0, 8009dbc <_dtoa_r+0x34>
 8009db2:	4ba9      	ldr	r3, [pc, #676]	@ (800a058 <_dtoa_r+0x2d0>)
 8009db4:	21ef      	movs	r1, #239	@ 0xef
 8009db6:	48a9      	ldr	r0, [pc, #676]	@ (800a05c <_dtoa_r+0x2d4>)
 8009db8:	f001 faec 	bl	800b394 <__assert_func>
 8009dbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009dc0:	6007      	str	r7, [r0, #0]
 8009dc2:	60c7      	str	r7, [r0, #12]
 8009dc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009dc8:	6819      	ldr	r1, [r3, #0]
 8009dca:	b159      	cbz	r1, 8009de4 <_dtoa_r+0x5c>
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	604a      	str	r2, [r1, #4]
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	4093      	lsls	r3, r2
 8009dd4:	608b      	str	r3, [r1, #8]
 8009dd6:	4648      	mov	r0, r9
 8009dd8:	f000 fee6 	bl	800aba8 <_Bfree>
 8009ddc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009de0:	2200      	movs	r2, #0
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	1e2b      	subs	r3, r5, #0
 8009de6:	bfb9      	ittee	lt
 8009de8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009dec:	9305      	strlt	r3, [sp, #20]
 8009dee:	2300      	movge	r3, #0
 8009df0:	6033      	strge	r3, [r6, #0]
 8009df2:	9f05      	ldr	r7, [sp, #20]
 8009df4:	4b9a      	ldr	r3, [pc, #616]	@ (800a060 <_dtoa_r+0x2d8>)
 8009df6:	bfbc      	itt	lt
 8009df8:	2201      	movlt	r2, #1
 8009dfa:	6032      	strlt	r2, [r6, #0]
 8009dfc:	43bb      	bics	r3, r7
 8009dfe:	d112      	bne.n	8009e26 <_dtoa_r+0x9e>
 8009e00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009e02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009e06:	6013      	str	r3, [r2, #0]
 8009e08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e0c:	4323      	orrs	r3, r4
 8009e0e:	f000 855a 	beq.w	800a8c6 <_dtoa_r+0xb3e>
 8009e12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e14:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a074 <_dtoa_r+0x2ec>
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 855c 	beq.w	800a8d6 <_dtoa_r+0xb4e>
 8009e1e:	f10a 0303 	add.w	r3, sl, #3
 8009e22:	f000 bd56 	b.w	800a8d2 <_dtoa_r+0xb4a>
 8009e26:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	ec51 0b17 	vmov	r0, r1, d7
 8009e30:	2300      	movs	r3, #0
 8009e32:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009e36:	f7f6 fe67 	bl	8000b08 <__aeabi_dcmpeq>
 8009e3a:	4680      	mov	r8, r0
 8009e3c:	b158      	cbz	r0, 8009e56 <_dtoa_r+0xce>
 8009e3e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009e40:	2301      	movs	r3, #1
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e46:	b113      	cbz	r3, 8009e4e <_dtoa_r+0xc6>
 8009e48:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009e4a:	4b86      	ldr	r3, [pc, #536]	@ (800a064 <_dtoa_r+0x2dc>)
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a078 <_dtoa_r+0x2f0>
 8009e52:	f000 bd40 	b.w	800a8d6 <_dtoa_r+0xb4e>
 8009e56:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009e5a:	aa14      	add	r2, sp, #80	@ 0x50
 8009e5c:	a915      	add	r1, sp, #84	@ 0x54
 8009e5e:	4648      	mov	r0, r9
 8009e60:	f001 f984 	bl	800b16c <__d2b>
 8009e64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009e68:	9002      	str	r0, [sp, #8]
 8009e6a:	2e00      	cmp	r6, #0
 8009e6c:	d078      	beq.n	8009f60 <_dtoa_r+0x1d8>
 8009e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e70:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009e7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009e80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009e84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009e88:	4619      	mov	r1, r3
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	4b76      	ldr	r3, [pc, #472]	@ (800a068 <_dtoa_r+0x2e0>)
 8009e8e:	f7f6 fa1b 	bl	80002c8 <__aeabi_dsub>
 8009e92:	a36b      	add	r3, pc, #428	@ (adr r3, 800a040 <_dtoa_r+0x2b8>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	f7f6 fbce 	bl	8000638 <__aeabi_dmul>
 8009e9c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a048 <_dtoa_r+0x2c0>)
 8009e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea2:	f7f6 fa13 	bl	80002cc <__adddf3>
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	460d      	mov	r5, r1
 8009eac:	f7f6 fb5a 	bl	8000564 <__aeabi_i2d>
 8009eb0:	a367      	add	r3, pc, #412	@ (adr r3, 800a050 <_dtoa_r+0x2c8>)
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f7f6 fbbf 	bl	8000638 <__aeabi_dmul>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	f7f6 fa03 	bl	80002cc <__adddf3>
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	460d      	mov	r5, r1
 8009eca:	f7f6 fe65 	bl	8000b98 <__aeabi_d2iz>
 8009ece:	2200      	movs	r2, #0
 8009ed0:	4607      	mov	r7, r0
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	f7f6 fe20 	bl	8000b1c <__aeabi_dcmplt>
 8009edc:	b140      	cbz	r0, 8009ef0 <_dtoa_r+0x168>
 8009ede:	4638      	mov	r0, r7
 8009ee0:	f7f6 fb40 	bl	8000564 <__aeabi_i2d>
 8009ee4:	4622      	mov	r2, r4
 8009ee6:	462b      	mov	r3, r5
 8009ee8:	f7f6 fe0e 	bl	8000b08 <__aeabi_dcmpeq>
 8009eec:	b900      	cbnz	r0, 8009ef0 <_dtoa_r+0x168>
 8009eee:	3f01      	subs	r7, #1
 8009ef0:	2f16      	cmp	r7, #22
 8009ef2:	d852      	bhi.n	8009f9a <_dtoa_r+0x212>
 8009ef4:	4b5d      	ldr	r3, [pc, #372]	@ (800a06c <_dtoa_r+0x2e4>)
 8009ef6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009f02:	f7f6 fe0b 	bl	8000b1c <__aeabi_dcmplt>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d049      	beq.n	8009f9e <_dtoa_r+0x216>
 8009f0a:	3f01      	subs	r7, #1
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009f12:	1b9b      	subs	r3, r3, r6
 8009f14:	1e5a      	subs	r2, r3, #1
 8009f16:	bf45      	ittet	mi
 8009f18:	f1c3 0301 	rsbmi	r3, r3, #1
 8009f1c:	9300      	strmi	r3, [sp, #0]
 8009f1e:	2300      	movpl	r3, #0
 8009f20:	2300      	movmi	r3, #0
 8009f22:	9206      	str	r2, [sp, #24]
 8009f24:	bf54      	ite	pl
 8009f26:	9300      	strpl	r3, [sp, #0]
 8009f28:	9306      	strmi	r3, [sp, #24]
 8009f2a:	2f00      	cmp	r7, #0
 8009f2c:	db39      	blt.n	8009fa2 <_dtoa_r+0x21a>
 8009f2e:	9b06      	ldr	r3, [sp, #24]
 8009f30:	970d      	str	r7, [sp, #52]	@ 0x34
 8009f32:	443b      	add	r3, r7
 8009f34:	9306      	str	r3, [sp, #24]
 8009f36:	2300      	movs	r3, #0
 8009f38:	9308      	str	r3, [sp, #32]
 8009f3a:	9b07      	ldr	r3, [sp, #28]
 8009f3c:	2b09      	cmp	r3, #9
 8009f3e:	d863      	bhi.n	800a008 <_dtoa_r+0x280>
 8009f40:	2b05      	cmp	r3, #5
 8009f42:	bfc4      	itt	gt
 8009f44:	3b04      	subgt	r3, #4
 8009f46:	9307      	strgt	r3, [sp, #28]
 8009f48:	9b07      	ldr	r3, [sp, #28]
 8009f4a:	f1a3 0302 	sub.w	r3, r3, #2
 8009f4e:	bfcc      	ite	gt
 8009f50:	2400      	movgt	r4, #0
 8009f52:	2401      	movle	r4, #1
 8009f54:	2b03      	cmp	r3, #3
 8009f56:	d863      	bhi.n	800a020 <_dtoa_r+0x298>
 8009f58:	e8df f003 	tbb	[pc, r3]
 8009f5c:	2b375452 	.word	0x2b375452
 8009f60:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009f64:	441e      	add	r6, r3
 8009f66:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009f6a:	2b20      	cmp	r3, #32
 8009f6c:	bfc1      	itttt	gt
 8009f6e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009f72:	409f      	lslgt	r7, r3
 8009f74:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009f78:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009f7c:	bfd6      	itet	le
 8009f7e:	f1c3 0320 	rsble	r3, r3, #32
 8009f82:	ea47 0003 	orrgt.w	r0, r7, r3
 8009f86:	fa04 f003 	lslle.w	r0, r4, r3
 8009f8a:	f7f6 fadb 	bl	8000544 <__aeabi_ui2d>
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009f94:	3e01      	subs	r6, #1
 8009f96:	9212      	str	r2, [sp, #72]	@ 0x48
 8009f98:	e776      	b.n	8009e88 <_dtoa_r+0x100>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e7b7      	b.n	8009f0e <_dtoa_r+0x186>
 8009f9e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009fa0:	e7b6      	b.n	8009f10 <_dtoa_r+0x188>
 8009fa2:	9b00      	ldr	r3, [sp, #0]
 8009fa4:	1bdb      	subs	r3, r3, r7
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	427b      	negs	r3, r7
 8009faa:	9308      	str	r3, [sp, #32]
 8009fac:	2300      	movs	r3, #0
 8009fae:	930d      	str	r3, [sp, #52]	@ 0x34
 8009fb0:	e7c3      	b.n	8009f3a <_dtoa_r+0x1b2>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009fb8:	eb07 0b03 	add.w	fp, r7, r3
 8009fbc:	f10b 0301 	add.w	r3, fp, #1
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	9303      	str	r3, [sp, #12]
 8009fc4:	bfb8      	it	lt
 8009fc6:	2301      	movlt	r3, #1
 8009fc8:	e006      	b.n	8009fd8 <_dtoa_r+0x250>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	dd28      	ble.n	800a026 <_dtoa_r+0x29e>
 8009fd4:	469b      	mov	fp, r3
 8009fd6:	9303      	str	r3, [sp, #12]
 8009fd8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009fdc:	2100      	movs	r1, #0
 8009fde:	2204      	movs	r2, #4
 8009fe0:	f102 0514 	add.w	r5, r2, #20
 8009fe4:	429d      	cmp	r5, r3
 8009fe6:	d926      	bls.n	800a036 <_dtoa_r+0x2ae>
 8009fe8:	6041      	str	r1, [r0, #4]
 8009fea:	4648      	mov	r0, r9
 8009fec:	f000 fd9c 	bl	800ab28 <_Balloc>
 8009ff0:	4682      	mov	sl, r0
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d142      	bne.n	800a07c <_dtoa_r+0x2f4>
 8009ff6:	4b1e      	ldr	r3, [pc, #120]	@ (800a070 <_dtoa_r+0x2e8>)
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	f240 11af 	movw	r1, #431	@ 0x1af
 8009ffe:	e6da      	b.n	8009db6 <_dtoa_r+0x2e>
 800a000:	2300      	movs	r3, #0
 800a002:	e7e3      	b.n	8009fcc <_dtoa_r+0x244>
 800a004:	2300      	movs	r3, #0
 800a006:	e7d5      	b.n	8009fb4 <_dtoa_r+0x22c>
 800a008:	2401      	movs	r4, #1
 800a00a:	2300      	movs	r3, #0
 800a00c:	9307      	str	r3, [sp, #28]
 800a00e:	9409      	str	r4, [sp, #36]	@ 0x24
 800a010:	f04f 3bff 	mov.w	fp, #4294967295
 800a014:	2200      	movs	r2, #0
 800a016:	f8cd b00c 	str.w	fp, [sp, #12]
 800a01a:	2312      	movs	r3, #18
 800a01c:	920c      	str	r2, [sp, #48]	@ 0x30
 800a01e:	e7db      	b.n	8009fd8 <_dtoa_r+0x250>
 800a020:	2301      	movs	r3, #1
 800a022:	9309      	str	r3, [sp, #36]	@ 0x24
 800a024:	e7f4      	b.n	800a010 <_dtoa_r+0x288>
 800a026:	f04f 0b01 	mov.w	fp, #1
 800a02a:	f8cd b00c 	str.w	fp, [sp, #12]
 800a02e:	465b      	mov	r3, fp
 800a030:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a034:	e7d0      	b.n	8009fd8 <_dtoa_r+0x250>
 800a036:	3101      	adds	r1, #1
 800a038:	0052      	lsls	r2, r2, #1
 800a03a:	e7d1      	b.n	8009fe0 <_dtoa_r+0x258>
 800a03c:	f3af 8000 	nop.w
 800a040:	636f4361 	.word	0x636f4361
 800a044:	3fd287a7 	.word	0x3fd287a7
 800a048:	8b60c8b3 	.word	0x8b60c8b3
 800a04c:	3fc68a28 	.word	0x3fc68a28
 800a050:	509f79fb 	.word	0x509f79fb
 800a054:	3fd34413 	.word	0x3fd34413
 800a058:	0800bf15 	.word	0x0800bf15
 800a05c:	0800bf2c 	.word	0x0800bf2c
 800a060:	7ff00000 	.word	0x7ff00000
 800a064:	0800bee5 	.word	0x0800bee5
 800a068:	3ff80000 	.word	0x3ff80000
 800a06c:	0800c080 	.word	0x0800c080
 800a070:	0800bf84 	.word	0x0800bf84
 800a074:	0800bf11 	.word	0x0800bf11
 800a078:	0800bee4 	.word	0x0800bee4
 800a07c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a080:	6018      	str	r0, [r3, #0]
 800a082:	9b03      	ldr	r3, [sp, #12]
 800a084:	2b0e      	cmp	r3, #14
 800a086:	f200 80a1 	bhi.w	800a1cc <_dtoa_r+0x444>
 800a08a:	2c00      	cmp	r4, #0
 800a08c:	f000 809e 	beq.w	800a1cc <_dtoa_r+0x444>
 800a090:	2f00      	cmp	r7, #0
 800a092:	dd33      	ble.n	800a0fc <_dtoa_r+0x374>
 800a094:	4b9c      	ldr	r3, [pc, #624]	@ (800a308 <_dtoa_r+0x580>)
 800a096:	f007 020f 	and.w	r2, r7, #15
 800a09a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a09e:	ed93 7b00 	vldr	d7, [r3]
 800a0a2:	05f8      	lsls	r0, r7, #23
 800a0a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a0a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a0ac:	d516      	bpl.n	800a0dc <_dtoa_r+0x354>
 800a0ae:	4b97      	ldr	r3, [pc, #604]	@ (800a30c <_dtoa_r+0x584>)
 800a0b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a0b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a0b8:	f7f6 fbe8 	bl	800088c <__aeabi_ddiv>
 800a0bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0c0:	f004 040f 	and.w	r4, r4, #15
 800a0c4:	2603      	movs	r6, #3
 800a0c6:	4d91      	ldr	r5, [pc, #580]	@ (800a30c <_dtoa_r+0x584>)
 800a0c8:	b954      	cbnz	r4, 800a0e0 <_dtoa_r+0x358>
 800a0ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a0ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0d2:	f7f6 fbdb 	bl	800088c <__aeabi_ddiv>
 800a0d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0da:	e028      	b.n	800a12e <_dtoa_r+0x3a6>
 800a0dc:	2602      	movs	r6, #2
 800a0de:	e7f2      	b.n	800a0c6 <_dtoa_r+0x33e>
 800a0e0:	07e1      	lsls	r1, r4, #31
 800a0e2:	d508      	bpl.n	800a0f6 <_dtoa_r+0x36e>
 800a0e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a0e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a0ec:	f7f6 faa4 	bl	8000638 <__aeabi_dmul>
 800a0f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a0f4:	3601      	adds	r6, #1
 800a0f6:	1064      	asrs	r4, r4, #1
 800a0f8:	3508      	adds	r5, #8
 800a0fa:	e7e5      	b.n	800a0c8 <_dtoa_r+0x340>
 800a0fc:	f000 80af 	beq.w	800a25e <_dtoa_r+0x4d6>
 800a100:	427c      	negs	r4, r7
 800a102:	4b81      	ldr	r3, [pc, #516]	@ (800a308 <_dtoa_r+0x580>)
 800a104:	4d81      	ldr	r5, [pc, #516]	@ (800a30c <_dtoa_r+0x584>)
 800a106:	f004 020f 	and.w	r2, r4, #15
 800a10a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a112:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a116:	f7f6 fa8f 	bl	8000638 <__aeabi_dmul>
 800a11a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a11e:	1124      	asrs	r4, r4, #4
 800a120:	2300      	movs	r3, #0
 800a122:	2602      	movs	r6, #2
 800a124:	2c00      	cmp	r4, #0
 800a126:	f040 808f 	bne.w	800a248 <_dtoa_r+0x4c0>
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1d3      	bne.n	800a0d6 <_dtoa_r+0x34e>
 800a12e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a130:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 8094 	beq.w	800a262 <_dtoa_r+0x4da>
 800a13a:	4b75      	ldr	r3, [pc, #468]	@ (800a310 <_dtoa_r+0x588>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	4620      	mov	r0, r4
 800a140:	4629      	mov	r1, r5
 800a142:	f7f6 fceb 	bl	8000b1c <__aeabi_dcmplt>
 800a146:	2800      	cmp	r0, #0
 800a148:	f000 808b 	beq.w	800a262 <_dtoa_r+0x4da>
 800a14c:	9b03      	ldr	r3, [sp, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f000 8087 	beq.w	800a262 <_dtoa_r+0x4da>
 800a154:	f1bb 0f00 	cmp.w	fp, #0
 800a158:	dd34      	ble.n	800a1c4 <_dtoa_r+0x43c>
 800a15a:	4620      	mov	r0, r4
 800a15c:	4b6d      	ldr	r3, [pc, #436]	@ (800a314 <_dtoa_r+0x58c>)
 800a15e:	2200      	movs	r2, #0
 800a160:	4629      	mov	r1, r5
 800a162:	f7f6 fa69 	bl	8000638 <__aeabi_dmul>
 800a166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a16a:	f107 38ff 	add.w	r8, r7, #4294967295
 800a16e:	3601      	adds	r6, #1
 800a170:	465c      	mov	r4, fp
 800a172:	4630      	mov	r0, r6
 800a174:	f7f6 f9f6 	bl	8000564 <__aeabi_i2d>
 800a178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a17c:	f7f6 fa5c 	bl	8000638 <__aeabi_dmul>
 800a180:	4b65      	ldr	r3, [pc, #404]	@ (800a318 <_dtoa_r+0x590>)
 800a182:	2200      	movs	r2, #0
 800a184:	f7f6 f8a2 	bl	80002cc <__adddf3>
 800a188:	4605      	mov	r5, r0
 800a18a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a18e:	2c00      	cmp	r4, #0
 800a190:	d16a      	bne.n	800a268 <_dtoa_r+0x4e0>
 800a192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a196:	4b61      	ldr	r3, [pc, #388]	@ (800a31c <_dtoa_r+0x594>)
 800a198:	2200      	movs	r2, #0
 800a19a:	f7f6 f895 	bl	80002c8 <__aeabi_dsub>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1a6:	462a      	mov	r2, r5
 800a1a8:	4633      	mov	r3, r6
 800a1aa:	f7f6 fcd5 	bl	8000b58 <__aeabi_dcmpgt>
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	f040 8298 	bne.w	800a6e4 <_dtoa_r+0x95c>
 800a1b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1b8:	462a      	mov	r2, r5
 800a1ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a1be:	f7f6 fcad 	bl	8000b1c <__aeabi_dcmplt>
 800a1c2:	bb38      	cbnz	r0, 800a214 <_dtoa_r+0x48c>
 800a1c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a1c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a1cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f2c0 8157 	blt.w	800a482 <_dtoa_r+0x6fa>
 800a1d4:	2f0e      	cmp	r7, #14
 800a1d6:	f300 8154 	bgt.w	800a482 <_dtoa_r+0x6fa>
 800a1da:	4b4b      	ldr	r3, [pc, #300]	@ (800a308 <_dtoa_r+0x580>)
 800a1dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a1e0:	ed93 7b00 	vldr	d7, [r3]
 800a1e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	ed8d 7b00 	vstr	d7, [sp]
 800a1ec:	f280 80e5 	bge.w	800a3ba <_dtoa_r+0x632>
 800a1f0:	9b03      	ldr	r3, [sp, #12]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f300 80e1 	bgt.w	800a3ba <_dtoa_r+0x632>
 800a1f8:	d10c      	bne.n	800a214 <_dtoa_r+0x48c>
 800a1fa:	4b48      	ldr	r3, [pc, #288]	@ (800a31c <_dtoa_r+0x594>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	ec51 0b17 	vmov	r0, r1, d7
 800a202:	f7f6 fa19 	bl	8000638 <__aeabi_dmul>
 800a206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a20a:	f7f6 fc9b 	bl	8000b44 <__aeabi_dcmpge>
 800a20e:	2800      	cmp	r0, #0
 800a210:	f000 8266 	beq.w	800a6e0 <_dtoa_r+0x958>
 800a214:	2400      	movs	r4, #0
 800a216:	4625      	mov	r5, r4
 800a218:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a21a:	4656      	mov	r6, sl
 800a21c:	ea6f 0803 	mvn.w	r8, r3
 800a220:	2700      	movs	r7, #0
 800a222:	4621      	mov	r1, r4
 800a224:	4648      	mov	r0, r9
 800a226:	f000 fcbf 	bl	800aba8 <_Bfree>
 800a22a:	2d00      	cmp	r5, #0
 800a22c:	f000 80bd 	beq.w	800a3aa <_dtoa_r+0x622>
 800a230:	b12f      	cbz	r7, 800a23e <_dtoa_r+0x4b6>
 800a232:	42af      	cmp	r7, r5
 800a234:	d003      	beq.n	800a23e <_dtoa_r+0x4b6>
 800a236:	4639      	mov	r1, r7
 800a238:	4648      	mov	r0, r9
 800a23a:	f000 fcb5 	bl	800aba8 <_Bfree>
 800a23e:	4629      	mov	r1, r5
 800a240:	4648      	mov	r0, r9
 800a242:	f000 fcb1 	bl	800aba8 <_Bfree>
 800a246:	e0b0      	b.n	800a3aa <_dtoa_r+0x622>
 800a248:	07e2      	lsls	r2, r4, #31
 800a24a:	d505      	bpl.n	800a258 <_dtoa_r+0x4d0>
 800a24c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a250:	f7f6 f9f2 	bl	8000638 <__aeabi_dmul>
 800a254:	3601      	adds	r6, #1
 800a256:	2301      	movs	r3, #1
 800a258:	1064      	asrs	r4, r4, #1
 800a25a:	3508      	adds	r5, #8
 800a25c:	e762      	b.n	800a124 <_dtoa_r+0x39c>
 800a25e:	2602      	movs	r6, #2
 800a260:	e765      	b.n	800a12e <_dtoa_r+0x3a6>
 800a262:	9c03      	ldr	r4, [sp, #12]
 800a264:	46b8      	mov	r8, r7
 800a266:	e784      	b.n	800a172 <_dtoa_r+0x3ea>
 800a268:	4b27      	ldr	r3, [pc, #156]	@ (800a308 <_dtoa_r+0x580>)
 800a26a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a26c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a270:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a274:	4454      	add	r4, sl
 800a276:	2900      	cmp	r1, #0
 800a278:	d054      	beq.n	800a324 <_dtoa_r+0x59c>
 800a27a:	4929      	ldr	r1, [pc, #164]	@ (800a320 <_dtoa_r+0x598>)
 800a27c:	2000      	movs	r0, #0
 800a27e:	f7f6 fb05 	bl	800088c <__aeabi_ddiv>
 800a282:	4633      	mov	r3, r6
 800a284:	462a      	mov	r2, r5
 800a286:	f7f6 f81f 	bl	80002c8 <__aeabi_dsub>
 800a28a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a28e:	4656      	mov	r6, sl
 800a290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a294:	f7f6 fc80 	bl	8000b98 <__aeabi_d2iz>
 800a298:	4605      	mov	r5, r0
 800a29a:	f7f6 f963 	bl	8000564 <__aeabi_i2d>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2a6:	f7f6 f80f 	bl	80002c8 <__aeabi_dsub>
 800a2aa:	3530      	adds	r5, #48	@ 0x30
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a2b4:	f806 5b01 	strb.w	r5, [r6], #1
 800a2b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a2bc:	f7f6 fc2e 	bl	8000b1c <__aeabi_dcmplt>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d172      	bne.n	800a3aa <_dtoa_r+0x622>
 800a2c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2c8:	4911      	ldr	r1, [pc, #68]	@ (800a310 <_dtoa_r+0x588>)
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	f7f5 fffc 	bl	80002c8 <__aeabi_dsub>
 800a2d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a2d4:	f7f6 fc22 	bl	8000b1c <__aeabi_dcmplt>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	f040 80b4 	bne.w	800a446 <_dtoa_r+0x6be>
 800a2de:	42a6      	cmp	r6, r4
 800a2e0:	f43f af70 	beq.w	800a1c4 <_dtoa_r+0x43c>
 800a2e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a314 <_dtoa_r+0x58c>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f7f6 f9a4 	bl	8000638 <__aeabi_dmul>
 800a2f0:	4b08      	ldr	r3, [pc, #32]	@ (800a314 <_dtoa_r+0x58c>)
 800a2f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2fc:	f7f6 f99c 	bl	8000638 <__aeabi_dmul>
 800a300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a304:	e7c4      	b.n	800a290 <_dtoa_r+0x508>
 800a306:	bf00      	nop
 800a308:	0800c080 	.word	0x0800c080
 800a30c:	0800c058 	.word	0x0800c058
 800a310:	3ff00000 	.word	0x3ff00000
 800a314:	40240000 	.word	0x40240000
 800a318:	401c0000 	.word	0x401c0000
 800a31c:	40140000 	.word	0x40140000
 800a320:	3fe00000 	.word	0x3fe00000
 800a324:	4631      	mov	r1, r6
 800a326:	4628      	mov	r0, r5
 800a328:	f7f6 f986 	bl	8000638 <__aeabi_dmul>
 800a32c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a330:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a332:	4656      	mov	r6, sl
 800a334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a338:	f7f6 fc2e 	bl	8000b98 <__aeabi_d2iz>
 800a33c:	4605      	mov	r5, r0
 800a33e:	f7f6 f911 	bl	8000564 <__aeabi_i2d>
 800a342:	4602      	mov	r2, r0
 800a344:	460b      	mov	r3, r1
 800a346:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a34a:	f7f5 ffbd 	bl	80002c8 <__aeabi_dsub>
 800a34e:	3530      	adds	r5, #48	@ 0x30
 800a350:	f806 5b01 	strb.w	r5, [r6], #1
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	42a6      	cmp	r6, r4
 800a35a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a35e:	f04f 0200 	mov.w	r2, #0
 800a362:	d124      	bne.n	800a3ae <_dtoa_r+0x626>
 800a364:	4baf      	ldr	r3, [pc, #700]	@ (800a624 <_dtoa_r+0x89c>)
 800a366:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a36a:	f7f5 ffaf 	bl	80002cc <__adddf3>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a376:	f7f6 fbef 	bl	8000b58 <__aeabi_dcmpgt>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d163      	bne.n	800a446 <_dtoa_r+0x6be>
 800a37e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a382:	49a8      	ldr	r1, [pc, #672]	@ (800a624 <_dtoa_r+0x89c>)
 800a384:	2000      	movs	r0, #0
 800a386:	f7f5 ff9f 	bl	80002c8 <__aeabi_dsub>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a392:	f7f6 fbc3 	bl	8000b1c <__aeabi_dcmplt>
 800a396:	2800      	cmp	r0, #0
 800a398:	f43f af14 	beq.w	800a1c4 <_dtoa_r+0x43c>
 800a39c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a39e:	1e73      	subs	r3, r6, #1
 800a3a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a3a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a3a6:	2b30      	cmp	r3, #48	@ 0x30
 800a3a8:	d0f8      	beq.n	800a39c <_dtoa_r+0x614>
 800a3aa:	4647      	mov	r7, r8
 800a3ac:	e03b      	b.n	800a426 <_dtoa_r+0x69e>
 800a3ae:	4b9e      	ldr	r3, [pc, #632]	@ (800a628 <_dtoa_r+0x8a0>)
 800a3b0:	f7f6 f942 	bl	8000638 <__aeabi_dmul>
 800a3b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3b8:	e7bc      	b.n	800a334 <_dtoa_r+0x5ac>
 800a3ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a3be:	4656      	mov	r6, sl
 800a3c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	f7f6 fa60 	bl	800088c <__aeabi_ddiv>
 800a3cc:	f7f6 fbe4 	bl	8000b98 <__aeabi_d2iz>
 800a3d0:	4680      	mov	r8, r0
 800a3d2:	f7f6 f8c7 	bl	8000564 <__aeabi_i2d>
 800a3d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3da:	f7f6 f92d 	bl	8000638 <__aeabi_dmul>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	4629      	mov	r1, r5
 800a3e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a3ea:	f7f5 ff6d 	bl	80002c8 <__aeabi_dsub>
 800a3ee:	f806 4b01 	strb.w	r4, [r6], #1
 800a3f2:	9d03      	ldr	r5, [sp, #12]
 800a3f4:	eba6 040a 	sub.w	r4, r6, sl
 800a3f8:	42a5      	cmp	r5, r4
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	d133      	bne.n	800a468 <_dtoa_r+0x6e0>
 800a400:	f7f5 ff64 	bl	80002cc <__adddf3>
 800a404:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a408:	4604      	mov	r4, r0
 800a40a:	460d      	mov	r5, r1
 800a40c:	f7f6 fba4 	bl	8000b58 <__aeabi_dcmpgt>
 800a410:	b9c0      	cbnz	r0, 800a444 <_dtoa_r+0x6bc>
 800a412:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a416:	4620      	mov	r0, r4
 800a418:	4629      	mov	r1, r5
 800a41a:	f7f6 fb75 	bl	8000b08 <__aeabi_dcmpeq>
 800a41e:	b110      	cbz	r0, 800a426 <_dtoa_r+0x69e>
 800a420:	f018 0f01 	tst.w	r8, #1
 800a424:	d10e      	bne.n	800a444 <_dtoa_r+0x6bc>
 800a426:	9902      	ldr	r1, [sp, #8]
 800a428:	4648      	mov	r0, r9
 800a42a:	f000 fbbd 	bl	800aba8 <_Bfree>
 800a42e:	2300      	movs	r3, #0
 800a430:	7033      	strb	r3, [r6, #0]
 800a432:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a434:	3701      	adds	r7, #1
 800a436:	601f      	str	r7, [r3, #0]
 800a438:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f000 824b 	beq.w	800a8d6 <_dtoa_r+0xb4e>
 800a440:	601e      	str	r6, [r3, #0]
 800a442:	e248      	b.n	800a8d6 <_dtoa_r+0xb4e>
 800a444:	46b8      	mov	r8, r7
 800a446:	4633      	mov	r3, r6
 800a448:	461e      	mov	r6, r3
 800a44a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a44e:	2a39      	cmp	r2, #57	@ 0x39
 800a450:	d106      	bne.n	800a460 <_dtoa_r+0x6d8>
 800a452:	459a      	cmp	sl, r3
 800a454:	d1f8      	bne.n	800a448 <_dtoa_r+0x6c0>
 800a456:	2230      	movs	r2, #48	@ 0x30
 800a458:	f108 0801 	add.w	r8, r8, #1
 800a45c:	f88a 2000 	strb.w	r2, [sl]
 800a460:	781a      	ldrb	r2, [r3, #0]
 800a462:	3201      	adds	r2, #1
 800a464:	701a      	strb	r2, [r3, #0]
 800a466:	e7a0      	b.n	800a3aa <_dtoa_r+0x622>
 800a468:	4b6f      	ldr	r3, [pc, #444]	@ (800a628 <_dtoa_r+0x8a0>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	f7f6 f8e4 	bl	8000638 <__aeabi_dmul>
 800a470:	2200      	movs	r2, #0
 800a472:	2300      	movs	r3, #0
 800a474:	4604      	mov	r4, r0
 800a476:	460d      	mov	r5, r1
 800a478:	f7f6 fb46 	bl	8000b08 <__aeabi_dcmpeq>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d09f      	beq.n	800a3c0 <_dtoa_r+0x638>
 800a480:	e7d1      	b.n	800a426 <_dtoa_r+0x69e>
 800a482:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a484:	2a00      	cmp	r2, #0
 800a486:	f000 80ea 	beq.w	800a65e <_dtoa_r+0x8d6>
 800a48a:	9a07      	ldr	r2, [sp, #28]
 800a48c:	2a01      	cmp	r2, #1
 800a48e:	f300 80cd 	bgt.w	800a62c <_dtoa_r+0x8a4>
 800a492:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a494:	2a00      	cmp	r2, #0
 800a496:	f000 80c1 	beq.w	800a61c <_dtoa_r+0x894>
 800a49a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a49e:	9c08      	ldr	r4, [sp, #32]
 800a4a0:	9e00      	ldr	r6, [sp, #0]
 800a4a2:	9a00      	ldr	r2, [sp, #0]
 800a4a4:	441a      	add	r2, r3
 800a4a6:	9200      	str	r2, [sp, #0]
 800a4a8:	9a06      	ldr	r2, [sp, #24]
 800a4aa:	2101      	movs	r1, #1
 800a4ac:	441a      	add	r2, r3
 800a4ae:	4648      	mov	r0, r9
 800a4b0:	9206      	str	r2, [sp, #24]
 800a4b2:	f000 fc2d 	bl	800ad10 <__i2b>
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	b166      	cbz	r6, 800a4d4 <_dtoa_r+0x74c>
 800a4ba:	9b06      	ldr	r3, [sp, #24]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	dd09      	ble.n	800a4d4 <_dtoa_r+0x74c>
 800a4c0:	42b3      	cmp	r3, r6
 800a4c2:	9a00      	ldr	r2, [sp, #0]
 800a4c4:	bfa8      	it	ge
 800a4c6:	4633      	movge	r3, r6
 800a4c8:	1ad2      	subs	r2, r2, r3
 800a4ca:	9200      	str	r2, [sp, #0]
 800a4cc:	9a06      	ldr	r2, [sp, #24]
 800a4ce:	1af6      	subs	r6, r6, r3
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	9306      	str	r3, [sp, #24]
 800a4d4:	9b08      	ldr	r3, [sp, #32]
 800a4d6:	b30b      	cbz	r3, 800a51c <_dtoa_r+0x794>
 800a4d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f000 80c6 	beq.w	800a66c <_dtoa_r+0x8e4>
 800a4e0:	2c00      	cmp	r4, #0
 800a4e2:	f000 80c0 	beq.w	800a666 <_dtoa_r+0x8de>
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	4622      	mov	r2, r4
 800a4ea:	4648      	mov	r0, r9
 800a4ec:	f000 fcc8 	bl	800ae80 <__pow5mult>
 800a4f0:	9a02      	ldr	r2, [sp, #8]
 800a4f2:	4601      	mov	r1, r0
 800a4f4:	4605      	mov	r5, r0
 800a4f6:	4648      	mov	r0, r9
 800a4f8:	f000 fc20 	bl	800ad3c <__multiply>
 800a4fc:	9902      	ldr	r1, [sp, #8]
 800a4fe:	4680      	mov	r8, r0
 800a500:	4648      	mov	r0, r9
 800a502:	f000 fb51 	bl	800aba8 <_Bfree>
 800a506:	9b08      	ldr	r3, [sp, #32]
 800a508:	1b1b      	subs	r3, r3, r4
 800a50a:	9308      	str	r3, [sp, #32]
 800a50c:	f000 80b1 	beq.w	800a672 <_dtoa_r+0x8ea>
 800a510:	9a08      	ldr	r2, [sp, #32]
 800a512:	4641      	mov	r1, r8
 800a514:	4648      	mov	r0, r9
 800a516:	f000 fcb3 	bl	800ae80 <__pow5mult>
 800a51a:	9002      	str	r0, [sp, #8]
 800a51c:	2101      	movs	r1, #1
 800a51e:	4648      	mov	r0, r9
 800a520:	f000 fbf6 	bl	800ad10 <__i2b>
 800a524:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a526:	4604      	mov	r4, r0
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f000 81d8 	beq.w	800a8de <_dtoa_r+0xb56>
 800a52e:	461a      	mov	r2, r3
 800a530:	4601      	mov	r1, r0
 800a532:	4648      	mov	r0, r9
 800a534:	f000 fca4 	bl	800ae80 <__pow5mult>
 800a538:	9b07      	ldr	r3, [sp, #28]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	4604      	mov	r4, r0
 800a53e:	f300 809f 	bgt.w	800a680 <_dtoa_r+0x8f8>
 800a542:	9b04      	ldr	r3, [sp, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	f040 8097 	bne.w	800a678 <_dtoa_r+0x8f0>
 800a54a:	9b05      	ldr	r3, [sp, #20]
 800a54c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a550:	2b00      	cmp	r3, #0
 800a552:	f040 8093 	bne.w	800a67c <_dtoa_r+0x8f4>
 800a556:	9b05      	ldr	r3, [sp, #20]
 800a558:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a55c:	0d1b      	lsrs	r3, r3, #20
 800a55e:	051b      	lsls	r3, r3, #20
 800a560:	b133      	cbz	r3, 800a570 <_dtoa_r+0x7e8>
 800a562:	9b00      	ldr	r3, [sp, #0]
 800a564:	3301      	adds	r3, #1
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	9b06      	ldr	r3, [sp, #24]
 800a56a:	3301      	adds	r3, #1
 800a56c:	9306      	str	r3, [sp, #24]
 800a56e:	2301      	movs	r3, #1
 800a570:	9308      	str	r3, [sp, #32]
 800a572:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a574:	2b00      	cmp	r3, #0
 800a576:	f000 81b8 	beq.w	800a8ea <_dtoa_r+0xb62>
 800a57a:	6923      	ldr	r3, [r4, #16]
 800a57c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a580:	6918      	ldr	r0, [r3, #16]
 800a582:	f000 fb79 	bl	800ac78 <__hi0bits>
 800a586:	f1c0 0020 	rsb	r0, r0, #32
 800a58a:	9b06      	ldr	r3, [sp, #24]
 800a58c:	4418      	add	r0, r3
 800a58e:	f010 001f 	ands.w	r0, r0, #31
 800a592:	f000 8082 	beq.w	800a69a <_dtoa_r+0x912>
 800a596:	f1c0 0320 	rsb	r3, r0, #32
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	dd73      	ble.n	800a686 <_dtoa_r+0x8fe>
 800a59e:	9b00      	ldr	r3, [sp, #0]
 800a5a0:	f1c0 001c 	rsb	r0, r0, #28
 800a5a4:	4403      	add	r3, r0
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	9b06      	ldr	r3, [sp, #24]
 800a5aa:	4403      	add	r3, r0
 800a5ac:	4406      	add	r6, r0
 800a5ae:	9306      	str	r3, [sp, #24]
 800a5b0:	9b00      	ldr	r3, [sp, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	dd05      	ble.n	800a5c2 <_dtoa_r+0x83a>
 800a5b6:	9902      	ldr	r1, [sp, #8]
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	4648      	mov	r0, r9
 800a5bc:	f000 fcba 	bl	800af34 <__lshift>
 800a5c0:	9002      	str	r0, [sp, #8]
 800a5c2:	9b06      	ldr	r3, [sp, #24]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	dd05      	ble.n	800a5d4 <_dtoa_r+0x84c>
 800a5c8:	4621      	mov	r1, r4
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	4648      	mov	r0, r9
 800a5ce:	f000 fcb1 	bl	800af34 <__lshift>
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d061      	beq.n	800a69e <_dtoa_r+0x916>
 800a5da:	9802      	ldr	r0, [sp, #8]
 800a5dc:	4621      	mov	r1, r4
 800a5de:	f000 fd15 	bl	800b00c <__mcmp>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	da5b      	bge.n	800a69e <_dtoa_r+0x916>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	9902      	ldr	r1, [sp, #8]
 800a5ea:	220a      	movs	r2, #10
 800a5ec:	4648      	mov	r0, r9
 800a5ee:	f000 fafd 	bl	800abec <__multadd>
 800a5f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5f4:	9002      	str	r0, [sp, #8]
 800a5f6:	f107 38ff 	add.w	r8, r7, #4294967295
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f000 8177 	beq.w	800a8ee <_dtoa_r+0xb66>
 800a600:	4629      	mov	r1, r5
 800a602:	2300      	movs	r3, #0
 800a604:	220a      	movs	r2, #10
 800a606:	4648      	mov	r0, r9
 800a608:	f000 faf0 	bl	800abec <__multadd>
 800a60c:	f1bb 0f00 	cmp.w	fp, #0
 800a610:	4605      	mov	r5, r0
 800a612:	dc6f      	bgt.n	800a6f4 <_dtoa_r+0x96c>
 800a614:	9b07      	ldr	r3, [sp, #28]
 800a616:	2b02      	cmp	r3, #2
 800a618:	dc49      	bgt.n	800a6ae <_dtoa_r+0x926>
 800a61a:	e06b      	b.n	800a6f4 <_dtoa_r+0x96c>
 800a61c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a61e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a622:	e73c      	b.n	800a49e <_dtoa_r+0x716>
 800a624:	3fe00000 	.word	0x3fe00000
 800a628:	40240000 	.word	0x40240000
 800a62c:	9b03      	ldr	r3, [sp, #12]
 800a62e:	1e5c      	subs	r4, r3, #1
 800a630:	9b08      	ldr	r3, [sp, #32]
 800a632:	42a3      	cmp	r3, r4
 800a634:	db09      	blt.n	800a64a <_dtoa_r+0x8c2>
 800a636:	1b1c      	subs	r4, r3, r4
 800a638:	9b03      	ldr	r3, [sp, #12]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	f6bf af30 	bge.w	800a4a0 <_dtoa_r+0x718>
 800a640:	9b00      	ldr	r3, [sp, #0]
 800a642:	9a03      	ldr	r2, [sp, #12]
 800a644:	1a9e      	subs	r6, r3, r2
 800a646:	2300      	movs	r3, #0
 800a648:	e72b      	b.n	800a4a2 <_dtoa_r+0x71a>
 800a64a:	9b08      	ldr	r3, [sp, #32]
 800a64c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a64e:	9408      	str	r4, [sp, #32]
 800a650:	1ae3      	subs	r3, r4, r3
 800a652:	441a      	add	r2, r3
 800a654:	9e00      	ldr	r6, [sp, #0]
 800a656:	9b03      	ldr	r3, [sp, #12]
 800a658:	920d      	str	r2, [sp, #52]	@ 0x34
 800a65a:	2400      	movs	r4, #0
 800a65c:	e721      	b.n	800a4a2 <_dtoa_r+0x71a>
 800a65e:	9c08      	ldr	r4, [sp, #32]
 800a660:	9e00      	ldr	r6, [sp, #0]
 800a662:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a664:	e728      	b.n	800a4b8 <_dtoa_r+0x730>
 800a666:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a66a:	e751      	b.n	800a510 <_dtoa_r+0x788>
 800a66c:	9a08      	ldr	r2, [sp, #32]
 800a66e:	9902      	ldr	r1, [sp, #8]
 800a670:	e750      	b.n	800a514 <_dtoa_r+0x78c>
 800a672:	f8cd 8008 	str.w	r8, [sp, #8]
 800a676:	e751      	b.n	800a51c <_dtoa_r+0x794>
 800a678:	2300      	movs	r3, #0
 800a67a:	e779      	b.n	800a570 <_dtoa_r+0x7e8>
 800a67c:	9b04      	ldr	r3, [sp, #16]
 800a67e:	e777      	b.n	800a570 <_dtoa_r+0x7e8>
 800a680:	2300      	movs	r3, #0
 800a682:	9308      	str	r3, [sp, #32]
 800a684:	e779      	b.n	800a57a <_dtoa_r+0x7f2>
 800a686:	d093      	beq.n	800a5b0 <_dtoa_r+0x828>
 800a688:	9a00      	ldr	r2, [sp, #0]
 800a68a:	331c      	adds	r3, #28
 800a68c:	441a      	add	r2, r3
 800a68e:	9200      	str	r2, [sp, #0]
 800a690:	9a06      	ldr	r2, [sp, #24]
 800a692:	441a      	add	r2, r3
 800a694:	441e      	add	r6, r3
 800a696:	9206      	str	r2, [sp, #24]
 800a698:	e78a      	b.n	800a5b0 <_dtoa_r+0x828>
 800a69a:	4603      	mov	r3, r0
 800a69c:	e7f4      	b.n	800a688 <_dtoa_r+0x900>
 800a69e:	9b03      	ldr	r3, [sp, #12]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	46b8      	mov	r8, r7
 800a6a4:	dc20      	bgt.n	800a6e8 <_dtoa_r+0x960>
 800a6a6:	469b      	mov	fp, r3
 800a6a8:	9b07      	ldr	r3, [sp, #28]
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	dd1e      	ble.n	800a6ec <_dtoa_r+0x964>
 800a6ae:	f1bb 0f00 	cmp.w	fp, #0
 800a6b2:	f47f adb1 	bne.w	800a218 <_dtoa_r+0x490>
 800a6b6:	4621      	mov	r1, r4
 800a6b8:	465b      	mov	r3, fp
 800a6ba:	2205      	movs	r2, #5
 800a6bc:	4648      	mov	r0, r9
 800a6be:	f000 fa95 	bl	800abec <__multadd>
 800a6c2:	4601      	mov	r1, r0
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	9802      	ldr	r0, [sp, #8]
 800a6c8:	f000 fca0 	bl	800b00c <__mcmp>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	f77f ada3 	ble.w	800a218 <_dtoa_r+0x490>
 800a6d2:	4656      	mov	r6, sl
 800a6d4:	2331      	movs	r3, #49	@ 0x31
 800a6d6:	f806 3b01 	strb.w	r3, [r6], #1
 800a6da:	f108 0801 	add.w	r8, r8, #1
 800a6de:	e59f      	b.n	800a220 <_dtoa_r+0x498>
 800a6e0:	9c03      	ldr	r4, [sp, #12]
 800a6e2:	46b8      	mov	r8, r7
 800a6e4:	4625      	mov	r5, r4
 800a6e6:	e7f4      	b.n	800a6d2 <_dtoa_r+0x94a>
 800a6e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a6ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f000 8101 	beq.w	800a8f6 <_dtoa_r+0xb6e>
 800a6f4:	2e00      	cmp	r6, #0
 800a6f6:	dd05      	ble.n	800a704 <_dtoa_r+0x97c>
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	4632      	mov	r2, r6
 800a6fc:	4648      	mov	r0, r9
 800a6fe:	f000 fc19 	bl	800af34 <__lshift>
 800a702:	4605      	mov	r5, r0
 800a704:	9b08      	ldr	r3, [sp, #32]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d05c      	beq.n	800a7c4 <_dtoa_r+0xa3c>
 800a70a:	6869      	ldr	r1, [r5, #4]
 800a70c:	4648      	mov	r0, r9
 800a70e:	f000 fa0b 	bl	800ab28 <_Balloc>
 800a712:	4606      	mov	r6, r0
 800a714:	b928      	cbnz	r0, 800a722 <_dtoa_r+0x99a>
 800a716:	4b82      	ldr	r3, [pc, #520]	@ (800a920 <_dtoa_r+0xb98>)
 800a718:	4602      	mov	r2, r0
 800a71a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a71e:	f7ff bb4a 	b.w	8009db6 <_dtoa_r+0x2e>
 800a722:	692a      	ldr	r2, [r5, #16]
 800a724:	3202      	adds	r2, #2
 800a726:	0092      	lsls	r2, r2, #2
 800a728:	f105 010c 	add.w	r1, r5, #12
 800a72c:	300c      	adds	r0, #12
 800a72e:	f7ff fa92 	bl	8009c56 <memcpy>
 800a732:	2201      	movs	r2, #1
 800a734:	4631      	mov	r1, r6
 800a736:	4648      	mov	r0, r9
 800a738:	f000 fbfc 	bl	800af34 <__lshift>
 800a73c:	f10a 0301 	add.w	r3, sl, #1
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	eb0a 030b 	add.w	r3, sl, fp
 800a746:	9308      	str	r3, [sp, #32]
 800a748:	9b04      	ldr	r3, [sp, #16]
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	462f      	mov	r7, r5
 800a750:	9306      	str	r3, [sp, #24]
 800a752:	4605      	mov	r5, r0
 800a754:	9b00      	ldr	r3, [sp, #0]
 800a756:	9802      	ldr	r0, [sp, #8]
 800a758:	4621      	mov	r1, r4
 800a75a:	f103 3bff 	add.w	fp, r3, #4294967295
 800a75e:	f7ff fa88 	bl	8009c72 <quorem>
 800a762:	4603      	mov	r3, r0
 800a764:	3330      	adds	r3, #48	@ 0x30
 800a766:	9003      	str	r0, [sp, #12]
 800a768:	4639      	mov	r1, r7
 800a76a:	9802      	ldr	r0, [sp, #8]
 800a76c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a76e:	f000 fc4d 	bl	800b00c <__mcmp>
 800a772:	462a      	mov	r2, r5
 800a774:	9004      	str	r0, [sp, #16]
 800a776:	4621      	mov	r1, r4
 800a778:	4648      	mov	r0, r9
 800a77a:	f000 fc63 	bl	800b044 <__mdiff>
 800a77e:	68c2      	ldr	r2, [r0, #12]
 800a780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a782:	4606      	mov	r6, r0
 800a784:	bb02      	cbnz	r2, 800a7c8 <_dtoa_r+0xa40>
 800a786:	4601      	mov	r1, r0
 800a788:	9802      	ldr	r0, [sp, #8]
 800a78a:	f000 fc3f 	bl	800b00c <__mcmp>
 800a78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a790:	4602      	mov	r2, r0
 800a792:	4631      	mov	r1, r6
 800a794:	4648      	mov	r0, r9
 800a796:	920c      	str	r2, [sp, #48]	@ 0x30
 800a798:	9309      	str	r3, [sp, #36]	@ 0x24
 800a79a:	f000 fa05 	bl	800aba8 <_Bfree>
 800a79e:	9b07      	ldr	r3, [sp, #28]
 800a7a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a7a2:	9e00      	ldr	r6, [sp, #0]
 800a7a4:	ea42 0103 	orr.w	r1, r2, r3
 800a7a8:	9b06      	ldr	r3, [sp, #24]
 800a7aa:	4319      	orrs	r1, r3
 800a7ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ae:	d10d      	bne.n	800a7cc <_dtoa_r+0xa44>
 800a7b0:	2b39      	cmp	r3, #57	@ 0x39
 800a7b2:	d027      	beq.n	800a804 <_dtoa_r+0xa7c>
 800a7b4:	9a04      	ldr	r2, [sp, #16]
 800a7b6:	2a00      	cmp	r2, #0
 800a7b8:	dd01      	ble.n	800a7be <_dtoa_r+0xa36>
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	3331      	adds	r3, #49	@ 0x31
 800a7be:	f88b 3000 	strb.w	r3, [fp]
 800a7c2:	e52e      	b.n	800a222 <_dtoa_r+0x49a>
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	e7b9      	b.n	800a73c <_dtoa_r+0x9b4>
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	e7e2      	b.n	800a792 <_dtoa_r+0xa0a>
 800a7cc:	9904      	ldr	r1, [sp, #16]
 800a7ce:	2900      	cmp	r1, #0
 800a7d0:	db04      	blt.n	800a7dc <_dtoa_r+0xa54>
 800a7d2:	9807      	ldr	r0, [sp, #28]
 800a7d4:	4301      	orrs	r1, r0
 800a7d6:	9806      	ldr	r0, [sp, #24]
 800a7d8:	4301      	orrs	r1, r0
 800a7da:	d120      	bne.n	800a81e <_dtoa_r+0xa96>
 800a7dc:	2a00      	cmp	r2, #0
 800a7de:	ddee      	ble.n	800a7be <_dtoa_r+0xa36>
 800a7e0:	9902      	ldr	r1, [sp, #8]
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	4648      	mov	r0, r9
 800a7e8:	f000 fba4 	bl	800af34 <__lshift>
 800a7ec:	4621      	mov	r1, r4
 800a7ee:	9002      	str	r0, [sp, #8]
 800a7f0:	f000 fc0c 	bl	800b00c <__mcmp>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	9b00      	ldr	r3, [sp, #0]
 800a7f8:	dc02      	bgt.n	800a800 <_dtoa_r+0xa78>
 800a7fa:	d1e0      	bne.n	800a7be <_dtoa_r+0xa36>
 800a7fc:	07da      	lsls	r2, r3, #31
 800a7fe:	d5de      	bpl.n	800a7be <_dtoa_r+0xa36>
 800a800:	2b39      	cmp	r3, #57	@ 0x39
 800a802:	d1da      	bne.n	800a7ba <_dtoa_r+0xa32>
 800a804:	2339      	movs	r3, #57	@ 0x39
 800a806:	f88b 3000 	strb.w	r3, [fp]
 800a80a:	4633      	mov	r3, r6
 800a80c:	461e      	mov	r6, r3
 800a80e:	3b01      	subs	r3, #1
 800a810:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a814:	2a39      	cmp	r2, #57	@ 0x39
 800a816:	d04e      	beq.n	800a8b6 <_dtoa_r+0xb2e>
 800a818:	3201      	adds	r2, #1
 800a81a:	701a      	strb	r2, [r3, #0]
 800a81c:	e501      	b.n	800a222 <_dtoa_r+0x49a>
 800a81e:	2a00      	cmp	r2, #0
 800a820:	dd03      	ble.n	800a82a <_dtoa_r+0xaa2>
 800a822:	2b39      	cmp	r3, #57	@ 0x39
 800a824:	d0ee      	beq.n	800a804 <_dtoa_r+0xa7c>
 800a826:	3301      	adds	r3, #1
 800a828:	e7c9      	b.n	800a7be <_dtoa_r+0xa36>
 800a82a:	9a00      	ldr	r2, [sp, #0]
 800a82c:	9908      	ldr	r1, [sp, #32]
 800a82e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a832:	428a      	cmp	r2, r1
 800a834:	d028      	beq.n	800a888 <_dtoa_r+0xb00>
 800a836:	9902      	ldr	r1, [sp, #8]
 800a838:	2300      	movs	r3, #0
 800a83a:	220a      	movs	r2, #10
 800a83c:	4648      	mov	r0, r9
 800a83e:	f000 f9d5 	bl	800abec <__multadd>
 800a842:	42af      	cmp	r7, r5
 800a844:	9002      	str	r0, [sp, #8]
 800a846:	f04f 0300 	mov.w	r3, #0
 800a84a:	f04f 020a 	mov.w	r2, #10
 800a84e:	4639      	mov	r1, r7
 800a850:	4648      	mov	r0, r9
 800a852:	d107      	bne.n	800a864 <_dtoa_r+0xadc>
 800a854:	f000 f9ca 	bl	800abec <__multadd>
 800a858:	4607      	mov	r7, r0
 800a85a:	4605      	mov	r5, r0
 800a85c:	9b00      	ldr	r3, [sp, #0]
 800a85e:	3301      	adds	r3, #1
 800a860:	9300      	str	r3, [sp, #0]
 800a862:	e777      	b.n	800a754 <_dtoa_r+0x9cc>
 800a864:	f000 f9c2 	bl	800abec <__multadd>
 800a868:	4629      	mov	r1, r5
 800a86a:	4607      	mov	r7, r0
 800a86c:	2300      	movs	r3, #0
 800a86e:	220a      	movs	r2, #10
 800a870:	4648      	mov	r0, r9
 800a872:	f000 f9bb 	bl	800abec <__multadd>
 800a876:	4605      	mov	r5, r0
 800a878:	e7f0      	b.n	800a85c <_dtoa_r+0xad4>
 800a87a:	f1bb 0f00 	cmp.w	fp, #0
 800a87e:	bfcc      	ite	gt
 800a880:	465e      	movgt	r6, fp
 800a882:	2601      	movle	r6, #1
 800a884:	4456      	add	r6, sl
 800a886:	2700      	movs	r7, #0
 800a888:	9902      	ldr	r1, [sp, #8]
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	2201      	movs	r2, #1
 800a88e:	4648      	mov	r0, r9
 800a890:	f000 fb50 	bl	800af34 <__lshift>
 800a894:	4621      	mov	r1, r4
 800a896:	9002      	str	r0, [sp, #8]
 800a898:	f000 fbb8 	bl	800b00c <__mcmp>
 800a89c:	2800      	cmp	r0, #0
 800a89e:	dcb4      	bgt.n	800a80a <_dtoa_r+0xa82>
 800a8a0:	d102      	bne.n	800a8a8 <_dtoa_r+0xb20>
 800a8a2:	9b00      	ldr	r3, [sp, #0]
 800a8a4:	07db      	lsls	r3, r3, #31
 800a8a6:	d4b0      	bmi.n	800a80a <_dtoa_r+0xa82>
 800a8a8:	4633      	mov	r3, r6
 800a8aa:	461e      	mov	r6, r3
 800a8ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8b0:	2a30      	cmp	r2, #48	@ 0x30
 800a8b2:	d0fa      	beq.n	800a8aa <_dtoa_r+0xb22>
 800a8b4:	e4b5      	b.n	800a222 <_dtoa_r+0x49a>
 800a8b6:	459a      	cmp	sl, r3
 800a8b8:	d1a8      	bne.n	800a80c <_dtoa_r+0xa84>
 800a8ba:	2331      	movs	r3, #49	@ 0x31
 800a8bc:	f108 0801 	add.w	r8, r8, #1
 800a8c0:	f88a 3000 	strb.w	r3, [sl]
 800a8c4:	e4ad      	b.n	800a222 <_dtoa_r+0x49a>
 800a8c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a8c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a924 <_dtoa_r+0xb9c>
 800a8cc:	b11b      	cbz	r3, 800a8d6 <_dtoa_r+0xb4e>
 800a8ce:	f10a 0308 	add.w	r3, sl, #8
 800a8d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a8d4:	6013      	str	r3, [r2, #0]
 800a8d6:	4650      	mov	r0, sl
 800a8d8:	b017      	add	sp, #92	@ 0x5c
 800a8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8de:	9b07      	ldr	r3, [sp, #28]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	f77f ae2e 	ble.w	800a542 <_dtoa_r+0x7ba>
 800a8e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8e8:	9308      	str	r3, [sp, #32]
 800a8ea:	2001      	movs	r0, #1
 800a8ec:	e64d      	b.n	800a58a <_dtoa_r+0x802>
 800a8ee:	f1bb 0f00 	cmp.w	fp, #0
 800a8f2:	f77f aed9 	ble.w	800a6a8 <_dtoa_r+0x920>
 800a8f6:	4656      	mov	r6, sl
 800a8f8:	9802      	ldr	r0, [sp, #8]
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	f7ff f9b9 	bl	8009c72 <quorem>
 800a900:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a904:	f806 3b01 	strb.w	r3, [r6], #1
 800a908:	eba6 020a 	sub.w	r2, r6, sl
 800a90c:	4593      	cmp	fp, r2
 800a90e:	ddb4      	ble.n	800a87a <_dtoa_r+0xaf2>
 800a910:	9902      	ldr	r1, [sp, #8]
 800a912:	2300      	movs	r3, #0
 800a914:	220a      	movs	r2, #10
 800a916:	4648      	mov	r0, r9
 800a918:	f000 f968 	bl	800abec <__multadd>
 800a91c:	9002      	str	r0, [sp, #8]
 800a91e:	e7eb      	b.n	800a8f8 <_dtoa_r+0xb70>
 800a920:	0800bf84 	.word	0x0800bf84
 800a924:	0800bf08 	.word	0x0800bf08

0800a928 <_free_r>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4605      	mov	r5, r0
 800a92c:	2900      	cmp	r1, #0
 800a92e:	d041      	beq.n	800a9b4 <_free_r+0x8c>
 800a930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a934:	1f0c      	subs	r4, r1, #4
 800a936:	2b00      	cmp	r3, #0
 800a938:	bfb8      	it	lt
 800a93a:	18e4      	addlt	r4, r4, r3
 800a93c:	f000 f8e8 	bl	800ab10 <__malloc_lock>
 800a940:	4a1d      	ldr	r2, [pc, #116]	@ (800a9b8 <_free_r+0x90>)
 800a942:	6813      	ldr	r3, [r2, #0]
 800a944:	b933      	cbnz	r3, 800a954 <_free_r+0x2c>
 800a946:	6063      	str	r3, [r4, #4]
 800a948:	6014      	str	r4, [r2, #0]
 800a94a:	4628      	mov	r0, r5
 800a94c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a950:	f000 b8e4 	b.w	800ab1c <__malloc_unlock>
 800a954:	42a3      	cmp	r3, r4
 800a956:	d908      	bls.n	800a96a <_free_r+0x42>
 800a958:	6820      	ldr	r0, [r4, #0]
 800a95a:	1821      	adds	r1, r4, r0
 800a95c:	428b      	cmp	r3, r1
 800a95e:	bf01      	itttt	eq
 800a960:	6819      	ldreq	r1, [r3, #0]
 800a962:	685b      	ldreq	r3, [r3, #4]
 800a964:	1809      	addeq	r1, r1, r0
 800a966:	6021      	streq	r1, [r4, #0]
 800a968:	e7ed      	b.n	800a946 <_free_r+0x1e>
 800a96a:	461a      	mov	r2, r3
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	b10b      	cbz	r3, 800a974 <_free_r+0x4c>
 800a970:	42a3      	cmp	r3, r4
 800a972:	d9fa      	bls.n	800a96a <_free_r+0x42>
 800a974:	6811      	ldr	r1, [r2, #0]
 800a976:	1850      	adds	r0, r2, r1
 800a978:	42a0      	cmp	r0, r4
 800a97a:	d10b      	bne.n	800a994 <_free_r+0x6c>
 800a97c:	6820      	ldr	r0, [r4, #0]
 800a97e:	4401      	add	r1, r0
 800a980:	1850      	adds	r0, r2, r1
 800a982:	4283      	cmp	r3, r0
 800a984:	6011      	str	r1, [r2, #0]
 800a986:	d1e0      	bne.n	800a94a <_free_r+0x22>
 800a988:	6818      	ldr	r0, [r3, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	6053      	str	r3, [r2, #4]
 800a98e:	4408      	add	r0, r1
 800a990:	6010      	str	r0, [r2, #0]
 800a992:	e7da      	b.n	800a94a <_free_r+0x22>
 800a994:	d902      	bls.n	800a99c <_free_r+0x74>
 800a996:	230c      	movs	r3, #12
 800a998:	602b      	str	r3, [r5, #0]
 800a99a:	e7d6      	b.n	800a94a <_free_r+0x22>
 800a99c:	6820      	ldr	r0, [r4, #0]
 800a99e:	1821      	adds	r1, r4, r0
 800a9a0:	428b      	cmp	r3, r1
 800a9a2:	bf04      	itt	eq
 800a9a4:	6819      	ldreq	r1, [r3, #0]
 800a9a6:	685b      	ldreq	r3, [r3, #4]
 800a9a8:	6063      	str	r3, [r4, #4]
 800a9aa:	bf04      	itt	eq
 800a9ac:	1809      	addeq	r1, r1, r0
 800a9ae:	6021      	streq	r1, [r4, #0]
 800a9b0:	6054      	str	r4, [r2, #4]
 800a9b2:	e7ca      	b.n	800a94a <_free_r+0x22>
 800a9b4:	bd38      	pop	{r3, r4, r5, pc}
 800a9b6:	bf00      	nop
 800a9b8:	20000e08 	.word	0x20000e08

0800a9bc <malloc>:
 800a9bc:	4b02      	ldr	r3, [pc, #8]	@ (800a9c8 <malloc+0xc>)
 800a9be:	4601      	mov	r1, r0
 800a9c0:	6818      	ldr	r0, [r3, #0]
 800a9c2:	f000 b825 	b.w	800aa10 <_malloc_r>
 800a9c6:	bf00      	nop
 800a9c8:	2000001c 	.word	0x2000001c

0800a9cc <sbrk_aligned>:
 800a9cc:	b570      	push	{r4, r5, r6, lr}
 800a9ce:	4e0f      	ldr	r6, [pc, #60]	@ (800aa0c <sbrk_aligned+0x40>)
 800a9d0:	460c      	mov	r4, r1
 800a9d2:	6831      	ldr	r1, [r6, #0]
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	b911      	cbnz	r1, 800a9de <sbrk_aligned+0x12>
 800a9d8:	f000 fccc 	bl	800b374 <_sbrk_r>
 800a9dc:	6030      	str	r0, [r6, #0]
 800a9de:	4621      	mov	r1, r4
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	f000 fcc7 	bl	800b374 <_sbrk_r>
 800a9e6:	1c43      	adds	r3, r0, #1
 800a9e8:	d103      	bne.n	800a9f2 <sbrk_aligned+0x26>
 800a9ea:	f04f 34ff 	mov.w	r4, #4294967295
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	bd70      	pop	{r4, r5, r6, pc}
 800a9f2:	1cc4      	adds	r4, r0, #3
 800a9f4:	f024 0403 	bic.w	r4, r4, #3
 800a9f8:	42a0      	cmp	r0, r4
 800a9fa:	d0f8      	beq.n	800a9ee <sbrk_aligned+0x22>
 800a9fc:	1a21      	subs	r1, r4, r0
 800a9fe:	4628      	mov	r0, r5
 800aa00:	f000 fcb8 	bl	800b374 <_sbrk_r>
 800aa04:	3001      	adds	r0, #1
 800aa06:	d1f2      	bne.n	800a9ee <sbrk_aligned+0x22>
 800aa08:	e7ef      	b.n	800a9ea <sbrk_aligned+0x1e>
 800aa0a:	bf00      	nop
 800aa0c:	20000e04 	.word	0x20000e04

0800aa10 <_malloc_r>:
 800aa10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa14:	1ccd      	adds	r5, r1, #3
 800aa16:	f025 0503 	bic.w	r5, r5, #3
 800aa1a:	3508      	adds	r5, #8
 800aa1c:	2d0c      	cmp	r5, #12
 800aa1e:	bf38      	it	cc
 800aa20:	250c      	movcc	r5, #12
 800aa22:	2d00      	cmp	r5, #0
 800aa24:	4606      	mov	r6, r0
 800aa26:	db01      	blt.n	800aa2c <_malloc_r+0x1c>
 800aa28:	42a9      	cmp	r1, r5
 800aa2a:	d904      	bls.n	800aa36 <_malloc_r+0x26>
 800aa2c:	230c      	movs	r3, #12
 800aa2e:	6033      	str	r3, [r6, #0]
 800aa30:	2000      	movs	r0, #0
 800aa32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab0c <_malloc_r+0xfc>
 800aa3a:	f000 f869 	bl	800ab10 <__malloc_lock>
 800aa3e:	f8d8 3000 	ldr.w	r3, [r8]
 800aa42:	461c      	mov	r4, r3
 800aa44:	bb44      	cbnz	r4, 800aa98 <_malloc_r+0x88>
 800aa46:	4629      	mov	r1, r5
 800aa48:	4630      	mov	r0, r6
 800aa4a:	f7ff ffbf 	bl	800a9cc <sbrk_aligned>
 800aa4e:	1c43      	adds	r3, r0, #1
 800aa50:	4604      	mov	r4, r0
 800aa52:	d158      	bne.n	800ab06 <_malloc_r+0xf6>
 800aa54:	f8d8 4000 	ldr.w	r4, [r8]
 800aa58:	4627      	mov	r7, r4
 800aa5a:	2f00      	cmp	r7, #0
 800aa5c:	d143      	bne.n	800aae6 <_malloc_r+0xd6>
 800aa5e:	2c00      	cmp	r4, #0
 800aa60:	d04b      	beq.n	800aafa <_malloc_r+0xea>
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	4639      	mov	r1, r7
 800aa66:	4630      	mov	r0, r6
 800aa68:	eb04 0903 	add.w	r9, r4, r3
 800aa6c:	f000 fc82 	bl	800b374 <_sbrk_r>
 800aa70:	4581      	cmp	r9, r0
 800aa72:	d142      	bne.n	800aafa <_malloc_r+0xea>
 800aa74:	6821      	ldr	r1, [r4, #0]
 800aa76:	1a6d      	subs	r5, r5, r1
 800aa78:	4629      	mov	r1, r5
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f7ff ffa6 	bl	800a9cc <sbrk_aligned>
 800aa80:	3001      	adds	r0, #1
 800aa82:	d03a      	beq.n	800aafa <_malloc_r+0xea>
 800aa84:	6823      	ldr	r3, [r4, #0]
 800aa86:	442b      	add	r3, r5
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	f8d8 3000 	ldr.w	r3, [r8]
 800aa8e:	685a      	ldr	r2, [r3, #4]
 800aa90:	bb62      	cbnz	r2, 800aaec <_malloc_r+0xdc>
 800aa92:	f8c8 7000 	str.w	r7, [r8]
 800aa96:	e00f      	b.n	800aab8 <_malloc_r+0xa8>
 800aa98:	6822      	ldr	r2, [r4, #0]
 800aa9a:	1b52      	subs	r2, r2, r5
 800aa9c:	d420      	bmi.n	800aae0 <_malloc_r+0xd0>
 800aa9e:	2a0b      	cmp	r2, #11
 800aaa0:	d917      	bls.n	800aad2 <_malloc_r+0xc2>
 800aaa2:	1961      	adds	r1, r4, r5
 800aaa4:	42a3      	cmp	r3, r4
 800aaa6:	6025      	str	r5, [r4, #0]
 800aaa8:	bf18      	it	ne
 800aaaa:	6059      	strne	r1, [r3, #4]
 800aaac:	6863      	ldr	r3, [r4, #4]
 800aaae:	bf08      	it	eq
 800aab0:	f8c8 1000 	streq.w	r1, [r8]
 800aab4:	5162      	str	r2, [r4, r5]
 800aab6:	604b      	str	r3, [r1, #4]
 800aab8:	4630      	mov	r0, r6
 800aaba:	f000 f82f 	bl	800ab1c <__malloc_unlock>
 800aabe:	f104 000b 	add.w	r0, r4, #11
 800aac2:	1d23      	adds	r3, r4, #4
 800aac4:	f020 0007 	bic.w	r0, r0, #7
 800aac8:	1ac2      	subs	r2, r0, r3
 800aaca:	bf1c      	itt	ne
 800aacc:	1a1b      	subne	r3, r3, r0
 800aace:	50a3      	strne	r3, [r4, r2]
 800aad0:	e7af      	b.n	800aa32 <_malloc_r+0x22>
 800aad2:	6862      	ldr	r2, [r4, #4]
 800aad4:	42a3      	cmp	r3, r4
 800aad6:	bf0c      	ite	eq
 800aad8:	f8c8 2000 	streq.w	r2, [r8]
 800aadc:	605a      	strne	r2, [r3, #4]
 800aade:	e7eb      	b.n	800aab8 <_malloc_r+0xa8>
 800aae0:	4623      	mov	r3, r4
 800aae2:	6864      	ldr	r4, [r4, #4]
 800aae4:	e7ae      	b.n	800aa44 <_malloc_r+0x34>
 800aae6:	463c      	mov	r4, r7
 800aae8:	687f      	ldr	r7, [r7, #4]
 800aaea:	e7b6      	b.n	800aa5a <_malloc_r+0x4a>
 800aaec:	461a      	mov	r2, r3
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	42a3      	cmp	r3, r4
 800aaf2:	d1fb      	bne.n	800aaec <_malloc_r+0xdc>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	6053      	str	r3, [r2, #4]
 800aaf8:	e7de      	b.n	800aab8 <_malloc_r+0xa8>
 800aafa:	230c      	movs	r3, #12
 800aafc:	6033      	str	r3, [r6, #0]
 800aafe:	4630      	mov	r0, r6
 800ab00:	f000 f80c 	bl	800ab1c <__malloc_unlock>
 800ab04:	e794      	b.n	800aa30 <_malloc_r+0x20>
 800ab06:	6005      	str	r5, [r0, #0]
 800ab08:	e7d6      	b.n	800aab8 <_malloc_r+0xa8>
 800ab0a:	bf00      	nop
 800ab0c:	20000e08 	.word	0x20000e08

0800ab10 <__malloc_lock>:
 800ab10:	4801      	ldr	r0, [pc, #4]	@ (800ab18 <__malloc_lock+0x8>)
 800ab12:	f7ff b89e 	b.w	8009c52 <__retarget_lock_acquire_recursive>
 800ab16:	bf00      	nop
 800ab18:	20000e00 	.word	0x20000e00

0800ab1c <__malloc_unlock>:
 800ab1c:	4801      	ldr	r0, [pc, #4]	@ (800ab24 <__malloc_unlock+0x8>)
 800ab1e:	f7ff b899 	b.w	8009c54 <__retarget_lock_release_recursive>
 800ab22:	bf00      	nop
 800ab24:	20000e00 	.word	0x20000e00

0800ab28 <_Balloc>:
 800ab28:	b570      	push	{r4, r5, r6, lr}
 800ab2a:	69c6      	ldr	r6, [r0, #28]
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	460d      	mov	r5, r1
 800ab30:	b976      	cbnz	r6, 800ab50 <_Balloc+0x28>
 800ab32:	2010      	movs	r0, #16
 800ab34:	f7ff ff42 	bl	800a9bc <malloc>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	61e0      	str	r0, [r4, #28]
 800ab3c:	b920      	cbnz	r0, 800ab48 <_Balloc+0x20>
 800ab3e:	4b18      	ldr	r3, [pc, #96]	@ (800aba0 <_Balloc+0x78>)
 800ab40:	4818      	ldr	r0, [pc, #96]	@ (800aba4 <_Balloc+0x7c>)
 800ab42:	216b      	movs	r1, #107	@ 0x6b
 800ab44:	f000 fc26 	bl	800b394 <__assert_func>
 800ab48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab4c:	6006      	str	r6, [r0, #0]
 800ab4e:	60c6      	str	r6, [r0, #12]
 800ab50:	69e6      	ldr	r6, [r4, #28]
 800ab52:	68f3      	ldr	r3, [r6, #12]
 800ab54:	b183      	cbz	r3, 800ab78 <_Balloc+0x50>
 800ab56:	69e3      	ldr	r3, [r4, #28]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab5e:	b9b8      	cbnz	r0, 800ab90 <_Balloc+0x68>
 800ab60:	2101      	movs	r1, #1
 800ab62:	fa01 f605 	lsl.w	r6, r1, r5
 800ab66:	1d72      	adds	r2, r6, #5
 800ab68:	0092      	lsls	r2, r2, #2
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f000 fc30 	bl	800b3d0 <_calloc_r>
 800ab70:	b160      	cbz	r0, 800ab8c <_Balloc+0x64>
 800ab72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab76:	e00e      	b.n	800ab96 <_Balloc+0x6e>
 800ab78:	2221      	movs	r2, #33	@ 0x21
 800ab7a:	2104      	movs	r1, #4
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f000 fc27 	bl	800b3d0 <_calloc_r>
 800ab82:	69e3      	ldr	r3, [r4, #28]
 800ab84:	60f0      	str	r0, [r6, #12]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1e4      	bne.n	800ab56 <_Balloc+0x2e>
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}
 800ab90:	6802      	ldr	r2, [r0, #0]
 800ab92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab96:	2300      	movs	r3, #0
 800ab98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab9c:	e7f7      	b.n	800ab8e <_Balloc+0x66>
 800ab9e:	bf00      	nop
 800aba0:	0800bf15 	.word	0x0800bf15
 800aba4:	0800bf95 	.word	0x0800bf95

0800aba8 <_Bfree>:
 800aba8:	b570      	push	{r4, r5, r6, lr}
 800abaa:	69c6      	ldr	r6, [r0, #28]
 800abac:	4605      	mov	r5, r0
 800abae:	460c      	mov	r4, r1
 800abb0:	b976      	cbnz	r6, 800abd0 <_Bfree+0x28>
 800abb2:	2010      	movs	r0, #16
 800abb4:	f7ff ff02 	bl	800a9bc <malloc>
 800abb8:	4602      	mov	r2, r0
 800abba:	61e8      	str	r0, [r5, #28]
 800abbc:	b920      	cbnz	r0, 800abc8 <_Bfree+0x20>
 800abbe:	4b09      	ldr	r3, [pc, #36]	@ (800abe4 <_Bfree+0x3c>)
 800abc0:	4809      	ldr	r0, [pc, #36]	@ (800abe8 <_Bfree+0x40>)
 800abc2:	218f      	movs	r1, #143	@ 0x8f
 800abc4:	f000 fbe6 	bl	800b394 <__assert_func>
 800abc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abcc:	6006      	str	r6, [r0, #0]
 800abce:	60c6      	str	r6, [r0, #12]
 800abd0:	b13c      	cbz	r4, 800abe2 <_Bfree+0x3a>
 800abd2:	69eb      	ldr	r3, [r5, #28]
 800abd4:	6862      	ldr	r2, [r4, #4]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abdc:	6021      	str	r1, [r4, #0]
 800abde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abe2:	bd70      	pop	{r4, r5, r6, pc}
 800abe4:	0800bf15 	.word	0x0800bf15
 800abe8:	0800bf95 	.word	0x0800bf95

0800abec <__multadd>:
 800abec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abf0:	690d      	ldr	r5, [r1, #16]
 800abf2:	4607      	mov	r7, r0
 800abf4:	460c      	mov	r4, r1
 800abf6:	461e      	mov	r6, r3
 800abf8:	f101 0c14 	add.w	ip, r1, #20
 800abfc:	2000      	movs	r0, #0
 800abfe:	f8dc 3000 	ldr.w	r3, [ip]
 800ac02:	b299      	uxth	r1, r3
 800ac04:	fb02 6101 	mla	r1, r2, r1, r6
 800ac08:	0c1e      	lsrs	r6, r3, #16
 800ac0a:	0c0b      	lsrs	r3, r1, #16
 800ac0c:	fb02 3306 	mla	r3, r2, r6, r3
 800ac10:	b289      	uxth	r1, r1
 800ac12:	3001      	adds	r0, #1
 800ac14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac18:	4285      	cmp	r5, r0
 800ac1a:	f84c 1b04 	str.w	r1, [ip], #4
 800ac1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac22:	dcec      	bgt.n	800abfe <__multadd+0x12>
 800ac24:	b30e      	cbz	r6, 800ac6a <__multadd+0x7e>
 800ac26:	68a3      	ldr	r3, [r4, #8]
 800ac28:	42ab      	cmp	r3, r5
 800ac2a:	dc19      	bgt.n	800ac60 <__multadd+0x74>
 800ac2c:	6861      	ldr	r1, [r4, #4]
 800ac2e:	4638      	mov	r0, r7
 800ac30:	3101      	adds	r1, #1
 800ac32:	f7ff ff79 	bl	800ab28 <_Balloc>
 800ac36:	4680      	mov	r8, r0
 800ac38:	b928      	cbnz	r0, 800ac46 <__multadd+0x5a>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ac70 <__multadd+0x84>)
 800ac3e:	480d      	ldr	r0, [pc, #52]	@ (800ac74 <__multadd+0x88>)
 800ac40:	21ba      	movs	r1, #186	@ 0xba
 800ac42:	f000 fba7 	bl	800b394 <__assert_func>
 800ac46:	6922      	ldr	r2, [r4, #16]
 800ac48:	3202      	adds	r2, #2
 800ac4a:	f104 010c 	add.w	r1, r4, #12
 800ac4e:	0092      	lsls	r2, r2, #2
 800ac50:	300c      	adds	r0, #12
 800ac52:	f7ff f800 	bl	8009c56 <memcpy>
 800ac56:	4621      	mov	r1, r4
 800ac58:	4638      	mov	r0, r7
 800ac5a:	f7ff ffa5 	bl	800aba8 <_Bfree>
 800ac5e:	4644      	mov	r4, r8
 800ac60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac64:	3501      	adds	r5, #1
 800ac66:	615e      	str	r6, [r3, #20]
 800ac68:	6125      	str	r5, [r4, #16]
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac70:	0800bf84 	.word	0x0800bf84
 800ac74:	0800bf95 	.word	0x0800bf95

0800ac78 <__hi0bits>:
 800ac78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	bf36      	itet	cc
 800ac80:	0403      	lslcc	r3, r0, #16
 800ac82:	2000      	movcs	r0, #0
 800ac84:	2010      	movcc	r0, #16
 800ac86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac8a:	bf3c      	itt	cc
 800ac8c:	021b      	lslcc	r3, r3, #8
 800ac8e:	3008      	addcc	r0, #8
 800ac90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac94:	bf3c      	itt	cc
 800ac96:	011b      	lslcc	r3, r3, #4
 800ac98:	3004      	addcc	r0, #4
 800ac9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac9e:	bf3c      	itt	cc
 800aca0:	009b      	lslcc	r3, r3, #2
 800aca2:	3002      	addcc	r0, #2
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	db05      	blt.n	800acb4 <__hi0bits+0x3c>
 800aca8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800acac:	f100 0001 	add.w	r0, r0, #1
 800acb0:	bf08      	it	eq
 800acb2:	2020      	moveq	r0, #32
 800acb4:	4770      	bx	lr

0800acb6 <__lo0bits>:
 800acb6:	6803      	ldr	r3, [r0, #0]
 800acb8:	4602      	mov	r2, r0
 800acba:	f013 0007 	ands.w	r0, r3, #7
 800acbe:	d00b      	beq.n	800acd8 <__lo0bits+0x22>
 800acc0:	07d9      	lsls	r1, r3, #31
 800acc2:	d421      	bmi.n	800ad08 <__lo0bits+0x52>
 800acc4:	0798      	lsls	r0, r3, #30
 800acc6:	bf49      	itett	mi
 800acc8:	085b      	lsrmi	r3, r3, #1
 800acca:	089b      	lsrpl	r3, r3, #2
 800accc:	2001      	movmi	r0, #1
 800acce:	6013      	strmi	r3, [r2, #0]
 800acd0:	bf5c      	itt	pl
 800acd2:	6013      	strpl	r3, [r2, #0]
 800acd4:	2002      	movpl	r0, #2
 800acd6:	4770      	bx	lr
 800acd8:	b299      	uxth	r1, r3
 800acda:	b909      	cbnz	r1, 800ace0 <__lo0bits+0x2a>
 800acdc:	0c1b      	lsrs	r3, r3, #16
 800acde:	2010      	movs	r0, #16
 800ace0:	b2d9      	uxtb	r1, r3
 800ace2:	b909      	cbnz	r1, 800ace8 <__lo0bits+0x32>
 800ace4:	3008      	adds	r0, #8
 800ace6:	0a1b      	lsrs	r3, r3, #8
 800ace8:	0719      	lsls	r1, r3, #28
 800acea:	bf04      	itt	eq
 800acec:	091b      	lsreq	r3, r3, #4
 800acee:	3004      	addeq	r0, #4
 800acf0:	0799      	lsls	r1, r3, #30
 800acf2:	bf04      	itt	eq
 800acf4:	089b      	lsreq	r3, r3, #2
 800acf6:	3002      	addeq	r0, #2
 800acf8:	07d9      	lsls	r1, r3, #31
 800acfa:	d403      	bmi.n	800ad04 <__lo0bits+0x4e>
 800acfc:	085b      	lsrs	r3, r3, #1
 800acfe:	f100 0001 	add.w	r0, r0, #1
 800ad02:	d003      	beq.n	800ad0c <__lo0bits+0x56>
 800ad04:	6013      	str	r3, [r2, #0]
 800ad06:	4770      	bx	lr
 800ad08:	2000      	movs	r0, #0
 800ad0a:	4770      	bx	lr
 800ad0c:	2020      	movs	r0, #32
 800ad0e:	4770      	bx	lr

0800ad10 <__i2b>:
 800ad10:	b510      	push	{r4, lr}
 800ad12:	460c      	mov	r4, r1
 800ad14:	2101      	movs	r1, #1
 800ad16:	f7ff ff07 	bl	800ab28 <_Balloc>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	b928      	cbnz	r0, 800ad2a <__i2b+0x1a>
 800ad1e:	4b05      	ldr	r3, [pc, #20]	@ (800ad34 <__i2b+0x24>)
 800ad20:	4805      	ldr	r0, [pc, #20]	@ (800ad38 <__i2b+0x28>)
 800ad22:	f240 1145 	movw	r1, #325	@ 0x145
 800ad26:	f000 fb35 	bl	800b394 <__assert_func>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	6144      	str	r4, [r0, #20]
 800ad2e:	6103      	str	r3, [r0, #16]
 800ad30:	bd10      	pop	{r4, pc}
 800ad32:	bf00      	nop
 800ad34:	0800bf84 	.word	0x0800bf84
 800ad38:	0800bf95 	.word	0x0800bf95

0800ad3c <__multiply>:
 800ad3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad40:	4617      	mov	r7, r2
 800ad42:	690a      	ldr	r2, [r1, #16]
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	bfa8      	it	ge
 800ad4a:	463b      	movge	r3, r7
 800ad4c:	4689      	mov	r9, r1
 800ad4e:	bfa4      	itt	ge
 800ad50:	460f      	movge	r7, r1
 800ad52:	4699      	movge	r9, r3
 800ad54:	693d      	ldr	r5, [r7, #16]
 800ad56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	6879      	ldr	r1, [r7, #4]
 800ad5e:	eb05 060a 	add.w	r6, r5, sl
 800ad62:	42b3      	cmp	r3, r6
 800ad64:	b085      	sub	sp, #20
 800ad66:	bfb8      	it	lt
 800ad68:	3101      	addlt	r1, #1
 800ad6a:	f7ff fedd 	bl	800ab28 <_Balloc>
 800ad6e:	b930      	cbnz	r0, 800ad7e <__multiply+0x42>
 800ad70:	4602      	mov	r2, r0
 800ad72:	4b41      	ldr	r3, [pc, #260]	@ (800ae78 <__multiply+0x13c>)
 800ad74:	4841      	ldr	r0, [pc, #260]	@ (800ae7c <__multiply+0x140>)
 800ad76:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ad7a:	f000 fb0b 	bl	800b394 <__assert_func>
 800ad7e:	f100 0414 	add.w	r4, r0, #20
 800ad82:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ad86:	4623      	mov	r3, r4
 800ad88:	2200      	movs	r2, #0
 800ad8a:	4573      	cmp	r3, lr
 800ad8c:	d320      	bcc.n	800add0 <__multiply+0x94>
 800ad8e:	f107 0814 	add.w	r8, r7, #20
 800ad92:	f109 0114 	add.w	r1, r9, #20
 800ad96:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ad9a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ad9e:	9302      	str	r3, [sp, #8]
 800ada0:	1beb      	subs	r3, r5, r7
 800ada2:	3b15      	subs	r3, #21
 800ada4:	f023 0303 	bic.w	r3, r3, #3
 800ada8:	3304      	adds	r3, #4
 800adaa:	3715      	adds	r7, #21
 800adac:	42bd      	cmp	r5, r7
 800adae:	bf38      	it	cc
 800adb0:	2304      	movcc	r3, #4
 800adb2:	9301      	str	r3, [sp, #4]
 800adb4:	9b02      	ldr	r3, [sp, #8]
 800adb6:	9103      	str	r1, [sp, #12]
 800adb8:	428b      	cmp	r3, r1
 800adba:	d80c      	bhi.n	800add6 <__multiply+0x9a>
 800adbc:	2e00      	cmp	r6, #0
 800adbe:	dd03      	ble.n	800adc8 <__multiply+0x8c>
 800adc0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d055      	beq.n	800ae74 <__multiply+0x138>
 800adc8:	6106      	str	r6, [r0, #16]
 800adca:	b005      	add	sp, #20
 800adcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800add0:	f843 2b04 	str.w	r2, [r3], #4
 800add4:	e7d9      	b.n	800ad8a <__multiply+0x4e>
 800add6:	f8b1 a000 	ldrh.w	sl, [r1]
 800adda:	f1ba 0f00 	cmp.w	sl, #0
 800adde:	d01f      	beq.n	800ae20 <__multiply+0xe4>
 800ade0:	46c4      	mov	ip, r8
 800ade2:	46a1      	mov	r9, r4
 800ade4:	2700      	movs	r7, #0
 800ade6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800adea:	f8d9 3000 	ldr.w	r3, [r9]
 800adee:	fa1f fb82 	uxth.w	fp, r2
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	fb0a 330b 	mla	r3, sl, fp, r3
 800adf8:	443b      	add	r3, r7
 800adfa:	f8d9 7000 	ldr.w	r7, [r9]
 800adfe:	0c12      	lsrs	r2, r2, #16
 800ae00:	0c3f      	lsrs	r7, r7, #16
 800ae02:	fb0a 7202 	mla	r2, sl, r2, r7
 800ae06:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae10:	4565      	cmp	r5, ip
 800ae12:	f849 3b04 	str.w	r3, [r9], #4
 800ae16:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ae1a:	d8e4      	bhi.n	800ade6 <__multiply+0xaa>
 800ae1c:	9b01      	ldr	r3, [sp, #4]
 800ae1e:	50e7      	str	r7, [r4, r3]
 800ae20:	9b03      	ldr	r3, [sp, #12]
 800ae22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ae26:	3104      	adds	r1, #4
 800ae28:	f1b9 0f00 	cmp.w	r9, #0
 800ae2c:	d020      	beq.n	800ae70 <__multiply+0x134>
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	4647      	mov	r7, r8
 800ae32:	46a4      	mov	ip, r4
 800ae34:	f04f 0a00 	mov.w	sl, #0
 800ae38:	f8b7 b000 	ldrh.w	fp, [r7]
 800ae3c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ae40:	fb09 220b 	mla	r2, r9, fp, r2
 800ae44:	4452      	add	r2, sl
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae4c:	f84c 3b04 	str.w	r3, [ip], #4
 800ae50:	f857 3b04 	ldr.w	r3, [r7], #4
 800ae54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae58:	f8bc 3000 	ldrh.w	r3, [ip]
 800ae5c:	fb09 330a 	mla	r3, r9, sl, r3
 800ae60:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ae64:	42bd      	cmp	r5, r7
 800ae66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae6a:	d8e5      	bhi.n	800ae38 <__multiply+0xfc>
 800ae6c:	9a01      	ldr	r2, [sp, #4]
 800ae6e:	50a3      	str	r3, [r4, r2]
 800ae70:	3404      	adds	r4, #4
 800ae72:	e79f      	b.n	800adb4 <__multiply+0x78>
 800ae74:	3e01      	subs	r6, #1
 800ae76:	e7a1      	b.n	800adbc <__multiply+0x80>
 800ae78:	0800bf84 	.word	0x0800bf84
 800ae7c:	0800bf95 	.word	0x0800bf95

0800ae80 <__pow5mult>:
 800ae80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae84:	4615      	mov	r5, r2
 800ae86:	f012 0203 	ands.w	r2, r2, #3
 800ae8a:	4607      	mov	r7, r0
 800ae8c:	460e      	mov	r6, r1
 800ae8e:	d007      	beq.n	800aea0 <__pow5mult+0x20>
 800ae90:	4c25      	ldr	r4, [pc, #148]	@ (800af28 <__pow5mult+0xa8>)
 800ae92:	3a01      	subs	r2, #1
 800ae94:	2300      	movs	r3, #0
 800ae96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae9a:	f7ff fea7 	bl	800abec <__multadd>
 800ae9e:	4606      	mov	r6, r0
 800aea0:	10ad      	asrs	r5, r5, #2
 800aea2:	d03d      	beq.n	800af20 <__pow5mult+0xa0>
 800aea4:	69fc      	ldr	r4, [r7, #28]
 800aea6:	b97c      	cbnz	r4, 800aec8 <__pow5mult+0x48>
 800aea8:	2010      	movs	r0, #16
 800aeaa:	f7ff fd87 	bl	800a9bc <malloc>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	61f8      	str	r0, [r7, #28]
 800aeb2:	b928      	cbnz	r0, 800aec0 <__pow5mult+0x40>
 800aeb4:	4b1d      	ldr	r3, [pc, #116]	@ (800af2c <__pow5mult+0xac>)
 800aeb6:	481e      	ldr	r0, [pc, #120]	@ (800af30 <__pow5mult+0xb0>)
 800aeb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aebc:	f000 fa6a 	bl	800b394 <__assert_func>
 800aec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aec4:	6004      	str	r4, [r0, #0]
 800aec6:	60c4      	str	r4, [r0, #12]
 800aec8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aecc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aed0:	b94c      	cbnz	r4, 800aee6 <__pow5mult+0x66>
 800aed2:	f240 2171 	movw	r1, #625	@ 0x271
 800aed6:	4638      	mov	r0, r7
 800aed8:	f7ff ff1a 	bl	800ad10 <__i2b>
 800aedc:	2300      	movs	r3, #0
 800aede:	f8c8 0008 	str.w	r0, [r8, #8]
 800aee2:	4604      	mov	r4, r0
 800aee4:	6003      	str	r3, [r0, #0]
 800aee6:	f04f 0900 	mov.w	r9, #0
 800aeea:	07eb      	lsls	r3, r5, #31
 800aeec:	d50a      	bpl.n	800af04 <__pow5mult+0x84>
 800aeee:	4631      	mov	r1, r6
 800aef0:	4622      	mov	r2, r4
 800aef2:	4638      	mov	r0, r7
 800aef4:	f7ff ff22 	bl	800ad3c <__multiply>
 800aef8:	4631      	mov	r1, r6
 800aefa:	4680      	mov	r8, r0
 800aefc:	4638      	mov	r0, r7
 800aefe:	f7ff fe53 	bl	800aba8 <_Bfree>
 800af02:	4646      	mov	r6, r8
 800af04:	106d      	asrs	r5, r5, #1
 800af06:	d00b      	beq.n	800af20 <__pow5mult+0xa0>
 800af08:	6820      	ldr	r0, [r4, #0]
 800af0a:	b938      	cbnz	r0, 800af1c <__pow5mult+0x9c>
 800af0c:	4622      	mov	r2, r4
 800af0e:	4621      	mov	r1, r4
 800af10:	4638      	mov	r0, r7
 800af12:	f7ff ff13 	bl	800ad3c <__multiply>
 800af16:	6020      	str	r0, [r4, #0]
 800af18:	f8c0 9000 	str.w	r9, [r0]
 800af1c:	4604      	mov	r4, r0
 800af1e:	e7e4      	b.n	800aeea <__pow5mult+0x6a>
 800af20:	4630      	mov	r0, r6
 800af22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af26:	bf00      	nop
 800af28:	0800c048 	.word	0x0800c048
 800af2c:	0800bf15 	.word	0x0800bf15
 800af30:	0800bf95 	.word	0x0800bf95

0800af34 <__lshift>:
 800af34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af38:	460c      	mov	r4, r1
 800af3a:	6849      	ldr	r1, [r1, #4]
 800af3c:	6923      	ldr	r3, [r4, #16]
 800af3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af42:	68a3      	ldr	r3, [r4, #8]
 800af44:	4607      	mov	r7, r0
 800af46:	4691      	mov	r9, r2
 800af48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af4c:	f108 0601 	add.w	r6, r8, #1
 800af50:	42b3      	cmp	r3, r6
 800af52:	db0b      	blt.n	800af6c <__lshift+0x38>
 800af54:	4638      	mov	r0, r7
 800af56:	f7ff fde7 	bl	800ab28 <_Balloc>
 800af5a:	4605      	mov	r5, r0
 800af5c:	b948      	cbnz	r0, 800af72 <__lshift+0x3e>
 800af5e:	4602      	mov	r2, r0
 800af60:	4b28      	ldr	r3, [pc, #160]	@ (800b004 <__lshift+0xd0>)
 800af62:	4829      	ldr	r0, [pc, #164]	@ (800b008 <__lshift+0xd4>)
 800af64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800af68:	f000 fa14 	bl	800b394 <__assert_func>
 800af6c:	3101      	adds	r1, #1
 800af6e:	005b      	lsls	r3, r3, #1
 800af70:	e7ee      	b.n	800af50 <__lshift+0x1c>
 800af72:	2300      	movs	r3, #0
 800af74:	f100 0114 	add.w	r1, r0, #20
 800af78:	f100 0210 	add.w	r2, r0, #16
 800af7c:	4618      	mov	r0, r3
 800af7e:	4553      	cmp	r3, sl
 800af80:	db33      	blt.n	800afea <__lshift+0xb6>
 800af82:	6920      	ldr	r0, [r4, #16]
 800af84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af88:	f104 0314 	add.w	r3, r4, #20
 800af8c:	f019 091f 	ands.w	r9, r9, #31
 800af90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af98:	d02b      	beq.n	800aff2 <__lshift+0xbe>
 800af9a:	f1c9 0e20 	rsb	lr, r9, #32
 800af9e:	468a      	mov	sl, r1
 800afa0:	2200      	movs	r2, #0
 800afa2:	6818      	ldr	r0, [r3, #0]
 800afa4:	fa00 f009 	lsl.w	r0, r0, r9
 800afa8:	4310      	orrs	r0, r2
 800afaa:	f84a 0b04 	str.w	r0, [sl], #4
 800afae:	f853 2b04 	ldr.w	r2, [r3], #4
 800afb2:	459c      	cmp	ip, r3
 800afb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800afb8:	d8f3      	bhi.n	800afa2 <__lshift+0x6e>
 800afba:	ebac 0304 	sub.w	r3, ip, r4
 800afbe:	3b15      	subs	r3, #21
 800afc0:	f023 0303 	bic.w	r3, r3, #3
 800afc4:	3304      	adds	r3, #4
 800afc6:	f104 0015 	add.w	r0, r4, #21
 800afca:	4560      	cmp	r0, ip
 800afcc:	bf88      	it	hi
 800afce:	2304      	movhi	r3, #4
 800afd0:	50ca      	str	r2, [r1, r3]
 800afd2:	b10a      	cbz	r2, 800afd8 <__lshift+0xa4>
 800afd4:	f108 0602 	add.w	r6, r8, #2
 800afd8:	3e01      	subs	r6, #1
 800afda:	4638      	mov	r0, r7
 800afdc:	612e      	str	r6, [r5, #16]
 800afde:	4621      	mov	r1, r4
 800afe0:	f7ff fde2 	bl	800aba8 <_Bfree>
 800afe4:	4628      	mov	r0, r5
 800afe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afea:	f842 0f04 	str.w	r0, [r2, #4]!
 800afee:	3301      	adds	r3, #1
 800aff0:	e7c5      	b.n	800af7e <__lshift+0x4a>
 800aff2:	3904      	subs	r1, #4
 800aff4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aff8:	f841 2f04 	str.w	r2, [r1, #4]!
 800affc:	459c      	cmp	ip, r3
 800affe:	d8f9      	bhi.n	800aff4 <__lshift+0xc0>
 800b000:	e7ea      	b.n	800afd8 <__lshift+0xa4>
 800b002:	bf00      	nop
 800b004:	0800bf84 	.word	0x0800bf84
 800b008:	0800bf95 	.word	0x0800bf95

0800b00c <__mcmp>:
 800b00c:	690a      	ldr	r2, [r1, #16]
 800b00e:	4603      	mov	r3, r0
 800b010:	6900      	ldr	r0, [r0, #16]
 800b012:	1a80      	subs	r0, r0, r2
 800b014:	b530      	push	{r4, r5, lr}
 800b016:	d10e      	bne.n	800b036 <__mcmp+0x2a>
 800b018:	3314      	adds	r3, #20
 800b01a:	3114      	adds	r1, #20
 800b01c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b020:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b024:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b028:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b02c:	4295      	cmp	r5, r2
 800b02e:	d003      	beq.n	800b038 <__mcmp+0x2c>
 800b030:	d205      	bcs.n	800b03e <__mcmp+0x32>
 800b032:	f04f 30ff 	mov.w	r0, #4294967295
 800b036:	bd30      	pop	{r4, r5, pc}
 800b038:	42a3      	cmp	r3, r4
 800b03a:	d3f3      	bcc.n	800b024 <__mcmp+0x18>
 800b03c:	e7fb      	b.n	800b036 <__mcmp+0x2a>
 800b03e:	2001      	movs	r0, #1
 800b040:	e7f9      	b.n	800b036 <__mcmp+0x2a>
	...

0800b044 <__mdiff>:
 800b044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b048:	4689      	mov	r9, r1
 800b04a:	4606      	mov	r6, r0
 800b04c:	4611      	mov	r1, r2
 800b04e:	4648      	mov	r0, r9
 800b050:	4614      	mov	r4, r2
 800b052:	f7ff ffdb 	bl	800b00c <__mcmp>
 800b056:	1e05      	subs	r5, r0, #0
 800b058:	d112      	bne.n	800b080 <__mdiff+0x3c>
 800b05a:	4629      	mov	r1, r5
 800b05c:	4630      	mov	r0, r6
 800b05e:	f7ff fd63 	bl	800ab28 <_Balloc>
 800b062:	4602      	mov	r2, r0
 800b064:	b928      	cbnz	r0, 800b072 <__mdiff+0x2e>
 800b066:	4b3f      	ldr	r3, [pc, #252]	@ (800b164 <__mdiff+0x120>)
 800b068:	f240 2137 	movw	r1, #567	@ 0x237
 800b06c:	483e      	ldr	r0, [pc, #248]	@ (800b168 <__mdiff+0x124>)
 800b06e:	f000 f991 	bl	800b394 <__assert_func>
 800b072:	2301      	movs	r3, #1
 800b074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b078:	4610      	mov	r0, r2
 800b07a:	b003      	add	sp, #12
 800b07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b080:	bfbc      	itt	lt
 800b082:	464b      	movlt	r3, r9
 800b084:	46a1      	movlt	r9, r4
 800b086:	4630      	mov	r0, r6
 800b088:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b08c:	bfba      	itte	lt
 800b08e:	461c      	movlt	r4, r3
 800b090:	2501      	movlt	r5, #1
 800b092:	2500      	movge	r5, #0
 800b094:	f7ff fd48 	bl	800ab28 <_Balloc>
 800b098:	4602      	mov	r2, r0
 800b09a:	b918      	cbnz	r0, 800b0a4 <__mdiff+0x60>
 800b09c:	4b31      	ldr	r3, [pc, #196]	@ (800b164 <__mdiff+0x120>)
 800b09e:	f240 2145 	movw	r1, #581	@ 0x245
 800b0a2:	e7e3      	b.n	800b06c <__mdiff+0x28>
 800b0a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b0a8:	6926      	ldr	r6, [r4, #16]
 800b0aa:	60c5      	str	r5, [r0, #12]
 800b0ac:	f109 0310 	add.w	r3, r9, #16
 800b0b0:	f109 0514 	add.w	r5, r9, #20
 800b0b4:	f104 0e14 	add.w	lr, r4, #20
 800b0b8:	f100 0b14 	add.w	fp, r0, #20
 800b0bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b0c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b0c4:	9301      	str	r3, [sp, #4]
 800b0c6:	46d9      	mov	r9, fp
 800b0c8:	f04f 0c00 	mov.w	ip, #0
 800b0cc:	9b01      	ldr	r3, [sp, #4]
 800b0ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b0d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b0d6:	9301      	str	r3, [sp, #4]
 800b0d8:	fa1f f38a 	uxth.w	r3, sl
 800b0dc:	4619      	mov	r1, r3
 800b0de:	b283      	uxth	r3, r0
 800b0e0:	1acb      	subs	r3, r1, r3
 800b0e2:	0c00      	lsrs	r0, r0, #16
 800b0e4:	4463      	add	r3, ip
 800b0e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b0ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b0f4:	4576      	cmp	r6, lr
 800b0f6:	f849 3b04 	str.w	r3, [r9], #4
 800b0fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b0fe:	d8e5      	bhi.n	800b0cc <__mdiff+0x88>
 800b100:	1b33      	subs	r3, r6, r4
 800b102:	3b15      	subs	r3, #21
 800b104:	f023 0303 	bic.w	r3, r3, #3
 800b108:	3415      	adds	r4, #21
 800b10a:	3304      	adds	r3, #4
 800b10c:	42a6      	cmp	r6, r4
 800b10e:	bf38      	it	cc
 800b110:	2304      	movcc	r3, #4
 800b112:	441d      	add	r5, r3
 800b114:	445b      	add	r3, fp
 800b116:	461e      	mov	r6, r3
 800b118:	462c      	mov	r4, r5
 800b11a:	4544      	cmp	r4, r8
 800b11c:	d30e      	bcc.n	800b13c <__mdiff+0xf8>
 800b11e:	f108 0103 	add.w	r1, r8, #3
 800b122:	1b49      	subs	r1, r1, r5
 800b124:	f021 0103 	bic.w	r1, r1, #3
 800b128:	3d03      	subs	r5, #3
 800b12a:	45a8      	cmp	r8, r5
 800b12c:	bf38      	it	cc
 800b12e:	2100      	movcc	r1, #0
 800b130:	440b      	add	r3, r1
 800b132:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b136:	b191      	cbz	r1, 800b15e <__mdiff+0x11a>
 800b138:	6117      	str	r7, [r2, #16]
 800b13a:	e79d      	b.n	800b078 <__mdiff+0x34>
 800b13c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b140:	46e6      	mov	lr, ip
 800b142:	0c08      	lsrs	r0, r1, #16
 800b144:	fa1c fc81 	uxtah	ip, ip, r1
 800b148:	4471      	add	r1, lr
 800b14a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b14e:	b289      	uxth	r1, r1
 800b150:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b154:	f846 1b04 	str.w	r1, [r6], #4
 800b158:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b15c:	e7dd      	b.n	800b11a <__mdiff+0xd6>
 800b15e:	3f01      	subs	r7, #1
 800b160:	e7e7      	b.n	800b132 <__mdiff+0xee>
 800b162:	bf00      	nop
 800b164:	0800bf84 	.word	0x0800bf84
 800b168:	0800bf95 	.word	0x0800bf95

0800b16c <__d2b>:
 800b16c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b170:	460f      	mov	r7, r1
 800b172:	2101      	movs	r1, #1
 800b174:	ec59 8b10 	vmov	r8, r9, d0
 800b178:	4616      	mov	r6, r2
 800b17a:	f7ff fcd5 	bl	800ab28 <_Balloc>
 800b17e:	4604      	mov	r4, r0
 800b180:	b930      	cbnz	r0, 800b190 <__d2b+0x24>
 800b182:	4602      	mov	r2, r0
 800b184:	4b23      	ldr	r3, [pc, #140]	@ (800b214 <__d2b+0xa8>)
 800b186:	4824      	ldr	r0, [pc, #144]	@ (800b218 <__d2b+0xac>)
 800b188:	f240 310f 	movw	r1, #783	@ 0x30f
 800b18c:	f000 f902 	bl	800b394 <__assert_func>
 800b190:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b194:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b198:	b10d      	cbz	r5, 800b19e <__d2b+0x32>
 800b19a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b19e:	9301      	str	r3, [sp, #4]
 800b1a0:	f1b8 0300 	subs.w	r3, r8, #0
 800b1a4:	d023      	beq.n	800b1ee <__d2b+0x82>
 800b1a6:	4668      	mov	r0, sp
 800b1a8:	9300      	str	r3, [sp, #0]
 800b1aa:	f7ff fd84 	bl	800acb6 <__lo0bits>
 800b1ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b1b2:	b1d0      	cbz	r0, 800b1ea <__d2b+0x7e>
 800b1b4:	f1c0 0320 	rsb	r3, r0, #32
 800b1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1bc:	430b      	orrs	r3, r1
 800b1be:	40c2      	lsrs	r2, r0
 800b1c0:	6163      	str	r3, [r4, #20]
 800b1c2:	9201      	str	r2, [sp, #4]
 800b1c4:	9b01      	ldr	r3, [sp, #4]
 800b1c6:	61a3      	str	r3, [r4, #24]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	bf0c      	ite	eq
 800b1cc:	2201      	moveq	r2, #1
 800b1ce:	2202      	movne	r2, #2
 800b1d0:	6122      	str	r2, [r4, #16]
 800b1d2:	b1a5      	cbz	r5, 800b1fe <__d2b+0x92>
 800b1d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b1d8:	4405      	add	r5, r0
 800b1da:	603d      	str	r5, [r7, #0]
 800b1dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b1e0:	6030      	str	r0, [r6, #0]
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	b003      	add	sp, #12
 800b1e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1ea:	6161      	str	r1, [r4, #20]
 800b1ec:	e7ea      	b.n	800b1c4 <__d2b+0x58>
 800b1ee:	a801      	add	r0, sp, #4
 800b1f0:	f7ff fd61 	bl	800acb6 <__lo0bits>
 800b1f4:	9b01      	ldr	r3, [sp, #4]
 800b1f6:	6163      	str	r3, [r4, #20]
 800b1f8:	3020      	adds	r0, #32
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	e7e8      	b.n	800b1d0 <__d2b+0x64>
 800b1fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b202:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b206:	6038      	str	r0, [r7, #0]
 800b208:	6918      	ldr	r0, [r3, #16]
 800b20a:	f7ff fd35 	bl	800ac78 <__hi0bits>
 800b20e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b212:	e7e5      	b.n	800b1e0 <__d2b+0x74>
 800b214:	0800bf84 	.word	0x0800bf84
 800b218:	0800bf95 	.word	0x0800bf95

0800b21c <__sflush_r>:
 800b21c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b224:	0716      	lsls	r6, r2, #28
 800b226:	4605      	mov	r5, r0
 800b228:	460c      	mov	r4, r1
 800b22a:	d454      	bmi.n	800b2d6 <__sflush_r+0xba>
 800b22c:	684b      	ldr	r3, [r1, #4]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	dc02      	bgt.n	800b238 <__sflush_r+0x1c>
 800b232:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b234:	2b00      	cmp	r3, #0
 800b236:	dd48      	ble.n	800b2ca <__sflush_r+0xae>
 800b238:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b23a:	2e00      	cmp	r6, #0
 800b23c:	d045      	beq.n	800b2ca <__sflush_r+0xae>
 800b23e:	2300      	movs	r3, #0
 800b240:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b244:	682f      	ldr	r7, [r5, #0]
 800b246:	6a21      	ldr	r1, [r4, #32]
 800b248:	602b      	str	r3, [r5, #0]
 800b24a:	d030      	beq.n	800b2ae <__sflush_r+0x92>
 800b24c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b24e:	89a3      	ldrh	r3, [r4, #12]
 800b250:	0759      	lsls	r1, r3, #29
 800b252:	d505      	bpl.n	800b260 <__sflush_r+0x44>
 800b254:	6863      	ldr	r3, [r4, #4]
 800b256:	1ad2      	subs	r2, r2, r3
 800b258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b25a:	b10b      	cbz	r3, 800b260 <__sflush_r+0x44>
 800b25c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b25e:	1ad2      	subs	r2, r2, r3
 800b260:	2300      	movs	r3, #0
 800b262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b264:	6a21      	ldr	r1, [r4, #32]
 800b266:	4628      	mov	r0, r5
 800b268:	47b0      	blx	r6
 800b26a:	1c43      	adds	r3, r0, #1
 800b26c:	89a3      	ldrh	r3, [r4, #12]
 800b26e:	d106      	bne.n	800b27e <__sflush_r+0x62>
 800b270:	6829      	ldr	r1, [r5, #0]
 800b272:	291d      	cmp	r1, #29
 800b274:	d82b      	bhi.n	800b2ce <__sflush_r+0xb2>
 800b276:	4a2a      	ldr	r2, [pc, #168]	@ (800b320 <__sflush_r+0x104>)
 800b278:	40ca      	lsrs	r2, r1
 800b27a:	07d6      	lsls	r6, r2, #31
 800b27c:	d527      	bpl.n	800b2ce <__sflush_r+0xb2>
 800b27e:	2200      	movs	r2, #0
 800b280:	6062      	str	r2, [r4, #4]
 800b282:	04d9      	lsls	r1, r3, #19
 800b284:	6922      	ldr	r2, [r4, #16]
 800b286:	6022      	str	r2, [r4, #0]
 800b288:	d504      	bpl.n	800b294 <__sflush_r+0x78>
 800b28a:	1c42      	adds	r2, r0, #1
 800b28c:	d101      	bne.n	800b292 <__sflush_r+0x76>
 800b28e:	682b      	ldr	r3, [r5, #0]
 800b290:	b903      	cbnz	r3, 800b294 <__sflush_r+0x78>
 800b292:	6560      	str	r0, [r4, #84]	@ 0x54
 800b294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b296:	602f      	str	r7, [r5, #0]
 800b298:	b1b9      	cbz	r1, 800b2ca <__sflush_r+0xae>
 800b29a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b29e:	4299      	cmp	r1, r3
 800b2a0:	d002      	beq.n	800b2a8 <__sflush_r+0x8c>
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	f7ff fb40 	bl	800a928 <_free_r>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2ac:	e00d      	b.n	800b2ca <__sflush_r+0xae>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	47b0      	blx	r6
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	1c50      	adds	r0, r2, #1
 800b2b8:	d1c9      	bne.n	800b24e <__sflush_r+0x32>
 800b2ba:	682b      	ldr	r3, [r5, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d0c6      	beq.n	800b24e <__sflush_r+0x32>
 800b2c0:	2b1d      	cmp	r3, #29
 800b2c2:	d001      	beq.n	800b2c8 <__sflush_r+0xac>
 800b2c4:	2b16      	cmp	r3, #22
 800b2c6:	d11e      	bne.n	800b306 <__sflush_r+0xea>
 800b2c8:	602f      	str	r7, [r5, #0]
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	e022      	b.n	800b314 <__sflush_r+0xf8>
 800b2ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2d2:	b21b      	sxth	r3, r3
 800b2d4:	e01b      	b.n	800b30e <__sflush_r+0xf2>
 800b2d6:	690f      	ldr	r7, [r1, #16]
 800b2d8:	2f00      	cmp	r7, #0
 800b2da:	d0f6      	beq.n	800b2ca <__sflush_r+0xae>
 800b2dc:	0793      	lsls	r3, r2, #30
 800b2de:	680e      	ldr	r6, [r1, #0]
 800b2e0:	bf08      	it	eq
 800b2e2:	694b      	ldreq	r3, [r1, #20]
 800b2e4:	600f      	str	r7, [r1, #0]
 800b2e6:	bf18      	it	ne
 800b2e8:	2300      	movne	r3, #0
 800b2ea:	eba6 0807 	sub.w	r8, r6, r7
 800b2ee:	608b      	str	r3, [r1, #8]
 800b2f0:	f1b8 0f00 	cmp.w	r8, #0
 800b2f4:	dde9      	ble.n	800b2ca <__sflush_r+0xae>
 800b2f6:	6a21      	ldr	r1, [r4, #32]
 800b2f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b2fa:	4643      	mov	r3, r8
 800b2fc:	463a      	mov	r2, r7
 800b2fe:	4628      	mov	r0, r5
 800b300:	47b0      	blx	r6
 800b302:	2800      	cmp	r0, #0
 800b304:	dc08      	bgt.n	800b318 <__sflush_r+0xfc>
 800b306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b30a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b30e:	81a3      	strh	r3, [r4, #12]
 800b310:	f04f 30ff 	mov.w	r0, #4294967295
 800b314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b318:	4407      	add	r7, r0
 800b31a:	eba8 0800 	sub.w	r8, r8, r0
 800b31e:	e7e7      	b.n	800b2f0 <__sflush_r+0xd4>
 800b320:	20400001 	.word	0x20400001

0800b324 <_fflush_r>:
 800b324:	b538      	push	{r3, r4, r5, lr}
 800b326:	690b      	ldr	r3, [r1, #16]
 800b328:	4605      	mov	r5, r0
 800b32a:	460c      	mov	r4, r1
 800b32c:	b913      	cbnz	r3, 800b334 <_fflush_r+0x10>
 800b32e:	2500      	movs	r5, #0
 800b330:	4628      	mov	r0, r5
 800b332:	bd38      	pop	{r3, r4, r5, pc}
 800b334:	b118      	cbz	r0, 800b33e <_fflush_r+0x1a>
 800b336:	6a03      	ldr	r3, [r0, #32]
 800b338:	b90b      	cbnz	r3, 800b33e <_fflush_r+0x1a>
 800b33a:	f7fe fb93 	bl	8009a64 <__sinit>
 800b33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d0f3      	beq.n	800b32e <_fflush_r+0xa>
 800b346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b348:	07d0      	lsls	r0, r2, #31
 800b34a:	d404      	bmi.n	800b356 <_fflush_r+0x32>
 800b34c:	0599      	lsls	r1, r3, #22
 800b34e:	d402      	bmi.n	800b356 <_fflush_r+0x32>
 800b350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b352:	f7fe fc7e 	bl	8009c52 <__retarget_lock_acquire_recursive>
 800b356:	4628      	mov	r0, r5
 800b358:	4621      	mov	r1, r4
 800b35a:	f7ff ff5f 	bl	800b21c <__sflush_r>
 800b35e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b360:	07da      	lsls	r2, r3, #31
 800b362:	4605      	mov	r5, r0
 800b364:	d4e4      	bmi.n	800b330 <_fflush_r+0xc>
 800b366:	89a3      	ldrh	r3, [r4, #12]
 800b368:	059b      	lsls	r3, r3, #22
 800b36a:	d4e1      	bmi.n	800b330 <_fflush_r+0xc>
 800b36c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b36e:	f7fe fc71 	bl	8009c54 <__retarget_lock_release_recursive>
 800b372:	e7dd      	b.n	800b330 <_fflush_r+0xc>

0800b374 <_sbrk_r>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	4d06      	ldr	r5, [pc, #24]	@ (800b390 <_sbrk_r+0x1c>)
 800b378:	2300      	movs	r3, #0
 800b37a:	4604      	mov	r4, r0
 800b37c:	4608      	mov	r0, r1
 800b37e:	602b      	str	r3, [r5, #0]
 800b380:	f7f8 fa1c 	bl	80037bc <_sbrk>
 800b384:	1c43      	adds	r3, r0, #1
 800b386:	d102      	bne.n	800b38e <_sbrk_r+0x1a>
 800b388:	682b      	ldr	r3, [r5, #0]
 800b38a:	b103      	cbz	r3, 800b38e <_sbrk_r+0x1a>
 800b38c:	6023      	str	r3, [r4, #0]
 800b38e:	bd38      	pop	{r3, r4, r5, pc}
 800b390:	20000dfc 	.word	0x20000dfc

0800b394 <__assert_func>:
 800b394:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b396:	4614      	mov	r4, r2
 800b398:	461a      	mov	r2, r3
 800b39a:	4b09      	ldr	r3, [pc, #36]	@ (800b3c0 <__assert_func+0x2c>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4605      	mov	r5, r0
 800b3a0:	68d8      	ldr	r0, [r3, #12]
 800b3a2:	b14c      	cbz	r4, 800b3b8 <__assert_func+0x24>
 800b3a4:	4b07      	ldr	r3, [pc, #28]	@ (800b3c4 <__assert_func+0x30>)
 800b3a6:	9100      	str	r1, [sp, #0]
 800b3a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3ac:	4906      	ldr	r1, [pc, #24]	@ (800b3c8 <__assert_func+0x34>)
 800b3ae:	462b      	mov	r3, r5
 800b3b0:	f000 f842 	bl	800b438 <fiprintf>
 800b3b4:	f000 f852 	bl	800b45c <abort>
 800b3b8:	4b04      	ldr	r3, [pc, #16]	@ (800b3cc <__assert_func+0x38>)
 800b3ba:	461c      	mov	r4, r3
 800b3bc:	e7f3      	b.n	800b3a6 <__assert_func+0x12>
 800b3be:	bf00      	nop
 800b3c0:	2000001c 	.word	0x2000001c
 800b3c4:	0800bff8 	.word	0x0800bff8
 800b3c8:	0800c005 	.word	0x0800c005
 800b3cc:	0800c033 	.word	0x0800c033

0800b3d0 <_calloc_r>:
 800b3d0:	b570      	push	{r4, r5, r6, lr}
 800b3d2:	fba1 5402 	umull	r5, r4, r1, r2
 800b3d6:	b934      	cbnz	r4, 800b3e6 <_calloc_r+0x16>
 800b3d8:	4629      	mov	r1, r5
 800b3da:	f7ff fb19 	bl	800aa10 <_malloc_r>
 800b3de:	4606      	mov	r6, r0
 800b3e0:	b928      	cbnz	r0, 800b3ee <_calloc_r+0x1e>
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	bd70      	pop	{r4, r5, r6, pc}
 800b3e6:	220c      	movs	r2, #12
 800b3e8:	6002      	str	r2, [r0, #0]
 800b3ea:	2600      	movs	r6, #0
 800b3ec:	e7f9      	b.n	800b3e2 <_calloc_r+0x12>
 800b3ee:	462a      	mov	r2, r5
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	f7fe fbb0 	bl	8009b56 <memset>
 800b3f6:	e7f4      	b.n	800b3e2 <_calloc_r+0x12>

0800b3f8 <__ascii_mbtowc>:
 800b3f8:	b082      	sub	sp, #8
 800b3fa:	b901      	cbnz	r1, 800b3fe <__ascii_mbtowc+0x6>
 800b3fc:	a901      	add	r1, sp, #4
 800b3fe:	b142      	cbz	r2, 800b412 <__ascii_mbtowc+0x1a>
 800b400:	b14b      	cbz	r3, 800b416 <__ascii_mbtowc+0x1e>
 800b402:	7813      	ldrb	r3, [r2, #0]
 800b404:	600b      	str	r3, [r1, #0]
 800b406:	7812      	ldrb	r2, [r2, #0]
 800b408:	1e10      	subs	r0, r2, #0
 800b40a:	bf18      	it	ne
 800b40c:	2001      	movne	r0, #1
 800b40e:	b002      	add	sp, #8
 800b410:	4770      	bx	lr
 800b412:	4610      	mov	r0, r2
 800b414:	e7fb      	b.n	800b40e <__ascii_mbtowc+0x16>
 800b416:	f06f 0001 	mvn.w	r0, #1
 800b41a:	e7f8      	b.n	800b40e <__ascii_mbtowc+0x16>

0800b41c <__ascii_wctomb>:
 800b41c:	4603      	mov	r3, r0
 800b41e:	4608      	mov	r0, r1
 800b420:	b141      	cbz	r1, 800b434 <__ascii_wctomb+0x18>
 800b422:	2aff      	cmp	r2, #255	@ 0xff
 800b424:	d904      	bls.n	800b430 <__ascii_wctomb+0x14>
 800b426:	228a      	movs	r2, #138	@ 0x8a
 800b428:	601a      	str	r2, [r3, #0]
 800b42a:	f04f 30ff 	mov.w	r0, #4294967295
 800b42e:	4770      	bx	lr
 800b430:	700a      	strb	r2, [r1, #0]
 800b432:	2001      	movs	r0, #1
 800b434:	4770      	bx	lr
	...

0800b438 <fiprintf>:
 800b438:	b40e      	push	{r1, r2, r3}
 800b43a:	b503      	push	{r0, r1, lr}
 800b43c:	4601      	mov	r1, r0
 800b43e:	ab03      	add	r3, sp, #12
 800b440:	4805      	ldr	r0, [pc, #20]	@ (800b458 <fiprintf+0x20>)
 800b442:	f853 2b04 	ldr.w	r2, [r3], #4
 800b446:	6800      	ldr	r0, [r0, #0]
 800b448:	9301      	str	r3, [sp, #4]
 800b44a:	f000 f837 	bl	800b4bc <_vfiprintf_r>
 800b44e:	b002      	add	sp, #8
 800b450:	f85d eb04 	ldr.w	lr, [sp], #4
 800b454:	b003      	add	sp, #12
 800b456:	4770      	bx	lr
 800b458:	2000001c 	.word	0x2000001c

0800b45c <abort>:
 800b45c:	b508      	push	{r3, lr}
 800b45e:	2006      	movs	r0, #6
 800b460:	f000 fa00 	bl	800b864 <raise>
 800b464:	2001      	movs	r0, #1
 800b466:	f7f8 f931 	bl	80036cc <_exit>

0800b46a <__sfputc_r>:
 800b46a:	6893      	ldr	r3, [r2, #8]
 800b46c:	3b01      	subs	r3, #1
 800b46e:	2b00      	cmp	r3, #0
 800b470:	b410      	push	{r4}
 800b472:	6093      	str	r3, [r2, #8]
 800b474:	da08      	bge.n	800b488 <__sfputc_r+0x1e>
 800b476:	6994      	ldr	r4, [r2, #24]
 800b478:	42a3      	cmp	r3, r4
 800b47a:	db01      	blt.n	800b480 <__sfputc_r+0x16>
 800b47c:	290a      	cmp	r1, #10
 800b47e:	d103      	bne.n	800b488 <__sfputc_r+0x1e>
 800b480:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b484:	f000 b932 	b.w	800b6ec <__swbuf_r>
 800b488:	6813      	ldr	r3, [r2, #0]
 800b48a:	1c58      	adds	r0, r3, #1
 800b48c:	6010      	str	r0, [r2, #0]
 800b48e:	7019      	strb	r1, [r3, #0]
 800b490:	4608      	mov	r0, r1
 800b492:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b496:	4770      	bx	lr

0800b498 <__sfputs_r>:
 800b498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b49a:	4606      	mov	r6, r0
 800b49c:	460f      	mov	r7, r1
 800b49e:	4614      	mov	r4, r2
 800b4a0:	18d5      	adds	r5, r2, r3
 800b4a2:	42ac      	cmp	r4, r5
 800b4a4:	d101      	bne.n	800b4aa <__sfputs_r+0x12>
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	e007      	b.n	800b4ba <__sfputs_r+0x22>
 800b4aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ae:	463a      	mov	r2, r7
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f7ff ffda 	bl	800b46a <__sfputc_r>
 800b4b6:	1c43      	adds	r3, r0, #1
 800b4b8:	d1f3      	bne.n	800b4a2 <__sfputs_r+0xa>
 800b4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b4bc <_vfiprintf_r>:
 800b4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c0:	460d      	mov	r5, r1
 800b4c2:	b09d      	sub	sp, #116	@ 0x74
 800b4c4:	4614      	mov	r4, r2
 800b4c6:	4698      	mov	r8, r3
 800b4c8:	4606      	mov	r6, r0
 800b4ca:	b118      	cbz	r0, 800b4d4 <_vfiprintf_r+0x18>
 800b4cc:	6a03      	ldr	r3, [r0, #32]
 800b4ce:	b90b      	cbnz	r3, 800b4d4 <_vfiprintf_r+0x18>
 800b4d0:	f7fe fac8 	bl	8009a64 <__sinit>
 800b4d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4d6:	07d9      	lsls	r1, r3, #31
 800b4d8:	d405      	bmi.n	800b4e6 <_vfiprintf_r+0x2a>
 800b4da:	89ab      	ldrh	r3, [r5, #12]
 800b4dc:	059a      	lsls	r2, r3, #22
 800b4de:	d402      	bmi.n	800b4e6 <_vfiprintf_r+0x2a>
 800b4e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4e2:	f7fe fbb6 	bl	8009c52 <__retarget_lock_acquire_recursive>
 800b4e6:	89ab      	ldrh	r3, [r5, #12]
 800b4e8:	071b      	lsls	r3, r3, #28
 800b4ea:	d501      	bpl.n	800b4f0 <_vfiprintf_r+0x34>
 800b4ec:	692b      	ldr	r3, [r5, #16]
 800b4ee:	b99b      	cbnz	r3, 800b518 <_vfiprintf_r+0x5c>
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	f000 f938 	bl	800b768 <__swsetup_r>
 800b4f8:	b170      	cbz	r0, 800b518 <_vfiprintf_r+0x5c>
 800b4fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4fc:	07dc      	lsls	r4, r3, #31
 800b4fe:	d504      	bpl.n	800b50a <_vfiprintf_r+0x4e>
 800b500:	f04f 30ff 	mov.w	r0, #4294967295
 800b504:	b01d      	add	sp, #116	@ 0x74
 800b506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b50a:	89ab      	ldrh	r3, [r5, #12]
 800b50c:	0598      	lsls	r0, r3, #22
 800b50e:	d4f7      	bmi.n	800b500 <_vfiprintf_r+0x44>
 800b510:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b512:	f7fe fb9f 	bl	8009c54 <__retarget_lock_release_recursive>
 800b516:	e7f3      	b.n	800b500 <_vfiprintf_r+0x44>
 800b518:	2300      	movs	r3, #0
 800b51a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b51c:	2320      	movs	r3, #32
 800b51e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b522:	f8cd 800c 	str.w	r8, [sp, #12]
 800b526:	2330      	movs	r3, #48	@ 0x30
 800b528:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b6d8 <_vfiprintf_r+0x21c>
 800b52c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b530:	f04f 0901 	mov.w	r9, #1
 800b534:	4623      	mov	r3, r4
 800b536:	469a      	mov	sl, r3
 800b538:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b53c:	b10a      	cbz	r2, 800b542 <_vfiprintf_r+0x86>
 800b53e:	2a25      	cmp	r2, #37	@ 0x25
 800b540:	d1f9      	bne.n	800b536 <_vfiprintf_r+0x7a>
 800b542:	ebba 0b04 	subs.w	fp, sl, r4
 800b546:	d00b      	beq.n	800b560 <_vfiprintf_r+0xa4>
 800b548:	465b      	mov	r3, fp
 800b54a:	4622      	mov	r2, r4
 800b54c:	4629      	mov	r1, r5
 800b54e:	4630      	mov	r0, r6
 800b550:	f7ff ffa2 	bl	800b498 <__sfputs_r>
 800b554:	3001      	adds	r0, #1
 800b556:	f000 80a7 	beq.w	800b6a8 <_vfiprintf_r+0x1ec>
 800b55a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b55c:	445a      	add	r2, fp
 800b55e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b560:	f89a 3000 	ldrb.w	r3, [sl]
 800b564:	2b00      	cmp	r3, #0
 800b566:	f000 809f 	beq.w	800b6a8 <_vfiprintf_r+0x1ec>
 800b56a:	2300      	movs	r3, #0
 800b56c:	f04f 32ff 	mov.w	r2, #4294967295
 800b570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b574:	f10a 0a01 	add.w	sl, sl, #1
 800b578:	9304      	str	r3, [sp, #16]
 800b57a:	9307      	str	r3, [sp, #28]
 800b57c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b580:	931a      	str	r3, [sp, #104]	@ 0x68
 800b582:	4654      	mov	r4, sl
 800b584:	2205      	movs	r2, #5
 800b586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b58a:	4853      	ldr	r0, [pc, #332]	@ (800b6d8 <_vfiprintf_r+0x21c>)
 800b58c:	f7f4 fe40 	bl	8000210 <memchr>
 800b590:	9a04      	ldr	r2, [sp, #16]
 800b592:	b9d8      	cbnz	r0, 800b5cc <_vfiprintf_r+0x110>
 800b594:	06d1      	lsls	r1, r2, #27
 800b596:	bf44      	itt	mi
 800b598:	2320      	movmi	r3, #32
 800b59a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b59e:	0713      	lsls	r3, r2, #28
 800b5a0:	bf44      	itt	mi
 800b5a2:	232b      	movmi	r3, #43	@ 0x2b
 800b5a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5ae:	d015      	beq.n	800b5dc <_vfiprintf_r+0x120>
 800b5b0:	9a07      	ldr	r2, [sp, #28]
 800b5b2:	4654      	mov	r4, sl
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	f04f 0c0a 	mov.w	ip, #10
 800b5ba:	4621      	mov	r1, r4
 800b5bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5c0:	3b30      	subs	r3, #48	@ 0x30
 800b5c2:	2b09      	cmp	r3, #9
 800b5c4:	d94b      	bls.n	800b65e <_vfiprintf_r+0x1a2>
 800b5c6:	b1b0      	cbz	r0, 800b5f6 <_vfiprintf_r+0x13a>
 800b5c8:	9207      	str	r2, [sp, #28]
 800b5ca:	e014      	b.n	800b5f6 <_vfiprintf_r+0x13a>
 800b5cc:	eba0 0308 	sub.w	r3, r0, r8
 800b5d0:	fa09 f303 	lsl.w	r3, r9, r3
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	9304      	str	r3, [sp, #16]
 800b5d8:	46a2      	mov	sl, r4
 800b5da:	e7d2      	b.n	800b582 <_vfiprintf_r+0xc6>
 800b5dc:	9b03      	ldr	r3, [sp, #12]
 800b5de:	1d19      	adds	r1, r3, #4
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	9103      	str	r1, [sp, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	bfbb      	ittet	lt
 800b5e8:	425b      	neglt	r3, r3
 800b5ea:	f042 0202 	orrlt.w	r2, r2, #2
 800b5ee:	9307      	strge	r3, [sp, #28]
 800b5f0:	9307      	strlt	r3, [sp, #28]
 800b5f2:	bfb8      	it	lt
 800b5f4:	9204      	strlt	r2, [sp, #16]
 800b5f6:	7823      	ldrb	r3, [r4, #0]
 800b5f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5fa:	d10a      	bne.n	800b612 <_vfiprintf_r+0x156>
 800b5fc:	7863      	ldrb	r3, [r4, #1]
 800b5fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800b600:	d132      	bne.n	800b668 <_vfiprintf_r+0x1ac>
 800b602:	9b03      	ldr	r3, [sp, #12]
 800b604:	1d1a      	adds	r2, r3, #4
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	9203      	str	r2, [sp, #12]
 800b60a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b60e:	3402      	adds	r4, #2
 800b610:	9305      	str	r3, [sp, #20]
 800b612:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b6e8 <_vfiprintf_r+0x22c>
 800b616:	7821      	ldrb	r1, [r4, #0]
 800b618:	2203      	movs	r2, #3
 800b61a:	4650      	mov	r0, sl
 800b61c:	f7f4 fdf8 	bl	8000210 <memchr>
 800b620:	b138      	cbz	r0, 800b632 <_vfiprintf_r+0x176>
 800b622:	9b04      	ldr	r3, [sp, #16]
 800b624:	eba0 000a 	sub.w	r0, r0, sl
 800b628:	2240      	movs	r2, #64	@ 0x40
 800b62a:	4082      	lsls	r2, r0
 800b62c:	4313      	orrs	r3, r2
 800b62e:	3401      	adds	r4, #1
 800b630:	9304      	str	r3, [sp, #16]
 800b632:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b636:	4829      	ldr	r0, [pc, #164]	@ (800b6dc <_vfiprintf_r+0x220>)
 800b638:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b63c:	2206      	movs	r2, #6
 800b63e:	f7f4 fde7 	bl	8000210 <memchr>
 800b642:	2800      	cmp	r0, #0
 800b644:	d03f      	beq.n	800b6c6 <_vfiprintf_r+0x20a>
 800b646:	4b26      	ldr	r3, [pc, #152]	@ (800b6e0 <_vfiprintf_r+0x224>)
 800b648:	bb1b      	cbnz	r3, 800b692 <_vfiprintf_r+0x1d6>
 800b64a:	9b03      	ldr	r3, [sp, #12]
 800b64c:	3307      	adds	r3, #7
 800b64e:	f023 0307 	bic.w	r3, r3, #7
 800b652:	3308      	adds	r3, #8
 800b654:	9303      	str	r3, [sp, #12]
 800b656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b658:	443b      	add	r3, r7
 800b65a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b65c:	e76a      	b.n	800b534 <_vfiprintf_r+0x78>
 800b65e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b662:	460c      	mov	r4, r1
 800b664:	2001      	movs	r0, #1
 800b666:	e7a8      	b.n	800b5ba <_vfiprintf_r+0xfe>
 800b668:	2300      	movs	r3, #0
 800b66a:	3401      	adds	r4, #1
 800b66c:	9305      	str	r3, [sp, #20]
 800b66e:	4619      	mov	r1, r3
 800b670:	f04f 0c0a 	mov.w	ip, #10
 800b674:	4620      	mov	r0, r4
 800b676:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b67a:	3a30      	subs	r2, #48	@ 0x30
 800b67c:	2a09      	cmp	r2, #9
 800b67e:	d903      	bls.n	800b688 <_vfiprintf_r+0x1cc>
 800b680:	2b00      	cmp	r3, #0
 800b682:	d0c6      	beq.n	800b612 <_vfiprintf_r+0x156>
 800b684:	9105      	str	r1, [sp, #20]
 800b686:	e7c4      	b.n	800b612 <_vfiprintf_r+0x156>
 800b688:	fb0c 2101 	mla	r1, ip, r1, r2
 800b68c:	4604      	mov	r4, r0
 800b68e:	2301      	movs	r3, #1
 800b690:	e7f0      	b.n	800b674 <_vfiprintf_r+0x1b8>
 800b692:	ab03      	add	r3, sp, #12
 800b694:	9300      	str	r3, [sp, #0]
 800b696:	462a      	mov	r2, r5
 800b698:	4b12      	ldr	r3, [pc, #72]	@ (800b6e4 <_vfiprintf_r+0x228>)
 800b69a:	a904      	add	r1, sp, #16
 800b69c:	4630      	mov	r0, r6
 800b69e:	f7fd fd9f 	bl	80091e0 <_printf_float>
 800b6a2:	4607      	mov	r7, r0
 800b6a4:	1c78      	adds	r0, r7, #1
 800b6a6:	d1d6      	bne.n	800b656 <_vfiprintf_r+0x19a>
 800b6a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6aa:	07d9      	lsls	r1, r3, #31
 800b6ac:	d405      	bmi.n	800b6ba <_vfiprintf_r+0x1fe>
 800b6ae:	89ab      	ldrh	r3, [r5, #12]
 800b6b0:	059a      	lsls	r2, r3, #22
 800b6b2:	d402      	bmi.n	800b6ba <_vfiprintf_r+0x1fe>
 800b6b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6b6:	f7fe facd 	bl	8009c54 <__retarget_lock_release_recursive>
 800b6ba:	89ab      	ldrh	r3, [r5, #12]
 800b6bc:	065b      	lsls	r3, r3, #25
 800b6be:	f53f af1f 	bmi.w	800b500 <_vfiprintf_r+0x44>
 800b6c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6c4:	e71e      	b.n	800b504 <_vfiprintf_r+0x48>
 800b6c6:	ab03      	add	r3, sp, #12
 800b6c8:	9300      	str	r3, [sp, #0]
 800b6ca:	462a      	mov	r2, r5
 800b6cc:	4b05      	ldr	r3, [pc, #20]	@ (800b6e4 <_vfiprintf_r+0x228>)
 800b6ce:	a904      	add	r1, sp, #16
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	f7fe f81d 	bl	8009710 <_printf_i>
 800b6d6:	e7e4      	b.n	800b6a2 <_vfiprintf_r+0x1e6>
 800b6d8:	0800c034 	.word	0x0800c034
 800b6dc:	0800c03e 	.word	0x0800c03e
 800b6e0:	080091e1 	.word	0x080091e1
 800b6e4:	0800b499 	.word	0x0800b499
 800b6e8:	0800c03a 	.word	0x0800c03a

0800b6ec <__swbuf_r>:
 800b6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ee:	460e      	mov	r6, r1
 800b6f0:	4614      	mov	r4, r2
 800b6f2:	4605      	mov	r5, r0
 800b6f4:	b118      	cbz	r0, 800b6fe <__swbuf_r+0x12>
 800b6f6:	6a03      	ldr	r3, [r0, #32]
 800b6f8:	b90b      	cbnz	r3, 800b6fe <__swbuf_r+0x12>
 800b6fa:	f7fe f9b3 	bl	8009a64 <__sinit>
 800b6fe:	69a3      	ldr	r3, [r4, #24]
 800b700:	60a3      	str	r3, [r4, #8]
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	071a      	lsls	r2, r3, #28
 800b706:	d501      	bpl.n	800b70c <__swbuf_r+0x20>
 800b708:	6923      	ldr	r3, [r4, #16]
 800b70a:	b943      	cbnz	r3, 800b71e <__swbuf_r+0x32>
 800b70c:	4621      	mov	r1, r4
 800b70e:	4628      	mov	r0, r5
 800b710:	f000 f82a 	bl	800b768 <__swsetup_r>
 800b714:	b118      	cbz	r0, 800b71e <__swbuf_r+0x32>
 800b716:	f04f 37ff 	mov.w	r7, #4294967295
 800b71a:	4638      	mov	r0, r7
 800b71c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b71e:	6823      	ldr	r3, [r4, #0]
 800b720:	6922      	ldr	r2, [r4, #16]
 800b722:	1a98      	subs	r0, r3, r2
 800b724:	6963      	ldr	r3, [r4, #20]
 800b726:	b2f6      	uxtb	r6, r6
 800b728:	4283      	cmp	r3, r0
 800b72a:	4637      	mov	r7, r6
 800b72c:	dc05      	bgt.n	800b73a <__swbuf_r+0x4e>
 800b72e:	4621      	mov	r1, r4
 800b730:	4628      	mov	r0, r5
 800b732:	f7ff fdf7 	bl	800b324 <_fflush_r>
 800b736:	2800      	cmp	r0, #0
 800b738:	d1ed      	bne.n	800b716 <__swbuf_r+0x2a>
 800b73a:	68a3      	ldr	r3, [r4, #8]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	60a3      	str	r3, [r4, #8]
 800b740:	6823      	ldr	r3, [r4, #0]
 800b742:	1c5a      	adds	r2, r3, #1
 800b744:	6022      	str	r2, [r4, #0]
 800b746:	701e      	strb	r6, [r3, #0]
 800b748:	6962      	ldr	r2, [r4, #20]
 800b74a:	1c43      	adds	r3, r0, #1
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d004      	beq.n	800b75a <__swbuf_r+0x6e>
 800b750:	89a3      	ldrh	r3, [r4, #12]
 800b752:	07db      	lsls	r3, r3, #31
 800b754:	d5e1      	bpl.n	800b71a <__swbuf_r+0x2e>
 800b756:	2e0a      	cmp	r6, #10
 800b758:	d1df      	bne.n	800b71a <__swbuf_r+0x2e>
 800b75a:	4621      	mov	r1, r4
 800b75c:	4628      	mov	r0, r5
 800b75e:	f7ff fde1 	bl	800b324 <_fflush_r>
 800b762:	2800      	cmp	r0, #0
 800b764:	d0d9      	beq.n	800b71a <__swbuf_r+0x2e>
 800b766:	e7d6      	b.n	800b716 <__swbuf_r+0x2a>

0800b768 <__swsetup_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	4b29      	ldr	r3, [pc, #164]	@ (800b810 <__swsetup_r+0xa8>)
 800b76c:	4605      	mov	r5, r0
 800b76e:	6818      	ldr	r0, [r3, #0]
 800b770:	460c      	mov	r4, r1
 800b772:	b118      	cbz	r0, 800b77c <__swsetup_r+0x14>
 800b774:	6a03      	ldr	r3, [r0, #32]
 800b776:	b90b      	cbnz	r3, 800b77c <__swsetup_r+0x14>
 800b778:	f7fe f974 	bl	8009a64 <__sinit>
 800b77c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b780:	0719      	lsls	r1, r3, #28
 800b782:	d422      	bmi.n	800b7ca <__swsetup_r+0x62>
 800b784:	06da      	lsls	r2, r3, #27
 800b786:	d407      	bmi.n	800b798 <__swsetup_r+0x30>
 800b788:	2209      	movs	r2, #9
 800b78a:	602a      	str	r2, [r5, #0]
 800b78c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b790:	81a3      	strh	r3, [r4, #12]
 800b792:	f04f 30ff 	mov.w	r0, #4294967295
 800b796:	e033      	b.n	800b800 <__swsetup_r+0x98>
 800b798:	0758      	lsls	r0, r3, #29
 800b79a:	d512      	bpl.n	800b7c2 <__swsetup_r+0x5a>
 800b79c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b79e:	b141      	cbz	r1, 800b7b2 <__swsetup_r+0x4a>
 800b7a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7a4:	4299      	cmp	r1, r3
 800b7a6:	d002      	beq.n	800b7ae <__swsetup_r+0x46>
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	f7ff f8bd 	bl	800a928 <_free_r>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7b2:	89a3      	ldrh	r3, [r4, #12]
 800b7b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b7b8:	81a3      	strh	r3, [r4, #12]
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	6063      	str	r3, [r4, #4]
 800b7be:	6923      	ldr	r3, [r4, #16]
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	89a3      	ldrh	r3, [r4, #12]
 800b7c4:	f043 0308 	orr.w	r3, r3, #8
 800b7c8:	81a3      	strh	r3, [r4, #12]
 800b7ca:	6923      	ldr	r3, [r4, #16]
 800b7cc:	b94b      	cbnz	r3, 800b7e2 <__swsetup_r+0x7a>
 800b7ce:	89a3      	ldrh	r3, [r4, #12]
 800b7d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b7d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7d8:	d003      	beq.n	800b7e2 <__swsetup_r+0x7a>
 800b7da:	4621      	mov	r1, r4
 800b7dc:	4628      	mov	r0, r5
 800b7de:	f000 f883 	bl	800b8e8 <__smakebuf_r>
 800b7e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7e6:	f013 0201 	ands.w	r2, r3, #1
 800b7ea:	d00a      	beq.n	800b802 <__swsetup_r+0x9a>
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	60a2      	str	r2, [r4, #8]
 800b7f0:	6962      	ldr	r2, [r4, #20]
 800b7f2:	4252      	negs	r2, r2
 800b7f4:	61a2      	str	r2, [r4, #24]
 800b7f6:	6922      	ldr	r2, [r4, #16]
 800b7f8:	b942      	cbnz	r2, 800b80c <__swsetup_r+0xa4>
 800b7fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7fe:	d1c5      	bne.n	800b78c <__swsetup_r+0x24>
 800b800:	bd38      	pop	{r3, r4, r5, pc}
 800b802:	0799      	lsls	r1, r3, #30
 800b804:	bf58      	it	pl
 800b806:	6962      	ldrpl	r2, [r4, #20]
 800b808:	60a2      	str	r2, [r4, #8]
 800b80a:	e7f4      	b.n	800b7f6 <__swsetup_r+0x8e>
 800b80c:	2000      	movs	r0, #0
 800b80e:	e7f7      	b.n	800b800 <__swsetup_r+0x98>
 800b810:	2000001c 	.word	0x2000001c

0800b814 <_raise_r>:
 800b814:	291f      	cmp	r1, #31
 800b816:	b538      	push	{r3, r4, r5, lr}
 800b818:	4605      	mov	r5, r0
 800b81a:	460c      	mov	r4, r1
 800b81c:	d904      	bls.n	800b828 <_raise_r+0x14>
 800b81e:	2316      	movs	r3, #22
 800b820:	6003      	str	r3, [r0, #0]
 800b822:	f04f 30ff 	mov.w	r0, #4294967295
 800b826:	bd38      	pop	{r3, r4, r5, pc}
 800b828:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b82a:	b112      	cbz	r2, 800b832 <_raise_r+0x1e>
 800b82c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b830:	b94b      	cbnz	r3, 800b846 <_raise_r+0x32>
 800b832:	4628      	mov	r0, r5
 800b834:	f000 f830 	bl	800b898 <_getpid_r>
 800b838:	4622      	mov	r2, r4
 800b83a:	4601      	mov	r1, r0
 800b83c:	4628      	mov	r0, r5
 800b83e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b842:	f000 b817 	b.w	800b874 <_kill_r>
 800b846:	2b01      	cmp	r3, #1
 800b848:	d00a      	beq.n	800b860 <_raise_r+0x4c>
 800b84a:	1c59      	adds	r1, r3, #1
 800b84c:	d103      	bne.n	800b856 <_raise_r+0x42>
 800b84e:	2316      	movs	r3, #22
 800b850:	6003      	str	r3, [r0, #0]
 800b852:	2001      	movs	r0, #1
 800b854:	e7e7      	b.n	800b826 <_raise_r+0x12>
 800b856:	2100      	movs	r1, #0
 800b858:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b85c:	4620      	mov	r0, r4
 800b85e:	4798      	blx	r3
 800b860:	2000      	movs	r0, #0
 800b862:	e7e0      	b.n	800b826 <_raise_r+0x12>

0800b864 <raise>:
 800b864:	4b02      	ldr	r3, [pc, #8]	@ (800b870 <raise+0xc>)
 800b866:	4601      	mov	r1, r0
 800b868:	6818      	ldr	r0, [r3, #0]
 800b86a:	f7ff bfd3 	b.w	800b814 <_raise_r>
 800b86e:	bf00      	nop
 800b870:	2000001c 	.word	0x2000001c

0800b874 <_kill_r>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	4d07      	ldr	r5, [pc, #28]	@ (800b894 <_kill_r+0x20>)
 800b878:	2300      	movs	r3, #0
 800b87a:	4604      	mov	r4, r0
 800b87c:	4608      	mov	r0, r1
 800b87e:	4611      	mov	r1, r2
 800b880:	602b      	str	r3, [r5, #0]
 800b882:	f7f7 ff13 	bl	80036ac <_kill>
 800b886:	1c43      	adds	r3, r0, #1
 800b888:	d102      	bne.n	800b890 <_kill_r+0x1c>
 800b88a:	682b      	ldr	r3, [r5, #0]
 800b88c:	b103      	cbz	r3, 800b890 <_kill_r+0x1c>
 800b88e:	6023      	str	r3, [r4, #0]
 800b890:	bd38      	pop	{r3, r4, r5, pc}
 800b892:	bf00      	nop
 800b894:	20000dfc 	.word	0x20000dfc

0800b898 <_getpid_r>:
 800b898:	f7f7 bf00 	b.w	800369c <_getpid>

0800b89c <__swhatbuf_r>:
 800b89c:	b570      	push	{r4, r5, r6, lr}
 800b89e:	460c      	mov	r4, r1
 800b8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a4:	2900      	cmp	r1, #0
 800b8a6:	b096      	sub	sp, #88	@ 0x58
 800b8a8:	4615      	mov	r5, r2
 800b8aa:	461e      	mov	r6, r3
 800b8ac:	da0d      	bge.n	800b8ca <__swhatbuf_r+0x2e>
 800b8ae:	89a3      	ldrh	r3, [r4, #12]
 800b8b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b8b4:	f04f 0100 	mov.w	r1, #0
 800b8b8:	bf14      	ite	ne
 800b8ba:	2340      	movne	r3, #64	@ 0x40
 800b8bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	6031      	str	r1, [r6, #0]
 800b8c4:	602b      	str	r3, [r5, #0]
 800b8c6:	b016      	add	sp, #88	@ 0x58
 800b8c8:	bd70      	pop	{r4, r5, r6, pc}
 800b8ca:	466a      	mov	r2, sp
 800b8cc:	f000 f848 	bl	800b960 <_fstat_r>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	dbec      	blt.n	800b8ae <__swhatbuf_r+0x12>
 800b8d4:	9901      	ldr	r1, [sp, #4]
 800b8d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b8da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b8de:	4259      	negs	r1, r3
 800b8e0:	4159      	adcs	r1, r3
 800b8e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8e6:	e7eb      	b.n	800b8c0 <__swhatbuf_r+0x24>

0800b8e8 <__smakebuf_r>:
 800b8e8:	898b      	ldrh	r3, [r1, #12]
 800b8ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8ec:	079d      	lsls	r5, r3, #30
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	460c      	mov	r4, r1
 800b8f2:	d507      	bpl.n	800b904 <__smakebuf_r+0x1c>
 800b8f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b8f8:	6023      	str	r3, [r4, #0]
 800b8fa:	6123      	str	r3, [r4, #16]
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	6163      	str	r3, [r4, #20]
 800b900:	b003      	add	sp, #12
 800b902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b904:	ab01      	add	r3, sp, #4
 800b906:	466a      	mov	r2, sp
 800b908:	f7ff ffc8 	bl	800b89c <__swhatbuf_r>
 800b90c:	9f00      	ldr	r7, [sp, #0]
 800b90e:	4605      	mov	r5, r0
 800b910:	4639      	mov	r1, r7
 800b912:	4630      	mov	r0, r6
 800b914:	f7ff f87c 	bl	800aa10 <_malloc_r>
 800b918:	b948      	cbnz	r0, 800b92e <__smakebuf_r+0x46>
 800b91a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b91e:	059a      	lsls	r2, r3, #22
 800b920:	d4ee      	bmi.n	800b900 <__smakebuf_r+0x18>
 800b922:	f023 0303 	bic.w	r3, r3, #3
 800b926:	f043 0302 	orr.w	r3, r3, #2
 800b92a:	81a3      	strh	r3, [r4, #12]
 800b92c:	e7e2      	b.n	800b8f4 <__smakebuf_r+0xc>
 800b92e:	89a3      	ldrh	r3, [r4, #12]
 800b930:	6020      	str	r0, [r4, #0]
 800b932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b936:	81a3      	strh	r3, [r4, #12]
 800b938:	9b01      	ldr	r3, [sp, #4]
 800b93a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b93e:	b15b      	cbz	r3, 800b958 <__smakebuf_r+0x70>
 800b940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b944:	4630      	mov	r0, r6
 800b946:	f000 f81d 	bl	800b984 <_isatty_r>
 800b94a:	b128      	cbz	r0, 800b958 <__smakebuf_r+0x70>
 800b94c:	89a3      	ldrh	r3, [r4, #12]
 800b94e:	f023 0303 	bic.w	r3, r3, #3
 800b952:	f043 0301 	orr.w	r3, r3, #1
 800b956:	81a3      	strh	r3, [r4, #12]
 800b958:	89a3      	ldrh	r3, [r4, #12]
 800b95a:	431d      	orrs	r5, r3
 800b95c:	81a5      	strh	r5, [r4, #12]
 800b95e:	e7cf      	b.n	800b900 <__smakebuf_r+0x18>

0800b960 <_fstat_r>:
 800b960:	b538      	push	{r3, r4, r5, lr}
 800b962:	4d07      	ldr	r5, [pc, #28]	@ (800b980 <_fstat_r+0x20>)
 800b964:	2300      	movs	r3, #0
 800b966:	4604      	mov	r4, r0
 800b968:	4608      	mov	r0, r1
 800b96a:	4611      	mov	r1, r2
 800b96c:	602b      	str	r3, [r5, #0]
 800b96e:	f7f7 fefd 	bl	800376c <_fstat>
 800b972:	1c43      	adds	r3, r0, #1
 800b974:	d102      	bne.n	800b97c <_fstat_r+0x1c>
 800b976:	682b      	ldr	r3, [r5, #0]
 800b978:	b103      	cbz	r3, 800b97c <_fstat_r+0x1c>
 800b97a:	6023      	str	r3, [r4, #0]
 800b97c:	bd38      	pop	{r3, r4, r5, pc}
 800b97e:	bf00      	nop
 800b980:	20000dfc 	.word	0x20000dfc

0800b984 <_isatty_r>:
 800b984:	b538      	push	{r3, r4, r5, lr}
 800b986:	4d06      	ldr	r5, [pc, #24]	@ (800b9a0 <_isatty_r+0x1c>)
 800b988:	2300      	movs	r3, #0
 800b98a:	4604      	mov	r4, r0
 800b98c:	4608      	mov	r0, r1
 800b98e:	602b      	str	r3, [r5, #0]
 800b990:	f7f7 fefc 	bl	800378c <_isatty>
 800b994:	1c43      	adds	r3, r0, #1
 800b996:	d102      	bne.n	800b99e <_isatty_r+0x1a>
 800b998:	682b      	ldr	r3, [r5, #0]
 800b99a:	b103      	cbz	r3, 800b99e <_isatty_r+0x1a>
 800b99c:	6023      	str	r3, [r4, #0]
 800b99e:	bd38      	pop	{r3, r4, r5, pc}
 800b9a0:	20000dfc 	.word	0x20000dfc

0800b9a4 <fmaxf>:
 800b9a4:	b508      	push	{r3, lr}
 800b9a6:	ed2d 8b02 	vpush	{d8}
 800b9aa:	eeb0 8a40 	vmov.f32	s16, s0
 800b9ae:	eef0 8a60 	vmov.f32	s17, s1
 800b9b2:	f000 f831 	bl	800ba18 <__fpclassifyf>
 800b9b6:	b930      	cbnz	r0, 800b9c6 <fmaxf+0x22>
 800b9b8:	eeb0 8a68 	vmov.f32	s16, s17
 800b9bc:	eeb0 0a48 	vmov.f32	s0, s16
 800b9c0:	ecbd 8b02 	vpop	{d8}
 800b9c4:	bd08      	pop	{r3, pc}
 800b9c6:	eeb0 0a68 	vmov.f32	s0, s17
 800b9ca:	f000 f825 	bl	800ba18 <__fpclassifyf>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d0f4      	beq.n	800b9bc <fmaxf+0x18>
 800b9d2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9da:	dded      	ble.n	800b9b8 <fmaxf+0x14>
 800b9dc:	e7ee      	b.n	800b9bc <fmaxf+0x18>

0800b9de <fminf>:
 800b9de:	b508      	push	{r3, lr}
 800b9e0:	ed2d 8b02 	vpush	{d8}
 800b9e4:	eeb0 8a40 	vmov.f32	s16, s0
 800b9e8:	eef0 8a60 	vmov.f32	s17, s1
 800b9ec:	f000 f814 	bl	800ba18 <__fpclassifyf>
 800b9f0:	b930      	cbnz	r0, 800ba00 <fminf+0x22>
 800b9f2:	eeb0 8a68 	vmov.f32	s16, s17
 800b9f6:	eeb0 0a48 	vmov.f32	s0, s16
 800b9fa:	ecbd 8b02 	vpop	{d8}
 800b9fe:	bd08      	pop	{r3, pc}
 800ba00:	eeb0 0a68 	vmov.f32	s0, s17
 800ba04:	f000 f808 	bl	800ba18 <__fpclassifyf>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d0f4      	beq.n	800b9f6 <fminf+0x18>
 800ba0c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ba10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba14:	d5ed      	bpl.n	800b9f2 <fminf+0x14>
 800ba16:	e7ee      	b.n	800b9f6 <fminf+0x18>

0800ba18 <__fpclassifyf>:
 800ba18:	ee10 3a10 	vmov	r3, s0
 800ba1c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800ba20:	d00d      	beq.n	800ba3e <__fpclassifyf+0x26>
 800ba22:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800ba26:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800ba2a:	d30a      	bcc.n	800ba42 <__fpclassifyf+0x2a>
 800ba2c:	4b07      	ldr	r3, [pc, #28]	@ (800ba4c <__fpclassifyf+0x34>)
 800ba2e:	1e42      	subs	r2, r0, #1
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d908      	bls.n	800ba46 <__fpclassifyf+0x2e>
 800ba34:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800ba38:	4258      	negs	r0, r3
 800ba3a:	4158      	adcs	r0, r3
 800ba3c:	4770      	bx	lr
 800ba3e:	2002      	movs	r0, #2
 800ba40:	4770      	bx	lr
 800ba42:	2004      	movs	r0, #4
 800ba44:	4770      	bx	lr
 800ba46:	2003      	movs	r0, #3
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	007ffffe 	.word	0x007ffffe

0800ba50 <_init>:
 800ba50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba52:	bf00      	nop
 800ba54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba56:	bc08      	pop	{r3}
 800ba58:	469e      	mov	lr, r3
 800ba5a:	4770      	bx	lr

0800ba5c <_fini>:
 800ba5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5e:	bf00      	nop
 800ba60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba62:	bc08      	pop	{r3}
 800ba64:	469e      	mov	lr, r3
 800ba66:	4770      	bx	lr
