
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab68  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  0800ad38  0800ad38  0000bd38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b50c  0800b50c  0000d1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b50c  0800b50c  0000c50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b514  0800b514  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b514  0800b514  0000c514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b518  0800b518  0000c518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b51c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aac  200001d8  0800b6f4  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c84  0800b6f4  0000dc84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199f6  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000430b  00000000  00000000  00026bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  0002af10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000130d  00000000  00000000  0002c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274f8  00000000  00000000  0002daf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021f84  00000000  00000000  00054fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8b82  00000000  00000000  00076f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015faf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007600  00000000  00000000  0015fb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  00167138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad20 	.word	0x0800ad20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800ad20 	.word	0x0800ad20

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <ProcessCommand>:
}

/**
 * @brief Process received command
 */
void ProcessCommand(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  switch (rxCmd) {
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <ProcessCommand+0x5c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	dc0f      	bgt.n	8000fe0 <ProcessCommand+0x2c>
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	dd20      	ble.n	8001006 <ProcessCommand+0x52>
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d81d      	bhi.n	8001006 <ProcessCommand+0x52>
 8000fca:	a201      	add	r2, pc, #4	@ (adr r2, 8000fd0 <ProcessCommand+0x1c>)
 8000fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd0:	08000fe7 	.word	0x08000fe7
 8000fd4:	08000fef 	.word	0x08000fef
 8000fd8:	08000ff7 	.word	0x08000ff7
 8000fdc:	08000fff 	.word	0x08000fff
 8000fe0:	2b50      	cmp	r3, #80	@ 0x50
 8000fe2:	d012      	beq.n	800100a <ProcessCommand+0x56>
      //StopRobot();
      break;

    default:
      /* Unknown command */
      break;
 8000fe4:	e00f      	b.n	8001006 <ProcessCommand+0x52>
      HandleLineDetection(rxBuffer);
 8000fe6:	480b      	ldr	r0, [pc, #44]	@ (8001014 <ProcessCommand+0x60>)
 8000fe8:	f001 fc2a 	bl	8002840 <HandleLineDetection>
      break;
 8000fec:	e00e      	b.n	800100c <ProcessCommand+0x58>
      HandleGridPosition(rxBuffer);
 8000fee:	4809      	ldr	r0, [pc, #36]	@ (8001014 <ProcessCommand+0x60>)
 8000ff0:	f001 fc36 	bl	8002860 <HandleGridPosition>
      break;
 8000ff4:	e00a      	b.n	800100c <ProcessCommand+0x58>
      HandleColorDetection(rxBuffer);
 8000ff6:	4807      	ldr	r0, [pc, #28]	@ (8001014 <ProcessCommand+0x60>)
 8000ff8:	f001 fc45 	bl	8002886 <HandleColorDetection>
      break;
 8000ffc:	e006      	b.n	800100c <ProcessCommand+0x58>
    	HandleLineColorDetection(rxBuffer);
 8000ffe:	4805      	ldr	r0, [pc, #20]	@ (8001014 <ProcessCommand+0x60>)
 8001000:	f001 fc4c 	bl	800289c <HandleLineColorDetection>
	  break;
 8001004:	e002      	b.n	800100c <ProcessCommand+0x58>
      break;
 8001006:	bf00      	nop
 8001008:	e000      	b.n	800100c <ProcessCommand+0x58>
      break;
 800100a:	bf00      	nop
  }
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000278 	.word	0x20000278
 8001014:	200001f8 	.word	0x200001f8

08001018 <AnalogMux_SelectChannel>:
/**
 * @brief Select a channel on the multiplexer
 * @param channel Channel number (0-15)
 */
void AnalogMux_SelectChannel(uint8_t channel)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
    // Ensure channel is within valid range (0-15)
    if (channel > 15)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d901      	bls.n	800102c <AnalogMux_SelectChannel+0x14>
        channel = 15;
 8001028:	230f      	movs	r3, #15
 800102a:	71fb      	strb	r3, [r7, #7]

    // Set S0 (least significant bit)
    if (channel & 0x01)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <AnalogMux_SelectChannel+0x2c>
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800103c:	4823      	ldr	r0, [pc, #140]	@ (80010cc <AnalogMux_SelectChannel+0xb4>)
 800103e:	f004 f839 	bl	80050b4 <HAL_GPIO_WritePin>
 8001042:	e005      	b.n	8001050 <AnalogMux_SelectChannel+0x38>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800104a:	4820      	ldr	r0, [pc, #128]	@ (80010cc <AnalogMux_SelectChannel+0xb4>)
 800104c:	f004 f832 	bl	80050b4 <HAL_GPIO_WritePin>

    // Set S1
    if (channel & 0x02)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d006      	beq.n	8001068 <AnalogMux_SelectChannel+0x50>
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001060:	481a      	ldr	r0, [pc, #104]	@ (80010cc <AnalogMux_SelectChannel+0xb4>)
 8001062:	f004 f827 	bl	80050b4 <HAL_GPIO_WritePin>
 8001066:	e005      	b.n	8001074 <AnalogMux_SelectChannel+0x5c>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800106e:	4817      	ldr	r0, [pc, #92]	@ (80010cc <AnalogMux_SelectChannel+0xb4>)
 8001070:	f004 f820 	bl	80050b4 <HAL_GPIO_WritePin>

    // Set S2
    if (channel & 0x04)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b00      	cmp	r3, #0
 800107c:	d006      	beq.n	800108c <AnalogMux_SelectChannel+0x74>
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_SET);
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001084:	4811      	ldr	r0, [pc, #68]	@ (80010cc <AnalogMux_SelectChannel+0xb4>)
 8001086:	f004 f815 	bl	80050b4 <HAL_GPIO_WritePin>
 800108a:	e005      	b.n	8001098 <AnalogMux_SelectChannel+0x80>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001092:	480e      	ldr	r0, [pc, #56]	@ (80010cc <AnalogMux_SelectChannel+0xb4>)
 8001094:	f004 f80e 	bl	80050b4 <HAL_GPIO_WritePin>

    // Set S3 (most significant bit)
    if (channel & 0x08)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d006      	beq.n	80010b0 <AnalogMux_SelectChannel+0x98>
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_SET);
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010a8:	4808      	ldr	r0, [pc, #32]	@ (80010cc <AnalogMux_SelectChannel+0xb4>)
 80010aa:	f004 f803 	bl	80050b4 <HAL_GPIO_WritePin>
 80010ae:	e005      	b.n	80010bc <AnalogMux_SelectChannel+0xa4>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_RESET);
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010b6:	4805      	ldr	r0, [pc, #20]	@ (80010cc <AnalogMux_SelectChannel+0xb4>)
 80010b8:	f003 fffc 	bl	80050b4 <HAL_GPIO_WritePin>

    // Add short delay for the multiplexer to settle
    // Typically 0.5-1 microsecond is enough for the CD74HC4067
    delayMicroseconds(1);
 80010bc:	2001      	movs	r0, #1
 80010be:	f000 fb0d 	bl	80016dc <delayMicroseconds>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40020400 	.word	0x40020400

080010d0 <AnalogMux_ReadADC>:
/**
 * @brief Read the ADC value from the currently selected channel
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadADC(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
    uint16_t adcValue = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	80fb      	strh	r3, [r7, #6]

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 80010da:	480b      	ldr	r0, [pc, #44]	@ (8001108 <AnalogMux_ReadADC+0x38>)
 80010dc:	f002 fdfc 	bl	8003cd8 <HAL_ADC_Start>

    // Wait for conversion to complete (timeout after 100 cycles)
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80010e0:	2164      	movs	r1, #100	@ 0x64
 80010e2:	4809      	ldr	r0, [pc, #36]	@ (8001108 <AnalogMux_ReadADC+0x38>)
 80010e4:	f002 fefd 	bl	8003ee2 <HAL_ADC_PollForConversion>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d104      	bne.n	80010f8 <AnalogMux_ReadADC+0x28>
    {
        // Read the converted value
        adcValue = HAL_ADC_GetValue(&hadc1);
 80010ee:	4806      	ldr	r0, [pc, #24]	@ (8001108 <AnalogMux_ReadADC+0x38>)
 80010f0:	f002 ff82 	bl	8003ff8 <HAL_ADC_GetValue>
 80010f4:	4603      	mov	r3, r0
 80010f6:	80fb      	strh	r3, [r7, #6]
    }

    // Stop ADC conversion
    HAL_ADC_Stop(&hadc1);
 80010f8:	4803      	ldr	r0, [pc, #12]	@ (8001108 <AnalogMux_ReadADC+0x38>)
 80010fa:	f002 febf 	bl	8003e7c <HAL_ADC_Stop>

    return adcValue;
 80010fe:	88fb      	ldrh	r3, [r7, #6]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200002c4 	.word	0x200002c4

0800110c <AnalogMux_ReadChannel>:
 * @brief Read ADC value from a specific channel (selects channel then reads)
 * @param channel Channel number (0-15)
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadChannel(uint8_t channel)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
    // Select the desired channel
    AnalogMux_SelectChannel(channel);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff7d 	bl	8001018 <AnalogMux_SelectChannel>

    // Allow settling time for the analog signal
    delayMicroseconds(5);
 800111e:	2005      	movs	r0, #5
 8001120:	f000 fadc 	bl	80016dc <delayMicroseconds>

    // Read and return the ADC value
    return AnalogMux_ReadADC();
 8001124:	f7ff ffd4 	bl	80010d0 <AnalogMux_ReadADC>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_GPIO_EXTI_Callback>:

#define TOTAL_SLOTS 5  // Adjust based on the number of ball slots
#define GPIO_ENCODER_PIN GPIO_PIN_3  // Encoder sensor pin

// Interrupt callback function for ball slot counting
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 800113e:	f002 fd57 	bl	8003bf0 <HAL_GetTick>
 8001142:	4603      	mov	r3, r0
 8001144:	4a19      	ldr	r2, [pc, #100]	@ (80011ac <HAL_GPIO_EXTI_Callback+0x78>)
 8001146:	6013      	str	r3, [r2, #0]
    if (GPIO_Pin == GPIO_ENCODER_PIN && (currentMillis - previousMillis > 650) && is_rotating == 1) {
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	2b08      	cmp	r3, #8
 800114c:	d119      	bne.n	8001182 <HAL_GPIO_EXTI_Callback+0x4e>
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <HAL_GPIO_EXTI_Callback+0x78>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	f240 228a 	movw	r2, #650	@ 0x28a
 800115c:	4293      	cmp	r3, r2
 800115e:	d910      	bls.n	8001182 <HAL_GPIO_EXTI_Callback+0x4e>
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x80>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d10b      	bne.n	8001182 <HAL_GPIO_EXTI_Callback+0x4e>
        ballCount++;
 800116a:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <HAL_GPIO_EXTI_Callback+0x84>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	3301      	adds	r3, #1
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <HAL_GPIO_EXTI_Callback+0x84>)
 8001176:	801a      	strh	r2, [r3, #0]
        previousMillis = currentMillis;
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <HAL_GPIO_EXTI_Callback+0x78>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0c      	ldr	r2, [pc, #48]	@ (80011b0 <HAL_GPIO_EXTI_Callback+0x7c>)
 800117e:	6013      	str	r3, [r2, #0]
    else if (GPIO_Pin == B1_Pin && (currentMillis - previousMillis > 650))  // Replace BUTTON_PIN with actual GPIO pin
	{
		task_ready = 1; // Set flag when button is pressed
		//Buzzer_On();
	}
}
 8001180:	e00f      	b.n	80011a2 <HAL_GPIO_EXTI_Callback+0x6e>
    else if (GPIO_Pin == B1_Pin && (currentMillis - previousMillis > 650))  // Replace BUTTON_PIN with actual GPIO pin
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001188:	d10b      	bne.n	80011a2 <HAL_GPIO_EXTI_Callback+0x6e>
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <HAL_GPIO_EXTI_Callback+0x78>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f240 228a 	movw	r2, #650	@ 0x28a
 8001198:	4293      	cmp	r3, r2
 800119a:	d902      	bls.n	80011a2 <HAL_GPIO_EXTI_Callback+0x6e>
		task_ready = 1; // Set flag when button is pressed
 800119c:	4b07      	ldr	r3, [pc, #28]	@ (80011bc <HAL_GPIO_EXTI_Callback+0x88>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000280 	.word	0x20000280
 80011b0:	2000027c 	.word	0x2000027c
 80011b4:	20000286 	.word	0x20000286
 80011b8:	20000284 	.word	0x20000284
 80011bc:	200005f2 	.word	0x200005f2

080011c0 <Buzzer_On>:
#include "buzzer.h"
#include "main.h"

// Turn on the buzzer (PC15 high)
void Buzzer_On(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2120      	movs	r1, #32
 80011c8:	4802      	ldr	r0, [pc, #8]	@ (80011d4 <Buzzer_On+0x14>)
 80011ca:	f003 ff73 	bl	80050b4 <HAL_GPIO_WritePin>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40020000 	.word	0x40020000

080011d8 <Buzzer_Off>:

// Turn off the buzzer (PC15 low)
void Buzzer_Off(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	2120      	movs	r1, #32
 80011e0:	4802      	ldr	r0, [pc, #8]	@ (80011ec <Buzzer_Off+0x14>)
 80011e2:	f003 ff67 	bl	80050b4 <HAL_GPIO_WritePin>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40020000 	.word	0x40020000

080011f0 <Buzzer_Toggle>:

// Toggle the buzzer state with a specified delay
void Buzzer_Toggle(uint32_t delay)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
    Buzzer_On();
 80011f8:	f7ff ffe2 	bl	80011c0 <Buzzer_On>
    HAL_Delay(delay);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f002 fd03 	bl	8003c08 <HAL_Delay>
    Buzzer_Off();
 8001202:	f7ff ffe9 	bl	80011d8 <Buzzer_Off>
    HAL_Delay(delay);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f002 fcfe 	bl	8003c08 <HAL_Delay>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <Buzzer_UniquePattern>:

void Buzzer_UniquePattern(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
    // Pattern: Short-Short-Long-Short-Long
    // Total duration: 1000ms (1 second)

    Buzzer_On();
 8001218:	f7ff ffd2 	bl	80011c0 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 800121c:	2064      	movs	r0, #100	@ 0x64
 800121e:	f002 fcf3 	bl	8003c08 <HAL_Delay>
    Buzzer_Off();
 8001222:	f7ff ffd9 	bl	80011d8 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 8001226:	2064      	movs	r0, #100	@ 0x64
 8001228:	f002 fcee 	bl	8003c08 <HAL_Delay>

    Buzzer_On();
 800122c:	f7ff ffc8 	bl	80011c0 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 8001230:	2064      	movs	r0, #100	@ 0x64
 8001232:	f002 fce9 	bl	8003c08 <HAL_Delay>
    Buzzer_Off();
 8001236:	f7ff ffcf 	bl	80011d8 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800123a:	2064      	movs	r0, #100	@ 0x64
 800123c:	f002 fce4 	bl	8003c08 <HAL_Delay>

    Buzzer_On();
 8001240:	f7ff ffbe 	bl	80011c0 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 8001244:	20c8      	movs	r0, #200	@ 0xc8
 8001246:	f002 fcdf 	bl	8003c08 <HAL_Delay>
    Buzzer_Off();
 800124a:	f7ff ffc5 	bl	80011d8 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800124e:	2064      	movs	r0, #100	@ 0x64
 8001250:	f002 fcda 	bl	8003c08 <HAL_Delay>

    Buzzer_On();
 8001254:	f7ff ffb4 	bl	80011c0 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 8001258:	2064      	movs	r0, #100	@ 0x64
 800125a:	f002 fcd5 	bl	8003c08 <HAL_Delay>
    Buzzer_Off();
 800125e:	f7ff ffbb 	bl	80011d8 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 8001262:	2064      	movs	r0, #100	@ 0x64
 8001264:	f002 fcd0 	bl	8003c08 <HAL_Delay>

    Buzzer_On();
 8001268:	f7ff ffaa 	bl	80011c0 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 800126c:	20c8      	movs	r0, #200	@ 0xc8
 800126e:	f002 fccb 	bl	8003c08 <HAL_Delay>
    Buzzer_Off();
 8001272:	f7ff ffb1 	bl	80011d8 <Buzzer_Off>
    // No delay at the end to make it exactly 1 second
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}

0800127a <Controller_Init>:
#include "fonts.h"
#include <stdio.h>

static float oldSpeed = 0;

void Controller_Init(Controller *controller) {
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
    // Initialize motor struct
	controller->forward_error = 0;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
	controller->rotational_error = 0;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	605a      	str	r2, [r3, #4]
	controller->previous_forward_error = 0;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
	controller->previous_rotational_error = 0;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
	controller->velocity = 0;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
	controller->omega = 0;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
	controller->left_motor_pwm = 0;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
	controller->right_motor_pwm = 0;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
	controller->controllers_enabled = 1;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2020 	strb.w	r2, [r3, #32]
	controller->feedforward_enabled = 1;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <Controller_ResetControllers>:
}

/**
 * Reset the error integrals for both forward and rotational controllers.
 */
void Controller_ResetControllers(Controller *controller) {
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
    controller->forward_error = 0;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
    controller->rotational_error = 0;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
    controller->previous_forward_error = 0;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
    controller->previous_rotational_error = 0;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <UpdateControllers>:


/**
 * Update motor controllers based on velocity, angular velocity, and steering adjustment.
 */
void UpdateControllers(Controller *controller, float velocity, float omega, float steering_adjustment) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b090      	sub	sp, #64	@ 0x40
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001320:	edc7 0a01 	vstr	s1, [r7, #4]
 8001324:	ed87 1a00 	vstr	s2, [r7]
    float forward_output, rotational_output, left_output, right_output;
    //float left_speed, right_speed, left_ff, right_ff;

    controller->velocity = velocity;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	611a      	str	r2, [r3, #16]
    controller->omega = omega;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	615a      	str	r2, [r3, #20]

    // Forward motion control
    float forward_increment = velocity * LOOP_INTERVAL;//
 8001334:	4b6c      	ldr	r3, [pc, #432]	@ (80014e8 <UpdateControllers+0x1d4>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	ed97 7a02 	vldr	s14, [r7, #8]
 800133e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001342:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    controller->forward_error += forward_increment - robot_fwd_change();
 8001346:	f000 faa5 	bl	8001894 <robot_fwd_change>
 800134a:	eeb0 7a40 	vmov.f32	s14, s0
 800134e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001352:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	edc3 7a00 	vstr	s15, [r3]
    float forward_diff = controller->forward_error - controller->previous_forward_error;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	ed93 7a00 	vldr	s14, [r3]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001376:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    controller->previous_forward_error = controller->forward_error;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	609a      	str	r2, [r3, #8]
    forward_output = FWD_KP * controller->forward_error + FWD_KD * forward_diff;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	ed93 7a00 	vldr	s14, [r3]
 8001388:	4b58      	ldr	r3, [pc, #352]	@ (80014ec <UpdateControllers+0x1d8>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001392:	4b57      	ldr	r3, [pc, #348]	@ (80014f0 <UpdateControllers+0x1dc>)
 8001394:	edd3 6a00 	vldr	s13, [r3]
 8001398:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800139c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Rotational control
    float rotational_increment = omega * LOOP_INTERVAL;
 80013a8:	4b4f      	ldr	r3, [pc, #316]	@ (80014e8 <UpdateControllers+0x1d4>)
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80013b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    controller->rotational_error += rotational_increment - robot_rot_change();
 80013ba:	f000 fa7d 	bl	80018b8 <robot_rot_change>
 80013be:	eeb0 7a40 	vmov.f32	s14, s0
 80013c2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80013c6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80013d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	edc3 7a01 	vstr	s15, [r3, #4]
    controller->rotational_error -= steering_adjustment;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80013e0:	edd7 7a00 	vldr	s15, [r7]
 80013e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	edc3 7a01 	vstr	s15, [r3, #4]
    float rotational_diff = controller->rotational_error - controller->previous_rotational_error;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80013fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    controller->previous_rotational_error = controller->rotational_error;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	60da      	str	r2, [r3, #12]
    rotational_output = ROT_KP * controller->rotational_error + ROT_KD * rotational_diff;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001410:	4b38      	ldr	r3, [pc, #224]	@ (80014f4 <UpdateControllers+0x1e0>)
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	ee27 7a27 	vmul.f32	s14, s14, s15
 800141a:	4b37      	ldr	r3, [pc, #220]	@ (80014f8 <UpdateControllers+0x1e4>)
 800141c:	edd3 6a00 	vldr	s13, [r3]
 8001420:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142c:	edc7 7a08 	vstr	s15, [r7, #32]

    // Combine forward and rotational outputs
    left_output = forward_output - rotational_output;
 8001430:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001434:	edd7 7a08 	vldr	s15, [r7, #32]
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    right_output = forward_output + rotational_output;
 8001440:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001444:	edd7 7a08 	vldr	s15, [r7, #32]
 8001448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    float tangent_speed = omega * ROBOT_RADIUS * RADIANS_PER_DEGREE;
 8001450:	4b2a      	ldr	r3, [pc, #168]	@ (80014fc <UpdateControllers+0x1e8>)
 8001452:	ed93 7a00 	vldr	s14, [r3]
 8001456:	edd7 7a01 	vldr	s15, [r7, #4]
 800145a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800145e:	4b28      	ldr	r3, [pc, #160]	@ (8001500 <UpdateControllers+0x1ec>)
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001468:	edc7 7a07 	vstr	s15, [r7, #28]

	float left_speed = velocity - tangent_speed;
 800146c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001470:	edd7 7a07 	vldr	s15, [r7, #28]
 8001474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001478:	edc7 7a06 	vstr	s15, [r7, #24]
	float right_speed = velocity + tangent_speed;
 800147c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001480:	edd7 7a07 	vldr	s15, [r7, #28]
 8001484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001488:	edc7 7a05 	vstr	s15, [r7, #20]

	if (controller->feedforward_enabled) {
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001492:	2b00      	cmp	r3, #0
 8001494:	d017      	beq.n	80014c6 <UpdateControllers+0x1b2>
		// Feedforward calculation
		left_output += leftFeedForward(left_speed);
 8001496:	ed97 0a06 	vldr	s0, [r7, #24]
 800149a:	f000 f833 	bl	8001504 <leftFeedForward>
 800149e:	eeb0 7a40 	vmov.f32	s14, s0
 80014a2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80014a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014aa:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		right_output += rightFeedForward(right_speed);
 80014ae:	ed97 0a05 	vldr	s0, [r7, #20]
 80014b2:	f000 f88d 	bl	80015d0 <rightFeedForward>
 80014b6:	eeb0 7a40 	vmov.f32	s14, s0
 80014ba:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80014be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014c2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	}

    if (controller->controllers_enabled) {
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d007      	beq.n	80014e0 <UpdateControllers+0x1cc>
    	setMotorLPWM(left_output);
 80014d0:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80014d4:	f000 fef4 	bl	80022c0 <setMotorLPWM>
        setMotorRPWM(right_output);
 80014d8:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80014dc:	f000 ff36 	bl	800234c <setMotorRPWM>
    }


}
 80014e0:	bf00      	nop
 80014e2:	3740      	adds	r7, #64	@ 0x40
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	0800ad48 	.word	0x0800ad48
 80014ec:	0800ad58 	.word	0x0800ad58
 80014f0:	0800ad5c 	.word	0x0800ad5c
 80014f4:	0800ad60 	.word	0x0800ad60
 80014f8:	0800ad64 	.word	0x0800ad64
 80014fc:	0800ad38 	.word	0x0800ad38
 8001500:	0800ad40 	.word	0x0800ad40

08001504 <leftFeedForward>:


float leftFeedForward(float speed) {
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	ed87 0a01 	vstr	s0, [r7, #4]
//  static float oldSpeed = speed;
  float leftFF = speed * SPEED_FF;
 800150e:	4b2b      	ldr	r3, [pc, #172]	@ (80015bc <leftFeedForward+0xb8>)
 8001510:	edd3 7a00 	vldr	s15, [r3]
 8001514:	ed97 7a01 	vldr	s14, [r7, #4]
 8001518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151c:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 8001520:	edd7 7a01 	vldr	s15, [r7, #4]
 8001524:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	dd09      	ble.n	8001542 <leftFeedForward+0x3e>
    leftFF += BIAS_FF;
 800152e:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <leftFeedForward+0xbc>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ed97 7a05 	vldr	s14, [r7, #20]
 8001538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001540:	e00f      	b.n	8001562 <leftFeedForward+0x5e>
  } else if (speed < 0) {
 8001542:	edd7 7a01 	vldr	s15, [r7, #4]
 8001546:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154e:	d508      	bpl.n	8001562 <leftFeedForward+0x5e>
    leftFF -= BIAS_FF;
 8001550:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <leftFeedForward+0xbc>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	ed97 7a05 	vldr	s14, [r7, #20]
 800155a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800155e:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 8001562:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <leftFeedForward+0xc0>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	ed97 7a01 	vldr	s14, [r7, #4]
 800156c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001570:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <leftFeedForward+0xc4>)
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157a:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 800157e:	4a11      	ldr	r2, [pc, #68]	@ (80015c4 <leftFeedForward+0xc0>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <leftFeedForward+0xc8>)
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	ed97 7a04 	vldr	s14, [r7, #16]
 800158e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001592:	edc7 7a03 	vstr	s15, [r7, #12]
  leftFF += accFF;
 8001596:	ed97 7a05 	vldr	s14, [r7, #20]
 800159a:	edd7 7a03 	vldr	s15, [r7, #12]
 800159e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a2:	edc7 7a05 	vstr	s15, [r7, #20]
  return leftFF;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	ee07 3a90 	vmov	s15, r3
}
 80015ac:	eeb0 0a67 	vmov.f32	s0, s15
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	0800ad4c 	.word	0x0800ad4c
 80015c0:	0800ad54 	.word	0x0800ad54
 80015c4:	20000288 	.word	0x20000288
 80015c8:	0800ad44 	.word	0x0800ad44
 80015cc:	0800ad50 	.word	0x0800ad50

080015d0 <rightFeedForward>:

float rightFeedForward(float speed) {
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	ed87 0a01 	vstr	s0, [r7, #4]
  //static float oldSpeed = speed;
  float rightFF = speed * SPEED_FF;
 80015da:	4b2b      	ldr	r3, [pc, #172]	@ (8001688 <rightFeedForward+0xb8>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80015e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e8:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 80015ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f8:	dd09      	ble.n	800160e <rightFeedForward+0x3e>
    rightFF += BIAS_FF;
 80015fa:	4b24      	ldr	r3, [pc, #144]	@ (800168c <rightFeedForward+0xbc>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ed97 7a05 	vldr	s14, [r7, #20]
 8001604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001608:	edc7 7a05 	vstr	s15, [r7, #20]
 800160c:	e00f      	b.n	800162e <rightFeedForward+0x5e>
  } else if (speed < 0) {
 800160e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001612:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161a:	d508      	bpl.n	800162e <rightFeedForward+0x5e>
    rightFF -= BIAS_FF;
 800161c:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <rightFeedForward+0xbc>)
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	ed97 7a05 	vldr	s14, [r7, #20]
 8001626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800162a:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 800162e:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <rightFeedForward+0xc0>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ed97 7a01 	vldr	s14, [r7, #4]
 8001638:	ee37 7a67 	vsub.f32	s14, s14, s15
 800163c:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <rightFeedForward+0xc4>)
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001646:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 800164a:	4a11      	ldr	r2, [pc, #68]	@ (8001690 <rightFeedForward+0xc0>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <rightFeedForward+0xc8>)
 8001652:	edd3 7a00 	vldr	s15, [r3]
 8001656:	ed97 7a04 	vldr	s14, [r7, #16]
 800165a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165e:	edc7 7a03 	vstr	s15, [r7, #12]
  rightFF += accFF;
 8001662:	ed97 7a05 	vldr	s14, [r7, #20]
 8001666:	edd7 7a03 	vldr	s15, [r7, #12]
 800166a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166e:	edc7 7a05 	vstr	s15, [r7, #20]
  return rightFF;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	ee07 3a90 	vmov	s15, r3
}
 8001678:	eeb0 0a67 	vmov.f32	s0, s15
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	0800ad4c 	.word	0x0800ad4c
 800168c:	0800ad54 	.word	0x0800ad54
 8001690:	20000288 	.word	0x20000288
 8001694:	0800ad44 	.word	0x0800ad44
 8001698:	0800ad50 	.word	0x0800ad50

0800169c <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <Delay_Init+0x38>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10e      	bne.n	80016ca <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80016ac:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <Delay_Init+0x38>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4a08      	ldr	r2, [pc, #32]	@ (80016d4 <Delay_Init+0x38>)
 80016b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016b6:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80016b8:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <Delay_Init+0x3c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <Delay_Init+0x3c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a05      	ldr	r2, [pc, #20]	@ (80016d8 <Delay_Init+0x3c>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6013      	str	r3, [r2, #0]
    }
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000edf0 	.word	0xe000edf0
 80016d8:	e0001000 	.word	0xe0001000

080016dc <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 80016e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <delayMicroseconds+0x38>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 180; // Our MCU runs at 180 MHz, so each microsecond lasts 16 clock ticks
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	22b4      	movs	r2, #180	@ 0xb4
 80016ee:	fb02 f303 	mul.w	r3, r2, r3
 80016f2:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 80016f4:	bf00      	nop
 80016f6:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <delayMicroseconds+0x38>)
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	429a      	cmp	r2, r3
 8001702:	d8f8      	bhi.n	80016f6 <delayMicroseconds+0x1a>
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e0001000 	.word	0xe0001000

08001718 <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 800171c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001722:	b21b      	sxth	r3, r3
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 8001734:	4b03      	ldr	r3, [pc, #12]	@ (8001744 <getLeftEncoderCounts+0x14>)
 8001736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001738:	b21b      	sxth	r3, r3
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	40010000 	.word	0x40010000

08001748 <resetEncodersinSystick>:
	previous_left_count = 0;
	previous_right_count = 0;

}

void resetEncodersinSystick() {
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <resetEncodersinSystick+0x1c>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 8001752:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40010000 	.word	0x40010000

08001768 <update_Encoder_Data>:

void update_Encoder_Data(){
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
	int16_t left_count = getLeftEncoderCounts();
 800176e:	f7ff ffdf 	bl	8001730 <getLeftEncoderCounts>
 8001772:	4603      	mov	r3, r0
 8001774:	81fb      	strh	r3, [r7, #14]
	int16_t right_count = getRightEncoderCounts();
 8001776:	f7ff ffcf 	bl	8001718 <getRightEncoderCounts>
 800177a:	4603      	mov	r3, r0
 800177c:	81bb      	strh	r3, [r7, #12]

	left_delta = left_count - previous_left_count;
 800177e:	89fa      	ldrh	r2, [r7, #14]
 8001780:	4b3b      	ldr	r3, [pc, #236]	@ (8001870 <update_Encoder_Data+0x108>)
 8001782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001786:	b29b      	uxth	r3, r3
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	b29b      	uxth	r3, r3
 800178c:	b21a      	sxth	r2, r3
 800178e:	4b39      	ldr	r3, [pc, #228]	@ (8001874 <update_Encoder_Data+0x10c>)
 8001790:	801a      	strh	r2, [r3, #0]
	previous_left_count = left_count;
 8001792:	4a37      	ldr	r2, [pc, #220]	@ (8001870 <update_Encoder_Data+0x108>)
 8001794:	89fb      	ldrh	r3, [r7, #14]
 8001796:	8013      	strh	r3, [r2, #0]

	right_delta = right_count - previous_right_count;
 8001798:	89ba      	ldrh	r2, [r7, #12]
 800179a:	4b37      	ldr	r3, [pc, #220]	@ (8001878 <update_Encoder_Data+0x110>)
 800179c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	b21a      	sxth	r2, r3
 80017a8:	4b34      	ldr	r3, [pc, #208]	@ (800187c <update_Encoder_Data+0x114>)
 80017aa:	801a      	strh	r2, [r3, #0]
	previous_right_count = right_count;
 80017ac:	4a32      	ldr	r2, [pc, #200]	@ (8001878 <update_Encoder_Data+0x110>)
 80017ae:	89bb      	ldrh	r3, [r7, #12]
 80017b0:	8013      	strh	r3, [r2, #0]

	float left_change = left_delta * MM_PER_COUNT_LEFT;
 80017b2:	4b30      	ldr	r3, [pc, #192]	@ (8001874 <update_Encoder_Data+0x10c>)
 80017b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fed3 	bl	8000564 <__aeabi_i2d>
 80017be:	a32a      	add	r3, pc, #168	@ (adr r3, 8001868 <update_Encoder_Data+0x100>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7fe ff38 	bl	8000638 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff fa0a 	bl	8000be8 <__aeabi_d2f>
 80017d4:	4603      	mov	r3, r0
 80017d6:	60bb      	str	r3, [r7, #8]
	float right_change = right_delta * MM_PER_COUNT_RIGHT;
 80017d8:	4b28      	ldr	r3, [pc, #160]	@ (800187c <update_Encoder_Data+0x114>)
 80017da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fec0 	bl	8000564 <__aeabi_i2d>
 80017e4:	a320      	add	r3, pc, #128	@ (adr r3, 8001868 <update_Encoder_Data+0x100>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7fe ff25 	bl	8000638 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7ff f9f7 	bl	8000be8 <__aeabi_d2f>
 80017fa:	4603      	mov	r3, r0
 80017fc:	607b      	str	r3, [r7, #4]

	m_fwd_change = 0.5 * (right_change + left_change);
 80017fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8001802:	edd7 7a02 	vldr	s15, [r7, #8]
 8001806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800180e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001812:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <update_Encoder_Data+0x118>)
 8001814:	edc3 7a00 	vstr	s15, [r3]
	m_robot_distance += m_fwd_change;
 8001818:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <update_Encoder_Data+0x11c>)
 800181a:	ed93 7a00 	vldr	s14, [r3]
 800181e:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <update_Encoder_Data+0x118>)
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001828:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <update_Encoder_Data+0x11c>)
 800182a:	edc3 7a00 	vstr	s15, [r3]
	m_rot_change = (right_change - left_change) * DEG_PER_MM_DIFFERENCE;
 800182e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001832:	edd7 7a02 	vldr	s15, [r7, #8]
 8001836:	ee37 7a67 	vsub.f32	s14, s14, s15
 800183a:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <update_Encoder_Data+0x120>)
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <update_Encoder_Data+0x124>)
 8001846:	edc3 7a00 	vstr	s15, [r3]
	m_robot_angle += m_rot_change;
 800184a:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <update_Encoder_Data+0x128>)
 800184c:	ed93 7a00 	vldr	s14, [r3]
 8001850:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <update_Encoder_Data+0x124>)
 8001852:	edd3 7a00 	vldr	s15, [r3]
 8001856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185a:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <update_Encoder_Data+0x128>)
 800185c:	edc3 7a00 	vstr	s15, [r3]


}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	f76b218d 	.word	0xf76b218d
 800186c:	3faf8e12 	.word	0x3faf8e12
 8001870:	20000298 	.word	0x20000298
 8001874:	20000294 	.word	0x20000294
 8001878:	2000029a 	.word	0x2000029a
 800187c:	20000296 	.word	0x20000296
 8001880:	2000029c 	.word	0x2000029c
 8001884:	2000028c 	.word	0x2000028c
 8001888:	0800ad3c 	.word	0x0800ad3c
 800188c:	200002a0 	.word	0x200002a0
 8001890:	20000290 	.word	0x20000290

08001894 <robot_fwd_change>:
	float omega;
	omega = LOOP_FREQUENCY * m_rot_change;
	return omega;
}

float robot_fwd_change() {
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
	float distance;
	distance = m_fwd_change;
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <robot_fwd_change+0x20>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	607b      	str	r3, [r7, #4]
	return distance;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	ee07 3a90 	vmov	s15, r3
}
 80018a6:	eeb0 0a67 	vmov.f32	s0, s15
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	2000029c 	.word	0x2000029c

080018b8 <robot_rot_change>:

float robot_rot_change() {
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
	float distance;
	distance = m_rot_change;
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <robot_rot_change+0x20>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	607b      	str	r3, [r7, #4]
	return distance;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	ee07 3a90 	vmov	s15, r3
}
 80018ca:	eeb0 0a67 	vmov.f32	s0, s15
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	200002a0 	.word	0x200002a0

080018dc <analogReadIRs>:

uint16_t IRsensorValues[16] = {0};



void analogReadIRs(void){
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
	for (uint8_t i = 10; i < 15; i++)
 80018e2:	230a      	movs	r3, #10
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	e00c      	b.n	8001902 <analogReadIRs+0x26>
	    {
	        IRsensorValues[i] = AnalogMux_ReadChannel(i);
 80018e8:	79fc      	ldrb	r4, [r7, #7]
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fc0d 	bl	800110c <AnalogMux_ReadChannel>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <analogReadIRs+0x38>)
 80018f8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for (uint8_t i = 10; i < 15; i++)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	3301      	adds	r3, #1
 8001900:	71fb      	strb	r3, [r7, #7]
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	2b0e      	cmp	r3, #14
 8001906:	d9ef      	bls.n	80018e8 <analogReadIRs+0xc>
	    }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bd90      	pop	{r4, r7, pc}
 8001912:	bf00      	nop
 8001914:	200002a4 	.word	0x200002a4

08001918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800191e:	f002 f901 	bl	8003b24 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001922:	f000 f887 	bl	8001a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001926:	f000 fb69 	bl	8001ffc <MX_GPIO_Init>
  MX_DMA_Init();
 800192a:	f000 fb47 	bl	8001fbc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800192e:	f000 fac7 	bl	8001ec0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001932:	f000 f99f 	bl	8001c74 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001936:	f000 f9f5 	bl	8001d24 <MX_TIM2_Init>
  MX_I2C2_Init();
 800193a:	f000 f96d 	bl	8001c18 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 800193e:	f000 fae9 	bl	8001f14 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001942:	f000 fb11 	bl	8001f68 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001946:	f000 f8e7 	bl	8001b18 <MX_ADC1_Init>
  MX_I2C1_Init();
 800194a:	f000 f937 	bl	8001bbc <MX_I2C1_Init>
  MX_TIM3_Init();
 800194e:	f000 fa3d 	bl	8001dcc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001952:	213c      	movs	r1, #60	@ 0x3c
 8001954:	482e      	ldr	r0, [pc, #184]	@ (8001a10 <main+0xf8>)
 8001956:	f005 f9a1 	bl	8006c9c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800195a:	213c      	movs	r1, #60	@ 0x3c
 800195c:	482d      	ldr	r0, [pc, #180]	@ (8001a14 <main+0xfc>)
 800195e:	f005 f99d 	bl	8006c9c <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001962:	2100      	movs	r1, #0
 8001964:	482c      	ldr	r0, [pc, #176]	@ (8001a18 <main+0x100>)
 8001966:	f005 f82b 	bl	80069c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800196a:	2104      	movs	r1, #4
 800196c:	482a      	ldr	r0, [pc, #168]	@ (8001a18 <main+0x100>)
 800196e:	f005 f827 	bl	80069c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001972:	2108      	movs	r1, #8
 8001974:	4828      	ldr	r0, [pc, #160]	@ (8001a18 <main+0x100>)
 8001976:	f005 f823 	bl	80069c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800197a:	210c      	movs	r1, #12
 800197c:	4826      	ldr	r0, [pc, #152]	@ (8001a18 <main+0x100>)
 800197e:	f005 f81f 	bl	80069c0 <HAL_TIM_PWM_Start>

  SSD1306_Init();
 8001982:	f001 fe63 	bl	800364c <SSD1306_Init>
    SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 8001986:	2301      	movs	r3, #1
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	2340      	movs	r3, #64	@ 0x40
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2380      	movs	r3, #128	@ 0x80
 8001990:	4a22      	ldr	r2, [pc, #136]	@ (8001a1c <main+0x104>)
 8001992:	2100      	movs	r1, #0
 8001994:	2000      	movs	r0, #0
 8001996:	f001 ffc3 	bl	8003920 <SSD1306_DrawBitmap>
    SSD1306_UpdateScreen(); // update screen
 800199a:	f001 ff1b 	bl	80037d4 <SSD1306_UpdateScreen>




	  Buzzer_UniquePattern();
 800199e:	f7ff fc39 	bl	8001214 <Buzzer_UniquePattern>

  /*---------------------Delay--------------------------------*/
  Delay_Init();
 80019a2:	f7ff fe7b 	bl	800169c <Delay_Init>
//  Servo_SetAngle(B, 90);
//  Servo_SetAngle(C, 35);

  //PCA9685_SetServoAngle(14, 100);

  HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, 1);
 80019a6:	2201      	movs	r2, #1
 80019a8:	2102      	movs	r1, #2
 80019aa:	481d      	ldr	r0, [pc, #116]	@ (8001a20 <main+0x108>)
 80019ac:	f003 fb82 	bl	80050b4 <HAL_GPIO_WritePin>


  // Or use them by name
  //Servo_SetAngleByName("base", 90);  // Set base to 120 degrees

  HAL_Delay(1000);
 80019b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019b4:	f002 f928 	bl	8003c08 <HAL_Delay>
  Controller_Init(&controller);
 80019b8:	481a      	ldr	r0, [pc, #104]	@ (8001a24 <main+0x10c>)
 80019ba:	f7ff fc5e 	bl	800127a <Controller_Init>
    Profile_Reset(&forward_profile);
 80019be:	481a      	ldr	r0, [pc, #104]	@ (8001a28 <main+0x110>)
 80019c0:	f000 fd0a 	bl	80023d8 <Profile_Reset>
    Profile_Reset(&rotation_profile);
 80019c4:	4819      	ldr	r0, [pc, #100]	@ (8001a2c <main+0x114>)
 80019c6:	f000 fd07 	bl	80023d8 <Profile_Reset>
    Motion_Init(&motion, &controller, &forward_profile, &rotation_profile);
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <main+0x114>)
 80019cc:	4a16      	ldr	r2, [pc, #88]	@ (8001a28 <main+0x110>)
 80019ce:	4915      	ldr	r1, [pc, #84]	@ (8001a24 <main+0x10c>)
 80019d0:	4817      	ldr	r0, [pc, #92]	@ (8001a30 <main+0x118>)
 80019d2:	f000 fbe1 	bl	8002198 <Motion_Init>
    Controller_ResetControllers(&controller);
 80019d6:	4813      	ldr	r0, [pc, #76]	@ (8001a24 <main+0x10c>)
 80019d8:	f7ff fc81 	bl	80012de <Controller_ResetControllers>

  // Reset all servos to center position
  //Servo_ResetAll();

  Buzzer_Toggle(100);
 80019dc:	2064      	movs	r0, #100	@ 0x64
 80019de:	f7ff fc07 	bl	80011f0 <Buzzer_Toggle>

  /*-------------------------------------------------------------------*/
  //HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Enable UART interrupt

  HAL_Delay(2000);
 80019e2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019e6:	f002 f90f 	bl	8003c08 <HAL_Delay>
  //RAYKHA_Calibrate(&raykha_calibration, RAYKHA_LINE_WHITE);
  HAL_Delay(200);
 80019ea:	20c8      	movs	r0, #200	@ 0xc8
 80019ec:	f002 f90c 	bl	8003c08 <HAL_Delay>
  Buzzer_Toggle(100);
 80019f0:	2064      	movs	r0, #100	@ 0x64
 80019f2:	f7ff fbfd 	bl	80011f0 <Buzzer_Toggle>





  Buzzer_Toggle(100);
 80019f6:	2064      	movs	r0, #100	@ 0x64
 80019f8:	f7ff fbfa 	bl	80011f0 <Buzzer_Toggle>
  HAL_Delay(6000);
 80019fc:	f241 7070 	movw	r0, #6000	@ 0x1770
 8001a00:	f002 f902 	bl	8003c08 <HAL_Delay>
  Buzzer_Toggle(100);
 8001a04:	2064      	movs	r0, #100	@ 0x64
 8001a06:	f7ff fbf3 	bl	80011f0 <Buzzer_Toggle>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  analogReadIRs();
 8001a0a:	f7ff ff67 	bl	80018dc <analogReadIRs>
 8001a0e:	e7fc      	b.n	8001a0a <main+0xf2>
 8001a10:	200003b4 	.word	0x200003b4
 8001a14:	200003fc 	.word	0x200003fc
 8001a18:	20000444 	.word	0x20000444
 8001a1c:	0800ad8c 	.word	0x0800ad8c
 8001a20:	40020800 	.word	0x40020800
 8001a24:	200006a8 	.word	0x200006a8
 8001a28:	20000660 	.word	0x20000660
 8001a2c:	20000684 	.word	0x20000684
 8001a30:	200005f4 	.word	0x200005f4

08001a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b094      	sub	sp, #80	@ 0x50
 8001a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	2234      	movs	r2, #52	@ 0x34
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f007 f9f1 	bl	8008e2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a48:	f107 0308 	add.w	r3, r7, #8
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b10 <SystemClock_Config+0xdc>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a60:	4a2b      	ldr	r2, [pc, #172]	@ (8001b10 <SystemClock_Config+0xdc>)
 8001a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a66:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a68:	4b29      	ldr	r3, [pc, #164]	@ (8001b10 <SystemClock_Config+0xdc>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a74:	2300      	movs	r3, #0
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	4b26      	ldr	r3, [pc, #152]	@ (8001b14 <SystemClock_Config+0xe0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a25      	ldr	r2, [pc, #148]	@ (8001b14 <SystemClock_Config+0xe0>)
 8001a7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b23      	ldr	r3, [pc, #140]	@ (8001b14 <SystemClock_Config+0xe0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a90:	2302      	movs	r3, #2
 8001a92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a94:	2301      	movs	r3, #1
 8001a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a98:	2310      	movs	r3, #16
 8001a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001aa4:	2308      	movs	r3, #8
 8001aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001aa8:	23b4      	movs	r3, #180	@ 0xb4
 8001aaa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aac:	2302      	movs	r3, #2
 8001aae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab8:	f107 031c 	add.w	r3, r7, #28
 8001abc:	4618      	mov	r0, r3
 8001abe:	f004 fc91 	bl	80063e4 <HAL_RCC_OscConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ac8:	f000 fb60 	bl	800218c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001acc:	f004 f8f0 	bl	8005cb0 <HAL_PWREx_EnableOverDrive>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ad6:	f000 fb59 	bl	800218c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ada:	230f      	movs	r3, #15
 8001adc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ae6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001aea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001af2:	f107 0308 	add.w	r3, r7, #8
 8001af6:	2105      	movs	r1, #5
 8001af8:	4618      	mov	r0, r3
 8001afa:	f004 f929 	bl	8005d50 <HAL_RCC_ClockConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001b04:	f000 fb42 	bl	800218c <Error_Handler>
  }
}
 8001b08:	bf00      	nop
 8001b0a:	3750      	adds	r7, #80	@ 0x50
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40007000 	.word	0x40007000

08001b18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b1e:	463b      	mov	r3, r7
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b2a:	4b21      	ldr	r3, [pc, #132]	@ (8001bb0 <MX_ADC1_Init+0x98>)
 8001b2c:	4a21      	ldr	r2, [pc, #132]	@ (8001bb4 <MX_ADC1_Init+0x9c>)
 8001b2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b30:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb0 <MX_ADC1_Init+0x98>)
 8001b32:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b38:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb0 <MX_ADC1_Init+0x98>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb0 <MX_ADC1_Init+0x98>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b44:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <MX_ADC1_Init+0x98>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b4a:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <MX_ADC1_Init+0x98>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b52:	4b17      	ldr	r3, [pc, #92]	@ (8001bb0 <MX_ADC1_Init+0x98>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b58:	4b15      	ldr	r3, [pc, #84]	@ (8001bb0 <MX_ADC1_Init+0x98>)
 8001b5a:	4a17      	ldr	r2, [pc, #92]	@ (8001bb8 <MX_ADC1_Init+0xa0>)
 8001b5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b5e:	4b14      	ldr	r3, [pc, #80]	@ (8001bb0 <MX_ADC1_Init+0x98>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <MX_ADC1_Init+0x98>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <MX_ADC1_Init+0x98>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b72:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <MX_ADC1_Init+0x98>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b78:	480d      	ldr	r0, [pc, #52]	@ (8001bb0 <MX_ADC1_Init+0x98>)
 8001b7a:	f002 f869 	bl	8003c50 <HAL_ADC_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b84:	f000 fb02 	bl	800218c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001b88:	230a      	movs	r3, #10
 8001b8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b94:	463b      	mov	r3, r7
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	@ (8001bb0 <MX_ADC1_Init+0x98>)
 8001b9a:	f002 fa3b 	bl	8004014 <HAL_ADC_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ba4:	f000 faf2 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200002c4 	.word	0x200002c4
 8001bb4:	40012000 	.word	0x40012000
 8001bb8:	0f000001 	.word	0x0f000001

08001bbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bc0:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <MX_I2C1_Init+0x50>)
 8001bc2:	4a13      	ldr	r2, [pc, #76]	@ (8001c10 <MX_I2C1_Init+0x54>)
 8001bc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <MX_I2C1_Init+0x50>)
 8001bc8:	4a12      	ldr	r2, [pc, #72]	@ (8001c14 <MX_I2C1_Init+0x58>)
 8001bca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <MX_I2C1_Init+0x50>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <MX_I2C1_Init+0x50>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <MX_I2C1_Init+0x50>)
 8001bda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	@ (8001c0c <MX_I2C1_Init+0x50>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001be6:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <MX_I2C1_Init+0x50>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bec:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <MX_I2C1_Init+0x50>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <MX_I2C1_Init+0x50>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bf8:	4804      	ldr	r0, [pc, #16]	@ (8001c0c <MX_I2C1_Init+0x50>)
 8001bfa:	f003 fa8d 	bl	8005118 <HAL_I2C_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c04:	f000 fac2 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	2000030c 	.word	0x2000030c
 8001c10:	40005400 	.word	0x40005400
 8001c14:	00061a80 	.word	0x00061a80

08001c18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <MX_I2C2_Init+0x50>)
 8001c1e:	4a13      	ldr	r2, [pc, #76]	@ (8001c6c <MX_I2C2_Init+0x54>)
 8001c20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c22:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <MX_I2C2_Init+0x50>)
 8001c24:	4a12      	ldr	r2, [pc, #72]	@ (8001c70 <MX_I2C2_Init+0x58>)
 8001c26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <MX_I2C2_Init+0x50>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <MX_I2C2_Init+0x50>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <MX_I2C2_Init+0x50>)
 8001c36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <MX_I2C2_Init+0x50>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c42:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <MX_I2C2_Init+0x50>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c48:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <MX_I2C2_Init+0x50>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <MX_I2C2_Init+0x50>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c54:	4804      	ldr	r0, [pc, #16]	@ (8001c68 <MX_I2C2_Init+0x50>)
 8001c56:	f003 fa5f 	bl	8005118 <HAL_I2C_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c60:	f000 fa94 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000360 	.word	0x20000360
 8001c6c:	40005800 	.word	0x40005800
 8001c70:	000186a0 	.word	0x000186a0

08001c74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	@ 0x30
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	2224      	movs	r2, #36	@ 0x24
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f007 f8d1 	bl	8008e2a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c90:	4b22      	ldr	r3, [pc, #136]	@ (8001d1c <MX_TIM1_Init+0xa8>)
 8001c92:	4a23      	ldr	r2, [pc, #140]	@ (8001d20 <MX_TIM1_Init+0xac>)
 8001c94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c96:	4b21      	ldr	r3, [pc, #132]	@ (8001d1c <MX_TIM1_Init+0xa8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d1c <MX_TIM1_Init+0xa8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d1c <MX_TIM1_Init+0xa8>)
 8001ca4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ca8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001caa:	4b1c      	ldr	r3, [pc, #112]	@ (8001d1c <MX_TIM1_Init+0xa8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d1c <MX_TIM1_Init+0xa8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb6:	4b19      	ldr	r3, [pc, #100]	@ (8001d1c <MX_TIM1_Init+0xa8>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480d      	ldr	r0, [pc, #52]	@ (8001d1c <MX_TIM1_Init+0xa8>)
 8001ce8:	f004 ff32 	bl	8006b50 <HAL_TIM_Encoder_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001cf2:	f000 fa4b 	bl	800218c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	4619      	mov	r1, r3
 8001d02:	4806      	ldr	r0, [pc, #24]	@ (8001d1c <MX_TIM1_Init+0xa8>)
 8001d04:	f005 fb9c 	bl	8007440 <HAL_TIMEx_MasterConfigSynchronization>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001d0e:	f000 fa3d 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d12:	bf00      	nop
 8001d14:	3730      	adds	r7, #48	@ 0x30
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200003b4 	.word	0x200003b4
 8001d20:	40010000 	.word	0x40010000

08001d24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	@ 0x30
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d2a:	f107 030c 	add.w	r3, r7, #12
 8001d2e:	2224      	movs	r2, #36	@ 0x24
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f007 f879 	bl	8008e2a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d40:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <MX_TIM2_Init+0xa4>)
 8001d42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d48:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc8 <MX_TIM2_Init+0xa4>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc8 <MX_TIM2_Init+0xa4>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d54:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc8 <MX_TIM2_Init+0xa4>)
 8001d56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc8 <MX_TIM2_Init+0xa4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d62:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <MX_TIM2_Init+0xa4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d70:	2301      	movs	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d80:	2301      	movs	r3, #1
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	4619      	mov	r1, r3
 8001d92:	480d      	ldr	r0, [pc, #52]	@ (8001dc8 <MX_TIM2_Init+0xa4>)
 8001d94:	f004 fedc 	bl	8006b50 <HAL_TIM_Encoder_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d9e:	f000 f9f5 	bl	800218c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4806      	ldr	r0, [pc, #24]	@ (8001dc8 <MX_TIM2_Init+0xa4>)
 8001db0:	f005 fb46 	bl	8007440 <HAL_TIMEx_MasterConfigSynchronization>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001dba:	f000 f9e7 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	3730      	adds	r7, #48	@ 0x30
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200003fc 	.word	0x200003fc

08001dcc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	@ 0x28
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd2:	f107 0320 	add.w	r3, r7, #32
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	611a      	str	r2, [r3, #16]
 8001dea:	615a      	str	r2, [r3, #20]
 8001dec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dee:	4b32      	ldr	r3, [pc, #200]	@ (8001eb8 <MX_TIM3_Init+0xec>)
 8001df0:	4a32      	ldr	r2, [pc, #200]	@ (8001ebc <MX_TIM3_Init+0xf0>)
 8001df2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001df4:	4b30      	ldr	r3, [pc, #192]	@ (8001eb8 <MX_TIM3_Init+0xec>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb8 <MX_TIM3_Init+0xec>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8001e00:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb8 <MX_TIM3_Init+0xec>)
 8001e02:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001e06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e08:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb8 <MX_TIM3_Init+0xec>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb8 <MX_TIM3_Init+0xec>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e14:	4828      	ldr	r0, [pc, #160]	@ (8001eb8 <MX_TIM3_Init+0xec>)
 8001e16:	f004 fd83 	bl	8006920 <HAL_TIM_PWM_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001e20:	f000 f9b4 	bl	800218c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e2c:	f107 0320 	add.w	r3, r7, #32
 8001e30:	4619      	mov	r1, r3
 8001e32:	4821      	ldr	r0, [pc, #132]	@ (8001eb8 <MX_TIM3_Init+0xec>)
 8001e34:	f005 fb04 	bl	8007440 <HAL_TIMEx_MasterConfigSynchronization>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001e3e:	f000 f9a5 	bl	800218c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e42:	2360      	movs	r3, #96	@ 0x60
 8001e44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	2200      	movs	r2, #0
 8001e56:	4619      	mov	r1, r3
 8001e58:	4817      	ldr	r0, [pc, #92]	@ (8001eb8 <MX_TIM3_Init+0xec>)
 8001e5a:	f004 ffad 	bl	8006db8 <HAL_TIM_PWM_ConfigChannel>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001e64:	f000 f992 	bl	800218c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4812      	ldr	r0, [pc, #72]	@ (8001eb8 <MX_TIM3_Init+0xec>)
 8001e70:	f004 ffa2 	bl	8006db8 <HAL_TIM_PWM_ConfigChannel>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001e7a:	f000 f987 	bl	800218c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	2208      	movs	r2, #8
 8001e82:	4619      	mov	r1, r3
 8001e84:	480c      	ldr	r0, [pc, #48]	@ (8001eb8 <MX_TIM3_Init+0xec>)
 8001e86:	f004 ff97 	bl	8006db8 <HAL_TIM_PWM_ConfigChannel>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001e90:	f000 f97c 	bl	800218c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	220c      	movs	r2, #12
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4807      	ldr	r0, [pc, #28]	@ (8001eb8 <MX_TIM3_Init+0xec>)
 8001e9c:	f004 ff8c 	bl	8006db8 <HAL_TIM_PWM_ConfigChannel>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001ea6:	f000 f971 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001eaa:	4803      	ldr	r0, [pc, #12]	@ (8001eb8 <MX_TIM3_Init+0xec>)
 8001eac:	f001 f826 	bl	8002efc <HAL_TIM_MspPostInit>

}
 8001eb0:	bf00      	nop
 8001eb2:	3728      	adds	r7, #40	@ 0x28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000444 	.word	0x20000444
 8001ebc:	40000400 	.word	0x40000400

08001ec0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001ec6:	4a12      	ldr	r2, [pc, #72]	@ (8001f10 <MX_USART2_UART_Init+0x50>)
 8001ec8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eca:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001ecc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ed0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ede:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ee4:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eea:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ef6:	4805      	ldr	r0, [pc, #20]	@ (8001f0c <MX_USART2_UART_Init+0x4c>)
 8001ef8:	f005 fb1e 	bl	8007538 <HAL_UART_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f02:	f000 f943 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000048c 	.word	0x2000048c
 8001f10:	40004400 	.word	0x40004400

08001f14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <MX_USART3_UART_Init+0x4c>)
 8001f1a:	4a12      	ldr	r2, [pc, #72]	@ (8001f64 <MX_USART3_UART_Init+0x50>)
 8001f1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001f1e:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <MX_USART3_UART_Init+0x4c>)
 8001f20:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <MX_USART3_UART_Init+0x4c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f60 <MX_USART3_UART_Init+0x4c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f32:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <MX_USART3_UART_Init+0x4c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f38:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <MX_USART3_UART_Init+0x4c>)
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3e:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <MX_USART3_UART_Init+0x4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f44:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <MX_USART3_UART_Init+0x4c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f4a:	4805      	ldr	r0, [pc, #20]	@ (8001f60 <MX_USART3_UART_Init+0x4c>)
 8001f4c:	f005 faf4 	bl	8007538 <HAL_UART_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f56:	f000 f919 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200004d4 	.word	0x200004d4
 8001f64:	40004800 	.word	0x40004800

08001f68 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <MX_USART6_UART_Init+0x4c>)
 8001f6e:	4a12      	ldr	r2, [pc, #72]	@ (8001fb8 <MX_USART6_UART_Init+0x50>)
 8001f70:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <MX_USART6_UART_Init+0x4c>)
 8001f74:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f78:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb4 <MX_USART6_UART_Init+0x4c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f80:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <MX_USART6_UART_Init+0x4c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <MX_USART6_UART_Init+0x4c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <MX_USART6_UART_Init+0x4c>)
 8001f8e:	220c      	movs	r2, #12
 8001f90:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f92:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <MX_USART6_UART_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f98:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <MX_USART6_UART_Init+0x4c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f9e:	4805      	ldr	r0, [pc, #20]	@ (8001fb4 <MX_USART6_UART_Init+0x4c>)
 8001fa0:	f005 faca 	bl	8007538 <HAL_UART_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001faa:	f000 f8ef 	bl	800218c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000051c 	.word	0x2000051c
 8001fb8:	40011400 	.word	0x40011400

08001fbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <MX_DMA_Init+0x3c>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff8 <MX_DMA_Init+0x3c>)
 8001fcc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd2:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <MX_DMA_Init+0x3c>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2039      	movs	r0, #57	@ 0x39
 8001fe4:	f002 fb1f 	bl	8004626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001fe8:	2039      	movs	r0, #57	@ 0x39
 8001fea:	f002 fb38 	bl	800465e <HAL_NVIC_EnableIRQ>

}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800

08001ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	@ 0x28
 8002000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
 8002010:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b59      	ldr	r3, [pc, #356]	@ (800217c <MX_GPIO_Init+0x180>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	4a58      	ldr	r2, [pc, #352]	@ (800217c <MX_GPIO_Init+0x180>)
 800201c:	f043 0304 	orr.w	r3, r3, #4
 8002020:	6313      	str	r3, [r2, #48]	@ 0x30
 8002022:	4b56      	ldr	r3, [pc, #344]	@ (800217c <MX_GPIO_Init+0x180>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b52      	ldr	r3, [pc, #328]	@ (800217c <MX_GPIO_Init+0x180>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4a51      	ldr	r2, [pc, #324]	@ (800217c <MX_GPIO_Init+0x180>)
 8002038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4b4f      	ldr	r3, [pc, #316]	@ (800217c <MX_GPIO_Init+0x180>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	4b4b      	ldr	r3, [pc, #300]	@ (800217c <MX_GPIO_Init+0x180>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	4a4a      	ldr	r2, [pc, #296]	@ (800217c <MX_GPIO_Init+0x180>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6313      	str	r3, [r2, #48]	@ 0x30
 800205a:	4b48      	ldr	r3, [pc, #288]	@ (800217c <MX_GPIO_Init+0x180>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	4b44      	ldr	r3, [pc, #272]	@ (800217c <MX_GPIO_Init+0x180>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	4a43      	ldr	r2, [pc, #268]	@ (800217c <MX_GPIO_Init+0x180>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	6313      	str	r3, [r2, #48]	@ 0x30
 8002076:	4b41      	ldr	r3, [pc, #260]	@ (800217c <MX_GPIO_Init+0x180>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	2102      	movs	r1, #2
 8002086:	483e      	ldr	r0, [pc, #248]	@ (8002180 <MX_GPIO_Init+0x184>)
 8002088:	f003 f814 	bl	80050b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WATERPUMP_GPIO_Port, WATERPUMP_Pin, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	2104      	movs	r1, #4
 8002090:	483b      	ldr	r0, [pc, #236]	@ (8002180 <MX_GPIO_Init+0x184>)
 8002092:	f003 f80f 	bl	80050b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	2120      	movs	r1, #32
 800209a:	483a      	ldr	r0, [pc, #232]	@ (8002184 <MX_GPIO_Init+0x188>)
 800209c:	f003 f80a 	bl	80050b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80020a6:	4838      	ldr	r0, [pc, #224]	@ (8002188 <MX_GPIO_Init+0x18c>)
 80020a8:	f003 f804 	bl	80050b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC11 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_11;
 80020ac:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80020b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80020b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	4619      	mov	r1, r3
 80020c2:	482f      	ldr	r0, [pc, #188]	@ (8002180 <MX_GPIO_Init+0x184>)
 80020c4:	f002 fe62 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : AIRPUMP_Pin */
  GPIO_InitStruct.Pin = AIRPUMP_Pin;
 80020c8:	2302      	movs	r3, #2
 80020ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020cc:	2301      	movs	r3, #1
 80020ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020d4:	2302      	movs	r3, #2
 80020d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AIRPUMP_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4619      	mov	r1, r3
 80020de:	4828      	ldr	r0, [pc, #160]	@ (8002180 <MX_GPIO_Init+0x184>)
 80020e0:	f002 fe54 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : WATERPUMP_Pin */
  GPIO_InitStruct.Pin = WATERPUMP_Pin;
 80020e4:	2304      	movs	r3, #4
 80020e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ec:	2301      	movs	r3, #1
 80020ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WATERPUMP_GPIO_Port, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	4821      	ldr	r0, [pc, #132]	@ (8002180 <MX_GPIO_Init+0x184>)
 80020fc:	f002 fe46 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002100:	2308      	movs	r3, #8
 8002102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002104:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	4619      	mov	r1, r3
 8002114:	481a      	ldr	r0, [pc, #104]	@ (8002180 <MX_GPIO_Init+0x184>)
 8002116:	f002 fe39 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800211a:	2320      	movs	r3, #32
 800211c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211e:	2301      	movs	r3, #1
 8002120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800212a:	f107 0314 	add.w	r3, r7, #20
 800212e:	4619      	mov	r1, r3
 8002130:	4814      	ldr	r0, [pc, #80]	@ (8002184 <MX_GPIO_Init+0x188>)
 8002132:	f002 fe2b 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 8002136:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800213a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213c:	2301      	movs	r3, #1
 800213e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002144:	2303      	movs	r3, #3
 8002146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4619      	mov	r1, r3
 800214e:	480e      	ldr	r0, [pc, #56]	@ (8002188 <MX_GPIO_Init+0x18c>)
 8002150:	f002 fe1c 	bl	8004d8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2009      	movs	r0, #9
 800215a:	f002 fa64 	bl	8004626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800215e:	2009      	movs	r0, #9
 8002160:	f002 fa7d 	bl	800465e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	2100      	movs	r1, #0
 8002168:	2028      	movs	r0, #40	@ 0x28
 800216a:	f002 fa5c 	bl	8004626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800216e:	2028      	movs	r0, #40	@ 0x28
 8002170:	f002 fa75 	bl	800465e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002174:	bf00      	nop
 8002176:	3728      	adds	r7, #40	@ 0x28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40023800 	.word	0x40023800
 8002180:	40020800 	.word	0x40020800
 8002184:	40020000 	.word	0x40020000
 8002188:	40020400 	.word	0x40020400

0800218c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002190:	b672      	cpsid	i
}
 8002192:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <Error_Handler+0x8>

08002198 <Motion_Init>:
#include "uartcom.h"
#include "encoders.h"

extern UART_HandleTypeDef huart6;

void Motion_Init(Motion *motion, Controller *controller, Profile *forward, Profile *rotation) {
 8002198:	b4b0      	push	{r4, r5, r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
    motion->controller = *controller;  // Copy the controller structure
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4614      	mov	r4, r2
 80021ac:	461d      	mov	r5, r3
 80021ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b6:	682b      	ldr	r3, [r5, #0]
 80021b8:	6023      	str	r3, [r4, #0]
    motion->forward = *forward;        // Copy the forward profile structure
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80021c2:	4615      	mov	r5, r2
 80021c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021cc:	682b      	ldr	r3, [r5, #0]
 80021ce:	6023      	str	r3, [r4, #0]
    motion->rotation = *rotation;      // Copy the rotation profile structure
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 80021d8:	4615      	mov	r5, r2
 80021da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e2:	682b      	ldr	r3, [r5, #0]
 80021e4:	6023      	str	r3, [r4, #0]
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bcb0      	pop	{r4, r5, r7}
 80021ee:	4770      	bx	lr

080021f0 <Motion_Velocity>:

float Motion_Position(Motion *motion) {
    return Profile_GetPosition(&(motion->forward));
}

float Motion_Velocity(Motion *motion) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->forward));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3324      	adds	r3, #36	@ 0x24
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 f92c 	bl	800245a <Profile_GetSpeed>
 8002202:	eef0 7a40 	vmov.f32	s15, s0
}
 8002206:	eeb0 0a67 	vmov.f32	s0, s15
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <Motion_Omega>:

float Motion_Angle(Motion *motion) {
    return Profile_GetPosition(&(motion->rotation));
}

float Motion_Omega(Motion *motion) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->rotation));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3348      	adds	r3, #72	@ 0x48
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f91c 	bl	800245a <Profile_GetSpeed>
 8002222:	eef0 7a40 	vmov.f32	s15, s0
}
 8002226:	eeb0 0a67 	vmov.f32	s0, s15
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <Motion_Update>:

void Motion_Turn_(Motion *motion, float angle, float omega, float final_speed, float alpha){
	Profile_Move(&(motion->rotation), angle, omega, final_speed, alpha);
}

void Motion_Update(Motion *motion) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
    Profile_Update(&(motion->forward));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3324      	adds	r3, #36	@ 0x24
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f91b 	bl	8002478 <Profile_Update>
    Profile_Update(&(motion->rotation));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3348      	adds	r3, #72	@ 0x48
 8002246:	4618      	mov	r0, r3
 8002248:	f000 f916 	bl	8002478 <Profile_Update>
    //UART_Transmit_Float(&huart6, ">V", motion->forward.speed, 2);
    //UART_Transmit_Float(&huart6, ">W", robot_speed(), 2);
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	0000      	movs	r0, r0
	...

08002258 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm > PWM_MAX)
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7fe f990 	bl	8000588 <__aeabi_f2d>
 8002268:	a313      	add	r3, pc, #76	@ (adr r3, 80022b8 <limitPWM+0x60>)
 800226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226e:	f7fe fc73 	bl	8000b58 <__aeabi_dcmpgt>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <limitPWM+0x24>
		return PWM_MAX;
 8002278:	4b0d      	ldr	r3, [pc, #52]	@ (80022b0 <limitPWM+0x58>)
 800227a:	e00d      	b.n	8002298 <limitPWM+0x40>
	else if (pwm < -PWM_MAX)
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7fe f983 	bl	8000588 <__aeabi_f2d>
 8002282:	a309      	add	r3, pc, #36	@ (adr r3, 80022a8 <limitPWM+0x50>)
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	f7fe fc48 	bl	8000b1c <__aeabi_dcmplt>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <limitPWM+0x3e>
		return -PWM_MAX;
 8002292:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <limitPWM+0x5c>)
 8002294:	e000      	b.n	8002298 <limitPWM+0x40>
	return pwm;
 8002296:	687b      	ldr	r3, [r7, #4]
}
 8002298:	ee07 3a90 	vmov	s15, r3
 800229c:	eeb0 0a67 	vmov.f32	s0, s15
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	70a3d70a 	.word	0x70a3d70a
 80022ac:	bfef0a3d 	.word	0xbfef0a3d
 80022b0:	3f7851ec 	.word	0x3f7851ec
 80022b4:	bf7851ec 	.word	0xbf7851ec
 80022b8:	70a3d70a 	.word	0x70a3d70a
 80022bc:	3fef0a3d 	.word	0x3fef0a3d

080022c0 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 80022ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80022ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d6:	db13      	blt.n	8002300 <setMotorLPWM+0x40>
		TIM3->CCR4 = 0;
 80022d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002344 <setMotorLPWM+0x84>)
 80022da:	2200      	movs	r2, #0
 80022dc:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80022de:	ed97 0a01 	vldr	s0, [r7, #4]
 80022e2:	f7ff ffb9 	bl	8002258 <limitPWM>
 80022e6:	eef0 7a40 	vmov.f32	s15, s0
 80022ea:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002348 <setMotorLPWM+0x88>
 80022ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f2:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <setMotorLPWM+0x84>)
 80022f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022f8:	ee17 2a90 	vmov	r2, s15
 80022fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else if (pwm < 0) {
		TIM3->CCR3 = 0;
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 80022fe:	e01c      	b.n	800233a <setMotorLPWM+0x7a>
	else if (pwm < 0) {
 8002300:	edd7 7a01 	vldr	s15, [r7, #4]
 8002304:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230c:	d400      	bmi.n	8002310 <setMotorLPWM+0x50>
}
 800230e:	e014      	b.n	800233a <setMotorLPWM+0x7a>
		TIM3->CCR3 = 0;
 8002310:	4b0c      	ldr	r3, [pc, #48]	@ (8002344 <setMotorLPWM+0x84>)
 8002312:	2200      	movs	r2, #0
 8002314:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002316:	ed97 0a01 	vldr	s0, [r7, #4]
 800231a:	f7ff ff9d 	bl	8002258 <limitPWM>
 800231e:	eef0 7a40 	vmov.f32	s15, s0
 8002322:	eef1 7a67 	vneg.f32	s15, s15
 8002326:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002348 <setMotorLPWM+0x88>
 800232a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800232e:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <setMotorLPWM+0x84>)
 8002330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002334:	ee17 2a90 	vmov	r2, s15
 8002338:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40000400 	.word	0x40000400
 8002348:	45e0f800 	.word	0x45e0f800

0800234c <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8002356:	edd7 7a01 	vldr	s15, [r7, #4]
 800235a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800235e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002362:	db13      	blt.n	800238c <setMotorRPWM+0x40>
		TIM3->CCR2 = 0;
 8002364:	4b1a      	ldr	r3, [pc, #104]	@ (80023d0 <setMotorRPWM+0x84>)
 8002366:	2200      	movs	r2, #0
 8002368:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR1 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800236a:	ed97 0a01 	vldr	s0, [r7, #4]
 800236e:	f7ff ff73 	bl	8002258 <limitPWM>
 8002372:	eef0 7a40 	vmov.f32	s15, s0
 8002376:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80023d4 <setMotorRPWM+0x88>
 800237a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237e:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <setMotorRPWM+0x84>)
 8002380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002384:	ee17 2a90 	vmov	r2, s15
 8002388:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else if (pwm < 0) {
		TIM3->CCR1 = 0;
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 800238a:	e01c      	b.n	80023c6 <setMotorRPWM+0x7a>
	else if (pwm < 0) {
 800238c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002390:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002398:	d400      	bmi.n	800239c <setMotorRPWM+0x50>
}
 800239a:	e014      	b.n	80023c6 <setMotorRPWM+0x7a>
		TIM3->CCR1 = 0;
 800239c:	4b0c      	ldr	r3, [pc, #48]	@ (80023d0 <setMotorRPWM+0x84>)
 800239e:	2200      	movs	r2, #0
 80023a0:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 80023a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80023a6:	f7ff ff57 	bl	8002258 <limitPWM>
 80023aa:	eef0 7a40 	vmov.f32	s15, s0
 80023ae:	eef1 7a67 	vneg.f32	s15, s15
 80023b2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80023d4 <setMotorRPWM+0x88>
 80023b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ba:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <setMotorRPWM+0x84>)
 80023bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c0:	ee17 2a90 	vmov	r2, s15
 80023c4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40000400 	.word	0x40000400
 80023d4:	45e0f800 	.word	0x45e0f800

080023d8 <Profile_Reset>:
#include "ssd1306.h"
#include "fonts.h"
#include <stdio.h>

// Reset the profile
void Profile_Reset(Profile *profile) {
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
    profile->position = 0;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
    profile->speed = 0;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	605a      	str	r2, [r3, #4]
    profile->target_speed = 0;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
    profile->state = PS_IDLE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <Profile_GetBrakingDistance>:
        HAL_Delay(2);
    }
}

// Get the braking distance
float Profile_GetBrakingDistance(const Profile *profile) {
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
    return fabsf(profile->speed * profile->speed - profile->final_speed * profile->final_speed) * 0.5f * profile->one_over_acc;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	ed93 7a01 	vldr	s14, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	edd3 7a01 	vldr	s15, [r3, #4]
 800241e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	edd3 6a07 	vldr	s13, [r3, #28]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	edd3 7a07 	vldr	s15, [r3, #28]
 800242e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002432:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002436:	eef0 7ae7 	vabs.f32	s15, s15
 800243a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800243e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	edd3 7a05 	vldr	s15, [r3, #20]
 8002448:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800244c:	eeb0 0a67 	vmov.f32	s0, s15
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <Profile_GetSpeed>:
float Profile_GetPosition(const Profile *profile) {
    return profile->position;
}

// Get the current speed
float Profile_GetSpeed(const Profile *profile) {
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
    return profile->speed;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	ee07 3a90 	vmov	s15, r3
}
 800246a:	eeb0 0a67 	vmov.f32	s0, s15
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <Profile_Update>:
void Profile_SetPosition(Profile *profile, float position) {
    profile->position = position;
}

// Update the profile
void Profile_Update(Profile *profile) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
    if (profile->state == PS_IDLE) return;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80b5 	beq.w	80025f6 <Profile_Update+0x17e>

    float delta_v = profile->acceleration * LOOP_INTERVAL;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002492:	4b5b      	ldr	r3, [pc, #364]	@ (8002600 <Profile_Update+0x188>)
 8002494:	edd3 7a00 	vldr	s15, [r3]
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	edc7 7a03 	vstr	s15, [r7, #12]
    float remaining = fabsf(profile->final_position) - fabsf(profile->position);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	edd3 7a08 	vldr	s15, [r3, #32]
 80024a6:	eeb0 7ae7 	vabs.f32	s14, s15
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80024b0:	eef0 7ae7 	vabs.f32	s15, s15
 80024b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (profile->state == PS_ACCELERATING) {
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d128      	bne.n	8002518 <Profile_Update+0xa0>
        if (remaining < Profile_GetBrakingDistance(profile)) {
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff ff9f 	bl	800240a <Profile_GetBrakingDistance>
 80024cc:	eeb0 7a40 	vmov.f32	s14, s0
 80024d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80024d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024dc:	d51c      	bpl.n	8002518 <Profile_Update+0xa0>
            profile->state = PS_BRAKING;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2202      	movs	r2, #2
 80024e2:	701a      	strb	r2, [r3, #0]
            profile->target_speed = (profile->final_speed == 0) ? (profile->sign * 5.0f) : profile->final_speed;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80024ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f2:	d10b      	bne.n	800250c <Profile_Update+0x94>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002502:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250a:	e002      	b.n	8002512 <Profile_Update+0x9a>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	edc3 7a06 	vstr	s15, [r3, #24]
        }
    }

    if (profile->speed < profile->target_speed) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	ed93 7a01 	vldr	s14, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	edd3 7a06 	vldr	s15, [r3, #24]
 8002524:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252c:	d519      	bpl.n	8002562 <Profile_Update+0xea>
        profile->speed += delta_v;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	ed93 7a01 	vldr	s14, [r3, #4]
 8002534:	edd7 7a03 	vldr	s15, [r7, #12]
 8002538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed > profile->target_speed) profile->speed = profile->target_speed;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	ed93 7a01 	vldr	s14, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	edd3 7a06 	vldr	s15, [r3, #24]
 800254e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002556:	dd28      	ble.n	80025aa <Profile_Update+0x132>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	e023      	b.n	80025aa <Profile_Update+0x132>
    } else if (profile->speed > profile->target_speed) {
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	ed93 7a01 	vldr	s14, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	edd3 7a06 	vldr	s15, [r3, #24]
 800256e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002576:	dd18      	ble.n	80025aa <Profile_Update+0x132>
        profile->speed -= delta_v;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	ed93 7a01 	vldr	s14, [r3, #4]
 800257e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed < profile->target_speed) profile->speed = profile->target_speed;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	edd3 7a06 	vldr	s15, [r3, #24]
 8002598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a0:	d503      	bpl.n	80025aa <Profile_Update+0x132>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	605a      	str	r2, [r3, #4]
    }

    profile->position += profile->speed * LOOP_INTERVAL;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80025b0:	4b13      	ldr	r3, [pc, #76]	@ (8002600 <Profile_Update+0x188>)
 80025b2:	edd3 7a00 	vldr	s15, [r3]
 80025b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80025c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	edc3 7a02 	vstr	s15, [r3, #8]

    if (profile->state != PS_FINISHED && remaining < 0.125f) {
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d011      	beq.n	80025f8 <Profile_Update+0x180>
 80025d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80025d8:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 80025dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e4:	d508      	bpl.n	80025f8 <Profile_Update+0x180>
        profile->state = PS_FINISHED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2203      	movs	r2, #3
 80025ea:	701a      	strb	r2, [r3, #0]
        profile->target_speed = profile->final_speed;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69da      	ldr	r2, [r3, #28]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	619a      	str	r2, [r3, #24]
 80025f4:	e000      	b.n	80025f8 <Profile_Update+0x180>
    if (profile->state == PS_IDLE) return;
 80025f6:	bf00      	nop
    }

}
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	0800ad48 	.word	0x0800ad48

08002604 <RAYKHA_ReadRaw>:
/**
 * @brief Read raw values from all sensors
 * @param sensor_values Array to store the raw sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 */
void RAYKHA_ReadRaw(uint16_t *sensor_values)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
    // Read each sensor
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 800260c:	2300      	movs	r3, #0
 800260e:	73fb      	strb	r3, [r7, #15]
 8002610:	e00c      	b.n	800262c <RAYKHA_ReadRaw+0x28>
    {
        sensor_values[i] = AnalogMux_ReadChannel(RAYKHA_FIRST_MUX_CHANNEL + i);
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	18d4      	adds	r4, r2, r3
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fd75 	bl	800110c <AnalogMux_ReadChannel>
 8002622:	4603      	mov	r3, r0
 8002624:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	3301      	adds	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b09      	cmp	r3, #9
 8002630:	d9ef      	bls.n	8002612 <RAYKHA_ReadRaw+0xe>
    }
}
 8002632:	bf00      	nop
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	bd90      	pop	{r4, r7, pc}

0800263c <RAYKHA_ReadCalibrated>:
 * @brief Read calibrated values from all sensors
 * @param sensor_values Array to store the calibrated sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 * @param calibration Pointer to calibration data structure
 */
void RAYKHA_ReadCalibrated(uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 800263c:	b5b0      	push	{r4, r5, r7, lr}
 800263e:	b08a      	sub	sp, #40	@ 0x28
 8002640:	af02      	add	r7, sp, #8
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
    uint16_t raw_values[RAYKHA_NUM_SENSORS];

    // Read raw values
    RAYKHA_ReadRaw(raw_values);
 8002646:	f107 0308 	add.w	r3, r7, #8
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff ffda 	bl	8002604 <RAYKHA_ReadRaw>

    // Apply calibration
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002650:	2300      	movs	r3, #0
 8002652:	77fb      	strb	r3, [r7, #31]
 8002654:	e05a      	b.n	800270c <RAYKHA_ReadCalibrated+0xd0>
    {
        if (raw_values[i] < calibration->min_values[i])
 8002656:	7ffb      	ldrb	r3, [r7, #31]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	3320      	adds	r3, #32
 800265c:	443b      	add	r3, r7
 800265e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002662:	7ff9      	ldrb	r1, [r7, #31]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800266a:	429a      	cmp	r2, r3
 800266c:	d206      	bcs.n	800267c <RAYKHA_ReadCalibrated+0x40>
        {
            sensor_values[i] = 0;
 800266e:	7ffb      	ldrb	r3, [r7, #31]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	2200      	movs	r2, #0
 8002678:	801a      	strh	r2, [r3, #0]
 800267a:	e044      	b.n	8002706 <RAYKHA_ReadCalibrated+0xca>
        }
        else if (raw_values[i] > calibration->max_values[i])
 800267c:	7ffb      	ldrb	r3, [r7, #31]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	3320      	adds	r3, #32
 8002682:	443b      	add	r3, r7
 8002684:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002688:	7ffb      	ldrb	r3, [r7, #31]
 800268a:	6839      	ldr	r1, [r7, #0]
 800268c:	3308      	adds	r3, #8
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	440b      	add	r3, r1
 8002692:	889b      	ldrh	r3, [r3, #4]
 8002694:	429a      	cmp	r2, r3
 8002696:	d907      	bls.n	80026a8 <RAYKHA_ReadCalibrated+0x6c>
        {
            sensor_values[i] = 1000;
 8002698:	7ffb      	ldrb	r3, [r7, #31]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026a4:	801a      	strh	r2, [r3, #0]
 80026a6:	e02e      	b.n	8002706 <RAYKHA_ReadCalibrated+0xca>
        }
        else
        {
            // Map to 0-1000 range
            sensor_values[i] = map_range(raw_values[i],
 80026a8:	7ffb      	ldrb	r3, [r7, #31]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	3320      	adds	r3, #32
 80026ae:	443b      	add	r3, r7
 80026b0:	f833 0c18 	ldrh.w	r0, [r3, #-24]
 80026b4:	7ffa      	ldrb	r2, [r7, #31]
                                        calibration->min_values[i],
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
            sensor_values[i] = map_range(raw_values[i],
 80026bc:	7ffb      	ldrb	r3, [r7, #31]
                                        calibration->max_values[i],
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	3308      	adds	r3, #8
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	889d      	ldrh	r5, [r3, #4]
            sensor_values[i] = map_range(raw_values[i],
 80026c8:	7ffb      	ldrb	r3, [r7, #31]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	18d4      	adds	r4, r2, r3
 80026d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	2300      	movs	r3, #0
 80026d8:	462a      	mov	r2, r5
 80026da:	f000 f879 	bl	80027d0 <map_range>
 80026de:	4603      	mov	r3, r0
 80026e0:	8023      	strh	r3, [r4, #0]
                                        0, 1000);

		// Invert if needed (for white line on black background)
		if (calibration->line_type == RAYKHA_LINE_WHITE)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d10c      	bne.n	8002706 <RAYKHA_ReadCalibrated+0xca>
		{
			sensor_values[i] = 1000 - sensor_values[i];
 80026ec:	7ffb      	ldrb	r3, [r7, #31]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	881a      	ldrh	r2, [r3, #0]
 80026f6:	7ffb      	ldrb	r3, [r7, #31]
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	440b      	add	r3, r1
 80026fe:	f5c2 727a 	rsb	r2, r2, #1000	@ 0x3e8
 8002702:	b292      	uxth	r2, r2
 8002704:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002706:	7ffb      	ldrb	r3, [r7, #31]
 8002708:	3301      	adds	r3, #1
 800270a:	77fb      	strb	r3, [r7, #31]
 800270c:	7ffb      	ldrb	r3, [r7, #31]
 800270e:	2b09      	cmp	r3, #9
 8002710:	d9a1      	bls.n	8002656 <RAYKHA_ReadCalibrated+0x1a>
		}
        }
    }
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	3720      	adds	r7, #32
 8002718:	46bd      	mov	sp, r7
 800271a:	bdb0      	pop	{r4, r5, r7, pc}

0800271c <RAYKHA_GetLinePosition>:
 * @param calibration Pointer to calibration data structure
 * @return Line position (0 to 7000, where 0 is the leftmost sensor and 7000 is the rightmost sensor)
 *         Returns -1 if no line is detected
 */
int32_t RAYKHA_GetLinePosition(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
    uint32_t weighted_sum = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
    uint32_t sum = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
    uint8_t line_detected = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]

    // Calculate weighted average
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002732:	2300      	movs	r3, #0
 8002734:	73bb      	strb	r3, [r7, #14]
 8002736:	e01c      	b.n	8002772 <RAYKHA_GetLinePosition+0x56>
    {
        uint16_t value = sensor_values[i];
 8002738:	7bbb      	ldrb	r3, [r7, #14]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	4413      	add	r3, r2
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	81bb      	strh	r3, [r7, #12]

        // A value above 200 indicates a line
        if (value > 200)
 8002744:	89bb      	ldrh	r3, [r7, #12]
 8002746:	2bc8      	cmp	r3, #200	@ 0xc8
 8002748:	d901      	bls.n	800274e <RAYKHA_GetLinePosition+0x32>
        {
            line_detected = 1;
 800274a:	2301      	movs	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
        }

        weighted_sum += (uint32_t)value * (i * 1000);
 800274e:	89bb      	ldrh	r3, [r7, #12]
 8002750:	7bba      	ldrb	r2, [r7, #14]
 8002752:	fb02 f303 	mul.w	r3, r2, r3
 8002756:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4413      	add	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
        sum += value;
 8002764:	89bb      	ldrh	r3, [r7, #12]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 800276c:	7bbb      	ldrb	r3, [r7, #14]
 800276e:	3301      	adds	r3, #1
 8002770:	73bb      	strb	r3, [r7, #14]
 8002772:	7bbb      	ldrb	r3, [r7, #14]
 8002774:	2b09      	cmp	r3, #9
 8002776:	d9df      	bls.n	8002738 <RAYKHA_GetLinePosition+0x1c>
    }

    // Check if line is detected
    if (!line_detected || sum < 100)
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d002      	beq.n	8002784 <RAYKHA_GetLinePosition+0x68>
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	2b63      	cmp	r3, #99	@ 0x63
 8002782:	d802      	bhi.n	800278a <RAYKHA_GetLinePosition+0x6e>
    {
        return -1;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
 8002788:	e003      	b.n	8002792 <RAYKHA_GetLinePosition+0x76>
    }

    return weighted_sum / sum;
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002792:	4618      	mov	r0, r3
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <RAYKHA_GetPositionForPID>:
 * @param calibration Pointer to calibration data structure
 * @return Line position centered around 0 (-3500 to 3500)
 *         Returns a large value (9999) if no line is detected
 */
int32_t RAYKHA_GetPositionForPID(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
    int32_t position = RAYKHA_GetLinePosition(sensor_values, calibration);
 80027a8:	6839      	ldr	r1, [r7, #0]
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ffb6 	bl	800271c <RAYKHA_GetLinePosition>
 80027b0:	60f8      	str	r0, [r7, #12]

    // If no line detected, return a large value
    if (position == -1)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d102      	bne.n	80027c0 <RAYKHA_GetPositionForPID+0x22>
    {
        return 9999;
 80027ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80027be:	e003      	b.n	80027c8 <RAYKHA_GetPositionForPID+0x2a>
    }

    // Center the position around 0
    // The center of the sensor array is at 3500
    return position - 4500;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 80027c6:	3b14      	subs	r3, #20
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <map_range>:
 * @param out_min Minimum output value
 * @param out_max Maximum output value
 * @return Mapped value
 */
static uint16_t map_range(uint16_t value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 80027d0:	b490      	push	{r4, r7}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4604      	mov	r4, r0
 80027d8:	4608      	mov	r0, r1
 80027da:	4611      	mov	r1, r2
 80027dc:	461a      	mov	r2, r3
 80027de:	4623      	mov	r3, r4
 80027e0:	80fb      	strh	r3, [r7, #6]
 80027e2:	4603      	mov	r3, r0
 80027e4:	80bb      	strh	r3, [r7, #4]
 80027e6:	460b      	mov	r3, r1
 80027e8:	807b      	strh	r3, [r7, #2]
 80027ea:	4613      	mov	r3, r2
 80027ec:	803b      	strh	r3, [r7, #0]
    // Check for division by zero
    if (in_max <= in_min) return out_min;
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	88bb      	ldrh	r3, [r7, #4]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d801      	bhi.n	80027fa <map_range+0x2a>
 80027f6:	883b      	ldrh	r3, [r7, #0]
 80027f8:	e01d      	b.n	8002836 <map_range+0x66>

    // Map the value
    int32_t result = (int32_t)(value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	88bb      	ldrh	r3, [r7, #4]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	8b39      	ldrh	r1, [r7, #24]
 8002802:	883a      	ldrh	r2, [r7, #0]
 8002804:	1a8a      	subs	r2, r1, r2
 8002806:	fb03 f202 	mul.w	r2, r3, r2
 800280a:	8879      	ldrh	r1, [r7, #2]
 800280c:	88bb      	ldrh	r3, [r7, #4]
 800280e:	1acb      	subs	r3, r1, r3
 8002810:	fb92 f2f3 	sdiv	r2, r2, r3
 8002814:	883b      	ldrh	r3, [r7, #0]
 8002816:	4413      	add	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

    // Constrain the result
    if (result < out_min) result = out_min;
 800281a:	883b      	ldrh	r3, [r7, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	429a      	cmp	r2, r3
 8002820:	da01      	bge.n	8002826 <map_range+0x56>
 8002822:	883b      	ldrh	r3, [r7, #0]
 8002824:	60fb      	str	r3, [r7, #12]
    if (result > out_max) result = out_max;
 8002826:	8b3b      	ldrh	r3, [r7, #24]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	429a      	cmp	r2, r3
 800282c:	dd01      	ble.n	8002832 <map_range+0x62>
 800282e:	8b3b      	ldrh	r3, [r7, #24]
 8002830:	60fb      	str	r3, [r7, #12]

    return (uint16_t)result;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	b29b      	uxth	r3, r3
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bc90      	pop	{r4, r7}
 800283e:	4770      	bx	lr

08002840 <HandleLineDetection>:

/**
 * @brief Handle line detection data from Raspberry Pi
 * @param data Line detection data
 */
void HandleLineDetection(uint8_t *data) {
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Extract line position and orientation */
  int8_t linePosition = (int8_t)data[0]; // Negative = left, Positive = right, 0 = center
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	73fb      	strb	r3, [r7, #15]
  uint8_t lineAngle = data[1];           // Line angle in degrees
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	785b      	ldrb	r3, [r3, #1]
 8002852:	73bb      	strb	r3, [r7, #14]
    //TurnRight();
  } else {
    /* Go straight */
    //MoveForward();
  }
}
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HandleGridPosition>:

/**
 * @brief Handle grid position data from Raspberry Pi
 * @param data Grid position data
 */
void HandleGridPosition(uint8_t *data) {
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Extract grid coordinates */
  uint8_t gridX = data[0];
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	73fb      	strb	r3, [r7, #15]
  uint8_t gridY = data[1];
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	785b      	ldrb	r3, [r3, #1]
 8002872:	73bb      	strb	r3, [r7, #14]
  uint8_t orientation = data[2]; // 0=N, 1=E, 2=S, 3=W
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	789b      	ldrb	r3, [r3, #2]
 8002878:	737b      	strb	r3, [r7, #13]

  /* Use grid position for navigation */
  //NavigateGrid(gridX, gridY, orientation);
}
 800287a:	bf00      	nop
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HandleColorDetection>:

/**
 * @brief Handle color detection data from Raspberry Pi
 * @param data Color detection data
 */
void HandleColorDetection(uint8_t *data) {
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
//      break;
//    default:
//      /* Unknown color */
//      break;
//  }
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HandleLineColorDetection>:

void HandleLineColorDetection(uint8_t *data){
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	uint8_t colorId = data[0];
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	73fb      	strb	r3, [r7, #15]

	uint8_t ballId = data[1];
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	785b      	ldrb	r3, [r3, #1]
 80028ae:	73bb      	strb	r3, [r7, #14]

	//handlecount++;

	switch (colorId) {
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HandleLineColorDetection+0x20>
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d004      	beq.n	80028c4 <HandleLineColorDetection+0x28>
 80028ba:	e007      	b.n	80028cc <HandleLineColorDetection+0x30>
	case 0: /* Red */
		linecolorRPI = WHITE;
 80028bc:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <HandleLineColorDetection+0x68>)
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
	  break;
 80028c2:	e007      	b.n	80028d4 <HandleLineColorDetection+0x38>
	case 1: /* Green */
		linecolorRPI = GREEN;
 80028c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002904 <HandleLineColorDetection+0x68>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
	  break;
 80028ca:	e003      	b.n	80028d4 <HandleLineColorDetection+0x38>
	default:
	  /* Unknown color */
		linecolorRPI = WHITE;
 80028cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002904 <HandleLineColorDetection+0x68>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
	  break;
 80028d2:	bf00      	nop
	}

	switch(ballId){
 80028d4:	7bbb      	ldrb	r3, [r7, #14]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HandleLineColorDetection+0x44>
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d004      	beq.n	80028e8 <HandleLineColorDetection+0x4c>
 80028de:	e007      	b.n	80028f0 <HandleLineColorDetection+0x54>
	case 0:
		ballcolorRPI = WHITE_BALL;
 80028e0:	4b09      	ldr	r3, [pc, #36]	@ (8002908 <HandleLineColorDetection+0x6c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
		break;
 80028e6:	e007      	b.n	80028f8 <HandleLineColorDetection+0x5c>
	case 1:
		ballcolorRPI = YELLOW_BALL;
 80028e8:	4b07      	ldr	r3, [pc, #28]	@ (8002908 <HandleLineColorDetection+0x6c>)
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]
		break;
 80028ee:	e003      	b.n	80028f8 <HandleLineColorDetection+0x5c>
	default:
		ballcolorRPI = WHITE_BALL;
 80028f0:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <HandleLineColorDetection+0x6c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
		break;
 80028f6:	bf00      	nop
	}
}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	200006cc 	.word	0x200006cc
 8002908:	200006cd 	.word	0x200006cd

0800290c <DetectJunction>:
/**
 * Detects junctions during line following
 * @return JunctionType enum value indicating the type of junction detected
 */
int numberOfSensorsOnWhite = 0;
JunctionType DetectJunction() {
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
	numberOfSensorsOnWhite = 0;
 8002912:	4b23      	ldr	r3, [pc, #140]	@ (80029a0 <DetectJunction+0x94>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < RAYKHA_NUM_SENSORS; i++){
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	e00e      	b.n	800293c <DetectJunction+0x30>
		if(sensor_values[i] > LINE_THRESHOLD){
 800291e:	4a21      	ldr	r2, [pc, #132]	@ (80029a4 <DetectJunction+0x98>)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002926:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800292a:	d904      	bls.n	8002936 <DetectJunction+0x2a>
			numberOfSensorsOnWhite++;
 800292c:	4b1c      	ldr	r3, [pc, #112]	@ (80029a0 <DetectJunction+0x94>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	4a1b      	ldr	r2, [pc, #108]	@ (80029a0 <DetectJunction+0x94>)
 8002934:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < RAYKHA_NUM_SENSORS; i++){
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3301      	adds	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b09      	cmp	r3, #9
 8002940:	dded      	ble.n	800291e <DetectJunction+0x12>
		}
	}

	int leftSensorValue = sensor_values[0];
 8002942:	4b18      	ldr	r3, [pc, #96]	@ (80029a4 <DetectJunction+0x98>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	60bb      	str	r3, [r7, #8]
	int rightSensorValue = sensor_values[RAYKHA_NUM_SENSORS - 1];
 8002948:	4b16      	ldr	r3, [pc, #88]	@ (80029a4 <DetectJunction+0x98>)
 800294a:	8a5b      	ldrh	r3, [r3, #18]
 800294c:	607b      	str	r3, [r7, #4]

	if(numberOfSensorsOnWhite > SENSORS_ON_LINE_FOR_JUNCTION_CHECK){
 800294e:	4b14      	ldr	r3, [pc, #80]	@ (80029a0 <DetectJunction+0x94>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b05      	cmp	r3, #5
 8002954:	dd17      	ble.n	8002986 <DetectJunction+0x7a>
		if (leftSensorValue > LINE_THRESHOLD && rightSensorValue > LINE_THRESHOLD){
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800295c:	dd05      	ble.n	800296a <DetectJunction+0x5e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002964:	dd01      	ble.n	800296a <DetectJunction+0x5e>
			return T_JUNCTION;
 8002966:	2303      	movs	r3, #3
 8002968:	e014      	b.n	8002994 <DetectJunction+0x88>
		}
		else if (leftSensorValue > LINE_THRESHOLD){
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002970:	dd01      	ble.n	8002976 <DetectJunction+0x6a>
			return LEFT_JUNCTION;
 8002972:	2301      	movs	r3, #1
 8002974:	e00e      	b.n	8002994 <DetectJunction+0x88>
		}
		else if (rightSensorValue > LINE_THRESHOLD){
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800297c:	dd01      	ble.n	8002982 <DetectJunction+0x76>
			return RIGHT_JUNCTION;
 800297e:	2302      	movs	r3, #2
 8002980:	e008      	b.n	8002994 <DetectJunction+0x88>
		}
		else{
			return STRAIGHT_LINE;
 8002982:	2304      	movs	r3, #4
 8002984:	e006      	b.n	8002994 <DetectJunction+0x88>
		}
	}
	else if(numberOfSensorsOnWhite == 0){
 8002986:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <DetectJunction+0x94>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <DetectJunction+0x86>
		return NO_LINE;
 800298e:	2300      	movs	r3, #0
 8002990:	e000      	b.n	8002994 <DetectJunction+0x88>
	}
	else{
		return STRAIGHT_LINE;
 8002992:	2304      	movs	r3, #4
	}
}
 8002994:	4618      	mov	r0, r3
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	20000720 	.word	0x20000720
 80029a4:	20000704 	.word	0x20000704

080029a8 <get_steering_feedback>:
	rfs.raw = 0;
	rws.raw = 0;
}


float get_steering_feedback() {
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return m_steering_adjustment;
 80029ac:	4b04      	ldr	r3, [pc, #16]	@ (80029c0 <get_steering_feedback+0x18>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	ee07 3a90 	vmov	s15, r3
}
 80029b4:	eeb0 0a67 	vmov.f32	s0, s15
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	200006d8 	.word	0x200006d8

080029c4 <CalculateSteeringAdjustment>:




/* Calculate steering adjustment */
float CalculateSteeringAdjustment() {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
    float pTerm = STEERING_KP * m_cross_track_error;
 80029ca:	4b26      	ldr	r3, [pc, #152]	@ (8002a64 <CalculateSteeringAdjustment+0xa0>)
 80029cc:	ed93 7a00 	vldr	s14, [r3]
 80029d0:	4b25      	ldr	r3, [pc, #148]	@ (8002a68 <CalculateSteeringAdjustment+0xa4>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029da:	edc7 7a03 	vstr	s15, [r7, #12]
    float dTerm = STEERING_KD * (m_cross_track_error - m_last_steering_error);
 80029de:	4b22      	ldr	r3, [pc, #136]	@ (8002a68 <CalculateSteeringAdjustment+0xa4>)
 80029e0:	ed93 7a00 	vldr	s14, [r3]
 80029e4:	4b21      	ldr	r3, [pc, #132]	@ (8002a6c <CalculateSteeringAdjustment+0xa8>)
 80029e6:	edd3 7a00 	vldr	s15, [r3]
 80029ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029ee:	4b20      	ldr	r3, [pc, #128]	@ (8002a70 <CalculateSteeringAdjustment+0xac>)
 80029f0:	edd3 7a00 	vldr	s15, [r3]
 80029f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f8:	edc7 7a02 	vstr	s15, [r7, #8]
    float adjustment = pTerm + dTerm * LOOP_FREQUENCY;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a74 <CalculateSteeringAdjustment+0xb0>)
 80029fe:	ed93 7a00 	vldr	s14, [r3]
 8002a02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a12:	edc7 7a01 	vstr	s15, [r7, #4]
    adjustment = fminf(fmaxf(adjustment, -STEERING_ADJUST_LIMIT), STEERING_ADJUST_LIMIT);
 8002a16:	4b18      	ldr	r3, [pc, #96]	@ (8002a78 <CalculateSteeringAdjustment+0xb4>)
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	eef1 7a67 	vneg.f32	s15, s15
 8002a20:	eef0 0a67 	vmov.f32	s1, s15
 8002a24:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a28:	f008 f924 	bl	800ac74 <fmaxf>
 8002a2c:	eeb0 7a40 	vmov.f32	s14, s0
 8002a30:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <CalculateSteeringAdjustment+0xb4>)
 8002a32:	edd3 7a00 	vldr	s15, [r3]
 8002a36:	eef0 0a67 	vmov.f32	s1, s15
 8002a3a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a3e:	f008 f936 	bl	800acae <fminf>
 8002a42:	ed87 0a01 	vstr	s0, [r7, #4]
    m_last_steering_error = m_cross_track_error;
 8002a46:	4b08      	ldr	r3, [pc, #32]	@ (8002a68 <CalculateSteeringAdjustment+0xa4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a08      	ldr	r2, [pc, #32]	@ (8002a6c <CalculateSteeringAdjustment+0xa8>)
 8002a4c:	6013      	str	r3, [r2, #0]
    m_steering_adjustment = adjustment;
 8002a4e:	4a0b      	ldr	r2, [pc, #44]	@ (8002a7c <CalculateSteeringAdjustment+0xb8>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6013      	str	r3, [r2, #0]
    return adjustment;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	ee07 3a90 	vmov	s15, r3
}
 8002a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	0800ad68 	.word	0x0800ad68
 8002a68:	200006d4 	.word	0x200006d4
 8002a6c:	200006d0 	.word	0x200006d0
 8002a70:	0800ad6c 	.word	0x0800ad6c
 8002a74:	0800ad44 	.word	0x0800ad44
 8002a78:	0800ad70 	.word	0x0800ad70
 8002a7c:	200006d8 	.word	0x200006d8

08002a80 <Sensors_Update>:
	    HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
}


/* Update sensor readings and calculate cross-track error */
void Sensors_Update() {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
    // Read ADC values for all sensor channels
	int error = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]

	if(g_steering_mode == STEERING_CENTER_LINE_FOLLOW){
 8002a8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b84 <Sensors_Update+0x104>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b06      	cmp	r3, #6
 8002a92:	d114      	bne.n	8002abe <Sensors_Update+0x3e>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 8002a94:	493c      	ldr	r1, [pc, #240]	@ (8002b88 <Sensors_Update+0x108>)
 8002a96:	483d      	ldr	r0, [pc, #244]	@ (8002b8c <Sensors_Update+0x10c>)
 8002a98:	f7ff fdd0 	bl	800263c <RAYKHA_ReadCalibrated>

		/* Get position for PID controller (centered around 0) */
		line_position = RAYKHA_GetPositionForPID(sensor_values, &raykha_calibration);
 8002a9c:	493a      	ldr	r1, [pc, #232]	@ (8002b88 <Sensors_Update+0x108>)
 8002a9e:	483b      	ldr	r0, [pc, #236]	@ (8002b8c <Sensors_Update+0x10c>)
 8002aa0:	f7ff fe7d 	bl	800279e <RAYKHA_GetPositionForPID>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4a3a      	ldr	r2, [pc, #232]	@ (8002b90 <Sensors_Update+0x110>)
 8002aa8:	6013      	str	r3, [r2, #0]

		error = line_position;
 8002aaa:	4b39      	ldr	r3, [pc, #228]	@ (8002b90 <Sensors_Update+0x110>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	607b      	str	r3, [r7, #4]

		junction = DetectJunction();
 8002ab0:	f7ff ff2c 	bl	800290c <DetectJunction>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b36      	ldr	r3, [pc, #216]	@ (8002b94 <Sensors_Update+0x114>)
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	e054      	b.n	8002b68 <Sensors_Update+0xe8>
	}
	else if(g_steering_mode == STEERING_OFF_READLINE){
 8002abe:	4b31      	ldr	r3, [pc, #196]	@ (8002b84 <Sensors_Update+0x104>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d10a      	bne.n	8002ade <Sensors_Update+0x5e>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 8002ac8:	492f      	ldr	r1, [pc, #188]	@ (8002b88 <Sensors_Update+0x108>)
 8002aca:	4830      	ldr	r0, [pc, #192]	@ (8002b8c <Sensors_Update+0x10c>)
 8002acc:	f7ff fdb6 	bl	800263c <RAYKHA_ReadCalibrated>
		junction = DetectJunction();
 8002ad0:	f7ff ff1c 	bl	800290c <DetectJunction>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b94 <Sensors_Update+0x114>)
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e044      	b.n	8002b68 <Sensors_Update+0xe8>
	}
	else if(g_steering_mode == STEER_NORMAL){
 8002ade:	4b29      	ldr	r3, [pc, #164]	@ (8002b84 <Sensors_Update+0x104>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d11e      	bne.n	8002b26 <Sensors_Update+0xa6>
		if(lws.raw < 500)lws.raw = 500;
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b98 <Sensors_Update+0x118>)
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002af2:	d203      	bcs.n	8002afc <Sensors_Update+0x7c>
 8002af4:	4b28      	ldr	r3, [pc, #160]	@ (8002b98 <Sensors_Update+0x118>)
 8002af6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002afa:	801a      	strh	r2, [r3, #0]
		if(rws.raw < 500)rws.raw = 500;
 8002afc:	4b27      	ldr	r3, [pc, #156]	@ (8002b9c <Sensors_Update+0x11c>)
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002b06:	d203      	bcs.n	8002b10 <Sensors_Update+0x90>
 8002b08:	4b24      	ldr	r3, [pc, #144]	@ (8002b9c <Sensors_Update+0x11c>)
 8002b0a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002b0e:	801a      	strh	r2, [r3, #0]
		if(cfs.raw < 400)cfs.raw = 400;
 8002b10:	4b23      	ldr	r3, [pc, #140]	@ (8002ba0 <Sensors_Update+0x120>)
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002b1a:	d225      	bcs.n	8002b68 <Sensors_Update+0xe8>
 8002b1c:	4b20      	ldr	r3, [pc, #128]	@ (8002ba0 <Sensors_Update+0x120>)
 8002b1e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002b22:	801a      	strh	r2, [r3, #0]
 8002b24:	e020      	b.n	8002b68 <Sensors_Update+0xe8>
		//UART_Transmit_Int(&huart6, ">R", rws.value);

		// Update wall detection flags

    }
    else if(g_steering_mode == STEERING_FRONT_WALL){
 8002b26:	4b17      	ldr	r3, [pc, #92]	@ (8002b84 <Sensors_Update+0x104>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b05      	cmp	r3, #5
 8002b2e:	d11b      	bne.n	8002b68 <Sensors_Update+0xe8>


    	if(lfs.raw > 250)lfs.raw = 250;
 8002b30:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba4 <Sensors_Update+0x124>)
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2bfa      	cmp	r3, #250	@ 0xfa
 8002b38:	d902      	bls.n	8002b40 <Sensors_Update+0xc0>
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba4 <Sensors_Update+0x124>)
 8002b3c:	22fa      	movs	r2, #250	@ 0xfa
 8002b3e:	801a      	strh	r2, [r3, #0]
		if(rfs.raw > 230)rfs.raw = 230;
 8002b40:	4b19      	ldr	r3, [pc, #100]	@ (8002ba8 <Sensors_Update+0x128>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	2be6      	cmp	r3, #230	@ 0xe6
 8002b48:	d902      	bls.n	8002b50 <Sensors_Update+0xd0>
 8002b4a:	4b17      	ldr	r3, [pc, #92]	@ (8002ba8 <Sensors_Update+0x128>)
 8002b4c:	22e6      	movs	r2, #230	@ 0xe6
 8002b4e:	801a      	strh	r2, [r3, #0]
		if(cfs.raw < 400)cfs.raw = 400;
 8002b50:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <Sensors_Update+0x120>)
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002b5a:	d203      	bcs.n	8002b64 <Sensors_Update+0xe4>
 8002b5c:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <Sensors_Update+0x120>)
 8002b5e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002b62:	801a      	strh	r2, [r3, #0]



		error = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	607b      	str	r3, [r7, #4]

//    if (see_front_wall) {
//        error = 0;  // Ignore steering near front walls
//    }

    m_cross_track_error = error;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	ee07 3a90 	vmov	s15, r3
 8002b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b72:	4b0e      	ldr	r3, [pc, #56]	@ (8002bac <Sensors_Update+0x12c>)
 8002b74:	edc3 7a00 	vstr	s15, [r3]
    CalculateSteeringAdjustment();
 8002b78:	f7ff ff24 	bl	80029c4 <CalculateSteeringAdjustment>
    //send_sensor_data();
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000000 	.word	0x20000000
 8002b88:	200005c8 	.word	0x200005c8
 8002b8c:	20000704 	.word	0x20000704
 8002b90:	20000718 	.word	0x20000718
 8002b94:	2000071c 	.word	0x2000071c
 8002b98:	200006e4 	.word	0x200006e4
 8002b9c:	200006fc 	.word	0x200006fc
 8002ba0:	200006ec 	.word	0x200006ec
 8002ba4:	200006dc 	.word	0x200006dc
 8002ba8:	200006f4 	.word	0x200006f4
 8002bac:	200006d4 	.word	0x200006d4

08002bb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <HAL_MspInit+0x4c>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8002bfc <HAL_MspInit+0x4c>)
 8002bc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bfc <HAL_MspInit+0x4c>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <HAL_MspInit+0x4c>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	4a08      	ldr	r2, [pc, #32]	@ (8002bfc <HAL_MspInit+0x4c>)
 8002bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be2:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <HAL_MspInit+0x4c>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002bee:	2007      	movs	r0, #7
 8002bf0:	f001 fd0e 	bl	8004610 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bf4:	bf00      	nop
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40023800 	.word	0x40023800

08002c00 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	@ 0x28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 0314 	add.w	r3, r7, #20
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a17      	ldr	r2, [pc, #92]	@ (8002c7c <HAL_ADC_MspInit+0x7c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d127      	bne.n	8002c72 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	4b16      	ldr	r3, [pc, #88]	@ (8002c80 <HAL_ADC_MspInit+0x80>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2a:	4a15      	ldr	r2, [pc, #84]	@ (8002c80 <HAL_ADC_MspInit+0x80>)
 8002c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c32:	4b13      	ldr	r3, [pc, #76]	@ (8002c80 <HAL_ADC_MspInit+0x80>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b0f      	ldr	r3, [pc, #60]	@ (8002c80 <HAL_ADC_MspInit+0x80>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	4a0e      	ldr	r2, [pc, #56]	@ (8002c80 <HAL_ADC_MspInit+0x80>)
 8002c48:	f043 0304 	orr.w	r3, r3, #4
 8002c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <HAL_ADC_MspInit+0x80>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_ADC_Pin;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_ADC_GPIO_Port, &GPIO_InitStruct);
 8002c66:	f107 0314 	add.w	r3, r7, #20
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4805      	ldr	r0, [pc, #20]	@ (8002c84 <HAL_ADC_MspInit+0x84>)
 8002c6e:	f002 f88d 	bl	8004d8c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002c72:	bf00      	nop
 8002c74:	3728      	adds	r7, #40	@ 0x28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40012000 	.word	0x40012000
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020800 	.word	0x40020800

08002c88 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08c      	sub	sp, #48	@ 0x30
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	f107 031c 	add.w	r3, r7, #28
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a42      	ldr	r2, [pc, #264]	@ (8002db0 <HAL_I2C_MspInit+0x128>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d12c      	bne.n	8002d04 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	4b41      	ldr	r3, [pc, #260]	@ (8002db4 <HAL_I2C_MspInit+0x12c>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	4a40      	ldr	r2, [pc, #256]	@ (8002db4 <HAL_I2C_MspInit+0x12c>)
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cba:	4b3e      	ldr	r3, [pc, #248]	@ (8002db4 <HAL_I2C_MspInit+0x12c>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cc6:	23c0      	movs	r3, #192	@ 0xc0
 8002cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cca:	2312      	movs	r3, #18
 8002ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cda:	f107 031c 	add.w	r3, r7, #28
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4835      	ldr	r0, [pc, #212]	@ (8002db8 <HAL_I2C_MspInit+0x130>)
 8002ce2:	f002 f853 	bl	8004d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	4b32      	ldr	r3, [pc, #200]	@ (8002db4 <HAL_I2C_MspInit+0x12c>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	4a31      	ldr	r2, [pc, #196]	@ (8002db4 <HAL_I2C_MspInit+0x12c>)
 8002cf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8002db4 <HAL_I2C_MspInit+0x12c>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d02:	e050      	b.n	8002da6 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a2c      	ldr	r2, [pc, #176]	@ (8002dbc <HAL_I2C_MspInit+0x134>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d14b      	bne.n	8002da6 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	4b28      	ldr	r3, [pc, #160]	@ (8002db4 <HAL_I2C_MspInit+0x12c>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d16:	4a27      	ldr	r2, [pc, #156]	@ (8002db4 <HAL_I2C_MspInit+0x12c>)
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d1e:	4b25      	ldr	r3, [pc, #148]	@ (8002db4 <HAL_I2C_MspInit+0x12c>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b21      	ldr	r3, [pc, #132]	@ (8002db4 <HAL_I2C_MspInit+0x12c>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	4a20      	ldr	r2, [pc, #128]	@ (8002db4 <HAL_I2C_MspInit+0x12c>)
 8002d34:	f043 0304 	orr.w	r3, r3, #4
 8002d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002db4 <HAL_I2C_MspInit+0x12c>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d4c:	2312      	movs	r3, #18
 8002d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d58:	2304      	movs	r3, #4
 8002d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5c:	f107 031c 	add.w	r3, r7, #28
 8002d60:	4619      	mov	r1, r3
 8002d62:	4815      	ldr	r0, [pc, #84]	@ (8002db8 <HAL_I2C_MspInit+0x130>)
 8002d64:	f002 f812 	bl	8004d8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d6e:	2312      	movs	r3, #18
 8002d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d76:	2303      	movs	r3, #3
 8002d78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d7e:	f107 031c 	add.w	r3, r7, #28
 8002d82:	4619      	mov	r1, r3
 8002d84:	480e      	ldr	r0, [pc, #56]	@ (8002dc0 <HAL_I2C_MspInit+0x138>)
 8002d86:	f002 f801 	bl	8004d8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <HAL_I2C_MspInit+0x12c>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	4a08      	ldr	r2, [pc, #32]	@ (8002db4 <HAL_I2C_MspInit+0x12c>)
 8002d94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d9a:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_I2C_MspInit+0x12c>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
}
 8002da6:	bf00      	nop
 8002da8:	3730      	adds	r7, #48	@ 0x30
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40005400 	.word	0x40005400
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40020400 	.word	0x40020400
 8002dbc:	40005800 	.word	0x40005800
 8002dc0:	40020800 	.word	0x40020800

08002dc4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08c      	sub	sp, #48	@ 0x30
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dcc:	f107 031c 	add.w	r3, r7, #28
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a32      	ldr	r2, [pc, #200]	@ (8002eac <HAL_TIM_Encoder_MspInit+0xe8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d12d      	bne.n	8002e42 <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	4b31      	ldr	r3, [pc, #196]	@ (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	4a30      	ldr	r2, [pc, #192]	@ (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002df6:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	61bb      	str	r3, [r7, #24]
 8002e00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	4a29      	ldr	r2, [pc, #164]	@ (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e12:	4b27      	ldr	r3, [pc, #156]	@ (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8002e1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e24:	2302      	movs	r3, #2
 8002e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e30:	2301      	movs	r3, #1
 8002e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e34:	f107 031c 	add.w	r3, r7, #28
 8002e38:	4619      	mov	r1, r3
 8002e3a:	481e      	ldr	r0, [pc, #120]	@ (8002eb4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002e3c:	f001 ffa6 	bl	8004d8c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e40:	e030      	b.n	8002ea4 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e4a:	d12b      	bne.n	8002ea4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	4b17      	ldr	r3, [pc, #92]	@ (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e54:	4a16      	ldr	r2, [pc, #88]	@ (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e5c:	4b14      	ldr	r3, [pc, #80]	@ (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	4b10      	ldr	r3, [pc, #64]	@ (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e70:	4a0f      	ldr	r2, [pc, #60]	@ (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e78:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8002e84:	2303      	movs	r3, #3
 8002e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e94:	2301      	movs	r3, #1
 8002e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e98:	f107 031c 	add.w	r3, r7, #28
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4805      	ldr	r0, [pc, #20]	@ (8002eb4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002ea0:	f001 ff74 	bl	8004d8c <HAL_GPIO_Init>
}
 8002ea4:	bf00      	nop
 8002ea6:	3730      	adds	r7, #48	@ 0x30
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40020000 	.word	0x40020000

08002eb8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ef4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d10d      	bne.n	8002ee6 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <HAL_TIM_PWM_MspInit+0x40>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	4a09      	ldr	r2, [pc, #36]	@ (8002ef8 <HAL_TIM_PWM_MspInit+0x40>)
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eda:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <HAL_TIM_PWM_MspInit+0x40>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40000400 	.word	0x40000400
 8002ef8:	40023800 	.word	0x40023800

08002efc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	@ 0x28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 0314 	add.w	r3, r7, #20
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a21      	ldr	r2, [pc, #132]	@ (8002fa0 <HAL_TIM_MspPostInit+0xa4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d13b      	bne.n	8002f96 <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	4b20      	ldr	r3, [pc, #128]	@ (8002fa4 <HAL_TIM_MspPostInit+0xa8>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	4a1f      	ldr	r2, [pc, #124]	@ (8002fa4 <HAL_TIM_MspPostInit+0xa8>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa4 <HAL_TIM_MspPostInit+0xa8>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	4b19      	ldr	r3, [pc, #100]	@ (8002fa4 <HAL_TIM_MspPostInit+0xa8>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	4a18      	ldr	r2, [pc, #96]	@ (8002fa4 <HAL_TIM_MspPostInit+0xa8>)
 8002f44:	f043 0302 	orr.w	r3, r3, #2
 8002f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f4a:	4b16      	ldr	r3, [pc, #88]	@ (8002fa4 <HAL_TIM_MspPostInit+0xa8>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f56:	23c0      	movs	r3, #192	@ 0xc0
 8002f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f62:	2300      	movs	r3, #0
 8002f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f66:	2302      	movs	r3, #2
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f6a:	f107 0314 	add.w	r3, r7, #20
 8002f6e:	4619      	mov	r1, r3
 8002f70:	480d      	ldr	r0, [pc, #52]	@ (8002fa8 <HAL_TIM_MspPostInit+0xac>)
 8002f72:	f001 ff0b 	bl	8004d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f76:	2303      	movs	r3, #3
 8002f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f82:	2300      	movs	r3, #0
 8002f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f86:	2302      	movs	r3, #2
 8002f88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8a:	f107 0314 	add.w	r3, r7, #20
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4806      	ldr	r0, [pc, #24]	@ (8002fac <HAL_TIM_MspPostInit+0xb0>)
 8002f92:	f001 fefb 	bl	8004d8c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f96:	bf00      	nop
 8002f98:	3728      	adds	r7, #40	@ 0x28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40000400 	.word	0x40000400
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	40020400 	.word	0x40020400

08002fb0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08e      	sub	sp, #56	@ 0x38
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a66      	ldr	r2, [pc, #408]	@ (8003168 <HAL_UART_MspInit+0x1b8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d12c      	bne.n	800302c <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	623b      	str	r3, [r7, #32]
 8002fd6:	4b65      	ldr	r3, [pc, #404]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	4a64      	ldr	r2, [pc, #400]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 8002fdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe2:	4b62      	ldr	r3, [pc, #392]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fea:	623b      	str	r3, [r7, #32]
 8002fec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	4b5e      	ldr	r3, [pc, #376]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	4a5d      	ldr	r2, [pc, #372]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ffe:	4b5b      	ldr	r3, [pc, #364]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800300a:	230c      	movs	r3, #12
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300e:	2302      	movs	r3, #2
 8003010:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2300      	movs	r3, #0
 8003014:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003016:	2303      	movs	r3, #3
 8003018:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800301a:	2307      	movs	r3, #7
 800301c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003022:	4619      	mov	r1, r3
 8003024:	4852      	ldr	r0, [pc, #328]	@ (8003170 <HAL_UART_MspInit+0x1c0>)
 8003026:	f001 feb1 	bl	8004d8c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800302a:	e099      	b.n	8003160 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a50      	ldr	r2, [pc, #320]	@ (8003174 <HAL_UART_MspInit+0x1c4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d12d      	bne.n	8003092 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	4b4c      	ldr	r3, [pc, #304]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	4a4b      	ldr	r2, [pc, #300]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 8003040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003044:	6413      	str	r3, [r2, #64]	@ 0x40
 8003046:	4b49      	ldr	r3, [pc, #292]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800304e:	61bb      	str	r3, [r7, #24]
 8003050:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	4b45      	ldr	r3, [pc, #276]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	4a44      	ldr	r2, [pc, #272]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 800305c:	f043 0304 	orr.w	r3, r3, #4
 8003060:	6313      	str	r3, [r2, #48]	@ 0x30
 8003062:	4b42      	ldr	r3, [pc, #264]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800306e:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003074:	2302      	movs	r3, #2
 8003076:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307c:	2303      	movs	r3, #3
 800307e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003080:	2307      	movs	r3, #7
 8003082:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003084:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003088:	4619      	mov	r1, r3
 800308a:	483b      	ldr	r0, [pc, #236]	@ (8003178 <HAL_UART_MspInit+0x1c8>)
 800308c:	f001 fe7e 	bl	8004d8c <HAL_GPIO_Init>
}
 8003090:	e066      	b.n	8003160 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a39      	ldr	r2, [pc, #228]	@ (800317c <HAL_UART_MspInit+0x1cc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d161      	bne.n	8003160 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	4b32      	ldr	r3, [pc, #200]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 80030a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a4:	4a31      	ldr	r2, [pc, #196]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 80030a6:	f043 0320 	orr.w	r3, r3, #32
 80030aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ac:	4b2f      	ldr	r3, [pc, #188]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 80030ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	4b2b      	ldr	r3, [pc, #172]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c0:	4a2a      	ldr	r2, [pc, #168]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 80030c2:	f043 0304 	orr.w	r3, r3, #4
 80030c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c8:	4b28      	ldr	r3, [pc, #160]	@ (800316c <HAL_UART_MspInit+0x1bc>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030d4:	23c0      	movs	r3, #192	@ 0xc0
 80030d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d8:	2302      	movs	r3, #2
 80030da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e0:	2303      	movs	r3, #3
 80030e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80030e4:	2308      	movs	r3, #8
 80030e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030ec:	4619      	mov	r1, r3
 80030ee:	4822      	ldr	r0, [pc, #136]	@ (8003178 <HAL_UART_MspInit+0x1c8>)
 80030f0:	f001 fe4c 	bl	8004d8c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80030f4:	4b22      	ldr	r3, [pc, #136]	@ (8003180 <HAL_UART_MspInit+0x1d0>)
 80030f6:	4a23      	ldr	r2, [pc, #140]	@ (8003184 <HAL_UART_MspInit+0x1d4>)
 80030f8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80030fa:	4b21      	ldr	r3, [pc, #132]	@ (8003180 <HAL_UART_MspInit+0x1d0>)
 80030fc:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003100:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003102:	4b1f      	ldr	r3, [pc, #124]	@ (8003180 <HAL_UART_MspInit+0x1d0>)
 8003104:	2200      	movs	r2, #0
 8003106:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003108:	4b1d      	ldr	r3, [pc, #116]	@ (8003180 <HAL_UART_MspInit+0x1d0>)
 800310a:	2200      	movs	r2, #0
 800310c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800310e:	4b1c      	ldr	r3, [pc, #112]	@ (8003180 <HAL_UART_MspInit+0x1d0>)
 8003110:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003114:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003116:	4b1a      	ldr	r3, [pc, #104]	@ (8003180 <HAL_UART_MspInit+0x1d0>)
 8003118:	2200      	movs	r2, #0
 800311a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800311c:	4b18      	ldr	r3, [pc, #96]	@ (8003180 <HAL_UART_MspInit+0x1d0>)
 800311e:	2200      	movs	r2, #0
 8003120:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003122:	4b17      	ldr	r3, [pc, #92]	@ (8003180 <HAL_UART_MspInit+0x1d0>)
 8003124:	2200      	movs	r2, #0
 8003126:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003128:	4b15      	ldr	r3, [pc, #84]	@ (8003180 <HAL_UART_MspInit+0x1d0>)
 800312a:	2200      	movs	r2, #0
 800312c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800312e:	4b14      	ldr	r3, [pc, #80]	@ (8003180 <HAL_UART_MspInit+0x1d0>)
 8003130:	2200      	movs	r2, #0
 8003132:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003134:	4812      	ldr	r0, [pc, #72]	@ (8003180 <HAL_UART_MspInit+0x1d0>)
 8003136:	f001 faad 	bl	8004694 <HAL_DMA_Init>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_UART_MspInit+0x194>
      Error_Handler();
 8003140:	f7ff f824 	bl	800218c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a0e      	ldr	r2, [pc, #56]	@ (8003180 <HAL_UART_MspInit+0x1d0>)
 8003148:	63da      	str	r2, [r3, #60]	@ 0x3c
 800314a:	4a0d      	ldr	r2, [pc, #52]	@ (8003180 <HAL_UART_MspInit+0x1d0>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003150:	2200      	movs	r2, #0
 8003152:	2100      	movs	r1, #0
 8003154:	2047      	movs	r0, #71	@ 0x47
 8003156:	f001 fa66 	bl	8004626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800315a:	2047      	movs	r0, #71	@ 0x47
 800315c:	f001 fa7f 	bl	800465e <HAL_NVIC_EnableIRQ>
}
 8003160:	bf00      	nop
 8003162:	3738      	adds	r7, #56	@ 0x38
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40004400 	.word	0x40004400
 800316c:	40023800 	.word	0x40023800
 8003170:	40020000 	.word	0x40020000
 8003174:	40004800 	.word	0x40004800
 8003178:	40020800 	.word	0x40020800
 800317c:	40011400 	.word	0x40011400
 8003180:	20000564 	.word	0x20000564
 8003184:	40026428 	.word	0x40026428

08003188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800318c:	bf00      	nop
 800318e:	e7fd      	b.n	800318c <NMI_Handler+0x4>

08003190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003194:	bf00      	nop
 8003196:	e7fd      	b.n	8003194 <HardFault_Handler+0x4>

08003198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800319c:	bf00      	nop
 800319e:	e7fd      	b.n	800319c <MemManage_Handler+0x4>

080031a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031a4:	bf00      	nop
 80031a6:	e7fd      	b.n	80031a4 <BusFault_Handler+0x4>

080031a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031ac:	bf00      	nop
 80031ae:	e7fd      	b.n	80031ac <UsageFault_Handler+0x4>

080031b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031be:	b480      	push	{r7}
 80031c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031c2:	bf00      	nop
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031e0:	f000 fcf2 	bl	8003bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick_accumulator += 1;  // Increment by 1 ms
 80031e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <SysTick_Handler+0x3c>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	3301      	adds	r3, #1
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003218 <SysTick_Handler+0x3c>)
 80031f0:	701a      	strb	r2, [r3, #0]
  if(systick_function_enabled){
 80031f2:	4b0a      	ldr	r3, [pc, #40]	@ (800321c <SysTick_Handler+0x40>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d009      	beq.n	8003210 <SysTick_Handler+0x34>
	  if (tick_accumulator >= TICK_INTERVAL) {
 80031fc:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <SysTick_Handler+0x3c>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b13      	cmp	r3, #19
 8003204:	d904      	bls.n	8003210 <SysTick_Handler+0x34>
	        tick_accumulator = 0;  // Accumulate remainder
 8003206:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <SysTick_Handler+0x3c>)
 8003208:	2200      	movs	r2, #0
 800320a:	701a      	strb	r2, [r3, #0]
	        SysTickFunction();
 800320c:	f000 f98e 	bl	800352c <SysTickFunction>
	      }
  }

  CheckEncoderCounts();
 8003210:	f000 f9b8 	bl	8003584 <CheckEncoderCounts>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000724 	.word	0x20000724
 800321c:	200005c4 	.word	0x200005c4

08003220 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003224:	2008      	movs	r0, #8
 8003226:	f001 ff5f 	bl	80050e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}

0800322e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003232:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003236:	f001 ff57 	bl	80050e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800323a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800323e:	f001 ff53 	bl	80050e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800324c:	4802      	ldr	r0, [pc, #8]	@ (8003258 <DMA2_Stream1_IRQHandler+0x10>)
 800324e:	f001 fb61 	bl	8004914 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000564 	.word	0x20000564

0800325c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0

  /* USER CODE END USART6_IRQn 0 */
  //HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */
	/* Check if receive interrupt */
	if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) != RESET) {
 8003260:	4b3f      	ldr	r3, [pc, #252]	@ (8003360 <USART6_IRQHandler+0x104>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b20      	cmp	r3, #32
 800326c:	d173      	bne.n	8003356 <USART6_IRQHandler+0xfa>
	    /* Read byte from UART */
		rxByte = (uint8_t)(huart6.Instance->DR & 0xFF);
 800326e:	4b3c      	ldr	r3, [pc, #240]	@ (8003360 <USART6_IRQHandler+0x104>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	b2da      	uxtb	r2, r3
 8003276:	4b3b      	ldr	r3, [pc, #236]	@ (8003364 <USART6_IRQHandler+0x108>)
 8003278:	701a      	strb	r2, [r3, #0]

	    /* State machine for packet reception */
	    switch (rxState) {
 800327a:	4b3b      	ldr	r3, [pc, #236]	@ (8003368 <USART6_IRQHandler+0x10c>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b04      	cmp	r3, #4
 8003280:	d85e      	bhi.n	8003340 <USART6_IRQHandler+0xe4>
 8003282:	a201      	add	r2, pc, #4	@ (adr r2, 8003288 <USART6_IRQHandler+0x2c>)
 8003284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003288:	0800329d 	.word	0x0800329d
 800328c:	080032ad 	.word	0x080032ad
 8003290:	080032bd 	.word	0x080032bd
 8003294:	080032e3 	.word	0x080032e3
 8003298:	0800332d 	.word	0x0800332d
	      case WAITING_FOR_START:
	        if (rxByte == START_MARKER) {
 800329c:	4b31      	ldr	r3, [pc, #196]	@ (8003364 <USART6_IRQHandler+0x108>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b3c      	cmp	r3, #60	@ 0x3c
 80032a2:	d151      	bne.n	8003348 <USART6_IRQHandler+0xec>
	          rxState = WAITING_FOR_CMD;
 80032a4:	4b30      	ldr	r3, [pc, #192]	@ (8003368 <USART6_IRQHandler+0x10c>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
	        }
	        break;
 80032aa:	e04d      	b.n	8003348 <USART6_IRQHandler+0xec>

	      case WAITING_FOR_CMD:
	        rxCmd = rxByte;
 80032ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003364 <USART6_IRQHandler+0x108>)
 80032ae:	781a      	ldrb	r2, [r3, #0]
 80032b0:	4b2e      	ldr	r3, [pc, #184]	@ (800336c <USART6_IRQHandler+0x110>)
 80032b2:	701a      	strb	r2, [r3, #0]
	        rxState = WAITING_FOR_LENGTH;
 80032b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003368 <USART6_IRQHandler+0x10c>)
 80032b6:	2202      	movs	r2, #2
 80032b8:	701a      	strb	r2, [r3, #0]
	        break;
 80032ba:	e046      	b.n	800334a <USART6_IRQHandler+0xee>

	      case WAITING_FOR_LENGTH:
	        rxLength = rxByte;
 80032bc:	4b29      	ldr	r3, [pc, #164]	@ (8003364 <USART6_IRQHandler+0x108>)
 80032be:	781a      	ldrb	r2, [r3, #0]
 80032c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003370 <USART6_IRQHandler+0x114>)
 80032c2:	701a      	strb	r2, [r3, #0]
	        rxIndex = 0;
 80032c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003374 <USART6_IRQHandler+0x118>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]

	        if (rxLength > 0) {
 80032ca:	4b29      	ldr	r3, [pc, #164]	@ (8003370 <USART6_IRQHandler+0x114>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <USART6_IRQHandler+0x7e>
	          rxState = RECEIVING_DATA;
 80032d2:	4b25      	ldr	r3, [pc, #148]	@ (8003368 <USART6_IRQHandler+0x10c>)
 80032d4:	2203      	movs	r2, #3
 80032d6:	701a      	strb	r2, [r3, #0]
	        } else {
	          rxState = WAITING_FOR_END;
	        }
	        break;
 80032d8:	e037      	b.n	800334a <USART6_IRQHandler+0xee>
	          rxState = WAITING_FOR_END;
 80032da:	4b23      	ldr	r3, [pc, #140]	@ (8003368 <USART6_IRQHandler+0x10c>)
 80032dc:	2204      	movs	r2, #4
 80032de:	701a      	strb	r2, [r3, #0]
	        break;
 80032e0:	e033      	b.n	800334a <USART6_IRQHandler+0xee>

	      case RECEIVING_DATA:
	        if (rxIndex < rxLength && rxIndex < MAX_BUFFER_SIZE) {
 80032e2:	4b24      	ldr	r3, [pc, #144]	@ (8003374 <USART6_IRQHandler+0x118>)
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	4b22      	ldr	r3, [pc, #136]	@ (8003370 <USART6_IRQHandler+0x114>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d219      	bcs.n	8003322 <USART6_IRQHandler+0xc6>
 80032ee:	4b21      	ldr	r3, [pc, #132]	@ (8003374 <USART6_IRQHandler+0x118>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	b25b      	sxtb	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	db14      	blt.n	8003322 <USART6_IRQHandler+0xc6>
	          rxBuffer[rxIndex++] = rxByte;
 80032f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003374 <USART6_IRQHandler+0x118>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	1c5a      	adds	r2, r3, #1
 80032fe:	b2d1      	uxtb	r1, r2
 8003300:	4a1c      	ldr	r2, [pc, #112]	@ (8003374 <USART6_IRQHandler+0x118>)
 8003302:	7011      	strb	r1, [r2, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	4b17      	ldr	r3, [pc, #92]	@ (8003364 <USART6_IRQHandler+0x108>)
 8003308:	7819      	ldrb	r1, [r3, #0]
 800330a:	4b1b      	ldr	r3, [pc, #108]	@ (8003378 <USART6_IRQHandler+0x11c>)
 800330c:	5499      	strb	r1, [r3, r2]

	          if (rxIndex >= rxLength) {
 800330e:	4b19      	ldr	r3, [pc, #100]	@ (8003374 <USART6_IRQHandler+0x118>)
 8003310:	781a      	ldrb	r2, [r3, #0]
 8003312:	4b17      	ldr	r3, [pc, #92]	@ (8003370 <USART6_IRQHandler+0x114>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d307      	bcc.n	800332a <USART6_IRQHandler+0xce>
	            rxState = WAITING_FOR_END;
 800331a:	4b13      	ldr	r3, [pc, #76]	@ (8003368 <USART6_IRQHandler+0x10c>)
 800331c:	2204      	movs	r2, #4
 800331e:	701a      	strb	r2, [r3, #0]
	          if (rxIndex >= rxLength) {
 8003320:	e003      	b.n	800332a <USART6_IRQHandler+0xce>
	          }
	        } else {
	          /* Buffer overflow, reset state */
	          rxState = WAITING_FOR_START;
 8003322:	4b11      	ldr	r3, [pc, #68]	@ (8003368 <USART6_IRQHandler+0x10c>)
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]
	        }
	        break;
 8003328:	e00f      	b.n	800334a <USART6_IRQHandler+0xee>
 800332a:	e00e      	b.n	800334a <USART6_IRQHandler+0xee>

	      case WAITING_FOR_END:
	        if (rxByte == END_MARKER) {
 800332c:	4b0d      	ldr	r3, [pc, #52]	@ (8003364 <USART6_IRQHandler+0x108>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b3e      	cmp	r3, #62	@ 0x3e
 8003332:	d101      	bne.n	8003338 <USART6_IRQHandler+0xdc>
	          /* Complete packet received, process it */
	          ProcessCommand();
 8003334:	f7fd fe3e 	bl	8000fb4 <ProcessCommand>
	        }
	        /* Reset state machine for next packet */
	        rxState = WAITING_FOR_START;
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <USART6_IRQHandler+0x10c>)
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
	        break;
 800333e:	e004      	b.n	800334a <USART6_IRQHandler+0xee>

	      default:
	        rxState = WAITING_FOR_START;
 8003340:	4b09      	ldr	r3, [pc, #36]	@ (8003368 <USART6_IRQHandler+0x10c>)
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
	        break;
 8003346:	e000      	b.n	800334a <USART6_IRQHandler+0xee>
	        break;
 8003348:	bf00      	nop
	    }

	    /* Clear interrupt flag - use _CLEAR_FLAG instead of _CLEAR_IT */
	    __HAL_UART_CLEAR_FLAG(&huart6, UART_FLAG_RXNE);
 800334a:	4b05      	ldr	r3, [pc, #20]	@ (8003360 <USART6_IRQHandler+0x104>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f06f 0220 	mvn.w	r2, #32
 8003352:	601a      	str	r2, [r3, #0]
	  else {
	    HAL_UART_IRQHandler(&huart6);
	  }

  /* USER CODE END USART6_IRQn 1 */
}
 8003354:	e002      	b.n	800335c <USART6_IRQHandler+0x100>
	    HAL_UART_IRQHandler(&huart6);
 8003356:	4802      	ldr	r0, [pc, #8]	@ (8003360 <USART6_IRQHandler+0x104>)
 8003358:	f004 f93e 	bl	80075d8 <HAL_UART_IRQHandler>
}
 800335c:	bf00      	nop
 800335e:	bd80      	pop	{r7, pc}
 8003360:	2000051c 	.word	0x2000051c
 8003364:	2000027b 	.word	0x2000027b
 8003368:	200001f4 	.word	0x200001f4
 800336c:	20000278 	.word	0x20000278
 8003370:	20000279 	.word	0x20000279
 8003374:	2000027a 	.word	0x2000027a
 8003378:	200001f8 	.word	0x200001f8

0800337c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return 1;
 8003380:	2301      	movs	r3, #1
}
 8003382:	4618      	mov	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <_kill>:

int _kill(int pid, int sig)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003396:	f005 fd9b 	bl	8008ed0 <__errno>
 800339a:	4603      	mov	r3, r0
 800339c:	2216      	movs	r2, #22
 800339e:	601a      	str	r2, [r3, #0]
  return -1;
 80033a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <_exit>:

void _exit (int status)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033b4:	f04f 31ff 	mov.w	r1, #4294967295
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff ffe7 	bl	800338c <_kill>
  while (1) {}    /* Make sure we hang here */
 80033be:	bf00      	nop
 80033c0:	e7fd      	b.n	80033be <_exit+0x12>

080033c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b086      	sub	sp, #24
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e00a      	b.n	80033ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033d4:	f3af 8000 	nop.w
 80033d8:	4601      	mov	r1, r0
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	60ba      	str	r2, [r7, #8]
 80033e0:	b2ca      	uxtb	r2, r1
 80033e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	3301      	adds	r3, #1
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	dbf0      	blt.n	80033d4 <_read+0x12>
  }

  return len;
 80033f2:	687b      	ldr	r3, [r7, #4]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	e009      	b.n	8003422 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	60ba      	str	r2, [r7, #8]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	3301      	adds	r3, #1
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	429a      	cmp	r2, r3
 8003428:	dbf1      	blt.n	800340e <_write+0x12>
  }
  return len;
 800342a:	687b      	ldr	r3, [r7, #4]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <_close>:

int _close(int file)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800343c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800345c:	605a      	str	r2, [r3, #4]
  return 0;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <_isatty>:

int _isatty(int file)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003474:	2301      	movs	r3, #1
}
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034a4:	4a14      	ldr	r2, [pc, #80]	@ (80034f8 <_sbrk+0x5c>)
 80034a6:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <_sbrk+0x60>)
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034b0:	4b13      	ldr	r3, [pc, #76]	@ (8003500 <_sbrk+0x64>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034b8:	4b11      	ldr	r3, [pc, #68]	@ (8003500 <_sbrk+0x64>)
 80034ba:	4a12      	ldr	r2, [pc, #72]	@ (8003504 <_sbrk+0x68>)
 80034bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034be:	4b10      	ldr	r3, [pc, #64]	@ (8003500 <_sbrk+0x64>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d207      	bcs.n	80034dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034cc:	f005 fd00 	bl	8008ed0 <__errno>
 80034d0:	4603      	mov	r3, r0
 80034d2:	220c      	movs	r2, #12
 80034d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034d6:	f04f 33ff 	mov.w	r3, #4294967295
 80034da:	e009      	b.n	80034f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034dc:	4b08      	ldr	r3, [pc, #32]	@ (8003500 <_sbrk+0x64>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034e2:	4b07      	ldr	r3, [pc, #28]	@ (8003500 <_sbrk+0x64>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4413      	add	r3, r2
 80034ea:	4a05      	ldr	r2, [pc, #20]	@ (8003500 <_sbrk+0x64>)
 80034ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034ee:	68fb      	ldr	r3, [r7, #12]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20020000 	.word	0x20020000
 80034fc:	00000400 	.word	0x00000400
 8003500:	20000728 	.word	0x20000728
 8003504:	20000c88 	.word	0x20000c88

08003508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800350c:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <SystemInit+0x20>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003512:	4a05      	ldr	r2, [pc, #20]	@ (8003528 <SystemInit+0x20>)
 8003514:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <SysTickFunction>:
extern Motion motion;

extern volatile uint8_t systick_function_enabled;
extern UART_HandleTypeDef huart3;

void SysTickFunction(void) {
 800352c:	b580      	push	{r7, lr}
 800352e:	ed2d 8b02 	vpush	{d8}
 8003532:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */
	//--------------------------------------------------------------------
		update_Encoder_Data();
 8003534:	f7fe f918 	bl	8001768 <update_Encoder_Data>
		Motion_Update(&motion);
 8003538:	4810      	ldr	r0, [pc, #64]	@ (800357c <SysTickFunction+0x50>)
 800353a:	f7fe fe79 	bl	8002230 <Motion_Update>
		Sensors_Update();
 800353e:	f7ff fa9f 	bl	8002a80 <Sensors_Update>

		UpdateControllers(&controller, Motion_Velocity(&motion), Motion_Omega(&motion), get_steering_feedback());
 8003542:	480e      	ldr	r0, [pc, #56]	@ (800357c <SysTickFunction+0x50>)
 8003544:	f7fe fe54 	bl	80021f0 <Motion_Velocity>
 8003548:	eeb0 8a40 	vmov.f32	s16, s0
 800354c:	480b      	ldr	r0, [pc, #44]	@ (800357c <SysTickFunction+0x50>)
 800354e:	f7fe fe5f 	bl	8002210 <Motion_Omega>
 8003552:	eef0 8a40 	vmov.f32	s17, s0
 8003556:	f7ff fa27 	bl	80029a8 <get_steering_feedback>
 800355a:	eef0 7a40 	vmov.f32	s15, s0
 800355e:	eeb0 1a67 	vmov.f32	s2, s15
 8003562:	eef0 0a68 	vmov.f32	s1, s17
 8003566:	eeb0 0a48 	vmov.f32	s0, s16
 800356a:	4805      	ldr	r0, [pc, #20]	@ (8003580 <SysTickFunction+0x54>)
 800356c:	f7fd fed2 	bl	8001314 <UpdateControllers>
		//UART_Transmit_Int(&huart3, "L", linecolorRPI);
		//UART_Transmit_Int(&huart3, "B", ballcolorRPI);



}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	ecbd 8b02 	vpop	{d8}
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	200005f4 	.word	0x200005f4
 8003580:	200006a8 	.word	0x200006a8

08003584 <CheckEncoderCounts>:
	//HAL_Delay(10);
  systick_function_enabled = 0;
  HAL_Delay(10);
}

void CheckEncoderCounts(void){
 8003584:	b590      	push	{r4, r7, lr}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
		 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
		 *
		 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
		 * turning. But that'll be approximately never in Micromouse :)
		 */
		if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 800358a:	f7fe f8c5 	bl	8001718 <getRightEncoderCounts>
 800358e:	4603      	mov	r3, r0
 8003590:	461a      	mov	r2, r3
 8003592:	f647 1318 	movw	r3, #31000	@ 0x7918
 8003596:	429a      	cmp	r2, r3
 8003598:	dc15      	bgt.n	80035c6 <CheckEncoderCounts+0x42>
 800359a:	f7fe f8c9 	bl	8001730 <getLeftEncoderCounts>
 800359e:	4603      	mov	r3, r0
 80035a0:	461a      	mov	r2, r3
 80035a2:	f647 1318 	movw	r3, #31000	@ 0x7918
 80035a6:	429a      	cmp	r2, r3
 80035a8:	dc0d      	bgt.n	80035c6 <CheckEncoderCounts+0x42>
				|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 80035aa:	f7fe f8b5 	bl	8001718 <getRightEncoderCounts>
 80035ae:	4603      	mov	r3, r0
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b0f      	ldr	r3, [pc, #60]	@ (80035f0 <CheckEncoderCounts+0x6c>)
 80035b4:	429a      	cmp	r2, r3
 80035b6:	db06      	blt.n	80035c6 <CheckEncoderCounts+0x42>
 80035b8:	f7fe f8ba 	bl	8001730 <getLeftEncoderCounts>
 80035bc:	4603      	mov	r3, r0
 80035be:	461a      	mov	r2, r3
 80035c0:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <CheckEncoderCounts+0x6c>)
 80035c2:	429a      	cmp	r2, r3
 80035c4:	da10      	bge.n	80035e8 <CheckEncoderCounts+0x64>
			int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 80035c6:	f7fe f8a7 	bl	8001718 <getRightEncoderCounts>
 80035ca:	4603      	mov	r3, r0
 80035cc:	b29c      	uxth	r4, r3
 80035ce:	f7fe f8af 	bl	8001730 <getLeftEncoderCounts>
 80035d2:	4603      	mov	r3, r0
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	1ae3      	subs	r3, r4, r3
 80035d8:	b29b      	uxth	r3, r3
 80035da:	80fb      	strh	r3, [r7, #6]
			resetEncodersinSystick();
 80035dc:	f7fe f8b4 	bl	8001748 <resetEncodersinSystick>
			TIM1->CNT = (int16_t) difference;
 80035e0:	4a04      	ldr	r2, [pc, #16]	@ (80035f4 <CheckEncoderCounts+0x70>)
 80035e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035e6:	6253      	str	r3, [r2, #36]	@ 0x24
		}
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd90      	pop	{r4, r7, pc}
 80035f0:	ffff86e8 	.word	0xffff86e8
 80035f4:	40010000 	.word	0x40010000

080035f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003630 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80035fc:	f7ff ff84 	bl	8003508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003600:	480c      	ldr	r0, [pc, #48]	@ (8003634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003602:	490d      	ldr	r1, [pc, #52]	@ (8003638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003604:	4a0d      	ldr	r2, [pc, #52]	@ (800363c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003608:	e002      	b.n	8003610 <LoopCopyDataInit>

0800360a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800360a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800360c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800360e:	3304      	adds	r3, #4

08003610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003614:	d3f9      	bcc.n	800360a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003616:	4a0a      	ldr	r2, [pc, #40]	@ (8003640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003618:	4c0a      	ldr	r4, [pc, #40]	@ (8003644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800361a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800361c:	e001      	b.n	8003622 <LoopFillZerobss>

0800361e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800361e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003620:	3204      	adds	r2, #4

08003622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003624:	d3fb      	bcc.n	800361e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003626:	f005 fc59 	bl	8008edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800362a:	f7fe f975 	bl	8001918 <main>
  bx  lr    
 800362e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003630:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003638:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800363c:	0800b51c 	.word	0x0800b51c
  ldr r2, =_sbss
 8003640:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003644:	20000c84 	.word	0x20000c84

08003648 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003648:	e7fe      	b.n	8003648 <ADC_IRQHandler>
	...

0800364c <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003652:	f000 f9cd 	bl	80039f0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003656:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800365a:	2201      	movs	r2, #1
 800365c:	2178      	movs	r1, #120	@ 0x78
 800365e:	485b      	ldr	r0, [pc, #364]	@ (80037cc <SSD1306_Init+0x180>)
 8003660:	f001 ff9c 	bl	800559c <HAL_I2C_IsDeviceReady>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800366a:	2300      	movs	r3, #0
 800366c:	e0a9      	b.n	80037c2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800366e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8003672:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003674:	e002      	b.n	800367c <SSD1306_Init+0x30>
		p--;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3b01      	subs	r3, #1
 800367a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f9      	bne.n	8003676 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003682:	22ae      	movs	r2, #174	@ 0xae
 8003684:	2100      	movs	r1, #0
 8003686:	2078      	movs	r0, #120	@ 0x78
 8003688:	f000 fa2e 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800368c:	2220      	movs	r2, #32
 800368e:	2100      	movs	r1, #0
 8003690:	2078      	movs	r0, #120	@ 0x78
 8003692:	f000 fa29 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003696:	2210      	movs	r2, #16
 8003698:	2100      	movs	r1, #0
 800369a:	2078      	movs	r0, #120	@ 0x78
 800369c:	f000 fa24 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80036a0:	22b0      	movs	r2, #176	@ 0xb0
 80036a2:	2100      	movs	r1, #0
 80036a4:	2078      	movs	r0, #120	@ 0x78
 80036a6:	f000 fa1f 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80036aa:	22c8      	movs	r2, #200	@ 0xc8
 80036ac:	2100      	movs	r1, #0
 80036ae:	2078      	movs	r0, #120	@ 0x78
 80036b0:	f000 fa1a 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80036b4:	2200      	movs	r2, #0
 80036b6:	2100      	movs	r1, #0
 80036b8:	2078      	movs	r0, #120	@ 0x78
 80036ba:	f000 fa15 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80036be:	2210      	movs	r2, #16
 80036c0:	2100      	movs	r1, #0
 80036c2:	2078      	movs	r0, #120	@ 0x78
 80036c4:	f000 fa10 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80036c8:	2240      	movs	r2, #64	@ 0x40
 80036ca:	2100      	movs	r1, #0
 80036cc:	2078      	movs	r0, #120	@ 0x78
 80036ce:	f000 fa0b 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80036d2:	2281      	movs	r2, #129	@ 0x81
 80036d4:	2100      	movs	r1, #0
 80036d6:	2078      	movs	r0, #120	@ 0x78
 80036d8:	f000 fa06 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80036dc:	22ff      	movs	r2, #255	@ 0xff
 80036de:	2100      	movs	r1, #0
 80036e0:	2078      	movs	r0, #120	@ 0x78
 80036e2:	f000 fa01 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80036e6:	22a1      	movs	r2, #161	@ 0xa1
 80036e8:	2100      	movs	r1, #0
 80036ea:	2078      	movs	r0, #120	@ 0x78
 80036ec:	f000 f9fc 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80036f0:	22a6      	movs	r2, #166	@ 0xa6
 80036f2:	2100      	movs	r1, #0
 80036f4:	2078      	movs	r0, #120	@ 0x78
 80036f6:	f000 f9f7 	bl	8003ae8 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80036fa:	22a8      	movs	r2, #168	@ 0xa8
 80036fc:	2100      	movs	r1, #0
 80036fe:	2078      	movs	r0, #120	@ 0x78
 8003700:	f000 f9f2 	bl	8003ae8 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8003704:	223f      	movs	r2, #63	@ 0x3f
 8003706:	2100      	movs	r1, #0
 8003708:	2078      	movs	r0, #120	@ 0x78
 800370a:	f000 f9ed 	bl	8003ae8 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800370e:	22a4      	movs	r2, #164	@ 0xa4
 8003710:	2100      	movs	r1, #0
 8003712:	2078      	movs	r0, #120	@ 0x78
 8003714:	f000 f9e8 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003718:	22d3      	movs	r2, #211	@ 0xd3
 800371a:	2100      	movs	r1, #0
 800371c:	2078      	movs	r0, #120	@ 0x78
 800371e:	f000 f9e3 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	2078      	movs	r0, #120	@ 0x78
 8003728:	f000 f9de 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800372c:	22d5      	movs	r2, #213	@ 0xd5
 800372e:	2100      	movs	r1, #0
 8003730:	2078      	movs	r0, #120	@ 0x78
 8003732:	f000 f9d9 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003736:	22f0      	movs	r2, #240	@ 0xf0
 8003738:	2100      	movs	r1, #0
 800373a:	2078      	movs	r0, #120	@ 0x78
 800373c:	f000 f9d4 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003740:	22d9      	movs	r2, #217	@ 0xd9
 8003742:	2100      	movs	r1, #0
 8003744:	2078      	movs	r0, #120	@ 0x78
 8003746:	f000 f9cf 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800374a:	2222      	movs	r2, #34	@ 0x22
 800374c:	2100      	movs	r1, #0
 800374e:	2078      	movs	r0, #120	@ 0x78
 8003750:	f000 f9ca 	bl	8003ae8 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003754:	22da      	movs	r2, #218	@ 0xda
 8003756:	2100      	movs	r1, #0
 8003758:	2078      	movs	r0, #120	@ 0x78
 800375a:	f000 f9c5 	bl	8003ae8 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 800375e:	2212      	movs	r2, #18
 8003760:	2100      	movs	r1, #0
 8003762:	2078      	movs	r0, #120	@ 0x78
 8003764:	f000 f9c0 	bl	8003ae8 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003768:	22db      	movs	r2, #219	@ 0xdb
 800376a:	2100      	movs	r1, #0
 800376c:	2078      	movs	r0, #120	@ 0x78
 800376e:	f000 f9bb 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003772:	2220      	movs	r2, #32
 8003774:	2100      	movs	r1, #0
 8003776:	2078      	movs	r0, #120	@ 0x78
 8003778:	f000 f9b6 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800377c:	228d      	movs	r2, #141	@ 0x8d
 800377e:	2100      	movs	r1, #0
 8003780:	2078      	movs	r0, #120	@ 0x78
 8003782:	f000 f9b1 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003786:	2214      	movs	r2, #20
 8003788:	2100      	movs	r1, #0
 800378a:	2078      	movs	r0, #120	@ 0x78
 800378c:	f000 f9ac 	bl	8003ae8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003790:	22af      	movs	r2, #175	@ 0xaf
 8003792:	2100      	movs	r1, #0
 8003794:	2078      	movs	r0, #120	@ 0x78
 8003796:	f000 f9a7 	bl	8003ae8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800379a:	222e      	movs	r2, #46	@ 0x2e
 800379c:	2100      	movs	r1, #0
 800379e:	2078      	movs	r0, #120	@ 0x78
 80037a0:	f000 f9a2 	bl	8003ae8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80037a4:	2000      	movs	r0, #0
 80037a6:	f000 f843 	bl	8003830 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80037aa:	f000 f813 	bl	80037d4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80037ae:	4b08      	ldr	r3, [pc, #32]	@ (80037d0 <SSD1306_Init+0x184>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80037b4:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <SSD1306_Init+0x184>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80037ba:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <SSD1306_Init+0x184>)
 80037bc:	2201      	movs	r2, #1
 80037be:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80037c0:	2301      	movs	r3, #1
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	2000030c 	.word	0x2000030c
 80037d0:	20000b2c 	.word	0x20000b2c

080037d4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80037da:	2300      	movs	r3, #0
 80037dc:	71fb      	strb	r3, [r7, #7]
 80037de:	e01d      	b.n	800381c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	3b50      	subs	r3, #80	@ 0x50
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	2100      	movs	r1, #0
 80037ea:	2078      	movs	r0, #120	@ 0x78
 80037ec:	f000 f97c 	bl	8003ae8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80037f0:	2200      	movs	r2, #0
 80037f2:	2100      	movs	r1, #0
 80037f4:	2078      	movs	r0, #120	@ 0x78
 80037f6:	f000 f977 	bl	8003ae8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80037fa:	2210      	movs	r2, #16
 80037fc:	2100      	movs	r1, #0
 80037fe:	2078      	movs	r0, #120	@ 0x78
 8003800:	f000 f972 	bl	8003ae8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	01db      	lsls	r3, r3, #7
 8003808:	4a08      	ldr	r2, [pc, #32]	@ (800382c <SSD1306_UpdateScreen+0x58>)
 800380a:	441a      	add	r2, r3
 800380c:	2380      	movs	r3, #128	@ 0x80
 800380e:	2140      	movs	r1, #64	@ 0x40
 8003810:	2078      	movs	r0, #120	@ 0x78
 8003812:	f000 f903 	bl	8003a1c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	3301      	adds	r3, #1
 800381a:	71fb      	strb	r3, [r7, #7]
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	2b07      	cmp	r3, #7
 8003820:	d9de      	bls.n	80037e0 <SSD1306_UpdateScreen+0xc>
	}
}
 8003822:	bf00      	nop
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	2000072c 	.word	0x2000072c

08003830 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <SSD1306_Fill+0x14>
 8003840:	2300      	movs	r3, #0
 8003842:	e000      	b.n	8003846 <SSD1306_Fill+0x16>
 8003844:	23ff      	movs	r3, #255	@ 0xff
 8003846:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800384a:	4619      	mov	r1, r3
 800384c:	4803      	ldr	r0, [pc, #12]	@ (800385c <SSD1306_Fill+0x2c>)
 800384e:	f005 faec 	bl	8008e2a <memset>
}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	2000072c 	.word	0x2000072c

08003860 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	80fb      	strh	r3, [r7, #6]
 800386a:	460b      	mov	r3, r1
 800386c:	80bb      	strh	r3, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	70fb      	strb	r3, [r7, #3]
	if (
 8003872:	88fb      	ldrh	r3, [r7, #6]
 8003874:	2b7f      	cmp	r3, #127	@ 0x7f
 8003876:	d848      	bhi.n	800390a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003878:	88bb      	ldrh	r3, [r7, #4]
 800387a:	2b3f      	cmp	r3, #63	@ 0x3f
 800387c:	d845      	bhi.n	800390a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800387e:	4b26      	ldr	r3, [pc, #152]	@ (8003918 <SSD1306_DrawPixel+0xb8>)
 8003880:	791b      	ldrb	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d006      	beq.n	8003894 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	2b00      	cmp	r3, #0
 800388a:	bf0c      	ite	eq
 800388c:	2301      	moveq	r3, #1
 800388e:	2300      	movne	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d11a      	bne.n	80038d0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800389a:	88fa      	ldrh	r2, [r7, #6]
 800389c:	88bb      	ldrh	r3, [r7, #4]
 800389e:	08db      	lsrs	r3, r3, #3
 80038a0:	b298      	uxth	r0, r3
 80038a2:	4603      	mov	r3, r0
 80038a4:	01db      	lsls	r3, r3, #7
 80038a6:	4413      	add	r3, r2
 80038a8:	4a1c      	ldr	r2, [pc, #112]	@ (800391c <SSD1306_DrawPixel+0xbc>)
 80038aa:	5cd3      	ldrb	r3, [r2, r3]
 80038ac:	b25a      	sxtb	r2, r3
 80038ae:	88bb      	ldrh	r3, [r7, #4]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	2101      	movs	r1, #1
 80038b6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ba:	b25b      	sxtb	r3, r3
 80038bc:	4313      	orrs	r3, r2
 80038be:	b259      	sxtb	r1, r3
 80038c0:	88fa      	ldrh	r2, [r7, #6]
 80038c2:	4603      	mov	r3, r0
 80038c4:	01db      	lsls	r3, r3, #7
 80038c6:	4413      	add	r3, r2
 80038c8:	b2c9      	uxtb	r1, r1
 80038ca:	4a14      	ldr	r2, [pc, #80]	@ (800391c <SSD1306_DrawPixel+0xbc>)
 80038cc:	54d1      	strb	r1, [r2, r3]
 80038ce:	e01d      	b.n	800390c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80038d0:	88fa      	ldrh	r2, [r7, #6]
 80038d2:	88bb      	ldrh	r3, [r7, #4]
 80038d4:	08db      	lsrs	r3, r3, #3
 80038d6:	b298      	uxth	r0, r3
 80038d8:	4603      	mov	r3, r0
 80038da:	01db      	lsls	r3, r3, #7
 80038dc:	4413      	add	r3, r2
 80038de:	4a0f      	ldr	r2, [pc, #60]	@ (800391c <SSD1306_DrawPixel+0xbc>)
 80038e0:	5cd3      	ldrb	r3, [r2, r3]
 80038e2:	b25a      	sxtb	r2, r3
 80038e4:	88bb      	ldrh	r3, [r7, #4]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	b25b      	sxtb	r3, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	b25b      	sxtb	r3, r3
 80038f6:	4013      	ands	r3, r2
 80038f8:	b259      	sxtb	r1, r3
 80038fa:	88fa      	ldrh	r2, [r7, #6]
 80038fc:	4603      	mov	r3, r0
 80038fe:	01db      	lsls	r3, r3, #7
 8003900:	4413      	add	r3, r2
 8003902:	b2c9      	uxtb	r1, r1
 8003904:	4a05      	ldr	r2, [pc, #20]	@ (800391c <SSD1306_DrawPixel+0xbc>)
 8003906:	54d1      	strb	r1, [r2, r3]
 8003908:	e000      	b.n	800390c <SSD1306_DrawPixel+0xac>
		return;
 800390a:	bf00      	nop
	}
}
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000b2c 	.word	0x20000b2c
 800391c:	2000072c 	.word	0x2000072c

08003920 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60ba      	str	r2, [r7, #8]
 8003928:	461a      	mov	r2, r3
 800392a:	4603      	mov	r3, r0
 800392c:	81fb      	strh	r3, [r7, #14]
 800392e:	460b      	mov	r3, r1
 8003930:	81bb      	strh	r3, [r7, #12]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800393a:	3307      	adds	r3, #7
 800393c:	2b00      	cmp	r3, #0
 800393e:	da00      	bge.n	8003942 <SSD1306_DrawBitmap+0x22>
 8003940:	3307      	adds	r3, #7
 8003942:	10db      	asrs	r3, r3, #3
 8003944:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 800394a:	2300      	movs	r3, #0
 800394c:	82bb      	strh	r3, [r7, #20]
 800394e:	e044      	b.n	80039da <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8003950:	2300      	movs	r3, #0
 8003952:	827b      	strh	r3, [r7, #18]
 8003954:	e02f      	b.n	80039b6 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8003956:	8a7b      	ldrh	r3, [r7, #18]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8003960:	7dfb      	ldrb	r3, [r7, #23]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	75fb      	strb	r3, [r7, #23]
 8003966:	e012      	b.n	800398e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8003968:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800396c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003970:	fb03 f202 	mul.w	r2, r3, r2
 8003974:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003978:	2b00      	cmp	r3, #0
 800397a:	da00      	bge.n	800397e <SSD1306_DrawBitmap+0x5e>
 800397c:	3307      	adds	r3, #7
 800397e:	10db      	asrs	r3, r3, #3
 8003980:	b21b      	sxth	r3, r3
 8003982:	4413      	add	r3, r2
 8003984:	461a      	mov	r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4413      	add	r3, r2
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800398e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003992:	2b00      	cmp	r3, #0
 8003994:	da09      	bge.n	80039aa <SSD1306_DrawBitmap+0x8a>
 8003996:	89fa      	ldrh	r2, [r7, #14]
 8003998:	8a7b      	ldrh	r3, [r7, #18]
 800399a:	4413      	add	r3, r2
 800399c:	b29b      	uxth	r3, r3
 800399e:	89b9      	ldrh	r1, [r7, #12]
 80039a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff5b 	bl	8003860 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80039aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3301      	adds	r3, #1
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	827b      	strh	r3, [r7, #18]
 80039b6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80039ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039be:	429a      	cmp	r2, r3
 80039c0:	dbc9      	blt.n	8003956 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80039c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3301      	adds	r3, #1
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	82bb      	strh	r3, [r7, #20]
 80039ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3301      	adds	r3, #1
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	81bb      	strh	r3, [r7, #12]
 80039da:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80039de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	dbb4      	blt.n	8003950 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80039f6:	4b08      	ldr	r3, [pc, #32]	@ (8003a18 <ssd1306_I2C_Init+0x28>)
 80039f8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80039fa:	e002      	b.n	8003a02 <ssd1306_I2C_Init+0x12>
		p--;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f9      	bne.n	80039fc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	0003d090 	.word	0x0003d090

08003a1c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b0c7      	sub	sp, #284	@ 0x11c
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	4604      	mov	r4, r0
 8003a24:	4608      	mov	r0, r1
 8003a26:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8003a2a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8003a2e:	600a      	str	r2, [r1, #0]
 8003a30:	4619      	mov	r1, r3
 8003a32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a36:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003a3a:	4622      	mov	r2, r4
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a42:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003a46:	4602      	mov	r2, r0
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003a52:	460a      	mov	r2, r1
 8003a54:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003a56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a5e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003a62:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8003a66:	7812      	ldrb	r2, [r2, #0]
 8003a68:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003a70:	e015      	b.n	8003a9e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8003a72:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003a76:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003a7a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	441a      	add	r2, r3
 8003a82:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003a86:	3301      	adds	r3, #1
 8003a88:	7811      	ldrb	r1, [r2, #0]
 8003a8a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003a8e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8003a92:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003a94:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003a9e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003aa8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003aac:	8812      	ldrh	r2, [r2, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d8df      	bhi.n	8003a72 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8003ab2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003ab6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	b299      	uxth	r1, r3
 8003abe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003ac2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	f107 020c 	add.w	r2, r7, #12
 8003ad0:	200a      	movs	r0, #10
 8003ad2:	9000      	str	r0, [sp, #0]
 8003ad4:	4803      	ldr	r0, [pc, #12]	@ (8003ae4 <ssd1306_I2C_WriteMulti+0xc8>)
 8003ad6:	f001 fc63 	bl	80053a0 <HAL_I2C_Master_Transmit>
}
 8003ada:	bf00      	nop
 8003adc:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd90      	pop	{r4, r7, pc}
 8003ae4:	2000030c 	.word	0x2000030c

08003ae8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	4603      	mov	r3, r0
 8003af0:	71fb      	strb	r3, [r7, #7]
 8003af2:	460b      	mov	r3, r1
 8003af4:	71bb      	strb	r3, [r7, #6]
 8003af6:	4613      	mov	r3, r2
 8003af8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003afa:	79bb      	ldrb	r3, [r7, #6]
 8003afc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003afe:	797b      	ldrb	r3, [r7, #5]
 8003b00:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	b299      	uxth	r1, r3
 8003b06:	f107 020c 	add.w	r2, r7, #12
 8003b0a:	230a      	movs	r3, #10
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	2302      	movs	r3, #2
 8003b10:	4803      	ldr	r0, [pc, #12]	@ (8003b20 <ssd1306_I2C_Write+0x38>)
 8003b12:	f001 fc45 	bl	80053a0 <HAL_I2C_Master_Transmit>
}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	2000030c 	.word	0x2000030c

08003b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b28:	4b0e      	ldr	r3, [pc, #56]	@ (8003b64 <HAL_Init+0x40>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b64 <HAL_Init+0x40>)
 8003b2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b34:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <HAL_Init+0x40>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a0a      	ldr	r2, [pc, #40]	@ (8003b64 <HAL_Init+0x40>)
 8003b3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b40:	4b08      	ldr	r3, [pc, #32]	@ (8003b64 <HAL_Init+0x40>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a07      	ldr	r2, [pc, #28]	@ (8003b64 <HAL_Init+0x40>)
 8003b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b4c:	2003      	movs	r0, #3
 8003b4e:	f000 fd5f 	bl	8004610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b52:	2000      	movs	r0, #0
 8003b54:	f000 f808 	bl	8003b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b58:	f7ff f82a 	bl	8002bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40023c00 	.word	0x40023c00

08003b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b70:	4b12      	ldr	r3, [pc, #72]	@ (8003bbc <HAL_InitTick+0x54>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <HAL_InitTick+0x58>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fd77 	bl	800467a <HAL_SYSTICK_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e00e      	b.n	8003bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b0f      	cmp	r3, #15
 8003b9a:	d80a      	bhi.n	8003bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba4:	f000 fd3f 	bl	8004626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ba8:	4a06      	ldr	r2, [pc, #24]	@ (8003bc4 <HAL_InitTick+0x5c>)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e000      	b.n	8003bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20000004 	.word	0x20000004
 8003bc0:	2000000c 	.word	0x2000000c
 8003bc4:	20000008 	.word	0x20000008

08003bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bcc:	4b06      	ldr	r3, [pc, #24]	@ (8003be8 <HAL_IncTick+0x20>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b06      	ldr	r3, [pc, #24]	@ (8003bec <HAL_IncTick+0x24>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	4a04      	ldr	r2, [pc, #16]	@ (8003bec <HAL_IncTick+0x24>)
 8003bda:	6013      	str	r3, [r2, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	2000000c 	.word	0x2000000c
 8003bec:	20000b34 	.word	0x20000b34

08003bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	@ (8003c04 <HAL_GetTick+0x14>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000b34 	.word	0x20000b34

08003c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c10:	f7ff ffee 	bl	8003bf0 <HAL_GetTick>
 8003c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d005      	beq.n	8003c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c22:	4b0a      	ldr	r3, [pc, #40]	@ (8003c4c <HAL_Delay+0x44>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c2e:	bf00      	nop
 8003c30:	f7ff ffde 	bl	8003bf0 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d8f7      	bhi.n	8003c30 <HAL_Delay+0x28>
  {
  }
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	2000000c 	.word	0x2000000c

08003c50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e033      	b.n	8003cce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fe ffc6 	bl	8002c00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d118      	bne.n	8003cc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c96:	f023 0302 	bic.w	r3, r3, #2
 8003c9a:	f043 0202 	orr.w	r2, r3, #2
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fae8 	bl	8004278 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	f023 0303 	bic.w	r3, r3, #3
 8003cb6:	f043 0201 	orr.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cbe:	e001      	b.n	8003cc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_ADC_Start+0x1a>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e0b2      	b.n	8003e58 <HAL_ADC_Start+0x180>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d018      	beq.n	8003d3a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0201 	orr.w	r2, r2, #1
 8003d16:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d18:	4b52      	ldr	r3, [pc, #328]	@ (8003e64 <HAL_ADC_Start+0x18c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a52      	ldr	r2, [pc, #328]	@ (8003e68 <HAL_ADC_Start+0x190>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	0c9a      	lsrs	r2, r3, #18
 8003d24:	4613      	mov	r3, r2
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	4413      	add	r3, r2
 8003d2a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003d2c:	e002      	b.n	8003d34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f9      	bne.n	8003d2e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d17a      	bne.n	8003e3e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003d50:	f023 0301 	bic.w	r3, r3, #1
 8003d54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003d72:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d86:	d106      	bne.n	8003d96 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8c:	f023 0206 	bic.w	r2, r3, #6
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	645a      	str	r2, [r3, #68]	@ 0x44
 8003d94:	e002      	b.n	8003d9c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003da4:	4b31      	ldr	r3, [pc, #196]	@ (8003e6c <HAL_ADC_Start+0x194>)
 8003da6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003db0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d12a      	bne.n	8003e14 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2b      	ldr	r2, [pc, #172]	@ (8003e70 <HAL_ADC_Start+0x198>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d015      	beq.n	8003df4 <HAL_ADC_Start+0x11c>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a29      	ldr	r2, [pc, #164]	@ (8003e74 <HAL_ADC_Start+0x19c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d105      	bne.n	8003dde <HAL_ADC_Start+0x106>
 8003dd2:	4b26      	ldr	r3, [pc, #152]	@ (8003e6c <HAL_ADC_Start+0x194>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a25      	ldr	r2, [pc, #148]	@ (8003e78 <HAL_ADC_Start+0x1a0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d136      	bne.n	8003e56 <HAL_ADC_Start+0x17e>
 8003de8:	4b20      	ldr	r3, [pc, #128]	@ (8003e6c <HAL_ADC_Start+0x194>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d130      	bne.n	8003e56 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d129      	bne.n	8003e56 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e10:	609a      	str	r2, [r3, #8]
 8003e12:	e020      	b.n	8003e56 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a15      	ldr	r2, [pc, #84]	@ (8003e70 <HAL_ADC_Start+0x198>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d11b      	bne.n	8003e56 <HAL_ADC_Start+0x17e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d114      	bne.n	8003e56 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	e00b      	b.n	8003e56 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	f043 0210 	orr.w	r2, r3, #16
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	f043 0201 	orr.w	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	20000004 	.word	0x20000004
 8003e68:	431bde83 	.word	0x431bde83
 8003e6c:	40012300 	.word	0x40012300
 8003e70:	40012000 	.word	0x40012000
 8003e74:	40012100 	.word	0x40012100
 8003e78:	40012200 	.word	0x40012200

08003e7c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_ADC_Stop+0x16>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e021      	b.n	8003ed6 <HAL_ADC_Stop+0x5a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0201 	bic.w	r2, r2, #1
 8003ea8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d109      	bne.n	8003ecc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	f043 0201 	orr.w	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003efe:	d113      	bne.n	8003f28 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f0e:	d10b      	bne.n	8003f28 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f14:	f043 0220 	orr.w	r2, r3, #32
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e063      	b.n	8003ff0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f28:	f7ff fe62 	bl	8003bf0 <HAL_GetTick>
 8003f2c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f2e:	e021      	b.n	8003f74 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f36:	d01d      	beq.n	8003f74 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d007      	beq.n	8003f4e <HAL_ADC_PollForConversion+0x6c>
 8003f3e:	f7ff fe57 	bl	8003bf0 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d212      	bcs.n	8003f74 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d00b      	beq.n	8003f74 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f60:	f043 0204 	orr.w	r2, r3, #4
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e03d      	b.n	8003ff0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d1d6      	bne.n	8003f30 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f06f 0212 	mvn.w	r2, #18
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d123      	bne.n	8003fee <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d11f      	bne.n	8003fee <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d006      	beq.n	8003fca <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d111      	bne.n	8003fee <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d105      	bne.n	8003fee <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	f043 0201 	orr.w	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
	...

08004014 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_ADC_ConfigChannel+0x1c>
 800402c:	2302      	movs	r3, #2
 800402e:	e113      	b.n	8004258 <HAL_ADC_ConfigChannel+0x244>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b09      	cmp	r3, #9
 800403e:	d925      	bls.n	800408c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68d9      	ldr	r1, [r3, #12]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	b29b      	uxth	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	4613      	mov	r3, r2
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	4413      	add	r3, r2
 8004054:	3b1e      	subs	r3, #30
 8004056:	2207      	movs	r2, #7
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43da      	mvns	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	400a      	ands	r2, r1
 8004064:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68d9      	ldr	r1, [r3, #12]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	4618      	mov	r0, r3
 8004078:	4603      	mov	r3, r0
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4403      	add	r3, r0
 800407e:	3b1e      	subs	r3, #30
 8004080:	409a      	lsls	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	60da      	str	r2, [r3, #12]
 800408a:	e022      	b.n	80040d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6919      	ldr	r1, [r3, #16]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	b29b      	uxth	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	4613      	mov	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4413      	add	r3, r2
 80040a0:	2207      	movs	r2, #7
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43da      	mvns	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	400a      	ands	r2, r1
 80040ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6919      	ldr	r1, [r3, #16]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	4618      	mov	r0, r3
 80040c2:	4603      	mov	r3, r0
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4403      	add	r3, r0
 80040c8:	409a      	lsls	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b06      	cmp	r3, #6
 80040d8:	d824      	bhi.n	8004124 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	3b05      	subs	r3, #5
 80040ec:	221f      	movs	r2, #31
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43da      	mvns	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	400a      	ands	r2, r1
 80040fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	b29b      	uxth	r3, r3
 8004108:	4618      	mov	r0, r3
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	3b05      	subs	r3, #5
 8004116:	fa00 f203 	lsl.w	r2, r0, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	635a      	str	r2, [r3, #52]	@ 0x34
 8004122:	e04c      	b.n	80041be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b0c      	cmp	r3, #12
 800412a:	d824      	bhi.n	8004176 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	3b23      	subs	r3, #35	@ 0x23
 800413e:	221f      	movs	r2, #31
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43da      	mvns	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	400a      	ands	r2, r1
 800414c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	b29b      	uxth	r3, r3
 800415a:	4618      	mov	r0, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	3b23      	subs	r3, #35	@ 0x23
 8004168:	fa00 f203 	lsl.w	r2, r0, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	631a      	str	r2, [r3, #48]	@ 0x30
 8004174:	e023      	b.n	80041be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	3b41      	subs	r3, #65	@ 0x41
 8004188:	221f      	movs	r2, #31
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43da      	mvns	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	400a      	ands	r2, r1
 8004196:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	4618      	mov	r0, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	3b41      	subs	r3, #65	@ 0x41
 80041b2:	fa00 f203 	lsl.w	r2, r0, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041be:	4b29      	ldr	r3, [pc, #164]	@ (8004264 <HAL_ADC_ConfigChannel+0x250>)
 80041c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a28      	ldr	r2, [pc, #160]	@ (8004268 <HAL_ADC_ConfigChannel+0x254>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d10f      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x1d8>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2b12      	cmp	r3, #18
 80041d2:	d10b      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004268 <HAL_ADC_ConfigChannel+0x254>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d12b      	bne.n	800424e <HAL_ADC_ConfigChannel+0x23a>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1c      	ldr	r2, [pc, #112]	@ (800426c <HAL_ADC_ConfigChannel+0x258>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <HAL_ADC_ConfigChannel+0x1f4>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b11      	cmp	r3, #17
 8004206:	d122      	bne.n	800424e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a11      	ldr	r2, [pc, #68]	@ (800426c <HAL_ADC_ConfigChannel+0x258>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d111      	bne.n	800424e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800422a:	4b11      	ldr	r3, [pc, #68]	@ (8004270 <HAL_ADC_ConfigChannel+0x25c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a11      	ldr	r2, [pc, #68]	@ (8004274 <HAL_ADC_ConfigChannel+0x260>)
 8004230:	fba2 2303 	umull	r2, r3, r2, r3
 8004234:	0c9a      	lsrs	r2, r3, #18
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004240:	e002      	b.n	8004248 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	3b01      	subs	r3, #1
 8004246:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f9      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	40012300 	.word	0x40012300
 8004268:	40012000 	.word	0x40012000
 800426c:	10000012 	.word	0x10000012
 8004270:	20000004 	.word	0x20000004
 8004274:	431bde83 	.word	0x431bde83

08004278 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004280:	4b79      	ldr	r3, [pc, #484]	@ (8004468 <ADC_Init+0x1f0>)
 8004282:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	431a      	orrs	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6859      	ldr	r1, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	021a      	lsls	r2, r3, #8
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80042d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6859      	ldr	r1, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6899      	ldr	r1, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430a:	4a58      	ldr	r2, [pc, #352]	@ (800446c <ADC_Init+0x1f4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d022      	beq.n	8004356 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800431e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6899      	ldr	r1, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004340:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6899      	ldr	r1, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	609a      	str	r2, [r3, #8]
 8004354:	e00f      	b.n	8004376 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004364:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004374:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0202 	bic.w	r2, r2, #2
 8004384:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6899      	ldr	r1, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	7e1b      	ldrb	r3, [r3, #24]
 8004390:	005a      	lsls	r2, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01b      	beq.n	80043dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043b2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80043c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6859      	ldr	r1, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ce:	3b01      	subs	r3, #1
 80043d0:	035a      	lsls	r2, r3, #13
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	e007      	b.n	80043ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043ea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80043fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	3b01      	subs	r3, #1
 8004408:	051a      	lsls	r2, r3, #20
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004420:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6899      	ldr	r1, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800442e:	025a      	lsls	r2, r3, #9
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004446:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6899      	ldr	r1, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	029a      	lsls	r2, r3, #10
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	609a      	str	r2, [r3, #8]
}
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	40012300 	.word	0x40012300
 800446c:	0f000001 	.word	0x0f000001

08004470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004480:	4b0c      	ldr	r3, [pc, #48]	@ (80044b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800448c:	4013      	ands	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004498:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800449c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044a2:	4a04      	ldr	r2, [pc, #16]	@ (80044b4 <__NVIC_SetPriorityGrouping+0x44>)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	60d3      	str	r3, [r2, #12]
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	e000ed00 	.word	0xe000ed00

080044b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044bc:	4b04      	ldr	r3, [pc, #16]	@ (80044d0 <__NVIC_GetPriorityGrouping+0x18>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	0a1b      	lsrs	r3, r3, #8
 80044c2:	f003 0307 	and.w	r3, r3, #7
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000ed00 	.word	0xe000ed00

080044d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	db0b      	blt.n	80044fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	f003 021f 	and.w	r2, r3, #31
 80044ec:	4907      	ldr	r1, [pc, #28]	@ (800450c <__NVIC_EnableIRQ+0x38>)
 80044ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	2001      	movs	r0, #1
 80044f6:	fa00 f202 	lsl.w	r2, r0, r2
 80044fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	e000e100 	.word	0xe000e100

08004510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	6039      	str	r1, [r7, #0]
 800451a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800451c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004520:	2b00      	cmp	r3, #0
 8004522:	db0a      	blt.n	800453a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	490c      	ldr	r1, [pc, #48]	@ (800455c <__NVIC_SetPriority+0x4c>)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	0112      	lsls	r2, r2, #4
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	440b      	add	r3, r1
 8004534:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004538:	e00a      	b.n	8004550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	b2da      	uxtb	r2, r3
 800453e:	4908      	ldr	r1, [pc, #32]	@ (8004560 <__NVIC_SetPriority+0x50>)
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	3b04      	subs	r3, #4
 8004548:	0112      	lsls	r2, r2, #4
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	440b      	add	r3, r1
 800454e:	761a      	strb	r2, [r3, #24]
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	e000e100 	.word	0xe000e100
 8004560:	e000ed00 	.word	0xe000ed00

08004564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004564:	b480      	push	{r7}
 8004566:	b089      	sub	sp, #36	@ 0x24
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f1c3 0307 	rsb	r3, r3, #7
 800457e:	2b04      	cmp	r3, #4
 8004580:	bf28      	it	cs
 8004582:	2304      	movcs	r3, #4
 8004584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	3304      	adds	r3, #4
 800458a:	2b06      	cmp	r3, #6
 800458c:	d902      	bls.n	8004594 <NVIC_EncodePriority+0x30>
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	3b03      	subs	r3, #3
 8004592:	e000      	b.n	8004596 <NVIC_EncodePriority+0x32>
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004598:	f04f 32ff 	mov.w	r2, #4294967295
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43da      	mvns	r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	401a      	ands	r2, r3
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045ac:	f04f 31ff 	mov.w	r1, #4294967295
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	fa01 f303 	lsl.w	r3, r1, r3
 80045b6:	43d9      	mvns	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045bc:	4313      	orrs	r3, r2
         );
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3724      	adds	r7, #36	@ 0x24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
	...

080045cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045dc:	d301      	bcc.n	80045e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045de:	2301      	movs	r3, #1
 80045e0:	e00f      	b.n	8004602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045e2:	4a0a      	ldr	r2, [pc, #40]	@ (800460c <SysTick_Config+0x40>)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ea:	210f      	movs	r1, #15
 80045ec:	f04f 30ff 	mov.w	r0, #4294967295
 80045f0:	f7ff ff8e 	bl	8004510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045f4:	4b05      	ldr	r3, [pc, #20]	@ (800460c <SysTick_Config+0x40>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045fa:	4b04      	ldr	r3, [pc, #16]	@ (800460c <SysTick_Config+0x40>)
 80045fc:	2207      	movs	r2, #7
 80045fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	e000e010 	.word	0xe000e010

08004610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f7ff ff29 	bl	8004470 <__NVIC_SetPriorityGrouping>
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	4603      	mov	r3, r0
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
 8004632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004638:	f7ff ff3e 	bl	80044b8 <__NVIC_GetPriorityGrouping>
 800463c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	6978      	ldr	r0, [r7, #20]
 8004644:	f7ff ff8e 	bl	8004564 <NVIC_EncodePriority>
 8004648:	4602      	mov	r2, r0
 800464a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800464e:	4611      	mov	r1, r2
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff ff5d 	bl	8004510 <__NVIC_SetPriority>
}
 8004656:	bf00      	nop
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	4603      	mov	r3, r0
 8004666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff ff31 	bl	80044d4 <__NVIC_EnableIRQ>
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f7ff ffa2 	bl	80045cc <SysTick_Config>
 8004688:	4603      	mov	r3, r0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046a0:	f7ff faa6 	bl	8003bf0 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e099      	b.n	80047e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0201 	bic.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046d0:	e00f      	b.n	80046f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046d2:	f7ff fa8d 	bl	8003bf0 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b05      	cmp	r3, #5
 80046de:	d908      	bls.n	80046f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2203      	movs	r2, #3
 80046ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e078      	b.n	80047e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e8      	bne.n	80046d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4b38      	ldr	r3, [pc, #224]	@ (80047ec <HAL_DMA_Init+0x158>)
 800470c:	4013      	ands	r3, r2
 800470e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800471e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800472a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004736:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	2b04      	cmp	r3, #4
 800474a:	d107      	bne.n	800475c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004754:	4313      	orrs	r3, r2
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4313      	orrs	r3, r2
 800475a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f023 0307 	bic.w	r3, r3, #7
 8004772:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004782:	2b04      	cmp	r3, #4
 8004784:	d117      	bne.n	80047b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00e      	beq.n	80047b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fa7b 	bl	8004c94 <DMA_CheckFifoParam>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2240      	movs	r2, #64	@ 0x40
 80047a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80047b2:	2301      	movs	r3, #1
 80047b4:	e016      	b.n	80047e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fa32 	bl	8004c28 <DMA_CalcBaseAndBitshift>
 80047c4:	4603      	mov	r3, r0
 80047c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047cc:	223f      	movs	r2, #63	@ 0x3f
 80047ce:	409a      	lsls	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	f010803f 	.word	0xf010803f

080047f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047fe:	f7ff f9f7 	bl	8003bf0 <HAL_GetTick>
 8004802:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d008      	beq.n	8004822 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2280      	movs	r2, #128	@ 0x80
 8004814:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e052      	b.n	80048c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0216 	bic.w	r2, r2, #22
 8004830:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004840:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d103      	bne.n	8004852 <HAL_DMA_Abort+0x62>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0208 	bic.w	r2, r2, #8
 8004860:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0201 	bic.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004872:	e013      	b.n	800489c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004874:	f7ff f9bc 	bl	8003bf0 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b05      	cmp	r3, #5
 8004880:	d90c      	bls.n	800489c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2203      	movs	r2, #3
 800488c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e015      	b.n	80048c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e4      	bne.n	8004874 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ae:	223f      	movs	r2, #63	@ 0x3f
 80048b0:	409a      	lsls	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d004      	beq.n	80048ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2280      	movs	r2, #128	@ 0x80
 80048e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e00c      	b.n	8004908 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2205      	movs	r2, #5
 80048f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0201 	bic.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004920:	4b8e      	ldr	r3, [pc, #568]	@ (8004b5c <HAL_DMA_IRQHandler+0x248>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a8e      	ldr	r2, [pc, #568]	@ (8004b60 <HAL_DMA_IRQHandler+0x24c>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	0a9b      	lsrs	r3, r3, #10
 800492c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004932:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800493e:	2208      	movs	r2, #8
 8004940:	409a      	lsls	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4013      	ands	r3, r2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d01a      	beq.n	8004980 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d013      	beq.n	8004980 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0204 	bic.w	r2, r2, #4
 8004966:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800496c:	2208      	movs	r2, #8
 800496e:	409a      	lsls	r2, r3
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004978:	f043 0201 	orr.w	r2, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004984:	2201      	movs	r2, #1
 8004986:	409a      	lsls	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4013      	ands	r3, r2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d012      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a2:	2201      	movs	r2, #1
 80049a4:	409a      	lsls	r2, r3
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ae:	f043 0202 	orr.w	r2, r3, #2
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ba:	2204      	movs	r2, #4
 80049bc:	409a      	lsls	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4013      	ands	r3, r2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d012      	beq.n	80049ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00b      	beq.n	80049ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d8:	2204      	movs	r2, #4
 80049da:	409a      	lsls	r2, r3
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e4:	f043 0204 	orr.w	r2, r3, #4
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f0:	2210      	movs	r2, #16
 80049f2:	409a      	lsls	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d043      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d03c      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a0e:	2210      	movs	r2, #16
 8004a10:	409a      	lsls	r2, r3
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d018      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d108      	bne.n	8004a44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d024      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	4798      	blx	r3
 8004a42:	e01f      	b.n	8004a84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01b      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	4798      	blx	r3
 8004a54:	e016      	b.n	8004a84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d107      	bne.n	8004a74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0208 	bic.w	r2, r2, #8
 8004a72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a88:	2220      	movs	r2, #32
 8004a8a:	409a      	lsls	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 808f 	beq.w	8004bb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 8087 	beq.w	8004bb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aaa:	2220      	movs	r2, #32
 8004aac:	409a      	lsls	r2, r3
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b05      	cmp	r3, #5
 8004abc:	d136      	bne.n	8004b2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0216 	bic.w	r2, r2, #22
 8004acc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695a      	ldr	r2, [r3, #20]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004adc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d103      	bne.n	8004aee <HAL_DMA_IRQHandler+0x1da>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d007      	beq.n	8004afe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0208 	bic.w	r2, r2, #8
 8004afc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b02:	223f      	movs	r2, #63	@ 0x3f
 8004b04:	409a      	lsls	r2, r3
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d07e      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	4798      	blx	r3
        }
        return;
 8004b2a:	e079      	b.n	8004c20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d01d      	beq.n	8004b76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10d      	bne.n	8004b64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d031      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
 8004b58:	e02c      	b.n	8004bb4 <HAL_DMA_IRQHandler+0x2a0>
 8004b5a:	bf00      	nop
 8004b5c:	20000004 	.word	0x20000004
 8004b60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d023      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	4798      	blx	r3
 8004b74:	e01e      	b.n	8004bb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10f      	bne.n	8004ba4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0210 	bic.w	r2, r2, #16
 8004b92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d032      	beq.n	8004c22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d022      	beq.n	8004c0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2205      	movs	r2, #5
 8004bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0201 	bic.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	3301      	adds	r3, #1
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d307      	bcc.n	8004bfc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f2      	bne.n	8004be0 <HAL_DMA_IRQHandler+0x2cc>
 8004bfa:	e000      	b.n	8004bfe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004bfc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	4798      	blx	r3
 8004c1e:	e000      	b.n	8004c22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c20:	bf00      	nop
    }
  }
}
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	3b10      	subs	r3, #16
 8004c38:	4a14      	ldr	r2, [pc, #80]	@ (8004c8c <DMA_CalcBaseAndBitshift+0x64>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	091b      	lsrs	r3, r3, #4
 8004c40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c42:	4a13      	ldr	r2, [pc, #76]	@ (8004c90 <DMA_CalcBaseAndBitshift+0x68>)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d909      	bls.n	8004c6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004c5e:	f023 0303 	bic.w	r3, r3, #3
 8004c62:	1d1a      	adds	r2, r3, #4
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c68:	e007      	b.n	8004c7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	aaaaaaab 	.word	0xaaaaaaab
 8004c90:	0800b18c 	.word	0x0800b18c

08004c94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d11f      	bne.n	8004cee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d856      	bhi.n	8004d62 <DMA_CheckFifoParam+0xce>
 8004cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cbc <DMA_CheckFifoParam+0x28>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004ccd 	.word	0x08004ccd
 8004cc0:	08004cdf 	.word	0x08004cdf
 8004cc4:	08004ccd 	.word	0x08004ccd
 8004cc8:	08004d63 	.word	0x08004d63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d046      	beq.n	8004d66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cdc:	e043      	b.n	8004d66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ce6:	d140      	bne.n	8004d6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cec:	e03d      	b.n	8004d6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf6:	d121      	bne.n	8004d3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d837      	bhi.n	8004d6e <DMA_CheckFifoParam+0xda>
 8004cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8004d04 <DMA_CheckFifoParam+0x70>)
 8004d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d04:	08004d15 	.word	0x08004d15
 8004d08:	08004d1b 	.word	0x08004d1b
 8004d0c:	08004d15 	.word	0x08004d15
 8004d10:	08004d2d 	.word	0x08004d2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
      break;
 8004d18:	e030      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d025      	beq.n	8004d72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d2a:	e022      	b.n	8004d72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d34:	d11f      	bne.n	8004d76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d3a:	e01c      	b.n	8004d76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d903      	bls.n	8004d4a <DMA_CheckFifoParam+0xb6>
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d003      	beq.n	8004d50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d48:	e018      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d4e:	e015      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00e      	beq.n	8004d7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d60:	e00b      	b.n	8004d7a <DMA_CheckFifoParam+0xe6>
      break;
 8004d62:	bf00      	nop
 8004d64:	e00a      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
      break;
 8004d66:	bf00      	nop
 8004d68:	e008      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
      break;
 8004d6a:	bf00      	nop
 8004d6c:	e006      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
      break;
 8004d6e:	bf00      	nop
 8004d70:	e004      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
      break;
 8004d72:	bf00      	nop
 8004d74:	e002      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
      break;   
 8004d76:	bf00      	nop
 8004d78:	e000      	b.n	8004d7c <DMA_CheckFifoParam+0xe8>
      break;
 8004d7a:	bf00      	nop
    }
  } 
  
  return status; 
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop

08004d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b089      	sub	sp, #36	@ 0x24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	e165      	b.n	8005074 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004da8:	2201      	movs	r2, #1
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4013      	ands	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	f040 8154 	bne.w	800506e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d005      	beq.n	8004dde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d130      	bne.n	8004e40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	2203      	movs	r2, #3
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43db      	mvns	r3, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4013      	ands	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e14:	2201      	movs	r2, #1
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	091b      	lsrs	r3, r3, #4
 8004e2a:	f003 0201 	and.w	r2, r3, #1
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 0303 	and.w	r3, r3, #3
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d017      	beq.n	8004e7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	2203      	movs	r2, #3
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d123      	bne.n	8004ed0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	08da      	lsrs	r2, r3, #3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3208      	adds	r2, #8
 8004e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	220f      	movs	r2, #15
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	08da      	lsrs	r2, r3, #3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3208      	adds	r2, #8
 8004eca:	69b9      	ldr	r1, [r7, #24]
 8004ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	2203      	movs	r2, #3
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f003 0203 	and.w	r2, r3, #3
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80ae 	beq.w	800506e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	4b5d      	ldr	r3, [pc, #372]	@ (800508c <HAL_GPIO_Init+0x300>)
 8004f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1a:	4a5c      	ldr	r2, [pc, #368]	@ (800508c <HAL_GPIO_Init+0x300>)
 8004f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f22:	4b5a      	ldr	r3, [pc, #360]	@ (800508c <HAL_GPIO_Init+0x300>)
 8004f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f2e:	4a58      	ldr	r2, [pc, #352]	@ (8005090 <HAL_GPIO_Init+0x304>)
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	089b      	lsrs	r3, r3, #2
 8004f34:	3302      	adds	r3, #2
 8004f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	220f      	movs	r2, #15
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a4f      	ldr	r2, [pc, #316]	@ (8005094 <HAL_GPIO_Init+0x308>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d025      	beq.n	8004fa6 <HAL_GPIO_Init+0x21a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a4e      	ldr	r2, [pc, #312]	@ (8005098 <HAL_GPIO_Init+0x30c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01f      	beq.n	8004fa2 <HAL_GPIO_Init+0x216>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a4d      	ldr	r2, [pc, #308]	@ (800509c <HAL_GPIO_Init+0x310>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d019      	beq.n	8004f9e <HAL_GPIO_Init+0x212>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a4c      	ldr	r2, [pc, #304]	@ (80050a0 <HAL_GPIO_Init+0x314>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d013      	beq.n	8004f9a <HAL_GPIO_Init+0x20e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a4b      	ldr	r2, [pc, #300]	@ (80050a4 <HAL_GPIO_Init+0x318>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00d      	beq.n	8004f96 <HAL_GPIO_Init+0x20a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a4a      	ldr	r2, [pc, #296]	@ (80050a8 <HAL_GPIO_Init+0x31c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d007      	beq.n	8004f92 <HAL_GPIO_Init+0x206>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a49      	ldr	r2, [pc, #292]	@ (80050ac <HAL_GPIO_Init+0x320>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d101      	bne.n	8004f8e <HAL_GPIO_Init+0x202>
 8004f8a:	2306      	movs	r3, #6
 8004f8c:	e00c      	b.n	8004fa8 <HAL_GPIO_Init+0x21c>
 8004f8e:	2307      	movs	r3, #7
 8004f90:	e00a      	b.n	8004fa8 <HAL_GPIO_Init+0x21c>
 8004f92:	2305      	movs	r3, #5
 8004f94:	e008      	b.n	8004fa8 <HAL_GPIO_Init+0x21c>
 8004f96:	2304      	movs	r3, #4
 8004f98:	e006      	b.n	8004fa8 <HAL_GPIO_Init+0x21c>
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e004      	b.n	8004fa8 <HAL_GPIO_Init+0x21c>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e002      	b.n	8004fa8 <HAL_GPIO_Init+0x21c>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e000      	b.n	8004fa8 <HAL_GPIO_Init+0x21c>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	f002 0203 	and.w	r2, r2, #3
 8004fae:	0092      	lsls	r2, r2, #2
 8004fb0:	4093      	lsls	r3, r2
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fb8:	4935      	ldr	r1, [pc, #212]	@ (8005090 <HAL_GPIO_Init+0x304>)
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	089b      	lsrs	r3, r3, #2
 8004fbe:	3302      	adds	r3, #2
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fc6:	4b3a      	ldr	r3, [pc, #232]	@ (80050b0 <HAL_GPIO_Init+0x324>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fea:	4a31      	ldr	r2, [pc, #196]	@ (80050b0 <HAL_GPIO_Init+0x324>)
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ff0:	4b2f      	ldr	r3, [pc, #188]	@ (80050b0 <HAL_GPIO_Init+0x324>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005014:	4a26      	ldr	r2, [pc, #152]	@ (80050b0 <HAL_GPIO_Init+0x324>)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800501a:	4b25      	ldr	r3, [pc, #148]	@ (80050b0 <HAL_GPIO_Init+0x324>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800503e:	4a1c      	ldr	r2, [pc, #112]	@ (80050b0 <HAL_GPIO_Init+0x324>)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005044:	4b1a      	ldr	r3, [pc, #104]	@ (80050b0 <HAL_GPIO_Init+0x324>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005068:	4a11      	ldr	r2, [pc, #68]	@ (80050b0 <HAL_GPIO_Init+0x324>)
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	3301      	adds	r3, #1
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	2b0f      	cmp	r3, #15
 8005078:	f67f ae96 	bls.w	8004da8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	3724      	adds	r7, #36	@ 0x24
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800
 8005090:	40013800 	.word	0x40013800
 8005094:	40020000 	.word	0x40020000
 8005098:	40020400 	.word	0x40020400
 800509c:	40020800 	.word	0x40020800
 80050a0:	40020c00 	.word	0x40020c00
 80050a4:	40021000 	.word	0x40021000
 80050a8:	40021400 	.word	0x40021400
 80050ac:	40021800 	.word	0x40021800
 80050b0:	40013c00 	.word	0x40013c00

080050b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	807b      	strh	r3, [r7, #2]
 80050c0:	4613      	mov	r3, r2
 80050c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050c4:	787b      	ldrb	r3, [r7, #1]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050ca:	887a      	ldrh	r2, [r7, #2]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050d0:	e003      	b.n	80050da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050d2:	887b      	ldrh	r3, [r7, #2]
 80050d4:	041a      	lsls	r2, r3, #16
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	619a      	str	r2, [r3, #24]
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050f2:	4b08      	ldr	r3, [pc, #32]	@ (8005114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050f4:	695a      	ldr	r2, [r3, #20]
 80050f6:	88fb      	ldrh	r3, [r7, #6]
 80050f8:	4013      	ands	r3, r2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d006      	beq.n	800510c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050fe:	4a05      	ldr	r2, [pc, #20]	@ (8005114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005104:	88fb      	ldrh	r3, [r7, #6]
 8005106:	4618      	mov	r0, r3
 8005108:	f7fc f814 	bl	8001134 <HAL_GPIO_EXTI_Callback>
  }
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	40013c00 	.word	0x40013c00

08005118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e12b      	b.n	8005382 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fd fda2 	bl	8002c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2224      	movs	r2, #36	@ 0x24
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0201 	bic.w	r2, r2, #1
 800515a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800516a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800517a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800517c:	f000 feda 	bl	8005f34 <HAL_RCC_GetPCLK1Freq>
 8005180:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	4a81      	ldr	r2, [pc, #516]	@ (800538c <HAL_I2C_Init+0x274>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d807      	bhi.n	800519c <HAL_I2C_Init+0x84>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a80      	ldr	r2, [pc, #512]	@ (8005390 <HAL_I2C_Init+0x278>)
 8005190:	4293      	cmp	r3, r2
 8005192:	bf94      	ite	ls
 8005194:	2301      	movls	r3, #1
 8005196:	2300      	movhi	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	e006      	b.n	80051aa <HAL_I2C_Init+0x92>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4a7d      	ldr	r2, [pc, #500]	@ (8005394 <HAL_I2C_Init+0x27c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	bf94      	ite	ls
 80051a4:	2301      	movls	r3, #1
 80051a6:	2300      	movhi	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e0e7      	b.n	8005382 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4a78      	ldr	r2, [pc, #480]	@ (8005398 <HAL_I2C_Init+0x280>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	0c9b      	lsrs	r3, r3, #18
 80051bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4a6a      	ldr	r2, [pc, #424]	@ (800538c <HAL_I2C_Init+0x274>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d802      	bhi.n	80051ec <HAL_I2C_Init+0xd4>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	3301      	adds	r3, #1
 80051ea:	e009      	b.n	8005200 <HAL_I2C_Init+0xe8>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	4a69      	ldr	r2, [pc, #420]	@ (800539c <HAL_I2C_Init+0x284>)
 80051f8:	fba2 2303 	umull	r2, r3, r2, r3
 80051fc:	099b      	lsrs	r3, r3, #6
 80051fe:	3301      	adds	r3, #1
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	430b      	orrs	r3, r1
 8005206:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005212:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	495c      	ldr	r1, [pc, #368]	@ (800538c <HAL_I2C_Init+0x274>)
 800521c:	428b      	cmp	r3, r1
 800521e:	d819      	bhi.n	8005254 <HAL_I2C_Init+0x13c>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	1e59      	subs	r1, r3, #1
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	fbb1 f3f3 	udiv	r3, r1, r3
 800522e:	1c59      	adds	r1, r3, #1
 8005230:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005234:	400b      	ands	r3, r1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <HAL_I2C_Init+0x138>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	1e59      	subs	r1, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	fbb1 f3f3 	udiv	r3, r1, r3
 8005248:	3301      	adds	r3, #1
 800524a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800524e:	e051      	b.n	80052f4 <HAL_I2C_Init+0x1dc>
 8005250:	2304      	movs	r3, #4
 8005252:	e04f      	b.n	80052f4 <HAL_I2C_Init+0x1dc>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d111      	bne.n	8005280 <HAL_I2C_Init+0x168>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	1e58      	subs	r0, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6859      	ldr	r1, [r3, #4]
 8005264:	460b      	mov	r3, r1
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	440b      	add	r3, r1
 800526a:	fbb0 f3f3 	udiv	r3, r0, r3
 800526e:	3301      	adds	r3, #1
 8005270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005274:	2b00      	cmp	r3, #0
 8005276:	bf0c      	ite	eq
 8005278:	2301      	moveq	r3, #1
 800527a:	2300      	movne	r3, #0
 800527c:	b2db      	uxtb	r3, r3
 800527e:	e012      	b.n	80052a6 <HAL_I2C_Init+0x18e>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	1e58      	subs	r0, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6859      	ldr	r1, [r3, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	440b      	add	r3, r1
 800528e:	0099      	lsls	r1, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	fbb0 f3f3 	udiv	r3, r0, r3
 8005296:	3301      	adds	r3, #1
 8005298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800529c:	2b00      	cmp	r3, #0
 800529e:	bf0c      	ite	eq
 80052a0:	2301      	moveq	r3, #1
 80052a2:	2300      	movne	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_I2C_Init+0x196>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e022      	b.n	80052f4 <HAL_I2C_Init+0x1dc>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10e      	bne.n	80052d4 <HAL_I2C_Init+0x1bc>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	1e58      	subs	r0, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6859      	ldr	r1, [r3, #4]
 80052be:	460b      	mov	r3, r1
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	440b      	add	r3, r1
 80052c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80052c8:	3301      	adds	r3, #1
 80052ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052d2:	e00f      	b.n	80052f4 <HAL_I2C_Init+0x1dc>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	1e58      	subs	r0, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6859      	ldr	r1, [r3, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	0099      	lsls	r1, r3, #2
 80052e4:	440b      	add	r3, r1
 80052e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ea:	3301      	adds	r3, #1
 80052ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	6809      	ldr	r1, [r1, #0]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69da      	ldr	r2, [r3, #28]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005322:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6911      	ldr	r1, [r2, #16]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	68d2      	ldr	r2, [r2, #12]
 800532e:	4311      	orrs	r1, r2
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6812      	ldr	r2, [r2, #0]
 8005334:	430b      	orrs	r3, r1
 8005336:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	000186a0 	.word	0x000186a0
 8005390:	001e847f 	.word	0x001e847f
 8005394:	003d08ff 	.word	0x003d08ff
 8005398:	431bde83 	.word	0x431bde83
 800539c:	10624dd3 	.word	0x10624dd3

080053a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af02      	add	r7, sp, #8
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	607a      	str	r2, [r7, #4]
 80053aa:	461a      	mov	r2, r3
 80053ac:	460b      	mov	r3, r1
 80053ae:	817b      	strh	r3, [r7, #10]
 80053b0:	4613      	mov	r3, r2
 80053b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053b4:	f7fe fc1c 	bl	8003bf0 <HAL_GetTick>
 80053b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	f040 80e0 	bne.w	8005588 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	2319      	movs	r3, #25
 80053ce:	2201      	movs	r2, #1
 80053d0:	4970      	ldr	r1, [pc, #448]	@ (8005594 <HAL_I2C_Master_Transmit+0x1f4>)
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 fa92 	bl	80058fc <I2C_WaitOnFlagUntilTimeout>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80053de:	2302      	movs	r3, #2
 80053e0:	e0d3      	b.n	800558a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_I2C_Master_Transmit+0x50>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e0cc      	b.n	800558a <HAL_I2C_Master_Transmit+0x1ea>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b01      	cmp	r3, #1
 8005404:	d007      	beq.n	8005416 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0201 	orr.w	r2, r2, #1
 8005414:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005424:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2221      	movs	r2, #33	@ 0x21
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2210      	movs	r2, #16
 8005432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	893a      	ldrh	r2, [r7, #8]
 8005446:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4a50      	ldr	r2, [pc, #320]	@ (8005598 <HAL_I2C_Master_Transmit+0x1f8>)
 8005456:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005458:	8979      	ldrh	r1, [r7, #10]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	6a3a      	ldr	r2, [r7, #32]
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f9ca 	bl	80057f8 <I2C_MasterRequestWrite>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e08d      	b.n	800558a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800546e:	2300      	movs	r3, #0
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005484:	e066      	b.n	8005554 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	6a39      	ldr	r1, [r7, #32]
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 fb50 	bl	8005b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00d      	beq.n	80054b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549a:	2b04      	cmp	r3, #4
 800549c:	d107      	bne.n	80054ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e06b      	b.n	800558a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b6:	781a      	ldrb	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d11b      	bne.n	8005528 <HAL_I2C_Master_Transmit+0x188>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d017      	beq.n	8005528 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fc:	781a      	ldrb	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	6a39      	ldr	r1, [r7, #32]
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 fb47 	bl	8005bc0 <I2C_WaitOnBTFFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00d      	beq.n	8005554 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553c:	2b04      	cmp	r3, #4
 800553e:	d107      	bne.n	8005550 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800554e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e01a      	b.n	800558a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005558:	2b00      	cmp	r3, #0
 800555a:	d194      	bne.n	8005486 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800556a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	e000      	b.n	800558a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005588:	2302      	movs	r3, #2
  }
}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	00100002 	.word	0x00100002
 8005598:	ffff0000 	.word	0xffff0000

0800559c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08a      	sub	sp, #40	@ 0x28
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	603b      	str	r3, [r7, #0]
 80055a8:	460b      	mov	r3, r1
 80055aa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80055ac:	f7fe fb20 	bl	8003bf0 <HAL_GetTick>
 80055b0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b20      	cmp	r3, #32
 80055c0:	f040 8111 	bne.w	80057e6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	2319      	movs	r3, #25
 80055ca:	2201      	movs	r2, #1
 80055cc:	4988      	ldr	r1, [pc, #544]	@ (80057f0 <HAL_I2C_IsDeviceReady+0x254>)
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f994 	bl	80058fc <I2C_WaitOnFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80055da:	2302      	movs	r3, #2
 80055dc:	e104      	b.n	80057e8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_I2C_IsDeviceReady+0x50>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e0fd      	b.n	80057e8 <HAL_I2C_IsDeviceReady+0x24c>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d007      	beq.n	8005612 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 0201 	orr.w	r2, r2, #1
 8005610:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005620:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2224      	movs	r2, #36	@ 0x24
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4a70      	ldr	r2, [pc, #448]	@ (80057f4 <HAL_I2C_IsDeviceReady+0x258>)
 8005634:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005644:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2200      	movs	r2, #0
 800564e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 f952 	bl	80058fc <I2C_WaitOnFlagUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00d      	beq.n	800567a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800566c:	d103      	bne.n	8005676 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005674:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e0b6      	b.n	80057e8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800567a:	897b      	ldrh	r3, [r7, #10]
 800567c:	b2db      	uxtb	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005688:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800568a:	f7fe fab1 	bl	8003bf0 <HAL_GetTick>
 800568e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b02      	cmp	r3, #2
 800569c:	bf0c      	ite	eq
 800569e:	2301      	moveq	r3, #1
 80056a0:	2300      	movne	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056b4:	bf0c      	ite	eq
 80056b6:	2301      	moveq	r3, #1
 80056b8:	2300      	movne	r3, #0
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80056be:	e025      	b.n	800570c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056c0:	f7fe fa96 	bl	8003bf0 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d302      	bcc.n	80056d6 <HAL_I2C_IsDeviceReady+0x13a>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d103      	bne.n	80056de <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	22a0      	movs	r2, #160	@ 0xa0
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	bf0c      	ite	eq
 80056ec:	2301      	moveq	r3, #1
 80056ee:	2300      	movne	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005702:	bf0c      	ite	eq
 8005704:	2301      	moveq	r3, #1
 8005706:	2300      	movne	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2ba0      	cmp	r3, #160	@ 0xa0
 8005716:	d005      	beq.n	8005724 <HAL_I2C_IsDeviceReady+0x188>
 8005718:	7dfb      	ldrb	r3, [r7, #23]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d102      	bne.n	8005724 <HAL_I2C_IsDeviceReady+0x188>
 800571e:	7dbb      	ldrb	r3, [r7, #22]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0cd      	beq.n	80056c0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b02      	cmp	r3, #2
 8005738:	d129      	bne.n	800578e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005748:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2319      	movs	r3, #25
 8005766:	2201      	movs	r2, #1
 8005768:	4921      	ldr	r1, [pc, #132]	@ (80057f0 <HAL_I2C_IsDeviceReady+0x254>)
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f8c6 	bl	80058fc <I2C_WaitOnFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e036      	b.n	80057e8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	e02c      	b.n	80057e8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800579c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057a6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	2319      	movs	r3, #25
 80057ae:	2201      	movs	r2, #1
 80057b0:	490f      	ldr	r1, [pc, #60]	@ (80057f0 <HAL_I2C_IsDeviceReady+0x254>)
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 f8a2 	bl	80058fc <I2C_WaitOnFlagUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e012      	b.n	80057e8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	3301      	adds	r3, #1
 80057c6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	f4ff af32 	bcc.w	8005636 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80057e6:	2302      	movs	r3, #2
  }
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	00100002 	.word	0x00100002
 80057f4:	ffff0000 	.word	0xffff0000

080057f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b088      	sub	sp, #32
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	607a      	str	r2, [r7, #4]
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	460b      	mov	r3, r1
 8005806:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b08      	cmp	r3, #8
 8005812:	d006      	beq.n	8005822 <I2C_MasterRequestWrite+0x2a>
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d003      	beq.n	8005822 <I2C_MasterRequestWrite+0x2a>
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005820:	d108      	bne.n	8005834 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	e00b      	b.n	800584c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005838:	2b12      	cmp	r3, #18
 800583a:	d107      	bne.n	800584c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800584a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f84f 	bl	80058fc <I2C_WaitOnFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00d      	beq.n	8005880 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005872:	d103      	bne.n	800587c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800587a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e035      	b.n	80058ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005888:	d108      	bne.n	800589c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800588a:	897b      	ldrh	r3, [r7, #10]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	461a      	mov	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005898:	611a      	str	r2, [r3, #16]
 800589a:	e01b      	b.n	80058d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800589c:	897b      	ldrh	r3, [r7, #10]
 800589e:	11db      	asrs	r3, r3, #7
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	f003 0306 	and.w	r3, r3, #6
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	f063 030f 	orn	r3, r3, #15
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	490e      	ldr	r1, [pc, #56]	@ (80058f4 <I2C_MasterRequestWrite+0xfc>)
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 f898 	bl	80059f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e010      	b.n	80058ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058ca:	897b      	ldrh	r3, [r7, #10]
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	4907      	ldr	r1, [pc, #28]	@ (80058f8 <I2C_MasterRequestWrite+0x100>)
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f888 	bl	80059f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	00010008 	.word	0x00010008
 80058f8:	00010002 	.word	0x00010002

080058fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	4613      	mov	r3, r2
 800590a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800590c:	e048      	b.n	80059a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005914:	d044      	beq.n	80059a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005916:	f7fe f96b 	bl	8003bf0 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d302      	bcc.n	800592c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d139      	bne.n	80059a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	0c1b      	lsrs	r3, r3, #16
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b01      	cmp	r3, #1
 8005934:	d10d      	bne.n	8005952 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	43da      	mvns	r2, r3
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	4013      	ands	r3, r2
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	bf0c      	ite	eq
 8005948:	2301      	moveq	r3, #1
 800594a:	2300      	movne	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	e00c      	b.n	800596c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	43da      	mvns	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	4013      	ands	r3, r2
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	bf0c      	ite	eq
 8005964:	2301      	moveq	r3, #1
 8005966:	2300      	movne	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	461a      	mov	r2, r3
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	429a      	cmp	r2, r3
 8005970:	d116      	bne.n	80059a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598c:	f043 0220 	orr.w	r2, r3, #32
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e023      	b.n	80059e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	0c1b      	lsrs	r3, r3, #16
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d10d      	bne.n	80059c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	43da      	mvns	r2, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	4013      	ands	r3, r2
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bf0c      	ite	eq
 80059bc:	2301      	moveq	r3, #1
 80059be:	2300      	movne	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	461a      	mov	r2, r3
 80059c4:	e00c      	b.n	80059e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	43da      	mvns	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	4013      	ands	r3, r2
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	bf0c      	ite	eq
 80059d8:	2301      	moveq	r3, #1
 80059da:	2300      	movne	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d093      	beq.n	800590e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059fe:	e071      	b.n	8005ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a0e:	d123      	bne.n	8005a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a44:	f043 0204 	orr.w	r2, r3, #4
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e067      	b.n	8005b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5e:	d041      	beq.n	8005ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a60:	f7fe f8c6 	bl	8003bf0 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d302      	bcc.n	8005a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d136      	bne.n	8005ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	0c1b      	lsrs	r3, r3, #16
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d10c      	bne.n	8005a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	43da      	mvns	r2, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	bf14      	ite	ne
 8005a92:	2301      	movne	r3, #1
 8005a94:	2300      	moveq	r3, #0
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	e00b      	b.n	8005ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	43da      	mvns	r2, r3
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bf14      	ite	ne
 8005aac:	2301      	movne	r3, #1
 8005aae:	2300      	moveq	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d016      	beq.n	8005ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad0:	f043 0220 	orr.w	r2, r3, #32
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e021      	b.n	8005b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	0c1b      	lsrs	r3, r3, #16
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d10c      	bne.n	8005b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	43da      	mvns	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	4013      	ands	r3, r2
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	bf14      	ite	ne
 8005b00:	2301      	movne	r3, #1
 8005b02:	2300      	moveq	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	e00b      	b.n	8005b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	43da      	mvns	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	4013      	ands	r3, r2
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bf14      	ite	ne
 8005b1a:	2301      	movne	r3, #1
 8005b1c:	2300      	moveq	r3, #0
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f47f af6d 	bne.w	8005a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b3c:	e034      	b.n	8005ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 f886 	bl	8005c50 <I2C_IsAcknowledgeFailed>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e034      	b.n	8005bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b54:	d028      	beq.n	8005ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b56:	f7fe f84b 	bl	8003bf0 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d302      	bcc.n	8005b6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d11d      	bne.n	8005ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b76:	2b80      	cmp	r3, #128	@ 0x80
 8005b78:	d016      	beq.n	8005ba8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b94:	f043 0220 	orr.w	r2, r3, #32
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e007      	b.n	8005bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb2:	2b80      	cmp	r3, #128	@ 0x80
 8005bb4:	d1c3      	bne.n	8005b3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bcc:	e034      	b.n	8005c38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 f83e 	bl	8005c50 <I2C_IsAcknowledgeFailed>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e034      	b.n	8005c48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be4:	d028      	beq.n	8005c38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be6:	f7fe f803 	bl	8003bf0 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d302      	bcc.n	8005bfc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d11d      	bne.n	8005c38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	f003 0304 	and.w	r3, r3, #4
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d016      	beq.n	8005c38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c24:	f043 0220 	orr.w	r2, r3, #32
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e007      	b.n	8005c48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d1c3      	bne.n	8005bce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c66:	d11b      	bne.n	8005ca0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8c:	f043 0204 	orr.w	r2, r3, #4
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e000      	b.n	8005ca2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005cba:	2300      	movs	r3, #0
 8005cbc:	603b      	str	r3, [r7, #0]
 8005cbe:	4b20      	ldr	r3, [pc, #128]	@ (8005d40 <HAL_PWREx_EnableOverDrive+0x90>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8005d40 <HAL_PWREx_EnableOverDrive+0x90>)
 8005cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cca:	4b1d      	ldr	r3, [pc, #116]	@ (8005d40 <HAL_PWREx_EnableOverDrive+0x90>)
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d44 <HAL_PWREx_EnableOverDrive+0x94>)
 8005cd8:	2201      	movs	r2, #1
 8005cda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cdc:	f7fd ff88 	bl	8003bf0 <HAL_GetTick>
 8005ce0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ce2:	e009      	b.n	8005cf8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ce4:	f7fd ff84 	bl	8003bf0 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cf2:	d901      	bls.n	8005cf8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e01f      	b.n	8005d38 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005cf8:	4b13      	ldr	r3, [pc, #76]	@ (8005d48 <HAL_PWREx_EnableOverDrive+0x98>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d04:	d1ee      	bne.n	8005ce4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d06:	4b11      	ldr	r3, [pc, #68]	@ (8005d4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d0c:	f7fd ff70 	bl	8003bf0 <HAL_GetTick>
 8005d10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d12:	e009      	b.n	8005d28 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d14:	f7fd ff6c 	bl	8003bf0 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d22:	d901      	bls.n	8005d28 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e007      	b.n	8005d38 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d28:	4b07      	ldr	r3, [pc, #28]	@ (8005d48 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d34:	d1ee      	bne.n	8005d14 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40023800 	.word	0x40023800
 8005d44:	420e0040 	.word	0x420e0040
 8005d48:	40007000 	.word	0x40007000
 8005d4c:	420e0044 	.word	0x420e0044

08005d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0cc      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d64:	4b68      	ldr	r3, [pc, #416]	@ (8005f08 <HAL_RCC_ClockConfig+0x1b8>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d90c      	bls.n	8005d8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d72:	4b65      	ldr	r3, [pc, #404]	@ (8005f08 <HAL_RCC_ClockConfig+0x1b8>)
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7a:	4b63      	ldr	r3, [pc, #396]	@ (8005f08 <HAL_RCC_ClockConfig+0x1b8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d001      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0b8      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0302 	and.w	r3, r3, #2
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d020      	beq.n	8005dda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d005      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005da4:	4b59      	ldr	r3, [pc, #356]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4a58      	ldr	r2, [pc, #352]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005daa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005dae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0308 	and.w	r3, r3, #8
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dbc:	4b53      	ldr	r3, [pc, #332]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	4a52      	ldr	r2, [pc, #328]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005dc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dc8:	4b50      	ldr	r3, [pc, #320]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	494d      	ldr	r1, [pc, #308]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d044      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d107      	bne.n	8005dfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dee:	4b47      	ldr	r3, [pc, #284]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d119      	bne.n	8005e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e07f      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d003      	beq.n	8005e0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d107      	bne.n	8005e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e06f      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e1e:	4b3b      	ldr	r3, [pc, #236]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e067      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e2e:	4b37      	ldr	r3, [pc, #220]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f023 0203 	bic.w	r2, r3, #3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	4934      	ldr	r1, [pc, #208]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e40:	f7fd fed6 	bl	8003bf0 <HAL_GetTick>
 8005e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e46:	e00a      	b.n	8005e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e48:	f7fd fed2 	bl	8003bf0 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e04f      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 020c 	and.w	r2, r3, #12
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d1eb      	bne.n	8005e48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e70:	4b25      	ldr	r3, [pc, #148]	@ (8005f08 <HAL_RCC_ClockConfig+0x1b8>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d20c      	bcs.n	8005e98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7e:	4b22      	ldr	r3, [pc, #136]	@ (8005f08 <HAL_RCC_ClockConfig+0x1b8>)
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e86:	4b20      	ldr	r3, [pc, #128]	@ (8005f08 <HAL_RCC_ClockConfig+0x1b8>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d001      	beq.n	8005e98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e032      	b.n	8005efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0304 	and.w	r3, r3, #4
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d008      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ea4:	4b19      	ldr	r3, [pc, #100]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	4916      	ldr	r1, [pc, #88]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d009      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ec2:	4b12      	ldr	r3, [pc, #72]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	490e      	ldr	r1, [pc, #56]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ed6:	f000 f855 	bl	8005f84 <HAL_RCC_GetSysClockFreq>
 8005eda:	4602      	mov	r2, r0
 8005edc:	4b0b      	ldr	r3, [pc, #44]	@ (8005f0c <HAL_RCC_ClockConfig+0x1bc>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	091b      	lsrs	r3, r3, #4
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	490a      	ldr	r1, [pc, #40]	@ (8005f10 <HAL_RCC_ClockConfig+0x1c0>)
 8005ee8:	5ccb      	ldrb	r3, [r1, r3]
 8005eea:	fa22 f303 	lsr.w	r3, r2, r3
 8005eee:	4a09      	ldr	r2, [pc, #36]	@ (8005f14 <HAL_RCC_ClockConfig+0x1c4>)
 8005ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005ef2:	4b09      	ldr	r3, [pc, #36]	@ (8005f18 <HAL_RCC_ClockConfig+0x1c8>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fd fe36 	bl	8003b68 <HAL_InitTick>

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	40023c00 	.word	0x40023c00
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	0800ad74 	.word	0x0800ad74
 8005f14:	20000004 	.word	0x20000004
 8005f18:	20000008 	.word	0x20000008

08005f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f20:	4b03      	ldr	r3, [pc, #12]	@ (8005f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f22:	681b      	ldr	r3, [r3, #0]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	20000004 	.word	0x20000004

08005f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f38:	f7ff fff0 	bl	8005f1c <HAL_RCC_GetHCLKFreq>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	4b05      	ldr	r3, [pc, #20]	@ (8005f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	0a9b      	lsrs	r3, r3, #10
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	4903      	ldr	r1, [pc, #12]	@ (8005f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f4a:	5ccb      	ldrb	r3, [r1, r3]
 8005f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40023800 	.word	0x40023800
 8005f58:	0800ad84 	.word	0x0800ad84

08005f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f60:	f7ff ffdc 	bl	8005f1c <HAL_RCC_GetHCLKFreq>
 8005f64:	4602      	mov	r2, r0
 8005f66:	4b05      	ldr	r3, [pc, #20]	@ (8005f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	0b5b      	lsrs	r3, r3, #13
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	4903      	ldr	r1, [pc, #12]	@ (8005f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f72:	5ccb      	ldrb	r3, [r1, r3]
 8005f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	0800ad84 	.word	0x0800ad84

08005f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f88:	b0ae      	sub	sp, #184	@ 0xb8
 8005f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005faa:	4bcb      	ldr	r3, [pc, #812]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	2b0c      	cmp	r3, #12
 8005fb4:	f200 8206 	bhi.w	80063c4 <HAL_RCC_GetSysClockFreq+0x440>
 8005fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbe:	bf00      	nop
 8005fc0:	08005ff5 	.word	0x08005ff5
 8005fc4:	080063c5 	.word	0x080063c5
 8005fc8:	080063c5 	.word	0x080063c5
 8005fcc:	080063c5 	.word	0x080063c5
 8005fd0:	08005ffd 	.word	0x08005ffd
 8005fd4:	080063c5 	.word	0x080063c5
 8005fd8:	080063c5 	.word	0x080063c5
 8005fdc:	080063c5 	.word	0x080063c5
 8005fe0:	08006005 	.word	0x08006005
 8005fe4:	080063c5 	.word	0x080063c5
 8005fe8:	080063c5 	.word	0x080063c5
 8005fec:	080063c5 	.word	0x080063c5
 8005ff0:	080061f5 	.word	0x080061f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ff4:	4bb9      	ldr	r3, [pc, #740]	@ (80062dc <HAL_RCC_GetSysClockFreq+0x358>)
 8005ff6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005ffa:	e1e7      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ffc:	4bb8      	ldr	r3, [pc, #736]	@ (80062e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006002:	e1e3      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006004:	4bb4      	ldr	r3, [pc, #720]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800600c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006010:	4bb1      	ldr	r3, [pc, #708]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d071      	beq.n	8006100 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800601c:	4bae      	ldr	r3, [pc, #696]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	099b      	lsrs	r3, r3, #6
 8006022:	2200      	movs	r2, #0
 8006024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006028:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800602c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006034:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006038:	2300      	movs	r3, #0
 800603a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800603e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006042:	4622      	mov	r2, r4
 8006044:	462b      	mov	r3, r5
 8006046:	f04f 0000 	mov.w	r0, #0
 800604a:	f04f 0100 	mov.w	r1, #0
 800604e:	0159      	lsls	r1, r3, #5
 8006050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006054:	0150      	lsls	r0, r2, #5
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4621      	mov	r1, r4
 800605c:	1a51      	subs	r1, r2, r1
 800605e:	6439      	str	r1, [r7, #64]	@ 0x40
 8006060:	4629      	mov	r1, r5
 8006062:	eb63 0301 	sbc.w	r3, r3, r1
 8006066:	647b      	str	r3, [r7, #68]	@ 0x44
 8006068:	f04f 0200 	mov.w	r2, #0
 800606c:	f04f 0300 	mov.w	r3, #0
 8006070:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006074:	4649      	mov	r1, r9
 8006076:	018b      	lsls	r3, r1, #6
 8006078:	4641      	mov	r1, r8
 800607a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800607e:	4641      	mov	r1, r8
 8006080:	018a      	lsls	r2, r1, #6
 8006082:	4641      	mov	r1, r8
 8006084:	1a51      	subs	r1, r2, r1
 8006086:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006088:	4649      	mov	r1, r9
 800608a:	eb63 0301 	sbc.w	r3, r3, r1
 800608e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800609c:	4649      	mov	r1, r9
 800609e:	00cb      	lsls	r3, r1, #3
 80060a0:	4641      	mov	r1, r8
 80060a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060a6:	4641      	mov	r1, r8
 80060a8:	00ca      	lsls	r2, r1, #3
 80060aa:	4610      	mov	r0, r2
 80060ac:	4619      	mov	r1, r3
 80060ae:	4603      	mov	r3, r0
 80060b0:	4622      	mov	r2, r4
 80060b2:	189b      	adds	r3, r3, r2
 80060b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80060b6:	462b      	mov	r3, r5
 80060b8:	460a      	mov	r2, r1
 80060ba:	eb42 0303 	adc.w	r3, r2, r3
 80060be:	637b      	str	r3, [r7, #52]	@ 0x34
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80060cc:	4629      	mov	r1, r5
 80060ce:	024b      	lsls	r3, r1, #9
 80060d0:	4621      	mov	r1, r4
 80060d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060d6:	4621      	mov	r1, r4
 80060d8:	024a      	lsls	r2, r1, #9
 80060da:	4610      	mov	r0, r2
 80060dc:	4619      	mov	r1, r3
 80060de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80060f0:	f7fa fdca 	bl	8000c88 <__aeabi_uldivmod>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4613      	mov	r3, r2
 80060fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060fe:	e067      	b.n	80061d0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006100:	4b75      	ldr	r3, [pc, #468]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	099b      	lsrs	r3, r3, #6
 8006106:	2200      	movs	r2, #0
 8006108:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800610c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006110:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006118:	67bb      	str	r3, [r7, #120]	@ 0x78
 800611a:	2300      	movs	r3, #0
 800611c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800611e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006122:	4622      	mov	r2, r4
 8006124:	462b      	mov	r3, r5
 8006126:	f04f 0000 	mov.w	r0, #0
 800612a:	f04f 0100 	mov.w	r1, #0
 800612e:	0159      	lsls	r1, r3, #5
 8006130:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006134:	0150      	lsls	r0, r2, #5
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4621      	mov	r1, r4
 800613c:	1a51      	subs	r1, r2, r1
 800613e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006140:	4629      	mov	r1, r5
 8006142:	eb63 0301 	sbc.w	r3, r3, r1
 8006146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006154:	4649      	mov	r1, r9
 8006156:	018b      	lsls	r3, r1, #6
 8006158:	4641      	mov	r1, r8
 800615a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800615e:	4641      	mov	r1, r8
 8006160:	018a      	lsls	r2, r1, #6
 8006162:	4641      	mov	r1, r8
 8006164:	ebb2 0a01 	subs.w	sl, r2, r1
 8006168:	4649      	mov	r1, r9
 800616a:	eb63 0b01 	sbc.w	fp, r3, r1
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800617a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800617e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006182:	4692      	mov	sl, r2
 8006184:	469b      	mov	fp, r3
 8006186:	4623      	mov	r3, r4
 8006188:	eb1a 0303 	adds.w	r3, sl, r3
 800618c:	623b      	str	r3, [r7, #32]
 800618e:	462b      	mov	r3, r5
 8006190:	eb4b 0303 	adc.w	r3, fp, r3
 8006194:	627b      	str	r3, [r7, #36]	@ 0x24
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80061a2:	4629      	mov	r1, r5
 80061a4:	028b      	lsls	r3, r1, #10
 80061a6:	4621      	mov	r1, r4
 80061a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061ac:	4621      	mov	r1, r4
 80061ae:	028a      	lsls	r2, r1, #10
 80061b0:	4610      	mov	r0, r2
 80061b2:	4619      	mov	r1, r3
 80061b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061b8:	2200      	movs	r2, #0
 80061ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80061bc:	677a      	str	r2, [r7, #116]	@ 0x74
 80061be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80061c2:	f7fa fd61 	bl	8000c88 <__aeabi_uldivmod>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	4613      	mov	r3, r2
 80061cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80061d0:	4b41      	ldr	r3, [pc, #260]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	0c1b      	lsrs	r3, r3, #16
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	3301      	adds	r3, #1
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80061e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80061f2:	e0eb      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061f4:	4b38      	ldr	r3, [pc, #224]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006200:	4b35      	ldr	r3, [pc, #212]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d06b      	beq.n	80062e4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800620c:	4b32      	ldr	r3, [pc, #200]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	099b      	lsrs	r3, r3, #6
 8006212:	2200      	movs	r2, #0
 8006214:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006216:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006218:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800621a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006220:	2300      	movs	r3, #0
 8006222:	667b      	str	r3, [r7, #100]	@ 0x64
 8006224:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006228:	4622      	mov	r2, r4
 800622a:	462b      	mov	r3, r5
 800622c:	f04f 0000 	mov.w	r0, #0
 8006230:	f04f 0100 	mov.w	r1, #0
 8006234:	0159      	lsls	r1, r3, #5
 8006236:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800623a:	0150      	lsls	r0, r2, #5
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4621      	mov	r1, r4
 8006242:	1a51      	subs	r1, r2, r1
 8006244:	61b9      	str	r1, [r7, #24]
 8006246:	4629      	mov	r1, r5
 8006248:	eb63 0301 	sbc.w	r3, r3, r1
 800624c:	61fb      	str	r3, [r7, #28]
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	f04f 0300 	mov.w	r3, #0
 8006256:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800625a:	4659      	mov	r1, fp
 800625c:	018b      	lsls	r3, r1, #6
 800625e:	4651      	mov	r1, sl
 8006260:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006264:	4651      	mov	r1, sl
 8006266:	018a      	lsls	r2, r1, #6
 8006268:	4651      	mov	r1, sl
 800626a:	ebb2 0801 	subs.w	r8, r2, r1
 800626e:	4659      	mov	r1, fp
 8006270:	eb63 0901 	sbc.w	r9, r3, r1
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	f04f 0300 	mov.w	r3, #0
 800627c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006280:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006284:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006288:	4690      	mov	r8, r2
 800628a:	4699      	mov	r9, r3
 800628c:	4623      	mov	r3, r4
 800628e:	eb18 0303 	adds.w	r3, r8, r3
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	462b      	mov	r3, r5
 8006296:	eb49 0303 	adc.w	r3, r9, r3
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	f04f 0200 	mov.w	r2, #0
 80062a0:	f04f 0300 	mov.w	r3, #0
 80062a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80062a8:	4629      	mov	r1, r5
 80062aa:	024b      	lsls	r3, r1, #9
 80062ac:	4621      	mov	r1, r4
 80062ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062b2:	4621      	mov	r1, r4
 80062b4:	024a      	lsls	r2, r1, #9
 80062b6:	4610      	mov	r0, r2
 80062b8:	4619      	mov	r1, r3
 80062ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062be:	2200      	movs	r2, #0
 80062c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80062c2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80062c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80062c8:	f7fa fcde 	bl	8000c88 <__aeabi_uldivmod>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	4613      	mov	r3, r2
 80062d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062d6:	e065      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0x420>
 80062d8:	40023800 	.word	0x40023800
 80062dc:	00f42400 	.word	0x00f42400
 80062e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062e4:	4b3d      	ldr	r3, [pc, #244]	@ (80063dc <HAL_RCC_GetSysClockFreq+0x458>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	099b      	lsrs	r3, r3, #6
 80062ea:	2200      	movs	r2, #0
 80062ec:	4618      	mov	r0, r3
 80062ee:	4611      	mov	r1, r2
 80062f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80062f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80062f6:	2300      	movs	r3, #0
 80062f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80062fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80062fe:	4642      	mov	r2, r8
 8006300:	464b      	mov	r3, r9
 8006302:	f04f 0000 	mov.w	r0, #0
 8006306:	f04f 0100 	mov.w	r1, #0
 800630a:	0159      	lsls	r1, r3, #5
 800630c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006310:	0150      	lsls	r0, r2, #5
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4641      	mov	r1, r8
 8006318:	1a51      	subs	r1, r2, r1
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	4649      	mov	r1, r9
 800631e:	eb63 0301 	sbc.w	r3, r3, r1
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006330:	4659      	mov	r1, fp
 8006332:	018b      	lsls	r3, r1, #6
 8006334:	4651      	mov	r1, sl
 8006336:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800633a:	4651      	mov	r1, sl
 800633c:	018a      	lsls	r2, r1, #6
 800633e:	4651      	mov	r1, sl
 8006340:	1a54      	subs	r4, r2, r1
 8006342:	4659      	mov	r1, fp
 8006344:	eb63 0501 	sbc.w	r5, r3, r1
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	00eb      	lsls	r3, r5, #3
 8006352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006356:	00e2      	lsls	r2, r4, #3
 8006358:	4614      	mov	r4, r2
 800635a:	461d      	mov	r5, r3
 800635c:	4643      	mov	r3, r8
 800635e:	18e3      	adds	r3, r4, r3
 8006360:	603b      	str	r3, [r7, #0]
 8006362:	464b      	mov	r3, r9
 8006364:	eb45 0303 	adc.w	r3, r5, r3
 8006368:	607b      	str	r3, [r7, #4]
 800636a:	f04f 0200 	mov.w	r2, #0
 800636e:	f04f 0300 	mov.w	r3, #0
 8006372:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006376:	4629      	mov	r1, r5
 8006378:	028b      	lsls	r3, r1, #10
 800637a:	4621      	mov	r1, r4
 800637c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006380:	4621      	mov	r1, r4
 8006382:	028a      	lsls	r2, r1, #10
 8006384:	4610      	mov	r0, r2
 8006386:	4619      	mov	r1, r3
 8006388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800638c:	2200      	movs	r2, #0
 800638e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006390:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006392:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006396:	f7fa fc77 	bl	8000c88 <__aeabi_uldivmod>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	4613      	mov	r3, r2
 80063a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80063a4:	4b0d      	ldr	r3, [pc, #52]	@ (80063dc <HAL_RCC_GetSysClockFreq+0x458>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	0f1b      	lsrs	r3, r3, #28
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80063b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80063be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80063c2:	e003      	b.n	80063cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063c4:	4b06      	ldr	r3, [pc, #24]	@ (80063e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80063c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80063ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	37b8      	adds	r7, #184	@ 0xb8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063da:	bf00      	nop
 80063dc:	40023800 	.word	0x40023800
 80063e0:	00f42400 	.word	0x00f42400

080063e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e28d      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 8083 	beq.w	800650a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006404:	4b94      	ldr	r3, [pc, #592]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 030c 	and.w	r3, r3, #12
 800640c:	2b04      	cmp	r3, #4
 800640e:	d019      	beq.n	8006444 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006410:	4b91      	ldr	r3, [pc, #580]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 030c 	and.w	r3, r3, #12
        || \
 8006418:	2b08      	cmp	r3, #8
 800641a:	d106      	bne.n	800642a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800641c:	4b8e      	ldr	r3, [pc, #568]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006424:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006428:	d00c      	beq.n	8006444 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800642a:	4b8b      	ldr	r3, [pc, #556]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006432:	2b0c      	cmp	r3, #12
 8006434:	d112      	bne.n	800645c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006436:	4b88      	ldr	r3, [pc, #544]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800643e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006442:	d10b      	bne.n	800645c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006444:	4b84      	ldr	r3, [pc, #528]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d05b      	beq.n	8006508 <HAL_RCC_OscConfig+0x124>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d157      	bne.n	8006508 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e25a      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006464:	d106      	bne.n	8006474 <HAL_RCC_OscConfig+0x90>
 8006466:	4b7c      	ldr	r3, [pc, #496]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a7b      	ldr	r2, [pc, #492]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 800646c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	e01d      	b.n	80064b0 <HAL_RCC_OscConfig+0xcc>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800647c:	d10c      	bne.n	8006498 <HAL_RCC_OscConfig+0xb4>
 800647e:	4b76      	ldr	r3, [pc, #472]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a75      	ldr	r2, [pc, #468]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 8006484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006488:	6013      	str	r3, [r2, #0]
 800648a:	4b73      	ldr	r3, [pc, #460]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a72      	ldr	r2, [pc, #456]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 8006490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	e00b      	b.n	80064b0 <HAL_RCC_OscConfig+0xcc>
 8006498:	4b6f      	ldr	r3, [pc, #444]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a6e      	ldr	r2, [pc, #440]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 800649e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	4b6c      	ldr	r3, [pc, #432]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a6b      	ldr	r2, [pc, #428]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 80064aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d013      	beq.n	80064e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b8:	f7fd fb9a 	bl	8003bf0 <HAL_GetTick>
 80064bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064be:	e008      	b.n	80064d2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064c0:	f7fd fb96 	bl	8003bf0 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	2b64      	cmp	r3, #100	@ 0x64
 80064cc:	d901      	bls.n	80064d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e21f      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064d2:	4b61      	ldr	r3, [pc, #388]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0f0      	beq.n	80064c0 <HAL_RCC_OscConfig+0xdc>
 80064de:	e014      	b.n	800650a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e0:	f7fd fb86 	bl	8003bf0 <HAL_GetTick>
 80064e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064e8:	f7fd fb82 	bl	8003bf0 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b64      	cmp	r3, #100	@ 0x64
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e20b      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064fa:	4b57      	ldr	r3, [pc, #348]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1f0      	bne.n	80064e8 <HAL_RCC_OscConfig+0x104>
 8006506:	e000      	b.n	800650a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0302 	and.w	r3, r3, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d06f      	beq.n	80065f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006516:	4b50      	ldr	r3, [pc, #320]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 030c 	and.w	r3, r3, #12
 800651e:	2b00      	cmp	r3, #0
 8006520:	d017      	beq.n	8006552 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006522:	4b4d      	ldr	r3, [pc, #308]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 030c 	and.w	r3, r3, #12
        || \
 800652a:	2b08      	cmp	r3, #8
 800652c:	d105      	bne.n	800653a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800652e:	4b4a      	ldr	r3, [pc, #296]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00b      	beq.n	8006552 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800653a:	4b47      	ldr	r3, [pc, #284]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006542:	2b0c      	cmp	r3, #12
 8006544:	d11c      	bne.n	8006580 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006546:	4b44      	ldr	r3, [pc, #272]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d116      	bne.n	8006580 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006552:	4b41      	ldr	r3, [pc, #260]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d005      	beq.n	800656a <HAL_RCC_OscConfig+0x186>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d001      	beq.n	800656a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e1d3      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800656a:	4b3b      	ldr	r3, [pc, #236]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	4937      	ldr	r1, [pc, #220]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 800657a:	4313      	orrs	r3, r2
 800657c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800657e:	e03a      	b.n	80065f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d020      	beq.n	80065ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006588:	4b34      	ldr	r3, [pc, #208]	@ (800665c <HAL_RCC_OscConfig+0x278>)
 800658a:	2201      	movs	r2, #1
 800658c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658e:	f7fd fb2f 	bl	8003bf0 <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006594:	e008      	b.n	80065a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006596:	f7fd fb2b 	bl	8003bf0 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e1b4      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0f0      	beq.n	8006596 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b4:	4b28      	ldr	r3, [pc, #160]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	00db      	lsls	r3, r3, #3
 80065c2:	4925      	ldr	r1, [pc, #148]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 80065c4:	4313      	orrs	r3, r2
 80065c6:	600b      	str	r3, [r1, #0]
 80065c8:	e015      	b.n	80065f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ca:	4b24      	ldr	r3, [pc, #144]	@ (800665c <HAL_RCC_OscConfig+0x278>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d0:	f7fd fb0e 	bl	8003bf0 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065d8:	f7fd fb0a 	bl	8003bf0 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e193      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f0      	bne.n	80065d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0308 	and.w	r3, r3, #8
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d036      	beq.n	8006670 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d016      	beq.n	8006638 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800660a:	4b15      	ldr	r3, [pc, #84]	@ (8006660 <HAL_RCC_OscConfig+0x27c>)
 800660c:	2201      	movs	r2, #1
 800660e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006610:	f7fd faee 	bl	8003bf0 <HAL_GetTick>
 8006614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006618:	f7fd faea 	bl	8003bf0 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e173      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800662a:	4b0b      	ldr	r3, [pc, #44]	@ (8006658 <HAL_RCC_OscConfig+0x274>)
 800662c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f0      	beq.n	8006618 <HAL_RCC_OscConfig+0x234>
 8006636:	e01b      	b.n	8006670 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006638:	4b09      	ldr	r3, [pc, #36]	@ (8006660 <HAL_RCC_OscConfig+0x27c>)
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663e:	f7fd fad7 	bl	8003bf0 <HAL_GetTick>
 8006642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006644:	e00e      	b.n	8006664 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006646:	f7fd fad3 	bl	8003bf0 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d907      	bls.n	8006664 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e15c      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
 8006658:	40023800 	.word	0x40023800
 800665c:	42470000 	.word	0x42470000
 8006660:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006664:	4b8a      	ldr	r3, [pc, #552]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 8006666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006668:	f003 0302 	and.w	r3, r3, #2
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1ea      	bne.n	8006646 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 0304 	and.w	r3, r3, #4
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 8097 	beq.w	80067ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800667e:	2300      	movs	r3, #0
 8006680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006682:	4b83      	ldr	r3, [pc, #524]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 8006684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10f      	bne.n	80066ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800668e:	2300      	movs	r3, #0
 8006690:	60bb      	str	r3, [r7, #8]
 8006692:	4b7f      	ldr	r3, [pc, #508]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 8006694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006696:	4a7e      	ldr	r2, [pc, #504]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 8006698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800669c:	6413      	str	r3, [r2, #64]	@ 0x40
 800669e:	4b7c      	ldr	r3, [pc, #496]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 80066a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066a6:	60bb      	str	r3, [r7, #8]
 80066a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066aa:	2301      	movs	r3, #1
 80066ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ae:	4b79      	ldr	r3, [pc, #484]	@ (8006894 <HAL_RCC_OscConfig+0x4b0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d118      	bne.n	80066ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066ba:	4b76      	ldr	r3, [pc, #472]	@ (8006894 <HAL_RCC_OscConfig+0x4b0>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a75      	ldr	r2, [pc, #468]	@ (8006894 <HAL_RCC_OscConfig+0x4b0>)
 80066c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066c6:	f7fd fa93 	bl	8003bf0 <HAL_GetTick>
 80066ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066cc:	e008      	b.n	80066e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ce:	f7fd fa8f 	bl	8003bf0 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d901      	bls.n	80066e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e118      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066e0:	4b6c      	ldr	r3, [pc, #432]	@ (8006894 <HAL_RCC_OscConfig+0x4b0>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0f0      	beq.n	80066ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d106      	bne.n	8006702 <HAL_RCC_OscConfig+0x31e>
 80066f4:	4b66      	ldr	r3, [pc, #408]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 80066f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f8:	4a65      	ldr	r2, [pc, #404]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006700:	e01c      	b.n	800673c <HAL_RCC_OscConfig+0x358>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b05      	cmp	r3, #5
 8006708:	d10c      	bne.n	8006724 <HAL_RCC_OscConfig+0x340>
 800670a:	4b61      	ldr	r3, [pc, #388]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 800670c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800670e:	4a60      	ldr	r2, [pc, #384]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 8006710:	f043 0304 	orr.w	r3, r3, #4
 8006714:	6713      	str	r3, [r2, #112]	@ 0x70
 8006716:	4b5e      	ldr	r3, [pc, #376]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 8006718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800671a:	4a5d      	ldr	r2, [pc, #372]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 800671c:	f043 0301 	orr.w	r3, r3, #1
 8006720:	6713      	str	r3, [r2, #112]	@ 0x70
 8006722:	e00b      	b.n	800673c <HAL_RCC_OscConfig+0x358>
 8006724:	4b5a      	ldr	r3, [pc, #360]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 8006726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006728:	4a59      	ldr	r2, [pc, #356]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 800672a:	f023 0301 	bic.w	r3, r3, #1
 800672e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006730:	4b57      	ldr	r3, [pc, #348]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 8006732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006734:	4a56      	ldr	r2, [pc, #344]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 8006736:	f023 0304 	bic.w	r3, r3, #4
 800673a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d015      	beq.n	8006770 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006744:	f7fd fa54 	bl	8003bf0 <HAL_GetTick>
 8006748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800674a:	e00a      	b.n	8006762 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800674c:	f7fd fa50 	bl	8003bf0 <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800675a:	4293      	cmp	r3, r2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e0d7      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006762:	4b4b      	ldr	r3, [pc, #300]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 8006764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0ee      	beq.n	800674c <HAL_RCC_OscConfig+0x368>
 800676e:	e014      	b.n	800679a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006770:	f7fd fa3e 	bl	8003bf0 <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006776:	e00a      	b.n	800678e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006778:	f7fd fa3a 	bl	8003bf0 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006786:	4293      	cmp	r3, r2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e0c1      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800678e:	4b40      	ldr	r3, [pc, #256]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 8006790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1ee      	bne.n	8006778 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d105      	bne.n	80067ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 80067a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a4:	4a3a      	ldr	r2, [pc, #232]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 80067a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 80ad 	beq.w	8006910 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067b6:	4b36      	ldr	r3, [pc, #216]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f003 030c 	and.w	r3, r3, #12
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d060      	beq.n	8006884 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d145      	bne.n	8006856 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ca:	4b33      	ldr	r3, [pc, #204]	@ (8006898 <HAL_RCC_OscConfig+0x4b4>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d0:	f7fd fa0e 	bl	8003bf0 <HAL_GetTick>
 80067d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067d8:	f7fd fa0a 	bl	8003bf0 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e093      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ea:	4b29      	ldr	r3, [pc, #164]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1f0      	bne.n	80067d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69da      	ldr	r2, [r3, #28]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	431a      	orrs	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006804:	019b      	lsls	r3, r3, #6
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680c:	085b      	lsrs	r3, r3, #1
 800680e:	3b01      	subs	r3, #1
 8006810:	041b      	lsls	r3, r3, #16
 8006812:	431a      	orrs	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006818:	061b      	lsls	r3, r3, #24
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006820:	071b      	lsls	r3, r3, #28
 8006822:	491b      	ldr	r1, [pc, #108]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 8006824:	4313      	orrs	r3, r2
 8006826:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006828:	4b1b      	ldr	r3, [pc, #108]	@ (8006898 <HAL_RCC_OscConfig+0x4b4>)
 800682a:	2201      	movs	r2, #1
 800682c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682e:	f7fd f9df 	bl	8003bf0 <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006834:	e008      	b.n	8006848 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006836:	f7fd f9db 	bl	8003bf0 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d901      	bls.n	8006848 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e064      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006848:	4b11      	ldr	r3, [pc, #68]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0f0      	beq.n	8006836 <HAL_RCC_OscConfig+0x452>
 8006854:	e05c      	b.n	8006910 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006856:	4b10      	ldr	r3, [pc, #64]	@ (8006898 <HAL_RCC_OscConfig+0x4b4>)
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800685c:	f7fd f9c8 	bl	8003bf0 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006862:	e008      	b.n	8006876 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006864:	f7fd f9c4 	bl	8003bf0 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d901      	bls.n	8006876 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e04d      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006876:	4b06      	ldr	r3, [pc, #24]	@ (8006890 <HAL_RCC_OscConfig+0x4ac>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1f0      	bne.n	8006864 <HAL_RCC_OscConfig+0x480>
 8006882:	e045      	b.n	8006910 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d107      	bne.n	800689c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e040      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
 8006890:	40023800 	.word	0x40023800
 8006894:	40007000 	.word	0x40007000
 8006898:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800689c:	4b1f      	ldr	r3, [pc, #124]	@ (800691c <HAL_RCC_OscConfig+0x538>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d030      	beq.n	800690c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d129      	bne.n	800690c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d122      	bne.n	800690c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80068cc:	4013      	ands	r3, r2
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80068d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d119      	bne.n	800690c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e2:	085b      	lsrs	r3, r3, #1
 80068e4:	3b01      	subs	r3, #1
 80068e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d10f      	bne.n	800690c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d107      	bne.n	800690c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006906:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006908:	429a      	cmp	r2, r3
 800690a:	d001      	beq.n	8006910 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	40023800 	.word	0x40023800

08006920 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e041      	b.n	80069b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d106      	bne.n	800694c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7fc fab6 	bl	8002eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	3304      	adds	r3, #4
 800695c:	4619      	mov	r1, r3
 800695e:	4610      	mov	r0, r2
 8006960:	f000 faec 	bl	8006f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
	...

080069c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d109      	bne.n	80069e4 <HAL_TIM_PWM_Start+0x24>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b01      	cmp	r3, #1
 80069da:	bf14      	ite	ne
 80069dc:	2301      	movne	r3, #1
 80069de:	2300      	moveq	r3, #0
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	e022      	b.n	8006a2a <HAL_TIM_PWM_Start+0x6a>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d109      	bne.n	80069fe <HAL_TIM_PWM_Start+0x3e>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	bf14      	ite	ne
 80069f6:	2301      	movne	r3, #1
 80069f8:	2300      	moveq	r3, #0
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	e015      	b.n	8006a2a <HAL_TIM_PWM_Start+0x6a>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d109      	bne.n	8006a18 <HAL_TIM_PWM_Start+0x58>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	bf14      	ite	ne
 8006a10:	2301      	movne	r3, #1
 8006a12:	2300      	moveq	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	e008      	b.n	8006a2a <HAL_TIM_PWM_Start+0x6a>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	bf14      	ite	ne
 8006a24:	2301      	movne	r3, #1
 8006a26:	2300      	moveq	r3, #0
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e07c      	b.n	8006b2c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d104      	bne.n	8006a42 <HAL_TIM_PWM_Start+0x82>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a40:	e013      	b.n	8006a6a <HAL_TIM_PWM_Start+0xaa>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d104      	bne.n	8006a52 <HAL_TIM_PWM_Start+0x92>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a50:	e00b      	b.n	8006a6a <HAL_TIM_PWM_Start+0xaa>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d104      	bne.n	8006a62 <HAL_TIM_PWM_Start+0xa2>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a60:	e003      	b.n	8006a6a <HAL_TIM_PWM_Start+0xaa>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2202      	movs	r2, #2
 8006a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fcbe 	bl	80073f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a2d      	ldr	r2, [pc, #180]	@ (8006b34 <HAL_TIM_PWM_Start+0x174>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d004      	beq.n	8006a8c <HAL_TIM_PWM_Start+0xcc>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a2c      	ldr	r2, [pc, #176]	@ (8006b38 <HAL_TIM_PWM_Start+0x178>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d101      	bne.n	8006a90 <HAL_TIM_PWM_Start+0xd0>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e000      	b.n	8006a92 <HAL_TIM_PWM_Start+0xd2>
 8006a90:	2300      	movs	r3, #0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d007      	beq.n	8006aa6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a22      	ldr	r2, [pc, #136]	@ (8006b34 <HAL_TIM_PWM_Start+0x174>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d022      	beq.n	8006af6 <HAL_TIM_PWM_Start+0x136>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab8:	d01d      	beq.n	8006af6 <HAL_TIM_PWM_Start+0x136>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a1f      	ldr	r2, [pc, #124]	@ (8006b3c <HAL_TIM_PWM_Start+0x17c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d018      	beq.n	8006af6 <HAL_TIM_PWM_Start+0x136>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8006b40 <HAL_TIM_PWM_Start+0x180>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d013      	beq.n	8006af6 <HAL_TIM_PWM_Start+0x136>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8006b44 <HAL_TIM_PWM_Start+0x184>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00e      	beq.n	8006af6 <HAL_TIM_PWM_Start+0x136>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a16      	ldr	r2, [pc, #88]	@ (8006b38 <HAL_TIM_PWM_Start+0x178>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d009      	beq.n	8006af6 <HAL_TIM_PWM_Start+0x136>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a18      	ldr	r2, [pc, #96]	@ (8006b48 <HAL_TIM_PWM_Start+0x188>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d004      	beq.n	8006af6 <HAL_TIM_PWM_Start+0x136>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a16      	ldr	r2, [pc, #88]	@ (8006b4c <HAL_TIM_PWM_Start+0x18c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d111      	bne.n	8006b1a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b06      	cmp	r3, #6
 8006b06:	d010      	beq.n	8006b2a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0201 	orr.w	r2, r2, #1
 8006b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b18:	e007      	b.n	8006b2a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f042 0201 	orr.w	r2, r2, #1
 8006b28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	40010000 	.word	0x40010000
 8006b38:	40010400 	.word	0x40010400
 8006b3c:	40000400 	.word	0x40000400
 8006b40:	40000800 	.word	0x40000800
 8006b44:	40000c00 	.word	0x40000c00
 8006b48:	40014000 	.word	0x40014000
 8006b4c:	40001800 	.word	0x40001800

08006b50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e097      	b.n	8006c94 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d106      	bne.n	8006b7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7fc f923 	bl	8002dc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2202      	movs	r2, #2
 8006b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6812      	ldr	r2, [r2, #0]
 8006b90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b94:	f023 0307 	bic.w	r3, r3, #7
 8006b98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	f000 f9c9 	bl	8006f3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bd2:	f023 0303 	bic.w	r3, r3, #3
 8006bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	021b      	lsls	r3, r3, #8
 8006be2:	4313      	orrs	r3, r2
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006bf0:	f023 030c 	bic.w	r3, r3, #12
 8006bf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	011a      	lsls	r2, r3, #4
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	031b      	lsls	r3, r3, #12
 8006c20:	4313      	orrs	r3, r2
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006c2e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006c36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	4313      	orrs	r3, r2
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006cac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006cb4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006cbc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006cc4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d110      	bne.n	8006cee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d102      	bne.n	8006cd8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cd2:	7b7b      	ldrb	r3, [r7, #13]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d001      	beq.n	8006cdc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e069      	b.n	8006db0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cec:	e031      	b.n	8006d52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d110      	bne.n	8006d16 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cf4:	7bbb      	ldrb	r3, [r7, #14]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d102      	bne.n	8006d00 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cfa:	7b3b      	ldrb	r3, [r7, #12]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d001      	beq.n	8006d04 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e055      	b.n	8006db0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d14:	e01d      	b.n	8006d52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d108      	bne.n	8006d2e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d105      	bne.n	8006d2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d22:	7b7b      	ldrb	r3, [r7, #13]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d102      	bne.n	8006d2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d28:	7b3b      	ldrb	r3, [r7, #12]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d001      	beq.n	8006d32 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e03e      	b.n	8006db0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2202      	movs	r2, #2
 8006d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d003      	beq.n	8006d60 <HAL_TIM_Encoder_Start+0xc4>
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b04      	cmp	r3, #4
 8006d5c:	d008      	beq.n	8006d70 <HAL_TIM_Encoder_Start+0xd4>
 8006d5e:	e00f      	b.n	8006d80 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2201      	movs	r2, #1
 8006d66:	2100      	movs	r1, #0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fb43 	bl	80073f4 <TIM_CCxChannelCmd>
      break;
 8006d6e:	e016      	b.n	8006d9e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2201      	movs	r2, #1
 8006d76:	2104      	movs	r1, #4
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fb3b 	bl	80073f4 <TIM_CCxChannelCmd>
      break;
 8006d7e:	e00e      	b.n	8006d9e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2201      	movs	r2, #1
 8006d86:	2100      	movs	r1, #0
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 fb33 	bl	80073f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2201      	movs	r2, #1
 8006d94:	2104      	movs	r1, #4
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fb2c 	bl	80073f4 <TIM_CCxChannelCmd>
      break;
 8006d9c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f042 0201 	orr.w	r2, r2, #1
 8006dac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	e0ae      	b.n	8006f34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b0c      	cmp	r3, #12
 8006de2:	f200 809f 	bhi.w	8006f24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006de6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006e21 	.word	0x08006e21
 8006df0:	08006f25 	.word	0x08006f25
 8006df4:	08006f25 	.word	0x08006f25
 8006df8:	08006f25 	.word	0x08006f25
 8006dfc:	08006e61 	.word	0x08006e61
 8006e00:	08006f25 	.word	0x08006f25
 8006e04:	08006f25 	.word	0x08006f25
 8006e08:	08006f25 	.word	0x08006f25
 8006e0c:	08006ea3 	.word	0x08006ea3
 8006e10:	08006f25 	.word	0x08006f25
 8006e14:	08006f25 	.word	0x08006f25
 8006e18:	08006f25 	.word	0x08006f25
 8006e1c:	08006ee3 	.word	0x08006ee3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68b9      	ldr	r1, [r7, #8]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 f934 	bl	8007094 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	699a      	ldr	r2, [r3, #24]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0208 	orr.w	r2, r2, #8
 8006e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699a      	ldr	r2, [r3, #24]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0204 	bic.w	r2, r2, #4
 8006e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6999      	ldr	r1, [r3, #24]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	691a      	ldr	r2, [r3, #16]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	619a      	str	r2, [r3, #24]
      break;
 8006e5e:	e064      	b.n	8006f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 f984 	bl	8007174 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699a      	ldr	r2, [r3, #24]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	699a      	ldr	r2, [r3, #24]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6999      	ldr	r1, [r3, #24]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	021a      	lsls	r2, r3, #8
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	619a      	str	r2, [r3, #24]
      break;
 8006ea0:	e043      	b.n	8006f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68b9      	ldr	r1, [r7, #8]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 f9d9 	bl	8007260 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69da      	ldr	r2, [r3, #28]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f042 0208 	orr.w	r2, r2, #8
 8006ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69da      	ldr	r2, [r3, #28]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 0204 	bic.w	r2, r2, #4
 8006ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69d9      	ldr	r1, [r3, #28]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	691a      	ldr	r2, [r3, #16]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	61da      	str	r2, [r3, #28]
      break;
 8006ee0:	e023      	b.n	8006f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68b9      	ldr	r1, [r7, #8]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 fa2d 	bl	8007348 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69da      	ldr	r2, [r3, #28]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69da      	ldr	r2, [r3, #28]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	69d9      	ldr	r1, [r3, #28]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	021a      	lsls	r2, r3, #8
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	61da      	str	r2, [r3, #28]
      break;
 8006f22:	e002      	b.n	8006f2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	75fb      	strb	r3, [r7, #23]
      break;
 8006f28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a46      	ldr	r2, [pc, #280]	@ (8007068 <TIM_Base_SetConfig+0x12c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d013      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f5a:	d00f      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a43      	ldr	r2, [pc, #268]	@ (800706c <TIM_Base_SetConfig+0x130>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00b      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a42      	ldr	r2, [pc, #264]	@ (8007070 <TIM_Base_SetConfig+0x134>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d007      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a41      	ldr	r2, [pc, #260]	@ (8007074 <TIM_Base_SetConfig+0x138>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d003      	beq.n	8006f7c <TIM_Base_SetConfig+0x40>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a40      	ldr	r2, [pc, #256]	@ (8007078 <TIM_Base_SetConfig+0x13c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d108      	bne.n	8006f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a35      	ldr	r2, [pc, #212]	@ (8007068 <TIM_Base_SetConfig+0x12c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d02b      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f9c:	d027      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a32      	ldr	r2, [pc, #200]	@ (800706c <TIM_Base_SetConfig+0x130>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d023      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a31      	ldr	r2, [pc, #196]	@ (8007070 <TIM_Base_SetConfig+0x134>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d01f      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a30      	ldr	r2, [pc, #192]	@ (8007074 <TIM_Base_SetConfig+0x138>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d01b      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a2f      	ldr	r2, [pc, #188]	@ (8007078 <TIM_Base_SetConfig+0x13c>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d017      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a2e      	ldr	r2, [pc, #184]	@ (800707c <TIM_Base_SetConfig+0x140>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d013      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8007080 <TIM_Base_SetConfig+0x144>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00f      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a2c      	ldr	r2, [pc, #176]	@ (8007084 <TIM_Base_SetConfig+0x148>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00b      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a2b      	ldr	r2, [pc, #172]	@ (8007088 <TIM_Base_SetConfig+0x14c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d007      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800708c <TIM_Base_SetConfig+0x150>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d003      	beq.n	8006fee <TIM_Base_SetConfig+0xb2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a29      	ldr	r2, [pc, #164]	@ (8007090 <TIM_Base_SetConfig+0x154>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d108      	bne.n	8007000 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a10      	ldr	r2, [pc, #64]	@ (8007068 <TIM_Base_SetConfig+0x12c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d003      	beq.n	8007034 <TIM_Base_SetConfig+0xf8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a12      	ldr	r2, [pc, #72]	@ (8007078 <TIM_Base_SetConfig+0x13c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d103      	bne.n	800703c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	691a      	ldr	r2, [r3, #16]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b01      	cmp	r3, #1
 800704c:	d105      	bne.n	800705a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	f023 0201 	bic.w	r2, r3, #1
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	611a      	str	r2, [r3, #16]
  }
}
 800705a:	bf00      	nop
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40010000 	.word	0x40010000
 800706c:	40000400 	.word	0x40000400
 8007070:	40000800 	.word	0x40000800
 8007074:	40000c00 	.word	0x40000c00
 8007078:	40010400 	.word	0x40010400
 800707c:	40014000 	.word	0x40014000
 8007080:	40014400 	.word	0x40014400
 8007084:	40014800 	.word	0x40014800
 8007088:	40001800 	.word	0x40001800
 800708c:	40001c00 	.word	0x40001c00
 8007090:	40002000 	.word	0x40002000

08007094 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	f023 0201 	bic.w	r2, r3, #1
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0303 	bic.w	r3, r3, #3
 80070ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f023 0302 	bic.w	r3, r3, #2
 80070dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a20      	ldr	r2, [pc, #128]	@ (800716c <TIM_OC1_SetConfig+0xd8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d003      	beq.n	80070f8 <TIM_OC1_SetConfig+0x64>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a1f      	ldr	r2, [pc, #124]	@ (8007170 <TIM_OC1_SetConfig+0xdc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d10c      	bne.n	8007112 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f023 0308 	bic.w	r3, r3, #8
 80070fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	4313      	orrs	r3, r2
 8007108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	f023 0304 	bic.w	r3, r3, #4
 8007110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a15      	ldr	r2, [pc, #84]	@ (800716c <TIM_OC1_SetConfig+0xd8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d003      	beq.n	8007122 <TIM_OC1_SetConfig+0x8e>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a14      	ldr	r2, [pc, #80]	@ (8007170 <TIM_OC1_SetConfig+0xdc>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d111      	bne.n	8007146 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	4313      	orrs	r3, r2
 800713a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	4313      	orrs	r3, r2
 8007144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	621a      	str	r2, [r3, #32]
}
 8007160:	bf00      	nop
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	40010000 	.word	0x40010000
 8007170:	40010400 	.word	0x40010400

08007174 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	f023 0210 	bic.w	r2, r3, #16
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	021b      	lsls	r3, r3, #8
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f023 0320 	bic.w	r3, r3, #32
 80071be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a22      	ldr	r2, [pc, #136]	@ (8007258 <TIM_OC2_SetConfig+0xe4>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d003      	beq.n	80071dc <TIM_OC2_SetConfig+0x68>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a21      	ldr	r2, [pc, #132]	@ (800725c <TIM_OC2_SetConfig+0xe8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d10d      	bne.n	80071f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	011b      	lsls	r3, r3, #4
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a17      	ldr	r2, [pc, #92]	@ (8007258 <TIM_OC2_SetConfig+0xe4>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d003      	beq.n	8007208 <TIM_OC2_SetConfig+0x94>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a16      	ldr	r2, [pc, #88]	@ (800725c <TIM_OC2_SetConfig+0xe8>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d113      	bne.n	8007230 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800720e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4313      	orrs	r3, r2
 8007222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	4313      	orrs	r3, r2
 800722e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	621a      	str	r2, [r3, #32]
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	40010000 	.word	0x40010000
 800725c:	40010400 	.word	0x40010400

08007260 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800728e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0303 	bic.w	r3, r3, #3
 8007296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	021b      	lsls	r3, r3, #8
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a21      	ldr	r2, [pc, #132]	@ (8007340 <TIM_OC3_SetConfig+0xe0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d003      	beq.n	80072c6 <TIM_OC3_SetConfig+0x66>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a20      	ldr	r2, [pc, #128]	@ (8007344 <TIM_OC3_SetConfig+0xe4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d10d      	bne.n	80072e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	021b      	lsls	r3, r3, #8
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a16      	ldr	r2, [pc, #88]	@ (8007340 <TIM_OC3_SetConfig+0xe0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d003      	beq.n	80072f2 <TIM_OC3_SetConfig+0x92>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a15      	ldr	r2, [pc, #84]	@ (8007344 <TIM_OC3_SetConfig+0xe4>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d113      	bne.n	800731a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	011b      	lsls	r3, r3, #4
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	4313      	orrs	r3, r2
 8007318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	621a      	str	r2, [r3, #32]
}
 8007334:	bf00      	nop
 8007336:	371c      	adds	r7, #28
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	40010000 	.word	0x40010000
 8007344:	40010400 	.word	0x40010400

08007348 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800737e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	021b      	lsls	r3, r3, #8
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	4313      	orrs	r3, r2
 800738a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007392:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	031b      	lsls	r3, r3, #12
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	4313      	orrs	r3, r2
 800739e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a12      	ldr	r2, [pc, #72]	@ (80073ec <TIM_OC4_SetConfig+0xa4>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d003      	beq.n	80073b0 <TIM_OC4_SetConfig+0x68>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a11      	ldr	r2, [pc, #68]	@ (80073f0 <TIM_OC4_SetConfig+0xa8>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d109      	bne.n	80073c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	019b      	lsls	r3, r3, #6
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	685a      	ldr	r2, [r3, #4]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	621a      	str	r2, [r3, #32]
}
 80073de:	bf00      	nop
 80073e0:	371c      	adds	r7, #28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	40010000 	.word	0x40010000
 80073f0:	40010400 	.word	0x40010400

080073f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f003 031f 	and.w	r3, r3, #31
 8007406:	2201      	movs	r2, #1
 8007408:	fa02 f303 	lsl.w	r3, r2, r3
 800740c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6a1a      	ldr	r2, [r3, #32]
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	43db      	mvns	r3, r3
 8007416:	401a      	ands	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6a1a      	ldr	r2, [r3, #32]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	f003 031f 	and.w	r3, r3, #31
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	fa01 f303 	lsl.w	r3, r1, r3
 800742c:	431a      	orrs	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	621a      	str	r2, [r3, #32]
}
 8007432:	bf00      	nop
 8007434:	371c      	adds	r7, #28
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
	...

08007440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007450:	2b01      	cmp	r3, #1
 8007452:	d101      	bne.n	8007458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007454:	2302      	movs	r3, #2
 8007456:	e05a      	b.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800747e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a21      	ldr	r2, [pc, #132]	@ (800751c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d022      	beq.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074a4:	d01d      	beq.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a1d      	ldr	r2, [pc, #116]	@ (8007520 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d018      	beq.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007524 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d013      	beq.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a1a      	ldr	r2, [pc, #104]	@ (8007528 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d00e      	beq.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a18      	ldr	r2, [pc, #96]	@ (800752c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d009      	beq.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a17      	ldr	r2, [pc, #92]	@ (8007530 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d004      	beq.n	80074e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a15      	ldr	r2, [pc, #84]	@ (8007534 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d10c      	bne.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3714      	adds	r7, #20
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	40010000 	.word	0x40010000
 8007520:	40000400 	.word	0x40000400
 8007524:	40000800 	.word	0x40000800
 8007528:	40000c00 	.word	0x40000c00
 800752c:	40010400 	.word	0x40010400
 8007530:	40014000 	.word	0x40014000
 8007534:	40001800 	.word	0x40001800

08007538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e042      	b.n	80075d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7fb fd26 	bl	8002fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2224      	movs	r2, #36	@ 0x24
 8007568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800757a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fc85 	bl	8007e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	695a      	ldr	r2, [r3, #20]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68da      	ldr	r2, [r3, #12]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2220      	movs	r2, #32
 80075bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b0ba      	sub	sp, #232	@ 0xe8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80075fe:	2300      	movs	r3, #0
 8007600:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007604:	2300      	movs	r3, #0
 8007606:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800760a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800760e:	f003 030f 	and.w	r3, r3, #15
 8007612:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10f      	bne.n	800763e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800761e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007622:	f003 0320 	and.w	r3, r3, #32
 8007626:	2b00      	cmp	r3, #0
 8007628:	d009      	beq.n	800763e <HAL_UART_IRQHandler+0x66>
 800762a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fb69 	bl	8007d0e <UART_Receive_IT>
      return;
 800763c:	e25b      	b.n	8007af6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800763e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 80de 	beq.w	8007804 <HAL_UART_IRQHandler+0x22c>
 8007648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d106      	bne.n	8007662 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007658:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 80d1 	beq.w	8007804 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00b      	beq.n	8007686 <HAL_UART_IRQHandler+0xae>
 800766e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767e:	f043 0201 	orr.w	r2, r3, #1
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00b      	beq.n	80076aa <HAL_UART_IRQHandler+0xd2>
 8007692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076a2:	f043 0202 	orr.w	r2, r3, #2
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00b      	beq.n	80076ce <HAL_UART_IRQHandler+0xf6>
 80076b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d005      	beq.n	80076ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c6:	f043 0204 	orr.w	r2, r3, #4
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076d2:	f003 0308 	and.w	r3, r3, #8
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d011      	beq.n	80076fe <HAL_UART_IRQHandler+0x126>
 80076da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d105      	bne.n	80076f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80076e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076ea:	f003 0301 	and.w	r3, r3, #1
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076f6:	f043 0208 	orr.w	r2, r3, #8
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 81f2 	beq.w	8007aec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d008      	beq.n	8007726 <HAL_UART_IRQHandler+0x14e>
 8007714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007718:	f003 0320 	and.w	r3, r3, #32
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 faf4 	bl	8007d0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007730:	2b40      	cmp	r3, #64	@ 0x40
 8007732:	bf0c      	ite	eq
 8007734:	2301      	moveq	r3, #1
 8007736:	2300      	movne	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007742:	f003 0308 	and.w	r3, r3, #8
 8007746:	2b00      	cmp	r3, #0
 8007748:	d103      	bne.n	8007752 <HAL_UART_IRQHandler+0x17a>
 800774a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800774e:	2b00      	cmp	r3, #0
 8007750:	d04f      	beq.n	80077f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f9fc 	bl	8007b50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007762:	2b40      	cmp	r3, #64	@ 0x40
 8007764:	d141      	bne.n	80077ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3314      	adds	r3, #20
 800776c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800777c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007784:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3314      	adds	r3, #20
 800778e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007792:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007796:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800779e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80077aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1d9      	bne.n	8007766 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d013      	beq.n	80077e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077be:	4a7e      	ldr	r2, [pc, #504]	@ (80079b8 <HAL_UART_IRQHandler+0x3e0>)
 80077c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fd f882 	bl	80048d0 <HAL_DMA_Abort_IT>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d016      	beq.n	8007800 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e0:	e00e      	b.n	8007800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f99e 	bl	8007b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e8:	e00a      	b.n	8007800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f99a 	bl	8007b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f0:	e006      	b.n	8007800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f996 	bl	8007b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80077fe:	e175      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007800:	bf00      	nop
    return;
 8007802:	e173      	b.n	8007aec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007808:	2b01      	cmp	r3, #1
 800780a:	f040 814f 	bne.w	8007aac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800780e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007812:	f003 0310 	and.w	r3, r3, #16
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 8148 	beq.w	8007aac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800781c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007820:	f003 0310 	and.w	r3, r3, #16
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 8141 	beq.w	8007aac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800782a:	2300      	movs	r3, #0
 800782c:	60bb      	str	r3, [r7, #8]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	60bb      	str	r3, [r7, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	60bb      	str	r3, [r7, #8]
 800783e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800784a:	2b40      	cmp	r3, #64	@ 0x40
 800784c:	f040 80b6 	bne.w	80079bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800785c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 8145 	beq.w	8007af0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800786a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800786e:	429a      	cmp	r2, r3
 8007870:	f080 813e 	bcs.w	8007af0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800787a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007886:	f000 8088 	beq.w	800799a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	330c      	adds	r3, #12
 8007890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80078a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	330c      	adds	r3, #12
 80078b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80078b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80078ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80078c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80078ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1d9      	bne.n	800788a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3314      	adds	r3, #20
 80078dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80078e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078e8:	f023 0301 	bic.w	r3, r3, #1
 80078ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3314      	adds	r3, #20
 80078f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80078fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80078fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007902:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800790c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e1      	bne.n	80078d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3314      	adds	r3, #20
 8007918:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007924:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007928:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3314      	adds	r3, #20
 8007932:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007936:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007938:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800793c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007944:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e3      	bne.n	8007912 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	330c      	adds	r3, #12
 800795e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007968:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800796a:	f023 0310 	bic.w	r3, r3, #16
 800796e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	330c      	adds	r3, #12
 8007978:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800797c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800797e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007980:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007982:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007984:	e841 2300 	strex	r3, r2, [r1]
 8007988:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800798a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1e3      	bne.n	8007958 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007994:	4618      	mov	r0, r3
 8007996:	f7fc ff2b 	bl	80047f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2202      	movs	r2, #2
 800799e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f8c1 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079b6:	e09b      	b.n	8007af0 <HAL_UART_IRQHandler+0x518>
 80079b8:	08007c17 	.word	0x08007c17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 808e 	beq.w	8007af4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80079d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 8089 	beq.w	8007af4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	330c      	adds	r3, #12
 80079e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ec:	e853 3f00 	ldrex	r3, [r3]
 80079f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	330c      	adds	r3, #12
 8007a02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007a06:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e3      	bne.n	80079e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3314      	adds	r3, #20
 8007a20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a24:	e853 3f00 	ldrex	r3, [r3]
 8007a28:	623b      	str	r3, [r7, #32]
   return(result);
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	f023 0301 	bic.w	r3, r3, #1
 8007a30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3314      	adds	r3, #20
 8007a3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007a3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e3      	bne.n	8007a1a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	330c      	adds	r3, #12
 8007a66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f023 0310 	bic.w	r3, r3, #16
 8007a76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	330c      	adds	r3, #12
 8007a80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007a84:	61fa      	str	r2, [r7, #28]
 8007a86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	69b9      	ldr	r1, [r7, #24]
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	617b      	str	r3, [r7, #20]
   return(result);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e3      	bne.n	8007a60 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f847 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007aaa:	e023      	b.n	8007af4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d009      	beq.n	8007acc <HAL_UART_IRQHandler+0x4f4>
 8007ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d003      	beq.n	8007acc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f8ba 	bl	8007c3e <UART_Transmit_IT>
    return;
 8007aca:	e014      	b.n	8007af6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00e      	beq.n	8007af6 <HAL_UART_IRQHandler+0x51e>
 8007ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d008      	beq.n	8007af6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f8fa 	bl	8007cde <UART_EndTransmit_IT>
    return;
 8007aea:	e004      	b.n	8007af6 <HAL_UART_IRQHandler+0x51e>
    return;
 8007aec:	bf00      	nop
 8007aee:	e002      	b.n	8007af6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007af0:	bf00      	nop
 8007af2:	e000      	b.n	8007af6 <HAL_UART_IRQHandler+0x51e>
      return;
 8007af4:	bf00      	nop
  }
}
 8007af6:	37e8      	adds	r7, #232	@ 0xe8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b095      	sub	sp, #84	@ 0x54
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	330c      	adds	r3, #12
 8007b5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b62:	e853 3f00 	ldrex	r3, [r3]
 8007b66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	330c      	adds	r3, #12
 8007b76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b78:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b80:	e841 2300 	strex	r3, r2, [r1]
 8007b84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1e5      	bne.n	8007b58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3314      	adds	r3, #20
 8007b92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	f023 0301 	bic.w	r3, r3, #1
 8007ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3314      	adds	r3, #20
 8007baa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bb4:	e841 2300 	strex	r3, r2, [r1]
 8007bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e5      	bne.n	8007b8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d119      	bne.n	8007bfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	f023 0310 	bic.w	r3, r3, #16
 8007bde:	647b      	str	r3, [r7, #68]	@ 0x44
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	330c      	adds	r3, #12
 8007be6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007be8:	61ba      	str	r2, [r7, #24]
 8007bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bec:	6979      	ldr	r1, [r7, #20]
 8007bee:	69ba      	ldr	r2, [r7, #24]
 8007bf0:	e841 2300 	strex	r3, r2, [r1]
 8007bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1e5      	bne.n	8007bc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c0a:	bf00      	nop
 8007c0c:	3754      	adds	r7, #84	@ 0x54
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f7ff ff77 	bl	8007b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c36:	bf00      	nop
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b085      	sub	sp, #20
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b21      	cmp	r3, #33	@ 0x21
 8007c50:	d13e      	bne.n	8007cd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c5a:	d114      	bne.n	8007c86 <UART_Transmit_IT+0x48>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d110      	bne.n	8007c86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	1c9a      	adds	r2, r3, #2
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	621a      	str	r2, [r3, #32]
 8007c84:	e008      	b.n	8007c98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	1c59      	adds	r1, r3, #1
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	6211      	str	r1, [r2, #32]
 8007c90:	781a      	ldrb	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10f      	bne.n	8007ccc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68da      	ldr	r2, [r3, #12]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007cba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68da      	ldr	r2, [r3, #12]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	e000      	b.n	8007cd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007cd0:	2302      	movs	r3, #2
  }
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b082      	sub	sp, #8
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68da      	ldr	r2, [r3, #12]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cf4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff fefc 	bl	8007afc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b08c      	sub	sp, #48	@ 0x30
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b22      	cmp	r3, #34	@ 0x22
 8007d20:	f040 80ae 	bne.w	8007e80 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d2c:	d117      	bne.n	8007d5e <UART_Receive_IT+0x50>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d113      	bne.n	8007d5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d36:	2300      	movs	r3, #0
 8007d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d56:	1c9a      	adds	r2, r3, #2
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d5c:	e026      	b.n	8007dac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007d64:	2300      	movs	r3, #0
 8007d66:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d70:	d007      	beq.n	8007d82 <UART_Receive_IT+0x74>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10a      	bne.n	8007d90 <UART_Receive_IT+0x82>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d106      	bne.n	8007d90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	e008      	b.n	8007da2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	3b01      	subs	r3, #1
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	4619      	mov	r1, r3
 8007dba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d15d      	bne.n	8007e7c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68da      	ldr	r2, [r3, #12]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 0220 	bic.w	r2, r2, #32
 8007dce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007dde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	695a      	ldr	r2, [r3, #20]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 0201 	bic.w	r2, r2, #1
 8007dee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2220      	movs	r2, #32
 8007df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d135      	bne.n	8007e72 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	330c      	adds	r3, #12
 8007e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	e853 3f00 	ldrex	r3, [r3]
 8007e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f023 0310 	bic.w	r3, r3, #16
 8007e22:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	330c      	adds	r3, #12
 8007e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e2c:	623a      	str	r2, [r7, #32]
 8007e2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e30:	69f9      	ldr	r1, [r7, #28]
 8007e32:	6a3a      	ldr	r2, [r7, #32]
 8007e34:	e841 2300 	strex	r3, r2, [r1]
 8007e38:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e5      	bne.n	8007e0c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0310 	and.w	r3, r3, #16
 8007e4a:	2b10      	cmp	r3, #16
 8007e4c:	d10a      	bne.n	8007e64 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	60fb      	str	r3, [r7, #12]
 8007e62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7ff fe64 	bl	8007b38 <HAL_UARTEx_RxEventCallback>
 8007e70:	e002      	b.n	8007e78 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7ff fe4c 	bl	8007b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	e002      	b.n	8007e82 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	e000      	b.n	8007e82 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007e80:	2302      	movs	r3, #2
  }
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3730      	adds	r7, #48	@ 0x30
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e90:	b0c0      	sub	sp, #256	@ 0x100
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea8:	68d9      	ldr	r1, [r3, #12]
 8007eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	ea40 0301 	orr.w	r3, r0, r1
 8007eb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007ee4:	f021 010c 	bic.w	r1, r1, #12
 8007ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ef2:	430b      	orrs	r3, r1
 8007ef4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f06:	6999      	ldr	r1, [r3, #24]
 8007f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	ea40 0301 	orr.w	r3, r0, r1
 8007f12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	4b8f      	ldr	r3, [pc, #572]	@ (8008158 <UART_SetConfig+0x2cc>)
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d005      	beq.n	8007f2c <UART_SetConfig+0xa0>
 8007f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	4b8d      	ldr	r3, [pc, #564]	@ (800815c <UART_SetConfig+0x2d0>)
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d104      	bne.n	8007f36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f2c:	f7fe f816 	bl	8005f5c <HAL_RCC_GetPCLK2Freq>
 8007f30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007f34:	e003      	b.n	8007f3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f36:	f7fd fffd 	bl	8005f34 <HAL_RCC_GetPCLK1Freq>
 8007f3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f48:	f040 810c 	bne.w	8008164 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f50:	2200      	movs	r2, #0
 8007f52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007f5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007f5e:	4622      	mov	r2, r4
 8007f60:	462b      	mov	r3, r5
 8007f62:	1891      	adds	r1, r2, r2
 8007f64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007f66:	415b      	adcs	r3, r3
 8007f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007f6e:	4621      	mov	r1, r4
 8007f70:	eb12 0801 	adds.w	r8, r2, r1
 8007f74:	4629      	mov	r1, r5
 8007f76:	eb43 0901 	adc.w	r9, r3, r1
 8007f7a:	f04f 0200 	mov.w	r2, #0
 8007f7e:	f04f 0300 	mov.w	r3, #0
 8007f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f8e:	4690      	mov	r8, r2
 8007f90:	4699      	mov	r9, r3
 8007f92:	4623      	mov	r3, r4
 8007f94:	eb18 0303 	adds.w	r3, r8, r3
 8007f98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f9c:	462b      	mov	r3, r5
 8007f9e:	eb49 0303 	adc.w	r3, r9, r3
 8007fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007fb2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007fb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007fba:	460b      	mov	r3, r1
 8007fbc:	18db      	adds	r3, r3, r3
 8007fbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	eb42 0303 	adc.w	r3, r2, r3
 8007fc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007fcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007fd0:	f7f8 fe5a 	bl	8000c88 <__aeabi_uldivmod>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	4b61      	ldr	r3, [pc, #388]	@ (8008160 <UART_SetConfig+0x2d4>)
 8007fda:	fba3 2302 	umull	r2, r3, r3, r2
 8007fde:	095b      	lsrs	r3, r3, #5
 8007fe0:	011c      	lsls	r4, r3, #4
 8007fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007ff0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007ff4:	4642      	mov	r2, r8
 8007ff6:	464b      	mov	r3, r9
 8007ff8:	1891      	adds	r1, r2, r2
 8007ffa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007ffc:	415b      	adcs	r3, r3
 8007ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008000:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008004:	4641      	mov	r1, r8
 8008006:	eb12 0a01 	adds.w	sl, r2, r1
 800800a:	4649      	mov	r1, r9
 800800c:	eb43 0b01 	adc.w	fp, r3, r1
 8008010:	f04f 0200 	mov.w	r2, #0
 8008014:	f04f 0300 	mov.w	r3, #0
 8008018:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800801c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008024:	4692      	mov	sl, r2
 8008026:	469b      	mov	fp, r3
 8008028:	4643      	mov	r3, r8
 800802a:	eb1a 0303 	adds.w	r3, sl, r3
 800802e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008032:	464b      	mov	r3, r9
 8008034:	eb4b 0303 	adc.w	r3, fp, r3
 8008038:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800803c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008048:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800804c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008050:	460b      	mov	r3, r1
 8008052:	18db      	adds	r3, r3, r3
 8008054:	643b      	str	r3, [r7, #64]	@ 0x40
 8008056:	4613      	mov	r3, r2
 8008058:	eb42 0303 	adc.w	r3, r2, r3
 800805c:	647b      	str	r3, [r7, #68]	@ 0x44
 800805e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008062:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008066:	f7f8 fe0f 	bl	8000c88 <__aeabi_uldivmod>
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	4611      	mov	r1, r2
 8008070:	4b3b      	ldr	r3, [pc, #236]	@ (8008160 <UART_SetConfig+0x2d4>)
 8008072:	fba3 2301 	umull	r2, r3, r3, r1
 8008076:	095b      	lsrs	r3, r3, #5
 8008078:	2264      	movs	r2, #100	@ 0x64
 800807a:	fb02 f303 	mul.w	r3, r2, r3
 800807e:	1acb      	subs	r3, r1, r3
 8008080:	00db      	lsls	r3, r3, #3
 8008082:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008086:	4b36      	ldr	r3, [pc, #216]	@ (8008160 <UART_SetConfig+0x2d4>)
 8008088:	fba3 2302 	umull	r2, r3, r3, r2
 800808c:	095b      	lsrs	r3, r3, #5
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008094:	441c      	add	r4, r3
 8008096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800809a:	2200      	movs	r2, #0
 800809c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80080a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80080a8:	4642      	mov	r2, r8
 80080aa:	464b      	mov	r3, r9
 80080ac:	1891      	adds	r1, r2, r2
 80080ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80080b0:	415b      	adcs	r3, r3
 80080b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80080b8:	4641      	mov	r1, r8
 80080ba:	1851      	adds	r1, r2, r1
 80080bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80080be:	4649      	mov	r1, r9
 80080c0:	414b      	adcs	r3, r1
 80080c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80080c4:	f04f 0200 	mov.w	r2, #0
 80080c8:	f04f 0300 	mov.w	r3, #0
 80080cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80080d0:	4659      	mov	r1, fp
 80080d2:	00cb      	lsls	r3, r1, #3
 80080d4:	4651      	mov	r1, sl
 80080d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080da:	4651      	mov	r1, sl
 80080dc:	00ca      	lsls	r2, r1, #3
 80080de:	4610      	mov	r0, r2
 80080e0:	4619      	mov	r1, r3
 80080e2:	4603      	mov	r3, r0
 80080e4:	4642      	mov	r2, r8
 80080e6:	189b      	adds	r3, r3, r2
 80080e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080ec:	464b      	mov	r3, r9
 80080ee:	460a      	mov	r2, r1
 80080f0:	eb42 0303 	adc.w	r3, r2, r3
 80080f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008104:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008108:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800810c:	460b      	mov	r3, r1
 800810e:	18db      	adds	r3, r3, r3
 8008110:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008112:	4613      	mov	r3, r2
 8008114:	eb42 0303 	adc.w	r3, r2, r3
 8008118:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800811a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800811e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008122:	f7f8 fdb1 	bl	8000c88 <__aeabi_uldivmod>
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	4b0d      	ldr	r3, [pc, #52]	@ (8008160 <UART_SetConfig+0x2d4>)
 800812c:	fba3 1302 	umull	r1, r3, r3, r2
 8008130:	095b      	lsrs	r3, r3, #5
 8008132:	2164      	movs	r1, #100	@ 0x64
 8008134:	fb01 f303 	mul.w	r3, r1, r3
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	00db      	lsls	r3, r3, #3
 800813c:	3332      	adds	r3, #50	@ 0x32
 800813e:	4a08      	ldr	r2, [pc, #32]	@ (8008160 <UART_SetConfig+0x2d4>)
 8008140:	fba2 2303 	umull	r2, r3, r2, r3
 8008144:	095b      	lsrs	r3, r3, #5
 8008146:	f003 0207 	and.w	r2, r3, #7
 800814a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4422      	add	r2, r4
 8008152:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008154:	e106      	b.n	8008364 <UART_SetConfig+0x4d8>
 8008156:	bf00      	nop
 8008158:	40011000 	.word	0x40011000
 800815c:	40011400 	.word	0x40011400
 8008160:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008168:	2200      	movs	r2, #0
 800816a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800816e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008172:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008176:	4642      	mov	r2, r8
 8008178:	464b      	mov	r3, r9
 800817a:	1891      	adds	r1, r2, r2
 800817c:	6239      	str	r1, [r7, #32]
 800817e:	415b      	adcs	r3, r3
 8008180:	627b      	str	r3, [r7, #36]	@ 0x24
 8008182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008186:	4641      	mov	r1, r8
 8008188:	1854      	adds	r4, r2, r1
 800818a:	4649      	mov	r1, r9
 800818c:	eb43 0501 	adc.w	r5, r3, r1
 8008190:	f04f 0200 	mov.w	r2, #0
 8008194:	f04f 0300 	mov.w	r3, #0
 8008198:	00eb      	lsls	r3, r5, #3
 800819a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800819e:	00e2      	lsls	r2, r4, #3
 80081a0:	4614      	mov	r4, r2
 80081a2:	461d      	mov	r5, r3
 80081a4:	4643      	mov	r3, r8
 80081a6:	18e3      	adds	r3, r4, r3
 80081a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081ac:	464b      	mov	r3, r9
 80081ae:	eb45 0303 	adc.w	r3, r5, r3
 80081b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80081c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80081c6:	f04f 0200 	mov.w	r2, #0
 80081ca:	f04f 0300 	mov.w	r3, #0
 80081ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80081d2:	4629      	mov	r1, r5
 80081d4:	008b      	lsls	r3, r1, #2
 80081d6:	4621      	mov	r1, r4
 80081d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081dc:	4621      	mov	r1, r4
 80081de:	008a      	lsls	r2, r1, #2
 80081e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80081e4:	f7f8 fd50 	bl	8000c88 <__aeabi_uldivmod>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	4b60      	ldr	r3, [pc, #384]	@ (8008370 <UART_SetConfig+0x4e4>)
 80081ee:	fba3 2302 	umull	r2, r3, r3, r2
 80081f2:	095b      	lsrs	r3, r3, #5
 80081f4:	011c      	lsls	r4, r3, #4
 80081f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008200:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008204:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008208:	4642      	mov	r2, r8
 800820a:	464b      	mov	r3, r9
 800820c:	1891      	adds	r1, r2, r2
 800820e:	61b9      	str	r1, [r7, #24]
 8008210:	415b      	adcs	r3, r3
 8008212:	61fb      	str	r3, [r7, #28]
 8008214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008218:	4641      	mov	r1, r8
 800821a:	1851      	adds	r1, r2, r1
 800821c:	6139      	str	r1, [r7, #16]
 800821e:	4649      	mov	r1, r9
 8008220:	414b      	adcs	r3, r1
 8008222:	617b      	str	r3, [r7, #20]
 8008224:	f04f 0200 	mov.w	r2, #0
 8008228:	f04f 0300 	mov.w	r3, #0
 800822c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008230:	4659      	mov	r1, fp
 8008232:	00cb      	lsls	r3, r1, #3
 8008234:	4651      	mov	r1, sl
 8008236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800823a:	4651      	mov	r1, sl
 800823c:	00ca      	lsls	r2, r1, #3
 800823e:	4610      	mov	r0, r2
 8008240:	4619      	mov	r1, r3
 8008242:	4603      	mov	r3, r0
 8008244:	4642      	mov	r2, r8
 8008246:	189b      	adds	r3, r3, r2
 8008248:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800824c:	464b      	mov	r3, r9
 800824e:	460a      	mov	r2, r1
 8008250:	eb42 0303 	adc.w	r3, r2, r3
 8008254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008262:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008264:	f04f 0200 	mov.w	r2, #0
 8008268:	f04f 0300 	mov.w	r3, #0
 800826c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008270:	4649      	mov	r1, r9
 8008272:	008b      	lsls	r3, r1, #2
 8008274:	4641      	mov	r1, r8
 8008276:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800827a:	4641      	mov	r1, r8
 800827c:	008a      	lsls	r2, r1, #2
 800827e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008282:	f7f8 fd01 	bl	8000c88 <__aeabi_uldivmod>
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	4611      	mov	r1, r2
 800828c:	4b38      	ldr	r3, [pc, #224]	@ (8008370 <UART_SetConfig+0x4e4>)
 800828e:	fba3 2301 	umull	r2, r3, r3, r1
 8008292:	095b      	lsrs	r3, r3, #5
 8008294:	2264      	movs	r2, #100	@ 0x64
 8008296:	fb02 f303 	mul.w	r3, r2, r3
 800829a:	1acb      	subs	r3, r1, r3
 800829c:	011b      	lsls	r3, r3, #4
 800829e:	3332      	adds	r3, #50	@ 0x32
 80082a0:	4a33      	ldr	r2, [pc, #204]	@ (8008370 <UART_SetConfig+0x4e4>)
 80082a2:	fba2 2303 	umull	r2, r3, r2, r3
 80082a6:	095b      	lsrs	r3, r3, #5
 80082a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80082ac:	441c      	add	r4, r3
 80082ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082b2:	2200      	movs	r2, #0
 80082b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80082b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80082b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80082bc:	4642      	mov	r2, r8
 80082be:	464b      	mov	r3, r9
 80082c0:	1891      	adds	r1, r2, r2
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	415b      	adcs	r3, r3
 80082c6:	60fb      	str	r3, [r7, #12]
 80082c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082cc:	4641      	mov	r1, r8
 80082ce:	1851      	adds	r1, r2, r1
 80082d0:	6039      	str	r1, [r7, #0]
 80082d2:	4649      	mov	r1, r9
 80082d4:	414b      	adcs	r3, r1
 80082d6:	607b      	str	r3, [r7, #4]
 80082d8:	f04f 0200 	mov.w	r2, #0
 80082dc:	f04f 0300 	mov.w	r3, #0
 80082e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80082e4:	4659      	mov	r1, fp
 80082e6:	00cb      	lsls	r3, r1, #3
 80082e8:	4651      	mov	r1, sl
 80082ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082ee:	4651      	mov	r1, sl
 80082f0:	00ca      	lsls	r2, r1, #3
 80082f2:	4610      	mov	r0, r2
 80082f4:	4619      	mov	r1, r3
 80082f6:	4603      	mov	r3, r0
 80082f8:	4642      	mov	r2, r8
 80082fa:	189b      	adds	r3, r3, r2
 80082fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082fe:	464b      	mov	r3, r9
 8008300:	460a      	mov	r2, r1
 8008302:	eb42 0303 	adc.w	r3, r2, r3
 8008306:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	663b      	str	r3, [r7, #96]	@ 0x60
 8008312:	667a      	str	r2, [r7, #100]	@ 0x64
 8008314:	f04f 0200 	mov.w	r2, #0
 8008318:	f04f 0300 	mov.w	r3, #0
 800831c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008320:	4649      	mov	r1, r9
 8008322:	008b      	lsls	r3, r1, #2
 8008324:	4641      	mov	r1, r8
 8008326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800832a:	4641      	mov	r1, r8
 800832c:	008a      	lsls	r2, r1, #2
 800832e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008332:	f7f8 fca9 	bl	8000c88 <__aeabi_uldivmod>
 8008336:	4602      	mov	r2, r0
 8008338:	460b      	mov	r3, r1
 800833a:	4b0d      	ldr	r3, [pc, #52]	@ (8008370 <UART_SetConfig+0x4e4>)
 800833c:	fba3 1302 	umull	r1, r3, r3, r2
 8008340:	095b      	lsrs	r3, r3, #5
 8008342:	2164      	movs	r1, #100	@ 0x64
 8008344:	fb01 f303 	mul.w	r3, r1, r3
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	011b      	lsls	r3, r3, #4
 800834c:	3332      	adds	r3, #50	@ 0x32
 800834e:	4a08      	ldr	r2, [pc, #32]	@ (8008370 <UART_SetConfig+0x4e4>)
 8008350:	fba2 2303 	umull	r2, r3, r2, r3
 8008354:	095b      	lsrs	r3, r3, #5
 8008356:	f003 020f 	and.w	r2, r3, #15
 800835a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4422      	add	r2, r4
 8008362:	609a      	str	r2, [r3, #8]
}
 8008364:	bf00      	nop
 8008366:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800836a:	46bd      	mov	sp, r7
 800836c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008370:	51eb851f 	.word	0x51eb851f

08008374 <__cvt>:
 8008374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008378:	ec57 6b10 	vmov	r6, r7, d0
 800837c:	2f00      	cmp	r7, #0
 800837e:	460c      	mov	r4, r1
 8008380:	4619      	mov	r1, r3
 8008382:	463b      	mov	r3, r7
 8008384:	bfbb      	ittet	lt
 8008386:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800838a:	461f      	movlt	r7, r3
 800838c:	2300      	movge	r3, #0
 800838e:	232d      	movlt	r3, #45	@ 0x2d
 8008390:	700b      	strb	r3, [r1, #0]
 8008392:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008394:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008398:	4691      	mov	r9, r2
 800839a:	f023 0820 	bic.w	r8, r3, #32
 800839e:	bfbc      	itt	lt
 80083a0:	4632      	movlt	r2, r6
 80083a2:	4616      	movlt	r6, r2
 80083a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80083a8:	d005      	beq.n	80083b6 <__cvt+0x42>
 80083aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80083ae:	d100      	bne.n	80083b2 <__cvt+0x3e>
 80083b0:	3401      	adds	r4, #1
 80083b2:	2102      	movs	r1, #2
 80083b4:	e000      	b.n	80083b8 <__cvt+0x44>
 80083b6:	2103      	movs	r1, #3
 80083b8:	ab03      	add	r3, sp, #12
 80083ba:	9301      	str	r3, [sp, #4]
 80083bc:	ab02      	add	r3, sp, #8
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	ec47 6b10 	vmov	d0, r6, r7
 80083c4:	4653      	mov	r3, sl
 80083c6:	4622      	mov	r2, r4
 80083c8:	f000 fe46 	bl	8009058 <_dtoa_r>
 80083cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80083d0:	4605      	mov	r5, r0
 80083d2:	d119      	bne.n	8008408 <__cvt+0x94>
 80083d4:	f019 0f01 	tst.w	r9, #1
 80083d8:	d00e      	beq.n	80083f8 <__cvt+0x84>
 80083da:	eb00 0904 	add.w	r9, r0, r4
 80083de:	2200      	movs	r2, #0
 80083e0:	2300      	movs	r3, #0
 80083e2:	4630      	mov	r0, r6
 80083e4:	4639      	mov	r1, r7
 80083e6:	f7f8 fb8f 	bl	8000b08 <__aeabi_dcmpeq>
 80083ea:	b108      	cbz	r0, 80083f0 <__cvt+0x7c>
 80083ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80083f0:	2230      	movs	r2, #48	@ 0x30
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	454b      	cmp	r3, r9
 80083f6:	d31e      	bcc.n	8008436 <__cvt+0xc2>
 80083f8:	9b03      	ldr	r3, [sp, #12]
 80083fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083fc:	1b5b      	subs	r3, r3, r5
 80083fe:	4628      	mov	r0, r5
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	b004      	add	sp, #16
 8008404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008408:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800840c:	eb00 0904 	add.w	r9, r0, r4
 8008410:	d1e5      	bne.n	80083de <__cvt+0x6a>
 8008412:	7803      	ldrb	r3, [r0, #0]
 8008414:	2b30      	cmp	r3, #48	@ 0x30
 8008416:	d10a      	bne.n	800842e <__cvt+0xba>
 8008418:	2200      	movs	r2, #0
 800841a:	2300      	movs	r3, #0
 800841c:	4630      	mov	r0, r6
 800841e:	4639      	mov	r1, r7
 8008420:	f7f8 fb72 	bl	8000b08 <__aeabi_dcmpeq>
 8008424:	b918      	cbnz	r0, 800842e <__cvt+0xba>
 8008426:	f1c4 0401 	rsb	r4, r4, #1
 800842a:	f8ca 4000 	str.w	r4, [sl]
 800842e:	f8da 3000 	ldr.w	r3, [sl]
 8008432:	4499      	add	r9, r3
 8008434:	e7d3      	b.n	80083de <__cvt+0x6a>
 8008436:	1c59      	adds	r1, r3, #1
 8008438:	9103      	str	r1, [sp, #12]
 800843a:	701a      	strb	r2, [r3, #0]
 800843c:	e7d9      	b.n	80083f2 <__cvt+0x7e>

0800843e <__exponent>:
 800843e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008440:	2900      	cmp	r1, #0
 8008442:	bfba      	itte	lt
 8008444:	4249      	neglt	r1, r1
 8008446:	232d      	movlt	r3, #45	@ 0x2d
 8008448:	232b      	movge	r3, #43	@ 0x2b
 800844a:	2909      	cmp	r1, #9
 800844c:	7002      	strb	r2, [r0, #0]
 800844e:	7043      	strb	r3, [r0, #1]
 8008450:	dd29      	ble.n	80084a6 <__exponent+0x68>
 8008452:	f10d 0307 	add.w	r3, sp, #7
 8008456:	461d      	mov	r5, r3
 8008458:	270a      	movs	r7, #10
 800845a:	461a      	mov	r2, r3
 800845c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008460:	fb07 1416 	mls	r4, r7, r6, r1
 8008464:	3430      	adds	r4, #48	@ 0x30
 8008466:	f802 4c01 	strb.w	r4, [r2, #-1]
 800846a:	460c      	mov	r4, r1
 800846c:	2c63      	cmp	r4, #99	@ 0x63
 800846e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008472:	4631      	mov	r1, r6
 8008474:	dcf1      	bgt.n	800845a <__exponent+0x1c>
 8008476:	3130      	adds	r1, #48	@ 0x30
 8008478:	1e94      	subs	r4, r2, #2
 800847a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800847e:	1c41      	adds	r1, r0, #1
 8008480:	4623      	mov	r3, r4
 8008482:	42ab      	cmp	r3, r5
 8008484:	d30a      	bcc.n	800849c <__exponent+0x5e>
 8008486:	f10d 0309 	add.w	r3, sp, #9
 800848a:	1a9b      	subs	r3, r3, r2
 800848c:	42ac      	cmp	r4, r5
 800848e:	bf88      	it	hi
 8008490:	2300      	movhi	r3, #0
 8008492:	3302      	adds	r3, #2
 8008494:	4403      	add	r3, r0
 8008496:	1a18      	subs	r0, r3, r0
 8008498:	b003      	add	sp, #12
 800849a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800849c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80084a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80084a4:	e7ed      	b.n	8008482 <__exponent+0x44>
 80084a6:	2330      	movs	r3, #48	@ 0x30
 80084a8:	3130      	adds	r1, #48	@ 0x30
 80084aa:	7083      	strb	r3, [r0, #2]
 80084ac:	70c1      	strb	r1, [r0, #3]
 80084ae:	1d03      	adds	r3, r0, #4
 80084b0:	e7f1      	b.n	8008496 <__exponent+0x58>
	...

080084b4 <_printf_float>:
 80084b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b8:	b08d      	sub	sp, #52	@ 0x34
 80084ba:	460c      	mov	r4, r1
 80084bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80084c0:	4616      	mov	r6, r2
 80084c2:	461f      	mov	r7, r3
 80084c4:	4605      	mov	r5, r0
 80084c6:	f000 fcb9 	bl	8008e3c <_localeconv_r>
 80084ca:	6803      	ldr	r3, [r0, #0]
 80084cc:	9304      	str	r3, [sp, #16]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7f7 feee 	bl	80002b0 <strlen>
 80084d4:	2300      	movs	r3, #0
 80084d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80084d8:	f8d8 3000 	ldr.w	r3, [r8]
 80084dc:	9005      	str	r0, [sp, #20]
 80084de:	3307      	adds	r3, #7
 80084e0:	f023 0307 	bic.w	r3, r3, #7
 80084e4:	f103 0208 	add.w	r2, r3, #8
 80084e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80084ec:	f8d4 b000 	ldr.w	fp, [r4]
 80084f0:	f8c8 2000 	str.w	r2, [r8]
 80084f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80084fc:	9307      	str	r3, [sp, #28]
 80084fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8008502:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008506:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800850a:	4b9c      	ldr	r3, [pc, #624]	@ (800877c <_printf_float+0x2c8>)
 800850c:	f04f 32ff 	mov.w	r2, #4294967295
 8008510:	f7f8 fb2c 	bl	8000b6c <__aeabi_dcmpun>
 8008514:	bb70      	cbnz	r0, 8008574 <_printf_float+0xc0>
 8008516:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800851a:	4b98      	ldr	r3, [pc, #608]	@ (800877c <_printf_float+0x2c8>)
 800851c:	f04f 32ff 	mov.w	r2, #4294967295
 8008520:	f7f8 fb06 	bl	8000b30 <__aeabi_dcmple>
 8008524:	bb30      	cbnz	r0, 8008574 <_printf_float+0xc0>
 8008526:	2200      	movs	r2, #0
 8008528:	2300      	movs	r3, #0
 800852a:	4640      	mov	r0, r8
 800852c:	4649      	mov	r1, r9
 800852e:	f7f8 faf5 	bl	8000b1c <__aeabi_dcmplt>
 8008532:	b110      	cbz	r0, 800853a <_printf_float+0x86>
 8008534:	232d      	movs	r3, #45	@ 0x2d
 8008536:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800853a:	4a91      	ldr	r2, [pc, #580]	@ (8008780 <_printf_float+0x2cc>)
 800853c:	4b91      	ldr	r3, [pc, #580]	@ (8008784 <_printf_float+0x2d0>)
 800853e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008542:	bf8c      	ite	hi
 8008544:	4690      	movhi	r8, r2
 8008546:	4698      	movls	r8, r3
 8008548:	2303      	movs	r3, #3
 800854a:	6123      	str	r3, [r4, #16]
 800854c:	f02b 0304 	bic.w	r3, fp, #4
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	f04f 0900 	mov.w	r9, #0
 8008556:	9700      	str	r7, [sp, #0]
 8008558:	4633      	mov	r3, r6
 800855a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800855c:	4621      	mov	r1, r4
 800855e:	4628      	mov	r0, r5
 8008560:	f000 f9d2 	bl	8008908 <_printf_common>
 8008564:	3001      	adds	r0, #1
 8008566:	f040 808d 	bne.w	8008684 <_printf_float+0x1d0>
 800856a:	f04f 30ff 	mov.w	r0, #4294967295
 800856e:	b00d      	add	sp, #52	@ 0x34
 8008570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008574:	4642      	mov	r2, r8
 8008576:	464b      	mov	r3, r9
 8008578:	4640      	mov	r0, r8
 800857a:	4649      	mov	r1, r9
 800857c:	f7f8 faf6 	bl	8000b6c <__aeabi_dcmpun>
 8008580:	b140      	cbz	r0, 8008594 <_printf_float+0xe0>
 8008582:	464b      	mov	r3, r9
 8008584:	2b00      	cmp	r3, #0
 8008586:	bfbc      	itt	lt
 8008588:	232d      	movlt	r3, #45	@ 0x2d
 800858a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800858e:	4a7e      	ldr	r2, [pc, #504]	@ (8008788 <_printf_float+0x2d4>)
 8008590:	4b7e      	ldr	r3, [pc, #504]	@ (800878c <_printf_float+0x2d8>)
 8008592:	e7d4      	b.n	800853e <_printf_float+0x8a>
 8008594:	6863      	ldr	r3, [r4, #4]
 8008596:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800859a:	9206      	str	r2, [sp, #24]
 800859c:	1c5a      	adds	r2, r3, #1
 800859e:	d13b      	bne.n	8008618 <_printf_float+0x164>
 80085a0:	2306      	movs	r3, #6
 80085a2:	6063      	str	r3, [r4, #4]
 80085a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80085a8:	2300      	movs	r3, #0
 80085aa:	6022      	str	r2, [r4, #0]
 80085ac:	9303      	str	r3, [sp, #12]
 80085ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80085b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80085b4:	ab09      	add	r3, sp, #36	@ 0x24
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	6861      	ldr	r1, [r4, #4]
 80085ba:	ec49 8b10 	vmov	d0, r8, r9
 80085be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80085c2:	4628      	mov	r0, r5
 80085c4:	f7ff fed6 	bl	8008374 <__cvt>
 80085c8:	9b06      	ldr	r3, [sp, #24]
 80085ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085cc:	2b47      	cmp	r3, #71	@ 0x47
 80085ce:	4680      	mov	r8, r0
 80085d0:	d129      	bne.n	8008626 <_printf_float+0x172>
 80085d2:	1cc8      	adds	r0, r1, #3
 80085d4:	db02      	blt.n	80085dc <_printf_float+0x128>
 80085d6:	6863      	ldr	r3, [r4, #4]
 80085d8:	4299      	cmp	r1, r3
 80085da:	dd41      	ble.n	8008660 <_printf_float+0x1ac>
 80085dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80085e0:	fa5f fa8a 	uxtb.w	sl, sl
 80085e4:	3901      	subs	r1, #1
 80085e6:	4652      	mov	r2, sl
 80085e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80085ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80085ee:	f7ff ff26 	bl	800843e <__exponent>
 80085f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085f4:	1813      	adds	r3, r2, r0
 80085f6:	2a01      	cmp	r2, #1
 80085f8:	4681      	mov	r9, r0
 80085fa:	6123      	str	r3, [r4, #16]
 80085fc:	dc02      	bgt.n	8008604 <_printf_float+0x150>
 80085fe:	6822      	ldr	r2, [r4, #0]
 8008600:	07d2      	lsls	r2, r2, #31
 8008602:	d501      	bpl.n	8008608 <_printf_float+0x154>
 8008604:	3301      	adds	r3, #1
 8008606:	6123      	str	r3, [r4, #16]
 8008608:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800860c:	2b00      	cmp	r3, #0
 800860e:	d0a2      	beq.n	8008556 <_printf_float+0xa2>
 8008610:	232d      	movs	r3, #45	@ 0x2d
 8008612:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008616:	e79e      	b.n	8008556 <_printf_float+0xa2>
 8008618:	9a06      	ldr	r2, [sp, #24]
 800861a:	2a47      	cmp	r2, #71	@ 0x47
 800861c:	d1c2      	bne.n	80085a4 <_printf_float+0xf0>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1c0      	bne.n	80085a4 <_printf_float+0xf0>
 8008622:	2301      	movs	r3, #1
 8008624:	e7bd      	b.n	80085a2 <_printf_float+0xee>
 8008626:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800862a:	d9db      	bls.n	80085e4 <_printf_float+0x130>
 800862c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008630:	d118      	bne.n	8008664 <_printf_float+0x1b0>
 8008632:	2900      	cmp	r1, #0
 8008634:	6863      	ldr	r3, [r4, #4]
 8008636:	dd0b      	ble.n	8008650 <_printf_float+0x19c>
 8008638:	6121      	str	r1, [r4, #16]
 800863a:	b913      	cbnz	r3, 8008642 <_printf_float+0x18e>
 800863c:	6822      	ldr	r2, [r4, #0]
 800863e:	07d0      	lsls	r0, r2, #31
 8008640:	d502      	bpl.n	8008648 <_printf_float+0x194>
 8008642:	3301      	adds	r3, #1
 8008644:	440b      	add	r3, r1
 8008646:	6123      	str	r3, [r4, #16]
 8008648:	65a1      	str	r1, [r4, #88]	@ 0x58
 800864a:	f04f 0900 	mov.w	r9, #0
 800864e:	e7db      	b.n	8008608 <_printf_float+0x154>
 8008650:	b913      	cbnz	r3, 8008658 <_printf_float+0x1a4>
 8008652:	6822      	ldr	r2, [r4, #0]
 8008654:	07d2      	lsls	r2, r2, #31
 8008656:	d501      	bpl.n	800865c <_printf_float+0x1a8>
 8008658:	3302      	adds	r3, #2
 800865a:	e7f4      	b.n	8008646 <_printf_float+0x192>
 800865c:	2301      	movs	r3, #1
 800865e:	e7f2      	b.n	8008646 <_printf_float+0x192>
 8008660:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008666:	4299      	cmp	r1, r3
 8008668:	db05      	blt.n	8008676 <_printf_float+0x1c2>
 800866a:	6823      	ldr	r3, [r4, #0]
 800866c:	6121      	str	r1, [r4, #16]
 800866e:	07d8      	lsls	r0, r3, #31
 8008670:	d5ea      	bpl.n	8008648 <_printf_float+0x194>
 8008672:	1c4b      	adds	r3, r1, #1
 8008674:	e7e7      	b.n	8008646 <_printf_float+0x192>
 8008676:	2900      	cmp	r1, #0
 8008678:	bfd4      	ite	le
 800867a:	f1c1 0202 	rsble	r2, r1, #2
 800867e:	2201      	movgt	r2, #1
 8008680:	4413      	add	r3, r2
 8008682:	e7e0      	b.n	8008646 <_printf_float+0x192>
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	055a      	lsls	r2, r3, #21
 8008688:	d407      	bmi.n	800869a <_printf_float+0x1e6>
 800868a:	6923      	ldr	r3, [r4, #16]
 800868c:	4642      	mov	r2, r8
 800868e:	4631      	mov	r1, r6
 8008690:	4628      	mov	r0, r5
 8008692:	47b8      	blx	r7
 8008694:	3001      	adds	r0, #1
 8008696:	d12b      	bne.n	80086f0 <_printf_float+0x23c>
 8008698:	e767      	b.n	800856a <_printf_float+0xb6>
 800869a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800869e:	f240 80dd 	bls.w	800885c <_printf_float+0x3a8>
 80086a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086a6:	2200      	movs	r2, #0
 80086a8:	2300      	movs	r3, #0
 80086aa:	f7f8 fa2d 	bl	8000b08 <__aeabi_dcmpeq>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d033      	beq.n	800871a <_printf_float+0x266>
 80086b2:	4a37      	ldr	r2, [pc, #220]	@ (8008790 <_printf_float+0x2dc>)
 80086b4:	2301      	movs	r3, #1
 80086b6:	4631      	mov	r1, r6
 80086b8:	4628      	mov	r0, r5
 80086ba:	47b8      	blx	r7
 80086bc:	3001      	adds	r0, #1
 80086be:	f43f af54 	beq.w	800856a <_printf_float+0xb6>
 80086c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80086c6:	4543      	cmp	r3, r8
 80086c8:	db02      	blt.n	80086d0 <_printf_float+0x21c>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	07d8      	lsls	r0, r3, #31
 80086ce:	d50f      	bpl.n	80086f0 <_printf_float+0x23c>
 80086d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086d4:	4631      	mov	r1, r6
 80086d6:	4628      	mov	r0, r5
 80086d8:	47b8      	blx	r7
 80086da:	3001      	adds	r0, #1
 80086dc:	f43f af45 	beq.w	800856a <_printf_float+0xb6>
 80086e0:	f04f 0900 	mov.w	r9, #0
 80086e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80086e8:	f104 0a1a 	add.w	sl, r4, #26
 80086ec:	45c8      	cmp	r8, r9
 80086ee:	dc09      	bgt.n	8008704 <_printf_float+0x250>
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	079b      	lsls	r3, r3, #30
 80086f4:	f100 8103 	bmi.w	80088fe <_printf_float+0x44a>
 80086f8:	68e0      	ldr	r0, [r4, #12]
 80086fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086fc:	4298      	cmp	r0, r3
 80086fe:	bfb8      	it	lt
 8008700:	4618      	movlt	r0, r3
 8008702:	e734      	b.n	800856e <_printf_float+0xba>
 8008704:	2301      	movs	r3, #1
 8008706:	4652      	mov	r2, sl
 8008708:	4631      	mov	r1, r6
 800870a:	4628      	mov	r0, r5
 800870c:	47b8      	blx	r7
 800870e:	3001      	adds	r0, #1
 8008710:	f43f af2b 	beq.w	800856a <_printf_float+0xb6>
 8008714:	f109 0901 	add.w	r9, r9, #1
 8008718:	e7e8      	b.n	80086ec <_printf_float+0x238>
 800871a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800871c:	2b00      	cmp	r3, #0
 800871e:	dc39      	bgt.n	8008794 <_printf_float+0x2e0>
 8008720:	4a1b      	ldr	r2, [pc, #108]	@ (8008790 <_printf_float+0x2dc>)
 8008722:	2301      	movs	r3, #1
 8008724:	4631      	mov	r1, r6
 8008726:	4628      	mov	r0, r5
 8008728:	47b8      	blx	r7
 800872a:	3001      	adds	r0, #1
 800872c:	f43f af1d 	beq.w	800856a <_printf_float+0xb6>
 8008730:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008734:	ea59 0303 	orrs.w	r3, r9, r3
 8008738:	d102      	bne.n	8008740 <_printf_float+0x28c>
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	07d9      	lsls	r1, r3, #31
 800873e:	d5d7      	bpl.n	80086f0 <_printf_float+0x23c>
 8008740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008744:	4631      	mov	r1, r6
 8008746:	4628      	mov	r0, r5
 8008748:	47b8      	blx	r7
 800874a:	3001      	adds	r0, #1
 800874c:	f43f af0d 	beq.w	800856a <_printf_float+0xb6>
 8008750:	f04f 0a00 	mov.w	sl, #0
 8008754:	f104 0b1a 	add.w	fp, r4, #26
 8008758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800875a:	425b      	negs	r3, r3
 800875c:	4553      	cmp	r3, sl
 800875e:	dc01      	bgt.n	8008764 <_printf_float+0x2b0>
 8008760:	464b      	mov	r3, r9
 8008762:	e793      	b.n	800868c <_printf_float+0x1d8>
 8008764:	2301      	movs	r3, #1
 8008766:	465a      	mov	r2, fp
 8008768:	4631      	mov	r1, r6
 800876a:	4628      	mov	r0, r5
 800876c:	47b8      	blx	r7
 800876e:	3001      	adds	r0, #1
 8008770:	f43f aefb 	beq.w	800856a <_printf_float+0xb6>
 8008774:	f10a 0a01 	add.w	sl, sl, #1
 8008778:	e7ee      	b.n	8008758 <_printf_float+0x2a4>
 800877a:	bf00      	nop
 800877c:	7fefffff 	.word	0x7fefffff
 8008780:	0800b198 	.word	0x0800b198
 8008784:	0800b194 	.word	0x0800b194
 8008788:	0800b1a0 	.word	0x0800b1a0
 800878c:	0800b19c 	.word	0x0800b19c
 8008790:	0800b1a4 	.word	0x0800b1a4
 8008794:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008796:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800879a:	4553      	cmp	r3, sl
 800879c:	bfa8      	it	ge
 800879e:	4653      	movge	r3, sl
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	4699      	mov	r9, r3
 80087a4:	dc36      	bgt.n	8008814 <_printf_float+0x360>
 80087a6:	f04f 0b00 	mov.w	fp, #0
 80087aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087ae:	f104 021a 	add.w	r2, r4, #26
 80087b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80087b4:	9306      	str	r3, [sp, #24]
 80087b6:	eba3 0309 	sub.w	r3, r3, r9
 80087ba:	455b      	cmp	r3, fp
 80087bc:	dc31      	bgt.n	8008822 <_printf_float+0x36e>
 80087be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087c0:	459a      	cmp	sl, r3
 80087c2:	dc3a      	bgt.n	800883a <_printf_float+0x386>
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	07da      	lsls	r2, r3, #31
 80087c8:	d437      	bmi.n	800883a <_printf_float+0x386>
 80087ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087cc:	ebaa 0903 	sub.w	r9, sl, r3
 80087d0:	9b06      	ldr	r3, [sp, #24]
 80087d2:	ebaa 0303 	sub.w	r3, sl, r3
 80087d6:	4599      	cmp	r9, r3
 80087d8:	bfa8      	it	ge
 80087da:	4699      	movge	r9, r3
 80087dc:	f1b9 0f00 	cmp.w	r9, #0
 80087e0:	dc33      	bgt.n	800884a <_printf_float+0x396>
 80087e2:	f04f 0800 	mov.w	r8, #0
 80087e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087ea:	f104 0b1a 	add.w	fp, r4, #26
 80087ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087f0:	ebaa 0303 	sub.w	r3, sl, r3
 80087f4:	eba3 0309 	sub.w	r3, r3, r9
 80087f8:	4543      	cmp	r3, r8
 80087fa:	f77f af79 	ble.w	80086f0 <_printf_float+0x23c>
 80087fe:	2301      	movs	r3, #1
 8008800:	465a      	mov	r2, fp
 8008802:	4631      	mov	r1, r6
 8008804:	4628      	mov	r0, r5
 8008806:	47b8      	blx	r7
 8008808:	3001      	adds	r0, #1
 800880a:	f43f aeae 	beq.w	800856a <_printf_float+0xb6>
 800880e:	f108 0801 	add.w	r8, r8, #1
 8008812:	e7ec      	b.n	80087ee <_printf_float+0x33a>
 8008814:	4642      	mov	r2, r8
 8008816:	4631      	mov	r1, r6
 8008818:	4628      	mov	r0, r5
 800881a:	47b8      	blx	r7
 800881c:	3001      	adds	r0, #1
 800881e:	d1c2      	bne.n	80087a6 <_printf_float+0x2f2>
 8008820:	e6a3      	b.n	800856a <_printf_float+0xb6>
 8008822:	2301      	movs	r3, #1
 8008824:	4631      	mov	r1, r6
 8008826:	4628      	mov	r0, r5
 8008828:	9206      	str	r2, [sp, #24]
 800882a:	47b8      	blx	r7
 800882c:	3001      	adds	r0, #1
 800882e:	f43f ae9c 	beq.w	800856a <_printf_float+0xb6>
 8008832:	9a06      	ldr	r2, [sp, #24]
 8008834:	f10b 0b01 	add.w	fp, fp, #1
 8008838:	e7bb      	b.n	80087b2 <_printf_float+0x2fe>
 800883a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800883e:	4631      	mov	r1, r6
 8008840:	4628      	mov	r0, r5
 8008842:	47b8      	blx	r7
 8008844:	3001      	adds	r0, #1
 8008846:	d1c0      	bne.n	80087ca <_printf_float+0x316>
 8008848:	e68f      	b.n	800856a <_printf_float+0xb6>
 800884a:	9a06      	ldr	r2, [sp, #24]
 800884c:	464b      	mov	r3, r9
 800884e:	4442      	add	r2, r8
 8008850:	4631      	mov	r1, r6
 8008852:	4628      	mov	r0, r5
 8008854:	47b8      	blx	r7
 8008856:	3001      	adds	r0, #1
 8008858:	d1c3      	bne.n	80087e2 <_printf_float+0x32e>
 800885a:	e686      	b.n	800856a <_printf_float+0xb6>
 800885c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008860:	f1ba 0f01 	cmp.w	sl, #1
 8008864:	dc01      	bgt.n	800886a <_printf_float+0x3b6>
 8008866:	07db      	lsls	r3, r3, #31
 8008868:	d536      	bpl.n	80088d8 <_printf_float+0x424>
 800886a:	2301      	movs	r3, #1
 800886c:	4642      	mov	r2, r8
 800886e:	4631      	mov	r1, r6
 8008870:	4628      	mov	r0, r5
 8008872:	47b8      	blx	r7
 8008874:	3001      	adds	r0, #1
 8008876:	f43f ae78 	beq.w	800856a <_printf_float+0xb6>
 800887a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800887e:	4631      	mov	r1, r6
 8008880:	4628      	mov	r0, r5
 8008882:	47b8      	blx	r7
 8008884:	3001      	adds	r0, #1
 8008886:	f43f ae70 	beq.w	800856a <_printf_float+0xb6>
 800888a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800888e:	2200      	movs	r2, #0
 8008890:	2300      	movs	r3, #0
 8008892:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008896:	f7f8 f937 	bl	8000b08 <__aeabi_dcmpeq>
 800889a:	b9c0      	cbnz	r0, 80088ce <_printf_float+0x41a>
 800889c:	4653      	mov	r3, sl
 800889e:	f108 0201 	add.w	r2, r8, #1
 80088a2:	4631      	mov	r1, r6
 80088a4:	4628      	mov	r0, r5
 80088a6:	47b8      	blx	r7
 80088a8:	3001      	adds	r0, #1
 80088aa:	d10c      	bne.n	80088c6 <_printf_float+0x412>
 80088ac:	e65d      	b.n	800856a <_printf_float+0xb6>
 80088ae:	2301      	movs	r3, #1
 80088b0:	465a      	mov	r2, fp
 80088b2:	4631      	mov	r1, r6
 80088b4:	4628      	mov	r0, r5
 80088b6:	47b8      	blx	r7
 80088b8:	3001      	adds	r0, #1
 80088ba:	f43f ae56 	beq.w	800856a <_printf_float+0xb6>
 80088be:	f108 0801 	add.w	r8, r8, #1
 80088c2:	45d0      	cmp	r8, sl
 80088c4:	dbf3      	blt.n	80088ae <_printf_float+0x3fa>
 80088c6:	464b      	mov	r3, r9
 80088c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80088cc:	e6df      	b.n	800868e <_printf_float+0x1da>
 80088ce:	f04f 0800 	mov.w	r8, #0
 80088d2:	f104 0b1a 	add.w	fp, r4, #26
 80088d6:	e7f4      	b.n	80088c2 <_printf_float+0x40e>
 80088d8:	2301      	movs	r3, #1
 80088da:	4642      	mov	r2, r8
 80088dc:	e7e1      	b.n	80088a2 <_printf_float+0x3ee>
 80088de:	2301      	movs	r3, #1
 80088e0:	464a      	mov	r2, r9
 80088e2:	4631      	mov	r1, r6
 80088e4:	4628      	mov	r0, r5
 80088e6:	47b8      	blx	r7
 80088e8:	3001      	adds	r0, #1
 80088ea:	f43f ae3e 	beq.w	800856a <_printf_float+0xb6>
 80088ee:	f108 0801 	add.w	r8, r8, #1
 80088f2:	68e3      	ldr	r3, [r4, #12]
 80088f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088f6:	1a5b      	subs	r3, r3, r1
 80088f8:	4543      	cmp	r3, r8
 80088fa:	dcf0      	bgt.n	80088de <_printf_float+0x42a>
 80088fc:	e6fc      	b.n	80086f8 <_printf_float+0x244>
 80088fe:	f04f 0800 	mov.w	r8, #0
 8008902:	f104 0919 	add.w	r9, r4, #25
 8008906:	e7f4      	b.n	80088f2 <_printf_float+0x43e>

08008908 <_printf_common>:
 8008908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800890c:	4616      	mov	r6, r2
 800890e:	4698      	mov	r8, r3
 8008910:	688a      	ldr	r2, [r1, #8]
 8008912:	690b      	ldr	r3, [r1, #16]
 8008914:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008918:	4293      	cmp	r3, r2
 800891a:	bfb8      	it	lt
 800891c:	4613      	movlt	r3, r2
 800891e:	6033      	str	r3, [r6, #0]
 8008920:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008924:	4607      	mov	r7, r0
 8008926:	460c      	mov	r4, r1
 8008928:	b10a      	cbz	r2, 800892e <_printf_common+0x26>
 800892a:	3301      	adds	r3, #1
 800892c:	6033      	str	r3, [r6, #0]
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	0699      	lsls	r1, r3, #26
 8008932:	bf42      	ittt	mi
 8008934:	6833      	ldrmi	r3, [r6, #0]
 8008936:	3302      	addmi	r3, #2
 8008938:	6033      	strmi	r3, [r6, #0]
 800893a:	6825      	ldr	r5, [r4, #0]
 800893c:	f015 0506 	ands.w	r5, r5, #6
 8008940:	d106      	bne.n	8008950 <_printf_common+0x48>
 8008942:	f104 0a19 	add.w	sl, r4, #25
 8008946:	68e3      	ldr	r3, [r4, #12]
 8008948:	6832      	ldr	r2, [r6, #0]
 800894a:	1a9b      	subs	r3, r3, r2
 800894c:	42ab      	cmp	r3, r5
 800894e:	dc26      	bgt.n	800899e <_printf_common+0x96>
 8008950:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008954:	6822      	ldr	r2, [r4, #0]
 8008956:	3b00      	subs	r3, #0
 8008958:	bf18      	it	ne
 800895a:	2301      	movne	r3, #1
 800895c:	0692      	lsls	r2, r2, #26
 800895e:	d42b      	bmi.n	80089b8 <_printf_common+0xb0>
 8008960:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008964:	4641      	mov	r1, r8
 8008966:	4638      	mov	r0, r7
 8008968:	47c8      	blx	r9
 800896a:	3001      	adds	r0, #1
 800896c:	d01e      	beq.n	80089ac <_printf_common+0xa4>
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	6922      	ldr	r2, [r4, #16]
 8008972:	f003 0306 	and.w	r3, r3, #6
 8008976:	2b04      	cmp	r3, #4
 8008978:	bf02      	ittt	eq
 800897a:	68e5      	ldreq	r5, [r4, #12]
 800897c:	6833      	ldreq	r3, [r6, #0]
 800897e:	1aed      	subeq	r5, r5, r3
 8008980:	68a3      	ldr	r3, [r4, #8]
 8008982:	bf0c      	ite	eq
 8008984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008988:	2500      	movne	r5, #0
 800898a:	4293      	cmp	r3, r2
 800898c:	bfc4      	itt	gt
 800898e:	1a9b      	subgt	r3, r3, r2
 8008990:	18ed      	addgt	r5, r5, r3
 8008992:	2600      	movs	r6, #0
 8008994:	341a      	adds	r4, #26
 8008996:	42b5      	cmp	r5, r6
 8008998:	d11a      	bne.n	80089d0 <_printf_common+0xc8>
 800899a:	2000      	movs	r0, #0
 800899c:	e008      	b.n	80089b0 <_printf_common+0xa8>
 800899e:	2301      	movs	r3, #1
 80089a0:	4652      	mov	r2, sl
 80089a2:	4641      	mov	r1, r8
 80089a4:	4638      	mov	r0, r7
 80089a6:	47c8      	blx	r9
 80089a8:	3001      	adds	r0, #1
 80089aa:	d103      	bne.n	80089b4 <_printf_common+0xac>
 80089ac:	f04f 30ff 	mov.w	r0, #4294967295
 80089b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b4:	3501      	adds	r5, #1
 80089b6:	e7c6      	b.n	8008946 <_printf_common+0x3e>
 80089b8:	18e1      	adds	r1, r4, r3
 80089ba:	1c5a      	adds	r2, r3, #1
 80089bc:	2030      	movs	r0, #48	@ 0x30
 80089be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089c2:	4422      	add	r2, r4
 80089c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089cc:	3302      	adds	r3, #2
 80089ce:	e7c7      	b.n	8008960 <_printf_common+0x58>
 80089d0:	2301      	movs	r3, #1
 80089d2:	4622      	mov	r2, r4
 80089d4:	4641      	mov	r1, r8
 80089d6:	4638      	mov	r0, r7
 80089d8:	47c8      	blx	r9
 80089da:	3001      	adds	r0, #1
 80089dc:	d0e6      	beq.n	80089ac <_printf_common+0xa4>
 80089de:	3601      	adds	r6, #1
 80089e0:	e7d9      	b.n	8008996 <_printf_common+0x8e>
	...

080089e4 <_printf_i>:
 80089e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089e8:	7e0f      	ldrb	r7, [r1, #24]
 80089ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089ec:	2f78      	cmp	r7, #120	@ 0x78
 80089ee:	4691      	mov	r9, r2
 80089f0:	4680      	mov	r8, r0
 80089f2:	460c      	mov	r4, r1
 80089f4:	469a      	mov	sl, r3
 80089f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80089fa:	d807      	bhi.n	8008a0c <_printf_i+0x28>
 80089fc:	2f62      	cmp	r7, #98	@ 0x62
 80089fe:	d80a      	bhi.n	8008a16 <_printf_i+0x32>
 8008a00:	2f00      	cmp	r7, #0
 8008a02:	f000 80d1 	beq.w	8008ba8 <_printf_i+0x1c4>
 8008a06:	2f58      	cmp	r7, #88	@ 0x58
 8008a08:	f000 80b8 	beq.w	8008b7c <_printf_i+0x198>
 8008a0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a14:	e03a      	b.n	8008a8c <_printf_i+0xa8>
 8008a16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a1a:	2b15      	cmp	r3, #21
 8008a1c:	d8f6      	bhi.n	8008a0c <_printf_i+0x28>
 8008a1e:	a101      	add	r1, pc, #4	@ (adr r1, 8008a24 <_printf_i+0x40>)
 8008a20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a24:	08008a7d 	.word	0x08008a7d
 8008a28:	08008a91 	.word	0x08008a91
 8008a2c:	08008a0d 	.word	0x08008a0d
 8008a30:	08008a0d 	.word	0x08008a0d
 8008a34:	08008a0d 	.word	0x08008a0d
 8008a38:	08008a0d 	.word	0x08008a0d
 8008a3c:	08008a91 	.word	0x08008a91
 8008a40:	08008a0d 	.word	0x08008a0d
 8008a44:	08008a0d 	.word	0x08008a0d
 8008a48:	08008a0d 	.word	0x08008a0d
 8008a4c:	08008a0d 	.word	0x08008a0d
 8008a50:	08008b8f 	.word	0x08008b8f
 8008a54:	08008abb 	.word	0x08008abb
 8008a58:	08008b49 	.word	0x08008b49
 8008a5c:	08008a0d 	.word	0x08008a0d
 8008a60:	08008a0d 	.word	0x08008a0d
 8008a64:	08008bb1 	.word	0x08008bb1
 8008a68:	08008a0d 	.word	0x08008a0d
 8008a6c:	08008abb 	.word	0x08008abb
 8008a70:	08008a0d 	.word	0x08008a0d
 8008a74:	08008a0d 	.word	0x08008a0d
 8008a78:	08008b51 	.word	0x08008b51
 8008a7c:	6833      	ldr	r3, [r6, #0]
 8008a7e:	1d1a      	adds	r2, r3, #4
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6032      	str	r2, [r6, #0]
 8008a84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e09c      	b.n	8008bca <_printf_i+0x1e6>
 8008a90:	6833      	ldr	r3, [r6, #0]
 8008a92:	6820      	ldr	r0, [r4, #0]
 8008a94:	1d19      	adds	r1, r3, #4
 8008a96:	6031      	str	r1, [r6, #0]
 8008a98:	0606      	lsls	r6, r0, #24
 8008a9a:	d501      	bpl.n	8008aa0 <_printf_i+0xbc>
 8008a9c:	681d      	ldr	r5, [r3, #0]
 8008a9e:	e003      	b.n	8008aa8 <_printf_i+0xc4>
 8008aa0:	0645      	lsls	r5, r0, #25
 8008aa2:	d5fb      	bpl.n	8008a9c <_printf_i+0xb8>
 8008aa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008aa8:	2d00      	cmp	r5, #0
 8008aaa:	da03      	bge.n	8008ab4 <_printf_i+0xd0>
 8008aac:	232d      	movs	r3, #45	@ 0x2d
 8008aae:	426d      	negs	r5, r5
 8008ab0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ab4:	4858      	ldr	r0, [pc, #352]	@ (8008c18 <_printf_i+0x234>)
 8008ab6:	230a      	movs	r3, #10
 8008ab8:	e011      	b.n	8008ade <_printf_i+0xfa>
 8008aba:	6821      	ldr	r1, [r4, #0]
 8008abc:	6833      	ldr	r3, [r6, #0]
 8008abe:	0608      	lsls	r0, r1, #24
 8008ac0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ac4:	d402      	bmi.n	8008acc <_printf_i+0xe8>
 8008ac6:	0649      	lsls	r1, r1, #25
 8008ac8:	bf48      	it	mi
 8008aca:	b2ad      	uxthmi	r5, r5
 8008acc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ace:	4852      	ldr	r0, [pc, #328]	@ (8008c18 <_printf_i+0x234>)
 8008ad0:	6033      	str	r3, [r6, #0]
 8008ad2:	bf14      	ite	ne
 8008ad4:	230a      	movne	r3, #10
 8008ad6:	2308      	moveq	r3, #8
 8008ad8:	2100      	movs	r1, #0
 8008ada:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ade:	6866      	ldr	r6, [r4, #4]
 8008ae0:	60a6      	str	r6, [r4, #8]
 8008ae2:	2e00      	cmp	r6, #0
 8008ae4:	db05      	blt.n	8008af2 <_printf_i+0x10e>
 8008ae6:	6821      	ldr	r1, [r4, #0]
 8008ae8:	432e      	orrs	r6, r5
 8008aea:	f021 0104 	bic.w	r1, r1, #4
 8008aee:	6021      	str	r1, [r4, #0]
 8008af0:	d04b      	beq.n	8008b8a <_printf_i+0x1a6>
 8008af2:	4616      	mov	r6, r2
 8008af4:	fbb5 f1f3 	udiv	r1, r5, r3
 8008af8:	fb03 5711 	mls	r7, r3, r1, r5
 8008afc:	5dc7      	ldrb	r7, [r0, r7]
 8008afe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b02:	462f      	mov	r7, r5
 8008b04:	42bb      	cmp	r3, r7
 8008b06:	460d      	mov	r5, r1
 8008b08:	d9f4      	bls.n	8008af4 <_printf_i+0x110>
 8008b0a:	2b08      	cmp	r3, #8
 8008b0c:	d10b      	bne.n	8008b26 <_printf_i+0x142>
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	07df      	lsls	r7, r3, #31
 8008b12:	d508      	bpl.n	8008b26 <_printf_i+0x142>
 8008b14:	6923      	ldr	r3, [r4, #16]
 8008b16:	6861      	ldr	r1, [r4, #4]
 8008b18:	4299      	cmp	r1, r3
 8008b1a:	bfde      	ittt	le
 8008b1c:	2330      	movle	r3, #48	@ 0x30
 8008b1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b22:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b26:	1b92      	subs	r2, r2, r6
 8008b28:	6122      	str	r2, [r4, #16]
 8008b2a:	f8cd a000 	str.w	sl, [sp]
 8008b2e:	464b      	mov	r3, r9
 8008b30:	aa03      	add	r2, sp, #12
 8008b32:	4621      	mov	r1, r4
 8008b34:	4640      	mov	r0, r8
 8008b36:	f7ff fee7 	bl	8008908 <_printf_common>
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	d14a      	bne.n	8008bd4 <_printf_i+0x1f0>
 8008b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b42:	b004      	add	sp, #16
 8008b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	f043 0320 	orr.w	r3, r3, #32
 8008b4e:	6023      	str	r3, [r4, #0]
 8008b50:	4832      	ldr	r0, [pc, #200]	@ (8008c1c <_printf_i+0x238>)
 8008b52:	2778      	movs	r7, #120	@ 0x78
 8008b54:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	6831      	ldr	r1, [r6, #0]
 8008b5c:	061f      	lsls	r7, r3, #24
 8008b5e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b62:	d402      	bmi.n	8008b6a <_printf_i+0x186>
 8008b64:	065f      	lsls	r7, r3, #25
 8008b66:	bf48      	it	mi
 8008b68:	b2ad      	uxthmi	r5, r5
 8008b6a:	6031      	str	r1, [r6, #0]
 8008b6c:	07d9      	lsls	r1, r3, #31
 8008b6e:	bf44      	itt	mi
 8008b70:	f043 0320 	orrmi.w	r3, r3, #32
 8008b74:	6023      	strmi	r3, [r4, #0]
 8008b76:	b11d      	cbz	r5, 8008b80 <_printf_i+0x19c>
 8008b78:	2310      	movs	r3, #16
 8008b7a:	e7ad      	b.n	8008ad8 <_printf_i+0xf4>
 8008b7c:	4826      	ldr	r0, [pc, #152]	@ (8008c18 <_printf_i+0x234>)
 8008b7e:	e7e9      	b.n	8008b54 <_printf_i+0x170>
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	f023 0320 	bic.w	r3, r3, #32
 8008b86:	6023      	str	r3, [r4, #0]
 8008b88:	e7f6      	b.n	8008b78 <_printf_i+0x194>
 8008b8a:	4616      	mov	r6, r2
 8008b8c:	e7bd      	b.n	8008b0a <_printf_i+0x126>
 8008b8e:	6833      	ldr	r3, [r6, #0]
 8008b90:	6825      	ldr	r5, [r4, #0]
 8008b92:	6961      	ldr	r1, [r4, #20]
 8008b94:	1d18      	adds	r0, r3, #4
 8008b96:	6030      	str	r0, [r6, #0]
 8008b98:	062e      	lsls	r6, r5, #24
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	d501      	bpl.n	8008ba2 <_printf_i+0x1be>
 8008b9e:	6019      	str	r1, [r3, #0]
 8008ba0:	e002      	b.n	8008ba8 <_printf_i+0x1c4>
 8008ba2:	0668      	lsls	r0, r5, #25
 8008ba4:	d5fb      	bpl.n	8008b9e <_printf_i+0x1ba>
 8008ba6:	8019      	strh	r1, [r3, #0]
 8008ba8:	2300      	movs	r3, #0
 8008baa:	6123      	str	r3, [r4, #16]
 8008bac:	4616      	mov	r6, r2
 8008bae:	e7bc      	b.n	8008b2a <_printf_i+0x146>
 8008bb0:	6833      	ldr	r3, [r6, #0]
 8008bb2:	1d1a      	adds	r2, r3, #4
 8008bb4:	6032      	str	r2, [r6, #0]
 8008bb6:	681e      	ldr	r6, [r3, #0]
 8008bb8:	6862      	ldr	r2, [r4, #4]
 8008bba:	2100      	movs	r1, #0
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f7f7 fb27 	bl	8000210 <memchr>
 8008bc2:	b108      	cbz	r0, 8008bc8 <_printf_i+0x1e4>
 8008bc4:	1b80      	subs	r0, r0, r6
 8008bc6:	6060      	str	r0, [r4, #4]
 8008bc8:	6863      	ldr	r3, [r4, #4]
 8008bca:	6123      	str	r3, [r4, #16]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bd2:	e7aa      	b.n	8008b2a <_printf_i+0x146>
 8008bd4:	6923      	ldr	r3, [r4, #16]
 8008bd6:	4632      	mov	r2, r6
 8008bd8:	4649      	mov	r1, r9
 8008bda:	4640      	mov	r0, r8
 8008bdc:	47d0      	blx	sl
 8008bde:	3001      	adds	r0, #1
 8008be0:	d0ad      	beq.n	8008b3e <_printf_i+0x15a>
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	079b      	lsls	r3, r3, #30
 8008be6:	d413      	bmi.n	8008c10 <_printf_i+0x22c>
 8008be8:	68e0      	ldr	r0, [r4, #12]
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	4298      	cmp	r0, r3
 8008bee:	bfb8      	it	lt
 8008bf0:	4618      	movlt	r0, r3
 8008bf2:	e7a6      	b.n	8008b42 <_printf_i+0x15e>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	4632      	mov	r2, r6
 8008bf8:	4649      	mov	r1, r9
 8008bfa:	4640      	mov	r0, r8
 8008bfc:	47d0      	blx	sl
 8008bfe:	3001      	adds	r0, #1
 8008c00:	d09d      	beq.n	8008b3e <_printf_i+0x15a>
 8008c02:	3501      	adds	r5, #1
 8008c04:	68e3      	ldr	r3, [r4, #12]
 8008c06:	9903      	ldr	r1, [sp, #12]
 8008c08:	1a5b      	subs	r3, r3, r1
 8008c0a:	42ab      	cmp	r3, r5
 8008c0c:	dcf2      	bgt.n	8008bf4 <_printf_i+0x210>
 8008c0e:	e7eb      	b.n	8008be8 <_printf_i+0x204>
 8008c10:	2500      	movs	r5, #0
 8008c12:	f104 0619 	add.w	r6, r4, #25
 8008c16:	e7f5      	b.n	8008c04 <_printf_i+0x220>
 8008c18:	0800b1a6 	.word	0x0800b1a6
 8008c1c:	0800b1b7 	.word	0x0800b1b7

08008c20 <std>:
 8008c20:	2300      	movs	r3, #0
 8008c22:	b510      	push	{r4, lr}
 8008c24:	4604      	mov	r4, r0
 8008c26:	e9c0 3300 	strd	r3, r3, [r0]
 8008c2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c2e:	6083      	str	r3, [r0, #8]
 8008c30:	8181      	strh	r1, [r0, #12]
 8008c32:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c34:	81c2      	strh	r2, [r0, #14]
 8008c36:	6183      	str	r3, [r0, #24]
 8008c38:	4619      	mov	r1, r3
 8008c3a:	2208      	movs	r2, #8
 8008c3c:	305c      	adds	r0, #92	@ 0x5c
 8008c3e:	f000 f8f4 	bl	8008e2a <memset>
 8008c42:	4b0d      	ldr	r3, [pc, #52]	@ (8008c78 <std+0x58>)
 8008c44:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c46:	4b0d      	ldr	r3, [pc, #52]	@ (8008c7c <std+0x5c>)
 8008c48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c80 <std+0x60>)
 8008c4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c84 <std+0x64>)
 8008c50:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c52:	4b0d      	ldr	r3, [pc, #52]	@ (8008c88 <std+0x68>)
 8008c54:	6224      	str	r4, [r4, #32]
 8008c56:	429c      	cmp	r4, r3
 8008c58:	d006      	beq.n	8008c68 <std+0x48>
 8008c5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c5e:	4294      	cmp	r4, r2
 8008c60:	d002      	beq.n	8008c68 <std+0x48>
 8008c62:	33d0      	adds	r3, #208	@ 0xd0
 8008c64:	429c      	cmp	r4, r3
 8008c66:	d105      	bne.n	8008c74 <std+0x54>
 8008c68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c70:	f000 b958 	b.w	8008f24 <__retarget_lock_init_recursive>
 8008c74:	bd10      	pop	{r4, pc}
 8008c76:	bf00      	nop
 8008c78:	08008da5 	.word	0x08008da5
 8008c7c:	08008dc7 	.word	0x08008dc7
 8008c80:	08008dff 	.word	0x08008dff
 8008c84:	08008e23 	.word	0x08008e23
 8008c88:	20000b38 	.word	0x20000b38

08008c8c <stdio_exit_handler>:
 8008c8c:	4a02      	ldr	r2, [pc, #8]	@ (8008c98 <stdio_exit_handler+0xc>)
 8008c8e:	4903      	ldr	r1, [pc, #12]	@ (8008c9c <stdio_exit_handler+0x10>)
 8008c90:	4803      	ldr	r0, [pc, #12]	@ (8008ca0 <stdio_exit_handler+0x14>)
 8008c92:	f000 b869 	b.w	8008d68 <_fwalk_sglue>
 8008c96:	bf00      	nop
 8008c98:	20000010 	.word	0x20000010
 8008c9c:	0800a5f5 	.word	0x0800a5f5
 8008ca0:	20000020 	.word	0x20000020

08008ca4 <cleanup_stdio>:
 8008ca4:	6841      	ldr	r1, [r0, #4]
 8008ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8008cd8 <cleanup_stdio+0x34>)
 8008ca8:	4299      	cmp	r1, r3
 8008caa:	b510      	push	{r4, lr}
 8008cac:	4604      	mov	r4, r0
 8008cae:	d001      	beq.n	8008cb4 <cleanup_stdio+0x10>
 8008cb0:	f001 fca0 	bl	800a5f4 <_fflush_r>
 8008cb4:	68a1      	ldr	r1, [r4, #8]
 8008cb6:	4b09      	ldr	r3, [pc, #36]	@ (8008cdc <cleanup_stdio+0x38>)
 8008cb8:	4299      	cmp	r1, r3
 8008cba:	d002      	beq.n	8008cc2 <cleanup_stdio+0x1e>
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f001 fc99 	bl	800a5f4 <_fflush_r>
 8008cc2:	68e1      	ldr	r1, [r4, #12]
 8008cc4:	4b06      	ldr	r3, [pc, #24]	@ (8008ce0 <cleanup_stdio+0x3c>)
 8008cc6:	4299      	cmp	r1, r3
 8008cc8:	d004      	beq.n	8008cd4 <cleanup_stdio+0x30>
 8008cca:	4620      	mov	r0, r4
 8008ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cd0:	f001 bc90 	b.w	800a5f4 <_fflush_r>
 8008cd4:	bd10      	pop	{r4, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20000b38 	.word	0x20000b38
 8008cdc:	20000ba0 	.word	0x20000ba0
 8008ce0:	20000c08 	.word	0x20000c08

08008ce4 <global_stdio_init.part.0>:
 8008ce4:	b510      	push	{r4, lr}
 8008ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8008d14 <global_stdio_init.part.0+0x30>)
 8008ce8:	4c0b      	ldr	r4, [pc, #44]	@ (8008d18 <global_stdio_init.part.0+0x34>)
 8008cea:	4a0c      	ldr	r2, [pc, #48]	@ (8008d1c <global_stdio_init.part.0+0x38>)
 8008cec:	601a      	str	r2, [r3, #0]
 8008cee:	4620      	mov	r0, r4
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	2104      	movs	r1, #4
 8008cf4:	f7ff ff94 	bl	8008c20 <std>
 8008cf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	2109      	movs	r1, #9
 8008d00:	f7ff ff8e 	bl	8008c20 <std>
 8008d04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d08:	2202      	movs	r2, #2
 8008d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d0e:	2112      	movs	r1, #18
 8008d10:	f7ff bf86 	b.w	8008c20 <std>
 8008d14:	20000c70 	.word	0x20000c70
 8008d18:	20000b38 	.word	0x20000b38
 8008d1c:	08008c8d 	.word	0x08008c8d

08008d20 <__sfp_lock_acquire>:
 8008d20:	4801      	ldr	r0, [pc, #4]	@ (8008d28 <__sfp_lock_acquire+0x8>)
 8008d22:	f000 b900 	b.w	8008f26 <__retarget_lock_acquire_recursive>
 8008d26:	bf00      	nop
 8008d28:	20000c79 	.word	0x20000c79

08008d2c <__sfp_lock_release>:
 8008d2c:	4801      	ldr	r0, [pc, #4]	@ (8008d34 <__sfp_lock_release+0x8>)
 8008d2e:	f000 b8fb 	b.w	8008f28 <__retarget_lock_release_recursive>
 8008d32:	bf00      	nop
 8008d34:	20000c79 	.word	0x20000c79

08008d38 <__sinit>:
 8008d38:	b510      	push	{r4, lr}
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	f7ff fff0 	bl	8008d20 <__sfp_lock_acquire>
 8008d40:	6a23      	ldr	r3, [r4, #32]
 8008d42:	b11b      	cbz	r3, 8008d4c <__sinit+0x14>
 8008d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d48:	f7ff bff0 	b.w	8008d2c <__sfp_lock_release>
 8008d4c:	4b04      	ldr	r3, [pc, #16]	@ (8008d60 <__sinit+0x28>)
 8008d4e:	6223      	str	r3, [r4, #32]
 8008d50:	4b04      	ldr	r3, [pc, #16]	@ (8008d64 <__sinit+0x2c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1f5      	bne.n	8008d44 <__sinit+0xc>
 8008d58:	f7ff ffc4 	bl	8008ce4 <global_stdio_init.part.0>
 8008d5c:	e7f2      	b.n	8008d44 <__sinit+0xc>
 8008d5e:	bf00      	nop
 8008d60:	08008ca5 	.word	0x08008ca5
 8008d64:	20000c70 	.word	0x20000c70

08008d68 <_fwalk_sglue>:
 8008d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d6c:	4607      	mov	r7, r0
 8008d6e:	4688      	mov	r8, r1
 8008d70:	4614      	mov	r4, r2
 8008d72:	2600      	movs	r6, #0
 8008d74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d78:	f1b9 0901 	subs.w	r9, r9, #1
 8008d7c:	d505      	bpl.n	8008d8a <_fwalk_sglue+0x22>
 8008d7e:	6824      	ldr	r4, [r4, #0]
 8008d80:	2c00      	cmp	r4, #0
 8008d82:	d1f7      	bne.n	8008d74 <_fwalk_sglue+0xc>
 8008d84:	4630      	mov	r0, r6
 8008d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d8a:	89ab      	ldrh	r3, [r5, #12]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d907      	bls.n	8008da0 <_fwalk_sglue+0x38>
 8008d90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d94:	3301      	adds	r3, #1
 8008d96:	d003      	beq.n	8008da0 <_fwalk_sglue+0x38>
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	47c0      	blx	r8
 8008d9e:	4306      	orrs	r6, r0
 8008da0:	3568      	adds	r5, #104	@ 0x68
 8008da2:	e7e9      	b.n	8008d78 <_fwalk_sglue+0x10>

08008da4 <__sread>:
 8008da4:	b510      	push	{r4, lr}
 8008da6:	460c      	mov	r4, r1
 8008da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dac:	f000 f86c 	bl	8008e88 <_read_r>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	bfab      	itete	ge
 8008db4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008db6:	89a3      	ldrhlt	r3, [r4, #12]
 8008db8:	181b      	addge	r3, r3, r0
 8008dba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008dbe:	bfac      	ite	ge
 8008dc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008dc2:	81a3      	strhlt	r3, [r4, #12]
 8008dc4:	bd10      	pop	{r4, pc}

08008dc6 <__swrite>:
 8008dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dca:	461f      	mov	r7, r3
 8008dcc:	898b      	ldrh	r3, [r1, #12]
 8008dce:	05db      	lsls	r3, r3, #23
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	460c      	mov	r4, r1
 8008dd4:	4616      	mov	r6, r2
 8008dd6:	d505      	bpl.n	8008de4 <__swrite+0x1e>
 8008dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ddc:	2302      	movs	r3, #2
 8008dde:	2200      	movs	r2, #0
 8008de0:	f000 f840 	bl	8008e64 <_lseek_r>
 8008de4:	89a3      	ldrh	r3, [r4, #12]
 8008de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008dee:	81a3      	strh	r3, [r4, #12]
 8008df0:	4632      	mov	r2, r6
 8008df2:	463b      	mov	r3, r7
 8008df4:	4628      	mov	r0, r5
 8008df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dfa:	f000 b857 	b.w	8008eac <_write_r>

08008dfe <__sseek>:
 8008dfe:	b510      	push	{r4, lr}
 8008e00:	460c      	mov	r4, r1
 8008e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e06:	f000 f82d 	bl	8008e64 <_lseek_r>
 8008e0a:	1c43      	adds	r3, r0, #1
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	bf15      	itete	ne
 8008e10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e1a:	81a3      	strheq	r3, [r4, #12]
 8008e1c:	bf18      	it	ne
 8008e1e:	81a3      	strhne	r3, [r4, #12]
 8008e20:	bd10      	pop	{r4, pc}

08008e22 <__sclose>:
 8008e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e26:	f000 b80d 	b.w	8008e44 <_close_r>

08008e2a <memset>:
 8008e2a:	4402      	add	r2, r0
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d100      	bne.n	8008e34 <memset+0xa>
 8008e32:	4770      	bx	lr
 8008e34:	f803 1b01 	strb.w	r1, [r3], #1
 8008e38:	e7f9      	b.n	8008e2e <memset+0x4>
	...

08008e3c <_localeconv_r>:
 8008e3c:	4800      	ldr	r0, [pc, #0]	@ (8008e40 <_localeconv_r+0x4>)
 8008e3e:	4770      	bx	lr
 8008e40:	2000015c 	.word	0x2000015c

08008e44 <_close_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4d06      	ldr	r5, [pc, #24]	@ (8008e60 <_close_r+0x1c>)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	602b      	str	r3, [r5, #0]
 8008e50:	f7fa faf0 	bl	8003434 <_close>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d102      	bne.n	8008e5e <_close_r+0x1a>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	b103      	cbz	r3, 8008e5e <_close_r+0x1a>
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	20000c74 	.word	0x20000c74

08008e64 <_lseek_r>:
 8008e64:	b538      	push	{r3, r4, r5, lr}
 8008e66:	4d07      	ldr	r5, [pc, #28]	@ (8008e84 <_lseek_r+0x20>)
 8008e68:	4604      	mov	r4, r0
 8008e6a:	4608      	mov	r0, r1
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	2200      	movs	r2, #0
 8008e70:	602a      	str	r2, [r5, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	f7fa fb05 	bl	8003482 <_lseek>
 8008e78:	1c43      	adds	r3, r0, #1
 8008e7a:	d102      	bne.n	8008e82 <_lseek_r+0x1e>
 8008e7c:	682b      	ldr	r3, [r5, #0]
 8008e7e:	b103      	cbz	r3, 8008e82 <_lseek_r+0x1e>
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	bd38      	pop	{r3, r4, r5, pc}
 8008e84:	20000c74 	.word	0x20000c74

08008e88 <_read_r>:
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	4d07      	ldr	r5, [pc, #28]	@ (8008ea8 <_read_r+0x20>)
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	4608      	mov	r0, r1
 8008e90:	4611      	mov	r1, r2
 8008e92:	2200      	movs	r2, #0
 8008e94:	602a      	str	r2, [r5, #0]
 8008e96:	461a      	mov	r2, r3
 8008e98:	f7fa fa93 	bl	80033c2 <_read>
 8008e9c:	1c43      	adds	r3, r0, #1
 8008e9e:	d102      	bne.n	8008ea6 <_read_r+0x1e>
 8008ea0:	682b      	ldr	r3, [r5, #0]
 8008ea2:	b103      	cbz	r3, 8008ea6 <_read_r+0x1e>
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	bd38      	pop	{r3, r4, r5, pc}
 8008ea8:	20000c74 	.word	0x20000c74

08008eac <_write_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	4d07      	ldr	r5, [pc, #28]	@ (8008ecc <_write_r+0x20>)
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	4608      	mov	r0, r1
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	602a      	str	r2, [r5, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f7fa fa9e 	bl	80033fc <_write>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d102      	bne.n	8008eca <_write_r+0x1e>
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	b103      	cbz	r3, 8008eca <_write_r+0x1e>
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	20000c74 	.word	0x20000c74

08008ed0 <__errno>:
 8008ed0:	4b01      	ldr	r3, [pc, #4]	@ (8008ed8 <__errno+0x8>)
 8008ed2:	6818      	ldr	r0, [r3, #0]
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	2000001c 	.word	0x2000001c

08008edc <__libc_init_array>:
 8008edc:	b570      	push	{r4, r5, r6, lr}
 8008ede:	4d0d      	ldr	r5, [pc, #52]	@ (8008f14 <__libc_init_array+0x38>)
 8008ee0:	4c0d      	ldr	r4, [pc, #52]	@ (8008f18 <__libc_init_array+0x3c>)
 8008ee2:	1b64      	subs	r4, r4, r5
 8008ee4:	10a4      	asrs	r4, r4, #2
 8008ee6:	2600      	movs	r6, #0
 8008ee8:	42a6      	cmp	r6, r4
 8008eea:	d109      	bne.n	8008f00 <__libc_init_array+0x24>
 8008eec:	4d0b      	ldr	r5, [pc, #44]	@ (8008f1c <__libc_init_array+0x40>)
 8008eee:	4c0c      	ldr	r4, [pc, #48]	@ (8008f20 <__libc_init_array+0x44>)
 8008ef0:	f001 ff16 	bl	800ad20 <_init>
 8008ef4:	1b64      	subs	r4, r4, r5
 8008ef6:	10a4      	asrs	r4, r4, #2
 8008ef8:	2600      	movs	r6, #0
 8008efa:	42a6      	cmp	r6, r4
 8008efc:	d105      	bne.n	8008f0a <__libc_init_array+0x2e>
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f04:	4798      	blx	r3
 8008f06:	3601      	adds	r6, #1
 8008f08:	e7ee      	b.n	8008ee8 <__libc_init_array+0xc>
 8008f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f0e:	4798      	blx	r3
 8008f10:	3601      	adds	r6, #1
 8008f12:	e7f2      	b.n	8008efa <__libc_init_array+0x1e>
 8008f14:	0800b514 	.word	0x0800b514
 8008f18:	0800b514 	.word	0x0800b514
 8008f1c:	0800b514 	.word	0x0800b514
 8008f20:	0800b518 	.word	0x0800b518

08008f24 <__retarget_lock_init_recursive>:
 8008f24:	4770      	bx	lr

08008f26 <__retarget_lock_acquire_recursive>:
 8008f26:	4770      	bx	lr

08008f28 <__retarget_lock_release_recursive>:
 8008f28:	4770      	bx	lr

08008f2a <memcpy>:
 8008f2a:	440a      	add	r2, r1
 8008f2c:	4291      	cmp	r1, r2
 8008f2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f32:	d100      	bne.n	8008f36 <memcpy+0xc>
 8008f34:	4770      	bx	lr
 8008f36:	b510      	push	{r4, lr}
 8008f38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f40:	4291      	cmp	r1, r2
 8008f42:	d1f9      	bne.n	8008f38 <memcpy+0xe>
 8008f44:	bd10      	pop	{r4, pc}

08008f46 <quorem>:
 8008f46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4a:	6903      	ldr	r3, [r0, #16]
 8008f4c:	690c      	ldr	r4, [r1, #16]
 8008f4e:	42a3      	cmp	r3, r4
 8008f50:	4607      	mov	r7, r0
 8008f52:	db7e      	blt.n	8009052 <quorem+0x10c>
 8008f54:	3c01      	subs	r4, #1
 8008f56:	f101 0814 	add.w	r8, r1, #20
 8008f5a:	00a3      	lsls	r3, r4, #2
 8008f5c:	f100 0514 	add.w	r5, r0, #20
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f66:	9301      	str	r3, [sp, #4]
 8008f68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f70:	3301      	adds	r3, #1
 8008f72:	429a      	cmp	r2, r3
 8008f74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f78:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f7c:	d32e      	bcc.n	8008fdc <quorem+0x96>
 8008f7e:	f04f 0a00 	mov.w	sl, #0
 8008f82:	46c4      	mov	ip, r8
 8008f84:	46ae      	mov	lr, r5
 8008f86:	46d3      	mov	fp, sl
 8008f88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f8c:	b298      	uxth	r0, r3
 8008f8e:	fb06 a000 	mla	r0, r6, r0, sl
 8008f92:	0c02      	lsrs	r2, r0, #16
 8008f94:	0c1b      	lsrs	r3, r3, #16
 8008f96:	fb06 2303 	mla	r3, r6, r3, r2
 8008f9a:	f8de 2000 	ldr.w	r2, [lr]
 8008f9e:	b280      	uxth	r0, r0
 8008fa0:	b292      	uxth	r2, r2
 8008fa2:	1a12      	subs	r2, r2, r0
 8008fa4:	445a      	add	r2, fp
 8008fa6:	f8de 0000 	ldr.w	r0, [lr]
 8008faa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008fb4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008fb8:	b292      	uxth	r2, r2
 8008fba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008fbe:	45e1      	cmp	r9, ip
 8008fc0:	f84e 2b04 	str.w	r2, [lr], #4
 8008fc4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008fc8:	d2de      	bcs.n	8008f88 <quorem+0x42>
 8008fca:	9b00      	ldr	r3, [sp, #0]
 8008fcc:	58eb      	ldr	r3, [r5, r3]
 8008fce:	b92b      	cbnz	r3, 8008fdc <quorem+0x96>
 8008fd0:	9b01      	ldr	r3, [sp, #4]
 8008fd2:	3b04      	subs	r3, #4
 8008fd4:	429d      	cmp	r5, r3
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	d32f      	bcc.n	800903a <quorem+0xf4>
 8008fda:	613c      	str	r4, [r7, #16]
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f001 f97d 	bl	800a2dc <__mcmp>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	db25      	blt.n	8009032 <quorem+0xec>
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	2000      	movs	r0, #0
 8008fea:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fee:	f8d1 c000 	ldr.w	ip, [r1]
 8008ff2:	fa1f fe82 	uxth.w	lr, r2
 8008ff6:	fa1f f38c 	uxth.w	r3, ip
 8008ffa:	eba3 030e 	sub.w	r3, r3, lr
 8008ffe:	4403      	add	r3, r0
 8009000:	0c12      	lsrs	r2, r2, #16
 8009002:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009006:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800900a:	b29b      	uxth	r3, r3
 800900c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009010:	45c1      	cmp	r9, r8
 8009012:	f841 3b04 	str.w	r3, [r1], #4
 8009016:	ea4f 4022 	mov.w	r0, r2, asr #16
 800901a:	d2e6      	bcs.n	8008fea <quorem+0xa4>
 800901c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009020:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009024:	b922      	cbnz	r2, 8009030 <quorem+0xea>
 8009026:	3b04      	subs	r3, #4
 8009028:	429d      	cmp	r5, r3
 800902a:	461a      	mov	r2, r3
 800902c:	d30b      	bcc.n	8009046 <quorem+0x100>
 800902e:	613c      	str	r4, [r7, #16]
 8009030:	3601      	adds	r6, #1
 8009032:	4630      	mov	r0, r6
 8009034:	b003      	add	sp, #12
 8009036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903a:	6812      	ldr	r2, [r2, #0]
 800903c:	3b04      	subs	r3, #4
 800903e:	2a00      	cmp	r2, #0
 8009040:	d1cb      	bne.n	8008fda <quorem+0x94>
 8009042:	3c01      	subs	r4, #1
 8009044:	e7c6      	b.n	8008fd4 <quorem+0x8e>
 8009046:	6812      	ldr	r2, [r2, #0]
 8009048:	3b04      	subs	r3, #4
 800904a:	2a00      	cmp	r2, #0
 800904c:	d1ef      	bne.n	800902e <quorem+0xe8>
 800904e:	3c01      	subs	r4, #1
 8009050:	e7ea      	b.n	8009028 <quorem+0xe2>
 8009052:	2000      	movs	r0, #0
 8009054:	e7ee      	b.n	8009034 <quorem+0xee>
	...

08009058 <_dtoa_r>:
 8009058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905c:	69c7      	ldr	r7, [r0, #28]
 800905e:	b097      	sub	sp, #92	@ 0x5c
 8009060:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009064:	ec55 4b10 	vmov	r4, r5, d0
 8009068:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800906a:	9107      	str	r1, [sp, #28]
 800906c:	4681      	mov	r9, r0
 800906e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009070:	9311      	str	r3, [sp, #68]	@ 0x44
 8009072:	b97f      	cbnz	r7, 8009094 <_dtoa_r+0x3c>
 8009074:	2010      	movs	r0, #16
 8009076:	f000 fe09 	bl	8009c8c <malloc>
 800907a:	4602      	mov	r2, r0
 800907c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009080:	b920      	cbnz	r0, 800908c <_dtoa_r+0x34>
 8009082:	4ba9      	ldr	r3, [pc, #676]	@ (8009328 <_dtoa_r+0x2d0>)
 8009084:	21ef      	movs	r1, #239	@ 0xef
 8009086:	48a9      	ldr	r0, [pc, #676]	@ (800932c <_dtoa_r+0x2d4>)
 8009088:	f001 faec 	bl	800a664 <__assert_func>
 800908c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009090:	6007      	str	r7, [r0, #0]
 8009092:	60c7      	str	r7, [r0, #12]
 8009094:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009098:	6819      	ldr	r1, [r3, #0]
 800909a:	b159      	cbz	r1, 80090b4 <_dtoa_r+0x5c>
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	604a      	str	r2, [r1, #4]
 80090a0:	2301      	movs	r3, #1
 80090a2:	4093      	lsls	r3, r2
 80090a4:	608b      	str	r3, [r1, #8]
 80090a6:	4648      	mov	r0, r9
 80090a8:	f000 fee6 	bl	8009e78 <_Bfree>
 80090ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80090b0:	2200      	movs	r2, #0
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	1e2b      	subs	r3, r5, #0
 80090b6:	bfb9      	ittee	lt
 80090b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80090bc:	9305      	strlt	r3, [sp, #20]
 80090be:	2300      	movge	r3, #0
 80090c0:	6033      	strge	r3, [r6, #0]
 80090c2:	9f05      	ldr	r7, [sp, #20]
 80090c4:	4b9a      	ldr	r3, [pc, #616]	@ (8009330 <_dtoa_r+0x2d8>)
 80090c6:	bfbc      	itt	lt
 80090c8:	2201      	movlt	r2, #1
 80090ca:	6032      	strlt	r2, [r6, #0]
 80090cc:	43bb      	bics	r3, r7
 80090ce:	d112      	bne.n	80090f6 <_dtoa_r+0x9e>
 80090d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80090d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80090d6:	6013      	str	r3, [r2, #0]
 80090d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80090dc:	4323      	orrs	r3, r4
 80090de:	f000 855a 	beq.w	8009b96 <_dtoa_r+0xb3e>
 80090e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80090e4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009344 <_dtoa_r+0x2ec>
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f000 855c 	beq.w	8009ba6 <_dtoa_r+0xb4e>
 80090ee:	f10a 0303 	add.w	r3, sl, #3
 80090f2:	f000 bd56 	b.w	8009ba2 <_dtoa_r+0xb4a>
 80090f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80090fa:	2200      	movs	r2, #0
 80090fc:	ec51 0b17 	vmov	r0, r1, d7
 8009100:	2300      	movs	r3, #0
 8009102:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009106:	f7f7 fcff 	bl	8000b08 <__aeabi_dcmpeq>
 800910a:	4680      	mov	r8, r0
 800910c:	b158      	cbz	r0, 8009126 <_dtoa_r+0xce>
 800910e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009110:	2301      	movs	r3, #1
 8009112:	6013      	str	r3, [r2, #0]
 8009114:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009116:	b113      	cbz	r3, 800911e <_dtoa_r+0xc6>
 8009118:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800911a:	4b86      	ldr	r3, [pc, #536]	@ (8009334 <_dtoa_r+0x2dc>)
 800911c:	6013      	str	r3, [r2, #0]
 800911e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009348 <_dtoa_r+0x2f0>
 8009122:	f000 bd40 	b.w	8009ba6 <_dtoa_r+0xb4e>
 8009126:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800912a:	aa14      	add	r2, sp, #80	@ 0x50
 800912c:	a915      	add	r1, sp, #84	@ 0x54
 800912e:	4648      	mov	r0, r9
 8009130:	f001 f984 	bl	800a43c <__d2b>
 8009134:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009138:	9002      	str	r0, [sp, #8]
 800913a:	2e00      	cmp	r6, #0
 800913c:	d078      	beq.n	8009230 <_dtoa_r+0x1d8>
 800913e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009140:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009148:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800914c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009150:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009154:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009158:	4619      	mov	r1, r3
 800915a:	2200      	movs	r2, #0
 800915c:	4b76      	ldr	r3, [pc, #472]	@ (8009338 <_dtoa_r+0x2e0>)
 800915e:	f7f7 f8b3 	bl	80002c8 <__aeabi_dsub>
 8009162:	a36b      	add	r3, pc, #428	@ (adr r3, 8009310 <_dtoa_r+0x2b8>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f7f7 fa66 	bl	8000638 <__aeabi_dmul>
 800916c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009318 <_dtoa_r+0x2c0>)
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	f7f7 f8ab 	bl	80002cc <__adddf3>
 8009176:	4604      	mov	r4, r0
 8009178:	4630      	mov	r0, r6
 800917a:	460d      	mov	r5, r1
 800917c:	f7f7 f9f2 	bl	8000564 <__aeabi_i2d>
 8009180:	a367      	add	r3, pc, #412	@ (adr r3, 8009320 <_dtoa_r+0x2c8>)
 8009182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009186:	f7f7 fa57 	bl	8000638 <__aeabi_dmul>
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4620      	mov	r0, r4
 8009190:	4629      	mov	r1, r5
 8009192:	f7f7 f89b 	bl	80002cc <__adddf3>
 8009196:	4604      	mov	r4, r0
 8009198:	460d      	mov	r5, r1
 800919a:	f7f7 fcfd 	bl	8000b98 <__aeabi_d2iz>
 800919e:	2200      	movs	r2, #0
 80091a0:	4607      	mov	r7, r0
 80091a2:	2300      	movs	r3, #0
 80091a4:	4620      	mov	r0, r4
 80091a6:	4629      	mov	r1, r5
 80091a8:	f7f7 fcb8 	bl	8000b1c <__aeabi_dcmplt>
 80091ac:	b140      	cbz	r0, 80091c0 <_dtoa_r+0x168>
 80091ae:	4638      	mov	r0, r7
 80091b0:	f7f7 f9d8 	bl	8000564 <__aeabi_i2d>
 80091b4:	4622      	mov	r2, r4
 80091b6:	462b      	mov	r3, r5
 80091b8:	f7f7 fca6 	bl	8000b08 <__aeabi_dcmpeq>
 80091bc:	b900      	cbnz	r0, 80091c0 <_dtoa_r+0x168>
 80091be:	3f01      	subs	r7, #1
 80091c0:	2f16      	cmp	r7, #22
 80091c2:	d852      	bhi.n	800926a <_dtoa_r+0x212>
 80091c4:	4b5d      	ldr	r3, [pc, #372]	@ (800933c <_dtoa_r+0x2e4>)
 80091c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80091d2:	f7f7 fca3 	bl	8000b1c <__aeabi_dcmplt>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d049      	beq.n	800926e <_dtoa_r+0x216>
 80091da:	3f01      	subs	r7, #1
 80091dc:	2300      	movs	r3, #0
 80091de:	9310      	str	r3, [sp, #64]	@ 0x40
 80091e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80091e2:	1b9b      	subs	r3, r3, r6
 80091e4:	1e5a      	subs	r2, r3, #1
 80091e6:	bf45      	ittet	mi
 80091e8:	f1c3 0301 	rsbmi	r3, r3, #1
 80091ec:	9300      	strmi	r3, [sp, #0]
 80091ee:	2300      	movpl	r3, #0
 80091f0:	2300      	movmi	r3, #0
 80091f2:	9206      	str	r2, [sp, #24]
 80091f4:	bf54      	ite	pl
 80091f6:	9300      	strpl	r3, [sp, #0]
 80091f8:	9306      	strmi	r3, [sp, #24]
 80091fa:	2f00      	cmp	r7, #0
 80091fc:	db39      	blt.n	8009272 <_dtoa_r+0x21a>
 80091fe:	9b06      	ldr	r3, [sp, #24]
 8009200:	970d      	str	r7, [sp, #52]	@ 0x34
 8009202:	443b      	add	r3, r7
 8009204:	9306      	str	r3, [sp, #24]
 8009206:	2300      	movs	r3, #0
 8009208:	9308      	str	r3, [sp, #32]
 800920a:	9b07      	ldr	r3, [sp, #28]
 800920c:	2b09      	cmp	r3, #9
 800920e:	d863      	bhi.n	80092d8 <_dtoa_r+0x280>
 8009210:	2b05      	cmp	r3, #5
 8009212:	bfc4      	itt	gt
 8009214:	3b04      	subgt	r3, #4
 8009216:	9307      	strgt	r3, [sp, #28]
 8009218:	9b07      	ldr	r3, [sp, #28]
 800921a:	f1a3 0302 	sub.w	r3, r3, #2
 800921e:	bfcc      	ite	gt
 8009220:	2400      	movgt	r4, #0
 8009222:	2401      	movle	r4, #1
 8009224:	2b03      	cmp	r3, #3
 8009226:	d863      	bhi.n	80092f0 <_dtoa_r+0x298>
 8009228:	e8df f003 	tbb	[pc, r3]
 800922c:	2b375452 	.word	0x2b375452
 8009230:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009234:	441e      	add	r6, r3
 8009236:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800923a:	2b20      	cmp	r3, #32
 800923c:	bfc1      	itttt	gt
 800923e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009242:	409f      	lslgt	r7, r3
 8009244:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009248:	fa24 f303 	lsrgt.w	r3, r4, r3
 800924c:	bfd6      	itet	le
 800924e:	f1c3 0320 	rsble	r3, r3, #32
 8009252:	ea47 0003 	orrgt.w	r0, r7, r3
 8009256:	fa04 f003 	lslle.w	r0, r4, r3
 800925a:	f7f7 f973 	bl	8000544 <__aeabi_ui2d>
 800925e:	2201      	movs	r2, #1
 8009260:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009264:	3e01      	subs	r6, #1
 8009266:	9212      	str	r2, [sp, #72]	@ 0x48
 8009268:	e776      	b.n	8009158 <_dtoa_r+0x100>
 800926a:	2301      	movs	r3, #1
 800926c:	e7b7      	b.n	80091de <_dtoa_r+0x186>
 800926e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009270:	e7b6      	b.n	80091e0 <_dtoa_r+0x188>
 8009272:	9b00      	ldr	r3, [sp, #0]
 8009274:	1bdb      	subs	r3, r3, r7
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	427b      	negs	r3, r7
 800927a:	9308      	str	r3, [sp, #32]
 800927c:	2300      	movs	r3, #0
 800927e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009280:	e7c3      	b.n	800920a <_dtoa_r+0x1b2>
 8009282:	2301      	movs	r3, #1
 8009284:	9309      	str	r3, [sp, #36]	@ 0x24
 8009286:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009288:	eb07 0b03 	add.w	fp, r7, r3
 800928c:	f10b 0301 	add.w	r3, fp, #1
 8009290:	2b01      	cmp	r3, #1
 8009292:	9303      	str	r3, [sp, #12]
 8009294:	bfb8      	it	lt
 8009296:	2301      	movlt	r3, #1
 8009298:	e006      	b.n	80092a8 <_dtoa_r+0x250>
 800929a:	2301      	movs	r3, #1
 800929c:	9309      	str	r3, [sp, #36]	@ 0x24
 800929e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	dd28      	ble.n	80092f6 <_dtoa_r+0x29e>
 80092a4:	469b      	mov	fp, r3
 80092a6:	9303      	str	r3, [sp, #12]
 80092a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80092ac:	2100      	movs	r1, #0
 80092ae:	2204      	movs	r2, #4
 80092b0:	f102 0514 	add.w	r5, r2, #20
 80092b4:	429d      	cmp	r5, r3
 80092b6:	d926      	bls.n	8009306 <_dtoa_r+0x2ae>
 80092b8:	6041      	str	r1, [r0, #4]
 80092ba:	4648      	mov	r0, r9
 80092bc:	f000 fd9c 	bl	8009df8 <_Balloc>
 80092c0:	4682      	mov	sl, r0
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d142      	bne.n	800934c <_dtoa_r+0x2f4>
 80092c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009340 <_dtoa_r+0x2e8>)
 80092c8:	4602      	mov	r2, r0
 80092ca:	f240 11af 	movw	r1, #431	@ 0x1af
 80092ce:	e6da      	b.n	8009086 <_dtoa_r+0x2e>
 80092d0:	2300      	movs	r3, #0
 80092d2:	e7e3      	b.n	800929c <_dtoa_r+0x244>
 80092d4:	2300      	movs	r3, #0
 80092d6:	e7d5      	b.n	8009284 <_dtoa_r+0x22c>
 80092d8:	2401      	movs	r4, #1
 80092da:	2300      	movs	r3, #0
 80092dc:	9307      	str	r3, [sp, #28]
 80092de:	9409      	str	r4, [sp, #36]	@ 0x24
 80092e0:	f04f 3bff 	mov.w	fp, #4294967295
 80092e4:	2200      	movs	r2, #0
 80092e6:	f8cd b00c 	str.w	fp, [sp, #12]
 80092ea:	2312      	movs	r3, #18
 80092ec:	920c      	str	r2, [sp, #48]	@ 0x30
 80092ee:	e7db      	b.n	80092a8 <_dtoa_r+0x250>
 80092f0:	2301      	movs	r3, #1
 80092f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80092f4:	e7f4      	b.n	80092e0 <_dtoa_r+0x288>
 80092f6:	f04f 0b01 	mov.w	fp, #1
 80092fa:	f8cd b00c 	str.w	fp, [sp, #12]
 80092fe:	465b      	mov	r3, fp
 8009300:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009304:	e7d0      	b.n	80092a8 <_dtoa_r+0x250>
 8009306:	3101      	adds	r1, #1
 8009308:	0052      	lsls	r2, r2, #1
 800930a:	e7d1      	b.n	80092b0 <_dtoa_r+0x258>
 800930c:	f3af 8000 	nop.w
 8009310:	636f4361 	.word	0x636f4361
 8009314:	3fd287a7 	.word	0x3fd287a7
 8009318:	8b60c8b3 	.word	0x8b60c8b3
 800931c:	3fc68a28 	.word	0x3fc68a28
 8009320:	509f79fb 	.word	0x509f79fb
 8009324:	3fd34413 	.word	0x3fd34413
 8009328:	0800b1d5 	.word	0x0800b1d5
 800932c:	0800b1ec 	.word	0x0800b1ec
 8009330:	7ff00000 	.word	0x7ff00000
 8009334:	0800b1a5 	.word	0x0800b1a5
 8009338:	3ff80000 	.word	0x3ff80000
 800933c:	0800b340 	.word	0x0800b340
 8009340:	0800b244 	.word	0x0800b244
 8009344:	0800b1d1 	.word	0x0800b1d1
 8009348:	0800b1a4 	.word	0x0800b1a4
 800934c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009350:	6018      	str	r0, [r3, #0]
 8009352:	9b03      	ldr	r3, [sp, #12]
 8009354:	2b0e      	cmp	r3, #14
 8009356:	f200 80a1 	bhi.w	800949c <_dtoa_r+0x444>
 800935a:	2c00      	cmp	r4, #0
 800935c:	f000 809e 	beq.w	800949c <_dtoa_r+0x444>
 8009360:	2f00      	cmp	r7, #0
 8009362:	dd33      	ble.n	80093cc <_dtoa_r+0x374>
 8009364:	4b9c      	ldr	r3, [pc, #624]	@ (80095d8 <_dtoa_r+0x580>)
 8009366:	f007 020f 	and.w	r2, r7, #15
 800936a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800936e:	ed93 7b00 	vldr	d7, [r3]
 8009372:	05f8      	lsls	r0, r7, #23
 8009374:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009378:	ea4f 1427 	mov.w	r4, r7, asr #4
 800937c:	d516      	bpl.n	80093ac <_dtoa_r+0x354>
 800937e:	4b97      	ldr	r3, [pc, #604]	@ (80095dc <_dtoa_r+0x584>)
 8009380:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009384:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009388:	f7f7 fa80 	bl	800088c <__aeabi_ddiv>
 800938c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009390:	f004 040f 	and.w	r4, r4, #15
 8009394:	2603      	movs	r6, #3
 8009396:	4d91      	ldr	r5, [pc, #580]	@ (80095dc <_dtoa_r+0x584>)
 8009398:	b954      	cbnz	r4, 80093b0 <_dtoa_r+0x358>
 800939a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800939e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093a2:	f7f7 fa73 	bl	800088c <__aeabi_ddiv>
 80093a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093aa:	e028      	b.n	80093fe <_dtoa_r+0x3a6>
 80093ac:	2602      	movs	r6, #2
 80093ae:	e7f2      	b.n	8009396 <_dtoa_r+0x33e>
 80093b0:	07e1      	lsls	r1, r4, #31
 80093b2:	d508      	bpl.n	80093c6 <_dtoa_r+0x36e>
 80093b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80093b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093bc:	f7f7 f93c 	bl	8000638 <__aeabi_dmul>
 80093c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80093c4:	3601      	adds	r6, #1
 80093c6:	1064      	asrs	r4, r4, #1
 80093c8:	3508      	adds	r5, #8
 80093ca:	e7e5      	b.n	8009398 <_dtoa_r+0x340>
 80093cc:	f000 80af 	beq.w	800952e <_dtoa_r+0x4d6>
 80093d0:	427c      	negs	r4, r7
 80093d2:	4b81      	ldr	r3, [pc, #516]	@ (80095d8 <_dtoa_r+0x580>)
 80093d4:	4d81      	ldr	r5, [pc, #516]	@ (80095dc <_dtoa_r+0x584>)
 80093d6:	f004 020f 	and.w	r2, r4, #15
 80093da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80093e6:	f7f7 f927 	bl	8000638 <__aeabi_dmul>
 80093ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093ee:	1124      	asrs	r4, r4, #4
 80093f0:	2300      	movs	r3, #0
 80093f2:	2602      	movs	r6, #2
 80093f4:	2c00      	cmp	r4, #0
 80093f6:	f040 808f 	bne.w	8009518 <_dtoa_r+0x4c0>
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1d3      	bne.n	80093a6 <_dtoa_r+0x34e>
 80093fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009400:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 8094 	beq.w	8009532 <_dtoa_r+0x4da>
 800940a:	4b75      	ldr	r3, [pc, #468]	@ (80095e0 <_dtoa_r+0x588>)
 800940c:	2200      	movs	r2, #0
 800940e:	4620      	mov	r0, r4
 8009410:	4629      	mov	r1, r5
 8009412:	f7f7 fb83 	bl	8000b1c <__aeabi_dcmplt>
 8009416:	2800      	cmp	r0, #0
 8009418:	f000 808b 	beq.w	8009532 <_dtoa_r+0x4da>
 800941c:	9b03      	ldr	r3, [sp, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	f000 8087 	beq.w	8009532 <_dtoa_r+0x4da>
 8009424:	f1bb 0f00 	cmp.w	fp, #0
 8009428:	dd34      	ble.n	8009494 <_dtoa_r+0x43c>
 800942a:	4620      	mov	r0, r4
 800942c:	4b6d      	ldr	r3, [pc, #436]	@ (80095e4 <_dtoa_r+0x58c>)
 800942e:	2200      	movs	r2, #0
 8009430:	4629      	mov	r1, r5
 8009432:	f7f7 f901 	bl	8000638 <__aeabi_dmul>
 8009436:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800943a:	f107 38ff 	add.w	r8, r7, #4294967295
 800943e:	3601      	adds	r6, #1
 8009440:	465c      	mov	r4, fp
 8009442:	4630      	mov	r0, r6
 8009444:	f7f7 f88e 	bl	8000564 <__aeabi_i2d>
 8009448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800944c:	f7f7 f8f4 	bl	8000638 <__aeabi_dmul>
 8009450:	4b65      	ldr	r3, [pc, #404]	@ (80095e8 <_dtoa_r+0x590>)
 8009452:	2200      	movs	r2, #0
 8009454:	f7f6 ff3a 	bl	80002cc <__adddf3>
 8009458:	4605      	mov	r5, r0
 800945a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800945e:	2c00      	cmp	r4, #0
 8009460:	d16a      	bne.n	8009538 <_dtoa_r+0x4e0>
 8009462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009466:	4b61      	ldr	r3, [pc, #388]	@ (80095ec <_dtoa_r+0x594>)
 8009468:	2200      	movs	r2, #0
 800946a:	f7f6 ff2d 	bl	80002c8 <__aeabi_dsub>
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009476:	462a      	mov	r2, r5
 8009478:	4633      	mov	r3, r6
 800947a:	f7f7 fb6d 	bl	8000b58 <__aeabi_dcmpgt>
 800947e:	2800      	cmp	r0, #0
 8009480:	f040 8298 	bne.w	80099b4 <_dtoa_r+0x95c>
 8009484:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009488:	462a      	mov	r2, r5
 800948a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800948e:	f7f7 fb45 	bl	8000b1c <__aeabi_dcmplt>
 8009492:	bb38      	cbnz	r0, 80094e4 <_dtoa_r+0x48c>
 8009494:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009498:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800949c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f2c0 8157 	blt.w	8009752 <_dtoa_r+0x6fa>
 80094a4:	2f0e      	cmp	r7, #14
 80094a6:	f300 8154 	bgt.w	8009752 <_dtoa_r+0x6fa>
 80094aa:	4b4b      	ldr	r3, [pc, #300]	@ (80095d8 <_dtoa_r+0x580>)
 80094ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094b0:	ed93 7b00 	vldr	d7, [r3]
 80094b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	ed8d 7b00 	vstr	d7, [sp]
 80094bc:	f280 80e5 	bge.w	800968a <_dtoa_r+0x632>
 80094c0:	9b03      	ldr	r3, [sp, #12]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f300 80e1 	bgt.w	800968a <_dtoa_r+0x632>
 80094c8:	d10c      	bne.n	80094e4 <_dtoa_r+0x48c>
 80094ca:	4b48      	ldr	r3, [pc, #288]	@ (80095ec <_dtoa_r+0x594>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	ec51 0b17 	vmov	r0, r1, d7
 80094d2:	f7f7 f8b1 	bl	8000638 <__aeabi_dmul>
 80094d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094da:	f7f7 fb33 	bl	8000b44 <__aeabi_dcmpge>
 80094de:	2800      	cmp	r0, #0
 80094e0:	f000 8266 	beq.w	80099b0 <_dtoa_r+0x958>
 80094e4:	2400      	movs	r4, #0
 80094e6:	4625      	mov	r5, r4
 80094e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094ea:	4656      	mov	r6, sl
 80094ec:	ea6f 0803 	mvn.w	r8, r3
 80094f0:	2700      	movs	r7, #0
 80094f2:	4621      	mov	r1, r4
 80094f4:	4648      	mov	r0, r9
 80094f6:	f000 fcbf 	bl	8009e78 <_Bfree>
 80094fa:	2d00      	cmp	r5, #0
 80094fc:	f000 80bd 	beq.w	800967a <_dtoa_r+0x622>
 8009500:	b12f      	cbz	r7, 800950e <_dtoa_r+0x4b6>
 8009502:	42af      	cmp	r7, r5
 8009504:	d003      	beq.n	800950e <_dtoa_r+0x4b6>
 8009506:	4639      	mov	r1, r7
 8009508:	4648      	mov	r0, r9
 800950a:	f000 fcb5 	bl	8009e78 <_Bfree>
 800950e:	4629      	mov	r1, r5
 8009510:	4648      	mov	r0, r9
 8009512:	f000 fcb1 	bl	8009e78 <_Bfree>
 8009516:	e0b0      	b.n	800967a <_dtoa_r+0x622>
 8009518:	07e2      	lsls	r2, r4, #31
 800951a:	d505      	bpl.n	8009528 <_dtoa_r+0x4d0>
 800951c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009520:	f7f7 f88a 	bl	8000638 <__aeabi_dmul>
 8009524:	3601      	adds	r6, #1
 8009526:	2301      	movs	r3, #1
 8009528:	1064      	asrs	r4, r4, #1
 800952a:	3508      	adds	r5, #8
 800952c:	e762      	b.n	80093f4 <_dtoa_r+0x39c>
 800952e:	2602      	movs	r6, #2
 8009530:	e765      	b.n	80093fe <_dtoa_r+0x3a6>
 8009532:	9c03      	ldr	r4, [sp, #12]
 8009534:	46b8      	mov	r8, r7
 8009536:	e784      	b.n	8009442 <_dtoa_r+0x3ea>
 8009538:	4b27      	ldr	r3, [pc, #156]	@ (80095d8 <_dtoa_r+0x580>)
 800953a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800953c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009540:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009544:	4454      	add	r4, sl
 8009546:	2900      	cmp	r1, #0
 8009548:	d054      	beq.n	80095f4 <_dtoa_r+0x59c>
 800954a:	4929      	ldr	r1, [pc, #164]	@ (80095f0 <_dtoa_r+0x598>)
 800954c:	2000      	movs	r0, #0
 800954e:	f7f7 f99d 	bl	800088c <__aeabi_ddiv>
 8009552:	4633      	mov	r3, r6
 8009554:	462a      	mov	r2, r5
 8009556:	f7f6 feb7 	bl	80002c8 <__aeabi_dsub>
 800955a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800955e:	4656      	mov	r6, sl
 8009560:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009564:	f7f7 fb18 	bl	8000b98 <__aeabi_d2iz>
 8009568:	4605      	mov	r5, r0
 800956a:	f7f6 fffb 	bl	8000564 <__aeabi_i2d>
 800956e:	4602      	mov	r2, r0
 8009570:	460b      	mov	r3, r1
 8009572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009576:	f7f6 fea7 	bl	80002c8 <__aeabi_dsub>
 800957a:	3530      	adds	r5, #48	@ 0x30
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009584:	f806 5b01 	strb.w	r5, [r6], #1
 8009588:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800958c:	f7f7 fac6 	bl	8000b1c <__aeabi_dcmplt>
 8009590:	2800      	cmp	r0, #0
 8009592:	d172      	bne.n	800967a <_dtoa_r+0x622>
 8009594:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009598:	4911      	ldr	r1, [pc, #68]	@ (80095e0 <_dtoa_r+0x588>)
 800959a:	2000      	movs	r0, #0
 800959c:	f7f6 fe94 	bl	80002c8 <__aeabi_dsub>
 80095a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80095a4:	f7f7 faba 	bl	8000b1c <__aeabi_dcmplt>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	f040 80b4 	bne.w	8009716 <_dtoa_r+0x6be>
 80095ae:	42a6      	cmp	r6, r4
 80095b0:	f43f af70 	beq.w	8009494 <_dtoa_r+0x43c>
 80095b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80095b8:	4b0a      	ldr	r3, [pc, #40]	@ (80095e4 <_dtoa_r+0x58c>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	f7f7 f83c 	bl	8000638 <__aeabi_dmul>
 80095c0:	4b08      	ldr	r3, [pc, #32]	@ (80095e4 <_dtoa_r+0x58c>)
 80095c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80095c6:	2200      	movs	r2, #0
 80095c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095cc:	f7f7 f834 	bl	8000638 <__aeabi_dmul>
 80095d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095d4:	e7c4      	b.n	8009560 <_dtoa_r+0x508>
 80095d6:	bf00      	nop
 80095d8:	0800b340 	.word	0x0800b340
 80095dc:	0800b318 	.word	0x0800b318
 80095e0:	3ff00000 	.word	0x3ff00000
 80095e4:	40240000 	.word	0x40240000
 80095e8:	401c0000 	.word	0x401c0000
 80095ec:	40140000 	.word	0x40140000
 80095f0:	3fe00000 	.word	0x3fe00000
 80095f4:	4631      	mov	r1, r6
 80095f6:	4628      	mov	r0, r5
 80095f8:	f7f7 f81e 	bl	8000638 <__aeabi_dmul>
 80095fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009600:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009602:	4656      	mov	r6, sl
 8009604:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009608:	f7f7 fac6 	bl	8000b98 <__aeabi_d2iz>
 800960c:	4605      	mov	r5, r0
 800960e:	f7f6 ffa9 	bl	8000564 <__aeabi_i2d>
 8009612:	4602      	mov	r2, r0
 8009614:	460b      	mov	r3, r1
 8009616:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800961a:	f7f6 fe55 	bl	80002c8 <__aeabi_dsub>
 800961e:	3530      	adds	r5, #48	@ 0x30
 8009620:	f806 5b01 	strb.w	r5, [r6], #1
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	42a6      	cmp	r6, r4
 800962a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800962e:	f04f 0200 	mov.w	r2, #0
 8009632:	d124      	bne.n	800967e <_dtoa_r+0x626>
 8009634:	4baf      	ldr	r3, [pc, #700]	@ (80098f4 <_dtoa_r+0x89c>)
 8009636:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800963a:	f7f6 fe47 	bl	80002cc <__adddf3>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009646:	f7f7 fa87 	bl	8000b58 <__aeabi_dcmpgt>
 800964a:	2800      	cmp	r0, #0
 800964c:	d163      	bne.n	8009716 <_dtoa_r+0x6be>
 800964e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009652:	49a8      	ldr	r1, [pc, #672]	@ (80098f4 <_dtoa_r+0x89c>)
 8009654:	2000      	movs	r0, #0
 8009656:	f7f6 fe37 	bl	80002c8 <__aeabi_dsub>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009662:	f7f7 fa5b 	bl	8000b1c <__aeabi_dcmplt>
 8009666:	2800      	cmp	r0, #0
 8009668:	f43f af14 	beq.w	8009494 <_dtoa_r+0x43c>
 800966c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800966e:	1e73      	subs	r3, r6, #1
 8009670:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009672:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009676:	2b30      	cmp	r3, #48	@ 0x30
 8009678:	d0f8      	beq.n	800966c <_dtoa_r+0x614>
 800967a:	4647      	mov	r7, r8
 800967c:	e03b      	b.n	80096f6 <_dtoa_r+0x69e>
 800967e:	4b9e      	ldr	r3, [pc, #632]	@ (80098f8 <_dtoa_r+0x8a0>)
 8009680:	f7f6 ffda 	bl	8000638 <__aeabi_dmul>
 8009684:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009688:	e7bc      	b.n	8009604 <_dtoa_r+0x5ac>
 800968a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800968e:	4656      	mov	r6, sl
 8009690:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009694:	4620      	mov	r0, r4
 8009696:	4629      	mov	r1, r5
 8009698:	f7f7 f8f8 	bl	800088c <__aeabi_ddiv>
 800969c:	f7f7 fa7c 	bl	8000b98 <__aeabi_d2iz>
 80096a0:	4680      	mov	r8, r0
 80096a2:	f7f6 ff5f 	bl	8000564 <__aeabi_i2d>
 80096a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096aa:	f7f6 ffc5 	bl	8000638 <__aeabi_dmul>
 80096ae:	4602      	mov	r2, r0
 80096b0:	460b      	mov	r3, r1
 80096b2:	4620      	mov	r0, r4
 80096b4:	4629      	mov	r1, r5
 80096b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80096ba:	f7f6 fe05 	bl	80002c8 <__aeabi_dsub>
 80096be:	f806 4b01 	strb.w	r4, [r6], #1
 80096c2:	9d03      	ldr	r5, [sp, #12]
 80096c4:	eba6 040a 	sub.w	r4, r6, sl
 80096c8:	42a5      	cmp	r5, r4
 80096ca:	4602      	mov	r2, r0
 80096cc:	460b      	mov	r3, r1
 80096ce:	d133      	bne.n	8009738 <_dtoa_r+0x6e0>
 80096d0:	f7f6 fdfc 	bl	80002cc <__adddf3>
 80096d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096d8:	4604      	mov	r4, r0
 80096da:	460d      	mov	r5, r1
 80096dc:	f7f7 fa3c 	bl	8000b58 <__aeabi_dcmpgt>
 80096e0:	b9c0      	cbnz	r0, 8009714 <_dtoa_r+0x6bc>
 80096e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096e6:	4620      	mov	r0, r4
 80096e8:	4629      	mov	r1, r5
 80096ea:	f7f7 fa0d 	bl	8000b08 <__aeabi_dcmpeq>
 80096ee:	b110      	cbz	r0, 80096f6 <_dtoa_r+0x69e>
 80096f0:	f018 0f01 	tst.w	r8, #1
 80096f4:	d10e      	bne.n	8009714 <_dtoa_r+0x6bc>
 80096f6:	9902      	ldr	r1, [sp, #8]
 80096f8:	4648      	mov	r0, r9
 80096fa:	f000 fbbd 	bl	8009e78 <_Bfree>
 80096fe:	2300      	movs	r3, #0
 8009700:	7033      	strb	r3, [r6, #0]
 8009702:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009704:	3701      	adds	r7, #1
 8009706:	601f      	str	r7, [r3, #0]
 8009708:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 824b 	beq.w	8009ba6 <_dtoa_r+0xb4e>
 8009710:	601e      	str	r6, [r3, #0]
 8009712:	e248      	b.n	8009ba6 <_dtoa_r+0xb4e>
 8009714:	46b8      	mov	r8, r7
 8009716:	4633      	mov	r3, r6
 8009718:	461e      	mov	r6, r3
 800971a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800971e:	2a39      	cmp	r2, #57	@ 0x39
 8009720:	d106      	bne.n	8009730 <_dtoa_r+0x6d8>
 8009722:	459a      	cmp	sl, r3
 8009724:	d1f8      	bne.n	8009718 <_dtoa_r+0x6c0>
 8009726:	2230      	movs	r2, #48	@ 0x30
 8009728:	f108 0801 	add.w	r8, r8, #1
 800972c:	f88a 2000 	strb.w	r2, [sl]
 8009730:	781a      	ldrb	r2, [r3, #0]
 8009732:	3201      	adds	r2, #1
 8009734:	701a      	strb	r2, [r3, #0]
 8009736:	e7a0      	b.n	800967a <_dtoa_r+0x622>
 8009738:	4b6f      	ldr	r3, [pc, #444]	@ (80098f8 <_dtoa_r+0x8a0>)
 800973a:	2200      	movs	r2, #0
 800973c:	f7f6 ff7c 	bl	8000638 <__aeabi_dmul>
 8009740:	2200      	movs	r2, #0
 8009742:	2300      	movs	r3, #0
 8009744:	4604      	mov	r4, r0
 8009746:	460d      	mov	r5, r1
 8009748:	f7f7 f9de 	bl	8000b08 <__aeabi_dcmpeq>
 800974c:	2800      	cmp	r0, #0
 800974e:	d09f      	beq.n	8009690 <_dtoa_r+0x638>
 8009750:	e7d1      	b.n	80096f6 <_dtoa_r+0x69e>
 8009752:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009754:	2a00      	cmp	r2, #0
 8009756:	f000 80ea 	beq.w	800992e <_dtoa_r+0x8d6>
 800975a:	9a07      	ldr	r2, [sp, #28]
 800975c:	2a01      	cmp	r2, #1
 800975e:	f300 80cd 	bgt.w	80098fc <_dtoa_r+0x8a4>
 8009762:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009764:	2a00      	cmp	r2, #0
 8009766:	f000 80c1 	beq.w	80098ec <_dtoa_r+0x894>
 800976a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800976e:	9c08      	ldr	r4, [sp, #32]
 8009770:	9e00      	ldr	r6, [sp, #0]
 8009772:	9a00      	ldr	r2, [sp, #0]
 8009774:	441a      	add	r2, r3
 8009776:	9200      	str	r2, [sp, #0]
 8009778:	9a06      	ldr	r2, [sp, #24]
 800977a:	2101      	movs	r1, #1
 800977c:	441a      	add	r2, r3
 800977e:	4648      	mov	r0, r9
 8009780:	9206      	str	r2, [sp, #24]
 8009782:	f000 fc2d 	bl	8009fe0 <__i2b>
 8009786:	4605      	mov	r5, r0
 8009788:	b166      	cbz	r6, 80097a4 <_dtoa_r+0x74c>
 800978a:	9b06      	ldr	r3, [sp, #24]
 800978c:	2b00      	cmp	r3, #0
 800978e:	dd09      	ble.n	80097a4 <_dtoa_r+0x74c>
 8009790:	42b3      	cmp	r3, r6
 8009792:	9a00      	ldr	r2, [sp, #0]
 8009794:	bfa8      	it	ge
 8009796:	4633      	movge	r3, r6
 8009798:	1ad2      	subs	r2, r2, r3
 800979a:	9200      	str	r2, [sp, #0]
 800979c:	9a06      	ldr	r2, [sp, #24]
 800979e:	1af6      	subs	r6, r6, r3
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	9306      	str	r3, [sp, #24]
 80097a4:	9b08      	ldr	r3, [sp, #32]
 80097a6:	b30b      	cbz	r3, 80097ec <_dtoa_r+0x794>
 80097a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f000 80c6 	beq.w	800993c <_dtoa_r+0x8e4>
 80097b0:	2c00      	cmp	r4, #0
 80097b2:	f000 80c0 	beq.w	8009936 <_dtoa_r+0x8de>
 80097b6:	4629      	mov	r1, r5
 80097b8:	4622      	mov	r2, r4
 80097ba:	4648      	mov	r0, r9
 80097bc:	f000 fcc8 	bl	800a150 <__pow5mult>
 80097c0:	9a02      	ldr	r2, [sp, #8]
 80097c2:	4601      	mov	r1, r0
 80097c4:	4605      	mov	r5, r0
 80097c6:	4648      	mov	r0, r9
 80097c8:	f000 fc20 	bl	800a00c <__multiply>
 80097cc:	9902      	ldr	r1, [sp, #8]
 80097ce:	4680      	mov	r8, r0
 80097d0:	4648      	mov	r0, r9
 80097d2:	f000 fb51 	bl	8009e78 <_Bfree>
 80097d6:	9b08      	ldr	r3, [sp, #32]
 80097d8:	1b1b      	subs	r3, r3, r4
 80097da:	9308      	str	r3, [sp, #32]
 80097dc:	f000 80b1 	beq.w	8009942 <_dtoa_r+0x8ea>
 80097e0:	9a08      	ldr	r2, [sp, #32]
 80097e2:	4641      	mov	r1, r8
 80097e4:	4648      	mov	r0, r9
 80097e6:	f000 fcb3 	bl	800a150 <__pow5mult>
 80097ea:	9002      	str	r0, [sp, #8]
 80097ec:	2101      	movs	r1, #1
 80097ee:	4648      	mov	r0, r9
 80097f0:	f000 fbf6 	bl	8009fe0 <__i2b>
 80097f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097f6:	4604      	mov	r4, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 81d8 	beq.w	8009bae <_dtoa_r+0xb56>
 80097fe:	461a      	mov	r2, r3
 8009800:	4601      	mov	r1, r0
 8009802:	4648      	mov	r0, r9
 8009804:	f000 fca4 	bl	800a150 <__pow5mult>
 8009808:	9b07      	ldr	r3, [sp, #28]
 800980a:	2b01      	cmp	r3, #1
 800980c:	4604      	mov	r4, r0
 800980e:	f300 809f 	bgt.w	8009950 <_dtoa_r+0x8f8>
 8009812:	9b04      	ldr	r3, [sp, #16]
 8009814:	2b00      	cmp	r3, #0
 8009816:	f040 8097 	bne.w	8009948 <_dtoa_r+0x8f0>
 800981a:	9b05      	ldr	r3, [sp, #20]
 800981c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009820:	2b00      	cmp	r3, #0
 8009822:	f040 8093 	bne.w	800994c <_dtoa_r+0x8f4>
 8009826:	9b05      	ldr	r3, [sp, #20]
 8009828:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800982c:	0d1b      	lsrs	r3, r3, #20
 800982e:	051b      	lsls	r3, r3, #20
 8009830:	b133      	cbz	r3, 8009840 <_dtoa_r+0x7e8>
 8009832:	9b00      	ldr	r3, [sp, #0]
 8009834:	3301      	adds	r3, #1
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	9b06      	ldr	r3, [sp, #24]
 800983a:	3301      	adds	r3, #1
 800983c:	9306      	str	r3, [sp, #24]
 800983e:	2301      	movs	r3, #1
 8009840:	9308      	str	r3, [sp, #32]
 8009842:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009844:	2b00      	cmp	r3, #0
 8009846:	f000 81b8 	beq.w	8009bba <_dtoa_r+0xb62>
 800984a:	6923      	ldr	r3, [r4, #16]
 800984c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009850:	6918      	ldr	r0, [r3, #16]
 8009852:	f000 fb79 	bl	8009f48 <__hi0bits>
 8009856:	f1c0 0020 	rsb	r0, r0, #32
 800985a:	9b06      	ldr	r3, [sp, #24]
 800985c:	4418      	add	r0, r3
 800985e:	f010 001f 	ands.w	r0, r0, #31
 8009862:	f000 8082 	beq.w	800996a <_dtoa_r+0x912>
 8009866:	f1c0 0320 	rsb	r3, r0, #32
 800986a:	2b04      	cmp	r3, #4
 800986c:	dd73      	ble.n	8009956 <_dtoa_r+0x8fe>
 800986e:	9b00      	ldr	r3, [sp, #0]
 8009870:	f1c0 001c 	rsb	r0, r0, #28
 8009874:	4403      	add	r3, r0
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	9b06      	ldr	r3, [sp, #24]
 800987a:	4403      	add	r3, r0
 800987c:	4406      	add	r6, r0
 800987e:	9306      	str	r3, [sp, #24]
 8009880:	9b00      	ldr	r3, [sp, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	dd05      	ble.n	8009892 <_dtoa_r+0x83a>
 8009886:	9902      	ldr	r1, [sp, #8]
 8009888:	461a      	mov	r2, r3
 800988a:	4648      	mov	r0, r9
 800988c:	f000 fcba 	bl	800a204 <__lshift>
 8009890:	9002      	str	r0, [sp, #8]
 8009892:	9b06      	ldr	r3, [sp, #24]
 8009894:	2b00      	cmp	r3, #0
 8009896:	dd05      	ble.n	80098a4 <_dtoa_r+0x84c>
 8009898:	4621      	mov	r1, r4
 800989a:	461a      	mov	r2, r3
 800989c:	4648      	mov	r0, r9
 800989e:	f000 fcb1 	bl	800a204 <__lshift>
 80098a2:	4604      	mov	r4, r0
 80098a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d061      	beq.n	800996e <_dtoa_r+0x916>
 80098aa:	9802      	ldr	r0, [sp, #8]
 80098ac:	4621      	mov	r1, r4
 80098ae:	f000 fd15 	bl	800a2dc <__mcmp>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	da5b      	bge.n	800996e <_dtoa_r+0x916>
 80098b6:	2300      	movs	r3, #0
 80098b8:	9902      	ldr	r1, [sp, #8]
 80098ba:	220a      	movs	r2, #10
 80098bc:	4648      	mov	r0, r9
 80098be:	f000 fafd 	bl	8009ebc <__multadd>
 80098c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098c4:	9002      	str	r0, [sp, #8]
 80098c6:	f107 38ff 	add.w	r8, r7, #4294967295
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f000 8177 	beq.w	8009bbe <_dtoa_r+0xb66>
 80098d0:	4629      	mov	r1, r5
 80098d2:	2300      	movs	r3, #0
 80098d4:	220a      	movs	r2, #10
 80098d6:	4648      	mov	r0, r9
 80098d8:	f000 faf0 	bl	8009ebc <__multadd>
 80098dc:	f1bb 0f00 	cmp.w	fp, #0
 80098e0:	4605      	mov	r5, r0
 80098e2:	dc6f      	bgt.n	80099c4 <_dtoa_r+0x96c>
 80098e4:	9b07      	ldr	r3, [sp, #28]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	dc49      	bgt.n	800997e <_dtoa_r+0x926>
 80098ea:	e06b      	b.n	80099c4 <_dtoa_r+0x96c>
 80098ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80098ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80098f2:	e73c      	b.n	800976e <_dtoa_r+0x716>
 80098f4:	3fe00000 	.word	0x3fe00000
 80098f8:	40240000 	.word	0x40240000
 80098fc:	9b03      	ldr	r3, [sp, #12]
 80098fe:	1e5c      	subs	r4, r3, #1
 8009900:	9b08      	ldr	r3, [sp, #32]
 8009902:	42a3      	cmp	r3, r4
 8009904:	db09      	blt.n	800991a <_dtoa_r+0x8c2>
 8009906:	1b1c      	subs	r4, r3, r4
 8009908:	9b03      	ldr	r3, [sp, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	f6bf af30 	bge.w	8009770 <_dtoa_r+0x718>
 8009910:	9b00      	ldr	r3, [sp, #0]
 8009912:	9a03      	ldr	r2, [sp, #12]
 8009914:	1a9e      	subs	r6, r3, r2
 8009916:	2300      	movs	r3, #0
 8009918:	e72b      	b.n	8009772 <_dtoa_r+0x71a>
 800991a:	9b08      	ldr	r3, [sp, #32]
 800991c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800991e:	9408      	str	r4, [sp, #32]
 8009920:	1ae3      	subs	r3, r4, r3
 8009922:	441a      	add	r2, r3
 8009924:	9e00      	ldr	r6, [sp, #0]
 8009926:	9b03      	ldr	r3, [sp, #12]
 8009928:	920d      	str	r2, [sp, #52]	@ 0x34
 800992a:	2400      	movs	r4, #0
 800992c:	e721      	b.n	8009772 <_dtoa_r+0x71a>
 800992e:	9c08      	ldr	r4, [sp, #32]
 8009930:	9e00      	ldr	r6, [sp, #0]
 8009932:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009934:	e728      	b.n	8009788 <_dtoa_r+0x730>
 8009936:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800993a:	e751      	b.n	80097e0 <_dtoa_r+0x788>
 800993c:	9a08      	ldr	r2, [sp, #32]
 800993e:	9902      	ldr	r1, [sp, #8]
 8009940:	e750      	b.n	80097e4 <_dtoa_r+0x78c>
 8009942:	f8cd 8008 	str.w	r8, [sp, #8]
 8009946:	e751      	b.n	80097ec <_dtoa_r+0x794>
 8009948:	2300      	movs	r3, #0
 800994a:	e779      	b.n	8009840 <_dtoa_r+0x7e8>
 800994c:	9b04      	ldr	r3, [sp, #16]
 800994e:	e777      	b.n	8009840 <_dtoa_r+0x7e8>
 8009950:	2300      	movs	r3, #0
 8009952:	9308      	str	r3, [sp, #32]
 8009954:	e779      	b.n	800984a <_dtoa_r+0x7f2>
 8009956:	d093      	beq.n	8009880 <_dtoa_r+0x828>
 8009958:	9a00      	ldr	r2, [sp, #0]
 800995a:	331c      	adds	r3, #28
 800995c:	441a      	add	r2, r3
 800995e:	9200      	str	r2, [sp, #0]
 8009960:	9a06      	ldr	r2, [sp, #24]
 8009962:	441a      	add	r2, r3
 8009964:	441e      	add	r6, r3
 8009966:	9206      	str	r2, [sp, #24]
 8009968:	e78a      	b.n	8009880 <_dtoa_r+0x828>
 800996a:	4603      	mov	r3, r0
 800996c:	e7f4      	b.n	8009958 <_dtoa_r+0x900>
 800996e:	9b03      	ldr	r3, [sp, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	46b8      	mov	r8, r7
 8009974:	dc20      	bgt.n	80099b8 <_dtoa_r+0x960>
 8009976:	469b      	mov	fp, r3
 8009978:	9b07      	ldr	r3, [sp, #28]
 800997a:	2b02      	cmp	r3, #2
 800997c:	dd1e      	ble.n	80099bc <_dtoa_r+0x964>
 800997e:	f1bb 0f00 	cmp.w	fp, #0
 8009982:	f47f adb1 	bne.w	80094e8 <_dtoa_r+0x490>
 8009986:	4621      	mov	r1, r4
 8009988:	465b      	mov	r3, fp
 800998a:	2205      	movs	r2, #5
 800998c:	4648      	mov	r0, r9
 800998e:	f000 fa95 	bl	8009ebc <__multadd>
 8009992:	4601      	mov	r1, r0
 8009994:	4604      	mov	r4, r0
 8009996:	9802      	ldr	r0, [sp, #8]
 8009998:	f000 fca0 	bl	800a2dc <__mcmp>
 800999c:	2800      	cmp	r0, #0
 800999e:	f77f ada3 	ble.w	80094e8 <_dtoa_r+0x490>
 80099a2:	4656      	mov	r6, sl
 80099a4:	2331      	movs	r3, #49	@ 0x31
 80099a6:	f806 3b01 	strb.w	r3, [r6], #1
 80099aa:	f108 0801 	add.w	r8, r8, #1
 80099ae:	e59f      	b.n	80094f0 <_dtoa_r+0x498>
 80099b0:	9c03      	ldr	r4, [sp, #12]
 80099b2:	46b8      	mov	r8, r7
 80099b4:	4625      	mov	r5, r4
 80099b6:	e7f4      	b.n	80099a2 <_dtoa_r+0x94a>
 80099b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80099bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f000 8101 	beq.w	8009bc6 <_dtoa_r+0xb6e>
 80099c4:	2e00      	cmp	r6, #0
 80099c6:	dd05      	ble.n	80099d4 <_dtoa_r+0x97c>
 80099c8:	4629      	mov	r1, r5
 80099ca:	4632      	mov	r2, r6
 80099cc:	4648      	mov	r0, r9
 80099ce:	f000 fc19 	bl	800a204 <__lshift>
 80099d2:	4605      	mov	r5, r0
 80099d4:	9b08      	ldr	r3, [sp, #32]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d05c      	beq.n	8009a94 <_dtoa_r+0xa3c>
 80099da:	6869      	ldr	r1, [r5, #4]
 80099dc:	4648      	mov	r0, r9
 80099de:	f000 fa0b 	bl	8009df8 <_Balloc>
 80099e2:	4606      	mov	r6, r0
 80099e4:	b928      	cbnz	r0, 80099f2 <_dtoa_r+0x99a>
 80099e6:	4b82      	ldr	r3, [pc, #520]	@ (8009bf0 <_dtoa_r+0xb98>)
 80099e8:	4602      	mov	r2, r0
 80099ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80099ee:	f7ff bb4a 	b.w	8009086 <_dtoa_r+0x2e>
 80099f2:	692a      	ldr	r2, [r5, #16]
 80099f4:	3202      	adds	r2, #2
 80099f6:	0092      	lsls	r2, r2, #2
 80099f8:	f105 010c 	add.w	r1, r5, #12
 80099fc:	300c      	adds	r0, #12
 80099fe:	f7ff fa94 	bl	8008f2a <memcpy>
 8009a02:	2201      	movs	r2, #1
 8009a04:	4631      	mov	r1, r6
 8009a06:	4648      	mov	r0, r9
 8009a08:	f000 fbfc 	bl	800a204 <__lshift>
 8009a0c:	f10a 0301 	add.w	r3, sl, #1
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	eb0a 030b 	add.w	r3, sl, fp
 8009a16:	9308      	str	r3, [sp, #32]
 8009a18:	9b04      	ldr	r3, [sp, #16]
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	462f      	mov	r7, r5
 8009a20:	9306      	str	r3, [sp, #24]
 8009a22:	4605      	mov	r5, r0
 8009a24:	9b00      	ldr	r3, [sp, #0]
 8009a26:	9802      	ldr	r0, [sp, #8]
 8009a28:	4621      	mov	r1, r4
 8009a2a:	f103 3bff 	add.w	fp, r3, #4294967295
 8009a2e:	f7ff fa8a 	bl	8008f46 <quorem>
 8009a32:	4603      	mov	r3, r0
 8009a34:	3330      	adds	r3, #48	@ 0x30
 8009a36:	9003      	str	r0, [sp, #12]
 8009a38:	4639      	mov	r1, r7
 8009a3a:	9802      	ldr	r0, [sp, #8]
 8009a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a3e:	f000 fc4d 	bl	800a2dc <__mcmp>
 8009a42:	462a      	mov	r2, r5
 8009a44:	9004      	str	r0, [sp, #16]
 8009a46:	4621      	mov	r1, r4
 8009a48:	4648      	mov	r0, r9
 8009a4a:	f000 fc63 	bl	800a314 <__mdiff>
 8009a4e:	68c2      	ldr	r2, [r0, #12]
 8009a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a52:	4606      	mov	r6, r0
 8009a54:	bb02      	cbnz	r2, 8009a98 <_dtoa_r+0xa40>
 8009a56:	4601      	mov	r1, r0
 8009a58:	9802      	ldr	r0, [sp, #8]
 8009a5a:	f000 fc3f 	bl	800a2dc <__mcmp>
 8009a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a60:	4602      	mov	r2, r0
 8009a62:	4631      	mov	r1, r6
 8009a64:	4648      	mov	r0, r9
 8009a66:	920c      	str	r2, [sp, #48]	@ 0x30
 8009a68:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a6a:	f000 fa05 	bl	8009e78 <_Bfree>
 8009a6e:	9b07      	ldr	r3, [sp, #28]
 8009a70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009a72:	9e00      	ldr	r6, [sp, #0]
 8009a74:	ea42 0103 	orr.w	r1, r2, r3
 8009a78:	9b06      	ldr	r3, [sp, #24]
 8009a7a:	4319      	orrs	r1, r3
 8009a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a7e:	d10d      	bne.n	8009a9c <_dtoa_r+0xa44>
 8009a80:	2b39      	cmp	r3, #57	@ 0x39
 8009a82:	d027      	beq.n	8009ad4 <_dtoa_r+0xa7c>
 8009a84:	9a04      	ldr	r2, [sp, #16]
 8009a86:	2a00      	cmp	r2, #0
 8009a88:	dd01      	ble.n	8009a8e <_dtoa_r+0xa36>
 8009a8a:	9b03      	ldr	r3, [sp, #12]
 8009a8c:	3331      	adds	r3, #49	@ 0x31
 8009a8e:	f88b 3000 	strb.w	r3, [fp]
 8009a92:	e52e      	b.n	80094f2 <_dtoa_r+0x49a>
 8009a94:	4628      	mov	r0, r5
 8009a96:	e7b9      	b.n	8009a0c <_dtoa_r+0x9b4>
 8009a98:	2201      	movs	r2, #1
 8009a9a:	e7e2      	b.n	8009a62 <_dtoa_r+0xa0a>
 8009a9c:	9904      	ldr	r1, [sp, #16]
 8009a9e:	2900      	cmp	r1, #0
 8009aa0:	db04      	blt.n	8009aac <_dtoa_r+0xa54>
 8009aa2:	9807      	ldr	r0, [sp, #28]
 8009aa4:	4301      	orrs	r1, r0
 8009aa6:	9806      	ldr	r0, [sp, #24]
 8009aa8:	4301      	orrs	r1, r0
 8009aaa:	d120      	bne.n	8009aee <_dtoa_r+0xa96>
 8009aac:	2a00      	cmp	r2, #0
 8009aae:	ddee      	ble.n	8009a8e <_dtoa_r+0xa36>
 8009ab0:	9902      	ldr	r1, [sp, #8]
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	4648      	mov	r0, r9
 8009ab8:	f000 fba4 	bl	800a204 <__lshift>
 8009abc:	4621      	mov	r1, r4
 8009abe:	9002      	str	r0, [sp, #8]
 8009ac0:	f000 fc0c 	bl	800a2dc <__mcmp>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	9b00      	ldr	r3, [sp, #0]
 8009ac8:	dc02      	bgt.n	8009ad0 <_dtoa_r+0xa78>
 8009aca:	d1e0      	bne.n	8009a8e <_dtoa_r+0xa36>
 8009acc:	07da      	lsls	r2, r3, #31
 8009ace:	d5de      	bpl.n	8009a8e <_dtoa_r+0xa36>
 8009ad0:	2b39      	cmp	r3, #57	@ 0x39
 8009ad2:	d1da      	bne.n	8009a8a <_dtoa_r+0xa32>
 8009ad4:	2339      	movs	r3, #57	@ 0x39
 8009ad6:	f88b 3000 	strb.w	r3, [fp]
 8009ada:	4633      	mov	r3, r6
 8009adc:	461e      	mov	r6, r3
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009ae4:	2a39      	cmp	r2, #57	@ 0x39
 8009ae6:	d04e      	beq.n	8009b86 <_dtoa_r+0xb2e>
 8009ae8:	3201      	adds	r2, #1
 8009aea:	701a      	strb	r2, [r3, #0]
 8009aec:	e501      	b.n	80094f2 <_dtoa_r+0x49a>
 8009aee:	2a00      	cmp	r2, #0
 8009af0:	dd03      	ble.n	8009afa <_dtoa_r+0xaa2>
 8009af2:	2b39      	cmp	r3, #57	@ 0x39
 8009af4:	d0ee      	beq.n	8009ad4 <_dtoa_r+0xa7c>
 8009af6:	3301      	adds	r3, #1
 8009af8:	e7c9      	b.n	8009a8e <_dtoa_r+0xa36>
 8009afa:	9a00      	ldr	r2, [sp, #0]
 8009afc:	9908      	ldr	r1, [sp, #32]
 8009afe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009b02:	428a      	cmp	r2, r1
 8009b04:	d028      	beq.n	8009b58 <_dtoa_r+0xb00>
 8009b06:	9902      	ldr	r1, [sp, #8]
 8009b08:	2300      	movs	r3, #0
 8009b0a:	220a      	movs	r2, #10
 8009b0c:	4648      	mov	r0, r9
 8009b0e:	f000 f9d5 	bl	8009ebc <__multadd>
 8009b12:	42af      	cmp	r7, r5
 8009b14:	9002      	str	r0, [sp, #8]
 8009b16:	f04f 0300 	mov.w	r3, #0
 8009b1a:	f04f 020a 	mov.w	r2, #10
 8009b1e:	4639      	mov	r1, r7
 8009b20:	4648      	mov	r0, r9
 8009b22:	d107      	bne.n	8009b34 <_dtoa_r+0xadc>
 8009b24:	f000 f9ca 	bl	8009ebc <__multadd>
 8009b28:	4607      	mov	r7, r0
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	9b00      	ldr	r3, [sp, #0]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	e777      	b.n	8009a24 <_dtoa_r+0x9cc>
 8009b34:	f000 f9c2 	bl	8009ebc <__multadd>
 8009b38:	4629      	mov	r1, r5
 8009b3a:	4607      	mov	r7, r0
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	220a      	movs	r2, #10
 8009b40:	4648      	mov	r0, r9
 8009b42:	f000 f9bb 	bl	8009ebc <__multadd>
 8009b46:	4605      	mov	r5, r0
 8009b48:	e7f0      	b.n	8009b2c <_dtoa_r+0xad4>
 8009b4a:	f1bb 0f00 	cmp.w	fp, #0
 8009b4e:	bfcc      	ite	gt
 8009b50:	465e      	movgt	r6, fp
 8009b52:	2601      	movle	r6, #1
 8009b54:	4456      	add	r6, sl
 8009b56:	2700      	movs	r7, #0
 8009b58:	9902      	ldr	r1, [sp, #8]
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	4648      	mov	r0, r9
 8009b60:	f000 fb50 	bl	800a204 <__lshift>
 8009b64:	4621      	mov	r1, r4
 8009b66:	9002      	str	r0, [sp, #8]
 8009b68:	f000 fbb8 	bl	800a2dc <__mcmp>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	dcb4      	bgt.n	8009ada <_dtoa_r+0xa82>
 8009b70:	d102      	bne.n	8009b78 <_dtoa_r+0xb20>
 8009b72:	9b00      	ldr	r3, [sp, #0]
 8009b74:	07db      	lsls	r3, r3, #31
 8009b76:	d4b0      	bmi.n	8009ada <_dtoa_r+0xa82>
 8009b78:	4633      	mov	r3, r6
 8009b7a:	461e      	mov	r6, r3
 8009b7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b80:	2a30      	cmp	r2, #48	@ 0x30
 8009b82:	d0fa      	beq.n	8009b7a <_dtoa_r+0xb22>
 8009b84:	e4b5      	b.n	80094f2 <_dtoa_r+0x49a>
 8009b86:	459a      	cmp	sl, r3
 8009b88:	d1a8      	bne.n	8009adc <_dtoa_r+0xa84>
 8009b8a:	2331      	movs	r3, #49	@ 0x31
 8009b8c:	f108 0801 	add.w	r8, r8, #1
 8009b90:	f88a 3000 	strb.w	r3, [sl]
 8009b94:	e4ad      	b.n	80094f2 <_dtoa_r+0x49a>
 8009b96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b98:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009bf4 <_dtoa_r+0xb9c>
 8009b9c:	b11b      	cbz	r3, 8009ba6 <_dtoa_r+0xb4e>
 8009b9e:	f10a 0308 	add.w	r3, sl, #8
 8009ba2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009ba4:	6013      	str	r3, [r2, #0]
 8009ba6:	4650      	mov	r0, sl
 8009ba8:	b017      	add	sp, #92	@ 0x5c
 8009baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bae:	9b07      	ldr	r3, [sp, #28]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	f77f ae2e 	ble.w	8009812 <_dtoa_r+0x7ba>
 8009bb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bb8:	9308      	str	r3, [sp, #32]
 8009bba:	2001      	movs	r0, #1
 8009bbc:	e64d      	b.n	800985a <_dtoa_r+0x802>
 8009bbe:	f1bb 0f00 	cmp.w	fp, #0
 8009bc2:	f77f aed9 	ble.w	8009978 <_dtoa_r+0x920>
 8009bc6:	4656      	mov	r6, sl
 8009bc8:	9802      	ldr	r0, [sp, #8]
 8009bca:	4621      	mov	r1, r4
 8009bcc:	f7ff f9bb 	bl	8008f46 <quorem>
 8009bd0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009bd4:	f806 3b01 	strb.w	r3, [r6], #1
 8009bd8:	eba6 020a 	sub.w	r2, r6, sl
 8009bdc:	4593      	cmp	fp, r2
 8009bde:	ddb4      	ble.n	8009b4a <_dtoa_r+0xaf2>
 8009be0:	9902      	ldr	r1, [sp, #8]
 8009be2:	2300      	movs	r3, #0
 8009be4:	220a      	movs	r2, #10
 8009be6:	4648      	mov	r0, r9
 8009be8:	f000 f968 	bl	8009ebc <__multadd>
 8009bec:	9002      	str	r0, [sp, #8]
 8009bee:	e7eb      	b.n	8009bc8 <_dtoa_r+0xb70>
 8009bf0:	0800b244 	.word	0x0800b244
 8009bf4:	0800b1c8 	.word	0x0800b1c8

08009bf8 <_free_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	4605      	mov	r5, r0
 8009bfc:	2900      	cmp	r1, #0
 8009bfe:	d041      	beq.n	8009c84 <_free_r+0x8c>
 8009c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c04:	1f0c      	subs	r4, r1, #4
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	bfb8      	it	lt
 8009c0a:	18e4      	addlt	r4, r4, r3
 8009c0c:	f000 f8e8 	bl	8009de0 <__malloc_lock>
 8009c10:	4a1d      	ldr	r2, [pc, #116]	@ (8009c88 <_free_r+0x90>)
 8009c12:	6813      	ldr	r3, [r2, #0]
 8009c14:	b933      	cbnz	r3, 8009c24 <_free_r+0x2c>
 8009c16:	6063      	str	r3, [r4, #4]
 8009c18:	6014      	str	r4, [r2, #0]
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c20:	f000 b8e4 	b.w	8009dec <__malloc_unlock>
 8009c24:	42a3      	cmp	r3, r4
 8009c26:	d908      	bls.n	8009c3a <_free_r+0x42>
 8009c28:	6820      	ldr	r0, [r4, #0]
 8009c2a:	1821      	adds	r1, r4, r0
 8009c2c:	428b      	cmp	r3, r1
 8009c2e:	bf01      	itttt	eq
 8009c30:	6819      	ldreq	r1, [r3, #0]
 8009c32:	685b      	ldreq	r3, [r3, #4]
 8009c34:	1809      	addeq	r1, r1, r0
 8009c36:	6021      	streq	r1, [r4, #0]
 8009c38:	e7ed      	b.n	8009c16 <_free_r+0x1e>
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	b10b      	cbz	r3, 8009c44 <_free_r+0x4c>
 8009c40:	42a3      	cmp	r3, r4
 8009c42:	d9fa      	bls.n	8009c3a <_free_r+0x42>
 8009c44:	6811      	ldr	r1, [r2, #0]
 8009c46:	1850      	adds	r0, r2, r1
 8009c48:	42a0      	cmp	r0, r4
 8009c4a:	d10b      	bne.n	8009c64 <_free_r+0x6c>
 8009c4c:	6820      	ldr	r0, [r4, #0]
 8009c4e:	4401      	add	r1, r0
 8009c50:	1850      	adds	r0, r2, r1
 8009c52:	4283      	cmp	r3, r0
 8009c54:	6011      	str	r1, [r2, #0]
 8009c56:	d1e0      	bne.n	8009c1a <_free_r+0x22>
 8009c58:	6818      	ldr	r0, [r3, #0]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	6053      	str	r3, [r2, #4]
 8009c5e:	4408      	add	r0, r1
 8009c60:	6010      	str	r0, [r2, #0]
 8009c62:	e7da      	b.n	8009c1a <_free_r+0x22>
 8009c64:	d902      	bls.n	8009c6c <_free_r+0x74>
 8009c66:	230c      	movs	r3, #12
 8009c68:	602b      	str	r3, [r5, #0]
 8009c6a:	e7d6      	b.n	8009c1a <_free_r+0x22>
 8009c6c:	6820      	ldr	r0, [r4, #0]
 8009c6e:	1821      	adds	r1, r4, r0
 8009c70:	428b      	cmp	r3, r1
 8009c72:	bf04      	itt	eq
 8009c74:	6819      	ldreq	r1, [r3, #0]
 8009c76:	685b      	ldreq	r3, [r3, #4]
 8009c78:	6063      	str	r3, [r4, #4]
 8009c7a:	bf04      	itt	eq
 8009c7c:	1809      	addeq	r1, r1, r0
 8009c7e:	6021      	streq	r1, [r4, #0]
 8009c80:	6054      	str	r4, [r2, #4]
 8009c82:	e7ca      	b.n	8009c1a <_free_r+0x22>
 8009c84:	bd38      	pop	{r3, r4, r5, pc}
 8009c86:	bf00      	nop
 8009c88:	20000c80 	.word	0x20000c80

08009c8c <malloc>:
 8009c8c:	4b02      	ldr	r3, [pc, #8]	@ (8009c98 <malloc+0xc>)
 8009c8e:	4601      	mov	r1, r0
 8009c90:	6818      	ldr	r0, [r3, #0]
 8009c92:	f000 b825 	b.w	8009ce0 <_malloc_r>
 8009c96:	bf00      	nop
 8009c98:	2000001c 	.word	0x2000001c

08009c9c <sbrk_aligned>:
 8009c9c:	b570      	push	{r4, r5, r6, lr}
 8009c9e:	4e0f      	ldr	r6, [pc, #60]	@ (8009cdc <sbrk_aligned+0x40>)
 8009ca0:	460c      	mov	r4, r1
 8009ca2:	6831      	ldr	r1, [r6, #0]
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	b911      	cbnz	r1, 8009cae <sbrk_aligned+0x12>
 8009ca8:	f000 fccc 	bl	800a644 <_sbrk_r>
 8009cac:	6030      	str	r0, [r6, #0]
 8009cae:	4621      	mov	r1, r4
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	f000 fcc7 	bl	800a644 <_sbrk_r>
 8009cb6:	1c43      	adds	r3, r0, #1
 8009cb8:	d103      	bne.n	8009cc2 <sbrk_aligned+0x26>
 8009cba:	f04f 34ff 	mov.w	r4, #4294967295
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	bd70      	pop	{r4, r5, r6, pc}
 8009cc2:	1cc4      	adds	r4, r0, #3
 8009cc4:	f024 0403 	bic.w	r4, r4, #3
 8009cc8:	42a0      	cmp	r0, r4
 8009cca:	d0f8      	beq.n	8009cbe <sbrk_aligned+0x22>
 8009ccc:	1a21      	subs	r1, r4, r0
 8009cce:	4628      	mov	r0, r5
 8009cd0:	f000 fcb8 	bl	800a644 <_sbrk_r>
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d1f2      	bne.n	8009cbe <sbrk_aligned+0x22>
 8009cd8:	e7ef      	b.n	8009cba <sbrk_aligned+0x1e>
 8009cda:	bf00      	nop
 8009cdc:	20000c7c 	.word	0x20000c7c

08009ce0 <_malloc_r>:
 8009ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ce4:	1ccd      	adds	r5, r1, #3
 8009ce6:	f025 0503 	bic.w	r5, r5, #3
 8009cea:	3508      	adds	r5, #8
 8009cec:	2d0c      	cmp	r5, #12
 8009cee:	bf38      	it	cc
 8009cf0:	250c      	movcc	r5, #12
 8009cf2:	2d00      	cmp	r5, #0
 8009cf4:	4606      	mov	r6, r0
 8009cf6:	db01      	blt.n	8009cfc <_malloc_r+0x1c>
 8009cf8:	42a9      	cmp	r1, r5
 8009cfa:	d904      	bls.n	8009d06 <_malloc_r+0x26>
 8009cfc:	230c      	movs	r3, #12
 8009cfe:	6033      	str	r3, [r6, #0]
 8009d00:	2000      	movs	r0, #0
 8009d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ddc <_malloc_r+0xfc>
 8009d0a:	f000 f869 	bl	8009de0 <__malloc_lock>
 8009d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8009d12:	461c      	mov	r4, r3
 8009d14:	bb44      	cbnz	r4, 8009d68 <_malloc_r+0x88>
 8009d16:	4629      	mov	r1, r5
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f7ff ffbf 	bl	8009c9c <sbrk_aligned>
 8009d1e:	1c43      	adds	r3, r0, #1
 8009d20:	4604      	mov	r4, r0
 8009d22:	d158      	bne.n	8009dd6 <_malloc_r+0xf6>
 8009d24:	f8d8 4000 	ldr.w	r4, [r8]
 8009d28:	4627      	mov	r7, r4
 8009d2a:	2f00      	cmp	r7, #0
 8009d2c:	d143      	bne.n	8009db6 <_malloc_r+0xd6>
 8009d2e:	2c00      	cmp	r4, #0
 8009d30:	d04b      	beq.n	8009dca <_malloc_r+0xea>
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	4639      	mov	r1, r7
 8009d36:	4630      	mov	r0, r6
 8009d38:	eb04 0903 	add.w	r9, r4, r3
 8009d3c:	f000 fc82 	bl	800a644 <_sbrk_r>
 8009d40:	4581      	cmp	r9, r0
 8009d42:	d142      	bne.n	8009dca <_malloc_r+0xea>
 8009d44:	6821      	ldr	r1, [r4, #0]
 8009d46:	1a6d      	subs	r5, r5, r1
 8009d48:	4629      	mov	r1, r5
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	f7ff ffa6 	bl	8009c9c <sbrk_aligned>
 8009d50:	3001      	adds	r0, #1
 8009d52:	d03a      	beq.n	8009dca <_malloc_r+0xea>
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	442b      	add	r3, r5
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8009d5e:	685a      	ldr	r2, [r3, #4]
 8009d60:	bb62      	cbnz	r2, 8009dbc <_malloc_r+0xdc>
 8009d62:	f8c8 7000 	str.w	r7, [r8]
 8009d66:	e00f      	b.n	8009d88 <_malloc_r+0xa8>
 8009d68:	6822      	ldr	r2, [r4, #0]
 8009d6a:	1b52      	subs	r2, r2, r5
 8009d6c:	d420      	bmi.n	8009db0 <_malloc_r+0xd0>
 8009d6e:	2a0b      	cmp	r2, #11
 8009d70:	d917      	bls.n	8009da2 <_malloc_r+0xc2>
 8009d72:	1961      	adds	r1, r4, r5
 8009d74:	42a3      	cmp	r3, r4
 8009d76:	6025      	str	r5, [r4, #0]
 8009d78:	bf18      	it	ne
 8009d7a:	6059      	strne	r1, [r3, #4]
 8009d7c:	6863      	ldr	r3, [r4, #4]
 8009d7e:	bf08      	it	eq
 8009d80:	f8c8 1000 	streq.w	r1, [r8]
 8009d84:	5162      	str	r2, [r4, r5]
 8009d86:	604b      	str	r3, [r1, #4]
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f000 f82f 	bl	8009dec <__malloc_unlock>
 8009d8e:	f104 000b 	add.w	r0, r4, #11
 8009d92:	1d23      	adds	r3, r4, #4
 8009d94:	f020 0007 	bic.w	r0, r0, #7
 8009d98:	1ac2      	subs	r2, r0, r3
 8009d9a:	bf1c      	itt	ne
 8009d9c:	1a1b      	subne	r3, r3, r0
 8009d9e:	50a3      	strne	r3, [r4, r2]
 8009da0:	e7af      	b.n	8009d02 <_malloc_r+0x22>
 8009da2:	6862      	ldr	r2, [r4, #4]
 8009da4:	42a3      	cmp	r3, r4
 8009da6:	bf0c      	ite	eq
 8009da8:	f8c8 2000 	streq.w	r2, [r8]
 8009dac:	605a      	strne	r2, [r3, #4]
 8009dae:	e7eb      	b.n	8009d88 <_malloc_r+0xa8>
 8009db0:	4623      	mov	r3, r4
 8009db2:	6864      	ldr	r4, [r4, #4]
 8009db4:	e7ae      	b.n	8009d14 <_malloc_r+0x34>
 8009db6:	463c      	mov	r4, r7
 8009db8:	687f      	ldr	r7, [r7, #4]
 8009dba:	e7b6      	b.n	8009d2a <_malloc_r+0x4a>
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	42a3      	cmp	r3, r4
 8009dc2:	d1fb      	bne.n	8009dbc <_malloc_r+0xdc>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	6053      	str	r3, [r2, #4]
 8009dc8:	e7de      	b.n	8009d88 <_malloc_r+0xa8>
 8009dca:	230c      	movs	r3, #12
 8009dcc:	6033      	str	r3, [r6, #0]
 8009dce:	4630      	mov	r0, r6
 8009dd0:	f000 f80c 	bl	8009dec <__malloc_unlock>
 8009dd4:	e794      	b.n	8009d00 <_malloc_r+0x20>
 8009dd6:	6005      	str	r5, [r0, #0]
 8009dd8:	e7d6      	b.n	8009d88 <_malloc_r+0xa8>
 8009dda:	bf00      	nop
 8009ddc:	20000c80 	.word	0x20000c80

08009de0 <__malloc_lock>:
 8009de0:	4801      	ldr	r0, [pc, #4]	@ (8009de8 <__malloc_lock+0x8>)
 8009de2:	f7ff b8a0 	b.w	8008f26 <__retarget_lock_acquire_recursive>
 8009de6:	bf00      	nop
 8009de8:	20000c78 	.word	0x20000c78

08009dec <__malloc_unlock>:
 8009dec:	4801      	ldr	r0, [pc, #4]	@ (8009df4 <__malloc_unlock+0x8>)
 8009dee:	f7ff b89b 	b.w	8008f28 <__retarget_lock_release_recursive>
 8009df2:	bf00      	nop
 8009df4:	20000c78 	.word	0x20000c78

08009df8 <_Balloc>:
 8009df8:	b570      	push	{r4, r5, r6, lr}
 8009dfa:	69c6      	ldr	r6, [r0, #28]
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	460d      	mov	r5, r1
 8009e00:	b976      	cbnz	r6, 8009e20 <_Balloc+0x28>
 8009e02:	2010      	movs	r0, #16
 8009e04:	f7ff ff42 	bl	8009c8c <malloc>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	61e0      	str	r0, [r4, #28]
 8009e0c:	b920      	cbnz	r0, 8009e18 <_Balloc+0x20>
 8009e0e:	4b18      	ldr	r3, [pc, #96]	@ (8009e70 <_Balloc+0x78>)
 8009e10:	4818      	ldr	r0, [pc, #96]	@ (8009e74 <_Balloc+0x7c>)
 8009e12:	216b      	movs	r1, #107	@ 0x6b
 8009e14:	f000 fc26 	bl	800a664 <__assert_func>
 8009e18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e1c:	6006      	str	r6, [r0, #0]
 8009e1e:	60c6      	str	r6, [r0, #12]
 8009e20:	69e6      	ldr	r6, [r4, #28]
 8009e22:	68f3      	ldr	r3, [r6, #12]
 8009e24:	b183      	cbz	r3, 8009e48 <_Balloc+0x50>
 8009e26:	69e3      	ldr	r3, [r4, #28]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e2e:	b9b8      	cbnz	r0, 8009e60 <_Balloc+0x68>
 8009e30:	2101      	movs	r1, #1
 8009e32:	fa01 f605 	lsl.w	r6, r1, r5
 8009e36:	1d72      	adds	r2, r6, #5
 8009e38:	0092      	lsls	r2, r2, #2
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f000 fc30 	bl	800a6a0 <_calloc_r>
 8009e40:	b160      	cbz	r0, 8009e5c <_Balloc+0x64>
 8009e42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e46:	e00e      	b.n	8009e66 <_Balloc+0x6e>
 8009e48:	2221      	movs	r2, #33	@ 0x21
 8009e4a:	2104      	movs	r1, #4
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	f000 fc27 	bl	800a6a0 <_calloc_r>
 8009e52:	69e3      	ldr	r3, [r4, #28]
 8009e54:	60f0      	str	r0, [r6, #12]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1e4      	bne.n	8009e26 <_Balloc+0x2e>
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	bd70      	pop	{r4, r5, r6, pc}
 8009e60:	6802      	ldr	r2, [r0, #0]
 8009e62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e66:	2300      	movs	r3, #0
 8009e68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e6c:	e7f7      	b.n	8009e5e <_Balloc+0x66>
 8009e6e:	bf00      	nop
 8009e70:	0800b1d5 	.word	0x0800b1d5
 8009e74:	0800b255 	.word	0x0800b255

08009e78 <_Bfree>:
 8009e78:	b570      	push	{r4, r5, r6, lr}
 8009e7a:	69c6      	ldr	r6, [r0, #28]
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	b976      	cbnz	r6, 8009ea0 <_Bfree+0x28>
 8009e82:	2010      	movs	r0, #16
 8009e84:	f7ff ff02 	bl	8009c8c <malloc>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	61e8      	str	r0, [r5, #28]
 8009e8c:	b920      	cbnz	r0, 8009e98 <_Bfree+0x20>
 8009e8e:	4b09      	ldr	r3, [pc, #36]	@ (8009eb4 <_Bfree+0x3c>)
 8009e90:	4809      	ldr	r0, [pc, #36]	@ (8009eb8 <_Bfree+0x40>)
 8009e92:	218f      	movs	r1, #143	@ 0x8f
 8009e94:	f000 fbe6 	bl	800a664 <__assert_func>
 8009e98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e9c:	6006      	str	r6, [r0, #0]
 8009e9e:	60c6      	str	r6, [r0, #12]
 8009ea0:	b13c      	cbz	r4, 8009eb2 <_Bfree+0x3a>
 8009ea2:	69eb      	ldr	r3, [r5, #28]
 8009ea4:	6862      	ldr	r2, [r4, #4]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009eac:	6021      	str	r1, [r4, #0]
 8009eae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009eb2:	bd70      	pop	{r4, r5, r6, pc}
 8009eb4:	0800b1d5 	.word	0x0800b1d5
 8009eb8:	0800b255 	.word	0x0800b255

08009ebc <__multadd>:
 8009ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec0:	690d      	ldr	r5, [r1, #16]
 8009ec2:	4607      	mov	r7, r0
 8009ec4:	460c      	mov	r4, r1
 8009ec6:	461e      	mov	r6, r3
 8009ec8:	f101 0c14 	add.w	ip, r1, #20
 8009ecc:	2000      	movs	r0, #0
 8009ece:	f8dc 3000 	ldr.w	r3, [ip]
 8009ed2:	b299      	uxth	r1, r3
 8009ed4:	fb02 6101 	mla	r1, r2, r1, r6
 8009ed8:	0c1e      	lsrs	r6, r3, #16
 8009eda:	0c0b      	lsrs	r3, r1, #16
 8009edc:	fb02 3306 	mla	r3, r2, r6, r3
 8009ee0:	b289      	uxth	r1, r1
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ee8:	4285      	cmp	r5, r0
 8009eea:	f84c 1b04 	str.w	r1, [ip], #4
 8009eee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ef2:	dcec      	bgt.n	8009ece <__multadd+0x12>
 8009ef4:	b30e      	cbz	r6, 8009f3a <__multadd+0x7e>
 8009ef6:	68a3      	ldr	r3, [r4, #8]
 8009ef8:	42ab      	cmp	r3, r5
 8009efa:	dc19      	bgt.n	8009f30 <__multadd+0x74>
 8009efc:	6861      	ldr	r1, [r4, #4]
 8009efe:	4638      	mov	r0, r7
 8009f00:	3101      	adds	r1, #1
 8009f02:	f7ff ff79 	bl	8009df8 <_Balloc>
 8009f06:	4680      	mov	r8, r0
 8009f08:	b928      	cbnz	r0, 8009f16 <__multadd+0x5a>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8009f40 <__multadd+0x84>)
 8009f0e:	480d      	ldr	r0, [pc, #52]	@ (8009f44 <__multadd+0x88>)
 8009f10:	21ba      	movs	r1, #186	@ 0xba
 8009f12:	f000 fba7 	bl	800a664 <__assert_func>
 8009f16:	6922      	ldr	r2, [r4, #16]
 8009f18:	3202      	adds	r2, #2
 8009f1a:	f104 010c 	add.w	r1, r4, #12
 8009f1e:	0092      	lsls	r2, r2, #2
 8009f20:	300c      	adds	r0, #12
 8009f22:	f7ff f802 	bl	8008f2a <memcpy>
 8009f26:	4621      	mov	r1, r4
 8009f28:	4638      	mov	r0, r7
 8009f2a:	f7ff ffa5 	bl	8009e78 <_Bfree>
 8009f2e:	4644      	mov	r4, r8
 8009f30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f34:	3501      	adds	r5, #1
 8009f36:	615e      	str	r6, [r3, #20]
 8009f38:	6125      	str	r5, [r4, #16]
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f40:	0800b244 	.word	0x0800b244
 8009f44:	0800b255 	.word	0x0800b255

08009f48 <__hi0bits>:
 8009f48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	bf36      	itet	cc
 8009f50:	0403      	lslcc	r3, r0, #16
 8009f52:	2000      	movcs	r0, #0
 8009f54:	2010      	movcc	r0, #16
 8009f56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f5a:	bf3c      	itt	cc
 8009f5c:	021b      	lslcc	r3, r3, #8
 8009f5e:	3008      	addcc	r0, #8
 8009f60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f64:	bf3c      	itt	cc
 8009f66:	011b      	lslcc	r3, r3, #4
 8009f68:	3004      	addcc	r0, #4
 8009f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f6e:	bf3c      	itt	cc
 8009f70:	009b      	lslcc	r3, r3, #2
 8009f72:	3002      	addcc	r0, #2
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	db05      	blt.n	8009f84 <__hi0bits+0x3c>
 8009f78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009f7c:	f100 0001 	add.w	r0, r0, #1
 8009f80:	bf08      	it	eq
 8009f82:	2020      	moveq	r0, #32
 8009f84:	4770      	bx	lr

08009f86 <__lo0bits>:
 8009f86:	6803      	ldr	r3, [r0, #0]
 8009f88:	4602      	mov	r2, r0
 8009f8a:	f013 0007 	ands.w	r0, r3, #7
 8009f8e:	d00b      	beq.n	8009fa8 <__lo0bits+0x22>
 8009f90:	07d9      	lsls	r1, r3, #31
 8009f92:	d421      	bmi.n	8009fd8 <__lo0bits+0x52>
 8009f94:	0798      	lsls	r0, r3, #30
 8009f96:	bf49      	itett	mi
 8009f98:	085b      	lsrmi	r3, r3, #1
 8009f9a:	089b      	lsrpl	r3, r3, #2
 8009f9c:	2001      	movmi	r0, #1
 8009f9e:	6013      	strmi	r3, [r2, #0]
 8009fa0:	bf5c      	itt	pl
 8009fa2:	6013      	strpl	r3, [r2, #0]
 8009fa4:	2002      	movpl	r0, #2
 8009fa6:	4770      	bx	lr
 8009fa8:	b299      	uxth	r1, r3
 8009faa:	b909      	cbnz	r1, 8009fb0 <__lo0bits+0x2a>
 8009fac:	0c1b      	lsrs	r3, r3, #16
 8009fae:	2010      	movs	r0, #16
 8009fb0:	b2d9      	uxtb	r1, r3
 8009fb2:	b909      	cbnz	r1, 8009fb8 <__lo0bits+0x32>
 8009fb4:	3008      	adds	r0, #8
 8009fb6:	0a1b      	lsrs	r3, r3, #8
 8009fb8:	0719      	lsls	r1, r3, #28
 8009fba:	bf04      	itt	eq
 8009fbc:	091b      	lsreq	r3, r3, #4
 8009fbe:	3004      	addeq	r0, #4
 8009fc0:	0799      	lsls	r1, r3, #30
 8009fc2:	bf04      	itt	eq
 8009fc4:	089b      	lsreq	r3, r3, #2
 8009fc6:	3002      	addeq	r0, #2
 8009fc8:	07d9      	lsls	r1, r3, #31
 8009fca:	d403      	bmi.n	8009fd4 <__lo0bits+0x4e>
 8009fcc:	085b      	lsrs	r3, r3, #1
 8009fce:	f100 0001 	add.w	r0, r0, #1
 8009fd2:	d003      	beq.n	8009fdc <__lo0bits+0x56>
 8009fd4:	6013      	str	r3, [r2, #0]
 8009fd6:	4770      	bx	lr
 8009fd8:	2000      	movs	r0, #0
 8009fda:	4770      	bx	lr
 8009fdc:	2020      	movs	r0, #32
 8009fde:	4770      	bx	lr

08009fe0 <__i2b>:
 8009fe0:	b510      	push	{r4, lr}
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	f7ff ff07 	bl	8009df8 <_Balloc>
 8009fea:	4602      	mov	r2, r0
 8009fec:	b928      	cbnz	r0, 8009ffa <__i2b+0x1a>
 8009fee:	4b05      	ldr	r3, [pc, #20]	@ (800a004 <__i2b+0x24>)
 8009ff0:	4805      	ldr	r0, [pc, #20]	@ (800a008 <__i2b+0x28>)
 8009ff2:	f240 1145 	movw	r1, #325	@ 0x145
 8009ff6:	f000 fb35 	bl	800a664 <__assert_func>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	6144      	str	r4, [r0, #20]
 8009ffe:	6103      	str	r3, [r0, #16]
 800a000:	bd10      	pop	{r4, pc}
 800a002:	bf00      	nop
 800a004:	0800b244 	.word	0x0800b244
 800a008:	0800b255 	.word	0x0800b255

0800a00c <__multiply>:
 800a00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a010:	4617      	mov	r7, r2
 800a012:	690a      	ldr	r2, [r1, #16]
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	429a      	cmp	r2, r3
 800a018:	bfa8      	it	ge
 800a01a:	463b      	movge	r3, r7
 800a01c:	4689      	mov	r9, r1
 800a01e:	bfa4      	itt	ge
 800a020:	460f      	movge	r7, r1
 800a022:	4699      	movge	r9, r3
 800a024:	693d      	ldr	r5, [r7, #16]
 800a026:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	6879      	ldr	r1, [r7, #4]
 800a02e:	eb05 060a 	add.w	r6, r5, sl
 800a032:	42b3      	cmp	r3, r6
 800a034:	b085      	sub	sp, #20
 800a036:	bfb8      	it	lt
 800a038:	3101      	addlt	r1, #1
 800a03a:	f7ff fedd 	bl	8009df8 <_Balloc>
 800a03e:	b930      	cbnz	r0, 800a04e <__multiply+0x42>
 800a040:	4602      	mov	r2, r0
 800a042:	4b41      	ldr	r3, [pc, #260]	@ (800a148 <__multiply+0x13c>)
 800a044:	4841      	ldr	r0, [pc, #260]	@ (800a14c <__multiply+0x140>)
 800a046:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a04a:	f000 fb0b 	bl	800a664 <__assert_func>
 800a04e:	f100 0414 	add.w	r4, r0, #20
 800a052:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a056:	4623      	mov	r3, r4
 800a058:	2200      	movs	r2, #0
 800a05a:	4573      	cmp	r3, lr
 800a05c:	d320      	bcc.n	800a0a0 <__multiply+0x94>
 800a05e:	f107 0814 	add.w	r8, r7, #20
 800a062:	f109 0114 	add.w	r1, r9, #20
 800a066:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a06a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a06e:	9302      	str	r3, [sp, #8]
 800a070:	1beb      	subs	r3, r5, r7
 800a072:	3b15      	subs	r3, #21
 800a074:	f023 0303 	bic.w	r3, r3, #3
 800a078:	3304      	adds	r3, #4
 800a07a:	3715      	adds	r7, #21
 800a07c:	42bd      	cmp	r5, r7
 800a07e:	bf38      	it	cc
 800a080:	2304      	movcc	r3, #4
 800a082:	9301      	str	r3, [sp, #4]
 800a084:	9b02      	ldr	r3, [sp, #8]
 800a086:	9103      	str	r1, [sp, #12]
 800a088:	428b      	cmp	r3, r1
 800a08a:	d80c      	bhi.n	800a0a6 <__multiply+0x9a>
 800a08c:	2e00      	cmp	r6, #0
 800a08e:	dd03      	ble.n	800a098 <__multiply+0x8c>
 800a090:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a094:	2b00      	cmp	r3, #0
 800a096:	d055      	beq.n	800a144 <__multiply+0x138>
 800a098:	6106      	str	r6, [r0, #16]
 800a09a:	b005      	add	sp, #20
 800a09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a0:	f843 2b04 	str.w	r2, [r3], #4
 800a0a4:	e7d9      	b.n	800a05a <__multiply+0x4e>
 800a0a6:	f8b1 a000 	ldrh.w	sl, [r1]
 800a0aa:	f1ba 0f00 	cmp.w	sl, #0
 800a0ae:	d01f      	beq.n	800a0f0 <__multiply+0xe4>
 800a0b0:	46c4      	mov	ip, r8
 800a0b2:	46a1      	mov	r9, r4
 800a0b4:	2700      	movs	r7, #0
 800a0b6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a0ba:	f8d9 3000 	ldr.w	r3, [r9]
 800a0be:	fa1f fb82 	uxth.w	fp, r2
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a0c8:	443b      	add	r3, r7
 800a0ca:	f8d9 7000 	ldr.w	r7, [r9]
 800a0ce:	0c12      	lsrs	r2, r2, #16
 800a0d0:	0c3f      	lsrs	r7, r7, #16
 800a0d2:	fb0a 7202 	mla	r2, sl, r2, r7
 800a0d6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0e0:	4565      	cmp	r5, ip
 800a0e2:	f849 3b04 	str.w	r3, [r9], #4
 800a0e6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a0ea:	d8e4      	bhi.n	800a0b6 <__multiply+0xaa>
 800a0ec:	9b01      	ldr	r3, [sp, #4]
 800a0ee:	50e7      	str	r7, [r4, r3]
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a0f6:	3104      	adds	r1, #4
 800a0f8:	f1b9 0f00 	cmp.w	r9, #0
 800a0fc:	d020      	beq.n	800a140 <__multiply+0x134>
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	4647      	mov	r7, r8
 800a102:	46a4      	mov	ip, r4
 800a104:	f04f 0a00 	mov.w	sl, #0
 800a108:	f8b7 b000 	ldrh.w	fp, [r7]
 800a10c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a110:	fb09 220b 	mla	r2, r9, fp, r2
 800a114:	4452      	add	r2, sl
 800a116:	b29b      	uxth	r3, r3
 800a118:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a11c:	f84c 3b04 	str.w	r3, [ip], #4
 800a120:	f857 3b04 	ldr.w	r3, [r7], #4
 800a124:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a128:	f8bc 3000 	ldrh.w	r3, [ip]
 800a12c:	fb09 330a 	mla	r3, r9, sl, r3
 800a130:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a134:	42bd      	cmp	r5, r7
 800a136:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a13a:	d8e5      	bhi.n	800a108 <__multiply+0xfc>
 800a13c:	9a01      	ldr	r2, [sp, #4]
 800a13e:	50a3      	str	r3, [r4, r2]
 800a140:	3404      	adds	r4, #4
 800a142:	e79f      	b.n	800a084 <__multiply+0x78>
 800a144:	3e01      	subs	r6, #1
 800a146:	e7a1      	b.n	800a08c <__multiply+0x80>
 800a148:	0800b244 	.word	0x0800b244
 800a14c:	0800b255 	.word	0x0800b255

0800a150 <__pow5mult>:
 800a150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a154:	4615      	mov	r5, r2
 800a156:	f012 0203 	ands.w	r2, r2, #3
 800a15a:	4607      	mov	r7, r0
 800a15c:	460e      	mov	r6, r1
 800a15e:	d007      	beq.n	800a170 <__pow5mult+0x20>
 800a160:	4c25      	ldr	r4, [pc, #148]	@ (800a1f8 <__pow5mult+0xa8>)
 800a162:	3a01      	subs	r2, #1
 800a164:	2300      	movs	r3, #0
 800a166:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a16a:	f7ff fea7 	bl	8009ebc <__multadd>
 800a16e:	4606      	mov	r6, r0
 800a170:	10ad      	asrs	r5, r5, #2
 800a172:	d03d      	beq.n	800a1f0 <__pow5mult+0xa0>
 800a174:	69fc      	ldr	r4, [r7, #28]
 800a176:	b97c      	cbnz	r4, 800a198 <__pow5mult+0x48>
 800a178:	2010      	movs	r0, #16
 800a17a:	f7ff fd87 	bl	8009c8c <malloc>
 800a17e:	4602      	mov	r2, r0
 800a180:	61f8      	str	r0, [r7, #28]
 800a182:	b928      	cbnz	r0, 800a190 <__pow5mult+0x40>
 800a184:	4b1d      	ldr	r3, [pc, #116]	@ (800a1fc <__pow5mult+0xac>)
 800a186:	481e      	ldr	r0, [pc, #120]	@ (800a200 <__pow5mult+0xb0>)
 800a188:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a18c:	f000 fa6a 	bl	800a664 <__assert_func>
 800a190:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a194:	6004      	str	r4, [r0, #0]
 800a196:	60c4      	str	r4, [r0, #12]
 800a198:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a19c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a1a0:	b94c      	cbnz	r4, 800a1b6 <__pow5mult+0x66>
 800a1a2:	f240 2171 	movw	r1, #625	@ 0x271
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	f7ff ff1a 	bl	8009fe0 <__i2b>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	6003      	str	r3, [r0, #0]
 800a1b6:	f04f 0900 	mov.w	r9, #0
 800a1ba:	07eb      	lsls	r3, r5, #31
 800a1bc:	d50a      	bpl.n	800a1d4 <__pow5mult+0x84>
 800a1be:	4631      	mov	r1, r6
 800a1c0:	4622      	mov	r2, r4
 800a1c2:	4638      	mov	r0, r7
 800a1c4:	f7ff ff22 	bl	800a00c <__multiply>
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4680      	mov	r8, r0
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	f7ff fe53 	bl	8009e78 <_Bfree>
 800a1d2:	4646      	mov	r6, r8
 800a1d4:	106d      	asrs	r5, r5, #1
 800a1d6:	d00b      	beq.n	800a1f0 <__pow5mult+0xa0>
 800a1d8:	6820      	ldr	r0, [r4, #0]
 800a1da:	b938      	cbnz	r0, 800a1ec <__pow5mult+0x9c>
 800a1dc:	4622      	mov	r2, r4
 800a1de:	4621      	mov	r1, r4
 800a1e0:	4638      	mov	r0, r7
 800a1e2:	f7ff ff13 	bl	800a00c <__multiply>
 800a1e6:	6020      	str	r0, [r4, #0]
 800a1e8:	f8c0 9000 	str.w	r9, [r0]
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	e7e4      	b.n	800a1ba <__pow5mult+0x6a>
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1f6:	bf00      	nop
 800a1f8:	0800b308 	.word	0x0800b308
 800a1fc:	0800b1d5 	.word	0x0800b1d5
 800a200:	0800b255 	.word	0x0800b255

0800a204 <__lshift>:
 800a204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a208:	460c      	mov	r4, r1
 800a20a:	6849      	ldr	r1, [r1, #4]
 800a20c:	6923      	ldr	r3, [r4, #16]
 800a20e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a212:	68a3      	ldr	r3, [r4, #8]
 800a214:	4607      	mov	r7, r0
 800a216:	4691      	mov	r9, r2
 800a218:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a21c:	f108 0601 	add.w	r6, r8, #1
 800a220:	42b3      	cmp	r3, r6
 800a222:	db0b      	blt.n	800a23c <__lshift+0x38>
 800a224:	4638      	mov	r0, r7
 800a226:	f7ff fde7 	bl	8009df8 <_Balloc>
 800a22a:	4605      	mov	r5, r0
 800a22c:	b948      	cbnz	r0, 800a242 <__lshift+0x3e>
 800a22e:	4602      	mov	r2, r0
 800a230:	4b28      	ldr	r3, [pc, #160]	@ (800a2d4 <__lshift+0xd0>)
 800a232:	4829      	ldr	r0, [pc, #164]	@ (800a2d8 <__lshift+0xd4>)
 800a234:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a238:	f000 fa14 	bl	800a664 <__assert_func>
 800a23c:	3101      	adds	r1, #1
 800a23e:	005b      	lsls	r3, r3, #1
 800a240:	e7ee      	b.n	800a220 <__lshift+0x1c>
 800a242:	2300      	movs	r3, #0
 800a244:	f100 0114 	add.w	r1, r0, #20
 800a248:	f100 0210 	add.w	r2, r0, #16
 800a24c:	4618      	mov	r0, r3
 800a24e:	4553      	cmp	r3, sl
 800a250:	db33      	blt.n	800a2ba <__lshift+0xb6>
 800a252:	6920      	ldr	r0, [r4, #16]
 800a254:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a258:	f104 0314 	add.w	r3, r4, #20
 800a25c:	f019 091f 	ands.w	r9, r9, #31
 800a260:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a264:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a268:	d02b      	beq.n	800a2c2 <__lshift+0xbe>
 800a26a:	f1c9 0e20 	rsb	lr, r9, #32
 800a26e:	468a      	mov	sl, r1
 800a270:	2200      	movs	r2, #0
 800a272:	6818      	ldr	r0, [r3, #0]
 800a274:	fa00 f009 	lsl.w	r0, r0, r9
 800a278:	4310      	orrs	r0, r2
 800a27a:	f84a 0b04 	str.w	r0, [sl], #4
 800a27e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a282:	459c      	cmp	ip, r3
 800a284:	fa22 f20e 	lsr.w	r2, r2, lr
 800a288:	d8f3      	bhi.n	800a272 <__lshift+0x6e>
 800a28a:	ebac 0304 	sub.w	r3, ip, r4
 800a28e:	3b15      	subs	r3, #21
 800a290:	f023 0303 	bic.w	r3, r3, #3
 800a294:	3304      	adds	r3, #4
 800a296:	f104 0015 	add.w	r0, r4, #21
 800a29a:	4560      	cmp	r0, ip
 800a29c:	bf88      	it	hi
 800a29e:	2304      	movhi	r3, #4
 800a2a0:	50ca      	str	r2, [r1, r3]
 800a2a2:	b10a      	cbz	r2, 800a2a8 <__lshift+0xa4>
 800a2a4:	f108 0602 	add.w	r6, r8, #2
 800a2a8:	3e01      	subs	r6, #1
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	612e      	str	r6, [r5, #16]
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	f7ff fde2 	bl	8009e78 <_Bfree>
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2be:	3301      	adds	r3, #1
 800a2c0:	e7c5      	b.n	800a24e <__lshift+0x4a>
 800a2c2:	3904      	subs	r1, #4
 800a2c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2cc:	459c      	cmp	ip, r3
 800a2ce:	d8f9      	bhi.n	800a2c4 <__lshift+0xc0>
 800a2d0:	e7ea      	b.n	800a2a8 <__lshift+0xa4>
 800a2d2:	bf00      	nop
 800a2d4:	0800b244 	.word	0x0800b244
 800a2d8:	0800b255 	.word	0x0800b255

0800a2dc <__mcmp>:
 800a2dc:	690a      	ldr	r2, [r1, #16]
 800a2de:	4603      	mov	r3, r0
 800a2e0:	6900      	ldr	r0, [r0, #16]
 800a2e2:	1a80      	subs	r0, r0, r2
 800a2e4:	b530      	push	{r4, r5, lr}
 800a2e6:	d10e      	bne.n	800a306 <__mcmp+0x2a>
 800a2e8:	3314      	adds	r3, #20
 800a2ea:	3114      	adds	r1, #20
 800a2ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a2f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a2f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a2f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a2fc:	4295      	cmp	r5, r2
 800a2fe:	d003      	beq.n	800a308 <__mcmp+0x2c>
 800a300:	d205      	bcs.n	800a30e <__mcmp+0x32>
 800a302:	f04f 30ff 	mov.w	r0, #4294967295
 800a306:	bd30      	pop	{r4, r5, pc}
 800a308:	42a3      	cmp	r3, r4
 800a30a:	d3f3      	bcc.n	800a2f4 <__mcmp+0x18>
 800a30c:	e7fb      	b.n	800a306 <__mcmp+0x2a>
 800a30e:	2001      	movs	r0, #1
 800a310:	e7f9      	b.n	800a306 <__mcmp+0x2a>
	...

0800a314 <__mdiff>:
 800a314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a318:	4689      	mov	r9, r1
 800a31a:	4606      	mov	r6, r0
 800a31c:	4611      	mov	r1, r2
 800a31e:	4648      	mov	r0, r9
 800a320:	4614      	mov	r4, r2
 800a322:	f7ff ffdb 	bl	800a2dc <__mcmp>
 800a326:	1e05      	subs	r5, r0, #0
 800a328:	d112      	bne.n	800a350 <__mdiff+0x3c>
 800a32a:	4629      	mov	r1, r5
 800a32c:	4630      	mov	r0, r6
 800a32e:	f7ff fd63 	bl	8009df8 <_Balloc>
 800a332:	4602      	mov	r2, r0
 800a334:	b928      	cbnz	r0, 800a342 <__mdiff+0x2e>
 800a336:	4b3f      	ldr	r3, [pc, #252]	@ (800a434 <__mdiff+0x120>)
 800a338:	f240 2137 	movw	r1, #567	@ 0x237
 800a33c:	483e      	ldr	r0, [pc, #248]	@ (800a438 <__mdiff+0x124>)
 800a33e:	f000 f991 	bl	800a664 <__assert_func>
 800a342:	2301      	movs	r3, #1
 800a344:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a348:	4610      	mov	r0, r2
 800a34a:	b003      	add	sp, #12
 800a34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a350:	bfbc      	itt	lt
 800a352:	464b      	movlt	r3, r9
 800a354:	46a1      	movlt	r9, r4
 800a356:	4630      	mov	r0, r6
 800a358:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a35c:	bfba      	itte	lt
 800a35e:	461c      	movlt	r4, r3
 800a360:	2501      	movlt	r5, #1
 800a362:	2500      	movge	r5, #0
 800a364:	f7ff fd48 	bl	8009df8 <_Balloc>
 800a368:	4602      	mov	r2, r0
 800a36a:	b918      	cbnz	r0, 800a374 <__mdiff+0x60>
 800a36c:	4b31      	ldr	r3, [pc, #196]	@ (800a434 <__mdiff+0x120>)
 800a36e:	f240 2145 	movw	r1, #581	@ 0x245
 800a372:	e7e3      	b.n	800a33c <__mdiff+0x28>
 800a374:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a378:	6926      	ldr	r6, [r4, #16]
 800a37a:	60c5      	str	r5, [r0, #12]
 800a37c:	f109 0310 	add.w	r3, r9, #16
 800a380:	f109 0514 	add.w	r5, r9, #20
 800a384:	f104 0e14 	add.w	lr, r4, #20
 800a388:	f100 0b14 	add.w	fp, r0, #20
 800a38c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a390:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a394:	9301      	str	r3, [sp, #4]
 800a396:	46d9      	mov	r9, fp
 800a398:	f04f 0c00 	mov.w	ip, #0
 800a39c:	9b01      	ldr	r3, [sp, #4]
 800a39e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a3a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a3a6:	9301      	str	r3, [sp, #4]
 800a3a8:	fa1f f38a 	uxth.w	r3, sl
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	b283      	uxth	r3, r0
 800a3b0:	1acb      	subs	r3, r1, r3
 800a3b2:	0c00      	lsrs	r0, r0, #16
 800a3b4:	4463      	add	r3, ip
 800a3b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a3ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a3c4:	4576      	cmp	r6, lr
 800a3c6:	f849 3b04 	str.w	r3, [r9], #4
 800a3ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a3ce:	d8e5      	bhi.n	800a39c <__mdiff+0x88>
 800a3d0:	1b33      	subs	r3, r6, r4
 800a3d2:	3b15      	subs	r3, #21
 800a3d4:	f023 0303 	bic.w	r3, r3, #3
 800a3d8:	3415      	adds	r4, #21
 800a3da:	3304      	adds	r3, #4
 800a3dc:	42a6      	cmp	r6, r4
 800a3de:	bf38      	it	cc
 800a3e0:	2304      	movcc	r3, #4
 800a3e2:	441d      	add	r5, r3
 800a3e4:	445b      	add	r3, fp
 800a3e6:	461e      	mov	r6, r3
 800a3e8:	462c      	mov	r4, r5
 800a3ea:	4544      	cmp	r4, r8
 800a3ec:	d30e      	bcc.n	800a40c <__mdiff+0xf8>
 800a3ee:	f108 0103 	add.w	r1, r8, #3
 800a3f2:	1b49      	subs	r1, r1, r5
 800a3f4:	f021 0103 	bic.w	r1, r1, #3
 800a3f8:	3d03      	subs	r5, #3
 800a3fa:	45a8      	cmp	r8, r5
 800a3fc:	bf38      	it	cc
 800a3fe:	2100      	movcc	r1, #0
 800a400:	440b      	add	r3, r1
 800a402:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a406:	b191      	cbz	r1, 800a42e <__mdiff+0x11a>
 800a408:	6117      	str	r7, [r2, #16]
 800a40a:	e79d      	b.n	800a348 <__mdiff+0x34>
 800a40c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a410:	46e6      	mov	lr, ip
 800a412:	0c08      	lsrs	r0, r1, #16
 800a414:	fa1c fc81 	uxtah	ip, ip, r1
 800a418:	4471      	add	r1, lr
 800a41a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a41e:	b289      	uxth	r1, r1
 800a420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a424:	f846 1b04 	str.w	r1, [r6], #4
 800a428:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a42c:	e7dd      	b.n	800a3ea <__mdiff+0xd6>
 800a42e:	3f01      	subs	r7, #1
 800a430:	e7e7      	b.n	800a402 <__mdiff+0xee>
 800a432:	bf00      	nop
 800a434:	0800b244 	.word	0x0800b244
 800a438:	0800b255 	.word	0x0800b255

0800a43c <__d2b>:
 800a43c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a440:	460f      	mov	r7, r1
 800a442:	2101      	movs	r1, #1
 800a444:	ec59 8b10 	vmov	r8, r9, d0
 800a448:	4616      	mov	r6, r2
 800a44a:	f7ff fcd5 	bl	8009df8 <_Balloc>
 800a44e:	4604      	mov	r4, r0
 800a450:	b930      	cbnz	r0, 800a460 <__d2b+0x24>
 800a452:	4602      	mov	r2, r0
 800a454:	4b23      	ldr	r3, [pc, #140]	@ (800a4e4 <__d2b+0xa8>)
 800a456:	4824      	ldr	r0, [pc, #144]	@ (800a4e8 <__d2b+0xac>)
 800a458:	f240 310f 	movw	r1, #783	@ 0x30f
 800a45c:	f000 f902 	bl	800a664 <__assert_func>
 800a460:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a464:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a468:	b10d      	cbz	r5, 800a46e <__d2b+0x32>
 800a46a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a46e:	9301      	str	r3, [sp, #4]
 800a470:	f1b8 0300 	subs.w	r3, r8, #0
 800a474:	d023      	beq.n	800a4be <__d2b+0x82>
 800a476:	4668      	mov	r0, sp
 800a478:	9300      	str	r3, [sp, #0]
 800a47a:	f7ff fd84 	bl	8009f86 <__lo0bits>
 800a47e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a482:	b1d0      	cbz	r0, 800a4ba <__d2b+0x7e>
 800a484:	f1c0 0320 	rsb	r3, r0, #32
 800a488:	fa02 f303 	lsl.w	r3, r2, r3
 800a48c:	430b      	orrs	r3, r1
 800a48e:	40c2      	lsrs	r2, r0
 800a490:	6163      	str	r3, [r4, #20]
 800a492:	9201      	str	r2, [sp, #4]
 800a494:	9b01      	ldr	r3, [sp, #4]
 800a496:	61a3      	str	r3, [r4, #24]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	bf0c      	ite	eq
 800a49c:	2201      	moveq	r2, #1
 800a49e:	2202      	movne	r2, #2
 800a4a0:	6122      	str	r2, [r4, #16]
 800a4a2:	b1a5      	cbz	r5, 800a4ce <__d2b+0x92>
 800a4a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a4a8:	4405      	add	r5, r0
 800a4aa:	603d      	str	r5, [r7, #0]
 800a4ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a4b0:	6030      	str	r0, [r6, #0]
 800a4b2:	4620      	mov	r0, r4
 800a4b4:	b003      	add	sp, #12
 800a4b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4ba:	6161      	str	r1, [r4, #20]
 800a4bc:	e7ea      	b.n	800a494 <__d2b+0x58>
 800a4be:	a801      	add	r0, sp, #4
 800a4c0:	f7ff fd61 	bl	8009f86 <__lo0bits>
 800a4c4:	9b01      	ldr	r3, [sp, #4]
 800a4c6:	6163      	str	r3, [r4, #20]
 800a4c8:	3020      	adds	r0, #32
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	e7e8      	b.n	800a4a0 <__d2b+0x64>
 800a4ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a4d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a4d6:	6038      	str	r0, [r7, #0]
 800a4d8:	6918      	ldr	r0, [r3, #16]
 800a4da:	f7ff fd35 	bl	8009f48 <__hi0bits>
 800a4de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a4e2:	e7e5      	b.n	800a4b0 <__d2b+0x74>
 800a4e4:	0800b244 	.word	0x0800b244
 800a4e8:	0800b255 	.word	0x0800b255

0800a4ec <__sflush_r>:
 800a4ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f4:	0716      	lsls	r6, r2, #28
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	460c      	mov	r4, r1
 800a4fa:	d454      	bmi.n	800a5a6 <__sflush_r+0xba>
 800a4fc:	684b      	ldr	r3, [r1, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	dc02      	bgt.n	800a508 <__sflush_r+0x1c>
 800a502:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a504:	2b00      	cmp	r3, #0
 800a506:	dd48      	ble.n	800a59a <__sflush_r+0xae>
 800a508:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a50a:	2e00      	cmp	r6, #0
 800a50c:	d045      	beq.n	800a59a <__sflush_r+0xae>
 800a50e:	2300      	movs	r3, #0
 800a510:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a514:	682f      	ldr	r7, [r5, #0]
 800a516:	6a21      	ldr	r1, [r4, #32]
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	d030      	beq.n	800a57e <__sflush_r+0x92>
 800a51c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a51e:	89a3      	ldrh	r3, [r4, #12]
 800a520:	0759      	lsls	r1, r3, #29
 800a522:	d505      	bpl.n	800a530 <__sflush_r+0x44>
 800a524:	6863      	ldr	r3, [r4, #4]
 800a526:	1ad2      	subs	r2, r2, r3
 800a528:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a52a:	b10b      	cbz	r3, 800a530 <__sflush_r+0x44>
 800a52c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a52e:	1ad2      	subs	r2, r2, r3
 800a530:	2300      	movs	r3, #0
 800a532:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a534:	6a21      	ldr	r1, [r4, #32]
 800a536:	4628      	mov	r0, r5
 800a538:	47b0      	blx	r6
 800a53a:	1c43      	adds	r3, r0, #1
 800a53c:	89a3      	ldrh	r3, [r4, #12]
 800a53e:	d106      	bne.n	800a54e <__sflush_r+0x62>
 800a540:	6829      	ldr	r1, [r5, #0]
 800a542:	291d      	cmp	r1, #29
 800a544:	d82b      	bhi.n	800a59e <__sflush_r+0xb2>
 800a546:	4a2a      	ldr	r2, [pc, #168]	@ (800a5f0 <__sflush_r+0x104>)
 800a548:	40ca      	lsrs	r2, r1
 800a54a:	07d6      	lsls	r6, r2, #31
 800a54c:	d527      	bpl.n	800a59e <__sflush_r+0xb2>
 800a54e:	2200      	movs	r2, #0
 800a550:	6062      	str	r2, [r4, #4]
 800a552:	04d9      	lsls	r1, r3, #19
 800a554:	6922      	ldr	r2, [r4, #16]
 800a556:	6022      	str	r2, [r4, #0]
 800a558:	d504      	bpl.n	800a564 <__sflush_r+0x78>
 800a55a:	1c42      	adds	r2, r0, #1
 800a55c:	d101      	bne.n	800a562 <__sflush_r+0x76>
 800a55e:	682b      	ldr	r3, [r5, #0]
 800a560:	b903      	cbnz	r3, 800a564 <__sflush_r+0x78>
 800a562:	6560      	str	r0, [r4, #84]	@ 0x54
 800a564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a566:	602f      	str	r7, [r5, #0]
 800a568:	b1b9      	cbz	r1, 800a59a <__sflush_r+0xae>
 800a56a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a56e:	4299      	cmp	r1, r3
 800a570:	d002      	beq.n	800a578 <__sflush_r+0x8c>
 800a572:	4628      	mov	r0, r5
 800a574:	f7ff fb40 	bl	8009bf8 <_free_r>
 800a578:	2300      	movs	r3, #0
 800a57a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a57c:	e00d      	b.n	800a59a <__sflush_r+0xae>
 800a57e:	2301      	movs	r3, #1
 800a580:	4628      	mov	r0, r5
 800a582:	47b0      	blx	r6
 800a584:	4602      	mov	r2, r0
 800a586:	1c50      	adds	r0, r2, #1
 800a588:	d1c9      	bne.n	800a51e <__sflush_r+0x32>
 800a58a:	682b      	ldr	r3, [r5, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d0c6      	beq.n	800a51e <__sflush_r+0x32>
 800a590:	2b1d      	cmp	r3, #29
 800a592:	d001      	beq.n	800a598 <__sflush_r+0xac>
 800a594:	2b16      	cmp	r3, #22
 800a596:	d11e      	bne.n	800a5d6 <__sflush_r+0xea>
 800a598:	602f      	str	r7, [r5, #0]
 800a59a:	2000      	movs	r0, #0
 800a59c:	e022      	b.n	800a5e4 <__sflush_r+0xf8>
 800a59e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5a2:	b21b      	sxth	r3, r3
 800a5a4:	e01b      	b.n	800a5de <__sflush_r+0xf2>
 800a5a6:	690f      	ldr	r7, [r1, #16]
 800a5a8:	2f00      	cmp	r7, #0
 800a5aa:	d0f6      	beq.n	800a59a <__sflush_r+0xae>
 800a5ac:	0793      	lsls	r3, r2, #30
 800a5ae:	680e      	ldr	r6, [r1, #0]
 800a5b0:	bf08      	it	eq
 800a5b2:	694b      	ldreq	r3, [r1, #20]
 800a5b4:	600f      	str	r7, [r1, #0]
 800a5b6:	bf18      	it	ne
 800a5b8:	2300      	movne	r3, #0
 800a5ba:	eba6 0807 	sub.w	r8, r6, r7
 800a5be:	608b      	str	r3, [r1, #8]
 800a5c0:	f1b8 0f00 	cmp.w	r8, #0
 800a5c4:	dde9      	ble.n	800a59a <__sflush_r+0xae>
 800a5c6:	6a21      	ldr	r1, [r4, #32]
 800a5c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a5ca:	4643      	mov	r3, r8
 800a5cc:	463a      	mov	r2, r7
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	47b0      	blx	r6
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	dc08      	bgt.n	800a5e8 <__sflush_r+0xfc>
 800a5d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5de:	81a3      	strh	r3, [r4, #12]
 800a5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e8:	4407      	add	r7, r0
 800a5ea:	eba8 0800 	sub.w	r8, r8, r0
 800a5ee:	e7e7      	b.n	800a5c0 <__sflush_r+0xd4>
 800a5f0:	20400001 	.word	0x20400001

0800a5f4 <_fflush_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	690b      	ldr	r3, [r1, #16]
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	b913      	cbnz	r3, 800a604 <_fflush_r+0x10>
 800a5fe:	2500      	movs	r5, #0
 800a600:	4628      	mov	r0, r5
 800a602:	bd38      	pop	{r3, r4, r5, pc}
 800a604:	b118      	cbz	r0, 800a60e <_fflush_r+0x1a>
 800a606:	6a03      	ldr	r3, [r0, #32]
 800a608:	b90b      	cbnz	r3, 800a60e <_fflush_r+0x1a>
 800a60a:	f7fe fb95 	bl	8008d38 <__sinit>
 800a60e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d0f3      	beq.n	800a5fe <_fflush_r+0xa>
 800a616:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a618:	07d0      	lsls	r0, r2, #31
 800a61a:	d404      	bmi.n	800a626 <_fflush_r+0x32>
 800a61c:	0599      	lsls	r1, r3, #22
 800a61e:	d402      	bmi.n	800a626 <_fflush_r+0x32>
 800a620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a622:	f7fe fc80 	bl	8008f26 <__retarget_lock_acquire_recursive>
 800a626:	4628      	mov	r0, r5
 800a628:	4621      	mov	r1, r4
 800a62a:	f7ff ff5f 	bl	800a4ec <__sflush_r>
 800a62e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a630:	07da      	lsls	r2, r3, #31
 800a632:	4605      	mov	r5, r0
 800a634:	d4e4      	bmi.n	800a600 <_fflush_r+0xc>
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	059b      	lsls	r3, r3, #22
 800a63a:	d4e1      	bmi.n	800a600 <_fflush_r+0xc>
 800a63c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a63e:	f7fe fc73 	bl	8008f28 <__retarget_lock_release_recursive>
 800a642:	e7dd      	b.n	800a600 <_fflush_r+0xc>

0800a644 <_sbrk_r>:
 800a644:	b538      	push	{r3, r4, r5, lr}
 800a646:	4d06      	ldr	r5, [pc, #24]	@ (800a660 <_sbrk_r+0x1c>)
 800a648:	2300      	movs	r3, #0
 800a64a:	4604      	mov	r4, r0
 800a64c:	4608      	mov	r0, r1
 800a64e:	602b      	str	r3, [r5, #0]
 800a650:	f7f8 ff24 	bl	800349c <_sbrk>
 800a654:	1c43      	adds	r3, r0, #1
 800a656:	d102      	bne.n	800a65e <_sbrk_r+0x1a>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	b103      	cbz	r3, 800a65e <_sbrk_r+0x1a>
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	bd38      	pop	{r3, r4, r5, pc}
 800a660:	20000c74 	.word	0x20000c74

0800a664 <__assert_func>:
 800a664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a666:	4614      	mov	r4, r2
 800a668:	461a      	mov	r2, r3
 800a66a:	4b09      	ldr	r3, [pc, #36]	@ (800a690 <__assert_func+0x2c>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4605      	mov	r5, r0
 800a670:	68d8      	ldr	r0, [r3, #12]
 800a672:	b14c      	cbz	r4, 800a688 <__assert_func+0x24>
 800a674:	4b07      	ldr	r3, [pc, #28]	@ (800a694 <__assert_func+0x30>)
 800a676:	9100      	str	r1, [sp, #0]
 800a678:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a67c:	4906      	ldr	r1, [pc, #24]	@ (800a698 <__assert_func+0x34>)
 800a67e:	462b      	mov	r3, r5
 800a680:	f000 f842 	bl	800a708 <fiprintf>
 800a684:	f000 f852 	bl	800a72c <abort>
 800a688:	4b04      	ldr	r3, [pc, #16]	@ (800a69c <__assert_func+0x38>)
 800a68a:	461c      	mov	r4, r3
 800a68c:	e7f3      	b.n	800a676 <__assert_func+0x12>
 800a68e:	bf00      	nop
 800a690:	2000001c 	.word	0x2000001c
 800a694:	0800b2b8 	.word	0x0800b2b8
 800a698:	0800b2c5 	.word	0x0800b2c5
 800a69c:	0800b2f3 	.word	0x0800b2f3

0800a6a0 <_calloc_r>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	fba1 5402 	umull	r5, r4, r1, r2
 800a6a6:	b934      	cbnz	r4, 800a6b6 <_calloc_r+0x16>
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	f7ff fb19 	bl	8009ce0 <_malloc_r>
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	b928      	cbnz	r0, 800a6be <_calloc_r+0x1e>
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	bd70      	pop	{r4, r5, r6, pc}
 800a6b6:	220c      	movs	r2, #12
 800a6b8:	6002      	str	r2, [r0, #0]
 800a6ba:	2600      	movs	r6, #0
 800a6bc:	e7f9      	b.n	800a6b2 <_calloc_r+0x12>
 800a6be:	462a      	mov	r2, r5
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	f7fe fbb2 	bl	8008e2a <memset>
 800a6c6:	e7f4      	b.n	800a6b2 <_calloc_r+0x12>

0800a6c8 <__ascii_mbtowc>:
 800a6c8:	b082      	sub	sp, #8
 800a6ca:	b901      	cbnz	r1, 800a6ce <__ascii_mbtowc+0x6>
 800a6cc:	a901      	add	r1, sp, #4
 800a6ce:	b142      	cbz	r2, 800a6e2 <__ascii_mbtowc+0x1a>
 800a6d0:	b14b      	cbz	r3, 800a6e6 <__ascii_mbtowc+0x1e>
 800a6d2:	7813      	ldrb	r3, [r2, #0]
 800a6d4:	600b      	str	r3, [r1, #0]
 800a6d6:	7812      	ldrb	r2, [r2, #0]
 800a6d8:	1e10      	subs	r0, r2, #0
 800a6da:	bf18      	it	ne
 800a6dc:	2001      	movne	r0, #1
 800a6de:	b002      	add	sp, #8
 800a6e0:	4770      	bx	lr
 800a6e2:	4610      	mov	r0, r2
 800a6e4:	e7fb      	b.n	800a6de <__ascii_mbtowc+0x16>
 800a6e6:	f06f 0001 	mvn.w	r0, #1
 800a6ea:	e7f8      	b.n	800a6de <__ascii_mbtowc+0x16>

0800a6ec <__ascii_wctomb>:
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	4608      	mov	r0, r1
 800a6f0:	b141      	cbz	r1, 800a704 <__ascii_wctomb+0x18>
 800a6f2:	2aff      	cmp	r2, #255	@ 0xff
 800a6f4:	d904      	bls.n	800a700 <__ascii_wctomb+0x14>
 800a6f6:	228a      	movs	r2, #138	@ 0x8a
 800a6f8:	601a      	str	r2, [r3, #0]
 800a6fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fe:	4770      	bx	lr
 800a700:	700a      	strb	r2, [r1, #0]
 800a702:	2001      	movs	r0, #1
 800a704:	4770      	bx	lr
	...

0800a708 <fiprintf>:
 800a708:	b40e      	push	{r1, r2, r3}
 800a70a:	b503      	push	{r0, r1, lr}
 800a70c:	4601      	mov	r1, r0
 800a70e:	ab03      	add	r3, sp, #12
 800a710:	4805      	ldr	r0, [pc, #20]	@ (800a728 <fiprintf+0x20>)
 800a712:	f853 2b04 	ldr.w	r2, [r3], #4
 800a716:	6800      	ldr	r0, [r0, #0]
 800a718:	9301      	str	r3, [sp, #4]
 800a71a:	f000 f837 	bl	800a78c <_vfiprintf_r>
 800a71e:	b002      	add	sp, #8
 800a720:	f85d eb04 	ldr.w	lr, [sp], #4
 800a724:	b003      	add	sp, #12
 800a726:	4770      	bx	lr
 800a728:	2000001c 	.word	0x2000001c

0800a72c <abort>:
 800a72c:	b508      	push	{r3, lr}
 800a72e:	2006      	movs	r0, #6
 800a730:	f000 fa00 	bl	800ab34 <raise>
 800a734:	2001      	movs	r0, #1
 800a736:	f7f8 fe39 	bl	80033ac <_exit>

0800a73a <__sfputc_r>:
 800a73a:	6893      	ldr	r3, [r2, #8]
 800a73c:	3b01      	subs	r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	b410      	push	{r4}
 800a742:	6093      	str	r3, [r2, #8]
 800a744:	da08      	bge.n	800a758 <__sfputc_r+0x1e>
 800a746:	6994      	ldr	r4, [r2, #24]
 800a748:	42a3      	cmp	r3, r4
 800a74a:	db01      	blt.n	800a750 <__sfputc_r+0x16>
 800a74c:	290a      	cmp	r1, #10
 800a74e:	d103      	bne.n	800a758 <__sfputc_r+0x1e>
 800a750:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a754:	f000 b932 	b.w	800a9bc <__swbuf_r>
 800a758:	6813      	ldr	r3, [r2, #0]
 800a75a:	1c58      	adds	r0, r3, #1
 800a75c:	6010      	str	r0, [r2, #0]
 800a75e:	7019      	strb	r1, [r3, #0]
 800a760:	4608      	mov	r0, r1
 800a762:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <__sfputs_r>:
 800a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76a:	4606      	mov	r6, r0
 800a76c:	460f      	mov	r7, r1
 800a76e:	4614      	mov	r4, r2
 800a770:	18d5      	adds	r5, r2, r3
 800a772:	42ac      	cmp	r4, r5
 800a774:	d101      	bne.n	800a77a <__sfputs_r+0x12>
 800a776:	2000      	movs	r0, #0
 800a778:	e007      	b.n	800a78a <__sfputs_r+0x22>
 800a77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a77e:	463a      	mov	r2, r7
 800a780:	4630      	mov	r0, r6
 800a782:	f7ff ffda 	bl	800a73a <__sfputc_r>
 800a786:	1c43      	adds	r3, r0, #1
 800a788:	d1f3      	bne.n	800a772 <__sfputs_r+0xa>
 800a78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a78c <_vfiprintf_r>:
 800a78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a790:	460d      	mov	r5, r1
 800a792:	b09d      	sub	sp, #116	@ 0x74
 800a794:	4614      	mov	r4, r2
 800a796:	4698      	mov	r8, r3
 800a798:	4606      	mov	r6, r0
 800a79a:	b118      	cbz	r0, 800a7a4 <_vfiprintf_r+0x18>
 800a79c:	6a03      	ldr	r3, [r0, #32]
 800a79e:	b90b      	cbnz	r3, 800a7a4 <_vfiprintf_r+0x18>
 800a7a0:	f7fe faca 	bl	8008d38 <__sinit>
 800a7a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7a6:	07d9      	lsls	r1, r3, #31
 800a7a8:	d405      	bmi.n	800a7b6 <_vfiprintf_r+0x2a>
 800a7aa:	89ab      	ldrh	r3, [r5, #12]
 800a7ac:	059a      	lsls	r2, r3, #22
 800a7ae:	d402      	bmi.n	800a7b6 <_vfiprintf_r+0x2a>
 800a7b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7b2:	f7fe fbb8 	bl	8008f26 <__retarget_lock_acquire_recursive>
 800a7b6:	89ab      	ldrh	r3, [r5, #12]
 800a7b8:	071b      	lsls	r3, r3, #28
 800a7ba:	d501      	bpl.n	800a7c0 <_vfiprintf_r+0x34>
 800a7bc:	692b      	ldr	r3, [r5, #16]
 800a7be:	b99b      	cbnz	r3, 800a7e8 <_vfiprintf_r+0x5c>
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	f000 f938 	bl	800aa38 <__swsetup_r>
 800a7c8:	b170      	cbz	r0, 800a7e8 <_vfiprintf_r+0x5c>
 800a7ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7cc:	07dc      	lsls	r4, r3, #31
 800a7ce:	d504      	bpl.n	800a7da <_vfiprintf_r+0x4e>
 800a7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d4:	b01d      	add	sp, #116	@ 0x74
 800a7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7da:	89ab      	ldrh	r3, [r5, #12]
 800a7dc:	0598      	lsls	r0, r3, #22
 800a7de:	d4f7      	bmi.n	800a7d0 <_vfiprintf_r+0x44>
 800a7e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7e2:	f7fe fba1 	bl	8008f28 <__retarget_lock_release_recursive>
 800a7e6:	e7f3      	b.n	800a7d0 <_vfiprintf_r+0x44>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ec:	2320      	movs	r3, #32
 800a7ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7f6:	2330      	movs	r3, #48	@ 0x30
 800a7f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a9a8 <_vfiprintf_r+0x21c>
 800a7fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a800:	f04f 0901 	mov.w	r9, #1
 800a804:	4623      	mov	r3, r4
 800a806:	469a      	mov	sl, r3
 800a808:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a80c:	b10a      	cbz	r2, 800a812 <_vfiprintf_r+0x86>
 800a80e:	2a25      	cmp	r2, #37	@ 0x25
 800a810:	d1f9      	bne.n	800a806 <_vfiprintf_r+0x7a>
 800a812:	ebba 0b04 	subs.w	fp, sl, r4
 800a816:	d00b      	beq.n	800a830 <_vfiprintf_r+0xa4>
 800a818:	465b      	mov	r3, fp
 800a81a:	4622      	mov	r2, r4
 800a81c:	4629      	mov	r1, r5
 800a81e:	4630      	mov	r0, r6
 800a820:	f7ff ffa2 	bl	800a768 <__sfputs_r>
 800a824:	3001      	adds	r0, #1
 800a826:	f000 80a7 	beq.w	800a978 <_vfiprintf_r+0x1ec>
 800a82a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a82c:	445a      	add	r2, fp
 800a82e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a830:	f89a 3000 	ldrb.w	r3, [sl]
 800a834:	2b00      	cmp	r3, #0
 800a836:	f000 809f 	beq.w	800a978 <_vfiprintf_r+0x1ec>
 800a83a:	2300      	movs	r3, #0
 800a83c:	f04f 32ff 	mov.w	r2, #4294967295
 800a840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a844:	f10a 0a01 	add.w	sl, sl, #1
 800a848:	9304      	str	r3, [sp, #16]
 800a84a:	9307      	str	r3, [sp, #28]
 800a84c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a850:	931a      	str	r3, [sp, #104]	@ 0x68
 800a852:	4654      	mov	r4, sl
 800a854:	2205      	movs	r2, #5
 800a856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a85a:	4853      	ldr	r0, [pc, #332]	@ (800a9a8 <_vfiprintf_r+0x21c>)
 800a85c:	f7f5 fcd8 	bl	8000210 <memchr>
 800a860:	9a04      	ldr	r2, [sp, #16]
 800a862:	b9d8      	cbnz	r0, 800a89c <_vfiprintf_r+0x110>
 800a864:	06d1      	lsls	r1, r2, #27
 800a866:	bf44      	itt	mi
 800a868:	2320      	movmi	r3, #32
 800a86a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a86e:	0713      	lsls	r3, r2, #28
 800a870:	bf44      	itt	mi
 800a872:	232b      	movmi	r3, #43	@ 0x2b
 800a874:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a878:	f89a 3000 	ldrb.w	r3, [sl]
 800a87c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a87e:	d015      	beq.n	800a8ac <_vfiprintf_r+0x120>
 800a880:	9a07      	ldr	r2, [sp, #28]
 800a882:	4654      	mov	r4, sl
 800a884:	2000      	movs	r0, #0
 800a886:	f04f 0c0a 	mov.w	ip, #10
 800a88a:	4621      	mov	r1, r4
 800a88c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a890:	3b30      	subs	r3, #48	@ 0x30
 800a892:	2b09      	cmp	r3, #9
 800a894:	d94b      	bls.n	800a92e <_vfiprintf_r+0x1a2>
 800a896:	b1b0      	cbz	r0, 800a8c6 <_vfiprintf_r+0x13a>
 800a898:	9207      	str	r2, [sp, #28]
 800a89a:	e014      	b.n	800a8c6 <_vfiprintf_r+0x13a>
 800a89c:	eba0 0308 	sub.w	r3, r0, r8
 800a8a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	9304      	str	r3, [sp, #16]
 800a8a8:	46a2      	mov	sl, r4
 800a8aa:	e7d2      	b.n	800a852 <_vfiprintf_r+0xc6>
 800a8ac:	9b03      	ldr	r3, [sp, #12]
 800a8ae:	1d19      	adds	r1, r3, #4
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	9103      	str	r1, [sp, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	bfbb      	ittet	lt
 800a8b8:	425b      	neglt	r3, r3
 800a8ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a8be:	9307      	strge	r3, [sp, #28]
 800a8c0:	9307      	strlt	r3, [sp, #28]
 800a8c2:	bfb8      	it	lt
 800a8c4:	9204      	strlt	r2, [sp, #16]
 800a8c6:	7823      	ldrb	r3, [r4, #0]
 800a8c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8ca:	d10a      	bne.n	800a8e2 <_vfiprintf_r+0x156>
 800a8cc:	7863      	ldrb	r3, [r4, #1]
 800a8ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8d0:	d132      	bne.n	800a938 <_vfiprintf_r+0x1ac>
 800a8d2:	9b03      	ldr	r3, [sp, #12]
 800a8d4:	1d1a      	adds	r2, r3, #4
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	9203      	str	r2, [sp, #12]
 800a8da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a8de:	3402      	adds	r4, #2
 800a8e0:	9305      	str	r3, [sp, #20]
 800a8e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a9b8 <_vfiprintf_r+0x22c>
 800a8e6:	7821      	ldrb	r1, [r4, #0]
 800a8e8:	2203      	movs	r2, #3
 800a8ea:	4650      	mov	r0, sl
 800a8ec:	f7f5 fc90 	bl	8000210 <memchr>
 800a8f0:	b138      	cbz	r0, 800a902 <_vfiprintf_r+0x176>
 800a8f2:	9b04      	ldr	r3, [sp, #16]
 800a8f4:	eba0 000a 	sub.w	r0, r0, sl
 800a8f8:	2240      	movs	r2, #64	@ 0x40
 800a8fa:	4082      	lsls	r2, r0
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	3401      	adds	r4, #1
 800a900:	9304      	str	r3, [sp, #16]
 800a902:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a906:	4829      	ldr	r0, [pc, #164]	@ (800a9ac <_vfiprintf_r+0x220>)
 800a908:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a90c:	2206      	movs	r2, #6
 800a90e:	f7f5 fc7f 	bl	8000210 <memchr>
 800a912:	2800      	cmp	r0, #0
 800a914:	d03f      	beq.n	800a996 <_vfiprintf_r+0x20a>
 800a916:	4b26      	ldr	r3, [pc, #152]	@ (800a9b0 <_vfiprintf_r+0x224>)
 800a918:	bb1b      	cbnz	r3, 800a962 <_vfiprintf_r+0x1d6>
 800a91a:	9b03      	ldr	r3, [sp, #12]
 800a91c:	3307      	adds	r3, #7
 800a91e:	f023 0307 	bic.w	r3, r3, #7
 800a922:	3308      	adds	r3, #8
 800a924:	9303      	str	r3, [sp, #12]
 800a926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a928:	443b      	add	r3, r7
 800a92a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a92c:	e76a      	b.n	800a804 <_vfiprintf_r+0x78>
 800a92e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a932:	460c      	mov	r4, r1
 800a934:	2001      	movs	r0, #1
 800a936:	e7a8      	b.n	800a88a <_vfiprintf_r+0xfe>
 800a938:	2300      	movs	r3, #0
 800a93a:	3401      	adds	r4, #1
 800a93c:	9305      	str	r3, [sp, #20]
 800a93e:	4619      	mov	r1, r3
 800a940:	f04f 0c0a 	mov.w	ip, #10
 800a944:	4620      	mov	r0, r4
 800a946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a94a:	3a30      	subs	r2, #48	@ 0x30
 800a94c:	2a09      	cmp	r2, #9
 800a94e:	d903      	bls.n	800a958 <_vfiprintf_r+0x1cc>
 800a950:	2b00      	cmp	r3, #0
 800a952:	d0c6      	beq.n	800a8e2 <_vfiprintf_r+0x156>
 800a954:	9105      	str	r1, [sp, #20]
 800a956:	e7c4      	b.n	800a8e2 <_vfiprintf_r+0x156>
 800a958:	fb0c 2101 	mla	r1, ip, r1, r2
 800a95c:	4604      	mov	r4, r0
 800a95e:	2301      	movs	r3, #1
 800a960:	e7f0      	b.n	800a944 <_vfiprintf_r+0x1b8>
 800a962:	ab03      	add	r3, sp, #12
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	462a      	mov	r2, r5
 800a968:	4b12      	ldr	r3, [pc, #72]	@ (800a9b4 <_vfiprintf_r+0x228>)
 800a96a:	a904      	add	r1, sp, #16
 800a96c:	4630      	mov	r0, r6
 800a96e:	f7fd fda1 	bl	80084b4 <_printf_float>
 800a972:	4607      	mov	r7, r0
 800a974:	1c78      	adds	r0, r7, #1
 800a976:	d1d6      	bne.n	800a926 <_vfiprintf_r+0x19a>
 800a978:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a97a:	07d9      	lsls	r1, r3, #31
 800a97c:	d405      	bmi.n	800a98a <_vfiprintf_r+0x1fe>
 800a97e:	89ab      	ldrh	r3, [r5, #12]
 800a980:	059a      	lsls	r2, r3, #22
 800a982:	d402      	bmi.n	800a98a <_vfiprintf_r+0x1fe>
 800a984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a986:	f7fe facf 	bl	8008f28 <__retarget_lock_release_recursive>
 800a98a:	89ab      	ldrh	r3, [r5, #12]
 800a98c:	065b      	lsls	r3, r3, #25
 800a98e:	f53f af1f 	bmi.w	800a7d0 <_vfiprintf_r+0x44>
 800a992:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a994:	e71e      	b.n	800a7d4 <_vfiprintf_r+0x48>
 800a996:	ab03      	add	r3, sp, #12
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	462a      	mov	r2, r5
 800a99c:	4b05      	ldr	r3, [pc, #20]	@ (800a9b4 <_vfiprintf_r+0x228>)
 800a99e:	a904      	add	r1, sp, #16
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f7fe f81f 	bl	80089e4 <_printf_i>
 800a9a6:	e7e4      	b.n	800a972 <_vfiprintf_r+0x1e6>
 800a9a8:	0800b2f4 	.word	0x0800b2f4
 800a9ac:	0800b2fe 	.word	0x0800b2fe
 800a9b0:	080084b5 	.word	0x080084b5
 800a9b4:	0800a769 	.word	0x0800a769
 800a9b8:	0800b2fa 	.word	0x0800b2fa

0800a9bc <__swbuf_r>:
 800a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9be:	460e      	mov	r6, r1
 800a9c0:	4614      	mov	r4, r2
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	b118      	cbz	r0, 800a9ce <__swbuf_r+0x12>
 800a9c6:	6a03      	ldr	r3, [r0, #32]
 800a9c8:	b90b      	cbnz	r3, 800a9ce <__swbuf_r+0x12>
 800a9ca:	f7fe f9b5 	bl	8008d38 <__sinit>
 800a9ce:	69a3      	ldr	r3, [r4, #24]
 800a9d0:	60a3      	str	r3, [r4, #8]
 800a9d2:	89a3      	ldrh	r3, [r4, #12]
 800a9d4:	071a      	lsls	r2, r3, #28
 800a9d6:	d501      	bpl.n	800a9dc <__swbuf_r+0x20>
 800a9d8:	6923      	ldr	r3, [r4, #16]
 800a9da:	b943      	cbnz	r3, 800a9ee <__swbuf_r+0x32>
 800a9dc:	4621      	mov	r1, r4
 800a9de:	4628      	mov	r0, r5
 800a9e0:	f000 f82a 	bl	800aa38 <__swsetup_r>
 800a9e4:	b118      	cbz	r0, 800a9ee <__swbuf_r+0x32>
 800a9e6:	f04f 37ff 	mov.w	r7, #4294967295
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	6922      	ldr	r2, [r4, #16]
 800a9f2:	1a98      	subs	r0, r3, r2
 800a9f4:	6963      	ldr	r3, [r4, #20]
 800a9f6:	b2f6      	uxtb	r6, r6
 800a9f8:	4283      	cmp	r3, r0
 800a9fa:	4637      	mov	r7, r6
 800a9fc:	dc05      	bgt.n	800aa0a <__swbuf_r+0x4e>
 800a9fe:	4621      	mov	r1, r4
 800aa00:	4628      	mov	r0, r5
 800aa02:	f7ff fdf7 	bl	800a5f4 <_fflush_r>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d1ed      	bne.n	800a9e6 <__swbuf_r+0x2a>
 800aa0a:	68a3      	ldr	r3, [r4, #8]
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	60a3      	str	r3, [r4, #8]
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	1c5a      	adds	r2, r3, #1
 800aa14:	6022      	str	r2, [r4, #0]
 800aa16:	701e      	strb	r6, [r3, #0]
 800aa18:	6962      	ldr	r2, [r4, #20]
 800aa1a:	1c43      	adds	r3, r0, #1
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d004      	beq.n	800aa2a <__swbuf_r+0x6e>
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	07db      	lsls	r3, r3, #31
 800aa24:	d5e1      	bpl.n	800a9ea <__swbuf_r+0x2e>
 800aa26:	2e0a      	cmp	r6, #10
 800aa28:	d1df      	bne.n	800a9ea <__swbuf_r+0x2e>
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	f7ff fde1 	bl	800a5f4 <_fflush_r>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	d0d9      	beq.n	800a9ea <__swbuf_r+0x2e>
 800aa36:	e7d6      	b.n	800a9e6 <__swbuf_r+0x2a>

0800aa38 <__swsetup_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4b29      	ldr	r3, [pc, #164]	@ (800aae0 <__swsetup_r+0xa8>)
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	6818      	ldr	r0, [r3, #0]
 800aa40:	460c      	mov	r4, r1
 800aa42:	b118      	cbz	r0, 800aa4c <__swsetup_r+0x14>
 800aa44:	6a03      	ldr	r3, [r0, #32]
 800aa46:	b90b      	cbnz	r3, 800aa4c <__swsetup_r+0x14>
 800aa48:	f7fe f976 	bl	8008d38 <__sinit>
 800aa4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa50:	0719      	lsls	r1, r3, #28
 800aa52:	d422      	bmi.n	800aa9a <__swsetup_r+0x62>
 800aa54:	06da      	lsls	r2, r3, #27
 800aa56:	d407      	bmi.n	800aa68 <__swsetup_r+0x30>
 800aa58:	2209      	movs	r2, #9
 800aa5a:	602a      	str	r2, [r5, #0]
 800aa5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa60:	81a3      	strh	r3, [r4, #12]
 800aa62:	f04f 30ff 	mov.w	r0, #4294967295
 800aa66:	e033      	b.n	800aad0 <__swsetup_r+0x98>
 800aa68:	0758      	lsls	r0, r3, #29
 800aa6a:	d512      	bpl.n	800aa92 <__swsetup_r+0x5a>
 800aa6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa6e:	b141      	cbz	r1, 800aa82 <__swsetup_r+0x4a>
 800aa70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa74:	4299      	cmp	r1, r3
 800aa76:	d002      	beq.n	800aa7e <__swsetup_r+0x46>
 800aa78:	4628      	mov	r0, r5
 800aa7a:	f7ff f8bd 	bl	8009bf8 <_free_r>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa82:	89a3      	ldrh	r3, [r4, #12]
 800aa84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aa88:	81a3      	strh	r3, [r4, #12]
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	6063      	str	r3, [r4, #4]
 800aa8e:	6923      	ldr	r3, [r4, #16]
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	89a3      	ldrh	r3, [r4, #12]
 800aa94:	f043 0308 	orr.w	r3, r3, #8
 800aa98:	81a3      	strh	r3, [r4, #12]
 800aa9a:	6923      	ldr	r3, [r4, #16]
 800aa9c:	b94b      	cbnz	r3, 800aab2 <__swsetup_r+0x7a>
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aaa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aaa8:	d003      	beq.n	800aab2 <__swsetup_r+0x7a>
 800aaaa:	4621      	mov	r1, r4
 800aaac:	4628      	mov	r0, r5
 800aaae:	f000 f883 	bl	800abb8 <__smakebuf_r>
 800aab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab6:	f013 0201 	ands.w	r2, r3, #1
 800aaba:	d00a      	beq.n	800aad2 <__swsetup_r+0x9a>
 800aabc:	2200      	movs	r2, #0
 800aabe:	60a2      	str	r2, [r4, #8]
 800aac0:	6962      	ldr	r2, [r4, #20]
 800aac2:	4252      	negs	r2, r2
 800aac4:	61a2      	str	r2, [r4, #24]
 800aac6:	6922      	ldr	r2, [r4, #16]
 800aac8:	b942      	cbnz	r2, 800aadc <__swsetup_r+0xa4>
 800aaca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aace:	d1c5      	bne.n	800aa5c <__swsetup_r+0x24>
 800aad0:	bd38      	pop	{r3, r4, r5, pc}
 800aad2:	0799      	lsls	r1, r3, #30
 800aad4:	bf58      	it	pl
 800aad6:	6962      	ldrpl	r2, [r4, #20]
 800aad8:	60a2      	str	r2, [r4, #8]
 800aada:	e7f4      	b.n	800aac6 <__swsetup_r+0x8e>
 800aadc:	2000      	movs	r0, #0
 800aade:	e7f7      	b.n	800aad0 <__swsetup_r+0x98>
 800aae0:	2000001c 	.word	0x2000001c

0800aae4 <_raise_r>:
 800aae4:	291f      	cmp	r1, #31
 800aae6:	b538      	push	{r3, r4, r5, lr}
 800aae8:	4605      	mov	r5, r0
 800aaea:	460c      	mov	r4, r1
 800aaec:	d904      	bls.n	800aaf8 <_raise_r+0x14>
 800aaee:	2316      	movs	r3, #22
 800aaf0:	6003      	str	r3, [r0, #0]
 800aaf2:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf6:	bd38      	pop	{r3, r4, r5, pc}
 800aaf8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aafa:	b112      	cbz	r2, 800ab02 <_raise_r+0x1e>
 800aafc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab00:	b94b      	cbnz	r3, 800ab16 <_raise_r+0x32>
 800ab02:	4628      	mov	r0, r5
 800ab04:	f000 f830 	bl	800ab68 <_getpid_r>
 800ab08:	4622      	mov	r2, r4
 800ab0a:	4601      	mov	r1, r0
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab12:	f000 b817 	b.w	800ab44 <_kill_r>
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d00a      	beq.n	800ab30 <_raise_r+0x4c>
 800ab1a:	1c59      	adds	r1, r3, #1
 800ab1c:	d103      	bne.n	800ab26 <_raise_r+0x42>
 800ab1e:	2316      	movs	r3, #22
 800ab20:	6003      	str	r3, [r0, #0]
 800ab22:	2001      	movs	r0, #1
 800ab24:	e7e7      	b.n	800aaf6 <_raise_r+0x12>
 800ab26:	2100      	movs	r1, #0
 800ab28:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	4798      	blx	r3
 800ab30:	2000      	movs	r0, #0
 800ab32:	e7e0      	b.n	800aaf6 <_raise_r+0x12>

0800ab34 <raise>:
 800ab34:	4b02      	ldr	r3, [pc, #8]	@ (800ab40 <raise+0xc>)
 800ab36:	4601      	mov	r1, r0
 800ab38:	6818      	ldr	r0, [r3, #0]
 800ab3a:	f7ff bfd3 	b.w	800aae4 <_raise_r>
 800ab3e:	bf00      	nop
 800ab40:	2000001c 	.word	0x2000001c

0800ab44 <_kill_r>:
 800ab44:	b538      	push	{r3, r4, r5, lr}
 800ab46:	4d07      	ldr	r5, [pc, #28]	@ (800ab64 <_kill_r+0x20>)
 800ab48:	2300      	movs	r3, #0
 800ab4a:	4604      	mov	r4, r0
 800ab4c:	4608      	mov	r0, r1
 800ab4e:	4611      	mov	r1, r2
 800ab50:	602b      	str	r3, [r5, #0]
 800ab52:	f7f8 fc1b 	bl	800338c <_kill>
 800ab56:	1c43      	adds	r3, r0, #1
 800ab58:	d102      	bne.n	800ab60 <_kill_r+0x1c>
 800ab5a:	682b      	ldr	r3, [r5, #0]
 800ab5c:	b103      	cbz	r3, 800ab60 <_kill_r+0x1c>
 800ab5e:	6023      	str	r3, [r4, #0]
 800ab60:	bd38      	pop	{r3, r4, r5, pc}
 800ab62:	bf00      	nop
 800ab64:	20000c74 	.word	0x20000c74

0800ab68 <_getpid_r>:
 800ab68:	f7f8 bc08 	b.w	800337c <_getpid>

0800ab6c <__swhatbuf_r>:
 800ab6c:	b570      	push	{r4, r5, r6, lr}
 800ab6e:	460c      	mov	r4, r1
 800ab70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab74:	2900      	cmp	r1, #0
 800ab76:	b096      	sub	sp, #88	@ 0x58
 800ab78:	4615      	mov	r5, r2
 800ab7a:	461e      	mov	r6, r3
 800ab7c:	da0d      	bge.n	800ab9a <__swhatbuf_r+0x2e>
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab84:	f04f 0100 	mov.w	r1, #0
 800ab88:	bf14      	ite	ne
 800ab8a:	2340      	movne	r3, #64	@ 0x40
 800ab8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab90:	2000      	movs	r0, #0
 800ab92:	6031      	str	r1, [r6, #0]
 800ab94:	602b      	str	r3, [r5, #0]
 800ab96:	b016      	add	sp, #88	@ 0x58
 800ab98:	bd70      	pop	{r4, r5, r6, pc}
 800ab9a:	466a      	mov	r2, sp
 800ab9c:	f000 f848 	bl	800ac30 <_fstat_r>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	dbec      	blt.n	800ab7e <__swhatbuf_r+0x12>
 800aba4:	9901      	ldr	r1, [sp, #4]
 800aba6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800abaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800abae:	4259      	negs	r1, r3
 800abb0:	4159      	adcs	r1, r3
 800abb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abb6:	e7eb      	b.n	800ab90 <__swhatbuf_r+0x24>

0800abb8 <__smakebuf_r>:
 800abb8:	898b      	ldrh	r3, [r1, #12]
 800abba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abbc:	079d      	lsls	r5, r3, #30
 800abbe:	4606      	mov	r6, r0
 800abc0:	460c      	mov	r4, r1
 800abc2:	d507      	bpl.n	800abd4 <__smakebuf_r+0x1c>
 800abc4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800abc8:	6023      	str	r3, [r4, #0]
 800abca:	6123      	str	r3, [r4, #16]
 800abcc:	2301      	movs	r3, #1
 800abce:	6163      	str	r3, [r4, #20]
 800abd0:	b003      	add	sp, #12
 800abd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abd4:	ab01      	add	r3, sp, #4
 800abd6:	466a      	mov	r2, sp
 800abd8:	f7ff ffc8 	bl	800ab6c <__swhatbuf_r>
 800abdc:	9f00      	ldr	r7, [sp, #0]
 800abde:	4605      	mov	r5, r0
 800abe0:	4639      	mov	r1, r7
 800abe2:	4630      	mov	r0, r6
 800abe4:	f7ff f87c 	bl	8009ce0 <_malloc_r>
 800abe8:	b948      	cbnz	r0, 800abfe <__smakebuf_r+0x46>
 800abea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abee:	059a      	lsls	r2, r3, #22
 800abf0:	d4ee      	bmi.n	800abd0 <__smakebuf_r+0x18>
 800abf2:	f023 0303 	bic.w	r3, r3, #3
 800abf6:	f043 0302 	orr.w	r3, r3, #2
 800abfa:	81a3      	strh	r3, [r4, #12]
 800abfc:	e7e2      	b.n	800abc4 <__smakebuf_r+0xc>
 800abfe:	89a3      	ldrh	r3, [r4, #12]
 800ac00:	6020      	str	r0, [r4, #0]
 800ac02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac06:	81a3      	strh	r3, [r4, #12]
 800ac08:	9b01      	ldr	r3, [sp, #4]
 800ac0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac0e:	b15b      	cbz	r3, 800ac28 <__smakebuf_r+0x70>
 800ac10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac14:	4630      	mov	r0, r6
 800ac16:	f000 f81d 	bl	800ac54 <_isatty_r>
 800ac1a:	b128      	cbz	r0, 800ac28 <__smakebuf_r+0x70>
 800ac1c:	89a3      	ldrh	r3, [r4, #12]
 800ac1e:	f023 0303 	bic.w	r3, r3, #3
 800ac22:	f043 0301 	orr.w	r3, r3, #1
 800ac26:	81a3      	strh	r3, [r4, #12]
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	431d      	orrs	r5, r3
 800ac2c:	81a5      	strh	r5, [r4, #12]
 800ac2e:	e7cf      	b.n	800abd0 <__smakebuf_r+0x18>

0800ac30 <_fstat_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	4d07      	ldr	r5, [pc, #28]	@ (800ac50 <_fstat_r+0x20>)
 800ac34:	2300      	movs	r3, #0
 800ac36:	4604      	mov	r4, r0
 800ac38:	4608      	mov	r0, r1
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	602b      	str	r3, [r5, #0]
 800ac3e:	f7f8 fc05 	bl	800344c <_fstat>
 800ac42:	1c43      	adds	r3, r0, #1
 800ac44:	d102      	bne.n	800ac4c <_fstat_r+0x1c>
 800ac46:	682b      	ldr	r3, [r5, #0]
 800ac48:	b103      	cbz	r3, 800ac4c <_fstat_r+0x1c>
 800ac4a:	6023      	str	r3, [r4, #0]
 800ac4c:	bd38      	pop	{r3, r4, r5, pc}
 800ac4e:	bf00      	nop
 800ac50:	20000c74 	.word	0x20000c74

0800ac54 <_isatty_r>:
 800ac54:	b538      	push	{r3, r4, r5, lr}
 800ac56:	4d06      	ldr	r5, [pc, #24]	@ (800ac70 <_isatty_r+0x1c>)
 800ac58:	2300      	movs	r3, #0
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	4608      	mov	r0, r1
 800ac5e:	602b      	str	r3, [r5, #0]
 800ac60:	f7f8 fc04 	bl	800346c <_isatty>
 800ac64:	1c43      	adds	r3, r0, #1
 800ac66:	d102      	bne.n	800ac6e <_isatty_r+0x1a>
 800ac68:	682b      	ldr	r3, [r5, #0]
 800ac6a:	b103      	cbz	r3, 800ac6e <_isatty_r+0x1a>
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	bd38      	pop	{r3, r4, r5, pc}
 800ac70:	20000c74 	.word	0x20000c74

0800ac74 <fmaxf>:
 800ac74:	b508      	push	{r3, lr}
 800ac76:	ed2d 8b02 	vpush	{d8}
 800ac7a:	eeb0 8a40 	vmov.f32	s16, s0
 800ac7e:	eef0 8a60 	vmov.f32	s17, s1
 800ac82:	f000 f831 	bl	800ace8 <__fpclassifyf>
 800ac86:	b930      	cbnz	r0, 800ac96 <fmaxf+0x22>
 800ac88:	eeb0 8a68 	vmov.f32	s16, s17
 800ac8c:	eeb0 0a48 	vmov.f32	s0, s16
 800ac90:	ecbd 8b02 	vpop	{d8}
 800ac94:	bd08      	pop	{r3, pc}
 800ac96:	eeb0 0a68 	vmov.f32	s0, s17
 800ac9a:	f000 f825 	bl	800ace8 <__fpclassifyf>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	d0f4      	beq.n	800ac8c <fmaxf+0x18>
 800aca2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800aca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acaa:	dded      	ble.n	800ac88 <fmaxf+0x14>
 800acac:	e7ee      	b.n	800ac8c <fmaxf+0x18>

0800acae <fminf>:
 800acae:	b508      	push	{r3, lr}
 800acb0:	ed2d 8b02 	vpush	{d8}
 800acb4:	eeb0 8a40 	vmov.f32	s16, s0
 800acb8:	eef0 8a60 	vmov.f32	s17, s1
 800acbc:	f000 f814 	bl	800ace8 <__fpclassifyf>
 800acc0:	b930      	cbnz	r0, 800acd0 <fminf+0x22>
 800acc2:	eeb0 8a68 	vmov.f32	s16, s17
 800acc6:	eeb0 0a48 	vmov.f32	s0, s16
 800acca:	ecbd 8b02 	vpop	{d8}
 800acce:	bd08      	pop	{r3, pc}
 800acd0:	eeb0 0a68 	vmov.f32	s0, s17
 800acd4:	f000 f808 	bl	800ace8 <__fpclassifyf>
 800acd8:	2800      	cmp	r0, #0
 800acda:	d0f4      	beq.n	800acc6 <fminf+0x18>
 800acdc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ace0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ace4:	d5ed      	bpl.n	800acc2 <fminf+0x14>
 800ace6:	e7ee      	b.n	800acc6 <fminf+0x18>

0800ace8 <__fpclassifyf>:
 800ace8:	ee10 3a10 	vmov	r3, s0
 800acec:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800acf0:	d00d      	beq.n	800ad0e <__fpclassifyf+0x26>
 800acf2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800acf6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800acfa:	d30a      	bcc.n	800ad12 <__fpclassifyf+0x2a>
 800acfc:	4b07      	ldr	r3, [pc, #28]	@ (800ad1c <__fpclassifyf+0x34>)
 800acfe:	1e42      	subs	r2, r0, #1
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d908      	bls.n	800ad16 <__fpclassifyf+0x2e>
 800ad04:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800ad08:	4258      	negs	r0, r3
 800ad0a:	4158      	adcs	r0, r3
 800ad0c:	4770      	bx	lr
 800ad0e:	2002      	movs	r0, #2
 800ad10:	4770      	bx	lr
 800ad12:	2004      	movs	r0, #4
 800ad14:	4770      	bx	lr
 800ad16:	2003      	movs	r0, #3
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	007ffffe 	.word	0x007ffffe

0800ad20 <_init>:
 800ad20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad22:	bf00      	nop
 800ad24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad26:	bc08      	pop	{r3}
 800ad28:	469e      	mov	lr, r3
 800ad2a:	4770      	bx	lr

0800ad2c <_fini>:
 800ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2e:	bf00      	nop
 800ad30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad32:	bc08      	pop	{r3}
 800ad34:	469e      	mov	lr, r3
 800ad36:	4770      	bx	lr
