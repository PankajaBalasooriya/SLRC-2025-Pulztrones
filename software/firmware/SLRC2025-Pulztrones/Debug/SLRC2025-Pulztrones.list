
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d55c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000854  0800d730  0800d730  0000e730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df84  0800df84  0000f234  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800df84  0800df84  0000ef84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df8c  0800df8c  0000f234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df8c  0800df8c  0000ef8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800df90  0800df90  0000ef90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  0800df94  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c8c  20000234  0800e1c8  0000f234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ec0  0800e1c8  0000fec0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad38  00000000  00000000  0000f264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c1e  00000000  00000000  00029f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  0002ebc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001447  00000000  00000000  00030628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292d5  00000000  00000000  00031a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026186  00000000  00000000  0005ad44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e921a  00000000  00000000  00080eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a0e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ca4  00000000  00000000  0016a128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009d  00000000  00000000  00171dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000234 	.word	0x20000234
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d714 	.word	0x0800d714

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000238 	.word	0x20000238
 800020c:	0800d714 	.word	0x0800d714

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <Arm_Init>:
/**
  * @brief  Initialize the robot arm controller
  * @retval int: 0 if successful, -1 if error
  */
int Arm_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    // Check if already initialized
    if (initialized)
 8000fb8:	4b33      	ldr	r3, [pc, #204]	@ (8001088 <Arm_Init+0xd4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <Arm_Init+0x10>
        return 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e05e      	b.n	8001082 <Arm_Init+0xce>

    // Register the four servos for the arm if they don't exist already
    if (servoIds[0] == -1) {
 8000fc4:	4b31      	ldr	r3, [pc, #196]	@ (800108c <Arm_Init+0xd8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fcc:	d10c      	bne.n	8000fe8 <Arm_Init+0x34>
        servoIds[0] = Servo_Register(12, "Base", 0.0f, 180.0f, ARM_HOME_BASE_ANGLE);
 8000fce:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 8001090 <Arm_Init+0xdc>
 8000fd2:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8001094 <Arm_Init+0xe0>
 8000fd6:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8001098 <Arm_Init+0xe4>
 8000fda:	4930      	ldr	r1, [pc, #192]	@ (800109c <Arm_Init+0xe8>)
 8000fdc:	200c      	movs	r0, #12
 8000fde:	f002 fce3 	bl	80039a8 <Servo_Register>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a29      	ldr	r2, [pc, #164]	@ (800108c <Arm_Init+0xd8>)
 8000fe6:	6013      	str	r3, [r2, #0]
    }

    if (servoIds[1] == -1) {
 8000fe8:	4b28      	ldr	r3, [pc, #160]	@ (800108c <Arm_Init+0xd8>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d10c      	bne.n	800100c <Arm_Init+0x58>
        servoIds[1] = Servo_Register(13, "Link1", 0.0f, 180.0f, ARM_HOME_LINK1_ANGLE);
 8000ff2:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8000ff6:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8001094 <Arm_Init+0xe0>
 8000ffa:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8001098 <Arm_Init+0xe4>
 8000ffe:	4928      	ldr	r1, [pc, #160]	@ (80010a0 <Arm_Init+0xec>)
 8001000:	200d      	movs	r0, #13
 8001002:	f002 fcd1 	bl	80039a8 <Servo_Register>
 8001006:	4603      	mov	r3, r0
 8001008:	4a20      	ldr	r2, [pc, #128]	@ (800108c <Arm_Init+0xd8>)
 800100a:	6053      	str	r3, [r2, #4]
    }

    if (servoIds[2] == -1) {
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <Arm_Init+0xd8>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d10c      	bne.n	8001030 <Arm_Init+0x7c>
        servoIds[2] = Servo_Register(14, "Link2", 0.0f, 180.0f, ARM_HOME_LINK2_ANGLE);
 8001016:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 80010a4 <Arm_Init+0xf0>
 800101a:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8001094 <Arm_Init+0xe0>
 800101e:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8001098 <Arm_Init+0xe4>
 8001022:	4921      	ldr	r1, [pc, #132]	@ (80010a8 <Arm_Init+0xf4>)
 8001024:	200e      	movs	r0, #14
 8001026:	f002 fcbf 	bl	80039a8 <Servo_Register>
 800102a:	4603      	mov	r3, r0
 800102c:	4a17      	ldr	r2, [pc, #92]	@ (800108c <Arm_Init+0xd8>)
 800102e:	6093      	str	r3, [r2, #8]
    }

    if (servoIds[3] == -1) {
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <Arm_Init+0xd8>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d10c      	bne.n	8001054 <Arm_Init+0xa0>
        servoIds[3] = Servo_Register(15, "Link3", 0.0f, 180.0f, ARM_HOME_LINK3_ANGLE);
 800103a:	ed9f 1a1c 	vldr	s2, [pc, #112]	@ 80010ac <Arm_Init+0xf8>
 800103e:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8001094 <Arm_Init+0xe0>
 8001042:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001098 <Arm_Init+0xe4>
 8001046:	491a      	ldr	r1, [pc, #104]	@ (80010b0 <Arm_Init+0xfc>)
 8001048:	200f      	movs	r0, #15
 800104a:	f002 fcad 	bl	80039a8 <Servo_Register>
 800104e:	4603      	mov	r3, r0
 8001050:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <Arm_Init+0xd8>)
 8001052:	60d3      	str	r3, [r2, #12]
    }

    // Check if all servos were registered successfully
    if (servoIds[0] < 0 || servoIds[1] < 0 || servoIds[2] < 0 || servoIds[3] < 0) {
 8001054:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <Arm_Init+0xd8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0b      	blt.n	8001074 <Arm_Init+0xc0>
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <Arm_Init+0xd8>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db07      	blt.n	8001074 <Arm_Init+0xc0>
 8001064:	4b09      	ldr	r3, [pc, #36]	@ (800108c <Arm_Init+0xd8>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db03      	blt.n	8001074 <Arm_Init+0xc0>
 800106c:	4b07      	ldr	r3, [pc, #28]	@ (800108c <Arm_Init+0xd8>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	2b00      	cmp	r3, #0
 8001072:	da02      	bge.n	800107a <Arm_Init+0xc6>
        return -1;
 8001074:	f04f 33ff 	mov.w	r3, #4294967295
 8001078:	e003      	b.n	8001082 <Arm_Init+0xce>
    }

    initialized = 1;
 800107a:	4b03      	ldr	r3, [pc, #12]	@ (8001088 <Arm_Init+0xd4>)
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]
    return 0;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000250 	.word	0x20000250
 800108c:	20000000 	.word	0x20000000
 8001090:	42d20000 	.word	0x42d20000
 8001094:	43340000 	.word	0x43340000
 8001098:	00000000 	.word	0x00000000
 800109c:	0800d730 	.word	0x0800d730
 80010a0:	0800d738 	.word	0x0800d738
 80010a4:	42be0000 	.word	0x42be0000
 80010a8:	0800d740 	.word	0x0800d740
 80010ac:	42a00000 	.word	0x42a00000
 80010b0:	0800d748 	.word	0x0800d748

080010b4 <init_ball_storage>:
#include "ballstorage.h"

int good_potato_storage; // left
int bad_potato_storage; // right

void init_ball_storage(){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	good_potato_storage = Servo_Register(4, "good_potato_storage", 0, 180, 90);
 80010b8:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 800110c <init_ball_storage+0x58>
 80010bc:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8001110 <init_ball_storage+0x5c>
 80010c0:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8001114 <init_ball_storage+0x60>
 80010c4:	4914      	ldr	r1, [pc, #80]	@ (8001118 <init_ball_storage+0x64>)
 80010c6:	2004      	movs	r0, #4
 80010c8:	f002 fc6e 	bl	80039a8 <Servo_Register>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a13      	ldr	r2, [pc, #76]	@ (800111c <init_ball_storage+0x68>)
 80010d0:	6013      	str	r3, [r2, #0]
	Servo_SetAngle(good_potato_storage, 90);
 80010d2:	4b12      	ldr	r3, [pc, #72]	@ (800111c <init_ball_storage+0x68>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800110c <init_ball_storage+0x58>
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 fd50 	bl	8003b80 <Servo_SetAngle>

	bad_potato_storage = Servo_Register(5, "bad_potato_storage", 0, 180, 90);
 80010e0:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 800110c <init_ball_storage+0x58>
 80010e4:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001110 <init_ball_storage+0x5c>
 80010e8:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001114 <init_ball_storage+0x60>
 80010ec:	490c      	ldr	r1, [pc, #48]	@ (8001120 <init_ball_storage+0x6c>)
 80010ee:	2005      	movs	r0, #5
 80010f0:	f002 fc5a 	bl	80039a8 <Servo_Register>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001124 <init_ball_storage+0x70>)
 80010f8:	6013      	str	r3, [r2, #0]
	Servo_SetAngle(bad_potato_storage, 90);
 80010fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <init_ball_storage+0x70>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 800110c <init_ball_storage+0x58>
 8001102:	4618      	mov	r0, r3
 8001104:	f002 fd3c 	bl	8003b80 <Servo_SetAngle>
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	42b40000 	.word	0x42b40000
 8001110:	43340000 	.word	0x43340000
 8001114:	00000000 	.word	0x00000000
 8001118:	0800d750 	.word	0x0800d750
 800111c:	20000254 	.word	0x20000254
 8001120:	0800d764 	.word	0x0800d764
 8001124:	20000258 	.word	0x20000258

08001128 <meassure_box_colour>:

uint8_t correct_box_detected = 0;
int current_dist = 0;
int remaining_distance = 0;

uint8_t meassure_box_colour(){
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
    //Dummy function. Change it later.
    //return 1; //white box
    //return 0; //yellow box
    return 0; //white box
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <pickup>:

void pickup(){
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
    //Pickup the box.
    //Dummy function. Change it later.
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <exit_the_area>:
void exit_the_area(){
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
    //Exit the area.
    //Dummy function. Change it later.
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <box_manupilation>:

void box_manupilation(){
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
//	Robot_LineFollowUntillJunction();
//	Robot_MoveReverseGivenDistance(50);
//	robot_TurnRight180Inplace();
//	Robot_FollowLineGivenDistance(243);
//	Robot_TurnLeft90Inplace();
    box_manupilation_876();
 8001158:	f000 f802 	bl	8001160 <box_manupilation_876>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <box_manupilation_876>:

void box_manupilation_876(){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    remaining_distance = 720;
 8001164:	4b39      	ldr	r3, [pc, #228]	@ (800124c <box_manupilation_876+0xec>)
 8001166:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 800116a:	601a      	str	r2, [r3, #0]
    //         correct_box_detected = 1;
    //         pickup();
    //         remaining_distance = remaining_distance - get_current_distance();
    //     }
    // }
    current_dist = Robot_moveForwardUntillBox(remaining_distance); //go_straight(remaining_distance);
 800116c:	4b37      	ldr	r3, [pc, #220]	@ (800124c <box_manupilation_876+0xec>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	b29b      	uxth	r3, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f002 f934 	bl	80033e0 <Robot_moveForwardUntillBox>
 8001178:	4603      	mov	r3, r0
 800117a:	4a35      	ldr	r2, [pc, #212]	@ (8001250 <box_manupilation_876+0xf0>)
 800117c:	6013      	str	r3, [r2, #0]
    remaining_distance = remaining_distance - current_dist;
 800117e:	4b33      	ldr	r3, [pc, #204]	@ (800124c <box_manupilation_876+0xec>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4b33      	ldr	r3, [pc, #204]	@ (8001250 <box_manupilation_876+0xf0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	4a30      	ldr	r2, [pc, #192]	@ (800124c <box_manupilation_876+0xec>)
 800118a:	6013      	str	r3, [r2, #0]

    if(remaining_distance >= 550  && correct_box_detected == 0){       //Box detected at 8?
 800118c:	4b2f      	ldr	r3, [pc, #188]	@ (800124c <box_manupilation_876+0xec>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f240 2225 	movw	r2, #549	@ 0x225
 8001194:	4293      	cmp	r3, r2
 8001196:	dd46      	ble.n	8001226 <box_manupilation_876+0xc6>
 8001198:	4b2e      	ldr	r3, [pc, #184]	@ (8001254 <box_manupilation_876+0xf4>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d142      	bne.n	8001226 <box_manupilation_876+0xc6>
        if(meassure_box_colour()==1){   
 80011a0:	f7ff ffc2 	bl	8001128 <meassure_box_colour>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d104      	bne.n	80011b4 <box_manupilation_876+0x54>
            correct_box_detected = 1;
 80011aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001254 <box_manupilation_876+0xf4>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
            pickup();
 80011b0:	f7ff ffc2 	bl	8001138 <pickup>
        }
        //Robot_MoveForwardGivenDistance(65);
        current_dist = Robot_moveForwardUntillBox(remaining_distance);
 80011b4:	4b25      	ldr	r3, [pc, #148]	@ (800124c <box_manupilation_876+0xec>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 f910 	bl	80033e0 <Robot_moveForwardUntillBox>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a23      	ldr	r2, [pc, #140]	@ (8001250 <box_manupilation_876+0xf0>)
 80011c4:	6013      	str	r3, [r2, #0]
        remaining_distance = remaining_distance - current_dist;
 80011c6:	4b21      	ldr	r3, [pc, #132]	@ (800124c <box_manupilation_876+0xec>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <box_manupilation_876+0xf0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	4a1e      	ldr	r2, [pc, #120]	@ (800124c <box_manupilation_876+0xec>)
 80011d2:	6013      	str	r3, [r2, #0]

        if(remaining_distance >= 200  && correct_box_detected == 0){   //Box detected at 7?
 80011d4:	4b1d      	ldr	r3, [pc, #116]	@ (800124c <box_manupilation_876+0xec>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80011da:	dd24      	ble.n	8001226 <box_manupilation_876+0xc6>
 80011dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001254 <box_manupilation_876+0xf4>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d120      	bne.n	8001226 <box_manupilation_876+0xc6>
                if(meassure_box_colour()==1){
 80011e4:	f7ff ffa0 	bl	8001128 <meassure_box_colour>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d104      	bne.n	80011f8 <box_manupilation_876+0x98>
                    correct_box_detected = 1;
 80011ee:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <box_manupilation_876+0xf4>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
                    pickup();
 80011f4:	f7ff ffa0 	bl	8001138 <pickup>
                }
			//Robot_MoveForwardGivenDistance(50);
            //current_dist = Robot_moveForwardUntillBox(remaining_distance);
            //remaining_distance = remaining_distance - current_dist;
            Robot_MoveForwardGivenDistance(300);
 80011f8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011fc:	f002 f802 	bl	8003204 <Robot_MoveForwardGivenDistance>
    
            if(see_box && correct_box_detected == 0){       //Box detected at 6?
 8001200:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <box_manupilation_876+0xf8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00d      	beq.n	8001226 <box_manupilation_876+0xc6>
 800120a:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <box_manupilation_876+0xf4>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d109      	bne.n	8001226 <box_manupilation_876+0xc6>
                if(meassure_box_colour()==1){
 8001212:	f7ff ff89 	bl	8001128 <meassure_box_colour>
 8001216:	4603      	mov	r3, r0
 8001218:	2b01      	cmp	r3, #1
 800121a:	d104      	bne.n	8001226 <box_manupilation_876+0xc6>
                    correct_box_detected = 1;
 800121c:	4b0d      	ldr	r3, [pc, #52]	@ (8001254 <box_manupilation_876+0xf4>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
                    pickup();
 8001222:	f7ff ff89 	bl	8001138 <pickup>
        }

    }

    //Now robot is at near the 6 location. In between 3,4,6,7.
    Robot_MoveReverseGivenDistance(140); //go_back(10);
 8001226:	208c      	movs	r0, #140	@ 0x8c
 8001228:	f002 f81e 	bl	8003268 <Robot_MoveReverseGivenDistance>
    if(correct_box_detected == 1){
 800122c:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <box_manupilation_876+0xf4>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d104      	bne.n	800123e <box_manupilation_876+0xde>
        Robot_TurnLeft90Inplace(); //turn_left_carefully();
 8001234:	f002 f8a4 	bl	8003380 <Robot_TurnLeft90Inplace>
        exit_the_area();
 8001238:	f7ff ff85 	bl	8001146 <exit_the_area>
    else{
        Robot_TurnRight90Inplace();//turn_right_carefully();
        box_manupilation_630();
    }

}
 800123c:	e003      	b.n	8001246 <box_manupilation_876+0xe6>
        Robot_TurnRight90Inplace();//turn_right_carefully();
 800123e:	f002 f847 	bl	80032d0 <Robot_TurnRight90Inplace>
        box_manupilation_630();
 8001242:	f000 f80b 	bl	800125c <box_manupilation_630>
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000264 	.word	0x20000264
 8001250:	20000260 	.word	0x20000260
 8001254:	2000025c 	.word	0x2000025c
 8001258:	200006ee 	.word	0x200006ee

0800125c <box_manupilation_630>:

void box_manupilation_630(){
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0

    current_dist = Robot_moveForwardUntillBox(remaining_distance);    //go_straight(remaining_distance);
 8001260:	4b3d      	ldr	r3, [pc, #244]	@ (8001358 <box_manupilation_630+0xfc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	b29b      	uxth	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f002 f8ba 	bl	80033e0 <Robot_moveForwardUntillBox>
 800126c:	4603      	mov	r3, r0
 800126e:	4a3b      	ldr	r2, [pc, #236]	@ (800135c <box_manupilation_630+0x100>)
 8001270:	6013      	str	r3, [r2, #0]
    remaining_distance = remaining_distance - current_dist;
 8001272:	4b39      	ldr	r3, [pc, #228]	@ (8001358 <box_manupilation_630+0xfc>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b39      	ldr	r3, [pc, #228]	@ (800135c <box_manupilation_630+0x100>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	4a36      	ldr	r2, [pc, #216]	@ (8001358 <box_manupilation_630+0xfc>)
 800127e:	6013      	str	r3, [r2, #0]

    if(remaining_distance >= 50  && correct_box_detected == 0){       //Box detected at 6?
 8001280:	4b35      	ldr	r3, [pc, #212]	@ (8001358 <box_manupilation_630+0xfc>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b31      	cmp	r3, #49	@ 0x31
 8001286:	dd51      	ble.n	800132c <box_manupilation_630+0xd0>
 8001288:	4b35      	ldr	r3, [pc, #212]	@ (8001360 <box_manupilation_630+0x104>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d14d      	bne.n	800132c <box_manupilation_630+0xd0>
        if(meassure_box_colour()==1){   
 8001290:	f7ff ff4a 	bl	8001128 <meassure_box_colour>
 8001294:	4603      	mov	r3, r0
 8001296:	2b01      	cmp	r3, #1
 8001298:	d104      	bne.n	80012a4 <box_manupilation_630+0x48>
            correct_box_detected = 1;
 800129a:	4b31      	ldr	r3, [pc, #196]	@ (8001360 <box_manupilation_630+0x104>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
            pickup();
 80012a0:	f7ff ff4a 	bl	8001138 <pickup>
        }

        current_dist = Robot_moveForwardUntillBox(remaining_distance);
 80012a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001358 <box_manupilation_630+0xfc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 f898 	bl	80033e0 <Robot_moveForwardUntillBox>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a2a      	ldr	r2, [pc, #168]	@ (800135c <box_manupilation_630+0x100>)
 80012b4:	6013      	str	r3, [r2, #0]
        remaining_distance = remaining_distance - current_dist;
 80012b6:	4b28      	ldr	r3, [pc, #160]	@ (8001358 <box_manupilation_630+0xfc>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b28      	ldr	r3, [pc, #160]	@ (800135c <box_manupilation_630+0x100>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	4a25      	ldr	r2, [pc, #148]	@ (8001358 <box_manupilation_630+0xfc>)
 80012c2:	6013      	str	r3, [r2, #0]

        if(remaining_distance >= 30  && correct_box_detected == 0){   //Box detected at 3?
 80012c4:	4b24      	ldr	r3, [pc, #144]	@ (8001358 <box_manupilation_630+0xfc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b1d      	cmp	r3, #29
 80012ca:	dd2f      	ble.n	800132c <box_manupilation_630+0xd0>
 80012cc:	4b24      	ldr	r3, [pc, #144]	@ (8001360 <box_manupilation_630+0x104>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d12b      	bne.n	800132c <box_manupilation_630+0xd0>
                if(meassure_box_colour()==1){
 80012d4:	f7ff ff28 	bl	8001128 <meassure_box_colour>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d104      	bne.n	80012e8 <box_manupilation_630+0x8c>
                    correct_box_detected = 1;
 80012de:	4b20      	ldr	r3, [pc, #128]	@ (8001360 <box_manupilation_630+0x104>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
                    pickup();
 80012e4:	f7ff ff28 	bl	8001138 <pickup>
                }
            current_dist = Robot_moveForwardUntillBox(remaining_distance);
 80012e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <box_manupilation_630+0xfc>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f002 f876 	bl	80033e0 <Robot_moveForwardUntillBox>
 80012f4:	4603      	mov	r3, r0
 80012f6:	4a19      	ldr	r2, [pc, #100]	@ (800135c <box_manupilation_630+0x100>)
 80012f8:	6013      	str	r3, [r2, #0]
            remaining_distance = remaining_distance - current_dist;
 80012fa:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <box_manupilation_630+0xfc>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4b17      	ldr	r3, [pc, #92]	@ (800135c <box_manupilation_630+0x100>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	4a14      	ldr	r2, [pc, #80]	@ (8001358 <box_manupilation_630+0xfc>)
 8001306:	6013      	str	r3, [r2, #0]
    
            if(remaining_distance >= 10 && correct_box_detected == 0){  //Box detected at 0?
 8001308:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <box_manupilation_630+0xfc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b09      	cmp	r3, #9
 800130e:	dd0d      	ble.n	800132c <box_manupilation_630+0xd0>
 8001310:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <box_manupilation_630+0x104>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d109      	bne.n	800132c <box_manupilation_630+0xd0>
                if(meassure_box_colour()==1){
 8001318:	f7ff ff06 	bl	8001128 <meassure_box_colour>
 800131c:	4603      	mov	r3, r0
 800131e:	2b01      	cmp	r3, #1
 8001320:	d104      	bne.n	800132c <box_manupilation_630+0xd0>
                    correct_box_detected = 1;
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <box_manupilation_630+0x104>)
 8001324:	2201      	movs	r2, #1
 8001326:	701a      	strb	r2, [r3, #0]
                    pickup();
 8001328:	f7ff ff06 	bl	8001138 <pickup>
        }

    }


    Robot_MoveForwardUntillLine();      //detect_junction();
 800132c:	f001 ff28 	bl	8003180 <Robot_MoveForwardUntillLine>
    Robot_LineFollowUntillJunction();   //line_follow_until_junction();
 8001330:	f001 fee0 	bl	80030f4 <Robot_LineFollowUntillJunction>
    Robot_TurnRight90Inplace();         //turn_right();
 8001334:	f001 ffcc 	bl	80032d0 <Robot_TurnRight90Inplace>
    Robot_LineFollowUntillJunction();   //line_follow_until_junction();
 8001338:	f001 fedc 	bl	80030f4 <Robot_LineFollowUntillJunction>

    //Now robot in between 1,2.
    if(correct_box_detected == 1){
 800133c:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <box_manupilation_630+0x104>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d104      	bne.n	800134e <box_manupilation_630+0xf2>
        Robot_MoveForwardUntillLine();  //go_straight_until_line();
 8001344:	f001 ff1c 	bl	8003180 <Robot_MoveForwardUntillLine>
        exit_the_area();
 8001348:	f7ff fefd 	bl	8001146 <exit_the_area>

    else{
        box_manupilation_258();
    }
    
}
 800134c:	e001      	b.n	8001352 <box_manupilation_630+0xf6>
        box_manupilation_258();
 800134e:	f000 f809 	bl	8001364 <box_manupilation_258>
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000264 	.word	0x20000264
 800135c:	20000260 	.word	0x20000260
 8001360:	2000025c 	.word	0x2000025c

08001364 <box_manupilation_258>:

void box_manupilation_258(){
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
    current_dist = Robot_moveForwardUntillBox(remaining_distance); //go_straight(remaining_distance);
 8001368:	4b39      	ldr	r3, [pc, #228]	@ (8001450 <box_manupilation_258+0xec>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	b29b      	uxth	r3, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f002 f836 	bl	80033e0 <Robot_moveForwardUntillBox>
 8001374:	4603      	mov	r3, r0
 8001376:	4a37      	ldr	r2, [pc, #220]	@ (8001454 <box_manupilation_258+0xf0>)
 8001378:	6013      	str	r3, [r2, #0]
    remaining_distance = remaining_distance - current_dist;
 800137a:	4b35      	ldr	r3, [pc, #212]	@ (8001450 <box_manupilation_258+0xec>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b35      	ldr	r3, [pc, #212]	@ (8001454 <box_manupilation_258+0xf0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	4a32      	ldr	r2, [pc, #200]	@ (8001450 <box_manupilation_258+0xec>)
 8001386:	6013      	str	r3, [r2, #0]

    if(remaining_distance >= 50  && correct_box_detected == 0){       //Box detected at 2?
 8001388:	4b31      	ldr	r3, [pc, #196]	@ (8001450 <box_manupilation_258+0xec>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b31      	cmp	r3, #49	@ 0x31
 800138e:	dd52      	ble.n	8001436 <box_manupilation_258+0xd2>
 8001390:	4b31      	ldr	r3, [pc, #196]	@ (8001458 <box_manupilation_258+0xf4>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d14e      	bne.n	8001436 <box_manupilation_258+0xd2>
        if(meassure_box_colour()==1){   
 8001398:	f7ff fec6 	bl	8001128 <meassure_box_colour>
 800139c:	4603      	mov	r3, r0
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d104      	bne.n	80013ac <box_manupilation_258+0x48>
            correct_box_detected = 1;
 80013a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001458 <box_manupilation_258+0xf4>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
            pickup();
 80013a8:	f7ff fec6 	bl	8001138 <pickup>
        }

        Robot_moveForwardUntillBox(remaining_distance);
 80013ac:	4b28      	ldr	r3, [pc, #160]	@ (8001450 <box_manupilation_258+0xec>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 f814 	bl	80033e0 <Robot_moveForwardUntillBox>
        current_dist = remaining_distance = remaining_distance - current_dist;
 80013b8:	4b25      	ldr	r3, [pc, #148]	@ (8001450 <box_manupilation_258+0xec>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b25      	ldr	r3, [pc, #148]	@ (8001454 <box_manupilation_258+0xf0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	4a23      	ldr	r2, [pc, #140]	@ (8001450 <box_manupilation_258+0xec>)
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b22      	ldr	r3, [pc, #136]	@ (8001450 <box_manupilation_258+0xec>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a22      	ldr	r2, [pc, #136]	@ (8001454 <box_manupilation_258+0xf0>)
 80013cc:	6013      	str	r3, [r2, #0]

        if(remaining_distance >= 30  && correct_box_detected == 0){   //Box detected at 5?
 80013ce:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <box_manupilation_258+0xec>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b1d      	cmp	r3, #29
 80013d4:	dd2f      	ble.n	8001436 <box_manupilation_258+0xd2>
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <box_manupilation_258+0xf4>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d12b      	bne.n	8001436 <box_manupilation_258+0xd2>
                if(meassure_box_colour()==1){
 80013de:	f7ff fea3 	bl	8001128 <meassure_box_colour>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d104      	bne.n	80013f2 <box_manupilation_258+0x8e>
                    correct_box_detected = 1;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <box_manupilation_258+0xf4>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
                    pickup();
 80013ee:	f7ff fea3 	bl	8001138 <pickup>
                }
            current_dist = Robot_moveForwardUntillBox(remaining_distance);
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <box_manupilation_258+0xec>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f001 fff1 	bl	80033e0 <Robot_moveForwardUntillBox>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a14      	ldr	r2, [pc, #80]	@ (8001454 <box_manupilation_258+0xf0>)
 8001402:	6013      	str	r3, [r2, #0]
            remaining_distance = remaining_distance - current_dist;
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <box_manupilation_258+0xec>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <box_manupilation_258+0xf0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	4a10      	ldr	r2, [pc, #64]	@ (8001450 <box_manupilation_258+0xec>)
 8001410:	6013      	str	r3, [r2, #0]
    
            if(remaining_distance >= 10 && correct_box_detected == 0){  //Box detected at 8?
 8001412:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <box_manupilation_258+0xec>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b09      	cmp	r3, #9
 8001418:	dd0d      	ble.n	8001436 <box_manupilation_258+0xd2>
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <box_manupilation_258+0xf4>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d109      	bne.n	8001436 <box_manupilation_258+0xd2>
                if(meassure_box_colour()==1){
 8001422:	f7ff fe81 	bl	8001128 <meassure_box_colour>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d104      	bne.n	8001436 <box_manupilation_258+0xd2>
                    correct_box_detected = 1;
 800142c:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <box_manupilation_258+0xf4>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
                    pickup();
 8001432:	f7ff fe81 	bl	8001138 <pickup>
                }
            }
        }

    }
    Robot_MoveForwardUntillLine();    //go_straight_unitl_line();
 8001436:	f001 fea3 	bl	8003180 <Robot_MoveForwardUntillLine>
    if(correct_box_detected == 1){
 800143a:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <box_manupilation_258+0xf4>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d102      	bne.n	8001448 <box_manupilation_258+0xe4>
        exit_the_area();
 8001442:	f7ff fe80 	bl	8001146 <exit_the_area>

    else{
        box_manupilation_741();
    }

}
 8001446:	e001      	b.n	800144c <box_manupilation_258+0xe8>
        box_manupilation_741();
 8001448:	f000 f808 	bl	800145c <box_manupilation_741>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000264 	.word	0x20000264
 8001454:	20000260 	.word	0x20000260
 8001458:	2000025c 	.word	0x2000025c

0800145c <box_manupilation_741>:

void box_manupilation_741(){
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
    Robot_TurnLeft90Inplace();          // turn_left_on_line();
 8001460:	f001 ff8e 	bl	8003380 <Robot_TurnLeft90Inplace>
    Robot_LineFollowUntillJunction();   // line_follow_until_junction();
 8001464:	f001 fe46 	bl	80030f4 <Robot_LineFollowUntillJunction>
    Robot_MoveForwardGivenDistance(50); // go_straight(50);
 8001468:	2032      	movs	r0, #50	@ 0x32
 800146a:	f001 fecb 	bl	8003204 <Robot_MoveForwardGivenDistance>
    robot_TurnRight180Inplace();        // turn(180);
 800146e:	f001 ff5b 	bl	8003328 <robot_TurnRight180Inplace>
    Robot_LineFollowUntillJunction();   // line_follow_until_junction();
 8001472:	f001 fe3f 	bl	80030f4 <Robot_LineFollowUntillJunction>
    Robot_MoveForwardGivenDistance(15); // go_straight(15);
 8001476:	200f      	movs	r0, #15
 8001478:	f001 fec4 	bl	8003204 <Robot_MoveForwardGivenDistance>
    Robot_TurnRight90Inplace();         // turn_right();
 800147c:	f001 ff28 	bl	80032d0 <Robot_TurnRight90Inplace>

    
    current_dist = Robot_moveForwardUntillBox(remaining_distance); //go_straight(remaining_distance);
 8001480:	4b36      	ldr	r3, [pc, #216]	@ (800155c <box_manupilation_741+0x100>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	b29b      	uxth	r3, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f001 ffaa 	bl	80033e0 <Robot_moveForwardUntillBox>
 800148c:	4603      	mov	r3, r0
 800148e:	4a34      	ldr	r2, [pc, #208]	@ (8001560 <box_manupilation_741+0x104>)
 8001490:	6013      	str	r3, [r2, #0]
    remaining_distance = remaining_distance - current_dist;
 8001492:	4b32      	ldr	r3, [pc, #200]	@ (800155c <box_manupilation_741+0x100>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4b32      	ldr	r3, [pc, #200]	@ (8001560 <box_manupilation_741+0x104>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	4a2f      	ldr	r2, [pc, #188]	@ (800155c <box_manupilation_741+0x100>)
 800149e:	6013      	str	r3, [r2, #0]

    if(remaining_distance >= 50  && correct_box_detected == 0){       //Box detected at 7?
 80014a0:	4b2e      	ldr	r3, [pc, #184]	@ (800155c <box_manupilation_741+0x100>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b31      	cmp	r3, #49	@ 0x31
 80014a6:	dd47      	ble.n	8001538 <box_manupilation_741+0xdc>
 80014a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001564 <box_manupilation_741+0x108>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d143      	bne.n	8001538 <box_manupilation_741+0xdc>
        //Pass if there is a box at 7.

        current_dist = Robot_moveForwardUntillBox(remaining_distance);
 80014b0:	4b2a      	ldr	r3, [pc, #168]	@ (800155c <box_manupilation_741+0x100>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 ff92 	bl	80033e0 <Robot_moveForwardUntillBox>
 80014bc:	4603      	mov	r3, r0
 80014be:	4a28      	ldr	r2, [pc, #160]	@ (8001560 <box_manupilation_741+0x104>)
 80014c0:	6013      	str	r3, [r2, #0]
        remaining_distance = remaining_distance - current_dist;
 80014c2:	4b26      	ldr	r3, [pc, #152]	@ (800155c <box_manupilation_741+0x100>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4b26      	ldr	r3, [pc, #152]	@ (8001560 <box_manupilation_741+0x104>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	4a23      	ldr	r2, [pc, #140]	@ (800155c <box_manupilation_741+0x100>)
 80014ce:	6013      	str	r3, [r2, #0]

        if(remaining_distance >= 30  && correct_box_detected == 0){   //Box detected at 4?
 80014d0:	4b22      	ldr	r3, [pc, #136]	@ (800155c <box_manupilation_741+0x100>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b1d      	cmp	r3, #29
 80014d6:	dd2f      	ble.n	8001538 <box_manupilation_741+0xdc>
 80014d8:	4b22      	ldr	r3, [pc, #136]	@ (8001564 <box_manupilation_741+0x108>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d12b      	bne.n	8001538 <box_manupilation_741+0xdc>
                if(meassure_box_colour()==1){
 80014e0:	f7ff fe22 	bl	8001128 <meassure_box_colour>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d104      	bne.n	80014f4 <box_manupilation_741+0x98>
                    correct_box_detected = 1;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001564 <box_manupilation_741+0x108>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	701a      	strb	r2, [r3, #0]
                    pickup();
 80014f0:	f7ff fe22 	bl	8001138 <pickup>
                }
            current_dist =Robot_moveForwardUntillBox(remaining_distance);
 80014f4:	4b19      	ldr	r3, [pc, #100]	@ (800155c <box_manupilation_741+0x100>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 ff70 	bl	80033e0 <Robot_moveForwardUntillBox>
 8001500:	4603      	mov	r3, r0
 8001502:	4a17      	ldr	r2, [pc, #92]	@ (8001560 <box_manupilation_741+0x104>)
 8001504:	6013      	str	r3, [r2, #0]
            remaining_distance = remaining_distance - current_dist;
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <box_manupilation_741+0x100>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <box_manupilation_741+0x104>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	4a12      	ldr	r2, [pc, #72]	@ (800155c <box_manupilation_741+0x100>)
 8001512:	6013      	str	r3, [r2, #0]
    
            if(remaining_distance >= 10 && correct_box_detected == 0){  //Box detected at 1?
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <box_manupilation_741+0x100>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b09      	cmp	r3, #9
 800151a:	dd0d      	ble.n	8001538 <box_manupilation_741+0xdc>
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <box_manupilation_741+0x108>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d109      	bne.n	8001538 <box_manupilation_741+0xdc>
                if(meassure_box_colour()==1){
 8001524:	f7ff fe00 	bl	8001128 <meassure_box_colour>
 8001528:	4603      	mov	r3, r0
 800152a:	2b01      	cmp	r3, #1
 800152c:	d104      	bne.n	8001538 <box_manupilation_741+0xdc>
                    correct_box_detected = 1;
 800152e:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <box_manupilation_741+0x108>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
                    pickup();
 8001534:	f7ff fe00 	bl	8001138 <pickup>
            }
        }

    }

    Robot_MoveForwardUntillLine();      // detect_line();
 8001538:	f001 fe22 	bl	8003180 <Robot_MoveForwardUntillLine>
    Robot_LineFollowUntillJunction();   // line_follow_until_junction();
 800153c:	f001 fdda 	bl	80030f4 <Robot_LineFollowUntillJunction>
    Robot_TurnLeft90Inplace();          // turn_left();
 8001540:	f001 ff1e 	bl	8003380 <Robot_TurnLeft90Inplace>
    Robot_LineFollowUntillJunction();   // line_follow_until_junction();
 8001544:	f001 fdd6 	bl	80030f4 <Robot_LineFollowUntillJunction>
    Robot_TurnLeft90Inplace();          // turn_left();
 8001548:	f001 ff1a 	bl	8003380 <Robot_TurnLeft90Inplace>
    Robot_LineFollowUntillJunction();   // line_follow_until_junction();
 800154c:	f001 fdd2 	bl	80030f4 <Robot_LineFollowUntillJunction>

    Robot_MoveForwardUntillLine();      // go_straight_until_line();
 8001550:	f001 fe16 	bl	8003180 <Robot_MoveForwardUntillLine>
    exit_the_area();
 8001554:	f7ff fdf7 	bl	8001146 <exit_the_area>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000264 	.word	0x20000264
 8001560:	20000260 	.word	0x20000260
 8001564:	2000025c 	.word	0x2000025c

08001568 <turn_on_water_pump>:
const int BOX_THRESHOLD = 50; // minimum value to register a box


//***** Pump Controlling functions ******************************************************//

void turn_on_water_pump(){
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WATERPUMP_GPIO_Port, WATERPUMP_Pin, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2104      	movs	r1, #4
 8001570:	4802      	ldr	r0, [pc, #8]	@ (800157c <turn_on_water_pump+0x14>)
 8001572:	f005 f85b 	bl	800662c <HAL_GPIO_WritePin>
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40020800 	.word	0x40020800

08001580 <turn_off_air_pump>:

void turn_on_air_pump(){
	HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, 0);
}

void turn_off_air_pump(){
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, 1);
 8001584:	2201      	movs	r2, #1
 8001586:	2102      	movs	r1, #2
 8001588:	4802      	ldr	r0, [pc, #8]	@ (8001594 <turn_off_air_pump+0x14>)
 800158a:	f005 f84f 	bl	800662c <HAL_GPIO_WritePin>
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40020800 	.word	0x40020800

08001598 <HAL_GPIO_EXTI_Callback>:
volatile uint32_t prevokbtncount = 0;

volatile uint32_t nextbtncount = 1;
volatile uint32_t prevnextbtncount = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 80015a2:	f003 fde1 	bl	8005168 <HAL_GetTick>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4a17      	ldr	r2, [pc, #92]	@ (8001608 <HAL_GPIO_EXTI_Callback+0x70>)
 80015aa:	6013      	str	r3, [r2, #0]
    if (GPIO_Pin == B1_Pin && (currentMillis - previousMillis > 650))  // Replace BUTTON_PIN with actual GPIO pin
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015b2:	d10e      	bne.n	80015d2 <HAL_GPIO_EXTI_Callback+0x3a>
 80015b4:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <HAL_GPIO_EXTI_Callback+0x70>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b14      	ldr	r3, [pc, #80]	@ (800160c <HAL_GPIO_EXTI_Callback+0x74>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f240 228a 	movw	r2, #650	@ 0x28a
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d905      	bls.n	80015d2 <HAL_GPIO_EXTI_Callback+0x3a>
	{
    	nextbtncount++; // Set flag when button is pressed
 80015c6:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <HAL_GPIO_EXTI_Callback+0x78>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	4a10      	ldr	r2, [pc, #64]	@ (8001610 <HAL_GPIO_EXTI_Callback+0x78>)
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	e011      	b.n	80015f6 <HAL_GPIO_EXTI_Callback+0x5e>
		//Buzzer_On();
	}
    else if (GPIO_Pin == GPIO_PIN_11 && (currentMillis - previousMillis > 650)){
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80015d8:	d10d      	bne.n	80015f6 <HAL_GPIO_EXTI_Callback+0x5e>
 80015da:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <HAL_GPIO_EXTI_Callback+0x70>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <HAL_GPIO_EXTI_Callback+0x74>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f240 228a 	movw	r2, #650	@ 0x28a
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d904      	bls.n	80015f6 <HAL_GPIO_EXTI_Callback+0x5e>
    	okbtncount++;
 80015ec:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_GPIO_EXTI_Callback+0x7c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	4a08      	ldr	r2, [pc, #32]	@ (8001614 <HAL_GPIO_EXTI_Callback+0x7c>)
 80015f4:	6013      	str	r3, [r2, #0]
    }

    previousMillis = currentMillis;
 80015f6:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <HAL_GPIO_EXTI_Callback+0x70>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a04      	ldr	r2, [pc, #16]	@ (800160c <HAL_GPIO_EXTI_Callback+0x74>)
 80015fc:	6013      	str	r3, [r2, #0]
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2000026c 	.word	0x2000026c
 800160c:	20000268 	.word	0x20000268
 8001610:	20000010 	.word	0x20000010
 8001614:	20000270 	.word	0x20000270

08001618 <Controller_Init>:
#include "fonts.h"
#include <stdio.h>

static float oldSpeed = 0;

void Controller_Init(Controller *controller) {
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
    // Initialize motor struct
	controller->forward_error = 0;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
	controller->rotational_error = 0;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
	controller->previous_forward_error = 0;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
	controller->previous_rotational_error = 0;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
	controller->velocity = 0;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
	controller->omega = 0;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
	controller->left_motor_pwm = 0;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
	controller->right_motor_pwm = 0;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	61da      	str	r2, [r3, #28]
	controller->controllers_enabled = 1;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2020 	strb.w	r2, [r3, #32]
	controller->feedforward_enabled = 1;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <Controller_EnableControllers>:

/**
 * Enable motor controllers.
 */
void Controller_EnableControllers(Controller *controller) {
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
    controller->controllers_enabled = 1;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2020 	strb.w	r2, [r3, #32]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <Controller_DisableControllers>:

/**
 * Disable motor controllers.
 */
void Controller_DisableControllers(Controller *controller) {
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
    controller->controllers_enabled = 0;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2020 	strb.w	r2, [r3, #32]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <Controller_ResetControllers>:

/**
 * Reset the error integrals for both forward and rotational controllers.
 */
void Controller_ResetControllers(Controller *controller) {
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    controller->forward_error = 0;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
    controller->rotational_error = 0;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
    controller->previous_forward_error = 0;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
    controller->previous_rotational_error = 0;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <Controller_Stop>:

void Controller_Stop(){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 80016ec:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001700 <Controller_Stop+0x18>
 80016f0:	f001 f966 	bl	80029c0 <setMotorLPWM>
	setMotorRPWM(0);
 80016f4:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8001700 <Controller_Stop+0x18>
 80016f8:	f001 f9a8 	bl	8002a4c <setMotorRPWM>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	00000000 	.word	0x00000000

08001704 <UpdateControllers>:


/**
 * Update motor controllers based on velocity, angular velocity, and steering adjustment.
 */
void UpdateControllers(Controller *controller, float velocity, float omega, float steering_adjustment) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b090      	sub	sp, #64	@ 0x40
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001710:	edc7 0a01 	vstr	s1, [r7, #4]
 8001714:	ed87 1a00 	vstr	s2, [r7]
    float forward_output, rotational_output, left_output, right_output;
    //float left_speed, right_speed, left_ff, right_ff;

    controller->velocity = velocity;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	611a      	str	r2, [r3, #16]
    controller->omega = omega;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	615a      	str	r2, [r3, #20]

    // Forward motion control
    float forward_increment = velocity * LOOP_INTERVAL;//
 8001724:	4b6c      	ldr	r3, [pc, #432]	@ (80018d8 <UpdateControllers+0x1d4>)
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	ed97 7a02 	vldr	s14, [r7, #8]
 800172e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001732:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    controller->forward_error += forward_increment - robot_fwd_change();
 8001736:	f000 fae7 	bl	8001d08 <robot_fwd_change>
 800173a:	eeb0 7a40 	vmov.f32	s14, s0
 800173e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001742:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	edc3 7a00 	vstr	s15, [r3]
    float forward_diff = controller->forward_error - controller->previous_forward_error;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	ed93 7a00 	vldr	s14, [r3]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001766:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    controller->previous_forward_error = controller->forward_error;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	609a      	str	r2, [r3, #8]
    forward_output = FWD_KP * controller->forward_error + FWD_KD * forward_diff;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	ed93 7a00 	vldr	s14, [r3]
 8001778:	4b58      	ldr	r3, [pc, #352]	@ (80018dc <UpdateControllers+0x1d8>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001782:	4b57      	ldr	r3, [pc, #348]	@ (80018e0 <UpdateControllers+0x1dc>)
 8001784:	edd3 6a00 	vldr	s13, [r3]
 8001788:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800178c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001794:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Rotational control
    float rotational_increment = omega * LOOP_INTERVAL;
 8001798:	4b4f      	ldr	r3, [pc, #316]	@ (80018d8 <UpdateControllers+0x1d4>)
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	ed97 7a01 	vldr	s14, [r7, #4]
 80017a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    controller->rotational_error += rotational_increment - robot_rot_change();
 80017aa:	f000 fabf 	bl	8001d2c <robot_rot_change>
 80017ae:	eeb0 7a40 	vmov.f32	s14, s0
 80017b2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80017b6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80017c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	edc3 7a01 	vstr	s15, [r3, #4]
    controller->rotational_error -= steering_adjustment;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80017d0:	edd7 7a00 	vldr	s15, [r7]
 80017d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	edc3 7a01 	vstr	s15, [r3, #4]
    float rotational_diff = controller->rotational_error - controller->previous_rotational_error;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80017ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    controller->previous_rotational_error = controller->rotational_error;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	60da      	str	r2, [r3, #12]
    rotational_output = ROT_KP * controller->rotational_error + ROT_KD * rotational_diff;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001800:	4b38      	ldr	r3, [pc, #224]	@ (80018e4 <UpdateControllers+0x1e0>)
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800180a:	4b37      	ldr	r3, [pc, #220]	@ (80018e8 <UpdateControllers+0x1e4>)
 800180c:	edd3 6a00 	vldr	s13, [r3]
 8001810:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181c:	edc7 7a08 	vstr	s15, [r7, #32]

    // Combine forward and rotational outputs
    left_output = forward_output - rotational_output;
 8001820:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001824:	edd7 7a08 	vldr	s15, [r7, #32]
 8001828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    right_output = forward_output + rotational_output;
 8001830:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001834:	edd7 7a08 	vldr	s15, [r7, #32]
 8001838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800183c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    float tangent_speed = omega * ROBOT_RADIUS * RADIANS_PER_DEGREE;
 8001840:	4b2a      	ldr	r3, [pc, #168]	@ (80018ec <UpdateControllers+0x1e8>)
 8001842:	ed93 7a00 	vldr	s14, [r3]
 8001846:	edd7 7a01 	vldr	s15, [r7, #4]
 800184a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800184e:	4b28      	ldr	r3, [pc, #160]	@ (80018f0 <UpdateControllers+0x1ec>)
 8001850:	edd3 7a00 	vldr	s15, [r3]
 8001854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001858:	edc7 7a07 	vstr	s15, [r7, #28]

	float left_speed = velocity - tangent_speed;
 800185c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001860:	edd7 7a07 	vldr	s15, [r7, #28]
 8001864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001868:	edc7 7a06 	vstr	s15, [r7, #24]
	float right_speed = velocity + tangent_speed;
 800186c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001870:	edd7 7a07 	vldr	s15, [r7, #28]
 8001874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001878:	edc7 7a05 	vstr	s15, [r7, #20]

	if (controller->feedforward_enabled) {
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001882:	2b00      	cmp	r3, #0
 8001884:	d017      	beq.n	80018b6 <UpdateControllers+0x1b2>
		// Feedforward calculation
		left_output += leftFeedForward(left_speed);
 8001886:	ed97 0a06 	vldr	s0, [r7, #24]
 800188a:	f000 f833 	bl	80018f4 <leftFeedForward>
 800188e:	eeb0 7a40 	vmov.f32	s14, s0
 8001892:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001896:	ee77 7a87 	vadd.f32	s15, s15, s14
 800189a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		right_output += rightFeedForward(right_speed);
 800189e:	ed97 0a05 	vldr	s0, [r7, #20]
 80018a2:	f000 f88d 	bl	80019c0 <rightFeedForward>
 80018a6:	eeb0 7a40 	vmov.f32	s14, s0
 80018aa:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80018ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018b2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	}

    if (controller->controllers_enabled) {
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d007      	beq.n	80018d0 <UpdateControllers+0x1cc>
    	setMotorLPWM(left_output);
 80018c0:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80018c4:	f001 f87c 	bl	80029c0 <setMotorLPWM>
        setMotorRPWM(right_output);
 80018c8:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80018cc:	f001 f8be 	bl	8002a4c <setMotorRPWM>
    }


}
 80018d0:	bf00      	nop
 80018d2:	3740      	adds	r7, #64	@ 0x40
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	0800d790 	.word	0x0800d790
 80018dc:	0800d7a0 	.word	0x0800d7a0
 80018e0:	0800d7a4 	.word	0x0800d7a4
 80018e4:	0800d7a8 	.word	0x0800d7a8
 80018e8:	0800d7ac 	.word	0x0800d7ac
 80018ec:	0800d780 	.word	0x0800d780
 80018f0:	0800d788 	.word	0x0800d788

080018f4 <leftFeedForward>:


float leftFeedForward(float speed) {
 80018f4:	b480      	push	{r7}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	ed87 0a01 	vstr	s0, [r7, #4]
//  static float oldSpeed = speed;
  float leftFF = speed * SPEED_FF;
 80018fe:	4b2b      	ldr	r3, [pc, #172]	@ (80019ac <leftFeedForward+0xb8>)
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	ed97 7a01 	vldr	s14, [r7, #4]
 8001908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800190c:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 8001910:	edd7 7a01 	vldr	s15, [r7, #4]
 8001914:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191c:	dd09      	ble.n	8001932 <leftFeedForward+0x3e>
    leftFF += BIAS_FF;
 800191e:	4b24      	ldr	r3, [pc, #144]	@ (80019b0 <leftFeedForward+0xbc>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ed97 7a05 	vldr	s14, [r7, #20]
 8001928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001930:	e00f      	b.n	8001952 <leftFeedForward+0x5e>
  } else if (speed < 0) {
 8001932:	edd7 7a01 	vldr	s15, [r7, #4]
 8001936:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800193a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193e:	d508      	bpl.n	8001952 <leftFeedForward+0x5e>
    leftFF -= BIAS_FF;
 8001940:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <leftFeedForward+0xbc>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	ed97 7a05 	vldr	s14, [r7, #20]
 800194a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800194e:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 8001952:	4b18      	ldr	r3, [pc, #96]	@ (80019b4 <leftFeedForward+0xc0>)
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	ed97 7a01 	vldr	s14, [r7, #4]
 800195c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001960:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <leftFeedForward+0xc4>)
 8001962:	edd3 7a00 	vldr	s15, [r3]
 8001966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800196a:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 800196e:	4a11      	ldr	r2, [pc, #68]	@ (80019b4 <leftFeedForward+0xc0>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 8001974:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <leftFeedForward+0xc8>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ed97 7a04 	vldr	s14, [r7, #16]
 800197e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001982:	edc7 7a03 	vstr	s15, [r7, #12]
  leftFF += accFF;
 8001986:	ed97 7a05 	vldr	s14, [r7, #20]
 800198a:	edd7 7a03 	vldr	s15, [r7, #12]
 800198e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001992:	edc7 7a05 	vstr	s15, [r7, #20]
  return leftFF;
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	ee07 3a90 	vmov	s15, r3
}
 800199c:	eeb0 0a67 	vmov.f32	s0, s15
 80019a0:	371c      	adds	r7, #28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	0800d794 	.word	0x0800d794
 80019b0:	0800d79c 	.word	0x0800d79c
 80019b4:	20000274 	.word	0x20000274
 80019b8:	0800d78c 	.word	0x0800d78c
 80019bc:	0800d798 	.word	0x0800d798

080019c0 <rightFeedForward>:

float rightFeedForward(float speed) {
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	ed87 0a01 	vstr	s0, [r7, #4]
  //static float oldSpeed = speed;
  float rightFF = speed * SPEED_FF;
 80019ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001a78 <rightFeedForward+0xb8>)
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80019d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d8:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 80019dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80019e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e8:	dd09      	ble.n	80019fe <rightFeedForward+0x3e>
    rightFF += BIAS_FF;
 80019ea:	4b24      	ldr	r3, [pc, #144]	@ (8001a7c <rightFeedForward+0xbc>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80019f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f8:	edc7 7a05 	vstr	s15, [r7, #20]
 80019fc:	e00f      	b.n	8001a1e <rightFeedForward+0x5e>
  } else if (speed < 0) {
 80019fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0a:	d508      	bpl.n	8001a1e <rightFeedForward+0x5e>
    rightFF -= BIAS_FF;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <rightFeedForward+0xbc>)
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1a:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 8001a1e:	4b18      	ldr	r3, [pc, #96]	@ (8001a80 <rightFeedForward+0xc0>)
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a2c:	4b15      	ldr	r3, [pc, #84]	@ (8001a84 <rightFeedForward+0xc4>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a36:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 8001a3a:	4a11      	ldr	r2, [pc, #68]	@ (8001a80 <rightFeedForward+0xc0>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 8001a40:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <rightFeedForward+0xc8>)
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4e:	edc7 7a03 	vstr	s15, [r7, #12]
  rightFF += accFF;
 8001a52:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a56:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5e:	edc7 7a05 	vstr	s15, [r7, #20]
  return rightFF;
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	ee07 3a90 	vmov	s15, r3
}
 8001a68:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6c:	371c      	adds	r7, #28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	0800d794 	.word	0x0800d794
 8001a7c:	0800d79c 	.word	0x0800d79c
 8001a80:	20000274 	.word	0x20000274
 8001a84:	0800d78c 	.word	0x0800d78c
 8001a88:	0800d798 	.word	0x0800d798

08001a8c <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8001a90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <Delay_Init+0x38>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10e      	bne.n	8001aba <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <Delay_Init+0x38>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4a08      	ldr	r2, [pc, #32]	@ (8001ac4 <Delay_Init+0x38>)
 8001aa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aa6:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <Delay_Init+0x3c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <Delay_Init+0x3c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a05      	ldr	r2, [pc, #20]	@ (8001ac8 <Delay_Init+0x3c>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6013      	str	r3, [r2, #0]
    }
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000edf0 	.word	0xe000edf0
 8001ac8:	e0001000 	.word	0xe0001000

08001acc <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <delayMicroseconds+0x38>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 180; // Our MCU runs at 180 MHz, so each microsecond lasts 16 clock ticks
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	22b4      	movs	r2, #180	@ 0xb4
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8001ae4:	bf00      	nop
 8001ae6:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <delayMicroseconds+0x38>)
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d8f8      	bhi.n	8001ae6 <delayMicroseconds+0x1a>
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e0001000 	.word	0xe0001000

08001b08 <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 8001b0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b12:	b21b      	sxth	r3, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <getLeftEncoderCounts+0x14>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	b21b      	sxth	r3, r3
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	40010000 	.word	0x40010000

08001b38 <resetEncoders>:

void resetEncoders() {
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b7c <resetEncoders+0x44>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 8001b42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b46:	2200      	movs	r2, #0
 8001b48:	625a      	str	r2, [r3, #36]	@ 0x24
	m_robot_distance = 0;
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b80 <resetEncoders+0x48>)
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
	m_robot_angle = 0;
 8001b52:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <resetEncoders+0x4c>)
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
	left_delta = 0;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b88 <resetEncoders+0x50>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	801a      	strh	r2, [r3, #0]
	right_delta = 0;
 8001b60:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <resetEncoders+0x54>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	801a      	strh	r2, [r3, #0]
	previous_left_count = 0;
 8001b66:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <resetEncoders+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	801a      	strh	r2, [r3, #0]
	previous_right_count = 0;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <resetEncoders+0x5c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	801a      	strh	r2, [r3, #0]

}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	20000278 	.word	0x20000278
 8001b84:	2000027c 	.word	0x2000027c
 8001b88:	20000280 	.word	0x20000280
 8001b8c:	20000282 	.word	0x20000282
 8001b90:	20000284 	.word	0x20000284
 8001b94:	20000286 	.word	0x20000286

08001b98 <resetEncodersinSystick>:

void resetEncodersinSystick() {
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <resetEncodersinSystick+0x1c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 8001ba2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40010000 	.word	0x40010000

08001bb8 <update_Encoder_Data>:

void update_Encoder_Data(){
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
	int16_t left_count = getLeftEncoderCounts();
 8001bbe:	f7ff ffaf 	bl	8001b20 <getLeftEncoderCounts>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	81fb      	strh	r3, [r7, #14]
	int16_t right_count = getRightEncoderCounts();
 8001bc6:	f7ff ff9f 	bl	8001b08 <getRightEncoderCounts>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	81bb      	strh	r3, [r7, #12]

	left_delta = left_count - previous_left_count;
 8001bce:	89fa      	ldrh	r2, [r7, #14]
 8001bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc0 <update_Encoder_Data+0x108>)
 8001bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	b21a      	sxth	r2, r3
 8001bde:	4b39      	ldr	r3, [pc, #228]	@ (8001cc4 <update_Encoder_Data+0x10c>)
 8001be0:	801a      	strh	r2, [r3, #0]
	previous_left_count = left_count;
 8001be2:	4a37      	ldr	r2, [pc, #220]	@ (8001cc0 <update_Encoder_Data+0x108>)
 8001be4:	89fb      	ldrh	r3, [r7, #14]
 8001be6:	8013      	strh	r3, [r2, #0]

	right_delta = right_count - previous_right_count;
 8001be8:	89ba      	ldrh	r2, [r7, #12]
 8001bea:	4b37      	ldr	r3, [pc, #220]	@ (8001cc8 <update_Encoder_Data+0x110>)
 8001bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	4b34      	ldr	r3, [pc, #208]	@ (8001ccc <update_Encoder_Data+0x114>)
 8001bfa:	801a      	strh	r2, [r3, #0]
	previous_right_count = right_count;
 8001bfc:	4a32      	ldr	r2, [pc, #200]	@ (8001cc8 <update_Encoder_Data+0x110>)
 8001bfe:	89bb      	ldrh	r3, [r7, #12]
 8001c00:	8013      	strh	r3, [r2, #0]

	float left_change = left_delta * MM_PER_COUNT_LEFT;
 8001c02:	4b30      	ldr	r3, [pc, #192]	@ (8001cc4 <update_Encoder_Data+0x10c>)
 8001c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fcab 	bl	8000564 <__aeabi_i2d>
 8001c0e:	a32a      	add	r3, pc, #168	@ (adr r3, 8001cb8 <update_Encoder_Data+0x100>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	f7fe fd10 	bl	8000638 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7fe ffe2 	bl	8000be8 <__aeabi_d2f>
 8001c24:	4603      	mov	r3, r0
 8001c26:	60bb      	str	r3, [r7, #8]
	float right_change = right_delta * MM_PER_COUNT_RIGHT;
 8001c28:	4b28      	ldr	r3, [pc, #160]	@ (8001ccc <update_Encoder_Data+0x114>)
 8001c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc98 	bl	8000564 <__aeabi_i2d>
 8001c34:	a320      	add	r3, pc, #128	@ (adr r3, 8001cb8 <update_Encoder_Data+0x100>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fcfd 	bl	8000638 <__aeabi_dmul>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe ffcf 	bl	8000be8 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	607b      	str	r3, [r7, #4]

	m_fwd_change = 0.5 * (right_change + left_change);
 8001c4e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c52:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c62:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <update_Encoder_Data+0x118>)
 8001c64:	edc3 7a00 	vstr	s15, [r3]
	m_robot_distance += m_fwd_change;
 8001c68:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <update_Encoder_Data+0x11c>)
 8001c6a:	ed93 7a00 	vldr	s14, [r3]
 8001c6e:	4b18      	ldr	r3, [pc, #96]	@ (8001cd0 <update_Encoder_Data+0x118>)
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c78:	4b16      	ldr	r3, [pc, #88]	@ (8001cd4 <update_Encoder_Data+0x11c>)
 8001c7a:	edc3 7a00 	vstr	s15, [r3]
	m_rot_change = (right_change - left_change) * DEG_PER_MM_DIFFERENCE;
 8001c7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c8a:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <update_Encoder_Data+0x120>)
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c94:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <update_Encoder_Data+0x124>)
 8001c96:	edc3 7a00 	vstr	s15, [r3]
	m_robot_angle += m_rot_change;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <update_Encoder_Data+0x128>)
 8001c9c:	ed93 7a00 	vldr	s14, [r3]
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <update_Encoder_Data+0x124>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001caa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce0 <update_Encoder_Data+0x128>)
 8001cac:	edc3 7a00 	vstr	s15, [r3]


}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	f76b218d 	.word	0xf76b218d
 8001cbc:	3faf8e12 	.word	0x3faf8e12
 8001cc0:	20000284 	.word	0x20000284
 8001cc4:	20000280 	.word	0x20000280
 8001cc8:	20000286 	.word	0x20000286
 8001ccc:	20000282 	.word	0x20000282
 8001cd0:	20000288 	.word	0x20000288
 8001cd4:	20000278 	.word	0x20000278
 8001cd8:	0800d784 	.word	0x0800d784
 8001cdc:	2000028c 	.word	0x2000028c
 8001ce0:	2000027c 	.word	0x2000027c

08001ce4 <robot_distance>:

float robot_distance() {
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
    float distance;
    distance = m_robot_distance;
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <robot_distance+0x20>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	607b      	str	r3, [r7, #4]
    return distance;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	ee07 3a90 	vmov	s15, r3
}
 8001cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	20000278 	.word	0x20000278

08001d08 <robot_fwd_change>:
	float omega;
	omega = LOOP_FREQUENCY * m_rot_change;
	return omega;
}

float robot_fwd_change() {
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
	float distance;
	distance = m_fwd_change;
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <robot_fwd_change+0x20>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	607b      	str	r3, [r7, #4]
	return distance;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	ee07 3a90 	vmov	s15, r3
}
 8001d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	20000288 	.word	0x20000288

08001d2c <robot_rot_change>:

float robot_rot_change() {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
	float distance;
	distance = m_rot_change;
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <robot_rot_change+0x20>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	607b      	str	r3, [r7, #4]
	return distance;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	ee07 3a90 	vmov	s15, r3
}
 8001d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	2000028c 	.word	0x2000028c

08001d50 <analogReadIRs>:
	{93912.65, 13.94, -209.14},  //Right Back
	{78382.44, 9.55, -27.92},  //Right Front
};


void analogReadIRs(void){
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
	for (uint8_t i = 10; i < 15; i++)
 8001d56:	230a      	movs	r3, #10
 8001d58:	71fb      	strb	r3, [r7, #7]
 8001d5a:	e00c      	b.n	8001d76 <analogReadIRs+0x26>
	    {
	        IRsensorValues[i] = AnalogMux_ReadChannel(i);
 8001d5c:	79fc      	ldrb	r4, [r7, #7]
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f002 fdc5 	bl	80048f0 <AnalogMux_ReadChannel>
 8001d66:	4603      	mov	r3, r0
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b07      	ldr	r3, [pc, #28]	@ (8001d88 <analogReadIRs+0x38>)
 8001d6c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for (uint8_t i = 10; i < 15; i++)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	3301      	adds	r3, #1
 8001d74:	71fb      	strb	r3, [r7, #7]
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	2b0e      	cmp	r3, #14
 8001d7a:	d9ef      	bls.n	8001d5c <analogReadIRs+0xc>
	    }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd90      	pop	{r4, r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000290 	.word	0x20000290

08001d8c <readRawIR>:


uint16_t readRawIR(IR ir)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
	switch(ir){
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d81c      	bhi.n	8001dd6 <readRawIR+0x4a>
 8001d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8001da4 <readRawIR+0x18>)
 8001d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da2:	bf00      	nop
 8001da4:	08001db9 	.word	0x08001db9
 8001da8:	08001dc5 	.word	0x08001dc5
 8001dac:	08001dbf 	.word	0x08001dbf
 8001db0:	08001dcb 	.word	0x08001dcb
 8001db4:	08001dd1 	.word	0x08001dd1
	case IR_FRONT:
		return IRsensorValues[10];
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <readRawIR+0x5c>)
 8001dba:	8a9b      	ldrh	r3, [r3, #20]
 8001dbc:	e00d      	b.n	8001dda <readRawIR+0x4e>
		break;
	case IR_LEFT_BACK:
		return IRsensorValues[11];
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <readRawIR+0x5c>)
 8001dc0:	8adb      	ldrh	r3, [r3, #22]
 8001dc2:	e00a      	b.n	8001dda <readRawIR+0x4e>
		break;
	case IR_LEFT_FORWARD:
		return IRsensorValues[12];
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <readRawIR+0x5c>)
 8001dc6:	8b1b      	ldrh	r3, [r3, #24]
 8001dc8:	e007      	b.n	8001dda <readRawIR+0x4e>
		break;
	case IR_RIGHT_BACK:
		return IRsensorValues[13];
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <readRawIR+0x5c>)
 8001dcc:	8b5b      	ldrh	r3, [r3, #26]
 8001dce:	e004      	b.n	8001dda <readRawIR+0x4e>
		break;
	case IR_RIGHT_FORWARD:
		return IRsensorValues[14];
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <readRawIR+0x5c>)
 8001dd2:	8b9b      	ldrh	r3, [r3, #28]
 8001dd4:	e001      	b.n	8001dda <readRawIR+0x4e>
		break;
	default:
		return -1;
 8001dd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
		break;
	}
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000290 	.word	0x20000290

08001dec <getIRDistance>:

uint16_t getIRDistance(IR ir, uint16_t raw){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	460a      	mov	r2, r1
 8001df6:	71fb      	strb	r3, [r7, #7]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	80bb      	strh	r3, [r7, #4]
	IR_Calibration_t *cal = &IR_calibration[ir];
 8001dfc:	79fa      	ldrb	r2, [r7, #7]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4a16      	ldr	r2, [pc, #88]	@ (8001e60 <getIRDistance+0x74>)
 8001e08:	4413      	add	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
	return (int)round(((cal->a)/(raw - cal->c)) - cal->b);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	edd3 6a00 	vldr	s13, [r3]
 8001e12:	88bb      	ldrh	r3, [r7, #4]
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e34:	ee17 0a90 	vmov	r0, s15
 8001e38:	f7fe fba6 	bl	8000588 <__aeabi_f2d>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	ec43 2b10 	vmov	d0, r2, r3
 8001e44:	f00b fc20 	bl	800d688 <round>
 8001e48:	ec53 2b10 	vmov	r2, r3, d0
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f7fe fea2 	bl	8000b98 <__aeabi_d2iz>
 8001e54:	4603      	mov	r3, r0
 8001e56:	b29b      	uxth	r3, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000014 	.word	0x20000014

08001e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e68:	f003 f918 	bl	800509c <HAL_Init>


	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e6c:	f000 f874 	bl	8001f58 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e70:	f000 fb56 	bl	8002520 <MX_GPIO_Init>
	MX_DMA_Init();
 8001e74:	f000 fb34 	bl	80024e0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001e78:	f000 fab4 	bl	80023e4 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001e7c:	f000 f98c 	bl	8002198 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001e80:	f000 f9e2 	bl	8002248 <MX_TIM2_Init>
	MX_I2C2_Init();
 8001e84:	f000 f95a 	bl	800213c <MX_I2C2_Init>
	MX_USART3_UART_Init();
 8001e88:	f000 fad6 	bl	8002438 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8001e8c:	f000 fafe 	bl	800248c <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001e90:	f000 f8d4 	bl	800203c <MX_ADC1_Init>
	MX_I2C1_Init();
 8001e94:	f000 f924 	bl	80020e0 <MX_I2C1_Init>
	MX_TIM3_Init();
 8001e98:	f000 fa2a 	bl	80022f0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001e9c:	213c      	movs	r1, #60	@ 0x3c
 8001e9e:	4827      	ldr	r0, [pc, #156]	@ (8001f3c <main+0xd8>)
 8001ea0:	f007 f9be 	bl	8009220 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001ea4:	213c      	movs	r1, #60	@ 0x3c
 8001ea6:	4826      	ldr	r0, [pc, #152]	@ (8001f40 <main+0xdc>)
 8001ea8:	f007 f9ba 	bl	8009220 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001eac:	2100      	movs	r1, #0
 8001eae:	4825      	ldr	r0, [pc, #148]	@ (8001f44 <main+0xe0>)
 8001eb0:	f007 f848 	bl	8008f44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001eb4:	2104      	movs	r1, #4
 8001eb6:	4823      	ldr	r0, [pc, #140]	@ (8001f44 <main+0xe0>)
 8001eb8:	f007 f844 	bl	8008f44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001ebc:	2108      	movs	r1, #8
 8001ebe:	4821      	ldr	r0, [pc, #132]	@ (8001f44 <main+0xe0>)
 8001ec0:	f007 f840 	bl	8008f44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001ec4:	210c      	movs	r1, #12
 8001ec6:	481f      	ldr	r0, [pc, #124]	@ (8001f44 <main+0xe0>)
 8001ec8:	f007 f83c 	bl	8008f44 <HAL_TIM_PWM_Start>

	turn_off_air_pump();
 8001ecc:	f7ff fb58 	bl	8001580 <turn_off_air_pump>
	turn_on_water_pump();
 8001ed0:	f7ff fb4a 	bl	8001568 <turn_on_water_pump>


	/*--------------------- OLED Display --------------------------------*/
	Init_Display();
 8001ed4:	f002 fe4a 	bl	8004b6c <Init_Display>


	/*---------------------Delay--------------------------------*/
	Delay_Init();
 8001ed8:	f7ff fdd8 	bl	8001a8c <Delay_Init>
	/*-------------------------------------------------------------------*/

	/*---------------------Servos--------------------------------*/
	// Initialize servo system
	Servo_Init(50);  // 50Hz frequency for servos
 8001edc:	2032      	movs	r0, #50	@ 0x32
 8001ede:	f001 fd3f 	bl	8003960 <Servo_Init>
	// Initialize arm
	Arm_Init();
 8001ee2:	f7ff f867 	bl	8000fb4 <Arm_Init>

	// Init ball storage
	init_ball_storage();
 8001ee6:	f7ff f8e5 	bl	80010b4 <init_ball_storage>


	/*-------------------------------------------------------------------*/

	Controller_Init(&controller);
 8001eea:	4817      	ldr	r0, [pc, #92]	@ (8001f48 <main+0xe4>)
 8001eec:	f7ff fb94 	bl	8001618 <Controller_Init>
	Profile_Reset(&forward_profile);
 8001ef0:	4816      	ldr	r0, [pc, #88]	@ (8001f4c <main+0xe8>)
 8001ef2:	f000 fdf1 	bl	8002ad8 <Profile_Reset>
	Profile_Reset(&rotation_profile);
 8001ef6:	4816      	ldr	r0, [pc, #88]	@ (8001f50 <main+0xec>)
 8001ef8:	f000 fdee 	bl	8002ad8 <Profile_Reset>
	Motion_Init(&motion, &controller, &forward_profile, &rotation_profile);
 8001efc:	4b14      	ldr	r3, [pc, #80]	@ (8001f50 <main+0xec>)
 8001efe:	4a13      	ldr	r2, [pc, #76]	@ (8001f4c <main+0xe8>)
 8001f00:	4911      	ldr	r1, [pc, #68]	@ (8001f48 <main+0xe4>)
 8001f02:	4814      	ldr	r0, [pc, #80]	@ (8001f54 <main+0xf0>)
 8001f04:	f000 fbdb 	bl	80026be <Motion_Init>
	Controller_ResetControllers(&controller);
 8001f08:	480f      	ldr	r0, [pc, #60]	@ (8001f48 <main+0xe4>)
 8001f0a:	f7ff fbd3 	bl	80016b4 <Controller_ResetControllers>

	Buzzer_UniquePattern();
 8001f0e:	f002 fba9 	bl	8004664 <Buzzer_UniquePattern>

	Buzzer_Toggle(200);
 8001f12:	20c8      	movs	r0, #200	@ 0xc8
 8001f14:	f002 fb94 	bl	8004640 <Buzzer_Toggle>
	HAL_Delay(2000);
 8001f18:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001f1c:	f003 f930 	bl	8005180 <HAL_Delay>
	/*--------------- Raykha calibration ----------------------------------*/
	//RAYKHA_Calibrate(&raykha_calibration, RAYKHA_LINE_WHITE);
	/*-------------------------------------------------------------------*/
	HAL_Delay(2000);
 8001f20:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001f24:	f003 f92c 	bl	8005180 <HAL_Delay>
	//Buzzer_Toggle(200);


	/*----------------- Begin color sensor init--------------------------------*/
	Buzzer_Toggle(100);
 8001f28:	2064      	movs	r0, #100	@ 0x64
 8001f2a:	f002 fb89 	bl	8004640 <Buzzer_Toggle>




  //---------------- Begining of Motion controller tests---------------------------------------------
    EnableSysTickFunction();
 8001f2e:	f002 faff 	bl	8004530 <EnableSysTickFunction>
	//Motion_Move(&motion, 600, FORWARD_SPEED_1, 0, FORWARD_ACCELERATION_1);
	//set_steering_mode(STEERING_OFF);
	//Motion_SpinTurn(&motion, 90, 200.0, 20.0);

  //---------------- End of Motion controller tests---------------------------------------------
	box_manupilation();
 8001f32:	f7ff f90f 	bl	8001154 <box_manupilation>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f36:	bf00      	nop
 8001f38:	e7fd      	b.n	8001f36 <main+0xd2>
 8001f3a:	bf00      	nop
 8001f3c:	200003a0 	.word	0x200003a0
 8001f40:	200003e8 	.word	0x200003e8
 8001f44:	20000430 	.word	0x20000430
 8001f48:	20000694 	.word	0x20000694
 8001f4c:	2000064c 	.word	0x2000064c
 8001f50:	20000670 	.word	0x20000670
 8001f54:	200005e0 	.word	0x200005e0

08001f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b094      	sub	sp, #80	@ 0x50
 8001f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	2234      	movs	r2, #52	@ 0x34
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f009 fa57 	bl	800b41a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f6c:	f107 0308 	add.w	r3, r7, #8
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	4b2c      	ldr	r3, [pc, #176]	@ (8002034 <SystemClock_Config+0xdc>)
 8001f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f84:	4a2b      	ldr	r2, [pc, #172]	@ (8002034 <SystemClock_Config+0xdc>)
 8001f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8c:	4b29      	ldr	r3, [pc, #164]	@ (8002034 <SystemClock_Config+0xdc>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f98:	2300      	movs	r3, #0
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	4b26      	ldr	r3, [pc, #152]	@ (8002038 <SystemClock_Config+0xe0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a25      	ldr	r2, [pc, #148]	@ (8002038 <SystemClock_Config+0xe0>)
 8001fa2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b23      	ldr	r3, [pc, #140]	@ (8002038 <SystemClock_Config+0xe0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fbc:	2310      	movs	r3, #16
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fc8:	2308      	movs	r3, #8
 8001fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001fcc:	23b4      	movs	r3, #180	@ 0xb4
 8001fce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f006 fcc1 	bl	8008968 <HAL_RCC_OscConfig>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001fec:	f000 fb60 	bl	80026b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ff0:	f006 f920 	bl	8008234 <HAL_PWREx_EnableOverDrive>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ffa:	f000 fb59 	bl	80026b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ffe:	230f      	movs	r3, #15
 8002000:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002002:	2302      	movs	r3, #2
 8002004:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800200a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800200e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002014:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002016:	f107 0308 	add.w	r3, r7, #8
 800201a:	2105      	movs	r1, #5
 800201c:	4618      	mov	r0, r3
 800201e:	f006 f959 	bl	80082d4 <HAL_RCC_ClockConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002028:	f000 fb42 	bl	80026b0 <Error_Handler>
  }
}
 800202c:	bf00      	nop
 800202e:	3750      	adds	r7, #80	@ 0x50
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40023800 	.word	0x40023800
 8002038:	40007000 	.word	0x40007000

0800203c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002042:	463b      	mov	r3, r7
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800204e:	4b21      	ldr	r3, [pc, #132]	@ (80020d4 <MX_ADC1_Init+0x98>)
 8002050:	4a21      	ldr	r2, [pc, #132]	@ (80020d8 <MX_ADC1_Init+0x9c>)
 8002052:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002054:	4b1f      	ldr	r3, [pc, #124]	@ (80020d4 <MX_ADC1_Init+0x98>)
 8002056:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800205a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800205c:	4b1d      	ldr	r3, [pc, #116]	@ (80020d4 <MX_ADC1_Init+0x98>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002062:	4b1c      	ldr	r3, [pc, #112]	@ (80020d4 <MX_ADC1_Init+0x98>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002068:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <MX_ADC1_Init+0x98>)
 800206a:	2201      	movs	r2, #1
 800206c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800206e:	4b19      	ldr	r3, [pc, #100]	@ (80020d4 <MX_ADC1_Init+0x98>)
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002076:	4b17      	ldr	r3, [pc, #92]	@ (80020d4 <MX_ADC1_Init+0x98>)
 8002078:	2200      	movs	r2, #0
 800207a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800207c:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <MX_ADC1_Init+0x98>)
 800207e:	4a17      	ldr	r2, [pc, #92]	@ (80020dc <MX_ADC1_Init+0xa0>)
 8002080:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002082:	4b14      	ldr	r3, [pc, #80]	@ (80020d4 <MX_ADC1_Init+0x98>)
 8002084:	2200      	movs	r2, #0
 8002086:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002088:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <MX_ADC1_Init+0x98>)
 800208a:	2201      	movs	r2, #1
 800208c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800208e:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <MX_ADC1_Init+0x98>)
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002096:	4b0f      	ldr	r3, [pc, #60]	@ (80020d4 <MX_ADC1_Init+0x98>)
 8002098:	2201      	movs	r2, #1
 800209a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800209c:	480d      	ldr	r0, [pc, #52]	@ (80020d4 <MX_ADC1_Init+0x98>)
 800209e:	f003 f893 	bl	80051c8 <HAL_ADC_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020a8:	f000 fb02 	bl	80026b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80020ac:	230a      	movs	r3, #10
 80020ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b8:	463b      	mov	r3, r7
 80020ba:	4619      	mov	r1, r3
 80020bc:	4805      	ldr	r0, [pc, #20]	@ (80020d4 <MX_ADC1_Init+0x98>)
 80020be:	f003 fa65 	bl	800558c <HAL_ADC_ConfigChannel>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020c8:	f000 faf2 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200002b0 	.word	0x200002b0
 80020d8:	40012000 	.word	0x40012000
 80020dc:	0f000001 	.word	0x0f000001

080020e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020e4:	4b12      	ldr	r3, [pc, #72]	@ (8002130 <MX_I2C1_Init+0x50>)
 80020e6:	4a13      	ldr	r2, [pc, #76]	@ (8002134 <MX_I2C1_Init+0x54>)
 80020e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80020ea:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <MX_I2C1_Init+0x50>)
 80020ec:	4a12      	ldr	r2, [pc, #72]	@ (8002138 <MX_I2C1_Init+0x58>)
 80020ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002130 <MX_I2C1_Init+0x50>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002130 <MX_I2C1_Init+0x50>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002130 <MX_I2C1_Init+0x50>)
 80020fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002102:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002104:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <MX_I2C1_Init+0x50>)
 8002106:	2200      	movs	r2, #0
 8002108:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800210a:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <MX_I2C1_Init+0x50>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002110:	4b07      	ldr	r3, [pc, #28]	@ (8002130 <MX_I2C1_Init+0x50>)
 8002112:	2200      	movs	r2, #0
 8002114:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <MX_I2C1_Init+0x50>)
 8002118:	2200      	movs	r2, #0
 800211a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800211c:	4804      	ldr	r0, [pc, #16]	@ (8002130 <MX_I2C1_Init+0x50>)
 800211e:	f004 fab7 	bl	8006690 <HAL_I2C_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002128:	f000 fac2 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200002f8 	.word	0x200002f8
 8002134:	40005400 	.word	0x40005400
 8002138:	00061a80 	.word	0x00061a80

0800213c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002140:	4b12      	ldr	r3, [pc, #72]	@ (800218c <MX_I2C2_Init+0x50>)
 8002142:	4a13      	ldr	r2, [pc, #76]	@ (8002190 <MX_I2C2_Init+0x54>)
 8002144:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002146:	4b11      	ldr	r3, [pc, #68]	@ (800218c <MX_I2C2_Init+0x50>)
 8002148:	4a12      	ldr	r2, [pc, #72]	@ (8002194 <MX_I2C2_Init+0x58>)
 800214a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800214c:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <MX_I2C2_Init+0x50>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002152:	4b0e      	ldr	r3, [pc, #56]	@ (800218c <MX_I2C2_Init+0x50>)
 8002154:	2200      	movs	r2, #0
 8002156:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002158:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <MX_I2C2_Init+0x50>)
 800215a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800215e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002160:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <MX_I2C2_Init+0x50>)
 8002162:	2200      	movs	r2, #0
 8002164:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002166:	4b09      	ldr	r3, [pc, #36]	@ (800218c <MX_I2C2_Init+0x50>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800216c:	4b07      	ldr	r3, [pc, #28]	@ (800218c <MX_I2C2_Init+0x50>)
 800216e:	2200      	movs	r2, #0
 8002170:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <MX_I2C2_Init+0x50>)
 8002174:	2200      	movs	r2, #0
 8002176:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002178:	4804      	ldr	r0, [pc, #16]	@ (800218c <MX_I2C2_Init+0x50>)
 800217a:	f004 fa89 	bl	8006690 <HAL_I2C_Init>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002184:	f000 fa94 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}
 800218c:	2000034c 	.word	0x2000034c
 8002190:	40005800 	.word	0x40005800
 8002194:	000186a0 	.word	0x000186a0

08002198 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	@ 0x30
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800219e:	f107 030c 	add.w	r3, r7, #12
 80021a2:	2224      	movs	r2, #36	@ 0x24
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f009 f937 	bl	800b41a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021b4:	4b22      	ldr	r3, [pc, #136]	@ (8002240 <MX_TIM1_Init+0xa8>)
 80021b6:	4a23      	ldr	r2, [pc, #140]	@ (8002244 <MX_TIM1_Init+0xac>)
 80021b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021ba:	4b21      	ldr	r3, [pc, #132]	@ (8002240 <MX_TIM1_Init+0xa8>)
 80021bc:	2200      	movs	r2, #0
 80021be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002240 <MX_TIM1_Init+0xa8>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002240 <MX_TIM1_Init+0xa8>)
 80021c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002240 <MX_TIM1_Init+0xa8>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <MX_TIM1_Init+0xa8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021da:	4b19      	ldr	r3, [pc, #100]	@ (8002240 <MX_TIM1_Init+0xa8>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021e0:	2303      	movs	r3, #3
 80021e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021e4:	2300      	movs	r3, #0
 80021e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021e8:	2301      	movs	r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021f4:	2300      	movs	r3, #0
 80021f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021f8:	2301      	movs	r3, #1
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	4619      	mov	r1, r3
 800220a:	480d      	ldr	r0, [pc, #52]	@ (8002240 <MX_TIM1_Init+0xa8>)
 800220c:	f006 ff62 	bl	80090d4 <HAL_TIM_Encoder_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002216:	f000 fa4b 	bl	80026b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	4619      	mov	r1, r3
 8002226:	4806      	ldr	r0, [pc, #24]	@ (8002240 <MX_TIM1_Init+0xa8>)
 8002228:	f007 fbcc 	bl	80099c4 <HAL_TIMEx_MasterConfigSynchronization>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002232:	f000 fa3d 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002236:	bf00      	nop
 8002238:	3730      	adds	r7, #48	@ 0x30
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200003a0 	.word	0x200003a0
 8002244:	40010000 	.word	0x40010000

08002248 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	@ 0x30
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	2224      	movs	r2, #36	@ 0x24
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f009 f8df 	bl	800b41a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002264:	4b21      	ldr	r3, [pc, #132]	@ (80022ec <MX_TIM2_Init+0xa4>)
 8002266:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800226a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800226c:	4b1f      	ldr	r3, [pc, #124]	@ (80022ec <MX_TIM2_Init+0xa4>)
 800226e:	2200      	movs	r2, #0
 8002270:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	4b1e      	ldr	r3, [pc, #120]	@ (80022ec <MX_TIM2_Init+0xa4>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002278:	4b1c      	ldr	r3, [pc, #112]	@ (80022ec <MX_TIM2_Init+0xa4>)
 800227a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800227e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002280:	4b1a      	ldr	r3, [pc, #104]	@ (80022ec <MX_TIM2_Init+0xa4>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002286:	4b19      	ldr	r3, [pc, #100]	@ (80022ec <MX_TIM2_Init+0xa4>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800228c:	2303      	movs	r3, #3
 800228e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002294:	2301      	movs	r3, #1
 8002296:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022a4:	2301      	movs	r3, #1
 80022a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80022b0:	f107 030c 	add.w	r3, r7, #12
 80022b4:	4619      	mov	r1, r3
 80022b6:	480d      	ldr	r0, [pc, #52]	@ (80022ec <MX_TIM2_Init+0xa4>)
 80022b8:	f006 ff0c 	bl	80090d4 <HAL_TIM_Encoder_Init>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80022c2:	f000 f9f5 	bl	80026b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4806      	ldr	r0, [pc, #24]	@ (80022ec <MX_TIM2_Init+0xa4>)
 80022d4:	f007 fb76 	bl	80099c4 <HAL_TIMEx_MasterConfigSynchronization>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80022de:	f000 f9e7 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022e2:	bf00      	nop
 80022e4:	3730      	adds	r7, #48	@ 0x30
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200003e8 	.word	0x200003e8

080022f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	@ 0x28
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f6:	f107 0320 	add.w	r3, r7, #32
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
 800230c:	611a      	str	r2, [r3, #16]
 800230e:	615a      	str	r2, [r3, #20]
 8002310:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002312:	4b32      	ldr	r3, [pc, #200]	@ (80023dc <MX_TIM3_Init+0xec>)
 8002314:	4a32      	ldr	r2, [pc, #200]	@ (80023e0 <MX_TIM3_Init+0xf0>)
 8002316:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002318:	4b30      	ldr	r3, [pc, #192]	@ (80023dc <MX_TIM3_Init+0xec>)
 800231a:	2200      	movs	r2, #0
 800231c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231e:	4b2f      	ldr	r3, [pc, #188]	@ (80023dc <MX_TIM3_Init+0xec>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8002324:	4b2d      	ldr	r3, [pc, #180]	@ (80023dc <MX_TIM3_Init+0xec>)
 8002326:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800232a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232c:	4b2b      	ldr	r3, [pc, #172]	@ (80023dc <MX_TIM3_Init+0xec>)
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002332:	4b2a      	ldr	r3, [pc, #168]	@ (80023dc <MX_TIM3_Init+0xec>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002338:	4828      	ldr	r0, [pc, #160]	@ (80023dc <MX_TIM3_Init+0xec>)
 800233a:	f006 fdb3 	bl	8008ea4 <HAL_TIM_PWM_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002344:	f000 f9b4 	bl	80026b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002348:	2300      	movs	r3, #0
 800234a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002350:	f107 0320 	add.w	r3, r7, #32
 8002354:	4619      	mov	r1, r3
 8002356:	4821      	ldr	r0, [pc, #132]	@ (80023dc <MX_TIM3_Init+0xec>)
 8002358:	f007 fb34 	bl	80099c4 <HAL_TIMEx_MasterConfigSynchronization>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002362:	f000 f9a5 	bl	80026b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002366:	2360      	movs	r3, #96	@ 0x60
 8002368:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	2200      	movs	r2, #0
 800237a:	4619      	mov	r1, r3
 800237c:	4817      	ldr	r0, [pc, #92]	@ (80023dc <MX_TIM3_Init+0xec>)
 800237e:	f006 ffdd 	bl	800933c <HAL_TIM_PWM_ConfigChannel>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002388:	f000 f992 	bl	80026b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	2204      	movs	r2, #4
 8002390:	4619      	mov	r1, r3
 8002392:	4812      	ldr	r0, [pc, #72]	@ (80023dc <MX_TIM3_Init+0xec>)
 8002394:	f006 ffd2 	bl	800933c <HAL_TIM_PWM_ConfigChannel>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800239e:	f000 f987 	bl	80026b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	2208      	movs	r2, #8
 80023a6:	4619      	mov	r1, r3
 80023a8:	480c      	ldr	r0, [pc, #48]	@ (80023dc <MX_TIM3_Init+0xec>)
 80023aa:	f006 ffc7 	bl	800933c <HAL_TIM_PWM_ConfigChannel>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80023b4:	f000 f97c 	bl	80026b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	220c      	movs	r2, #12
 80023bc:	4619      	mov	r1, r3
 80023be:	4807      	ldr	r0, [pc, #28]	@ (80023dc <MX_TIM3_Init+0xec>)
 80023c0:	f006 ffbc 	bl	800933c <HAL_TIM_PWM_ConfigChannel>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80023ca:	f000 f971 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023ce:	4803      	ldr	r0, [pc, #12]	@ (80023dc <MX_TIM3_Init+0xec>)
 80023d0:	f001 fdf0 	bl	8003fb4 <HAL_TIM_MspPostInit>

}
 80023d4:	bf00      	nop
 80023d6:	3728      	adds	r7, #40	@ 0x28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000430 	.word	0x20000430
 80023e0:	40000400 	.word	0x40000400

080023e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023e8:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <MX_USART2_UART_Init+0x4c>)
 80023ea:	4a12      	ldr	r2, [pc, #72]	@ (8002434 <MX_USART2_UART_Init+0x50>)
 80023ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023ee:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <MX_USART2_UART_Init+0x4c>)
 80023f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002430 <MX_USART2_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <MX_USART2_UART_Init+0x4c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002402:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <MX_USART2_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <MX_USART2_UART_Init+0x4c>)
 800240a:	220c      	movs	r2, #12
 800240c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240e:	4b08      	ldr	r3, [pc, #32]	@ (8002430 <MX_USART2_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002414:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <MX_USART2_UART_Init+0x4c>)
 8002416:	2200      	movs	r2, #0
 8002418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800241a:	4805      	ldr	r0, [pc, #20]	@ (8002430 <MX_USART2_UART_Init+0x4c>)
 800241c:	f007 fb4e 	bl	8009abc <HAL_UART_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002426:	f000 f943 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000478 	.word	0x20000478
 8002434:	40004400 	.word	0x40004400

08002438 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800243c:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <MX_USART3_UART_Init+0x4c>)
 800243e:	4a12      	ldr	r2, [pc, #72]	@ (8002488 <MX_USART3_UART_Init+0x50>)
 8002440:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002442:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <MX_USART3_UART_Init+0x4c>)
 8002444:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002448:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800244a:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <MX_USART3_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002450:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <MX_USART3_UART_Init+0x4c>)
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002456:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <MX_USART3_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800245c:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <MX_USART3_UART_Init+0x4c>)
 800245e:	220c      	movs	r2, #12
 8002460:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002462:	4b08      	ldr	r3, [pc, #32]	@ (8002484 <MX_USART3_UART_Init+0x4c>)
 8002464:	2200      	movs	r2, #0
 8002466:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <MX_USART3_UART_Init+0x4c>)
 800246a:	2200      	movs	r2, #0
 800246c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800246e:	4805      	ldr	r0, [pc, #20]	@ (8002484 <MX_USART3_UART_Init+0x4c>)
 8002470:	f007 fb24 	bl	8009abc <HAL_UART_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800247a:	f000 f919 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	200004c0 	.word	0x200004c0
 8002488:	40004800 	.word	0x40004800

0800248c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002490:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <MX_USART6_UART_Init+0x4c>)
 8002492:	4a12      	ldr	r2, [pc, #72]	@ (80024dc <MX_USART6_UART_Init+0x50>)
 8002494:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002496:	4b10      	ldr	r3, [pc, #64]	@ (80024d8 <MX_USART6_UART_Init+0x4c>)
 8002498:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800249c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800249e:	4b0e      	ldr	r3, [pc, #56]	@ (80024d8 <MX_USART6_UART_Init+0x4c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024a4:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <MX_USART6_UART_Init+0x4c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024aa:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <MX_USART6_UART_Init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024b0:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <MX_USART6_UART_Init+0x4c>)
 80024b2:	220c      	movs	r2, #12
 80024b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024b6:	4b08      	ldr	r3, [pc, #32]	@ (80024d8 <MX_USART6_UART_Init+0x4c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <MX_USART6_UART_Init+0x4c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024c2:	4805      	ldr	r0, [pc, #20]	@ (80024d8 <MX_USART6_UART_Init+0x4c>)
 80024c4:	f007 fafa 	bl	8009abc <HAL_UART_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024ce:	f000 f8ef 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000508 	.word	0x20000508
 80024dc:	40011400 	.word	0x40011400

080024e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <MX_DMA_Init+0x3c>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	4a0b      	ldr	r2, [pc, #44]	@ (800251c <MX_DMA_Init+0x3c>)
 80024f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f6:	4b09      	ldr	r3, [pc, #36]	@ (800251c <MX_DMA_Init+0x3c>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002502:	2200      	movs	r2, #0
 8002504:	2100      	movs	r1, #0
 8002506:	2039      	movs	r0, #57	@ 0x39
 8002508:	f003 fb49 	bl	8005b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800250c:	2039      	movs	r0, #57	@ 0x39
 800250e:	f003 fb62 	bl	8005bd6 <HAL_NVIC_EnableIRQ>

}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800

08002520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	@ 0x28
 8002524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002526:	f107 0314 	add.w	r3, r7, #20
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	60da      	str	r2, [r3, #12]
 8002534:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	4b59      	ldr	r3, [pc, #356]	@ (80026a0 <MX_GPIO_Init+0x180>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	4a58      	ldr	r2, [pc, #352]	@ (80026a0 <MX_GPIO_Init+0x180>)
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	6313      	str	r3, [r2, #48]	@ 0x30
 8002546:	4b56      	ldr	r3, [pc, #344]	@ (80026a0 <MX_GPIO_Init+0x180>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b52      	ldr	r3, [pc, #328]	@ (80026a0 <MX_GPIO_Init+0x180>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	4a51      	ldr	r2, [pc, #324]	@ (80026a0 <MX_GPIO_Init+0x180>)
 800255c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002560:	6313      	str	r3, [r2, #48]	@ 0x30
 8002562:	4b4f      	ldr	r3, [pc, #316]	@ (80026a0 <MX_GPIO_Init+0x180>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	4b4b      	ldr	r3, [pc, #300]	@ (80026a0 <MX_GPIO_Init+0x180>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a4a      	ldr	r2, [pc, #296]	@ (80026a0 <MX_GPIO_Init+0x180>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
 800257e:	4b48      	ldr	r3, [pc, #288]	@ (80026a0 <MX_GPIO_Init+0x180>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	607b      	str	r3, [r7, #4]
 800258e:	4b44      	ldr	r3, [pc, #272]	@ (80026a0 <MX_GPIO_Init+0x180>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	4a43      	ldr	r2, [pc, #268]	@ (80026a0 <MX_GPIO_Init+0x180>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	6313      	str	r3, [r2, #48]	@ 0x30
 800259a:	4b41      	ldr	r3, [pc, #260]	@ (80026a0 <MX_GPIO_Init+0x180>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AIRPUMP_GPIO_Port, AIRPUMP_Pin, GPIO_PIN_RESET);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2102      	movs	r1, #2
 80025aa:	483e      	ldr	r0, [pc, #248]	@ (80026a4 <MX_GPIO_Init+0x184>)
 80025ac:	f004 f83e 	bl	800662c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WATERPUMP_GPIO_Port, WATERPUMP_Pin, GPIO_PIN_SET);
 80025b0:	2201      	movs	r2, #1
 80025b2:	2104      	movs	r1, #4
 80025b4:	483b      	ldr	r0, [pc, #236]	@ (80026a4 <MX_GPIO_Init+0x184>)
 80025b6:	f004 f839 	bl	800662c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2120      	movs	r1, #32
 80025be:	483a      	ldr	r0, [pc, #232]	@ (80026a8 <MX_GPIO_Init+0x188>)
 80025c0:	f004 f834 	bl	800662c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 80025c4:	2200      	movs	r2, #0
 80025c6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80025ca:	4838      	ldr	r0, [pc, #224]	@ (80026ac <MX_GPIO_Init+0x18c>)
 80025cc:	f004 f82e 	bl	800662c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC11 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_11;
 80025d0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80025d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80025da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4619      	mov	r1, r3
 80025e6:	482f      	ldr	r0, [pc, #188]	@ (80026a4 <MX_GPIO_Init+0x184>)
 80025e8:	f003 fe8c 	bl	8006304 <HAL_GPIO_Init>

  /*Configure GPIO pin : AIRPUMP_Pin */
  GPIO_InitStruct.Pin = AIRPUMP_Pin;
 80025ec:	2302      	movs	r3, #2
 80025ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f0:	2301      	movs	r3, #1
 80025f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025f8:	2302      	movs	r3, #2
 80025fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(AIRPUMP_GPIO_Port, &GPIO_InitStruct);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	4828      	ldr	r0, [pc, #160]	@ (80026a4 <MX_GPIO_Init+0x184>)
 8002604:	f003 fe7e 	bl	8006304 <HAL_GPIO_Init>

  /*Configure GPIO pin : WATERPUMP_Pin */
  GPIO_InitStruct.Pin = WATERPUMP_Pin;
 8002608:	2304      	movs	r3, #4
 800260a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260c:	2301      	movs	r3, #1
 800260e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002610:	2301      	movs	r3, #1
 8002612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2300      	movs	r3, #0
 8002616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WATERPUMP_GPIO_Port, &GPIO_InitStruct);
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4619      	mov	r1, r3
 800261e:	4821      	ldr	r0, [pc, #132]	@ (80026a4 <MX_GPIO_Init+0x184>)
 8002620:	f003 fe70 	bl	8006304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002624:	2308      	movs	r3, #8
 8002626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002628:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800262c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	481a      	ldr	r0, [pc, #104]	@ (80026a4 <MX_GPIO_Init+0x184>)
 800263a:	f003 fe63 	bl	8006304 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800263e:	2320      	movs	r3, #32
 8002640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002642:	2301      	movs	r3, #1
 8002644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2300      	movs	r3, #0
 800264c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800264e:	f107 0314 	add.w	r3, r7, #20
 8002652:	4619      	mov	r1, r3
 8002654:	4814      	ldr	r0, [pc, #80]	@ (80026a8 <MX_GPIO_Init+0x188>)
 8002656:	f003 fe55 	bl	8006304 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 800265a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800265e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002660:	2301      	movs	r3, #1
 8002662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002668:	2303      	movs	r3, #3
 800266a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	4619      	mov	r1, r3
 8002672:	480e      	ldr	r0, [pc, #56]	@ (80026ac <MX_GPIO_Init+0x18c>)
 8002674:	f003 fe46 	bl	8006304 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002678:	2200      	movs	r2, #0
 800267a:	2100      	movs	r1, #0
 800267c:	2009      	movs	r0, #9
 800267e:	f003 fa8e 	bl	8005b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002682:	2009      	movs	r0, #9
 8002684:	f003 faa7 	bl	8005bd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002688:	2200      	movs	r2, #0
 800268a:	2100      	movs	r1, #0
 800268c:	2028      	movs	r0, #40	@ 0x28
 800268e:	f003 fa86 	bl	8005b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002692:	2028      	movs	r0, #40	@ 0x28
 8002694:	f003 fa9f 	bl	8005bd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002698:	bf00      	nop
 800269a:	3728      	adds	r7, #40	@ 0x28
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020800 	.word	0x40020800
 80026a8:	40020000 	.word	0x40020000
 80026ac:	40020400 	.word	0x40020400

080026b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026b4:	b672      	cpsid	i
}
 80026b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  Buzzer_ErrorPattern();
 80026b8:	f002 f807 	bl	80046ca <Buzzer_ErrorPattern>
 80026bc:	e7fc      	b.n	80026b8 <Error_Handler+0x8>

080026be <Motion_Init>:
#include "uartcom.h"
#include "encoders.h"

extern UART_HandleTypeDef huart6;

void Motion_Init(Motion *motion, Controller *controller, Profile *forward, Profile *rotation) {
 80026be:	b4b0      	push	{r4, r5, r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	603b      	str	r3, [r7, #0]
    motion->controller = *controller;  // Copy the controller structure
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	4614      	mov	r4, r2
 80026d2:	461d      	mov	r5, r3
 80026d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026dc:	682b      	ldr	r3, [r5, #0]
 80026de:	6023      	str	r3, [r4, #0]
    motion->forward = *forward;        // Copy the forward profile structure
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80026e8:	4615      	mov	r5, r2
 80026ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f2:	682b      	ldr	r3, [r5, #0]
 80026f4:	6023      	str	r3, [r4, #0]
    motion->rotation = *rotation;      // Copy the rotation profile structure
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 80026fe:	4615      	mov	r5, r2
 8002700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002708:	682b      	ldr	r3, [r5, #0]
 800270a:	6023      	str	r3, [r4, #0]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	bcb0      	pop	{r4, r5, r7}
 8002714:	4770      	bx	lr

08002716 <Motion_ResetDriveSystem>:

void Motion_ResetDriveSystem(Motion *motion) {
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
	Motion_Stop(motion);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f81b 	bl	800275a <Motion_Stop>
	Motion_DisableDrive(motion);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f822 	bl	800276e <Motion_DisableDrive>
    resetEncoders();
 800272a:	f7ff fa05 	bl	8001b38 <resetEncoders>
    Profile_Reset(&(motion->forward));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3324      	adds	r3, #36	@ 0x24
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f9d0 	bl	8002ad8 <Profile_Reset>
    Profile_Reset(&(motion->rotation));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3348      	adds	r3, #72	@ 0x48
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f9cb 	bl	8002ad8 <Profile_Reset>
    Controller_ResetControllers(&(motion->controller));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe ffb5 	bl	80016b4 <Controller_ResetControllers>
    Controller_EnableControllers(&(motion->controller));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe ff95 	bl	800167c <Controller_EnableControllers>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <Motion_Stop>:

void Motion_Stop(Motion *motion) {
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
	Controller_Stop();
 8002762:	f7fe ffc1 	bl	80016e8 <Controller_Stop>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <Motion_DisableDrive>:

void Motion_DisableDrive(Motion *motion) {
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
	Controller_DisableControllers(&(motion->controller));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe ff8d 	bl	8001698 <Controller_DisableControllers>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <Motion_Velocity>:

float Motion_Position(Motion *motion) {
    return Profile_GetPosition(&(motion->forward));
}

float Motion_Velocity(Motion *motion) {
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->forward));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3324      	adds	r3, #36	@ 0x24
 8002792:	4618      	mov	r0, r3
 8002794:	f000 fa9c 	bl	8002cd0 <Profile_GetSpeed>
 8002798:	eef0 7a40 	vmov.f32	s15, s0
}
 800279c:	eeb0 0a67 	vmov.f32	s0, s15
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <Motion_Omega>:

float Motion_Angle(Motion *motion) {
    return Profile_GetPosition(&(motion->rotation));
}

float Motion_Omega(Motion *motion) {
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->rotation));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3348      	adds	r3, #72	@ 0x48
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fa8c 	bl	8002cd0 <Profile_GetSpeed>
 80027b8:	eef0 7a40 	vmov.f32	s15, s0
}
 80027bc:	eeb0 0a67 	vmov.f32	s0, s15
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <Motion_StartMove>:
float Motion_Alpha(Motion *motion) {
    return Profile_GetAcceleration(&(motion->rotation));
}


void Motion_StartMove(Motion *motion, float distance, float top_speed, float final_speed, float acceleration) {
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6178      	str	r0, [r7, #20]
 80027ce:	ed87 0a04 	vstr	s0, [r7, #16]
 80027d2:	edc7 0a03 	vstr	s1, [r7, #12]
 80027d6:	ed87 1a02 	vstr	s2, [r7, #8]
 80027da:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Start(&(motion->forward), distance, top_speed, final_speed, acceleration);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3324      	adds	r3, #36	@ 0x24
 80027e2:	edd7 1a01 	vldr	s3, [r7, #4]
 80027e6:	ed97 1a02 	vldr	s2, [r7, #8]
 80027ea:	edd7 0a03 	vldr	s1, [r7, #12]
 80027ee:	ed97 0a04 	vldr	s0, [r7, #16]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f989 	bl	8002b0a <Profile_Start>
}
 80027f8:	bf00      	nop
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <Motion_Move>:
uint8_t Motion_MoveFinished(Motion *motion) {
    return Profile_IsFinished(&(motion->forward));
}

// wait untill mition is completed
void Motion_Move(Motion *motion, float distance, float top_speed, float final_speed, float acceleration) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6178      	str	r0, [r7, #20]
 8002808:	ed87 0a04 	vstr	s0, [r7, #16]
 800280c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002810:	ed87 1a02 	vstr	s2, [r7, #8]
 8002814:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Move(&(motion->forward), distance, top_speed, final_speed, acceleration);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3324      	adds	r3, #36	@ 0x24
 800281c:	edd7 1a01 	vldr	s3, [r7, #4]
 8002820:	ed97 1a02 	vldr	s2, [r7, #8]
 8002824:	edd7 0a03 	vldr	s1, [r7, #12]
 8002828:	ed97 0a04 	vldr	s0, [r7, #16]
 800282c:	4618      	mov	r0, r3
 800282e:	f000 f9f7 	bl	8002c20 <Profile_Move>
}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <Motion_Turn>:
uint8_t Motion_TurnFinished(Motion *motion) {
    return Profile_IsFinished(&(motion->rotation));
}

//wait untill motion is finished
void Motion_Turn(Motion *motion, float angle, float omega, float alpha) {
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	ed87 0a02 	vstr	s0, [r7, #8]
 8002848:	edc7 0a01 	vstr	s1, [r7, #4]
 800284c:	ed87 1a00 	vstr	s2, [r7]
    Profile_Move(&(motion->rotation), angle, omega, 0, alpha);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3348      	adds	r3, #72	@ 0x48
 8002854:	edd7 1a00 	vldr	s3, [r7]
 8002858:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 8002874 <Motion_Turn+0x38>
 800285c:	edd7 0a01 	vldr	s1, [r7, #4]
 8002860:	ed97 0a02 	vldr	s0, [r7, #8]
 8002864:	4618      	mov	r0, r3
 8002866:	f000 f9db 	bl	8002c20 <Profile_Move>
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	00000000 	.word	0x00000000

08002878 <Motion_Update>:

void Motion_Turn_(Motion *motion, float angle, float omega, float final_speed, float alpha){
	Profile_Move(&(motion->rotation), angle, omega, final_speed, alpha);
}

void Motion_Update(Motion *motion) {
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
    Profile_Update(&(motion->forward));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3324      	adds	r3, #36	@ 0x24
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fa51 	bl	8002d2c <Profile_Update>
    Profile_Update(&(motion->rotation));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3348      	adds	r3, #72	@ 0x48
 800288e:	4618      	mov	r0, r3
 8002890:	f000 fa4c 	bl	8002d2c <Profile_Update>
    //UART_Transmit_Float(&huart6, ">V", motion->forward.speed, 2);
    //UART_Transmit_Float(&huart6, ">W", robot_speed(), 2);
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <Motion_SpinTurn>:

/**
  *
  * @brief turn in place. Force forward speed to zero
  */
void Motion_SpinTurn(Motion *motion, float angle, float omega, float alpha) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80028a8:	edc7 0a01 	vstr	s1, [r7, #4]
 80028ac:	ed87 1a00 	vstr	s2, [r7]
    Profile_SetTargetSpeed(&(motion->forward), 0);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3324      	adds	r3, #36	@ 0x24
 80028b4:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80028f8 <Motion_SpinTurn+0x5c>
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fa27 	bl	8002d0c <Profile_SetTargetSpeed>
    while (Profile_GetSpeed(&(motion->forward)) != 0) {
 80028be:	e002      	b.n	80028c6 <Motion_SpinTurn+0x2a>
        HAL_Delay(2);
 80028c0:	2002      	movs	r0, #2
 80028c2:	f002 fc5d 	bl	8005180 <HAL_Delay>
    while (Profile_GetSpeed(&(motion->forward)) != 0) {
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3324      	adds	r3, #36	@ 0x24
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fa00 	bl	8002cd0 <Profile_GetSpeed>
 80028d0:	eef0 7a40 	vmov.f32	s15, s0
 80028d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028dc:	d1f0      	bne.n	80028c0 <Motion_SpinTurn+0x24>
    }
    Motion_Turn(motion, angle, omega, alpha);
 80028de:	ed97 1a00 	vldr	s2, [r7]
 80028e2:	edd7 0a01 	vldr	s1, [r7, #4]
 80028e6:	ed97 0a02 	vldr	s0, [r7, #8]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f7ff ffa6 	bl	800283c <Motion_Turn>
}
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	00000000 	.word	0x00000000

080028fc <Motion_StopAfter>:
   *
   * Calling this with the robot stationary is undefined. Don't do that.
   *
   * @brief bring the robot to a halt after a specific distance
   */
void Motion_StopAfter(Motion *motion, float distance) {
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	ed2d 8b02 	vpush	{d8}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	ed87 0a00 	vstr	s0, [r7]
    Profile_Move(&(motion->forward), distance, Profile_GetSpeed(&(motion->forward)), 0, Profile_GetAcceleration(&(motion->forward)));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3324      	adds	r3, #36	@ 0x24
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f9da 	bl	8002cd0 <Profile_GetSpeed>
 800291c:	eeb0 8a40 	vmov.f32	s16, s0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3324      	adds	r3, #36	@ 0x24
 8002924:	4618      	mov	r0, r3
 8002926:	f000 f9e2 	bl	8002cee <Profile_GetAcceleration>
 800292a:	eef0 7a40 	vmov.f32	s15, s0
 800292e:	eef0 1a67 	vmov.f32	s3, s15
 8002932:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 8002950 <Motion_StopAfter+0x54>
 8002936:	eef0 0a48 	vmov.f32	s1, s16
 800293a:	ed97 0a00 	vldr	s0, [r7]
 800293e:	4620      	mov	r0, r4
 8002940:	f000 f96e 	bl	8002c20 <Profile_Move>
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	ecbd 8b02 	vpop	{d8}
 800294e:	bd90      	pop	{r4, r7, pc}
	...

08002958 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm > PWM_MAX)
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fd fe10 	bl	8000588 <__aeabi_f2d>
 8002968:	a313      	add	r3, pc, #76	@ (adr r3, 80029b8 <limitPWM+0x60>)
 800296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296e:	f7fe f8f3 	bl	8000b58 <__aeabi_dcmpgt>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <limitPWM+0x24>
		return PWM_MAX;
 8002978:	4b0d      	ldr	r3, [pc, #52]	@ (80029b0 <limitPWM+0x58>)
 800297a:	e00d      	b.n	8002998 <limitPWM+0x40>
	else if (pwm < -PWM_MAX)
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7fd fe03 	bl	8000588 <__aeabi_f2d>
 8002982:	a309      	add	r3, pc, #36	@ (adr r3, 80029a8 <limitPWM+0x50>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	f7fe f8c8 	bl	8000b1c <__aeabi_dcmplt>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <limitPWM+0x3e>
		return -PWM_MAX;
 8002992:	4b08      	ldr	r3, [pc, #32]	@ (80029b4 <limitPWM+0x5c>)
 8002994:	e000      	b.n	8002998 <limitPWM+0x40>
	return pwm;
 8002996:	687b      	ldr	r3, [r7, #4]
}
 8002998:	ee07 3a90 	vmov	s15, r3
 800299c:	eeb0 0a67 	vmov.f32	s0, s15
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	70a3d70a 	.word	0x70a3d70a
 80029ac:	bfef0a3d 	.word	0xbfef0a3d
 80029b0:	3f7851ec 	.word	0x3f7851ec
 80029b4:	bf7851ec 	.word	0xbf7851ec
 80029b8:	70a3d70a 	.word	0x70a3d70a
 80029bc:	3fef0a3d 	.word	0x3fef0a3d

080029c0 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 80029ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80029ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d6:	db13      	blt.n	8002a00 <setMotorLPWM+0x40>
		TIM3->CCR4 = 0;
 80029d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a44 <setMotorLPWM+0x84>)
 80029da:	2200      	movs	r2, #0
 80029dc:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80029de:	ed97 0a01 	vldr	s0, [r7, #4]
 80029e2:	f7ff ffb9 	bl	8002958 <limitPWM>
 80029e6:	eef0 7a40 	vmov.f32	s15, s0
 80029ea:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002a48 <setMotorLPWM+0x88>
 80029ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f2:	4b14      	ldr	r3, [pc, #80]	@ (8002a44 <setMotorLPWM+0x84>)
 80029f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029f8:	ee17 2a90 	vmov	r2, s15
 80029fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else if (pwm < 0) {
		TIM3->CCR3 = 0;
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 80029fe:	e01c      	b.n	8002a3a <setMotorLPWM+0x7a>
	else if (pwm < 0) {
 8002a00:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0c:	d400      	bmi.n	8002a10 <setMotorLPWM+0x50>
}
 8002a0e:	e014      	b.n	8002a3a <setMotorLPWM+0x7a>
		TIM3->CCR3 = 0;
 8002a10:	4b0c      	ldr	r3, [pc, #48]	@ (8002a44 <setMotorLPWM+0x84>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002a16:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a1a:	f7ff ff9d 	bl	8002958 <limitPWM>
 8002a1e:	eef0 7a40 	vmov.f32	s15, s0
 8002a22:	eef1 7a67 	vneg.f32	s15, s15
 8002a26:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002a48 <setMotorLPWM+0x88>
 8002a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2e:	4b05      	ldr	r3, [pc, #20]	@ (8002a44 <setMotorLPWM+0x84>)
 8002a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a34:	ee17 2a90 	vmov	r2, s15
 8002a38:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40000400 	.word	0x40000400
 8002a48:	45e0f800 	.word	0x45e0f800

08002a4c <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 8002a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a62:	db13      	blt.n	8002a8c <setMotorRPWM+0x40>
		TIM3->CCR2 = 0;
 8002a64:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad0 <setMotorRPWM+0x84>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR1 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002a6a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a6e:	f7ff ff73 	bl	8002958 <limitPWM>
 8002a72:	eef0 7a40 	vmov.f32	s15, s0
 8002a76:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002ad4 <setMotorRPWM+0x88>
 8002a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a7e:	4b14      	ldr	r3, [pc, #80]	@ (8002ad0 <setMotorRPWM+0x84>)
 8002a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a84:	ee17 2a90 	vmov	r2, s15
 8002a88:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else if (pwm < 0) {
		TIM3->CCR1 = 0;
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 8002a8a:	e01c      	b.n	8002ac6 <setMotorRPWM+0x7a>
	else if (pwm < 0) {
 8002a8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a98:	d400      	bmi.n	8002a9c <setMotorRPWM+0x50>
}
 8002a9a:	e014      	b.n	8002ac6 <setMotorRPWM+0x7a>
		TIM3->CCR1 = 0;
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <setMotorRPWM+0x84>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002aa2:	ed97 0a01 	vldr	s0, [r7, #4]
 8002aa6:	f7ff ff57 	bl	8002958 <limitPWM>
 8002aaa:	eef0 7a40 	vmov.f32	s15, s0
 8002aae:	eef1 7a67 	vneg.f32	s15, s15
 8002ab2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002ad4 <setMotorRPWM+0x88>
 8002ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aba:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <setMotorRPWM+0x84>)
 8002abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ac0:	ee17 2a90 	vmov	r2, s15
 8002ac4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40000400 	.word	0x40000400
 8002ad4:	45e0f800 	.word	0x45e0f800

08002ad8 <Profile_Reset>:
#include "ssd1306.h"
#include "fonts.h"
#include <stdio.h>

// Reset the profile
void Profile_Reset(Profile *profile) {
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
    profile->position = 0;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
    profile->speed = 0;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	605a      	str	r2, [r3, #4]
    profile->target_speed = 0;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	619a      	str	r2, [r3, #24]
    profile->state = PS_IDLE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <Profile_Start>:
uint8_t Profile_IsFinished(const Profile *profile) {
    return profile->state == PS_FINISHED;
}

// Start a profile
void Profile_Start(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 8002b0a:	b480      	push	{r7}
 8002b0c:	b087      	sub	sp, #28
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6178      	str	r0, [r7, #20]
 8002b12:	ed87 0a04 	vstr	s0, [r7, #16]
 8002b16:	edc7 0a03 	vstr	s1, [r7, #12]
 8002b1a:	ed87 1a02 	vstr	s2, [r7, #8]
 8002b1e:	edc7 1a01 	vstr	s3, [r7, #4]
    profile->sign = (distance < 0) ? -1 : 1;
 8002b22:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2e:	d502      	bpl.n	8002b36 <Profile_Start+0x2c>
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295
 8002b34:	e000      	b.n	8002b38 <Profile_Start+0x2e>
 8002b36:	2201      	movs	r2, #1
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	731a      	strb	r2, [r3, #12]
    if (distance < 0) distance = -distance;
 8002b3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b48:	d505      	bpl.n	8002b56 <Profile_Start+0x4c>
 8002b4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b4e:	eef1 7a67 	vneg.f32	s15, s15
 8002b52:	edc7 7a04 	vstr	s15, [r7, #16]

    if (distance < 1.0f) {
 8002b56:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b66:	d503      	bpl.n	8002b70 <Profile_Start+0x66>
        profile->state = PS_FINISHED;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	701a      	strb	r2, [r3, #0]
        return;
 8002b6e:	e052      	b.n	8002c16 <Profile_Start+0x10c>
    }

    if (final_speed > top_speed) {
 8002b70:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b80:	dd01      	ble.n	8002b86 <Profile_Start+0x7c>
        final_speed = top_speed;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	60bb      	str	r3, [r7, #8]
    }

    profile->position = 0;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
    profile->final_position = distance;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	621a      	str	r2, [r3, #32]
    profile->target_speed = profile->sign * fabsf(top_speed);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ba2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ba6:	eef0 7ae7 	vabs.f32	s15, s15
 8002baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	edc3 7a06 	vstr	s15, [r3, #24]
    profile->final_speed = profile->sign * fabsf(final_speed);
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bc6:	eef0 7ae7 	vabs.f32	s15, s15
 8002bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	edc3 7a07 	vstr	s15, [r3, #28]
    profile->acceleration = fabsf(acceleration);
 8002bd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bd8:	eef0 7ae7 	vabs.f32	s15, s15
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->one_over_acc = (profile->acceleration >= 1) ? (1.0f / profile->acceleration) : 1.0f;
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002be8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf4:	db07      	blt.n	8002c06 <Profile_Start+0xfc>
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	ed93 7a04 	vldr	s14, [r3, #16]
 8002bfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c04:	e001      	b.n	8002c0a <Profile_Start+0x100>
 8002c06:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->state = PS_ACCELERATING;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
}
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <Profile_Move>:

// Move a profile (blocking call)
void Profile_Move(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6178      	str	r0, [r7, #20]
 8002c28:	ed87 0a04 	vstr	s0, [r7, #16]
 8002c2c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002c30:	ed87 1a02 	vstr	s2, [r7, #8]
 8002c34:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Start(profile, distance, top_speed, final_speed, acceleration);
 8002c38:	edd7 1a01 	vldr	s3, [r7, #4]
 8002c3c:	ed97 1a02 	vldr	s2, [r7, #8]
 8002c40:	edd7 0a03 	vldr	s1, [r7, #12]
 8002c44:	ed97 0a04 	vldr	s0, [r7, #16]
 8002c48:	6978      	ldr	r0, [r7, #20]
 8002c4a:	f7ff ff5e 	bl	8002b0a <Profile_Start>
    Profile_WaitUntilFinished(profile);
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f000 f804 	bl	8002c5c <Profile_WaitUntilFinished>
}
 8002c54:	bf00      	nop
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <Profile_WaitUntilFinished>:
    profile->speed = profile->target_speed;
    profile->state = PS_FINISHED;
}

// Wait until the profile finishes
void Profile_WaitUntilFinished(Profile *profile) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
    while (profile->state != PS_FINISHED) {
 8002c64:	e002      	b.n	8002c6c <Profile_WaitUntilFinished+0x10>
        HAL_Delay(2);
 8002c66:	2002      	movs	r0, #2
 8002c68:	f002 fa8a 	bl	8005180 <HAL_Delay>
    while (profile->state != PS_FINISHED) {
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d1f7      	bne.n	8002c66 <Profile_WaitUntilFinished+0xa>
    }
}
 8002c76:	bf00      	nop
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <Profile_GetBrakingDistance>:

// Get the braking distance
float Profile_GetBrakingDistance(const Profile *profile) {
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
    return fabsf(profile->speed * profile->speed - profile->final_speed * profile->final_speed) * 0.5f * profile->one_over_acc;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	edd3 6a07 	vldr	s13, [r3, #28]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cac:	eef0 7ae7 	vabs.f32	s15, s15
 8002cb0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002cb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <Profile_GetSpeed>:
float Profile_GetPosition(const Profile *profile) {
    return profile->position;
}

// Get the current speed
float Profile_GetSpeed(const Profile *profile) {
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
    return profile->speed;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	ee07 3a90 	vmov	s15, r3
}
 8002ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <Profile_GetAcceleration>:

// Get the current acceleration
float Profile_GetAcceleration(const Profile *profile) {
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
    return profile->acceleration;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	ee07 3a90 	vmov	s15, r3
}
 8002cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <Profile_SetTargetSpeed>:
void Profile_SetSpeed(Profile *profile, float speed) {
    profile->speed = speed;
}

// Set the target speed
void Profile_SetTargetSpeed(Profile *profile, float speed) {
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	ed87 0a00 	vstr	s0, [r7]
    profile->target_speed = speed;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	619a      	str	r2, [r3, #24]
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <Profile_Update>:
void Profile_SetPosition(Profile *profile, float position) {
    profile->position = position;
}

// Update the profile
void Profile_Update(Profile *profile) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
    if (profile->state == PS_IDLE) return;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 80b5 	beq.w	8002eaa <Profile_Update+0x17e>

    float delta_v = profile->acceleration * LOOP_INTERVAL;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	ed93 7a04 	vldr	s14, [r3, #16]
 8002d46:	4b5b      	ldr	r3, [pc, #364]	@ (8002eb4 <Profile_Update+0x188>)
 8002d48:	edd3 7a00 	vldr	s15, [r3]
 8002d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d50:	edc7 7a03 	vstr	s15, [r7, #12]
    float remaining = fabsf(profile->final_position) - fabsf(profile->position);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d5a:	eeb0 7ae7 	vabs.f32	s14, s15
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d64:	eef0 7ae7 	vabs.f32	s15, s15
 8002d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d6c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (profile->state == PS_ACCELERATING) {
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d128      	bne.n	8002dcc <Profile_Update+0xa0>
        if (remaining < Profile_GetBrakingDistance(profile)) {
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ff80 	bl	8002c80 <Profile_GetBrakingDistance>
 8002d80:	eeb0 7a40 	vmov.f32	s14, s0
 8002d84:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d90:	d51c      	bpl.n	8002dcc <Profile_Update+0xa0>
            profile->state = PS_BRAKING;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2202      	movs	r2, #2
 8002d96:	701a      	strb	r2, [r3, #0]
            profile->target_speed = (profile->final_speed == 0) ? (profile->sign * 5.0f) : profile->final_speed;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da6:	d10b      	bne.n	8002dc0 <Profile_Update+0x94>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002dae:	ee07 3a90 	vmov	s15, r3
 8002db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002db6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dbe:	e002      	b.n	8002dc6 <Profile_Update+0x9a>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	edd3 7a07 	vldr	s15, [r3, #28]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	edc3 7a06 	vstr	s15, [r3, #24]
        }
    }

    if (profile->speed < profile->target_speed) {
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	edd3 7a06 	vldr	s15, [r3, #24]
 8002dd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de0:	d519      	bpl.n	8002e16 <Profile_Update+0xea>
        profile->speed += delta_v;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	ed93 7a01 	vldr	s14, [r3, #4]
 8002de8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed > profile->target_speed) profile->speed = profile->target_speed;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0a:	dd28      	ble.n	8002e5e <Profile_Update+0x132>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699a      	ldr	r2, [r3, #24]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	e023      	b.n	8002e5e <Profile_Update+0x132>
    } else if (profile->speed > profile->target_speed) {
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2a:	dd18      	ble.n	8002e5e <Profile_Update+0x132>
        profile->speed -= delta_v;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e32:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed < profile->target_speed) profile->speed = profile->target_speed;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e54:	d503      	bpl.n	8002e5e <Profile_Update+0x132>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	605a      	str	r2, [r3, #4]
    }

    profile->position += profile->speed * LOOP_INTERVAL;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e64:	4b13      	ldr	r3, [pc, #76]	@ (8002eb4 <Profile_Update+0x188>)
 8002e66:	edd3 7a00 	vldr	s15, [r3]
 8002e6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	edc3 7a02 	vstr	s15, [r3, #8]

    if (profile->state != PS_FINISHED && remaining < 0.125f) {
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d011      	beq.n	8002eac <Profile_Update+0x180>
 8002e88:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e8c:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8002e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e98:	d508      	bpl.n	8002eac <Profile_Update+0x180>
        profile->state = PS_FINISHED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	701a      	strb	r2, [r3, #0]
        profile->target_speed = profile->final_speed;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69da      	ldr	r2, [r3, #28]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	619a      	str	r2, [r3, #24]
 8002ea8:	e000      	b.n	8002eac <Profile_Update+0x180>
    if (profile->state == PS_IDLE) return;
 8002eaa:	bf00      	nop
    }

}
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	0800d790 	.word	0x0800d790

08002eb8 <RAYKHA_ReadRaw>:
/**
 * @brief Read raw values from all sensors
 * @param sensor_values Array to store the raw sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 */
void RAYKHA_ReadRaw(uint16_t *sensor_values)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
    // Read each sensor
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73fb      	strb	r3, [r7, #15]
 8002ec4:	e00c      	b.n	8002ee0 <RAYKHA_ReadRaw+0x28>
    {
        sensor_values[i] = AnalogMux_ReadChannel(RAYKHA_FIRST_MUX_CHANNEL + i);
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	18d4      	adds	r4, r2, r3
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f001 fd0d 	bl	80048f0 <AnalogMux_ReadChannel>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	3301      	adds	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	2b09      	cmp	r3, #9
 8002ee4:	d9ef      	bls.n	8002ec6 <RAYKHA_ReadRaw+0xe>
    }
}
 8002ee6:	bf00      	nop
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd90      	pop	{r4, r7, pc}

08002ef0 <RAYKHA_ReadCalibrated>:
 * @brief Read calibrated values from all sensors
 * @param sensor_values Array to store the calibrated sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 * @param calibration Pointer to calibration data structure
 */
void RAYKHA_ReadCalibrated(uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8002ef0:	b5b0      	push	{r4, r5, r7, lr}
 8002ef2:	b08a      	sub	sp, #40	@ 0x28
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
    uint16_t raw_values[RAYKHA_NUM_SENSORS];

    // Read raw values
    RAYKHA_ReadRaw(raw_values);
 8002efa:	f107 0308 	add.w	r3, r7, #8
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff ffda 	bl	8002eb8 <RAYKHA_ReadRaw>

    // Apply calibration
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002f04:	2300      	movs	r3, #0
 8002f06:	77fb      	strb	r3, [r7, #31]
 8002f08:	e05a      	b.n	8002fc0 <RAYKHA_ReadCalibrated+0xd0>
    {
        if (raw_values[i] < calibration->min_values[i])
 8002f0a:	7ffb      	ldrb	r3, [r7, #31]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	3320      	adds	r3, #32
 8002f10:	443b      	add	r3, r7
 8002f12:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002f16:	7ff9      	ldrb	r1, [r7, #31]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d206      	bcs.n	8002f30 <RAYKHA_ReadCalibrated+0x40>
        {
            sensor_values[i] = 0;
 8002f22:	7ffb      	ldrb	r3, [r7, #31]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	801a      	strh	r2, [r3, #0]
 8002f2e:	e044      	b.n	8002fba <RAYKHA_ReadCalibrated+0xca>
        }
        else if (raw_values[i] > calibration->max_values[i])
 8002f30:	7ffb      	ldrb	r3, [r7, #31]
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	3320      	adds	r3, #32
 8002f36:	443b      	add	r3, r7
 8002f38:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002f3c:	7ffb      	ldrb	r3, [r7, #31]
 8002f3e:	6839      	ldr	r1, [r7, #0]
 8002f40:	3308      	adds	r3, #8
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	440b      	add	r3, r1
 8002f46:	889b      	ldrh	r3, [r3, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d907      	bls.n	8002f5c <RAYKHA_ReadCalibrated+0x6c>
        {
            sensor_values[i] = 1000;
 8002f4c:	7ffb      	ldrb	r3, [r7, #31]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f58:	801a      	strh	r2, [r3, #0]
 8002f5a:	e02e      	b.n	8002fba <RAYKHA_ReadCalibrated+0xca>
        }
        else
        {
            // Map to 0-1000 range
            sensor_values[i] = map_range(raw_values[i],
 8002f5c:	7ffb      	ldrb	r3, [r7, #31]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	3320      	adds	r3, #32
 8002f62:	443b      	add	r3, r7
 8002f64:	f833 0c18 	ldrh.w	r0, [r3, #-24]
 8002f68:	7ffa      	ldrb	r2, [r7, #31]
                                        calibration->min_values[i],
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
            sensor_values[i] = map_range(raw_values[i],
 8002f70:	7ffb      	ldrb	r3, [r7, #31]
                                        calibration->max_values[i],
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	3308      	adds	r3, #8
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	889d      	ldrh	r5, [r3, #4]
            sensor_values[i] = map_range(raw_values[i],
 8002f7c:	7ffb      	ldrb	r3, [r7, #31]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	18d4      	adds	r4, r2, r3
 8002f84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	462a      	mov	r2, r5
 8002f8e:	f000 f879 	bl	8003084 <map_range>
 8002f92:	4603      	mov	r3, r0
 8002f94:	8023      	strh	r3, [r4, #0]
                                        0, 1000);

		// Invert if needed (for white line on black background)
		if (calibration->line_type == RAYKHA_LINE_WHITE)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d10c      	bne.n	8002fba <RAYKHA_ReadCalibrated+0xca>
		{
			sensor_values[i] = 1000 - sensor_values[i];
 8002fa0:	7ffb      	ldrb	r3, [r7, #31]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	881a      	ldrh	r2, [r3, #0]
 8002faa:	7ffb      	ldrb	r3, [r7, #31]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	440b      	add	r3, r1
 8002fb2:	f5c2 727a 	rsb	r2, r2, #1000	@ 0x3e8
 8002fb6:	b292      	uxth	r2, r2
 8002fb8:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002fba:	7ffb      	ldrb	r3, [r7, #31]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	7ffb      	ldrb	r3, [r7, #31]
 8002fc2:	2b09      	cmp	r3, #9
 8002fc4:	d9a1      	bls.n	8002f0a <RAYKHA_ReadCalibrated+0x1a>
		}
        }
    }
}
 8002fc6:	bf00      	nop
 8002fc8:	bf00      	nop
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bdb0      	pop	{r4, r5, r7, pc}

08002fd0 <RAYKHA_GetLinePosition>:
 * @param calibration Pointer to calibration data structure
 * @return Line position (0 to 7000, where 0 is the leftmost sensor and 7000 is the rightmost sensor)
 *         Returns -1 if no line is detected
 */
int32_t RAYKHA_GetLinePosition(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
    uint32_t weighted_sum = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
    uint32_t sum = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
    uint8_t line_detected = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]

    // Calculate weighted average
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73bb      	strb	r3, [r7, #14]
 8002fea:	e01c      	b.n	8003026 <RAYKHA_GetLinePosition+0x56>
    {
        uint16_t value = sensor_values[i];
 8002fec:	7bbb      	ldrb	r3, [r7, #14]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	81bb      	strh	r3, [r7, #12]

        // A value above 200 indicates a line
        if (value > 200)
 8002ff8:	89bb      	ldrh	r3, [r7, #12]
 8002ffa:	2bc8      	cmp	r3, #200	@ 0xc8
 8002ffc:	d901      	bls.n	8003002 <RAYKHA_GetLinePosition+0x32>
        {
            line_detected = 1;
 8002ffe:	2301      	movs	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
        }

        weighted_sum += (uint32_t)value * (i * 1000);
 8003002:	89bb      	ldrh	r3, [r7, #12]
 8003004:	7bba      	ldrb	r2, [r7, #14]
 8003006:	fb02 f303 	mul.w	r3, r2, r3
 800300a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4413      	add	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
        sum += value;
 8003018:	89bb      	ldrh	r3, [r7, #12]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4413      	add	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8003020:	7bbb      	ldrb	r3, [r7, #14]
 8003022:	3301      	adds	r3, #1
 8003024:	73bb      	strb	r3, [r7, #14]
 8003026:	7bbb      	ldrb	r3, [r7, #14]
 8003028:	2b09      	cmp	r3, #9
 800302a:	d9df      	bls.n	8002fec <RAYKHA_GetLinePosition+0x1c>
    }

    // Check if line is detected
    if (!line_detected || sum < 100)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <RAYKHA_GetLinePosition+0x68>
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b63      	cmp	r3, #99	@ 0x63
 8003036:	d802      	bhi.n	800303e <RAYKHA_GetLinePosition+0x6e>
    {
        return -1;
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
 800303c:	e003      	b.n	8003046 <RAYKHA_GetLinePosition+0x76>
    }

    return weighted_sum / sum;
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003046:	4618      	mov	r0, r3
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <RAYKHA_GetPositionForPID>:
 * @param calibration Pointer to calibration data structure
 * @return Line position centered around 0 (-3500 to 3500)
 *         Returns a large value (9999) if no line is detected
 */
int32_t RAYKHA_GetPositionForPID(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	6039      	str	r1, [r7, #0]
    int32_t position = RAYKHA_GetLinePosition(sensor_values, calibration);
 800305c:	6839      	ldr	r1, [r7, #0]
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff ffb6 	bl	8002fd0 <RAYKHA_GetLinePosition>
 8003064:	60f8      	str	r0, [r7, #12]

    // If no line detected, return a large value
    if (position == -1)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d102      	bne.n	8003074 <RAYKHA_GetPositionForPID+0x22>
    {
        return 9999;
 800306e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003072:	e003      	b.n	800307c <RAYKHA_GetPositionForPID+0x2a>
    }

    // Center the position around 0
    // The center of the sensor array is at 3500
    return position - 4500;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f5a3 538c 	sub.w	r3, r3, #4480	@ 0x1180
 800307a:	3b14      	subs	r3, #20
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <map_range>:
 * @param out_min Minimum output value
 * @param out_max Maximum output value
 * @return Mapped value
 */
static uint16_t map_range(uint16_t value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 8003084:	b490      	push	{r4, r7}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	4604      	mov	r4, r0
 800308c:	4608      	mov	r0, r1
 800308e:	4611      	mov	r1, r2
 8003090:	461a      	mov	r2, r3
 8003092:	4623      	mov	r3, r4
 8003094:	80fb      	strh	r3, [r7, #6]
 8003096:	4603      	mov	r3, r0
 8003098:	80bb      	strh	r3, [r7, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	807b      	strh	r3, [r7, #2]
 800309e:	4613      	mov	r3, r2
 80030a0:	803b      	strh	r3, [r7, #0]
    // Check for division by zero
    if (in_max <= in_min) return out_min;
 80030a2:	887a      	ldrh	r2, [r7, #2]
 80030a4:	88bb      	ldrh	r3, [r7, #4]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d801      	bhi.n	80030ae <map_range+0x2a>
 80030aa:	883b      	ldrh	r3, [r7, #0]
 80030ac:	e01d      	b.n	80030ea <map_range+0x66>

    // Map the value
    int32_t result = (int32_t)(value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80030ae:	88fa      	ldrh	r2, [r7, #6]
 80030b0:	88bb      	ldrh	r3, [r7, #4]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	8b39      	ldrh	r1, [r7, #24]
 80030b6:	883a      	ldrh	r2, [r7, #0]
 80030b8:	1a8a      	subs	r2, r1, r2
 80030ba:	fb03 f202 	mul.w	r2, r3, r2
 80030be:	8879      	ldrh	r1, [r7, #2]
 80030c0:	88bb      	ldrh	r3, [r7, #4]
 80030c2:	1acb      	subs	r3, r1, r3
 80030c4:	fb92 f2f3 	sdiv	r2, r2, r3
 80030c8:	883b      	ldrh	r3, [r7, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

    // Constrain the result
    if (result < out_min) result = out_min;
 80030ce:	883b      	ldrh	r3, [r7, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	da01      	bge.n	80030da <map_range+0x56>
 80030d6:	883b      	ldrh	r3, [r7, #0]
 80030d8:	60fb      	str	r3, [r7, #12]
    if (result > out_max) result = out_max;
 80030da:	8b3b      	ldrh	r3, [r7, #24]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	429a      	cmp	r2, r3
 80030e0:	dd01      	ble.n	80030e6 <map_range+0x62>
 80030e2:	8b3b      	ldrh	r3, [r7, #24]
 80030e4:	60fb      	str	r3, [r7, #12]

    return (uint16_t)result;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	b29b      	uxth	r3, r3
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc90      	pop	{r4, r7}
 80030f2:	4770      	bx	lr

080030f4 <Robot_LineFollowUntillJunction>:




//------------------------------------------------------------------------------//
JunctionType Robot_LineFollowUntillJunction(){
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
	set_steering_mode(STEERING_CENTER_LINE_FOLLOW);
 80030f8:	2007      	movs	r0, #7
 80030fa:	f000 faaf 	bl	800365c <set_steering_mode>
	Motion_StartMove(&motion, 1500, LINE_FOLLOW_SPEED, LINE_FOLLOW_SPEED, LINE_FOLLOW_ACCELERATION);
 80030fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003168 <Robot_LineFollowUntillJunction+0x74>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	ee07 3a90 	vmov	s15, r3
 8003106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800310a:	4b17      	ldr	r3, [pc, #92]	@ (8003168 <Robot_LineFollowUntillJunction+0x74>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	ee07 3a10 	vmov	s14, r3
 8003112:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003116:	4b15      	ldr	r3, [pc, #84]	@ (800316c <Robot_LineFollowUntillJunction+0x78>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	ee06 3a90 	vmov	s13, r3
 800311e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003122:	eef0 1a66 	vmov.f32	s3, s13
 8003126:	eeb0 1a47 	vmov.f32	s2, s14
 800312a:	eef0 0a67 	vmov.f32	s1, s15
 800312e:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8003170 <Robot_LineFollowUntillJunction+0x7c>
 8003132:	4810      	ldr	r0, [pc, #64]	@ (8003174 <Robot_LineFollowUntillJunction+0x80>)
 8003134:	f7ff fb47 	bl	80027c6 <Motion_StartMove>
	junction = STRAIGHT_LINE;
 8003138:	4b0f      	ldr	r3, [pc, #60]	@ (8003178 <Robot_LineFollowUntillJunction+0x84>)
 800313a:	2204      	movs	r2, #4
 800313c:	701a      	strb	r2, [r3, #0]
	while(1){
		if(junction != STRAIGHT_LINE){
 800313e:	4b0e      	ldr	r3, [pc, #56]	@ (8003178 <Robot_LineFollowUntillJunction+0x84>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b04      	cmp	r3, #4
 8003144:	d100      	bne.n	8003148 <Robot_LineFollowUntillJunction+0x54>
 8003146:	e7fa      	b.n	800313e <Robot_LineFollowUntillJunction+0x4a>
			break;
 8003148:	bf00      	nop
		}
	}
	set_steering_mode(STEERING_OFF);
 800314a:	2003      	movs	r0, #3
 800314c:	f000 fa86 	bl	800365c <set_steering_mode>
	Motion_StopAfter(&motion, 55);
 8003150:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800317c <Robot_LineFollowUntillJunction+0x88>
 8003154:	4807      	ldr	r0, [pc, #28]	@ (8003174 <Robot_LineFollowUntillJunction+0x80>)
 8003156:	f7ff fbd1 	bl	80028fc <Motion_StopAfter>
	Motion_ResetDriveSystem(&motion);
 800315a:	4806      	ldr	r0, [pc, #24]	@ (8003174 <Robot_LineFollowUntillJunction+0x80>)
 800315c:	f7ff fadb 	bl	8002716 <Motion_ResetDriveSystem>
	return junction;
 8003160:	4b05      	ldr	r3, [pc, #20]	@ (8003178 <Robot_LineFollowUntillJunction+0x84>)
 8003162:	781b      	ldrb	r3, [r3, #0]

}
 8003164:	4618      	mov	r0, r3
 8003166:	bd80      	pop	{r7, pc}
 8003168:	0800d7c4 	.word	0x0800d7c4
 800316c:	0800d7c8 	.word	0x0800d7c8
 8003170:	44bb8000 	.word	0x44bb8000
 8003174:	200005e0 	.word	0x200005e0
 8003178:	20000708 	.word	0x20000708
 800317c:	425c0000 	.word	0x425c0000

08003180 <Robot_MoveForwardUntillLine>:
	//Motion_ResetDriveSystem(&motion);
	//set_steering_mode(STEERING_OFF);
	//Motion_ResetDriveSystem(&motion);
}

JunctionType Robot_MoveForwardUntillLine(){
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
	set_steering_mode(STEERING_OFF_READLINE);
 8003184:	2004      	movs	r0, #4
 8003186:	f000 fa69 	bl	800365c <set_steering_mode>
	Motion_StartMove(&motion, 1500, FORWARD_SPEED_1, 0, FORWARD_ACCELERATION_1);
 800318a:	4b17      	ldr	r3, [pc, #92]	@ (80031e8 <Robot_MoveForwardUntillLine+0x68>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003196:	4b15      	ldr	r3, [pc, #84]	@ (80031ec <Robot_MoveForwardUntillLine+0x6c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	ee07 3a10 	vmov	s14, r3
 800319e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80031a2:	eef0 1a47 	vmov.f32	s3, s14
 80031a6:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 80031f0 <Robot_MoveForwardUntillLine+0x70>
 80031aa:	eef0 0a67 	vmov.f32	s1, s15
 80031ae:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80031f4 <Robot_MoveForwardUntillLine+0x74>
 80031b2:	4811      	ldr	r0, [pc, #68]	@ (80031f8 <Robot_MoveForwardUntillLine+0x78>)
 80031b4:	f7ff fb07 	bl	80027c6 <Motion_StartMove>
	junction = NO_LINE;
 80031b8:	4b10      	ldr	r3, [pc, #64]	@ (80031fc <Robot_MoveForwardUntillLine+0x7c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
	while(1){
		if(junction != NO_LINE){
 80031be:	4b0f      	ldr	r3, [pc, #60]	@ (80031fc <Robot_MoveForwardUntillLine+0x7c>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d100      	bne.n	80031c8 <Robot_MoveForwardUntillLine+0x48>
 80031c6:	e7fa      	b.n	80031be <Robot_MoveForwardUntillLine+0x3e>
			break;
 80031c8:	bf00      	nop
		}
	}
	set_steering_mode(STEERING_OFF);
 80031ca:	2003      	movs	r0, #3
 80031cc:	f000 fa46 	bl	800365c <set_steering_mode>
	Motion_StopAfter(&motion, 60);
 80031d0:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8003200 <Robot_MoveForwardUntillLine+0x80>
 80031d4:	4808      	ldr	r0, [pc, #32]	@ (80031f8 <Robot_MoveForwardUntillLine+0x78>)
 80031d6:	f7ff fb91 	bl	80028fc <Motion_StopAfter>
	Motion_ResetDriveSystem(&motion);
 80031da:	4807      	ldr	r0, [pc, #28]	@ (80031f8 <Robot_MoveForwardUntillLine+0x78>)
 80031dc:	f7ff fa9b 	bl	8002716 <Motion_ResetDriveSystem>
	return junction;
 80031e0:	4b06      	ldr	r3, [pc, #24]	@ (80031fc <Robot_MoveForwardUntillLine+0x7c>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	0800d7cc 	.word	0x0800d7cc
 80031ec:	0800d7d0 	.word	0x0800d7d0
 80031f0:	00000000 	.word	0x00000000
 80031f4:	44bb8000 	.word	0x44bb8000
 80031f8:	200005e0 	.word	0x200005e0
 80031fc:	20000708 	.word	0x20000708
 8003200:	42700000 	.word	0x42700000

08003204 <Robot_MoveForwardGivenDistance>:

void Robot_MoveForwardGivenDistance(int distnace){
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	set_steering_mode(STEERING_OFF);
 800320c:	2003      	movs	r0, #3
 800320e:	f000 fa25 	bl	800365c <set_steering_mode>
	Motion_Move(&motion, distnace, FORWARD_SPEED_1, 0, FORWARD_ACCELERATION_1);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800321c:	4b0e      	ldr	r3, [pc, #56]	@ (8003258 <Robot_MoveForwardGivenDistance+0x54>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	ee07 3a10 	vmov	s14, r3
 8003224:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003228:	4b0c      	ldr	r3, [pc, #48]	@ (800325c <Robot_MoveForwardGivenDistance+0x58>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	ee06 3a90 	vmov	s13, r3
 8003230:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003234:	eef0 1a66 	vmov.f32	s3, s13
 8003238:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8003260 <Robot_MoveForwardGivenDistance+0x5c>
 800323c:	eef0 0a47 	vmov.f32	s1, s14
 8003240:	eeb0 0a67 	vmov.f32	s0, s15
 8003244:	4807      	ldr	r0, [pc, #28]	@ (8003264 <Robot_MoveForwardGivenDistance+0x60>)
 8003246:	f7ff fadb 	bl	8002800 <Motion_Move>
	Motion_ResetDriveSystem(&motion);
 800324a:	4806      	ldr	r0, [pc, #24]	@ (8003264 <Robot_MoveForwardGivenDistance+0x60>)
 800324c:	f7ff fa63 	bl	8002716 <Motion_ResetDriveSystem>
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	0800d7cc 	.word	0x0800d7cc
 800325c:	0800d7d0 	.word	0x0800d7d0
 8003260:	00000000 	.word	0x00000000
 8003264:	200005e0 	.word	0x200005e0

08003268 <Robot_MoveReverseGivenDistance>:
	set_steering_mode(STEERING_OFF);
	Motion_Move(&motion, 1 * distnace, FORWARD_SPEED_2, 0, FORWARD_ACCELERATION_2);
	Motion_ResetDriveSystem(&motion);
}

void Robot_MoveReverseGivenDistance(int distnace){
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	set_steering_mode(STEERING_OFF);
 8003270:	2003      	movs	r0, #3
 8003272:	f000 f9f3 	bl	800365c <set_steering_mode>
	Motion_Move(&motion, -1 * distnace, FORWARD_SPEED_1, 0, FORWARD_ACCELERATION_1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	425b      	negs	r3, r3
 800327a:	ee07 3a90 	vmov	s15, r3
 800327e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003282:	4b0f      	ldr	r3, [pc, #60]	@ (80032c0 <Robot_MoveReverseGivenDistance+0x58>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	ee07 3a10 	vmov	s14, r3
 800328a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800328e:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <Robot_MoveReverseGivenDistance+0x5c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	ee06 3a90 	vmov	s13, r3
 8003296:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800329a:	eef0 1a66 	vmov.f32	s3, s13
 800329e:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 80032c8 <Robot_MoveReverseGivenDistance+0x60>
 80032a2:	eef0 0a47 	vmov.f32	s1, s14
 80032a6:	eeb0 0a67 	vmov.f32	s0, s15
 80032aa:	4808      	ldr	r0, [pc, #32]	@ (80032cc <Robot_MoveReverseGivenDistance+0x64>)
 80032ac:	f7ff faa8 	bl	8002800 <Motion_Move>
	Motion_ResetDriveSystem(&motion);
 80032b0:	4806      	ldr	r0, [pc, #24]	@ (80032cc <Robot_MoveReverseGivenDistance+0x64>)
 80032b2:	f7ff fa30 	bl	8002716 <Motion_ResetDriveSystem>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	0800d7cc 	.word	0x0800d7cc
 80032c4:	0800d7d0 	.word	0x0800d7d0
 80032c8:	00000000 	.word	0x00000000
 80032cc:	200005e0 	.word	0x200005e0

080032d0 <Robot_TurnRight90Inplace>:

void Robot_TurnRight90Inplace(){
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
	HAL_Delay(MOTION_DELAY);
 80032d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003314 <Robot_TurnRight90Inplace+0x44>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f001 ff51 	bl	8005180 <HAL_Delay>
	Motion_SpinTurn(&motion, -88.5, SPIN_TURN_OMEGA, SPIN_TURN_ALPHA);
 80032de:	4b0e      	ldr	r3, [pc, #56]	@ (8003318 <Robot_TurnRight90Inplace+0x48>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	ee07 3a90 	vmov	s15, r3
 80032e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ea:	4b0c      	ldr	r3, [pc, #48]	@ (800331c <Robot_TurnRight90Inplace+0x4c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	ee07 3a10 	vmov	s14, r3
 80032f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80032f6:	eeb0 1a47 	vmov.f32	s2, s14
 80032fa:	eef0 0a67 	vmov.f32	s1, s15
 80032fe:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003320 <Robot_TurnRight90Inplace+0x50>
 8003302:	4808      	ldr	r0, [pc, #32]	@ (8003324 <Robot_TurnRight90Inplace+0x54>)
 8003304:	f7ff faca 	bl	800289c <Motion_SpinTurn>


	Motion_ResetDriveSystem(&motion);
 8003308:	4806      	ldr	r0, [pc, #24]	@ (8003324 <Robot_TurnRight90Inplace+0x54>)
 800330a:	f7ff fa04 	bl	8002716 <Motion_ResetDriveSystem>
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	0800d7e4 	.word	0x0800d7e4
 8003318:	0800d7d4 	.word	0x0800d7d4
 800331c:	0800d7d8 	.word	0x0800d7d8
 8003320:	c2b10000 	.word	0xc2b10000
 8003324:	200005e0 	.word	0x200005e0

08003328 <robot_TurnRight180Inplace>:

void robot_TurnRight180Inplace(){
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
	HAL_Delay(MOTION_DELAY);
 800332c:	4b0f      	ldr	r3, [pc, #60]	@ (800336c <robot_TurnRight180Inplace+0x44>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f001 ff25 	bl	8005180 <HAL_Delay>
	Motion_SpinTurn(&motion, -180, SPIN_TURN_OMEGA, SPIN_TURN_ALPHA);
 8003336:	4b0e      	ldr	r3, [pc, #56]	@ (8003370 <robot_TurnRight180Inplace+0x48>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003342:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <robot_TurnRight180Inplace+0x4c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	ee07 3a10 	vmov	s14, r3
 800334a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800334e:	eeb0 1a47 	vmov.f32	s2, s14
 8003352:	eef0 0a67 	vmov.f32	s1, s15
 8003356:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8003378 <robot_TurnRight180Inplace+0x50>
 800335a:	4808      	ldr	r0, [pc, #32]	@ (800337c <robot_TurnRight180Inplace+0x54>)
 800335c:	f7ff fa9e 	bl	800289c <Motion_SpinTurn>


	Motion_ResetDriveSystem(&motion);
 8003360:	4806      	ldr	r0, [pc, #24]	@ (800337c <robot_TurnRight180Inplace+0x54>)
 8003362:	f7ff f9d8 	bl	8002716 <Motion_ResetDriveSystem>
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	0800d7e4 	.word	0x0800d7e4
 8003370:	0800d7d4 	.word	0x0800d7d4
 8003374:	0800d7d8 	.word	0x0800d7d8
 8003378:	c3340000 	.word	0xc3340000
 800337c:	200005e0 	.word	0x200005e0

08003380 <Robot_TurnLeft90Inplace>:


	Motion_ResetDriveSystem(&motion);
}

void Robot_TurnLeft90Inplace(){
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
	HAL_Delay(MOTION_DELAY);
 8003384:	4b11      	ldr	r3, [pc, #68]	@ (80033cc <Robot_TurnLeft90Inplace+0x4c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f001 fef9 	bl	8005180 <HAL_Delay>
	Motion_SpinTurn(&motion, 86, SPIN_TURN_OMEGA, SPIN_TURN_ALPHA);
 800338e:	4b10      	ldr	r3, [pc, #64]	@ (80033d0 <Robot_TurnLeft90Inplace+0x50>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800339a:	4b0e      	ldr	r3, [pc, #56]	@ (80033d4 <Robot_TurnLeft90Inplace+0x54>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	ee07 3a10 	vmov	s14, r3
 80033a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80033a6:	eeb0 1a47 	vmov.f32	s2, s14
 80033aa:	eef0 0a67 	vmov.f32	s1, s15
 80033ae:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80033d8 <Robot_TurnLeft90Inplace+0x58>
 80033b2:	480a      	ldr	r0, [pc, #40]	@ (80033dc <Robot_TurnLeft90Inplace+0x5c>)
 80033b4:	f7ff fa72 	bl	800289c <Motion_SpinTurn>


	Motion_ResetDriveSystem(&motion);
 80033b8:	4808      	ldr	r0, [pc, #32]	@ (80033dc <Robot_TurnLeft90Inplace+0x5c>)
 80033ba:	f7ff f9ac 	bl	8002716 <Motion_ResetDriveSystem>
	HAL_Delay(MOTION_DELAY);
 80033be:	4b03      	ldr	r3, [pc, #12]	@ (80033cc <Robot_TurnLeft90Inplace+0x4c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f001 fedc 	bl	8005180 <HAL_Delay>
}
 80033c8:	bf00      	nop
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	0800d7e4 	.word	0x0800d7e4
 80033d0:	0800d7d4 	.word	0x0800d7d4
 80033d4:	0800d7d8 	.word	0x0800d7d8
 80033d8:	42ac0000 	.word	0x42ac0000
 80033dc:	200005e0 	.word	0x200005e0

080033e0 <Robot_moveForwardUntillBox>:

	set_steering_mode(STEERING_OFF);
	Motion_ResetDriveSystem(&motion);
}

int Robot_moveForwardUntillBox(uint16_t input_distance){
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	80fb      	strh	r3, [r7, #6]
	
	set_steering_mode(STEERING_OFF_READIR);
 80033ea:	2005      	movs	r0, #5
 80033ec:	f000 f936 	bl	800365c <set_steering_mode>
	   Motion_StartMove(&motion, input_distance, FORWARD_SPEED_1, 0, FORWARD_ACCELERATION_1);
 80033f0:	88fb      	ldrh	r3, [r7, #6]
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003470 <Robot_moveForwardUntillBox+0x90>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	ee07 3a10 	vmov	s14, r3
 8003402:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003406:	4b1b      	ldr	r3, [pc, #108]	@ (8003474 <Robot_moveForwardUntillBox+0x94>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	ee06 3a90 	vmov	s13, r3
 800340e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003412:	eef0 1a66 	vmov.f32	s3, s13
 8003416:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 8003478 <Robot_moveForwardUntillBox+0x98>
 800341a:	eef0 0a47 	vmov.f32	s1, s14
 800341e:	eeb0 0a67 	vmov.f32	s0, s15
 8003422:	4816      	ldr	r0, [pc, #88]	@ (800347c <Robot_moveForwardUntillBox+0x9c>)
 8003424:	f7ff f9cf 	bl	80027c6 <Motion_StartMove>
	   see_box = 0;
 8003428:	4b15      	ldr	r3, [pc, #84]	@ (8003480 <Robot_moveForwardUntillBox+0xa0>)
 800342a:	2200      	movs	r2, #0
 800342c:	701a      	strb	r2, [r3, #0]
	   while(!see_box){
 800342e:	bf00      	nop
 8003430:	4b13      	ldr	r3, [pc, #76]	@ (8003480 <Robot_moveForwardUntillBox+0xa0>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0fa      	beq.n	8003430 <Robot_moveForwardUntillBox+0x50>
	   }
	   set_steering_mode(STEERING_OFF);
 800343a:	2003      	movs	r0, #3
 800343c:	f000 f90e 	bl	800365c <set_steering_mode>
	   Motion_StopAfter(&motion, 80);
 8003440:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8003484 <Robot_moveForwardUntillBox+0xa4>
 8003444:	480d      	ldr	r0, [pc, #52]	@ (800347c <Robot_moveForwardUntillBox+0x9c>)
 8003446:	f7ff fa59 	bl	80028fc <Motion_StopAfter>
	   float distance = robot_distance();
 800344a:	f7fe fc4b 	bl	8001ce4 <robot_distance>
 800344e:	ed87 0a03 	vstr	s0, [r7, #12]
	   int integer_distance = (int)distance;
 8003452:	edd7 7a03 	vldr	s15, [r7, #12]
 8003456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800345a:	ee17 3a90 	vmov	r3, s15
 800345e:	60bb      	str	r3, [r7, #8]
	   Motion_ResetDriveSystem(&motion);
 8003460:	4806      	ldr	r0, [pc, #24]	@ (800347c <Robot_moveForwardUntillBox+0x9c>)
 8003462:	f7ff f958 	bl	8002716 <Motion_ResetDriveSystem>

	   return integer_distance;
 8003466:	68bb      	ldr	r3, [r7, #8]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	0800d7cc 	.word	0x0800d7cc
 8003474:	0800d7d0 	.word	0x0800d7d0
 8003478:	00000000 	.word	0x00000000
 800347c:	200005e0 	.word	0x200005e0
 8003480:	200006ee 	.word	0x200006ee
 8003484:	42a00000 	.word	0x42a00000

08003488 <DetectJunction>:
/**
 * Detects junctions during line following
 * @return JunctionType enum value indicating the type of junction detected
 */
int numberOfSensorsOnWhite = 0;
JunctionType DetectJunction() {
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
	numberOfSensorsOnWhite = 0;
 800348e:	4b23      	ldr	r3, [pc, #140]	@ (800351c <DetectJunction+0x94>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < RAYKHA_NUM_SENSORS; i++){
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	e00e      	b.n	80034b8 <DetectJunction+0x30>
		if(sensor_values[i] > LINE_THRESHOLD){
 800349a:	4a21      	ldr	r2, [pc, #132]	@ (8003520 <DetectJunction+0x98>)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034a2:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80034a6:	d904      	bls.n	80034b2 <DetectJunction+0x2a>
			numberOfSensorsOnWhite++;
 80034a8:	4b1c      	ldr	r3, [pc, #112]	@ (800351c <DetectJunction+0x94>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3301      	adds	r3, #1
 80034ae:	4a1b      	ldr	r2, [pc, #108]	@ (800351c <DetectJunction+0x94>)
 80034b0:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < RAYKHA_NUM_SENSORS; i++){
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3301      	adds	r3, #1
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b09      	cmp	r3, #9
 80034bc:	dded      	ble.n	800349a <DetectJunction+0x12>
		}
	}

	int leftSensorValue = sensor_values[0];
 80034be:	4b18      	ldr	r3, [pc, #96]	@ (8003520 <DetectJunction+0x98>)
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	60bb      	str	r3, [r7, #8]
	int rightSensorValue = sensor_values[RAYKHA_NUM_SENSORS - 1];
 80034c4:	4b16      	ldr	r3, [pc, #88]	@ (8003520 <DetectJunction+0x98>)
 80034c6:	8a5b      	ldrh	r3, [r3, #18]
 80034c8:	607b      	str	r3, [r7, #4]

	if(numberOfSensorsOnWhite > SENSORS_ON_LINE_FOR_JUNCTION_CHECK){
 80034ca:	4b14      	ldr	r3, [pc, #80]	@ (800351c <DetectJunction+0x94>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	dd17      	ble.n	8003502 <DetectJunction+0x7a>
		if (leftSensorValue > LINE_THRESHOLD && rightSensorValue > LINE_THRESHOLD){
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80034d8:	dd05      	ble.n	80034e6 <DetectJunction+0x5e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80034e0:	dd01      	ble.n	80034e6 <DetectJunction+0x5e>
			return T_JUNCTION;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e014      	b.n	8003510 <DetectJunction+0x88>
		}
		else if (leftSensorValue > LINE_THRESHOLD){
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80034ec:	dd01      	ble.n	80034f2 <DetectJunction+0x6a>
			return LEFT_JUNCTION;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00e      	b.n	8003510 <DetectJunction+0x88>
		}
		else if (rightSensorValue > LINE_THRESHOLD){
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80034f8:	dd01      	ble.n	80034fe <DetectJunction+0x76>
			return RIGHT_JUNCTION;
 80034fa:	2302      	movs	r3, #2
 80034fc:	e008      	b.n	8003510 <DetectJunction+0x88>
		}
		else{
			return STRAIGHT_LINE;
 80034fe:	2304      	movs	r3, #4
 8003500:	e006      	b.n	8003510 <DetectJunction+0x88>
		}
	}
	else if(numberOfSensorsOnWhite == 0){
 8003502:	4b06      	ldr	r3, [pc, #24]	@ (800351c <DetectJunction+0x94>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <DetectJunction+0x86>
		return NO_LINE;
 800350a:	2300      	movs	r3, #0
 800350c:	e000      	b.n	8003510 <DetectJunction+0x88>
	}
	else{
		return STRAIGHT_LINE;
 800350e:	2304      	movs	r3, #4
	}
}
 8003510:	4618      	mov	r0, r3
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	20000714 	.word	0x20000714
 8003520:	200006f0 	.word	0x200006f0

08003524 <get_steering_feedback>:
	rfs.raw = 0;
	rrs.raw = 0;
}


float get_steering_feedback() {
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return m_steering_adjustment;
 8003528:	4b04      	ldr	r3, [pc, #16]	@ (800353c <get_steering_feedback+0x18>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	ee07 3a90 	vmov	s15, r3
}
 8003530:	eeb0 0a67 	vmov.f32	s0, s15
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	200006c0 	.word	0x200006c0

08003540 <CalculateSteeringAdjustment>:
float pTerm;
float dTerm;


/* Calculate steering adjustment */
float CalculateSteeringAdjustment() {
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
	if (g_steering_mode == STEERING_FRONT_WALL) {
 8003546:	4b39      	ldr	r3, [pc, #228]	@ (800362c <CalculateSteeringAdjustment+0xec>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b06      	cmp	r3, #6
 800354e:	d11b      	bne.n	8003588 <CalculateSteeringAdjustment+0x48>
		pTerm = STEERING_FRONT_KP * m_cross_track_error;
 8003550:	4b37      	ldr	r3, [pc, #220]	@ (8003630 <CalculateSteeringAdjustment+0xf0>)
 8003552:	ed93 7a00 	vldr	s14, [r3]
 8003556:	4b37      	ldr	r3, [pc, #220]	@ (8003634 <CalculateSteeringAdjustment+0xf4>)
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003560:	4b35      	ldr	r3, [pc, #212]	@ (8003638 <CalculateSteeringAdjustment+0xf8>)
 8003562:	edc3 7a00 	vstr	s15, [r3]
		dTerm = STEERING_FRONT_KD * (m_cross_track_error - m_last_steering_error);
 8003566:	4b33      	ldr	r3, [pc, #204]	@ (8003634 <CalculateSteeringAdjustment+0xf4>)
 8003568:	ed93 7a00 	vldr	s14, [r3]
 800356c:	4b33      	ldr	r3, [pc, #204]	@ (800363c <CalculateSteeringAdjustment+0xfc>)
 800356e:	edd3 7a00 	vldr	s15, [r3]
 8003572:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003576:	4b32      	ldr	r3, [pc, #200]	@ (8003640 <CalculateSteeringAdjustment+0x100>)
 8003578:	edd3 7a00 	vldr	s15, [r3]
 800357c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003580:	4b30      	ldr	r3, [pc, #192]	@ (8003644 <CalculateSteeringAdjustment+0x104>)
 8003582:	edc3 7a00 	vstr	s15, [r3]
 8003586:	e01a      	b.n	80035be <CalculateSteeringAdjustment+0x7e>
	} else {
		pTerm = STEERING_KP * m_cross_track_error;
 8003588:	4b2f      	ldr	r3, [pc, #188]	@ (8003648 <CalculateSteeringAdjustment+0x108>)
 800358a:	ed93 7a00 	vldr	s14, [r3]
 800358e:	4b29      	ldr	r3, [pc, #164]	@ (8003634 <CalculateSteeringAdjustment+0xf4>)
 8003590:	edd3 7a00 	vldr	s15, [r3]
 8003594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003598:	4b27      	ldr	r3, [pc, #156]	@ (8003638 <CalculateSteeringAdjustment+0xf8>)
 800359a:	edc3 7a00 	vstr	s15, [r3]
		dTerm = STEERING_KD * (m_cross_track_error - m_last_steering_error);
 800359e:	4b25      	ldr	r3, [pc, #148]	@ (8003634 <CalculateSteeringAdjustment+0xf4>)
 80035a0:	ed93 7a00 	vldr	s14, [r3]
 80035a4:	4b25      	ldr	r3, [pc, #148]	@ (800363c <CalculateSteeringAdjustment+0xfc>)
 80035a6:	edd3 7a00 	vldr	s15, [r3]
 80035aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035ae:	4b27      	ldr	r3, [pc, #156]	@ (800364c <CalculateSteeringAdjustment+0x10c>)
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b8:	4b22      	ldr	r3, [pc, #136]	@ (8003644 <CalculateSteeringAdjustment+0x104>)
 80035ba:	edc3 7a00 	vstr	s15, [r3]
	}

//    float pTerm = STEERING_KP * m_cross_track_error;
//    float dTerm = STEERING_KD * (m_cross_track_error - m_last_steering_error);
    float adjustment = pTerm + dTerm * LOOP_FREQUENCY;
 80035be:	4b21      	ldr	r3, [pc, #132]	@ (8003644 <CalculateSteeringAdjustment+0x104>)
 80035c0:	ed93 7a00 	vldr	s14, [r3]
 80035c4:	4b22      	ldr	r3, [pc, #136]	@ (8003650 <CalculateSteeringAdjustment+0x110>)
 80035c6:	edd3 7a00 	vldr	s15, [r3]
 80035ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003638 <CalculateSteeringAdjustment+0xf8>)
 80035d0:	edd3 7a00 	vldr	s15, [r3]
 80035d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d8:	edc7 7a01 	vstr	s15, [r7, #4]
    adjustment = fminf(fmaxf(adjustment, -STEERING_ADJUST_LIMIT), STEERING_ADJUST_LIMIT);
 80035dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <CalculateSteeringAdjustment+0x114>)
 80035de:	edd3 7a00 	vldr	s15, [r3]
 80035e2:	eef1 7a67 	vneg.f32	s15, s15
 80035e6:	eef0 0a67 	vmov.f32	s1, s15
 80035ea:	ed97 0a01 	vldr	s0, [r7, #4]
 80035ee:	f009 fff5 	bl	800d5dc <fmaxf>
 80035f2:	eeb0 7a40 	vmov.f32	s14, s0
 80035f6:	4b17      	ldr	r3, [pc, #92]	@ (8003654 <CalculateSteeringAdjustment+0x114>)
 80035f8:	edd3 7a00 	vldr	s15, [r3]
 80035fc:	eef0 0a67 	vmov.f32	s1, s15
 8003600:	eeb0 0a47 	vmov.f32	s0, s14
 8003604:	f00a f807 	bl	800d616 <fminf>
 8003608:	ed87 0a01 	vstr	s0, [r7, #4]
    m_last_steering_error = m_cross_track_error;
 800360c:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <CalculateSteeringAdjustment+0xf4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a0a      	ldr	r2, [pc, #40]	@ (800363c <CalculateSteeringAdjustment+0xfc>)
 8003612:	6013      	str	r3, [r2, #0]
    m_steering_adjustment = adjustment;
 8003614:	4a10      	ldr	r2, [pc, #64]	@ (8003658 <CalculateSteeringAdjustment+0x118>)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6013      	str	r3, [r2, #0]
    return adjustment;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	ee07 3a90 	vmov	s15, r3
}
 8003620:	eeb0 0a67 	vmov.f32	s0, s15
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	2000005c 	.word	0x2000005c
 8003630:	0800d7b8 	.word	0x0800d7b8
 8003634:	200006bc 	.word	0x200006bc
 8003638:	20000718 	.word	0x20000718
 800363c:	200006b8 	.word	0x200006b8
 8003640:	0800d7bc 	.word	0x0800d7bc
 8003644:	2000071c 	.word	0x2000071c
 8003648:	0800d7b0 	.word	0x0800d7b0
 800364c:	0800d7b4 	.word	0x0800d7b4
 8003650:	0800d78c 	.word	0x0800d78c
 8003654:	0800d7c0 	.word	0x0800d7c0
 8003658:	200006c0 	.word	0x200006c0

0800365c <set_steering_mode>:

void set_steering_mode(uint8_t mode){
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	71fb      	strb	r3, [r7, #7]
	m_last_steering_error = m_cross_track_error;
 8003666:	4b08      	ldr	r3, [pc, #32]	@ (8003688 <set_steering_mode+0x2c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a08      	ldr	r2, [pc, #32]	@ (800368c <set_steering_mode+0x30>)
 800366c:	6013      	str	r3, [r2, #0]
	m_steering_adjustment = 0;
 800366e:	4b08      	ldr	r3, [pc, #32]	@ (8003690 <set_steering_mode+0x34>)
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
	g_steering_mode = mode;
 8003676:	4a07      	ldr	r2, [pc, #28]	@ (8003694 <set_steering_mode+0x38>)
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	7013      	strb	r3, [r2, #0]
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	200006bc 	.word	0x200006bc
 800368c:	200006b8 	.word	0x200006b8
 8003690:	200006c0 	.word	0x200006c0
 8003694:	2000005c 	.word	0x2000005c

08003698 <Sensors_Update>:




/* Update sensor readings and calculate cross-track error */
void Sensors_Update() {
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
    // Read ADC values for all sensor channels
	error = 0;
 800369c:	4b45      	ldr	r3, [pc, #276]	@ (80037b4 <Sensors_Update+0x11c>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]

	if(g_steering_mode == STEERING_CENTER_LINE_FOLLOW){
 80036a2:	4b45      	ldr	r3, [pc, #276]	@ (80037b8 <Sensors_Update+0x120>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b07      	cmp	r3, #7
 80036aa:	d115      	bne.n	80036d8 <Sensors_Update+0x40>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 80036ac:	4943      	ldr	r1, [pc, #268]	@ (80037bc <Sensors_Update+0x124>)
 80036ae:	4844      	ldr	r0, [pc, #272]	@ (80037c0 <Sensors_Update+0x128>)
 80036b0:	f7ff fc1e 	bl	8002ef0 <RAYKHA_ReadCalibrated>

		/* Get position for PID controller (centered around 0) */
		line_position = RAYKHA_GetPositionForPID(sensor_values, &raykha_calibration);
 80036b4:	4941      	ldr	r1, [pc, #260]	@ (80037bc <Sensors_Update+0x124>)
 80036b6:	4842      	ldr	r0, [pc, #264]	@ (80037c0 <Sensors_Update+0x128>)
 80036b8:	f7ff fccb 	bl	8003052 <RAYKHA_GetPositionForPID>
 80036bc:	4603      	mov	r3, r0
 80036be:	4a41      	ldr	r2, [pc, #260]	@ (80037c4 <Sensors_Update+0x12c>)
 80036c0:	6013      	str	r3, [r2, #0]

		error = line_position;
 80036c2:	4b40      	ldr	r3, [pc, #256]	@ (80037c4 <Sensors_Update+0x12c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a3b      	ldr	r2, [pc, #236]	@ (80037b4 <Sensors_Update+0x11c>)
 80036c8:	6013      	str	r3, [r2, #0]

		junction = DetectJunction();
 80036ca:	f7ff fedd 	bl	8003488 <DetectJunction>
 80036ce:	4603      	mov	r3, r0
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b3d      	ldr	r3, [pc, #244]	@ (80037c8 <Sensors_Update+0x130>)
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	e05f      	b.n	8003798 <Sensors_Update+0x100>

	}
	else if(g_steering_mode == STEERING_OFF_READLINE){
 80036d8:	4b37      	ldr	r3, [pc, #220]	@ (80037b8 <Sensors_Update+0x120>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d122      	bne.n	8003728 <Sensors_Update+0x90>
		RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 80036e2:	4936      	ldr	r1, [pc, #216]	@ (80037bc <Sensors_Update+0x124>)
 80036e4:	4836      	ldr	r0, [pc, #216]	@ (80037c0 <Sensors_Update+0x128>)
 80036e6:	f7ff fc03 	bl	8002ef0 <RAYKHA_ReadCalibrated>
		line_position = RAYKHA_GetPositionForPID(sensor_values, &raykha_calibration);
 80036ea:	4934      	ldr	r1, [pc, #208]	@ (80037bc <Sensors_Update+0x124>)
 80036ec:	4834      	ldr	r0, [pc, #208]	@ (80037c0 <Sensors_Update+0x128>)
 80036ee:	f7ff fcb0 	bl	8003052 <RAYKHA_GetPositionForPID>
 80036f2:	4603      	mov	r3, r0
 80036f4:	4a33      	ldr	r2, [pc, #204]	@ (80037c4 <Sensors_Update+0x12c>)
 80036f6:	6013      	str	r3, [r2, #0]
		junction = DetectJunction();
 80036f8:	f7ff fec6 	bl	8003488 <DetectJunction>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	4b31      	ldr	r3, [pc, #196]	@ (80037c8 <Sensors_Update+0x130>)
 8003702:	701a      	strb	r2, [r3, #0]

		if(sensor_values[4] > LINE_THRESHOLD || sensor_values[5] > LINE_THRESHOLD){
 8003704:	4b2e      	ldr	r3, [pc, #184]	@ (80037c0 <Sensors_Update+0x128>)
 8003706:	891b      	ldrh	r3, [r3, #8]
 8003708:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800370c:	d804      	bhi.n	8003718 <Sensors_Update+0x80>
 800370e:	4b2c      	ldr	r3, [pc, #176]	@ (80037c0 <Sensors_Update+0x128>)
 8003710:	895b      	ldrh	r3, [r3, #10]
 8003712:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003716:	d903      	bls.n	8003720 <Sensors_Update+0x88>
			on_line = 1;
 8003718:	4b2c      	ldr	r3, [pc, #176]	@ (80037cc <Sensors_Update+0x134>)
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e03b      	b.n	8003798 <Sensors_Update+0x100>
		}
		else{
			on_line = 0;
 8003720:	4b2a      	ldr	r3, [pc, #168]	@ (80037cc <Sensors_Update+0x134>)
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	e037      	b.n	8003798 <Sensors_Update+0x100>
		}


	}
	else if(g_steering_mode == STEER_LEFT_WALL){
 8003728:	4b23      	ldr	r3, [pc, #140]	@ (80037b8 <Sensors_Update+0x120>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d11c      	bne.n	800376c <Sensors_Update+0xd4>
		RangeAllIRSensors();
 8003732:	f000 f85b 	bl	80037ec <RangeAllIRSensors>
		// Calculate the wall angle using the difference between front and rear sensors
		//wall_angle = lfs.value - lrs.value;

		// Calculate distance error - how far we are from the desired distance to wall
		//distance_error = SIDE_NOMINAL - left_wall_avg;
		distance_error = SIDE_NOMINAL - lrs.value;
 8003736:	4b26      	ldr	r3, [pc, #152]	@ (80037d0 <Sensors_Update+0x138>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b26      	ldr	r3, [pc, #152]	@ (80037d4 <Sensors_Update+0x13c>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	4a25      	ldr	r2, [pc, #148]	@ (80037d8 <Sensors_Update+0x140>)
 8003742:	6013      	str	r3, [r2, #0]

		// Combine both angle and distance for proportional control
		// Adjust weights as needed based on testing
		//error = 25 * (distance_error + (wall_angle * WALL_ANGLE_WEIGHT));
		error = 3.5 * distance_error;
 8003744:	4b24      	ldr	r3, [pc, #144]	@ (80037d8 <Sensors_Update+0x140>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7fc ff0b 	bl	8000564 <__aeabi_i2d>
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	4b22      	ldr	r3, [pc, #136]	@ (80037dc <Sensors_Update+0x144>)
 8003754:	f7fc ff70 	bl	8000638 <__aeabi_dmul>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4610      	mov	r0, r2
 800375e:	4619      	mov	r1, r3
 8003760:	f7fd fa1a 	bl	8000b98 <__aeabi_d2iz>
 8003764:	4603      	mov	r3, r0
 8003766:	4a13      	ldr	r2, [pc, #76]	@ (80037b4 <Sensors_Update+0x11c>)
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	e015      	b.n	8003798 <Sensors_Update+0x100>



    }
    else if(g_steering_mode == STEERING_FRONT_WALL){
 800376c:	4b12      	ldr	r3, [pc, #72]	@ (80037b8 <Sensors_Update+0x120>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b06      	cmp	r3, #6
 8003774:	d109      	bne.n	800378a <Sensors_Update+0xf2>
    	RangeAllIRSensors();
 8003776:	f000 f839 	bl	80037ec <RangeAllIRSensors>

		error = lfs.value - rfs.value;
 800377a:	4b19      	ldr	r3, [pc, #100]	@ (80037e0 <Sensors_Update+0x148>)
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	4b19      	ldr	r3, [pc, #100]	@ (80037e4 <Sensors_Update+0x14c>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	4a0b      	ldr	r2, [pc, #44]	@ (80037b4 <Sensors_Update+0x11c>)
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	e006      	b.n	8003798 <Sensors_Update+0x100>
    }
    else if(g_steering_mode == STEERING_OFF_READIR){
 800378a:	4b0b      	ldr	r3, [pc, #44]	@ (80037b8 <Sensors_Update+0x120>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b05      	cmp	r3, #5
 8003792:	d101      	bne.n	8003798 <Sensors_Update+0x100>
    	RangeAllIRSensors();
 8003794:	f000 f82a 	bl	80037ec <RangeAllIRSensors>

//    if (see_front_wall) {
//        error = 0;  // Ignore steering near front walls
//    }

    m_cross_track_error = error;
 8003798:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <Sensors_Update+0x11c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	ee07 3a90 	vmov	s15, r3
 80037a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037a4:	4b10      	ldr	r3, [pc, #64]	@ (80037e8 <Sensors_Update+0x150>)
 80037a6:	edc3 7a00 	vstr	s15, [r3]
    CalculateSteeringAdjustment();
 80037aa:	f7ff fec9 	bl	8003540 <CalculateSteeringAdjustment>
    //send_sensor_data();
}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	2000070c 	.word	0x2000070c
 80037b8:	2000005c 	.word	0x2000005c
 80037bc:	200005b4 	.word	0x200005b4
 80037c0:	200006f0 	.word	0x200006f0
 80037c4:	20000704 	.word	0x20000704
 80037c8:	20000708 	.word	0x20000708
 80037cc:	200006ed 	.word	0x200006ed
 80037d0:	0800d7dc 	.word	0x0800d7dc
 80037d4:	200006cc 	.word	0x200006cc
 80037d8:	20000710 	.word	0x20000710
 80037dc:	400c0000 	.word	0x400c0000
 80037e0:	200006c4 	.word	0x200006c4
 80037e4:	200006dc 	.word	0x200006dc
 80037e8:	200006bc 	.word	0x200006bc

080037ec <RangeAllIRSensors>:


void RangeAllIRSensors(void){
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
	analogReadIRs();
 80037f0:	f7fe faae 	bl	8001d50 <analogReadIRs>

	lfs.raw = readRawIR(IR_LEFT_BACK);
 80037f4:	2002      	movs	r0, #2
 80037f6:	f7fe fac9 	bl	8001d8c <readRawIR>
 80037fa:	4603      	mov	r3, r0
 80037fc:	461a      	mov	r2, r3
 80037fe:	4b4f      	ldr	r3, [pc, #316]	@ (800393c <RangeAllIRSensors+0x150>)
 8003800:	801a      	strh	r2, [r3, #0]
	lrs.raw = readRawIR(IR_LEFT_FORWARD);
 8003802:	2001      	movs	r0, #1
 8003804:	f7fe fac2 	bl	8001d8c <readRawIR>
 8003808:	4603      	mov	r3, r0
 800380a:	461a      	mov	r2, r3
 800380c:	4b4c      	ldr	r3, [pc, #304]	@ (8003940 <RangeAllIRSensors+0x154>)
 800380e:	801a      	strh	r2, [r3, #0]

	fs.raw = readRawIR(IR_FRONT);
 8003810:	2000      	movs	r0, #0
 8003812:	f7fe fabb 	bl	8001d8c <readRawIR>
 8003816:	4603      	mov	r3, r0
 8003818:	461a      	mov	r2, r3
 800381a:	4b4a      	ldr	r3, [pc, #296]	@ (8003944 <RangeAllIRSensors+0x158>)
 800381c:	801a      	strh	r2, [r3, #0]

	rfs.raw = readRawIR(IR_RIGHT_FORWARD);
 800381e:	2004      	movs	r0, #4
 8003820:	f7fe fab4 	bl	8001d8c <readRawIR>
 8003824:	4603      	mov	r3, r0
 8003826:	461a      	mov	r2, r3
 8003828:	4b47      	ldr	r3, [pc, #284]	@ (8003948 <RangeAllIRSensors+0x15c>)
 800382a:	801a      	strh	r2, [r3, #0]
	rrs.raw = readRawIR(IR_RIGHT_BACK);
 800382c:	2003      	movs	r0, #3
 800382e:	f7fe faad 	bl	8001d8c <readRawIR>
 8003832:	4603      	mov	r3, r0
 8003834:	461a      	mov	r2, r3
 8003836:	4b45      	ldr	r3, [pc, #276]	@ (800394c <RangeAllIRSensors+0x160>)
 8003838:	801a      	strh	r2, [r3, #0]


	if(lfs.raw < 400)lfs.raw = 400;
 800383a:	4b40      	ldr	r3, [pc, #256]	@ (800393c <RangeAllIRSensors+0x150>)
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8003844:	d203      	bcs.n	800384e <RangeAllIRSensors+0x62>
 8003846:	4b3d      	ldr	r3, [pc, #244]	@ (800393c <RangeAllIRSensors+0x150>)
 8003848:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800384c:	801a      	strh	r2, [r3, #0]
	if(lrs.raw < 300)lrs.raw = 300;
 800384e:	4b3c      	ldr	r3, [pc, #240]	@ (8003940 <RangeAllIRSensors+0x154>)
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8003858:	d203      	bcs.n	8003862 <RangeAllIRSensors+0x76>
 800385a:	4b39      	ldr	r3, [pc, #228]	@ (8003940 <RangeAllIRSensors+0x154>)
 800385c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003860:	801a      	strh	r2, [r3, #0]

	if(fs.raw < 400)fs.raw = 400;
 8003862:	4b38      	ldr	r3, [pc, #224]	@ (8003944 <RangeAllIRSensors+0x158>)
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800386c:	d203      	bcs.n	8003876 <RangeAllIRSensors+0x8a>
 800386e:	4b35      	ldr	r3, [pc, #212]	@ (8003944 <RangeAllIRSensors+0x158>)
 8003870:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003874:	801a      	strh	r2, [r3, #0]

	if(rfs.raw < 350)rfs.raw = 350;
 8003876:	4b34      	ldr	r3, [pc, #208]	@ (8003948 <RangeAllIRSensors+0x15c>)
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8003880:	d203      	bcs.n	800388a <RangeAllIRSensors+0x9e>
 8003882:	4b31      	ldr	r3, [pc, #196]	@ (8003948 <RangeAllIRSensors+0x15c>)
 8003884:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8003888:	801a      	strh	r2, [r3, #0]
	if(rrs.raw < 200)rrs.raw = 200;
 800388a:	4b30      	ldr	r3, [pc, #192]	@ (800394c <RangeAllIRSensors+0x160>)
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	b29b      	uxth	r3, r3
 8003890:	2bc7      	cmp	r3, #199	@ 0xc7
 8003892:	d802      	bhi.n	800389a <RangeAllIRSensors+0xae>
 8003894:	4b2d      	ldr	r3, [pc, #180]	@ (800394c <RangeAllIRSensors+0x160>)
 8003896:	22c8      	movs	r2, #200	@ 0xc8
 8003898:	801a      	strh	r2, [r3, #0]


	lfs.value = getIRDistance(IR_LEFT_FORWARD, lfs.raw);
 800389a:	4b28      	ldr	r3, [pc, #160]	@ (800393c <RangeAllIRSensors+0x150>)
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	4619      	mov	r1, r3
 80038a2:	2001      	movs	r0, #1
 80038a4:	f7fe faa2 	bl	8001dec <getIRDistance>
 80038a8:	4603      	mov	r3, r0
 80038aa:	461a      	mov	r2, r3
 80038ac:	4b23      	ldr	r3, [pc, #140]	@ (800393c <RangeAllIRSensors+0x150>)
 80038ae:	605a      	str	r2, [r3, #4]
	lrs.value = getIRDistance(IR_LEFT_BACK, lrs.raw);
 80038b0:	4b23      	ldr	r3, [pc, #140]	@ (8003940 <RangeAllIRSensors+0x154>)
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	4619      	mov	r1, r3
 80038b8:	2002      	movs	r0, #2
 80038ba:	f7fe fa97 	bl	8001dec <getIRDistance>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003940 <RangeAllIRSensors+0x154>)
 80038c4:	605a      	str	r2, [r3, #4]

	fs.value = getIRDistance(IR_FRONT, fs.raw);
 80038c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003944 <RangeAllIRSensors+0x158>)
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	4619      	mov	r1, r3
 80038ce:	2000      	movs	r0, #0
 80038d0:	f7fe fa8c 	bl	8001dec <getIRDistance>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003944 <RangeAllIRSensors+0x158>)
 80038da:	605a      	str	r2, [r3, #4]

	rfs.value = getIRDistance(IR_RIGHT_FORWARD, rfs.raw);
 80038dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003948 <RangeAllIRSensors+0x15c>)
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	4619      	mov	r1, r3
 80038e4:	2004      	movs	r0, #4
 80038e6:	f7fe fa81 	bl	8001dec <getIRDistance>
 80038ea:	4603      	mov	r3, r0
 80038ec:	461a      	mov	r2, r3
 80038ee:	4b16      	ldr	r3, [pc, #88]	@ (8003948 <RangeAllIRSensors+0x15c>)
 80038f0:	605a      	str	r2, [r3, #4]
	rrs.value = getIRDistance(IR_RIGHT_BACK, rrs.raw);
 80038f2:	4b16      	ldr	r3, [pc, #88]	@ (800394c <RangeAllIRSensors+0x160>)
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	4619      	mov	r1, r3
 80038fa:	2003      	movs	r0, #3
 80038fc:	f7fe fa76 	bl	8001dec <getIRDistance>
 8003900:	4603      	mov	r3, r0
 8003902:	461a      	mov	r2, r3
 8003904:	4b11      	ldr	r3, [pc, #68]	@ (800394c <RangeAllIRSensors+0x160>)
 8003906:	605a      	str	r2, [r3, #4]
	//right_wall_avg = 0.5 * (rfs.value + rrs.value);

//	see_left_wall = (left_wall_avg < LEFT_THRESHOLD);
//	see_right_wall = (right_wall_avg < RIGHT_THRESHOLD);

	see_front_wall = (rfs.value < FRONT_THRESHOLD);
 8003908:	4b0f      	ldr	r3, [pc, #60]	@ (8003948 <RangeAllIRSensors+0x15c>)
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	4b10      	ldr	r3, [pc, #64]	@ (8003950 <RangeAllIRSensors+0x164>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	bfb4      	ite	lt
 8003914:	2301      	movlt	r3, #1
 8003916:	2300      	movge	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	461a      	mov	r2, r3
 800391c:	4b0d      	ldr	r3, [pc, #52]	@ (8003954 <RangeAllIRSensors+0x168>)
 800391e:	701a      	strb	r2, [r3, #0]
	see_box = (lrs.value < BOX_THRESHOLD);
 8003920:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <RangeAllIRSensors+0x154>)
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <RangeAllIRSensors+0x16c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	bfb4      	ite	lt
 800392c:	2301      	movlt	r3, #1
 800392e:	2300      	movge	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	4b09      	ldr	r3, [pc, #36]	@ (800395c <RangeAllIRSensors+0x170>)
 8003936:	701a      	strb	r2, [r3, #0]
}
 8003938:	bf00      	nop
 800393a:	bd80      	pop	{r7, pc}
 800393c:	200006c4 	.word	0x200006c4
 8003940:	200006cc 	.word	0x200006cc
 8003944:	200006d4 	.word	0x200006d4
 8003948:	200006dc 	.word	0x200006dc
 800394c:	200006e4 	.word	0x200006e4
 8003950:	0800d7e0 	.word	0x0800d7e0
 8003954:	200006ec 	.word	0x200006ec
 8003958:	0800d7e8 	.word	0x0800d7e8
 800395c:	200006ee 	.word	0x200006ee

08003960 <Servo_Init>:
  * @brief  Initialize the servo control system
  * @param  frequency: PWM frequency for the servos (typically 50Hz)
  * @retval None
  */
void Servo_Init(uint16_t frequency)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	80fb      	strh	r3, [r7, #6]
    if (isInitialized)
 800396a:	4b0c      	ldr	r3, [pc, #48]	@ (800399c <Servo_Init+0x3c>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d110      	bne.n	8003994 <Servo_Init+0x34>
        return;

    // Initialize PCA9685 with the specified frequency
    PCA9685_Init(frequency);
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	4618      	mov	r0, r3
 8003976:	f001 f857 	bl	8004a28 <PCA9685_Init>

    // Clear the servo array
    memset(servos, 0, sizeof(servos));
 800397a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800397e:	2100      	movs	r1, #0
 8003980:	4807      	ldr	r0, [pc, #28]	@ (80039a0 <Servo_Init+0x40>)
 8003982:	f007 fd4a 	bl	800b41a <memset>
    servoCount = 0;
 8003986:	4b07      	ldr	r3, [pc, #28]	@ (80039a4 <Servo_Init+0x44>)
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
    isInitialized = 1;
 800398c:	4b03      	ldr	r3, [pc, #12]	@ (800399c <Servo_Init+0x3c>)
 800398e:	2201      	movs	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
 8003992:	e000      	b.n	8003996 <Servo_Init+0x36>
        return;
 8003994:	bf00      	nop
}
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20000961 	.word	0x20000961
 80039a0:	20000720 	.word	0x20000720
 80039a4:	20000960 	.word	0x20000960

080039a8 <Servo_Register>:
  * @param  minAngle: Minimum angle limit (0-180)
  * @param  maxAngle: Maximum angle limit (0-180)
  * @retval int: Servo ID (0 to MAX_SERVOS-1) or -1 if error
  */
int Servo_Register(uint8_t channel, const char* name, float minAngle, float maxAngle, float init_angle)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6139      	str	r1, [r7, #16]
 80039b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80039b6:	edc7 0a02 	vstr	s1, [r7, #8]
 80039ba:	ed87 1a01 	vstr	s2, [r7, #4]
 80039be:	75fb      	strb	r3, [r7, #23]
    // Check if initialized
    if (!isInitialized)
 80039c0:	4b69      	ldr	r3, [pc, #420]	@ (8003b68 <Servo_Register+0x1c0>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <Servo_Register+0x26>
        return -1;
 80039c8:	f04f 33ff 	mov.w	r3, #4294967295
 80039cc:	e0c7      	b.n	8003b5e <Servo_Register+0x1b6>

    // Check if we've reached maximum servo count
    if (servoCount >= MAX_SERVOS)
 80039ce:	4b67      	ldr	r3, [pc, #412]	@ (8003b6c <Servo_Register+0x1c4>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b0f      	cmp	r3, #15
 80039d4:	d902      	bls.n	80039dc <Servo_Register+0x34>
        return -1;
 80039d6:	f04f 33ff 	mov.w	r3, #4294967295
 80039da:	e0c0      	b.n	8003b5e <Servo_Register+0x1b6>

    // Check if channel is valid
    if (channel >= MAX_SERVOS)
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	2b0f      	cmp	r3, #15
 80039e0:	d902      	bls.n	80039e8 <Servo_Register+0x40>
        return -1;
 80039e2:	f04f 33ff 	mov.w	r3, #4294967295
 80039e6:	e0ba      	b.n	8003b5e <Servo_Register+0x1b6>

    // Check if the channel is already in use
    for (int i = 0; i < servoCount; i++) {
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
 80039ec:	e01b      	b.n	8003a26 <Servo_Register+0x7e>
        if (servos[i].initialized && servos[i].channel == channel)
 80039ee:	4960      	ldr	r1, [pc, #384]	@ (8003b70 <Servo_Register+0x1c8>)
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	3310      	adds	r3, #16
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00d      	beq.n	8003a20 <Servo_Register+0x78>
 8003a04:	495a      	ldr	r1, [pc, #360]	@ (8003b70 <Servo_Register+0x1c8>)
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	7dfa      	ldrb	r2, [r7, #23]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d102      	bne.n	8003a20 <Servo_Register+0x78>
            return -1;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1e:	e09e      	b.n	8003b5e <Servo_Register+0x1b6>
    for (int i = 0; i < servoCount; i++) {
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	3301      	adds	r3, #1
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	4b51      	ldr	r3, [pc, #324]	@ (8003b6c <Servo_Register+0x1c4>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	dbdd      	blt.n	80039ee <Servo_Register+0x46>
    }

    // Validate angle limits
    if (minAngle < SERVO_ANGLE_MIN) minAngle = SERVO_ANGLE_MIN;
 8003a32:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3e:	d502      	bpl.n	8003a46 <Servo_Register+0x9e>
 8003a40:	f04f 0300 	mov.w	r3, #0
 8003a44:	60fb      	str	r3, [r7, #12]
    if (maxAngle > SERVO_ANGLE_MAX) maxAngle = SERVO_ANGLE_MAX;
 8003a46:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a4a:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8003b74 <Servo_Register+0x1cc>
 8003a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a56:	dd01      	ble.n	8003a5c <Servo_Register+0xb4>
 8003a58:	4b47      	ldr	r3, [pc, #284]	@ (8003b78 <Servo_Register+0x1d0>)
 8003a5a:	60bb      	str	r3, [r7, #8]
    if (minAngle >= maxAngle) return -1;
 8003a5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a60:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6c:	db02      	blt.n	8003a74 <Servo_Register+0xcc>
 8003a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a72:	e074      	b.n	8003b5e <Servo_Register+0x1b6>

    // Register the servo
    int servoId = servoCount;
 8003a74:	4b3d      	ldr	r3, [pc, #244]	@ (8003b6c <Servo_Register+0x1c4>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	61bb      	str	r3, [r7, #24]
    servos[servoId].channel = channel;
 8003a7a:	493d      	ldr	r1, [pc, #244]	@ (8003b70 <Servo_Register+0x1c8>)
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	7dfa      	ldrb	r2, [r7, #23]
 8003a8a:	701a      	strb	r2, [r3, #0]
    servos[servoId].minAngle = minAngle;
 8003a8c:	4938      	ldr	r1, [pc, #224]	@ (8003b70 <Servo_Register+0x1c8>)
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	601a      	str	r2, [r3, #0]
    servos[servoId].maxAngle = maxAngle;
 8003aa0:	4933      	ldr	r1, [pc, #204]	@ (8003b70 <Servo_Register+0x1c8>)
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	3308      	adds	r3, #8
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	601a      	str	r2, [r3, #0]
    //servos[servoId].currentAngle = (minAngle + maxAngle) / 2.0f;  // Center position
    servos[servoId].currentAngle = init_angle;
 8003ab4:	492e      	ldr	r1, [pc, #184]	@ (8003b70 <Servo_Register+0x1c8>)
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	601a      	str	r2, [r3, #0]
    servos[servoId].initialized = 1;
 8003ac8:	4929      	ldr	r1, [pc, #164]	@ (8003b70 <Servo_Register+0x1c8>)
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3310      	adds	r3, #16
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]

    // Set optional name
    if (name != NULL) {
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d018      	beq.n	8003b14 <Servo_Register+0x16c>
        strncpy(servos[servoId].name, name, sizeof(servos[servoId].name) - 1);
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	3310      	adds	r3, #16
 8003aee:	4a20      	ldr	r2, [pc, #128]	@ (8003b70 <Servo_Register+0x1c8>)
 8003af0:	4413      	add	r3, r2
 8003af2:	3301      	adds	r3, #1
 8003af4:	220f      	movs	r2, #15
 8003af6:	6939      	ldr	r1, [r7, #16]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f007 fc96 	bl	800b42a <strncpy>
        servos[servoId].name[sizeof(servos[servoId].name) - 1] = '\0';  // Ensure null termination
 8003afe:	491c      	ldr	r1, [pc, #112]	@ (8003b70 <Servo_Register+0x1c8>)
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4613      	mov	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	3320      	adds	r3, #32
 8003b0e:	2200      	movs	r2, #0
 8003b10:	701a      	strb	r2, [r3, #0]
 8003b12:	e00d      	b.n	8003b30 <Servo_Register+0x188>
    } else {
        snprintf(servos[servoId].name, sizeof(servos[servoId].name), "Servo%d", servoId);
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4613      	mov	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	3310      	adds	r3, #16
 8003b20:	4a13      	ldr	r2, [pc, #76]	@ (8003b70 <Servo_Register+0x1c8>)
 8003b22:	4413      	add	r3, r2
 8003b24:	1c58      	adds	r0, r3, #1
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	4a14      	ldr	r2, [pc, #80]	@ (8003b7c <Servo_Register+0x1d4>)
 8003b2a:	2110      	movs	r1, #16
 8003b2c:	f007 fbfc 	bl	800b328 <sniprintf>
    }

    // Update servo count
    servoCount++;
 8003b30:	4b0e      	ldr	r3, [pc, #56]	@ (8003b6c <Servo_Register+0x1c4>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	3301      	adds	r3, #1
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	4b0c      	ldr	r3, [pc, #48]	@ (8003b6c <Servo_Register+0x1c4>)
 8003b3a:	701a      	strb	r2, [r3, #0]

    // Move servo to center position
    PCA9685_SetServoAngle(channel, servos[servoId].currentAngle);
 8003b3c:	490c      	ldr	r1, [pc, #48]	@ (8003b70 <Servo_Register+0x1c8>)
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	330c      	adds	r3, #12
 8003b4c:	edd3 7a00 	vldr	s15, [r3]
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
 8003b52:	eeb0 0a67 	vmov.f32	s0, s15
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 ffaa 	bl	8004ab0 <PCA9685_SetServoAngle>

    return servoId;
 8003b5c:	69bb      	ldr	r3, [r7, #24]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000961 	.word	0x20000961
 8003b6c:	20000960 	.word	0x20000960
 8003b70:	20000720 	.word	0x20000720
 8003b74:	43340000 	.word	0x43340000
 8003b78:	43340000 	.word	0x43340000
 8003b7c:	0800d778 	.word	0x0800d778

08003b80 <Servo_SetAngle>:
  * @param  servoId: ID returned from Servo_Register
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngle(int servoId, float angle)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	ed87 0a00 	vstr	s0, [r7]
    // Check if servo ID is valid
    if (servoId < 0 || servoId >= servoCount || !servos[servoId].initialized)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	db10      	blt.n	8003bb4 <Servo_SetAngle+0x34>
 8003b92:	4b33      	ldr	r3, [pc, #204]	@ (8003c60 <Servo_SetAngle+0xe0>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	da0a      	bge.n	8003bb4 <Servo_SetAngle+0x34>
 8003b9e:	4931      	ldr	r1, [pc, #196]	@ (8003c64 <Servo_SetAngle+0xe4>)
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	3310      	adds	r3, #16
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <Servo_SetAngle+0x3a>
        return -1;
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb8:	e04d      	b.n	8003c56 <Servo_SetAngle+0xd6>

    // Clamp angle to servo limits
    if (angle < servos[servoId].minAngle)
 8003bba:	492a      	ldr	r1, [pc, #168]	@ (8003c64 <Servo_SetAngle+0xe4>)
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	3304      	adds	r3, #4
 8003bca:	edd3 7a00 	vldr	s15, [r3]
 8003bce:	ed97 7a00 	vldr	s14, [r7]
 8003bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bda:	d509      	bpl.n	8003bf0 <Servo_SetAngle+0x70>
        angle = servos[servoId].minAngle;
 8003bdc:	4921      	ldr	r1, [pc, #132]	@ (8003c64 <Servo_SetAngle+0xe4>)
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	3304      	adds	r3, #4
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	603b      	str	r3, [r7, #0]
    if (angle > servos[servoId].maxAngle)
 8003bf0:	491c      	ldr	r1, [pc, #112]	@ (8003c64 <Servo_SetAngle+0xe4>)
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	3308      	adds	r3, #8
 8003c00:	edd3 7a00 	vldr	s15, [r3]
 8003c04:	ed97 7a00 	vldr	s14, [r7]
 8003c08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c10:	dd09      	ble.n	8003c26 <Servo_SetAngle+0xa6>
        angle = servos[servoId].maxAngle;
 8003c12:	4914      	ldr	r1, [pc, #80]	@ (8003c64 <Servo_SetAngle+0xe4>)
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	3308      	adds	r3, #8
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	603b      	str	r3, [r7, #0]

    // Update current angle
    servos[servoId].currentAngle = angle;
 8003c26:	490f      	ldr	r1, [pc, #60]	@ (8003c64 <Servo_SetAngle+0xe4>)
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	330c      	adds	r3, #12
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	601a      	str	r2, [r3, #0]

    // Set servo position
    PCA9685_SetServoAngle(servos[servoId].channel, angle);
 8003c3a:	490a      	ldr	r1, [pc, #40]	@ (8003c64 <Servo_SetAngle+0xe4>)
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	ed97 0a00 	vldr	s0, [r7]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 ff2e 	bl	8004ab0 <PCA9685_SetServoAngle>

    return 0;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000960 	.word	0x20000960
 8003c64:	20000720 	.word	0x20000720

08003c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	4b10      	ldr	r3, [pc, #64]	@ (8003cb4 <HAL_MspInit+0x4c>)
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	4a0f      	ldr	r2, [pc, #60]	@ (8003cb4 <HAL_MspInit+0x4c>)
 8003c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb4 <HAL_MspInit+0x4c>)
 8003c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c86:	607b      	str	r3, [r7, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	603b      	str	r3, [r7, #0]
 8003c8e:	4b09      	ldr	r3, [pc, #36]	@ (8003cb4 <HAL_MspInit+0x4c>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	4a08      	ldr	r2, [pc, #32]	@ (8003cb4 <HAL_MspInit+0x4c>)
 8003c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c9a:	4b06      	ldr	r3, [pc, #24]	@ (8003cb4 <HAL_MspInit+0x4c>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003ca6:	2007      	movs	r0, #7
 8003ca8:	f001 ff6e 	bl	8005b88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800

08003cb8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	@ 0x28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc0:	f107 0314 	add.w	r3, r7, #20
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	605a      	str	r2, [r3, #4]
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	60da      	str	r2, [r3, #12]
 8003cce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a17      	ldr	r2, [pc, #92]	@ (8003d34 <HAL_ADC_MspInit+0x7c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d127      	bne.n	8003d2a <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cda:	2300      	movs	r3, #0
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	4b16      	ldr	r3, [pc, #88]	@ (8003d38 <HAL_ADC_MspInit+0x80>)
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce2:	4a15      	ldr	r2, [pc, #84]	@ (8003d38 <HAL_ADC_MspInit+0x80>)
 8003ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cea:	4b13      	ldr	r3, [pc, #76]	@ (8003d38 <HAL_ADC_MspInit+0x80>)
 8003cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf2:	613b      	str	r3, [r7, #16]
 8003cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8003d38 <HAL_ADC_MspInit+0x80>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8003d38 <HAL_ADC_MspInit+0x80>)
 8003d00:	f043 0304 	orr.w	r3, r3, #4
 8003d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d06:	4b0c      	ldr	r3, [pc, #48]	@ (8003d38 <HAL_ADC_MspInit+0x80>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_ADC_Pin;
 8003d12:	2301      	movs	r3, #1
 8003d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d16:	2303      	movs	r3, #3
 8003d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_ADC_GPIO_Port, &GPIO_InitStruct);
 8003d1e:	f107 0314 	add.w	r3, r7, #20
 8003d22:	4619      	mov	r1, r3
 8003d24:	4805      	ldr	r0, [pc, #20]	@ (8003d3c <HAL_ADC_MspInit+0x84>)
 8003d26:	f002 faed 	bl	8006304 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003d2a:	bf00      	nop
 8003d2c:	3728      	adds	r7, #40	@ 0x28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40012000 	.word	0x40012000
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	40020800 	.word	0x40020800

08003d40 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08c      	sub	sp, #48	@ 0x30
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d48:	f107 031c 	add.w	r3, r7, #28
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a42      	ldr	r2, [pc, #264]	@ (8003e68 <HAL_I2C_MspInit+0x128>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d12c      	bne.n	8003dbc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	4b41      	ldr	r3, [pc, #260]	@ (8003e6c <HAL_I2C_MspInit+0x12c>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	4a40      	ldr	r2, [pc, #256]	@ (8003e6c <HAL_I2C_MspInit+0x12c>)
 8003d6c:	f043 0302 	orr.w	r3, r3, #2
 8003d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d72:	4b3e      	ldr	r3, [pc, #248]	@ (8003e6c <HAL_I2C_MspInit+0x12c>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	61bb      	str	r3, [r7, #24]
 8003d7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d7e:	23c0      	movs	r3, #192	@ 0xc0
 8003d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d82:	2312      	movs	r3, #18
 8003d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d8e:	2304      	movs	r3, #4
 8003d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d92:	f107 031c 	add.w	r3, r7, #28
 8003d96:	4619      	mov	r1, r3
 8003d98:	4835      	ldr	r0, [pc, #212]	@ (8003e70 <HAL_I2C_MspInit+0x130>)
 8003d9a:	f002 fab3 	bl	8006304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	4b32      	ldr	r3, [pc, #200]	@ (8003e6c <HAL_I2C_MspInit+0x12c>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	4a31      	ldr	r2, [pc, #196]	@ (8003e6c <HAL_I2C_MspInit+0x12c>)
 8003da8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dae:	4b2f      	ldr	r3, [pc, #188]	@ (8003e6c <HAL_I2C_MspInit+0x12c>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003dba:	e050      	b.n	8003e5e <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a2c      	ldr	r2, [pc, #176]	@ (8003e74 <HAL_I2C_MspInit+0x134>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d14b      	bne.n	8003e5e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	4b28      	ldr	r3, [pc, #160]	@ (8003e6c <HAL_I2C_MspInit+0x12c>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dce:	4a27      	ldr	r2, [pc, #156]	@ (8003e6c <HAL_I2C_MspInit+0x12c>)
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dd6:	4b25      	ldr	r3, [pc, #148]	@ (8003e6c <HAL_I2C_MspInit+0x12c>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	613b      	str	r3, [r7, #16]
 8003de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	4b21      	ldr	r3, [pc, #132]	@ (8003e6c <HAL_I2C_MspInit+0x12c>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	4a20      	ldr	r2, [pc, #128]	@ (8003e6c <HAL_I2C_MspInit+0x12c>)
 8003dec:	f043 0304 	orr.w	r3, r3, #4
 8003df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003df2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e6c <HAL_I2C_MspInit+0x12c>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003dfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e04:	2312      	movs	r3, #18
 8003e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e10:	2304      	movs	r3, #4
 8003e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e14:	f107 031c 	add.w	r3, r7, #28
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4815      	ldr	r0, [pc, #84]	@ (8003e70 <HAL_I2C_MspInit+0x130>)
 8003e1c:	f002 fa72 	bl	8006304 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e26:	2312      	movs	r3, #18
 8003e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e32:	2304      	movs	r3, #4
 8003e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e36:	f107 031c 	add.w	r3, r7, #28
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	480e      	ldr	r0, [pc, #56]	@ (8003e78 <HAL_I2C_MspInit+0x138>)
 8003e3e:	f002 fa61 	bl	8006304 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	60bb      	str	r3, [r7, #8]
 8003e46:	4b09      	ldr	r3, [pc, #36]	@ (8003e6c <HAL_I2C_MspInit+0x12c>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	4a08      	ldr	r2, [pc, #32]	@ (8003e6c <HAL_I2C_MspInit+0x12c>)
 8003e4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e52:	4b06      	ldr	r3, [pc, #24]	@ (8003e6c <HAL_I2C_MspInit+0x12c>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
}
 8003e5e:	bf00      	nop
 8003e60:	3730      	adds	r7, #48	@ 0x30
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40005400 	.word	0x40005400
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	40020400 	.word	0x40020400
 8003e74:	40005800 	.word	0x40005800
 8003e78:	40020800 	.word	0x40020800

08003e7c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08c      	sub	sp, #48	@ 0x30
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e84:	f107 031c 	add.w	r3, r7, #28
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	605a      	str	r2, [r3, #4]
 8003e8e:	609a      	str	r2, [r3, #8]
 8003e90:	60da      	str	r2, [r3, #12]
 8003e92:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a32      	ldr	r2, [pc, #200]	@ (8003f64 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d12d      	bne.n	8003efa <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	4b31      	ldr	r3, [pc, #196]	@ (8003f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea6:	4a30      	ldr	r2, [pc, #192]	@ (8003f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8003eae:	4b2e      	ldr	r3, [pc, #184]	@ (8003f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8003f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec2:	4a29      	ldr	r2, [pc, #164]	@ (8003f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eca:	4b27      	ldr	r3, [pc, #156]	@ (8003f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8003ed6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003edc:	2302      	movs	r3, #2
 8003ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eec:	f107 031c 	add.w	r3, r7, #28
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	481e      	ldr	r0, [pc, #120]	@ (8003f6c <HAL_TIM_Encoder_MspInit+0xf0>)
 8003ef4:	f002 fa06 	bl	8006304 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003ef8:	e030      	b.n	8003f5c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f02:	d12b      	bne.n	8003f5c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	4b17      	ldr	r3, [pc, #92]	@ (8003f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	4a16      	ldr	r2, [pc, #88]	@ (8003f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f14:	4b14      	ldr	r3, [pc, #80]	@ (8003f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	4b10      	ldr	r3, [pc, #64]	@ (8003f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f28:	4a0f      	ldr	r2, [pc, #60]	@ (8003f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f30:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <HAL_TIM_Encoder_MspInit+0xec>)
 8003f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f40:	2302      	movs	r3, #2
 8003f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f50:	f107 031c 	add.w	r3, r7, #28
 8003f54:	4619      	mov	r1, r3
 8003f56:	4805      	ldr	r0, [pc, #20]	@ (8003f6c <HAL_TIM_Encoder_MspInit+0xf0>)
 8003f58:	f002 f9d4 	bl	8006304 <HAL_GPIO_Init>
}
 8003f5c:	bf00      	nop
 8003f5e:	3730      	adds	r7, #48	@ 0x30
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40010000 	.word	0x40010000
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	40020000 	.word	0x40020000

08003f70 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8003fac <HAL_TIM_PWM_MspInit+0x3c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d10d      	bne.n	8003f9e <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb0 <HAL_TIM_PWM_MspInit+0x40>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	4a09      	ldr	r2, [pc, #36]	@ (8003fb0 <HAL_TIM_PWM_MspInit+0x40>)
 8003f8c:	f043 0302 	orr.w	r3, r3, #2
 8003f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f92:	4b07      	ldr	r3, [pc, #28]	@ (8003fb0 <HAL_TIM_PWM_MspInit+0x40>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40000400 	.word	0x40000400
 8003fb0:	40023800 	.word	0x40023800

08003fb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08a      	sub	sp, #40	@ 0x28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fbc:	f107 0314 	add.w	r3, r7, #20
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	609a      	str	r2, [r3, #8]
 8003fc8:	60da      	str	r2, [r3, #12]
 8003fca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a21      	ldr	r2, [pc, #132]	@ (8004058 <HAL_TIM_MspPostInit+0xa4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d13b      	bne.n	800404e <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]
 8003fda:	4b20      	ldr	r3, [pc, #128]	@ (800405c <HAL_TIM_MspPostInit+0xa8>)
 8003fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fde:	4a1f      	ldr	r2, [pc, #124]	@ (800405c <HAL_TIM_MspPostInit+0xa8>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800405c <HAL_TIM_MspPostInit+0xa8>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	613b      	str	r3, [r7, #16]
 8003ff0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	4b19      	ldr	r3, [pc, #100]	@ (800405c <HAL_TIM_MspPostInit+0xa8>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	4a18      	ldr	r2, [pc, #96]	@ (800405c <HAL_TIM_MspPostInit+0xa8>)
 8003ffc:	f043 0302 	orr.w	r3, r3, #2
 8004000:	6313      	str	r3, [r2, #48]	@ 0x30
 8004002:	4b16      	ldr	r3, [pc, #88]	@ (800405c <HAL_TIM_MspPostInit+0xa8>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800400e:	23c0      	movs	r3, #192	@ 0xc0
 8004010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004012:	2302      	movs	r3, #2
 8004014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800401a:	2300      	movs	r3, #0
 800401c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800401e:	2302      	movs	r3, #2
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004022:	f107 0314 	add.w	r3, r7, #20
 8004026:	4619      	mov	r1, r3
 8004028:	480d      	ldr	r0, [pc, #52]	@ (8004060 <HAL_TIM_MspPostInit+0xac>)
 800402a:	f002 f96b 	bl	8006304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800402e:	2303      	movs	r3, #3
 8004030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004032:	2302      	movs	r3, #2
 8004034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403a:	2300      	movs	r3, #0
 800403c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800403e:	2302      	movs	r3, #2
 8004040:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004042:	f107 0314 	add.w	r3, r7, #20
 8004046:	4619      	mov	r1, r3
 8004048:	4806      	ldr	r0, [pc, #24]	@ (8004064 <HAL_TIM_MspPostInit+0xb0>)
 800404a:	f002 f95b 	bl	8006304 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800404e:	bf00      	nop
 8004050:	3728      	adds	r7, #40	@ 0x28
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40000400 	.word	0x40000400
 800405c:	40023800 	.word	0x40023800
 8004060:	40020000 	.word	0x40020000
 8004064:	40020400 	.word	0x40020400

08004068 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08e      	sub	sp, #56	@ 0x38
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	609a      	str	r2, [r3, #8]
 800407c:	60da      	str	r2, [r3, #12]
 800407e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a66      	ldr	r2, [pc, #408]	@ (8004220 <HAL_UART_MspInit+0x1b8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d12c      	bne.n	80040e4 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800408a:	2300      	movs	r3, #0
 800408c:	623b      	str	r3, [r7, #32]
 800408e:	4b65      	ldr	r3, [pc, #404]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004092:	4a64      	ldr	r2, [pc, #400]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 8004094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004098:	6413      	str	r3, [r2, #64]	@ 0x40
 800409a:	4b62      	ldr	r3, [pc, #392]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a2:	623b      	str	r3, [r7, #32]
 80040a4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	4b5e      	ldr	r3, [pc, #376]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ae:	4a5d      	ldr	r2, [pc, #372]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80040c2:	230c      	movs	r3, #12
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c6:	2302      	movs	r3, #2
 80040c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ce:	2303      	movs	r3, #3
 80040d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040d2:	2307      	movs	r3, #7
 80040d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040da:	4619      	mov	r1, r3
 80040dc:	4852      	ldr	r0, [pc, #328]	@ (8004228 <HAL_UART_MspInit+0x1c0>)
 80040de:	f002 f911 	bl	8006304 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80040e2:	e099      	b.n	8004218 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a50      	ldr	r2, [pc, #320]	@ (800422c <HAL_UART_MspInit+0x1c4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d12d      	bne.n	800414a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	4b4c      	ldr	r3, [pc, #304]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	4a4b      	ldr	r2, [pc, #300]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 80040f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80040fe:	4b49      	ldr	r3, [pc, #292]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004102:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004106:	61bb      	str	r3, [r7, #24]
 8004108:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800410a:	2300      	movs	r3, #0
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	4b45      	ldr	r3, [pc, #276]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004112:	4a44      	ldr	r2, [pc, #272]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 8004114:	f043 0304 	orr.w	r3, r3, #4
 8004118:	6313      	str	r3, [r2, #48]	@ 0x30
 800411a:	4b42      	ldr	r3, [pc, #264]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8004126:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800412a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412c:	2302      	movs	r3, #2
 800412e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	2300      	movs	r3, #0
 8004132:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004134:	2303      	movs	r3, #3
 8004136:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004138:	2307      	movs	r3, #7
 800413a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800413c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004140:	4619      	mov	r1, r3
 8004142:	483b      	ldr	r0, [pc, #236]	@ (8004230 <HAL_UART_MspInit+0x1c8>)
 8004144:	f002 f8de 	bl	8006304 <HAL_GPIO_Init>
}
 8004148:	e066      	b.n	8004218 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a39      	ldr	r2, [pc, #228]	@ (8004234 <HAL_UART_MspInit+0x1cc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d161      	bne.n	8004218 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004154:	2300      	movs	r3, #0
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	4b32      	ldr	r3, [pc, #200]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 800415a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415c:	4a31      	ldr	r2, [pc, #196]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 800415e:	f043 0320 	orr.w	r3, r3, #32
 8004162:	6453      	str	r3, [r2, #68]	@ 0x44
 8004164:	4b2f      	ldr	r3, [pc, #188]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 8004166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	4b2b      	ldr	r3, [pc, #172]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 8004176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004178:	4a2a      	ldr	r2, [pc, #168]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 800417a:	f043 0304 	orr.w	r3, r3, #4
 800417e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004180:	4b28      	ldr	r3, [pc, #160]	@ (8004224 <HAL_UART_MspInit+0x1bc>)
 8004182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	60fb      	str	r3, [r7, #12]
 800418a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800418c:	23c0      	movs	r3, #192	@ 0xc0
 800418e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004190:	2302      	movs	r3, #2
 8004192:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004194:	2300      	movs	r3, #0
 8004196:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004198:	2303      	movs	r3, #3
 800419a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800419c:	2308      	movs	r3, #8
 800419e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041a4:	4619      	mov	r1, r3
 80041a6:	4822      	ldr	r0, [pc, #136]	@ (8004230 <HAL_UART_MspInit+0x1c8>)
 80041a8:	f002 f8ac 	bl	8006304 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80041ac:	4b22      	ldr	r3, [pc, #136]	@ (8004238 <HAL_UART_MspInit+0x1d0>)
 80041ae:	4a23      	ldr	r2, [pc, #140]	@ (800423c <HAL_UART_MspInit+0x1d4>)
 80041b0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80041b2:	4b21      	ldr	r3, [pc, #132]	@ (8004238 <HAL_UART_MspInit+0x1d0>)
 80041b4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80041b8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004238 <HAL_UART_MspInit+0x1d0>)
 80041bc:	2200      	movs	r2, #0
 80041be:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004238 <HAL_UART_MspInit+0x1d0>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004238 <HAL_UART_MspInit+0x1d0>)
 80041c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041cc:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004238 <HAL_UART_MspInit+0x1d0>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041d4:	4b18      	ldr	r3, [pc, #96]	@ (8004238 <HAL_UART_MspInit+0x1d0>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80041da:	4b17      	ldr	r3, [pc, #92]	@ (8004238 <HAL_UART_MspInit+0x1d0>)
 80041dc:	2200      	movs	r2, #0
 80041de:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041e0:	4b15      	ldr	r3, [pc, #84]	@ (8004238 <HAL_UART_MspInit+0x1d0>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041e6:	4b14      	ldr	r3, [pc, #80]	@ (8004238 <HAL_UART_MspInit+0x1d0>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80041ec:	4812      	ldr	r0, [pc, #72]	@ (8004238 <HAL_UART_MspInit+0x1d0>)
 80041ee:	f001 fd0d 	bl	8005c0c <HAL_DMA_Init>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <HAL_UART_MspInit+0x194>
      Error_Handler();
 80041f8:	f7fe fa5a 	bl	80026b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004238 <HAL_UART_MspInit+0x1d0>)
 8004200:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004202:	4a0d      	ldr	r2, [pc, #52]	@ (8004238 <HAL_UART_MspInit+0x1d0>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004208:	2200      	movs	r2, #0
 800420a:	2100      	movs	r1, #0
 800420c:	2047      	movs	r0, #71	@ 0x47
 800420e:	f001 fcc6 	bl	8005b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004212:	2047      	movs	r0, #71	@ 0x47
 8004214:	f001 fcdf 	bl	8005bd6 <HAL_NVIC_EnableIRQ>
}
 8004218:	bf00      	nop
 800421a:	3738      	adds	r7, #56	@ 0x38
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40004400 	.word	0x40004400
 8004224:	40023800 	.word	0x40023800
 8004228:	40020000 	.word	0x40020000
 800422c:	40004800 	.word	0x40004800
 8004230:	40020800 	.word	0x40020800
 8004234:	40011400 	.word	0x40011400
 8004238:	20000550 	.word	0x20000550
 800423c:	40026428 	.word	0x40026428

08004240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004244:	bf00      	nop
 8004246:	e7fd      	b.n	8004244 <NMI_Handler+0x4>

08004248 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800424c:	bf00      	nop
 800424e:	e7fd      	b.n	800424c <HardFault_Handler+0x4>

08004250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004254:	bf00      	nop
 8004256:	e7fd      	b.n	8004254 <MemManage_Handler+0x4>

08004258 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800425c:	bf00      	nop
 800425e:	e7fd      	b.n	800425c <BusFault_Handler+0x4>

08004260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004264:	bf00      	nop
 8004266:	e7fd      	b.n	8004264 <UsageFault_Handler+0x4>

08004268 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004276:	b480      	push	{r7}
 8004278:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800427a:	bf00      	nop
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004288:	bf00      	nop
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004298:	f000 ff52 	bl	8005140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick_accumulator += 1;  // Increment by 1 ms
 800429c:	4b0c      	ldr	r3, [pc, #48]	@ (80042d0 <SysTick_Handler+0x3c>)
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	3301      	adds	r3, #1
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	4b0a      	ldr	r3, [pc, #40]	@ (80042d0 <SysTick_Handler+0x3c>)
 80042a8:	701a      	strb	r2, [r3, #0]
  if(systick_function_enabled){
 80042aa:	4b0a      	ldr	r3, [pc, #40]	@ (80042d4 <SysTick_Handler+0x40>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d009      	beq.n	80042c8 <SysTick_Handler+0x34>
	  if (tick_accumulator >= TICK_INTERVAL) {
 80042b4:	4b06      	ldr	r3, [pc, #24]	@ (80042d0 <SysTick_Handler+0x3c>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b13      	cmp	r3, #19
 80042bc:	d904      	bls.n	80042c8 <SysTick_Handler+0x34>
	        tick_accumulator = 0;  // Accumulate remainder
 80042be:	4b04      	ldr	r3, [pc, #16]	@ (80042d0 <SysTick_Handler+0x3c>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]
	        SysTickFunction();
 80042c4:	f000 f908 	bl	80044d8 <SysTickFunction>
	      }
  }

  CheckEncoderCounts();
 80042c8:	f000 f93e 	bl	8004548 <CheckEncoderCounts>
  /* USER CODE END SysTick_IRQn 1 */
}
 80042cc:	bf00      	nop
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	20000962 	.word	0x20000962
 80042d4:	200005b0 	.word	0x200005b0

080042d8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80042dc:	2008      	movs	r0, #8
 80042de:	f002 f9bf 	bl	8006660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80042ea:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80042ee:	f002 f9b7 	bl	8006660 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80042f2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80042f6:	f002 f9b3 	bl	8006660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80042fa:	bf00      	nop
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004304:	4802      	ldr	r0, [pc, #8]	@ (8004310 <DMA2_Stream1_IRQHandler+0x10>)
 8004306:	f001 fdc1 	bl	8005e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800430a:	bf00      	nop
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000550 	.word	0x20000550

08004314 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_IRQn 0 */
  //HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */


	HAL_UART_IRQHandler(&huart6);
 8004318:	4802      	ldr	r0, [pc, #8]	@ (8004324 <USART6_IRQHandler+0x10>)
 800431a:	f005 fc1f 	bl	8009b5c <HAL_UART_IRQHandler>


  /* USER CODE END USART6_IRQn 1 */
}
 800431e:	bf00      	nop
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000508 	.word	0x20000508

08004328 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return 1;
 800432c:	2301      	movs	r3, #1
}
 800432e:	4618      	mov	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <_kill>:

int _kill(int pid, int sig)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004342:	f007 f8cf 	bl	800b4e4 <__errno>
 8004346:	4603      	mov	r3, r0
 8004348:	2216      	movs	r2, #22
 800434a:	601a      	str	r2, [r3, #0]
  return -1;
 800434c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <_exit>:

void _exit (int status)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004360:	f04f 31ff 	mov.w	r1, #4294967295
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff ffe7 	bl	8004338 <_kill>
  while (1) {}    /* Make sure we hang here */
 800436a:	bf00      	nop
 800436c:	e7fd      	b.n	800436a <_exit+0x12>

0800436e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b086      	sub	sp, #24
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e00a      	b.n	8004396 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004380:	f3af 8000 	nop.w
 8004384:	4601      	mov	r1, r0
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	60ba      	str	r2, [r7, #8]
 800438c:	b2ca      	uxtb	r2, r1
 800438e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	3301      	adds	r3, #1
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	429a      	cmp	r2, r3
 800439c:	dbf0      	blt.n	8004380 <_read+0x12>
  }

  return len;
 800439e:	687b      	ldr	r3, [r7, #4]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	e009      	b.n	80043ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	60ba      	str	r2, [r7, #8]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	3301      	adds	r3, #1
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	dbf1      	blt.n	80043ba <_write+0x12>
  }
  return len;
 80043d6:	687b      	ldr	r3, [r7, #4]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <_close>:

int _close(int file)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004408:	605a      	str	r2, [r3, #4]
  return 0;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <_isatty>:

int _isatty(int file)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004420:	2301      	movs	r3, #1
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800442e:	b480      	push	{r7}
 8004430:	b085      	sub	sp, #20
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004450:	4a14      	ldr	r2, [pc, #80]	@ (80044a4 <_sbrk+0x5c>)
 8004452:	4b15      	ldr	r3, [pc, #84]	@ (80044a8 <_sbrk+0x60>)
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800445c:	4b13      	ldr	r3, [pc, #76]	@ (80044ac <_sbrk+0x64>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004464:	4b11      	ldr	r3, [pc, #68]	@ (80044ac <_sbrk+0x64>)
 8004466:	4a12      	ldr	r2, [pc, #72]	@ (80044b0 <_sbrk+0x68>)
 8004468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800446a:	4b10      	ldr	r3, [pc, #64]	@ (80044ac <_sbrk+0x64>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4413      	add	r3, r2
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	429a      	cmp	r2, r3
 8004476:	d207      	bcs.n	8004488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004478:	f007 f834 	bl	800b4e4 <__errno>
 800447c:	4603      	mov	r3, r0
 800447e:	220c      	movs	r2, #12
 8004480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004482:	f04f 33ff 	mov.w	r3, #4294967295
 8004486:	e009      	b.n	800449c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004488:	4b08      	ldr	r3, [pc, #32]	@ (80044ac <_sbrk+0x64>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800448e:	4b07      	ldr	r3, [pc, #28]	@ (80044ac <_sbrk+0x64>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4413      	add	r3, r2
 8004496:	4a05      	ldr	r2, [pc, #20]	@ (80044ac <_sbrk+0x64>)
 8004498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800449a:	68fb      	ldr	r3, [r7, #12]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	20020000 	.word	0x20020000
 80044a8:	00000400 	.word	0x00000400
 80044ac:	20000964 	.word	0x20000964
 80044b0:	20000ec0 	.word	0x20000ec0

080044b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044b8:	4b06      	ldr	r3, [pc, #24]	@ (80044d4 <SystemInit+0x20>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044be:	4a05      	ldr	r2, [pc, #20]	@ (80044d4 <SystemInit+0x20>)
 80044c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80044c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044c8:	bf00      	nop
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <SysTickFunction>:
extern Motion motion;

extern volatile uint8_t systick_function_enabled;
extern UART_HandleTypeDef huart3;

void SysTickFunction(void) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	ed2d 8b02 	vpush	{d8}
 80044de:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */
	//--------------------------------------------------------------------
		update_Encoder_Data();
 80044e0:	f7fd fb6a 	bl	8001bb8 <update_Encoder_Data>
		Motion_Update(&motion);
 80044e4:	4810      	ldr	r0, [pc, #64]	@ (8004528 <SysTickFunction+0x50>)
 80044e6:	f7fe f9c7 	bl	8002878 <Motion_Update>
		Sensors_Update();
 80044ea:	f7ff f8d5 	bl	8003698 <Sensors_Update>

		UpdateControllers(&controller, Motion_Velocity(&motion), Motion_Omega(&motion), get_steering_feedback());
 80044ee:	480e      	ldr	r0, [pc, #56]	@ (8004528 <SysTickFunction+0x50>)
 80044f0:	f7fe f949 	bl	8002786 <Motion_Velocity>
 80044f4:	eeb0 8a40 	vmov.f32	s16, s0
 80044f8:	480b      	ldr	r0, [pc, #44]	@ (8004528 <SysTickFunction+0x50>)
 80044fa:	f7fe f954 	bl	80027a6 <Motion_Omega>
 80044fe:	eef0 8a40 	vmov.f32	s17, s0
 8004502:	f7ff f80f 	bl	8003524 <get_steering_feedback>
 8004506:	eef0 7a40 	vmov.f32	s15, s0
 800450a:	eeb0 1a67 	vmov.f32	s2, s15
 800450e:	eef0 0a68 	vmov.f32	s1, s17
 8004512:	eeb0 0a48 	vmov.f32	s0, s16
 8004516:	4805      	ldr	r0, [pc, #20]	@ (800452c <SysTickFunction+0x54>)
 8004518:	f7fd f8f4 	bl	8001704 <UpdateControllers>
		//UART_Transmit_Int(&huart3, "L", linecolorRPI);
		//UART_Transmit_Int(&huart3, "B", ballcolorRPI);



}
 800451c:	bf00      	nop
 800451e:	46bd      	mov	sp, r7
 8004520:	ecbd 8b02 	vpop	{d8}
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	200005e0 	.word	0x200005e0
 800452c:	20000694 	.word	0x20000694

08004530 <EnableSysTickFunction>:



void EnableSysTickFunction(void) {
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  //HAL_Delay(10);
  systick_function_enabled = 1;
 8004534:	4b03      	ldr	r3, [pc, #12]	@ (8004544 <EnableSysTickFunction+0x14>)
 8004536:	2201      	movs	r2, #1
 8004538:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10);
 800453a:	200a      	movs	r0, #10
 800453c:	f000 fe20 	bl	8005180 <HAL_Delay>
}
 8004540:	bf00      	nop
 8004542:	bd80      	pop	{r7, pc}
 8004544:	200005b0 	.word	0x200005b0

08004548 <CheckEncoderCounts>:
	//HAL_Delay(10);
  systick_function_enabled = 0;
  HAL_Delay(10);
}

void CheckEncoderCounts(void){
 8004548:	b590      	push	{r4, r7, lr}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
		 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
		 *
		 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
		 * turning. But that'll be approximately never in Micromouse :)
		 */
		if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 800454e:	f7fd fadb 	bl	8001b08 <getRightEncoderCounts>
 8004552:	4603      	mov	r3, r0
 8004554:	461a      	mov	r2, r3
 8004556:	f647 1318 	movw	r3, #31000	@ 0x7918
 800455a:	429a      	cmp	r2, r3
 800455c:	dc15      	bgt.n	800458a <CheckEncoderCounts+0x42>
 800455e:	f7fd fadf 	bl	8001b20 <getLeftEncoderCounts>
 8004562:	4603      	mov	r3, r0
 8004564:	461a      	mov	r2, r3
 8004566:	f647 1318 	movw	r3, #31000	@ 0x7918
 800456a:	429a      	cmp	r2, r3
 800456c:	dc0d      	bgt.n	800458a <CheckEncoderCounts+0x42>
				|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 800456e:	f7fd facb 	bl	8001b08 <getRightEncoderCounts>
 8004572:	4603      	mov	r3, r0
 8004574:	461a      	mov	r2, r3
 8004576:	4b0f      	ldr	r3, [pc, #60]	@ (80045b4 <CheckEncoderCounts+0x6c>)
 8004578:	429a      	cmp	r2, r3
 800457a:	db06      	blt.n	800458a <CheckEncoderCounts+0x42>
 800457c:	f7fd fad0 	bl	8001b20 <getLeftEncoderCounts>
 8004580:	4603      	mov	r3, r0
 8004582:	461a      	mov	r2, r3
 8004584:	4b0b      	ldr	r3, [pc, #44]	@ (80045b4 <CheckEncoderCounts+0x6c>)
 8004586:	429a      	cmp	r2, r3
 8004588:	da10      	bge.n	80045ac <CheckEncoderCounts+0x64>
			int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 800458a:	f7fd fabd 	bl	8001b08 <getRightEncoderCounts>
 800458e:	4603      	mov	r3, r0
 8004590:	b29c      	uxth	r4, r3
 8004592:	f7fd fac5 	bl	8001b20 <getLeftEncoderCounts>
 8004596:	4603      	mov	r3, r0
 8004598:	b29b      	uxth	r3, r3
 800459a:	1ae3      	subs	r3, r4, r3
 800459c:	b29b      	uxth	r3, r3
 800459e:	80fb      	strh	r3, [r7, #6]
			resetEncodersinSystick();
 80045a0:	f7fd fafa 	bl	8001b98 <resetEncodersinSystick>
			TIM1->CNT = (int16_t) difference;
 80045a4:	4a04      	ldr	r2, [pc, #16]	@ (80045b8 <CheckEncoderCounts+0x70>)
 80045a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045aa:	6253      	str	r3, [r2, #36]	@ 0x24
		}
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd90      	pop	{r4, r7, pc}
 80045b4:	ffff86e8 	.word	0xffff86e8
 80045b8:	40010000 	.word	0x40010000

080045bc <Reset_Handler>:
 80045bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80045f4 <LoopFillZerobss+0xe>
 80045c0:	f7ff ff78 	bl	80044b4 <SystemInit>
 80045c4:	480c      	ldr	r0, [pc, #48]	@ (80045f8 <LoopFillZerobss+0x12>)
 80045c6:	490d      	ldr	r1, [pc, #52]	@ (80045fc <LoopFillZerobss+0x16>)
 80045c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004600 <LoopFillZerobss+0x1a>)
 80045ca:	2300      	movs	r3, #0
 80045cc:	e002      	b.n	80045d4 <LoopCopyDataInit>

080045ce <CopyDataInit>:
 80045ce:	58d4      	ldr	r4, [r2, r3]
 80045d0:	50c4      	str	r4, [r0, r3]
 80045d2:	3304      	adds	r3, #4

080045d4 <LoopCopyDataInit>:
 80045d4:	18c4      	adds	r4, r0, r3
 80045d6:	428c      	cmp	r4, r1
 80045d8:	d3f9      	bcc.n	80045ce <CopyDataInit>
 80045da:	4a0a      	ldr	r2, [pc, #40]	@ (8004604 <LoopFillZerobss+0x1e>)
 80045dc:	4c0a      	ldr	r4, [pc, #40]	@ (8004608 <LoopFillZerobss+0x22>)
 80045de:	2300      	movs	r3, #0
 80045e0:	e001      	b.n	80045e6 <LoopFillZerobss>

080045e2 <FillZerobss>:
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	3204      	adds	r2, #4

080045e6 <LoopFillZerobss>:
 80045e6:	42a2      	cmp	r2, r4
 80045e8:	d3fb      	bcc.n	80045e2 <FillZerobss>
 80045ea:	f006 ff81 	bl	800b4f0 <__libc_init_array>
 80045ee:	f7fd fc39 	bl	8001e64 <main>
 80045f2:	4770      	bx	lr
 80045f4:	20020000 	.word	0x20020000
 80045f8:	20000000 	.word	0x20000000
 80045fc:	20000234 	.word	0x20000234
 8004600:	0800df94 	.word	0x0800df94
 8004604:	20000234 	.word	0x20000234
 8004608:	20000ec0 	.word	0x20000ec0

0800460c <ADC_IRQHandler>:
 800460c:	e7fe      	b.n	800460c <ADC_IRQHandler>
	...

08004610 <Buzzer_On>:
#include "buzzer.h"
#include "main.h"

// Turn on the buzzer (PC15 high)
void Buzzer_On(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8004614:	2201      	movs	r2, #1
 8004616:	2120      	movs	r1, #32
 8004618:	4802      	ldr	r0, [pc, #8]	@ (8004624 <Buzzer_On+0x14>)
 800461a:	f002 f807 	bl	800662c <HAL_GPIO_WritePin>
}
 800461e:	bf00      	nop
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40020000 	.word	0x40020000

08004628 <Buzzer_Off>:

// Turn off the buzzer (PC15 low)
void Buzzer_Off(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800462c:	2200      	movs	r2, #0
 800462e:	2120      	movs	r1, #32
 8004630:	4802      	ldr	r0, [pc, #8]	@ (800463c <Buzzer_Off+0x14>)
 8004632:	f001 fffb 	bl	800662c <HAL_GPIO_WritePin>
}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40020000 	.word	0x40020000

08004640 <Buzzer_Toggle>:

// Toggle the buzzer state with a specified delay
void Buzzer_Toggle(uint32_t delay)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
    Buzzer_On();
 8004648:	f7ff ffe2 	bl	8004610 <Buzzer_On>
    HAL_Delay(delay);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fd97 	bl	8005180 <HAL_Delay>
    Buzzer_Off();
 8004652:	f7ff ffe9 	bl	8004628 <Buzzer_Off>
    HAL_Delay(delay);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fd92 	bl	8005180 <HAL_Delay>
}
 800465c:	bf00      	nop
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <Buzzer_UniquePattern>:

void Buzzer_UniquePattern(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
    // Pattern: Short-Short-Long-Short-Long
    // Total duration: 1000ms (1 second)

    Buzzer_On();
 8004668:	f7ff ffd2 	bl	8004610 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 800466c:	2064      	movs	r0, #100	@ 0x64
 800466e:	f000 fd87 	bl	8005180 <HAL_Delay>
    Buzzer_Off();
 8004672:	f7ff ffd9 	bl	8004628 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 8004676:	2064      	movs	r0, #100	@ 0x64
 8004678:	f000 fd82 	bl	8005180 <HAL_Delay>

    Buzzer_On();
 800467c:	f7ff ffc8 	bl	8004610 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 8004680:	2064      	movs	r0, #100	@ 0x64
 8004682:	f000 fd7d 	bl	8005180 <HAL_Delay>
    Buzzer_Off();
 8004686:	f7ff ffcf 	bl	8004628 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800468a:	2064      	movs	r0, #100	@ 0x64
 800468c:	f000 fd78 	bl	8005180 <HAL_Delay>

    Buzzer_On();
 8004690:	f7ff ffbe 	bl	8004610 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 8004694:	20c8      	movs	r0, #200	@ 0xc8
 8004696:	f000 fd73 	bl	8005180 <HAL_Delay>
    Buzzer_Off();
 800469a:	f7ff ffc5 	bl	8004628 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800469e:	2064      	movs	r0, #100	@ 0x64
 80046a0:	f000 fd6e 	bl	8005180 <HAL_Delay>

    Buzzer_On();
 80046a4:	f7ff ffb4 	bl	8004610 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 80046a8:	2064      	movs	r0, #100	@ 0x64
 80046aa:	f000 fd69 	bl	8005180 <HAL_Delay>
    Buzzer_Off();
 80046ae:	f7ff ffbb 	bl	8004628 <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 80046b2:	2064      	movs	r0, #100	@ 0x64
 80046b4:	f000 fd64 	bl	8005180 <HAL_Delay>

    Buzzer_On();
 80046b8:	f7ff ffaa 	bl	8004610 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 80046bc:	20c8      	movs	r0, #200	@ 0xc8
 80046be:	f000 fd5f 	bl	8005180 <HAL_Delay>
    Buzzer_Off();
 80046c2:	f7ff ffb1 	bl	8004628 <Buzzer_Off>
    // No delay at the end to make it exactly 1 second
}
 80046c6:	bf00      	nop
 80046c8:	bd80      	pop	{r7, pc}

080046ca <Buzzer_ErrorPattern>:
    Buzzer_Off();
}


void Buzzer_ErrorPattern(void)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
    // Three short beeps
    for (int i = 0; i < 3; i++) {
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	e00c      	b.n	80046f0 <Buzzer_ErrorPattern+0x26>
        Buzzer_On();
 80046d6:	f7ff ff9b 	bl	8004610 <Buzzer_On>
        HAL_Delay(100);
 80046da:	2064      	movs	r0, #100	@ 0x64
 80046dc:	f000 fd50 	bl	8005180 <HAL_Delay>
        Buzzer_Off();
 80046e0:	f7ff ffa2 	bl	8004628 <Buzzer_Off>
        HAL_Delay(100);
 80046e4:	2064      	movs	r0, #100	@ 0x64
 80046e6:	f000 fd4b 	bl	8005180 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3301      	adds	r3, #1
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	ddef      	ble.n	80046d6 <Buzzer_ErrorPattern+0xc>
    }

    // Three long beeps
    for (int i = 0; i < 3; i++) {
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	e00d      	b.n	8004718 <Buzzer_ErrorPattern+0x4e>
        Buzzer_On();
 80046fc:	f7ff ff88 	bl	8004610 <Buzzer_On>
        HAL_Delay(300);
 8004700:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8004704:	f000 fd3c 	bl	8005180 <HAL_Delay>
        Buzzer_Off();
 8004708:	f7ff ff8e 	bl	8004628 <Buzzer_Off>
        HAL_Delay(100);
 800470c:	2064      	movs	r0, #100	@ 0x64
 800470e:	f000 fd37 	bl	8005180 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	3301      	adds	r3, #1
 8004716:	60bb      	str	r3, [r7, #8]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b02      	cmp	r3, #2
 800471c:	ddee      	ble.n	80046fc <Buzzer_ErrorPattern+0x32>
    }

    // Three short beeps again
    for (int i = 0; i < 3; i++) {
 800471e:	2300      	movs	r3, #0
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	e00c      	b.n	800473e <Buzzer_ErrorPattern+0x74>
        Buzzer_On();
 8004724:	f7ff ff74 	bl	8004610 <Buzzer_On>
        HAL_Delay(100);
 8004728:	2064      	movs	r0, #100	@ 0x64
 800472a:	f000 fd29 	bl	8005180 <HAL_Delay>
        Buzzer_Off();
 800472e:	f7ff ff7b 	bl	8004628 <Buzzer_Off>
        HAL_Delay(100);
 8004732:	2064      	movs	r0, #100	@ 0x64
 8004734:	f000 fd24 	bl	8005180 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3301      	adds	r3, #1
 800473c:	607b      	str	r3, [r7, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b02      	cmp	r3, #2
 8004742:	ddef      	ble.n	8004724 <Buzzer_ErrorPattern+0x5a>
    }

    // 1-second pause before repeating
    HAL_Delay(1000);
 8004744:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004748:	f000 fd1a 	bl	8005180 <HAL_Delay>
}
 800474c:	bf00      	nop
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <i2c_mux_select>:

	// Ensure all channels are disabled by default
	return i2c_mux_select_multi(mux, 0);
}

int i2c_mux_select(i2c_mux_t* mux, int ch) {
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]

	// If ch is in range 0-7 then one channel is enabled, else all are disabled
	uint8_t mask = 1 << ch;
 800475e:	2201      	movs	r2, #1
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	73fb      	strb	r3, [r7, #15]
	return i2c_mux_select_multi(mux, mask);
 8004768:	7bfb      	ldrb	r3, [r7, #15]
 800476a:	4619      	mov	r1, r3
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f805 	bl	800477c <i2c_mux_select_multi>
 8004772:	4603      	mov	r3, r0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <i2c_mux_select_multi>:

int i2c_mux_select_multi(i2c_mux_t* mux, uint8_t mask) {
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af02      	add	r7, sp, #8
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	70fb      	strb	r3, [r7, #3]
	if (mux->hi2c == NULL) return 1;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <i2c_mux_select_multi+0x18>
 8004790:	2301      	movs	r3, #1
 8004792:	e02f      	b.n	80047f4 <i2c_mux_select_multi+0x78>

	// Transmit bitmask to multiplexer
	uint8_t addr = (I2C_MUX_BASE_ADDR + mux->addr_offset) << 1;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	7a9b      	ldrb	r3, [r3, #10]
 8004798:	3370      	adds	r3, #112	@ 0x70
 800479a:	b2db      	uxtb	r3, r3
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef res;
	res = HAL_I2C_Master_Transmit(mux->hi2c, addr, &mask, 1, I2C_MUX_TIMEOUT);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	b299      	uxth	r1, r3
 80047a8:	1cfa      	adds	r2, r7, #3
 80047aa:	2301      	movs	r3, #1
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	2301      	movs	r3, #1
 80047b0:	f002 f8b2 	bl	8006918 <HAL_I2C_Master_Transmit>
 80047b4:	4603      	mov	r3, r0
 80047b6:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK) return 1;
 80047b8:	7bbb      	ldrb	r3, [r7, #14]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <i2c_mux_select_multi+0x46>
 80047be:	2301      	movs	r3, #1
 80047c0:	e018      	b.n	80047f4 <i2c_mux_select_multi+0x78>

	// Read back bitmask from multiplexer to verify
	uint8_t mask_check = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	737b      	strb	r3, [r7, #13]
	res = HAL_I2C_Master_Receive(mux->hi2c, addr, &mask_check, 1, I2C_MUX_TIMEOUT);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	b299      	uxth	r1, r3
 80047ce:	f107 020d 	add.w	r2, r7, #13
 80047d2:	2301      	movs	r3, #1
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	2301      	movs	r3, #1
 80047d8:	f002 f99c 	bl	8006b14 <HAL_I2C_Master_Receive>
 80047dc:	4603      	mov	r3, r0
 80047de:	73bb      	strb	r3, [r7, #14]
	if (res != HAL_OK || mask_check != mask) return 1;
 80047e0:	7bbb      	ldrb	r3, [r7, #14]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d103      	bne.n	80047ee <i2c_mux_select_multi+0x72>
 80047e6:	7b7a      	ldrb	r2, [r7, #13]
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d001      	beq.n	80047f2 <i2c_mux_select_multi+0x76>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <i2c_mux_select_multi+0x78>
	return 0;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <AnalogMux_SelectChannel>:
/**
 * @brief Select a channel on the multiplexer
 * @param channel Channel number (0-15)
 */
void AnalogMux_SelectChannel(uint8_t channel)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	71fb      	strb	r3, [r7, #7]
    // Ensure channel is within valid range (0-15)
    if (channel > 15)
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	2b0f      	cmp	r3, #15
 800480a:	d901      	bls.n	8004810 <AnalogMux_SelectChannel+0x14>
        channel = 15;
 800480c:	230f      	movs	r3, #15
 800480e:	71fb      	strb	r3, [r7, #7]

    // Set S0 (least significant bit)
    if (channel & 0x01)
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d006      	beq.n	8004828 <AnalogMux_SelectChannel+0x2c>
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_SET);
 800481a:	2201      	movs	r2, #1
 800481c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004820:	4823      	ldr	r0, [pc, #140]	@ (80048b0 <AnalogMux_SelectChannel+0xb4>)
 8004822:	f001 ff03 	bl	800662c <HAL_GPIO_WritePin>
 8004826:	e005      	b.n	8004834 <AnalogMux_SelectChannel+0x38>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_RESET);
 8004828:	2200      	movs	r2, #0
 800482a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800482e:	4820      	ldr	r0, [pc, #128]	@ (80048b0 <AnalogMux_SelectChannel+0xb4>)
 8004830:	f001 fefc 	bl	800662c <HAL_GPIO_WritePin>

    // Set S1
    if (channel & 0x02)
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d006      	beq.n	800484c <AnalogMux_SelectChannel+0x50>
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_SET);
 800483e:	2201      	movs	r2, #1
 8004840:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004844:	481a      	ldr	r0, [pc, #104]	@ (80048b0 <AnalogMux_SelectChannel+0xb4>)
 8004846:	f001 fef1 	bl	800662c <HAL_GPIO_WritePin>
 800484a:	e005      	b.n	8004858 <AnalogMux_SelectChannel+0x5c>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_RESET);
 800484c:	2200      	movs	r2, #0
 800484e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004852:	4817      	ldr	r0, [pc, #92]	@ (80048b0 <AnalogMux_SelectChannel+0xb4>)
 8004854:	f001 feea 	bl	800662c <HAL_GPIO_WritePin>

    // Set S2
    if (channel & 0x04)
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d006      	beq.n	8004870 <AnalogMux_SelectChannel+0x74>
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_SET);
 8004862:	2201      	movs	r2, #1
 8004864:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004868:	4811      	ldr	r0, [pc, #68]	@ (80048b0 <AnalogMux_SelectChannel+0xb4>)
 800486a:	f001 fedf 	bl	800662c <HAL_GPIO_WritePin>
 800486e:	e005      	b.n	800487c <AnalogMux_SelectChannel+0x80>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_RESET);
 8004870:	2200      	movs	r2, #0
 8004872:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004876:	480e      	ldr	r0, [pc, #56]	@ (80048b0 <AnalogMux_SelectChannel+0xb4>)
 8004878:	f001 fed8 	bl	800662c <HAL_GPIO_WritePin>

    // Set S3 (most significant bit)
    if (channel & 0x08)
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d006      	beq.n	8004894 <AnalogMux_SelectChannel+0x98>
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_SET);
 8004886:	2201      	movs	r2, #1
 8004888:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800488c:	4808      	ldr	r0, [pc, #32]	@ (80048b0 <AnalogMux_SelectChannel+0xb4>)
 800488e:	f001 fecd 	bl	800662c <HAL_GPIO_WritePin>
 8004892:	e005      	b.n	80048a0 <AnalogMux_SelectChannel+0xa4>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_RESET);
 8004894:	2200      	movs	r2, #0
 8004896:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800489a:	4805      	ldr	r0, [pc, #20]	@ (80048b0 <AnalogMux_SelectChannel+0xb4>)
 800489c:	f001 fec6 	bl	800662c <HAL_GPIO_WritePin>

    // Add short delay for the multiplexer to settle
    // Typically 0.5-1 microsecond is enough for the CD74HC4067
    delayMicroseconds(1);
 80048a0:	2001      	movs	r0, #1
 80048a2:	f7fd f913 	bl	8001acc <delayMicroseconds>
}
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40020400 	.word	0x40020400

080048b4 <AnalogMux_ReadADC>:
/**
 * @brief Read the ADC value from the currently selected channel
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadADC(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
    uint16_t adcValue = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	80fb      	strh	r3, [r7, #6]

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 80048be:	480b      	ldr	r0, [pc, #44]	@ (80048ec <AnalogMux_ReadADC+0x38>)
 80048c0:	f000 fcc6 	bl	8005250 <HAL_ADC_Start>

    // Wait for conversion to complete (timeout after 100 cycles)
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 80048c4:	2164      	movs	r1, #100	@ 0x64
 80048c6:	4809      	ldr	r0, [pc, #36]	@ (80048ec <AnalogMux_ReadADC+0x38>)
 80048c8:	f000 fdc7 	bl	800545a <HAL_ADC_PollForConversion>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d104      	bne.n	80048dc <AnalogMux_ReadADC+0x28>
    {
        // Read the converted value
        adcValue = HAL_ADC_GetValue(&hadc1);
 80048d2:	4806      	ldr	r0, [pc, #24]	@ (80048ec <AnalogMux_ReadADC+0x38>)
 80048d4:	f000 fe4c 	bl	8005570 <HAL_ADC_GetValue>
 80048d8:	4603      	mov	r3, r0
 80048da:	80fb      	strh	r3, [r7, #6]
    }

    // Stop ADC conversion
    HAL_ADC_Stop(&hadc1);
 80048dc:	4803      	ldr	r0, [pc, #12]	@ (80048ec <AnalogMux_ReadADC+0x38>)
 80048de:	f000 fd89 	bl	80053f4 <HAL_ADC_Stop>

    return adcValue;
 80048e2:	88fb      	ldrh	r3, [r7, #6]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	200002b0 	.word	0x200002b0

080048f0 <AnalogMux_ReadChannel>:
 * @brief Read ADC value from a specific channel (selects channel then reads)
 * @param channel Channel number (0-15)
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadChannel(uint8_t channel)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	71fb      	strb	r3, [r7, #7]
    // Select the desired channel
    AnalogMux_SelectChannel(channel);
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff ff7d 	bl	80047fc <AnalogMux_SelectChannel>

    // Allow settling time for the analog signal
    delayMicroseconds(5);
 8004902:	2005      	movs	r0, #5
 8004904:	f7fd f8e2 	bl	8001acc <delayMicroseconds>

    // Read and return the ADC value
    return AnalogMux_ReadADC();
 8004908:	f7ff ffd4 	bl	80048b4 <AnalogMux_ReadADC>
 800490c:	4603      	mov	r3, r0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <PCA9685_SetBit>:
  * @param  Bit: Bit position to modify (0-7)
  * @param  Value: Value to set (0 or 1)
  * @retval None
  */
void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af04      	add	r7, sp, #16
 800491e:	4603      	mov	r3, r0
 8004920:	71fb      	strb	r3, [r7, #7]
 8004922:	460b      	mov	r3, r1
 8004924:	71bb      	strb	r3, [r7, #6]
 8004926:	4613      	mov	r3, r2
 8004928:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800492a:	79fb      	ldrb	r3, [r7, #7]
 800492c:	b29a      	uxth	r2, r3
 800492e:	230a      	movs	r3, #10
 8004930:	9302      	str	r3, [sp, #8]
 8004932:	2301      	movs	r3, #1
 8004934:	9301      	str	r3, [sp, #4]
 8004936:	f107 030f 	add.w	r3, r7, #15
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	2301      	movs	r3, #1
 800493e:	2180      	movs	r1, #128	@ 0x80
 8004940:	4819      	ldr	r0, [pc, #100]	@ (80049a8 <PCA9685_SetBit+0x90>)
 8004942:	f002 fc13 	bl	800716c <HAL_I2C_Mem_Read>
  if (Value == 0)
 8004946:	797b      	ldrb	r3, [r7, #5]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10d      	bne.n	8004968 <PCA9685_SetBit+0x50>
    readValue &= ~(1 << Bit);
 800494c:	79bb      	ldrb	r3, [r7, #6]
 800494e:	2201      	movs	r2, #1
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	b25b      	sxtb	r3, r3
 8004956:	43db      	mvns	r3, r3
 8004958:	b25a      	sxtb	r2, r3
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	b25b      	sxtb	r3, r3
 800495e:	4013      	ands	r3, r2
 8004960:	b25b      	sxtb	r3, r3
 8004962:	b2db      	uxtb	r3, r3
 8004964:	73fb      	strb	r3, [r7, #15]
 8004966:	e00a      	b.n	800497e <PCA9685_SetBit+0x66>
  else
    readValue |= (1 << Bit);
 8004968:	79bb      	ldrb	r3, [r7, #6]
 800496a:	2201      	movs	r2, #1
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	b25a      	sxtb	r2, r3
 8004972:	7bfb      	ldrb	r3, [r7, #15]
 8004974:	b25b      	sxtb	r3, r3
 8004976:	4313      	orrs	r3, r2
 8004978:	b25b      	sxtb	r3, r3
 800497a:	b2db      	uxtb	r3, r3
 800497c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	b29a      	uxth	r2, r3
 8004982:	230a      	movs	r3, #10
 8004984:	9302      	str	r3, [sp, #8]
 8004986:	2301      	movs	r3, #1
 8004988:	9301      	str	r3, [sp, #4]
 800498a:	f107 030f 	add.w	r3, r7, #15
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	2301      	movs	r3, #1
 8004992:	2180      	movs	r1, #128	@ 0x80
 8004994:	4804      	ldr	r0, [pc, #16]	@ (80049a8 <PCA9685_SetBit+0x90>)
 8004996:	f002 faef 	bl	8006f78 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 800499a:	2001      	movs	r0, #1
 800499c:	f000 fbf0 	bl	8005180 <HAL_Delay>
}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	2000034c 	.word	0x2000034c

080049ac <PCA9685_SetPWMFrequency>:
  * @brief  Set PWM frequency (24Hz to 1526Hz)
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b088      	sub	sp, #32
 80049b0:	af04      	add	r7, sp, #16
 80049b2:	4603      	mov	r3, r0
 80049b4:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;

  // Ensure frequency is within valid range
  if(frequency >= 1526)
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 80049bc:	4293      	cmp	r3, r2
 80049be:	d902      	bls.n	80049c6 <PCA9685_SetPWMFrequency+0x1a>
    prescale = 0x03;  // Maximum frequency (1526Hz)
 80049c0:	2303      	movs	r3, #3
 80049c2:	73fb      	strb	r3, [r7, #15]
 80049c4:	e00c      	b.n	80049e0 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24)
 80049c6:	88fb      	ldrh	r3, [r7, #6]
 80049c8:	2b18      	cmp	r3, #24
 80049ca:	d802      	bhi.n	80049d2 <PCA9685_SetPWMFrequency+0x26>
    prescale = 0xFF;  // Minimum frequency (24Hz)
 80049cc:	23ff      	movs	r3, #255	@ 0xff
 80049ce:	73fb      	strb	r3, [r7, #15]
 80049d0:	e006      	b.n	80049e0 <PCA9685_SetPWMFrequency+0x34>
  else
    // Calculate prescale value based on 25MHz internal oscillator
    prescale = (uint8_t)(25000000 / (4096 * frequency));
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	031b      	lsls	r3, r3, #12
 80049d6:	4a12      	ldr	r2, [pc, #72]	@ (8004a20 <PCA9685_SetPWMFrequency+0x74>)
 80049d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	73fb      	strb	r3, [r7, #15]

  // Enter sleep mode before changing the frequency
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 80049e0:	2201      	movs	r2, #1
 80049e2:	2104      	movs	r1, #4
 80049e4:	2000      	movs	r0, #0
 80049e6:	f7ff ff97 	bl	8004918 <PCA9685_SetBit>

  // Set the prescale value
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 80049ea:	230a      	movs	r3, #10
 80049ec:	9302      	str	r3, [sp, #8]
 80049ee:	2301      	movs	r3, #1
 80049f0:	9301      	str	r3, [sp, #4]
 80049f2:	f107 030f 	add.w	r3, r7, #15
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	2301      	movs	r3, #1
 80049fa:	22fe      	movs	r2, #254	@ 0xfe
 80049fc:	2180      	movs	r1, #128	@ 0x80
 80049fe:	4809      	ldr	r0, [pc, #36]	@ (8004a24 <PCA9685_SetPWMFrequency+0x78>)
 8004a00:	f002 faba 	bl	8006f78 <HAL_I2C_Mem_Write>

  // Exit sleep mode
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8004a04:	2200      	movs	r2, #0
 8004a06:	2104      	movs	r1, #4
 8004a08:	2000      	movs	r0, #0
 8004a0a:	f7ff ff85 	bl	8004918 <PCA9685_SetBit>

  // Restart all PWM channels
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 8004a0e:	2201      	movs	r2, #1
 8004a10:	2107      	movs	r1, #7
 8004a12:	2000      	movs	r0, #0
 8004a14:	f7ff ff80 	bl	8004918 <PCA9685_SetBit>
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	017d7840 	.word	0x017d7840
 8004a24:	2000034c 	.word	0x2000034c

08004a28 <PCA9685_Init>:
  * @brief  Initialize PCA9685 with specified frequency
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_Init(uint16_t frequency)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	80fb      	strh	r3, [r7, #6]
  // Set desired PWM frequency (usually 50Hz for standard servos)
  PCA9685_SetPWMFrequency(frequency);
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff ffb9 	bl	80049ac <PCA9685_SetPWMFrequency>

  // Enable Auto-Increment for efficient register writing
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	2105      	movs	r1, #5
 8004a3e:	2000      	movs	r0, #0
 8004a40:	f7ff ff6a 	bl	8004918 <PCA9685_SetBit>
}
 8004a44:	bf00      	nop
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <PCA9685_SetPWM>:
  * @param  OnTime: Value between 0-4095 for ON time
  * @param  OffTime: Value between 0-4095 for OFF time
  * @retval None
  */
void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b088      	sub	sp, #32
 8004a50:	af04      	add	r7, sp, #16
 8004a52:	4603      	mov	r3, r0
 8004a54:	71fb      	strb	r3, [r7, #7]
 8004a56:	460b      	mov	r3, r1
 8004a58:	80bb      	strh	r3, [r7, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];

  // Calculate register address for the specified channel
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	3306      	adds	r3, #6
 8004a66:	73fb      	strb	r3, [r7, #15]

  // Prepare data bytes for ON and OFF times
  pwm[0] = OnTime & 0xFF;         // ON Low byte
 8004a68:	88bb      	ldrh	r3, [r7, #4]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	723b      	strb	r3, [r7, #8]
  pwm[1] = (OnTime >> 8) & 0xFF;  // ON High byte
 8004a6e:	88bb      	ldrh	r3, [r7, #4]
 8004a70:	0a1b      	lsrs	r3, r3, #8
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;        // OFF Low byte
 8004a78:	887b      	ldrh	r3, [r7, #2]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	72bb      	strb	r3, [r7, #10]
  pwm[3] = (OffTime >> 8) & 0xFF; // OFF High byte
 8004a7e:	887b      	ldrh	r3, [r7, #2]
 8004a80:	0a1b      	lsrs	r3, r3, #8
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	72fb      	strb	r3, [r7, #11]

  // Write all 4 bytes in a single I2C transaction
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	230a      	movs	r3, #10
 8004a8e:	9302      	str	r3, [sp, #8]
 8004a90:	2304      	movs	r3, #4
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	f107 0308 	add.w	r3, r7, #8
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	2180      	movs	r1, #128	@ 0x80
 8004a9e:	4803      	ldr	r0, [pc, #12]	@ (8004aac <PCA9685_SetPWM+0x60>)
 8004aa0:	f002 fa6a 	bl	8006f78 <HAL_I2C_Mem_Write>
}
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	2000034c 	.word	0x2000034c

08004ab0 <PCA9685_SetServoAngle>:
  * @param  Channel: Channel number (0-15)
  * @param  Angle: Desired angle (0-180 degrees)
  * @retval None
  */
void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	ed87 0a00 	vstr	s0, [r7]
 8004abc:	71fb      	strb	r3, [r7, #7]
  float pwmValue;

  // Limit angle to 0-180 range
  if (Angle < 0) Angle = 0;
 8004abe:	edd7 7a00 	vldr	s15, [r7]
 8004ac2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aca:	d502      	bpl.n	8004ad2 <PCA9685_SetServoAngle+0x22>
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	603b      	str	r3, [r7, #0]
  if (Angle > 180) Angle = 180;
 8004ad2:	edd7 7a00 	vldr	s15, [r7]
 8004ad6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8004b60 <PCA9685_SetServoAngle+0xb0>
 8004ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae2:	dd01      	ble.n	8004ae8 <PCA9685_SetServoAngle+0x38>
 8004ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8004b64 <PCA9685_SetServoAngle+0xb4>)
 8004ae6:	603b      	str	r3, [r7, #0]

  // Convert angle to PWM value
  // At 50Hz: 0° = 102.4 value (0.5ms), 180° = 511.9 value (2.5ms)
  pwmValue = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8004ae8:	6838      	ldr	r0, [r7, #0]
 8004aea:	f7fb fd4d 	bl	8000588 <__aeabi_f2d>
 8004aee:	a318      	add	r3, pc, #96	@ (adr r3, 8004b50 <PCA9685_SetServoAngle+0xa0>)
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	f7fb fda0 	bl	8000638 <__aeabi_dmul>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4610      	mov	r0, r2
 8004afe:	4619      	mov	r1, r3
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	4b18      	ldr	r3, [pc, #96]	@ (8004b68 <PCA9685_SetServoAngle+0xb8>)
 8004b06:	f7fb fec1 	bl	800088c <__aeabi_ddiv>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	a311      	add	r3, pc, #68	@ (adr r3, 8004b58 <PCA9685_SetServoAngle+0xa8>)
 8004b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b18:	f7fb fbd8 	bl	80002cc <__adddf3>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4610      	mov	r0, r2
 8004b22:	4619      	mov	r1, r3
 8004b24:	f7fc f860 	bl	8000be8 <__aeabi_d2f>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	60fb      	str	r3, [r7, #12]

  // Set PWM with calculated value
  PCA9685_SetPWM(Channel, 0, (uint16_t)pwmValue);
 8004b2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b34:	ee17 3a90 	vmov	r3, s15
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	79fb      	ldrb	r3, [r7, #7]
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff ff84 	bl	8004a4c <PCA9685_SetPWM>
}
 8004b44:	bf00      	nop
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	f3af 8000 	nop.w
 8004b50:	00000000 	.word	0x00000000
 8004b54:	40799800 	.word	0x40799800
 8004b58:	9999999a 	.word	0x9999999a
 8004b5c:	40599999 	.word	0x40599999
 8004b60:	43340000 	.word	0x43340000
 8004b64:	43340000 	.word	0x43340000
 8004b68:	40668000 	.word	0x40668000

08004b6c <Init_Display>:

#include "display.h"

char bufnum[7];

void Init_Display(){
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af02      	add	r7, sp, #8
	SSD1306_Init();
 8004b72:	f000 f811 	bl	8004b98 <SSD1306_Init>
	SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 8004b76:	2301      	movs	r3, #1
 8004b78:	9301      	str	r3, [sp, #4]
 8004b7a:	2340      	movs	r3, #64	@ 0x40
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	2380      	movs	r3, #128	@ 0x80
 8004b80:	4a04      	ldr	r2, [pc, #16]	@ (8004b94 <Init_Display+0x28>)
 8004b82:	2100      	movs	r1, #0
 8004b84:	2000      	movs	r0, #0
 8004b86:	f000 f977 	bl	8004e78 <SSD1306_DrawBitmap>
	SSD1306_UpdateScreen();
 8004b8a:	f000 f8cf 	bl	8004d2c <SSD1306_UpdateScreen>
}
 8004b8e:	bf00      	nop
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	0800d804 	.word	0x0800d804

08004b98 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0

	i2c_mux_select(&mux, 0);
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	485f      	ldr	r0, [pc, #380]	@ (8004d20 <SSD1306_Init+0x188>)
 8004ba2:	f7ff fdd7 	bl	8004754 <i2c_mux_select>

	/* Init I2C */
	ssd1306_I2C_Init();
 8004ba6:	f000 f9cf 	bl	8004f48 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8004baa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8004bae:	2201      	movs	r2, #1
 8004bb0:	2178      	movs	r1, #120	@ 0x78
 8004bb2:	485c      	ldr	r0, [pc, #368]	@ (8004d24 <SSD1306_Init+0x18c>)
 8004bb4:	f002 fd0c 	bl	80075d0 <HAL_I2C_IsDeviceReady>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <SSD1306_Init+0x2a>
		/* Return false */
		return 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e0a9      	b.n	8004d16 <SSD1306_Init+0x17e>
	}

	/* A little delay */
	uint32_t p = 2500;
 8004bc2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8004bc6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004bc8:	e002      	b.n	8004bd0 <SSD1306_Init+0x38>
		p--;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f9      	bne.n	8004bca <SSD1306_Init+0x32>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8004bd6:	22ae      	movs	r2, #174	@ 0xae
 8004bd8:	2100      	movs	r1, #0
 8004bda:	2078      	movs	r0, #120	@ 0x78
 8004bdc:	f000 fa3a 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8004be0:	2220      	movs	r2, #32
 8004be2:	2100      	movs	r1, #0
 8004be4:	2078      	movs	r0, #120	@ 0x78
 8004be6:	f000 fa35 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004bea:	2210      	movs	r2, #16
 8004bec:	2100      	movs	r1, #0
 8004bee:	2078      	movs	r0, #120	@ 0x78
 8004bf0:	f000 fa30 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004bf4:	22b0      	movs	r2, #176	@ 0xb0
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	2078      	movs	r0, #120	@ 0x78
 8004bfa:	f000 fa2b 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8004bfe:	22c8      	movs	r2, #200	@ 0xc8
 8004c00:	2100      	movs	r1, #0
 8004c02:	2078      	movs	r0, #120	@ 0x78
 8004c04:	f000 fa26 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	2078      	movs	r0, #120	@ 0x78
 8004c0e:	f000 fa21 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8004c12:	2210      	movs	r2, #16
 8004c14:	2100      	movs	r1, #0
 8004c16:	2078      	movs	r0, #120	@ 0x78
 8004c18:	f000 fa1c 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8004c1c:	2240      	movs	r2, #64	@ 0x40
 8004c1e:	2100      	movs	r1, #0
 8004c20:	2078      	movs	r0, #120	@ 0x78
 8004c22:	f000 fa17 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8004c26:	2281      	movs	r2, #129	@ 0x81
 8004c28:	2100      	movs	r1, #0
 8004c2a:	2078      	movs	r0, #120	@ 0x78
 8004c2c:	f000 fa12 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8004c30:	22ff      	movs	r2, #255	@ 0xff
 8004c32:	2100      	movs	r1, #0
 8004c34:	2078      	movs	r0, #120	@ 0x78
 8004c36:	f000 fa0d 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8004c3a:	22a1      	movs	r2, #161	@ 0xa1
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	2078      	movs	r0, #120	@ 0x78
 8004c40:	f000 fa08 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8004c44:	22a6      	movs	r2, #166	@ 0xa6
 8004c46:	2100      	movs	r1, #0
 8004c48:	2078      	movs	r0, #120	@ 0x78
 8004c4a:	f000 fa03 	bl	8005054 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004c4e:	22a8      	movs	r2, #168	@ 0xa8
 8004c50:	2100      	movs	r1, #0
 8004c52:	2078      	movs	r0, #120	@ 0x78
 8004c54:	f000 f9fe 	bl	8005054 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8004c58:	223f      	movs	r2, #63	@ 0x3f
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	2078      	movs	r0, #120	@ 0x78
 8004c5e:	f000 f9f9 	bl	8005054 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004c62:	22a4      	movs	r2, #164	@ 0xa4
 8004c64:	2100      	movs	r1, #0
 8004c66:	2078      	movs	r0, #120	@ 0x78
 8004c68:	f000 f9f4 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8004c6c:	22d3      	movs	r2, #211	@ 0xd3
 8004c6e:	2100      	movs	r1, #0
 8004c70:	2078      	movs	r0, #120	@ 0x78
 8004c72:	f000 f9ef 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8004c76:	2200      	movs	r2, #0
 8004c78:	2100      	movs	r1, #0
 8004c7a:	2078      	movs	r0, #120	@ 0x78
 8004c7c:	f000 f9ea 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8004c80:	22d5      	movs	r2, #213	@ 0xd5
 8004c82:	2100      	movs	r1, #0
 8004c84:	2078      	movs	r0, #120	@ 0x78
 8004c86:	f000 f9e5 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8004c8a:	22f0      	movs	r2, #240	@ 0xf0
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	2078      	movs	r0, #120	@ 0x78
 8004c90:	f000 f9e0 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8004c94:	22d9      	movs	r2, #217	@ 0xd9
 8004c96:	2100      	movs	r1, #0
 8004c98:	2078      	movs	r0, #120	@ 0x78
 8004c9a:	f000 f9db 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8004c9e:	2222      	movs	r2, #34	@ 0x22
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	2078      	movs	r0, #120	@ 0x78
 8004ca4:	f000 f9d6 	bl	8005054 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8004ca8:	22da      	movs	r2, #218	@ 0xda
 8004caa:	2100      	movs	r1, #0
 8004cac:	2078      	movs	r0, #120	@ 0x78
 8004cae:	f000 f9d1 	bl	8005054 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8004cb2:	2212      	movs	r2, #18
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	2078      	movs	r0, #120	@ 0x78
 8004cb8:	f000 f9cc 	bl	8005054 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8004cbc:	22db      	movs	r2, #219	@ 0xdb
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	2078      	movs	r0, #120	@ 0x78
 8004cc2:	f000 f9c7 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	2100      	movs	r1, #0
 8004cca:	2078      	movs	r0, #120	@ 0x78
 8004ccc:	f000 f9c2 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8004cd0:	228d      	movs	r2, #141	@ 0x8d
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	2078      	movs	r0, #120	@ 0x78
 8004cd6:	f000 f9bd 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8004cda:	2214      	movs	r2, #20
 8004cdc:	2100      	movs	r1, #0
 8004cde:	2078      	movs	r0, #120	@ 0x78
 8004ce0:	f000 f9b8 	bl	8005054 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8004ce4:	22af      	movs	r2, #175	@ 0xaf
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	2078      	movs	r0, #120	@ 0x78
 8004cea:	f000 f9b3 	bl	8005054 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8004cee:	222e      	movs	r2, #46	@ 0x2e
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	2078      	movs	r0, #120	@ 0x78
 8004cf4:	f000 f9ae 	bl	8005054 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	f000 f845 	bl	8004d88 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8004cfe:	f000 f815 	bl	8004d2c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8004d02:	4b09      	ldr	r3, [pc, #36]	@ (8004d28 <SSD1306_Init+0x190>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8004d08:	4b07      	ldr	r3, [pc, #28]	@ (8004d28 <SSD1306_Init+0x190>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8004d0e:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <SSD1306_Init+0x190>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8004d14:	2301      	movs	r3, #1
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	20000050 	.word	0x20000050
 8004d24:	200002f8 	.word	0x200002f8
 8004d28:	20000d68 	.word	0x20000d68

08004d2c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8004d32:	2300      	movs	r3, #0
 8004d34:	71fb      	strb	r3, [r7, #7]
 8004d36:	e01d      	b.n	8004d74 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	3b50      	subs	r3, #80	@ 0x50
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	2100      	movs	r1, #0
 8004d42:	2078      	movs	r0, #120	@ 0x78
 8004d44:	f000 f986 	bl	8005054 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	2078      	movs	r0, #120	@ 0x78
 8004d4e:	f000 f981 	bl	8005054 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8004d52:	2210      	movs	r2, #16
 8004d54:	2100      	movs	r1, #0
 8004d56:	2078      	movs	r0, #120	@ 0x78
 8004d58:	f000 f97c 	bl	8005054 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	01db      	lsls	r3, r3, #7
 8004d60:	4a08      	ldr	r2, [pc, #32]	@ (8004d84 <SSD1306_UpdateScreen+0x58>)
 8004d62:	441a      	add	r2, r3
 8004d64:	2380      	movs	r3, #128	@ 0x80
 8004d66:	2140      	movs	r1, #64	@ 0x40
 8004d68:	2078      	movs	r0, #120	@ 0x78
 8004d6a:	f000 f907 	bl	8004f7c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	3301      	adds	r3, #1
 8004d72:	71fb      	strb	r3, [r7, #7]
 8004d74:	79fb      	ldrb	r3, [r7, #7]
 8004d76:	2b07      	cmp	r3, #7
 8004d78:	d9de      	bls.n	8004d38 <SSD1306_UpdateScreen+0xc>
	}
}
 8004d7a:	bf00      	nop
 8004d7c:	bf00      	nop
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20000968 	.word	0x20000968

08004d88 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <SSD1306_Fill+0x14>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e000      	b.n	8004d9e <SSD1306_Fill+0x16>
 8004d9c:	23ff      	movs	r3, #255	@ 0xff
 8004d9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004da2:	4619      	mov	r1, r3
 8004da4:	4803      	ldr	r0, [pc, #12]	@ (8004db4 <SSD1306_Fill+0x2c>)
 8004da6:	f006 fb38 	bl	800b41a <memset>
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000968 	.word	0x20000968

08004db8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	80fb      	strh	r3, [r7, #6]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	80bb      	strh	r3, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	70fb      	strb	r3, [r7, #3]
	if (
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dce:	d848      	bhi.n	8004e62 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8004dd0:	88bb      	ldrh	r3, [r7, #4]
 8004dd2:	2b3f      	cmp	r3, #63	@ 0x3f
 8004dd4:	d845      	bhi.n	8004e62 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8004dd6:	4b26      	ldr	r3, [pc, #152]	@ (8004e70 <SSD1306_DrawPixel+0xb8>)
 8004dd8:	791b      	ldrb	r3, [r3, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d006      	beq.n	8004dec <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	bf0c      	ite	eq
 8004de4:	2301      	moveq	r3, #1
 8004de6:	2300      	movne	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d11a      	bne.n	8004e28 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004df2:	88fa      	ldrh	r2, [r7, #6]
 8004df4:	88bb      	ldrh	r3, [r7, #4]
 8004df6:	08db      	lsrs	r3, r3, #3
 8004df8:	b298      	uxth	r0, r3
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	01db      	lsls	r3, r3, #7
 8004dfe:	4413      	add	r3, r2
 8004e00:	4a1c      	ldr	r2, [pc, #112]	@ (8004e74 <SSD1306_DrawPixel+0xbc>)
 8004e02:	5cd3      	ldrb	r3, [r2, r3]
 8004e04:	b25a      	sxtb	r2, r3
 8004e06:	88bb      	ldrh	r3, [r7, #4]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e12:	b25b      	sxtb	r3, r3
 8004e14:	4313      	orrs	r3, r2
 8004e16:	b259      	sxtb	r1, r3
 8004e18:	88fa      	ldrh	r2, [r7, #6]
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	01db      	lsls	r3, r3, #7
 8004e1e:	4413      	add	r3, r2
 8004e20:	b2c9      	uxtb	r1, r1
 8004e22:	4a14      	ldr	r2, [pc, #80]	@ (8004e74 <SSD1306_DrawPixel+0xbc>)
 8004e24:	54d1      	strb	r1, [r2, r3]
 8004e26:	e01d      	b.n	8004e64 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004e28:	88fa      	ldrh	r2, [r7, #6]
 8004e2a:	88bb      	ldrh	r3, [r7, #4]
 8004e2c:	08db      	lsrs	r3, r3, #3
 8004e2e:	b298      	uxth	r0, r3
 8004e30:	4603      	mov	r3, r0
 8004e32:	01db      	lsls	r3, r3, #7
 8004e34:	4413      	add	r3, r2
 8004e36:	4a0f      	ldr	r2, [pc, #60]	@ (8004e74 <SSD1306_DrawPixel+0xbc>)
 8004e38:	5cd3      	ldrb	r3, [r2, r3]
 8004e3a:	b25a      	sxtb	r2, r3
 8004e3c:	88bb      	ldrh	r3, [r7, #4]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	2101      	movs	r1, #1
 8004e44:	fa01 f303 	lsl.w	r3, r1, r3
 8004e48:	b25b      	sxtb	r3, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	b25b      	sxtb	r3, r3
 8004e4e:	4013      	ands	r3, r2
 8004e50:	b259      	sxtb	r1, r3
 8004e52:	88fa      	ldrh	r2, [r7, #6]
 8004e54:	4603      	mov	r3, r0
 8004e56:	01db      	lsls	r3, r3, #7
 8004e58:	4413      	add	r3, r2
 8004e5a:	b2c9      	uxtb	r1, r1
 8004e5c:	4a05      	ldr	r2, [pc, #20]	@ (8004e74 <SSD1306_DrawPixel+0xbc>)
 8004e5e:	54d1      	strb	r1, [r2, r3]
 8004e60:	e000      	b.n	8004e64 <SSD1306_DrawPixel+0xac>
		return;
 8004e62:	bf00      	nop
	}
}
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20000d68 	.word	0x20000d68
 8004e74:	20000968 	.word	0x20000968

08004e78 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60ba      	str	r2, [r7, #8]
 8004e80:	461a      	mov	r2, r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	81fb      	strh	r3, [r7, #14]
 8004e86:	460b      	mov	r3, r1
 8004e88:	81bb      	strh	r3, [r7, #12]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e92:	3307      	adds	r3, #7
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	da00      	bge.n	8004e9a <SSD1306_DrawBitmap+0x22>
 8004e98:	3307      	adds	r3, #7
 8004e9a:	10db      	asrs	r3, r3, #3
 8004e9c:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	82bb      	strh	r3, [r7, #20]
 8004ea6:	e044      	b.n	8004f32 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	827b      	strh	r3, [r7, #18]
 8004eac:	e02f      	b.n	8004f0e <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8004eae:	8a7b      	ldrh	r3, [r7, #18]
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	75fb      	strb	r3, [r7, #23]
 8004ebe:	e012      	b.n	8004ee6 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8004ec0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004ec4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004ec8:	fb03 f202 	mul.w	r2, r3, r2
 8004ecc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	da00      	bge.n	8004ed6 <SSD1306_DrawBitmap+0x5e>
 8004ed4:	3307      	adds	r3, #7
 8004ed6:	10db      	asrs	r3, r3, #3
 8004ed8:	b21b      	sxth	r3, r3
 8004eda:	4413      	add	r3, r2
 8004edc:	461a      	mov	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8004ee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	da09      	bge.n	8004f02 <SSD1306_DrawBitmap+0x8a>
 8004eee:	89fa      	ldrh	r2, [r7, #14]
 8004ef0:	8a7b      	ldrh	r3, [r7, #18]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	89b9      	ldrh	r1, [r7, #12]
 8004ef8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff ff5b 	bl	8004db8 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8004f02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3301      	adds	r3, #1
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	827b      	strh	r3, [r7, #18]
 8004f0e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	dbc9      	blt.n	8004eae <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8004f1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3301      	adds	r3, #1
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	82bb      	strh	r3, [r7, #20]
 8004f26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	81bb      	strh	r3, [r7, #12]
 8004f32:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004f36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	dbb4      	blt.n	8004ea8 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8004f3e:	bf00      	nop
 8004f40:	bf00      	nop
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
	i2c_mux_select(&mux, 0);
 8004f4e:	2100      	movs	r1, #0
 8004f50:	4808      	ldr	r0, [pc, #32]	@ (8004f74 <ssd1306_I2C_Init+0x2c>)
 8004f52:	f7ff fbff 	bl	8004754 <i2c_mux_select>
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8004f56:	4b08      	ldr	r3, [pc, #32]	@ (8004f78 <ssd1306_I2C_Init+0x30>)
 8004f58:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004f5a:	e002      	b.n	8004f62 <ssd1306_I2C_Init+0x1a>
		p--;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f9      	bne.n	8004f5c <ssd1306_I2C_Init+0x14>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8004f68:	bf00      	nop
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000050 	.word	0x20000050
 8004f78:	0003d090 	.word	0x0003d090

08004f7c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004f7c:	b590      	push	{r4, r7, lr}
 8004f7e:	b0c7      	sub	sp, #284	@ 0x11c
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	4604      	mov	r4, r0
 8004f84:	4608      	mov	r0, r1
 8004f86:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8004f8a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8004f8e:	600a      	str	r2, [r1, #0]
 8004f90:	4619      	mov	r1, r3
 8004f92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004f96:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004f9a:	4622      	mov	r2, r4
 8004f9c:	701a      	strb	r2, [r3, #0]
 8004f9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004fa2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004fae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004fb2:	460a      	mov	r2, r1
 8004fb4:	801a      	strh	r2, [r3, #0]
i2c_mux_select(&mux, 0);
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	4824      	ldr	r0, [pc, #144]	@ (800504c <ssd1306_I2C_WriteMulti+0xd0>)
 8004fba:	f7ff fbcb 	bl	8004754 <i2c_mux_select>
uint8_t dt[256];
dt[0] = reg;
 8004fbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004fc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fc6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004fca:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8004fce:	7812      	ldrb	r2, [r2, #0]
 8004fd0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004fd8:	e015      	b.n	8005006 <ssd1306_I2C_WriteMulti+0x8a>
dt[i+1] = data[i];
 8004fda:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004fde:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004fe2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8004fe6:	6812      	ldr	r2, [r2, #0]
 8004fe8:	441a      	add	r2, r3
 8004fea:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004fee:	3301      	adds	r3, #1
 8004ff0:	7811      	ldrb	r1, [r2, #0]
 8004ff2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004ff6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8004ffa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8004ffc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8005000:	3301      	adds	r3, #1
 8005002:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8005006:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800500a:	b29b      	uxth	r3, r3
 800500c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8005010:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005014:	8812      	ldrh	r2, [r2, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d8df      	bhi.n	8004fda <ssd1306_I2C_WriteMulti+0x5e>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 800501a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800501e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	b299      	uxth	r1, r3
 8005026:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800502a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	3301      	adds	r3, #1
 8005032:	b29b      	uxth	r3, r3
 8005034:	f107 020c 	add.w	r2, r7, #12
 8005038:	200a      	movs	r0, #10
 800503a:	9000      	str	r0, [sp, #0]
 800503c:	4804      	ldr	r0, [pc, #16]	@ (8005050 <ssd1306_I2C_WriteMulti+0xd4>)
 800503e:	f001 fc6b 	bl	8006918 <HAL_I2C_Master_Transmit>
}
 8005042:	bf00      	nop
 8005044:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8005048:	46bd      	mov	sp, r7
 800504a:	bd90      	pop	{r4, r7, pc}
 800504c:	20000050 	.word	0x20000050
 8005050:	200002f8 	.word	0x200002f8

08005054 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af02      	add	r7, sp, #8
 800505a:	4603      	mov	r3, r0
 800505c:	71fb      	strb	r3, [r7, #7]
 800505e:	460b      	mov	r3, r1
 8005060:	71bb      	strb	r3, [r7, #6]
 8005062:	4613      	mov	r3, r2
 8005064:	717b      	strb	r3, [r7, #5]
	i2c_mux_select(&mux, 0);
 8005066:	2100      	movs	r1, #0
 8005068:	480a      	ldr	r0, [pc, #40]	@ (8005094 <ssd1306_I2C_Write+0x40>)
 800506a:	f7ff fb73 	bl	8004754 <i2c_mux_select>
	uint8_t dt[2];
	dt[0] = reg;
 800506e:	79bb      	ldrb	r3, [r7, #6]
 8005070:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8005072:	797b      	ldrb	r3, [r7, #5]
 8005074:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	b299      	uxth	r1, r3
 800507a:	f107 020c 	add.w	r2, r7, #12
 800507e:	230a      	movs	r3, #10
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	2302      	movs	r3, #2
 8005084:	4804      	ldr	r0, [pc, #16]	@ (8005098 <ssd1306_I2C_Write+0x44>)
 8005086:	f001 fc47 	bl	8006918 <HAL_I2C_Master_Transmit>
}
 800508a:	bf00      	nop
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000050 	.word	0x20000050
 8005098:	200002f8 	.word	0x200002f8

0800509c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050a0:	4b0e      	ldr	r3, [pc, #56]	@ (80050dc <HAL_Init+0x40>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a0d      	ldr	r2, [pc, #52]	@ (80050dc <HAL_Init+0x40>)
 80050a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80050ac:	4b0b      	ldr	r3, [pc, #44]	@ (80050dc <HAL_Init+0x40>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a0a      	ldr	r2, [pc, #40]	@ (80050dc <HAL_Init+0x40>)
 80050b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050b8:	4b08      	ldr	r3, [pc, #32]	@ (80050dc <HAL_Init+0x40>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a07      	ldr	r2, [pc, #28]	@ (80050dc <HAL_Init+0x40>)
 80050be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050c4:	2003      	movs	r0, #3
 80050c6:	f000 fd5f 	bl	8005b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050ca:	2000      	movs	r0, #0
 80050cc:	f000 f808 	bl	80050e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050d0:	f7fe fdca 	bl	8003c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40023c00 	.word	0x40023c00

080050e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050e8:	4b12      	ldr	r3, [pc, #72]	@ (8005134 <HAL_InitTick+0x54>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4b12      	ldr	r3, [pc, #72]	@ (8005138 <HAL_InitTick+0x58>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	4619      	mov	r1, r3
 80050f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80050fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fd77 	bl	8005bf2 <HAL_SYSTICK_Config>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e00e      	b.n	800512c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b0f      	cmp	r3, #15
 8005112:	d80a      	bhi.n	800512a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005114:	2200      	movs	r2, #0
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
 800511c:	f000 fd3f 	bl	8005b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005120:	4a06      	ldr	r2, [pc, #24]	@ (800513c <HAL_InitTick+0x5c>)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	e000      	b.n	800512c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
}
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000060 	.word	0x20000060
 8005138:	20000068 	.word	0x20000068
 800513c:	20000064 	.word	0x20000064

08005140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005144:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <HAL_IncTick+0x20>)
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	4b06      	ldr	r3, [pc, #24]	@ (8005164 <HAL_IncTick+0x24>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4413      	add	r3, r2
 8005150:	4a04      	ldr	r2, [pc, #16]	@ (8005164 <HAL_IncTick+0x24>)
 8005152:	6013      	str	r3, [r2, #0]
}
 8005154:	bf00      	nop
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20000068 	.word	0x20000068
 8005164:	20000d70 	.word	0x20000d70

08005168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return uwTick;
 800516c:	4b03      	ldr	r3, [pc, #12]	@ (800517c <HAL_GetTick+0x14>)
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000d70 	.word	0x20000d70

08005180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005188:	f7ff ffee 	bl	8005168 <HAL_GetTick>
 800518c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d005      	beq.n	80051a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800519a:	4b0a      	ldr	r3, [pc, #40]	@ (80051c4 <HAL_Delay+0x44>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80051a6:	bf00      	nop
 80051a8:	f7ff ffde 	bl	8005168 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d8f7      	bhi.n	80051a8 <HAL_Delay+0x28>
  {
  }
}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	20000068 	.word	0x20000068

080051c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e033      	b.n	8005246 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fe fd66 	bl	8003cb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	2b00      	cmp	r3, #0
 8005204:	d118      	bne.n	8005238 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800520e:	f023 0302 	bic.w	r3, r3, #2
 8005212:	f043 0202 	orr.w	r2, r3, #2
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fae8 	bl	80057f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522a:	f023 0303 	bic.w	r3, r3, #3
 800522e:	f043 0201 	orr.w	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	641a      	str	r2, [r3, #64]	@ 0x40
 8005236:	e001      	b.n	800523c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_ADC_Start+0x1a>
 8005266:	2302      	movs	r3, #2
 8005268:	e0b2      	b.n	80053d0 <HAL_ADC_Start+0x180>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b01      	cmp	r3, #1
 800527e:	d018      	beq.n	80052b2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005290:	4b52      	ldr	r3, [pc, #328]	@ (80053dc <HAL_ADC_Start+0x18c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a52      	ldr	r2, [pc, #328]	@ (80053e0 <HAL_ADC_Start+0x190>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	0c9a      	lsrs	r2, r3, #18
 800529c:	4613      	mov	r3, r2
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	4413      	add	r3, r2
 80052a2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80052a4:	e002      	b.n	80052ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f9      	bne.n	80052a6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d17a      	bne.n	80053b6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80052ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052fe:	d106      	bne.n	800530e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005304:	f023 0206 	bic.w	r2, r3, #6
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	645a      	str	r2, [r3, #68]	@ 0x44
 800530c:	e002      	b.n	8005314 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800531c:	4b31      	ldr	r3, [pc, #196]	@ (80053e4 <HAL_ADC_Start+0x194>)
 800531e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005328:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2b00      	cmp	r3, #0
 8005334:	d12a      	bne.n	800538c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2b      	ldr	r2, [pc, #172]	@ (80053e8 <HAL_ADC_Start+0x198>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d015      	beq.n	800536c <HAL_ADC_Start+0x11c>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a29      	ldr	r2, [pc, #164]	@ (80053ec <HAL_ADC_Start+0x19c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d105      	bne.n	8005356 <HAL_ADC_Start+0x106>
 800534a:	4b26      	ldr	r3, [pc, #152]	@ (80053e4 <HAL_ADC_Start+0x194>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a25      	ldr	r2, [pc, #148]	@ (80053f0 <HAL_ADC_Start+0x1a0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d136      	bne.n	80053ce <HAL_ADC_Start+0x17e>
 8005360:	4b20      	ldr	r3, [pc, #128]	@ (80053e4 <HAL_ADC_Start+0x194>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b00      	cmp	r3, #0
 800536a:	d130      	bne.n	80053ce <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d129      	bne.n	80053ce <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005388:	609a      	str	r2, [r3, #8]
 800538a:	e020      	b.n	80053ce <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a15      	ldr	r2, [pc, #84]	@ (80053e8 <HAL_ADC_Start+0x198>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d11b      	bne.n	80053ce <HAL_ADC_Start+0x17e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d114      	bne.n	80053ce <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80053b2:	609a      	str	r2, [r3, #8]
 80053b4:	e00b      	b.n	80053ce <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ba:	f043 0210 	orr.w	r2, r3, #16
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c6:	f043 0201 	orr.w	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	20000060 	.word	0x20000060
 80053e0:	431bde83 	.word	0x431bde83
 80053e4:	40012300 	.word	0x40012300
 80053e8:	40012000 	.word	0x40012000
 80053ec:	40012100 	.word	0x40012100
 80053f0:	40012200 	.word	0x40012200

080053f4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_ADC_Stop+0x16>
 8005406:	2302      	movs	r3, #2
 8005408:	e021      	b.n	800544e <HAL_ADC_Stop+0x5a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0201 	bic.w	r2, r2, #1
 8005420:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d109      	bne.n	8005444 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005434:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005438:	f023 0301 	bic.w	r3, r3, #1
 800543c:	f043 0201 	orr.w	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005476:	d113      	bne.n	80054a0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005486:	d10b      	bne.n	80054a0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548c:	f043 0220 	orr.w	r2, r3, #32
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e063      	b.n	8005568 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80054a0:	f7ff fe62 	bl	8005168 <HAL_GetTick>
 80054a4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80054a6:	e021      	b.n	80054ec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ae:	d01d      	beq.n	80054ec <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <HAL_ADC_PollForConversion+0x6c>
 80054b6:	f7ff fe57 	bl	8005168 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d212      	bcs.n	80054ec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d00b      	beq.n	80054ec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d8:	f043 0204 	orr.w	r2, r3, #4
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e03d      	b.n	8005568 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d1d6      	bne.n	80054a8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f06f 0212 	mvn.w	r2, #18
 8005502:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005508:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d123      	bne.n	8005566 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005522:	2b00      	cmp	r3, #0
 8005524:	d11f      	bne.n	8005566 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800552c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005530:	2b00      	cmp	r3, #0
 8005532:	d006      	beq.n	8005542 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800553e:	2b00      	cmp	r3, #0
 8005540:	d111      	bne.n	8005566 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005546:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005552:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d105      	bne.n	8005566 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	f043 0201 	orr.w	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800557e:	4618      	mov	r0, r3
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_ADC_ConfigChannel+0x1c>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e113      	b.n	80057d0 <HAL_ADC_ConfigChannel+0x244>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b09      	cmp	r3, #9
 80055b6:	d925      	bls.n	8005604 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68d9      	ldr	r1, [r3, #12]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	4613      	mov	r3, r2
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	4413      	add	r3, r2
 80055cc:	3b1e      	subs	r3, #30
 80055ce:	2207      	movs	r2, #7
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	43da      	mvns	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	400a      	ands	r2, r1
 80055dc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68d9      	ldr	r1, [r3, #12]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	4618      	mov	r0, r3
 80055f0:	4603      	mov	r3, r0
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	4403      	add	r3, r0
 80055f6:	3b1e      	subs	r3, #30
 80055f8:	409a      	lsls	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	60da      	str	r2, [r3, #12]
 8005602:	e022      	b.n	800564a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6919      	ldr	r1, [r3, #16]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	b29b      	uxth	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	4613      	mov	r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4413      	add	r3, r2
 8005618:	2207      	movs	r2, #7
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	43da      	mvns	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	400a      	ands	r2, r1
 8005626:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6919      	ldr	r1, [r3, #16]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	b29b      	uxth	r3, r3
 8005638:	4618      	mov	r0, r3
 800563a:	4603      	mov	r3, r0
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	4403      	add	r3, r0
 8005640:	409a      	lsls	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b06      	cmp	r3, #6
 8005650:	d824      	bhi.n	800569c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	3b05      	subs	r3, #5
 8005664:	221f      	movs	r2, #31
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	43da      	mvns	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	400a      	ands	r2, r1
 8005672:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	4618      	mov	r0, r3
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	3b05      	subs	r3, #5
 800568e:	fa00 f203 	lsl.w	r2, r0, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	635a      	str	r2, [r3, #52]	@ 0x34
 800569a:	e04c      	b.n	8005736 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b0c      	cmp	r3, #12
 80056a2:	d824      	bhi.n	80056ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	4613      	mov	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	3b23      	subs	r3, #35	@ 0x23
 80056b6:	221f      	movs	r2, #31
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	43da      	mvns	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	400a      	ands	r2, r1
 80056c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	4618      	mov	r0, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	3b23      	subs	r3, #35	@ 0x23
 80056e0:	fa00 f203 	lsl.w	r2, r0, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80056ec:	e023      	b.n	8005736 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	3b41      	subs	r3, #65	@ 0x41
 8005700:	221f      	movs	r2, #31
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	43da      	mvns	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	400a      	ands	r2, r1
 800570e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	4618      	mov	r0, r3
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	3b41      	subs	r3, #65	@ 0x41
 800572a:	fa00 f203 	lsl.w	r2, r0, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005736:	4b29      	ldr	r3, [pc, #164]	@ (80057dc <HAL_ADC_ConfigChannel+0x250>)
 8005738:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a28      	ldr	r2, [pc, #160]	@ (80057e0 <HAL_ADC_ConfigChannel+0x254>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d10f      	bne.n	8005764 <HAL_ADC_ConfigChannel+0x1d8>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b12      	cmp	r3, #18
 800574a:	d10b      	bne.n	8005764 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1d      	ldr	r2, [pc, #116]	@ (80057e0 <HAL_ADC_ConfigChannel+0x254>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d12b      	bne.n	80057c6 <HAL_ADC_ConfigChannel+0x23a>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1c      	ldr	r2, [pc, #112]	@ (80057e4 <HAL_ADC_ConfigChannel+0x258>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <HAL_ADC_ConfigChannel+0x1f4>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b11      	cmp	r3, #17
 800577e:	d122      	bne.n	80057c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a11      	ldr	r2, [pc, #68]	@ (80057e4 <HAL_ADC_ConfigChannel+0x258>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d111      	bne.n	80057c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80057a2:	4b11      	ldr	r3, [pc, #68]	@ (80057e8 <HAL_ADC_ConfigChannel+0x25c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a11      	ldr	r2, [pc, #68]	@ (80057ec <HAL_ADC_ConfigChannel+0x260>)
 80057a8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ac:	0c9a      	lsrs	r2, r3, #18
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80057b8:	e002      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	3b01      	subs	r3, #1
 80057be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f9      	bne.n	80057ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	40012300 	.word	0x40012300
 80057e0:	40012000 	.word	0x40012000
 80057e4:	10000012 	.word	0x10000012
 80057e8:	20000060 	.word	0x20000060
 80057ec:	431bde83 	.word	0x431bde83

080057f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057f8:	4b79      	ldr	r3, [pc, #484]	@ (80059e0 <ADC_Init+0x1f0>)
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	431a      	orrs	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6859      	ldr	r1, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	021a      	lsls	r2, r3, #8
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005848:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6859      	ldr	r1, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800586a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6899      	ldr	r1, [r3, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005882:	4a58      	ldr	r2, [pc, #352]	@ (80059e4 <ADC_Init+0x1f4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d022      	beq.n	80058ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005896:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6899      	ldr	r1, [r3, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80058b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6899      	ldr	r1, [r3, #8]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	609a      	str	r2, [r3, #8]
 80058cc:	e00f      	b.n	80058ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80058dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80058ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0202 	bic.w	r2, r2, #2
 80058fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6899      	ldr	r1, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	7e1b      	ldrb	r3, [r3, #24]
 8005908:	005a      	lsls	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d01b      	beq.n	8005954 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800592a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800593a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6859      	ldr	r1, [r3, #4]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	3b01      	subs	r3, #1
 8005948:	035a      	lsls	r2, r3, #13
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	e007      	b.n	8005964 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005962:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005972:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	3b01      	subs	r3, #1
 8005980:	051a      	lsls	r2, r3, #20
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6899      	ldr	r1, [r3, #8]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80059a6:	025a      	lsls	r2, r3, #9
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6899      	ldr	r1, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	029a      	lsls	r2, r3, #10
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	609a      	str	r2, [r3, #8]
}
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	40012300 	.word	0x40012300
 80059e4:	0f000001 	.word	0x0f000001

080059e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059f8:	4b0c      	ldr	r3, [pc, #48]	@ (8005a2c <__NVIC_SetPriorityGrouping+0x44>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a04:	4013      	ands	r3, r2
 8005a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a1a:	4a04      	ldr	r2, [pc, #16]	@ (8005a2c <__NVIC_SetPriorityGrouping+0x44>)
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	60d3      	str	r3, [r2, #12]
}
 8005a20:	bf00      	nop
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	e000ed00 	.word	0xe000ed00

08005a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a34:	4b04      	ldr	r3, [pc, #16]	@ (8005a48 <__NVIC_GetPriorityGrouping+0x18>)
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	0a1b      	lsrs	r3, r3, #8
 8005a3a:	f003 0307 	and.w	r3, r3, #7
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	e000ed00 	.word	0xe000ed00

08005a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	db0b      	blt.n	8005a76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	f003 021f 	and.w	r2, r3, #31
 8005a64:	4907      	ldr	r1, [pc, #28]	@ (8005a84 <__NVIC_EnableIRQ+0x38>)
 8005a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	2001      	movs	r0, #1
 8005a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8005a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	e000e100 	.word	0xe000e100

08005a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	6039      	str	r1, [r7, #0]
 8005a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	db0a      	blt.n	8005ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	490c      	ldr	r1, [pc, #48]	@ (8005ad4 <__NVIC_SetPriority+0x4c>)
 8005aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa6:	0112      	lsls	r2, r2, #4
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	440b      	add	r3, r1
 8005aac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ab0:	e00a      	b.n	8005ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	4908      	ldr	r1, [pc, #32]	@ (8005ad8 <__NVIC_SetPriority+0x50>)
 8005ab8:	79fb      	ldrb	r3, [r7, #7]
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	3b04      	subs	r3, #4
 8005ac0:	0112      	lsls	r2, r2, #4
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	761a      	strb	r2, [r3, #24]
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	e000e100 	.word	0xe000e100
 8005ad8:	e000ed00 	.word	0xe000ed00

08005adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b089      	sub	sp, #36	@ 0x24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f1c3 0307 	rsb	r3, r3, #7
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	bf28      	it	cs
 8005afa:	2304      	movcs	r3, #4
 8005afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	3304      	adds	r3, #4
 8005b02:	2b06      	cmp	r3, #6
 8005b04:	d902      	bls.n	8005b0c <NVIC_EncodePriority+0x30>
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	3b03      	subs	r3, #3
 8005b0a:	e000      	b.n	8005b0e <NVIC_EncodePriority+0x32>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b10:	f04f 32ff 	mov.w	r2, #4294967295
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	43da      	mvns	r2, r3
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	401a      	ands	r2, r3
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b24:	f04f 31ff 	mov.w	r1, #4294967295
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2e:	43d9      	mvns	r1, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b34:	4313      	orrs	r3, r2
         );
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3724      	adds	r7, #36	@ 0x24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b54:	d301      	bcc.n	8005b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b56:	2301      	movs	r3, #1
 8005b58:	e00f      	b.n	8005b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8005b84 <SysTick_Config+0x40>)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b62:	210f      	movs	r1, #15
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	f7ff ff8e 	bl	8005a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b6c:	4b05      	ldr	r3, [pc, #20]	@ (8005b84 <SysTick_Config+0x40>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b72:	4b04      	ldr	r3, [pc, #16]	@ (8005b84 <SysTick_Config+0x40>)
 8005b74:	2207      	movs	r2, #7
 8005b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	e000e010 	.word	0xe000e010

08005b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff ff29 	bl	80059e8 <__NVIC_SetPriorityGrouping>
}
 8005b96:	bf00      	nop
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b086      	sub	sp, #24
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	607a      	str	r2, [r7, #4]
 8005baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bb0:	f7ff ff3e 	bl	8005a30 <__NVIC_GetPriorityGrouping>
 8005bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	6978      	ldr	r0, [r7, #20]
 8005bbc:	f7ff ff8e 	bl	8005adc <NVIC_EncodePriority>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff ff5d 	bl	8005a88 <__NVIC_SetPriority>
}
 8005bce:	bf00      	nop
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b082      	sub	sp, #8
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	4603      	mov	r3, r0
 8005bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff ff31 	bl	8005a4c <__NVIC_EnableIRQ>
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff ffa2 	bl	8005b44 <SysTick_Config>
 8005c00:	4603      	mov	r3, r0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c18:	f7ff faa6 	bl	8005168 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e099      	b.n	8005d5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c48:	e00f      	b.n	8005c6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c4a:	f7ff fa8d 	bl	8005168 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b05      	cmp	r3, #5
 8005c56:	d908      	bls.n	8005c6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2203      	movs	r2, #3
 8005c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e078      	b.n	8005d5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e8      	bne.n	8005c4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	4b38      	ldr	r3, [pc, #224]	@ (8005d64 <HAL_DMA_Init+0x158>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d107      	bne.n	8005cd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f023 0307 	bic.w	r3, r3, #7
 8005cea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d117      	bne.n	8005d2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00e      	beq.n	8005d2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fa7b 	bl	800620c <DMA_CheckFifoParam>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2240      	movs	r2, #64	@ 0x40
 8005d20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e016      	b.n	8005d5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fa32 	bl	80061a0 <DMA_CalcBaseAndBitshift>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d44:	223f      	movs	r2, #63	@ 0x3f
 8005d46:	409a      	lsls	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	f010803f 	.word	0xf010803f

08005d68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d76:	f7ff f9f7 	bl	8005168 <HAL_GetTick>
 8005d7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d008      	beq.n	8005d9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2280      	movs	r2, #128	@ 0x80
 8005d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e052      	b.n	8005e40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0216 	bic.w	r2, r2, #22
 8005da8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695a      	ldr	r2, [r3, #20]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005db8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d103      	bne.n	8005dca <HAL_DMA_Abort+0x62>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0208 	bic.w	r2, r2, #8
 8005dd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dea:	e013      	b.n	8005e14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dec:	f7ff f9bc 	bl	8005168 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b05      	cmp	r3, #5
 8005df8:	d90c      	bls.n	8005e14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2203      	movs	r2, #3
 8005e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e015      	b.n	8005e40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e4      	bne.n	8005dec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e26:	223f      	movs	r2, #63	@ 0x3f
 8005e28:	409a      	lsls	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d004      	beq.n	8005e66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2280      	movs	r2, #128	@ 0x80
 8005e60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e00c      	b.n	8005e80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2205      	movs	r2, #5
 8005e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0201 	bic.w	r2, r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e98:	4b8e      	ldr	r3, [pc, #568]	@ (80060d4 <HAL_DMA_IRQHandler+0x248>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a8e      	ldr	r2, [pc, #568]	@ (80060d8 <HAL_DMA_IRQHandler+0x24c>)
 8005e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea2:	0a9b      	lsrs	r3, r3, #10
 8005ea4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eb6:	2208      	movs	r2, #8
 8005eb8:	409a      	lsls	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d01a      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d013      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0204 	bic.w	r2, r2, #4
 8005ede:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee4:	2208      	movs	r2, #8
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef0:	f043 0201 	orr.w	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005efc:	2201      	movs	r2, #1
 8005efe:	409a      	lsls	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4013      	ands	r3, r2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d012      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00b      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	409a      	lsls	r2, r3
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f26:	f043 0202 	orr.w	r2, r3, #2
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f32:	2204      	movs	r2, #4
 8005f34:	409a      	lsls	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d012      	beq.n	8005f64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00b      	beq.n	8005f64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f50:	2204      	movs	r2, #4
 8005f52:	409a      	lsls	r2, r3
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f5c:	f043 0204 	orr.w	r2, r3, #4
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f68:	2210      	movs	r2, #16
 8005f6a:	409a      	lsls	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d043      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d03c      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f86:	2210      	movs	r2, #16
 8005f88:	409a      	lsls	r2, r3
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d018      	beq.n	8005fce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d108      	bne.n	8005fbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d024      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	4798      	blx	r3
 8005fba:	e01f      	b.n	8005ffc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01b      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
 8005fcc:	e016      	b.n	8005ffc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d107      	bne.n	8005fec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0208 	bic.w	r2, r2, #8
 8005fea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006000:	2220      	movs	r2, #32
 8006002:	409a      	lsls	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4013      	ands	r3, r2
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 808f 	beq.w	800612c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 8087 	beq.w	800612c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006022:	2220      	movs	r2, #32
 8006024:	409a      	lsls	r2, r3
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b05      	cmp	r3, #5
 8006034:	d136      	bne.n	80060a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0216 	bic.w	r2, r2, #22
 8006044:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	695a      	ldr	r2, [r3, #20]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006054:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605a:	2b00      	cmp	r3, #0
 800605c:	d103      	bne.n	8006066 <HAL_DMA_IRQHandler+0x1da>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006062:	2b00      	cmp	r3, #0
 8006064:	d007      	beq.n	8006076 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0208 	bic.w	r2, r2, #8
 8006074:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800607a:	223f      	movs	r2, #63	@ 0x3f
 800607c:	409a      	lsls	r2, r3
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006096:	2b00      	cmp	r3, #0
 8006098:	d07e      	beq.n	8006198 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
        }
        return;
 80060a2:	e079      	b.n	8006198 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01d      	beq.n	80060ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10d      	bne.n	80060dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d031      	beq.n	800612c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	4798      	blx	r3
 80060d0:	e02c      	b.n	800612c <HAL_DMA_IRQHandler+0x2a0>
 80060d2:	bf00      	nop
 80060d4:	20000060 	.word	0x20000060
 80060d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d023      	beq.n	800612c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	4798      	blx	r3
 80060ec:	e01e      	b.n	800612c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10f      	bne.n	800611c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0210 	bic.w	r2, r2, #16
 800610a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006130:	2b00      	cmp	r3, #0
 8006132:	d032      	beq.n	800619a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d022      	beq.n	8006186 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2205      	movs	r2, #5
 8006144:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0201 	bic.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	3301      	adds	r3, #1
 800615c:	60bb      	str	r3, [r7, #8]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	429a      	cmp	r2, r3
 8006162:	d307      	bcc.n	8006174 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f2      	bne.n	8006158 <HAL_DMA_IRQHandler+0x2cc>
 8006172:	e000      	b.n	8006176 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006174:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800618a:	2b00      	cmp	r3, #0
 800618c:	d005      	beq.n	800619a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	4798      	blx	r3
 8006196:	e000      	b.n	800619a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006198:	bf00      	nop
    }
  }
}
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	3b10      	subs	r3, #16
 80061b0:	4a14      	ldr	r2, [pc, #80]	@ (8006204 <DMA_CalcBaseAndBitshift+0x64>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	091b      	lsrs	r3, r3, #4
 80061b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80061ba:	4a13      	ldr	r2, [pc, #76]	@ (8006208 <DMA_CalcBaseAndBitshift+0x68>)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d909      	bls.n	80061e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80061d6:	f023 0303 	bic.w	r3, r3, #3
 80061da:	1d1a      	adds	r2, r3, #4
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	659a      	str	r2, [r3, #88]	@ 0x58
 80061e0:	e007      	b.n	80061f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	aaaaaaab 	.word	0xaaaaaaab
 8006208:	0800dc04 	.word	0x0800dc04

0800620c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d11f      	bne.n	8006266 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b03      	cmp	r3, #3
 800622a:	d856      	bhi.n	80062da <DMA_CheckFifoParam+0xce>
 800622c:	a201      	add	r2, pc, #4	@ (adr r2, 8006234 <DMA_CheckFifoParam+0x28>)
 800622e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006232:	bf00      	nop
 8006234:	08006245 	.word	0x08006245
 8006238:	08006257 	.word	0x08006257
 800623c:	08006245 	.word	0x08006245
 8006240:	080062db 	.word	0x080062db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006248:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d046      	beq.n	80062de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006254:	e043      	b.n	80062de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800625e:	d140      	bne.n	80062e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006264:	e03d      	b.n	80062e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800626e:	d121      	bne.n	80062b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b03      	cmp	r3, #3
 8006274:	d837      	bhi.n	80062e6 <DMA_CheckFifoParam+0xda>
 8006276:	a201      	add	r2, pc, #4	@ (adr r2, 800627c <DMA_CheckFifoParam+0x70>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	0800628d 	.word	0x0800628d
 8006280:	08006293 	.word	0x08006293
 8006284:	0800628d 	.word	0x0800628d
 8006288:	080062a5 	.word	0x080062a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	73fb      	strb	r3, [r7, #15]
      break;
 8006290:	e030      	b.n	80062f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006296:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d025      	beq.n	80062ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062a2:	e022      	b.n	80062ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80062ac:	d11f      	bne.n	80062ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80062b2:	e01c      	b.n	80062ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d903      	bls.n	80062c2 <DMA_CheckFifoParam+0xb6>
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b03      	cmp	r3, #3
 80062be:	d003      	beq.n	80062c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80062c0:	e018      	b.n	80062f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	73fb      	strb	r3, [r7, #15]
      break;
 80062c6:	e015      	b.n	80062f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00e      	beq.n	80062f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
      break;
 80062d8:	e00b      	b.n	80062f2 <DMA_CheckFifoParam+0xe6>
      break;
 80062da:	bf00      	nop
 80062dc:	e00a      	b.n	80062f4 <DMA_CheckFifoParam+0xe8>
      break;
 80062de:	bf00      	nop
 80062e0:	e008      	b.n	80062f4 <DMA_CheckFifoParam+0xe8>
      break;
 80062e2:	bf00      	nop
 80062e4:	e006      	b.n	80062f4 <DMA_CheckFifoParam+0xe8>
      break;
 80062e6:	bf00      	nop
 80062e8:	e004      	b.n	80062f4 <DMA_CheckFifoParam+0xe8>
      break;
 80062ea:	bf00      	nop
 80062ec:	e002      	b.n	80062f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80062ee:	bf00      	nop
 80062f0:	e000      	b.n	80062f4 <DMA_CheckFifoParam+0xe8>
      break;
 80062f2:	bf00      	nop
    }
  } 
  
  return status; 
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop

08006304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006304:	b480      	push	{r7}
 8006306:	b089      	sub	sp, #36	@ 0x24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800630e:	2300      	movs	r3, #0
 8006310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006312:	2300      	movs	r3, #0
 8006314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006316:	2300      	movs	r3, #0
 8006318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800631a:	2300      	movs	r3, #0
 800631c:	61fb      	str	r3, [r7, #28]
 800631e:	e165      	b.n	80065ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006320:	2201      	movs	r2, #1
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4013      	ands	r3, r2
 8006332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	429a      	cmp	r2, r3
 800633a:	f040 8154 	bne.w	80065e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	2b01      	cmp	r3, #1
 8006348:	d005      	beq.n	8006356 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006352:	2b02      	cmp	r3, #2
 8006354:	d130      	bne.n	80063b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	2203      	movs	r2, #3
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	43db      	mvns	r3, r3
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	4013      	ands	r3, r2
 800636c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	fa02 f303 	lsl.w	r3, r2, r3
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	4313      	orrs	r3, r2
 800637e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800638c:	2201      	movs	r2, #1
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	fa02 f303 	lsl.w	r3, r2, r3
 8006394:	43db      	mvns	r3, r3
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	4013      	ands	r3, r2
 800639a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	091b      	lsrs	r3, r3, #4
 80063a2:	f003 0201 	and.w	r2, r3, #1
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f003 0303 	and.w	r3, r3, #3
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d017      	beq.n	80063f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	2203      	movs	r2, #3
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	43db      	mvns	r3, r3
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	4013      	ands	r3, r2
 80063da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f003 0303 	and.w	r3, r3, #3
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d123      	bne.n	8006448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	08da      	lsrs	r2, r3, #3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3208      	adds	r2, #8
 8006408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	220f      	movs	r2, #15
 8006418:	fa02 f303 	lsl.w	r3, r2, r3
 800641c:	43db      	mvns	r3, r3
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	4013      	ands	r3, r2
 8006422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	691a      	ldr	r2, [r3, #16]
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	f003 0307 	and.w	r3, r3, #7
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	69ba      	ldr	r2, [r7, #24]
 8006436:	4313      	orrs	r3, r2
 8006438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	08da      	lsrs	r2, r3, #3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3208      	adds	r2, #8
 8006442:	69b9      	ldr	r1, [r7, #24]
 8006444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	2203      	movs	r2, #3
 8006454:	fa02 f303 	lsl.w	r3, r2, r3
 8006458:	43db      	mvns	r3, r3
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	4013      	ands	r3, r2
 800645e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f003 0203 	and.w	r2, r3, #3
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	4313      	orrs	r3, r2
 8006474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 80ae 	beq.w	80065e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	4b5d      	ldr	r3, [pc, #372]	@ (8006604 <HAL_GPIO_Init+0x300>)
 8006490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006492:	4a5c      	ldr	r2, [pc, #368]	@ (8006604 <HAL_GPIO_Init+0x300>)
 8006494:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006498:	6453      	str	r3, [r2, #68]	@ 0x44
 800649a:	4b5a      	ldr	r3, [pc, #360]	@ (8006604 <HAL_GPIO_Init+0x300>)
 800649c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800649e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064a6:	4a58      	ldr	r2, [pc, #352]	@ (8006608 <HAL_GPIO_Init+0x304>)
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	089b      	lsrs	r3, r3, #2
 80064ac:	3302      	adds	r3, #2
 80064ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	220f      	movs	r2, #15
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	43db      	mvns	r3, r3
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	4013      	ands	r3, r2
 80064c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a4f      	ldr	r2, [pc, #316]	@ (800660c <HAL_GPIO_Init+0x308>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d025      	beq.n	800651e <HAL_GPIO_Init+0x21a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a4e      	ldr	r2, [pc, #312]	@ (8006610 <HAL_GPIO_Init+0x30c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d01f      	beq.n	800651a <HAL_GPIO_Init+0x216>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a4d      	ldr	r2, [pc, #308]	@ (8006614 <HAL_GPIO_Init+0x310>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d019      	beq.n	8006516 <HAL_GPIO_Init+0x212>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a4c      	ldr	r2, [pc, #304]	@ (8006618 <HAL_GPIO_Init+0x314>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d013      	beq.n	8006512 <HAL_GPIO_Init+0x20e>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a4b      	ldr	r2, [pc, #300]	@ (800661c <HAL_GPIO_Init+0x318>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00d      	beq.n	800650e <HAL_GPIO_Init+0x20a>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a4a      	ldr	r2, [pc, #296]	@ (8006620 <HAL_GPIO_Init+0x31c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d007      	beq.n	800650a <HAL_GPIO_Init+0x206>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a49      	ldr	r2, [pc, #292]	@ (8006624 <HAL_GPIO_Init+0x320>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d101      	bne.n	8006506 <HAL_GPIO_Init+0x202>
 8006502:	2306      	movs	r3, #6
 8006504:	e00c      	b.n	8006520 <HAL_GPIO_Init+0x21c>
 8006506:	2307      	movs	r3, #7
 8006508:	e00a      	b.n	8006520 <HAL_GPIO_Init+0x21c>
 800650a:	2305      	movs	r3, #5
 800650c:	e008      	b.n	8006520 <HAL_GPIO_Init+0x21c>
 800650e:	2304      	movs	r3, #4
 8006510:	e006      	b.n	8006520 <HAL_GPIO_Init+0x21c>
 8006512:	2303      	movs	r3, #3
 8006514:	e004      	b.n	8006520 <HAL_GPIO_Init+0x21c>
 8006516:	2302      	movs	r3, #2
 8006518:	e002      	b.n	8006520 <HAL_GPIO_Init+0x21c>
 800651a:	2301      	movs	r3, #1
 800651c:	e000      	b.n	8006520 <HAL_GPIO_Init+0x21c>
 800651e:	2300      	movs	r3, #0
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	f002 0203 	and.w	r2, r2, #3
 8006526:	0092      	lsls	r2, r2, #2
 8006528:	4093      	lsls	r3, r2
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	4313      	orrs	r3, r2
 800652e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006530:	4935      	ldr	r1, [pc, #212]	@ (8006608 <HAL_GPIO_Init+0x304>)
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	089b      	lsrs	r3, r3, #2
 8006536:	3302      	adds	r3, #2
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800653e:	4b3a      	ldr	r3, [pc, #232]	@ (8006628 <HAL_GPIO_Init+0x324>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	43db      	mvns	r3, r3
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	4013      	ands	r3, r2
 800654c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006562:	4a31      	ldr	r2, [pc, #196]	@ (8006628 <HAL_GPIO_Init+0x324>)
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006568:	4b2f      	ldr	r3, [pc, #188]	@ (8006628 <HAL_GPIO_Init+0x324>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	43db      	mvns	r3, r3
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	4013      	ands	r3, r2
 8006576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800658c:	4a26      	ldr	r2, [pc, #152]	@ (8006628 <HAL_GPIO_Init+0x324>)
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006592:	4b25      	ldr	r3, [pc, #148]	@ (8006628 <HAL_GPIO_Init+0x324>)
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	43db      	mvns	r3, r3
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	4013      	ands	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006628 <HAL_GPIO_Init+0x324>)
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006628 <HAL_GPIO_Init+0x324>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	43db      	mvns	r3, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4013      	ands	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80065e0:	4a11      	ldr	r2, [pc, #68]	@ (8006628 <HAL_GPIO_Init+0x324>)
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	3301      	adds	r3, #1
 80065ea:	61fb      	str	r3, [r7, #28]
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	2b0f      	cmp	r3, #15
 80065f0:	f67f ae96 	bls.w	8006320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop
 80065f8:	3724      	adds	r7, #36	@ 0x24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40023800 	.word	0x40023800
 8006608:	40013800 	.word	0x40013800
 800660c:	40020000 	.word	0x40020000
 8006610:	40020400 	.word	0x40020400
 8006614:	40020800 	.word	0x40020800
 8006618:	40020c00 	.word	0x40020c00
 800661c:	40021000 	.word	0x40021000
 8006620:	40021400 	.word	0x40021400
 8006624:	40021800 	.word	0x40021800
 8006628:	40013c00 	.word	0x40013c00

0800662c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	807b      	strh	r3, [r7, #2]
 8006638:	4613      	mov	r3, r2
 800663a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800663c:	787b      	ldrb	r3, [r7, #1]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006642:	887a      	ldrh	r2, [r7, #2]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006648:	e003      	b.n	8006652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800664a:	887b      	ldrh	r3, [r7, #2]
 800664c:	041a      	lsls	r2, r3, #16
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	619a      	str	r2, [r3, #24]
}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
	...

08006660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800666a:	4b08      	ldr	r3, [pc, #32]	@ (800668c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800666c:	695a      	ldr	r2, [r3, #20]
 800666e:	88fb      	ldrh	r3, [r7, #6]
 8006670:	4013      	ands	r3, r2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d006      	beq.n	8006684 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006676:	4a05      	ldr	r2, [pc, #20]	@ (800668c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006678:	88fb      	ldrh	r3, [r7, #6]
 800667a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800667c:	88fb      	ldrh	r3, [r7, #6]
 800667e:	4618      	mov	r0, r3
 8006680:	f7fa ff8a 	bl	8001598 <HAL_GPIO_EXTI_Callback>
  }
}
 8006684:	bf00      	nop
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40013c00 	.word	0x40013c00

08006690 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e12b      	b.n	80068fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7fd fb42 	bl	8003d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2224      	movs	r2, #36	@ 0x24
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0201 	bic.w	r2, r2, #1
 80066d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80066f4:	f001 fee0 	bl	80084b8 <HAL_RCC_GetPCLK1Freq>
 80066f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	4a81      	ldr	r2, [pc, #516]	@ (8006904 <HAL_I2C_Init+0x274>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d807      	bhi.n	8006714 <HAL_I2C_Init+0x84>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4a80      	ldr	r2, [pc, #512]	@ (8006908 <HAL_I2C_Init+0x278>)
 8006708:	4293      	cmp	r3, r2
 800670a:	bf94      	ite	ls
 800670c:	2301      	movls	r3, #1
 800670e:	2300      	movhi	r3, #0
 8006710:	b2db      	uxtb	r3, r3
 8006712:	e006      	b.n	8006722 <HAL_I2C_Init+0x92>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4a7d      	ldr	r2, [pc, #500]	@ (800690c <HAL_I2C_Init+0x27c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	bf94      	ite	ls
 800671c:	2301      	movls	r3, #1
 800671e:	2300      	movhi	r3, #0
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e0e7      	b.n	80068fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4a78      	ldr	r2, [pc, #480]	@ (8006910 <HAL_I2C_Init+0x280>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	0c9b      	lsrs	r3, r3, #18
 8006734:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	430a      	orrs	r2, r1
 8006748:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	4a6a      	ldr	r2, [pc, #424]	@ (8006904 <HAL_I2C_Init+0x274>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d802      	bhi.n	8006764 <HAL_I2C_Init+0xd4>
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	3301      	adds	r3, #1
 8006762:	e009      	b.n	8006778 <HAL_I2C_Init+0xe8>
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800676a:	fb02 f303 	mul.w	r3, r2, r3
 800676e:	4a69      	ldr	r2, [pc, #420]	@ (8006914 <HAL_I2C_Init+0x284>)
 8006770:	fba2 2303 	umull	r2, r3, r2, r3
 8006774:	099b      	lsrs	r3, r3, #6
 8006776:	3301      	adds	r3, #1
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	430b      	orrs	r3, r1
 800677e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800678a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	495c      	ldr	r1, [pc, #368]	@ (8006904 <HAL_I2C_Init+0x274>)
 8006794:	428b      	cmp	r3, r1
 8006796:	d819      	bhi.n	80067cc <HAL_I2C_Init+0x13c>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	1e59      	subs	r1, r3, #1
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80067a6:	1c59      	adds	r1, r3, #1
 80067a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80067ac:	400b      	ands	r3, r1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00a      	beq.n	80067c8 <HAL_I2C_Init+0x138>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	1e59      	subs	r1, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80067c0:	3301      	adds	r3, #1
 80067c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c6:	e051      	b.n	800686c <HAL_I2C_Init+0x1dc>
 80067c8:	2304      	movs	r3, #4
 80067ca:	e04f      	b.n	800686c <HAL_I2C_Init+0x1dc>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d111      	bne.n	80067f8 <HAL_I2C_Init+0x168>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	1e58      	subs	r0, r3, #1
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6859      	ldr	r1, [r3, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	440b      	add	r3, r1
 80067e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067e6:	3301      	adds	r3, #1
 80067e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	bf0c      	ite	eq
 80067f0:	2301      	moveq	r3, #1
 80067f2:	2300      	movne	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	e012      	b.n	800681e <HAL_I2C_Init+0x18e>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	1e58      	subs	r0, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6859      	ldr	r1, [r3, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	440b      	add	r3, r1
 8006806:	0099      	lsls	r1, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	fbb0 f3f3 	udiv	r3, r0, r3
 800680e:	3301      	adds	r3, #1
 8006810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006814:	2b00      	cmp	r3, #0
 8006816:	bf0c      	ite	eq
 8006818:	2301      	moveq	r3, #1
 800681a:	2300      	movne	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <HAL_I2C_Init+0x196>
 8006822:	2301      	movs	r3, #1
 8006824:	e022      	b.n	800686c <HAL_I2C_Init+0x1dc>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10e      	bne.n	800684c <HAL_I2C_Init+0x1bc>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	1e58      	subs	r0, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6859      	ldr	r1, [r3, #4]
 8006836:	460b      	mov	r3, r1
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	440b      	add	r3, r1
 800683c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006840:	3301      	adds	r3, #1
 8006842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800684a:	e00f      	b.n	800686c <HAL_I2C_Init+0x1dc>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	1e58      	subs	r0, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6859      	ldr	r1, [r3, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	0099      	lsls	r1, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006862:	3301      	adds	r3, #1
 8006864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006868:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	6809      	ldr	r1, [r1, #0]
 8006870:	4313      	orrs	r3, r2
 8006872:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69da      	ldr	r2, [r3, #28]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800689a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6911      	ldr	r1, [r2, #16]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	68d2      	ldr	r2, [r2, #12]
 80068a6:	4311      	orrs	r1, r2
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6812      	ldr	r2, [r2, #0]
 80068ac:	430b      	orrs	r3, r1
 80068ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695a      	ldr	r2, [r3, #20]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0201 	orr.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2220      	movs	r2, #32
 80068e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	000186a0 	.word	0x000186a0
 8006908:	001e847f 	.word	0x001e847f
 800690c:	003d08ff 	.word	0x003d08ff
 8006910:	431bde83 	.word	0x431bde83
 8006914:	10624dd3 	.word	0x10624dd3

08006918 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af02      	add	r7, sp, #8
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	607a      	str	r2, [r7, #4]
 8006922:	461a      	mov	r2, r3
 8006924:	460b      	mov	r3, r1
 8006926:	817b      	strh	r3, [r7, #10]
 8006928:	4613      	mov	r3, r2
 800692a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800692c:	f7fe fc1c 	bl	8005168 <HAL_GetTick>
 8006930:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b20      	cmp	r3, #32
 800693c:	f040 80e0 	bne.w	8006b00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	2319      	movs	r3, #25
 8006946:	2201      	movs	r2, #1
 8006948:	4970      	ldr	r1, [pc, #448]	@ (8006b0c <HAL_I2C_Master_Transmit+0x1f4>)
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f001 fa3c 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006956:	2302      	movs	r3, #2
 8006958:	e0d3      	b.n	8006b02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006960:	2b01      	cmp	r3, #1
 8006962:	d101      	bne.n	8006968 <HAL_I2C_Master_Transmit+0x50>
 8006964:	2302      	movs	r3, #2
 8006966:	e0cc      	b.n	8006b02 <HAL_I2C_Master_Transmit+0x1ea>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b01      	cmp	r3, #1
 800697c:	d007      	beq.n	800698e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f042 0201 	orr.w	r2, r2, #1
 800698c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800699c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2221      	movs	r2, #33	@ 0x21
 80069a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2210      	movs	r2, #16
 80069aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	893a      	ldrh	r2, [r7, #8]
 80069be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4a50      	ldr	r2, [pc, #320]	@ (8006b10 <HAL_I2C_Master_Transmit+0x1f8>)
 80069ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80069d0:	8979      	ldrh	r1, [r7, #10]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	6a3a      	ldr	r2, [r7, #32]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 ff28 	bl	800782c <I2C_MasterRequestWrite>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e08d      	b.n	8006b02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069e6:	2300      	movs	r3, #0
 80069e8:	613b      	str	r3, [r7, #16]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	613b      	str	r3, [r7, #16]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	613b      	str	r3, [r7, #16]
 80069fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80069fc:	e066      	b.n	8006acc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	6a39      	ldr	r1, [r7, #32]
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f001 fafa 	bl	8007ffc <I2C_WaitOnTXEFlagUntilTimeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00d      	beq.n	8006a2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d107      	bne.n	8006a26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e06b      	b.n	8006b02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	781a      	ldrb	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a52:	3b01      	subs	r3, #1
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	d11b      	bne.n	8006aa0 <HAL_I2C_Master_Transmit+0x188>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d017      	beq.n	8006aa0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a74:	781a      	ldrb	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	6a39      	ldr	r1, [r7, #32]
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f001 faf1 	bl	800808c <I2C_WaitOnBTFFlagUntilTimeout>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00d      	beq.n	8006acc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab4:	2b04      	cmp	r3, #4
 8006ab6:	d107      	bne.n	8006ac8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ac6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e01a      	b.n	8006b02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d194      	bne.n	80069fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	e000      	b.n	8006b02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006b00:	2302      	movs	r3, #2
  }
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	00100002 	.word	0x00100002
 8006b10:	ffff0000 	.word	0xffff0000

08006b14 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b08c      	sub	sp, #48	@ 0x30
 8006b18:	af02      	add	r7, sp, #8
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	607a      	str	r2, [r7, #4]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	460b      	mov	r3, r1
 8006b22:	817b      	strh	r3, [r7, #10]
 8006b24:	4613      	mov	r3, r2
 8006b26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b28:	f7fe fb1e 	bl	8005168 <HAL_GetTick>
 8006b2c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	f040 8217 	bne.w	8006f6a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	2319      	movs	r3, #25
 8006b42:	2201      	movs	r2, #1
 8006b44:	497c      	ldr	r1, [pc, #496]	@ (8006d38 <HAL_I2C_Master_Receive+0x224>)
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f001 f93e 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006b52:	2302      	movs	r3, #2
 8006b54:	e20a      	b.n	8006f6c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_I2C_Master_Receive+0x50>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e203      	b.n	8006f6c <HAL_I2C_Master_Receive+0x458>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d007      	beq.n	8006b8a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0201 	orr.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2222      	movs	r2, #34	@ 0x22
 8006b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2210      	movs	r2, #16
 8006ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	893a      	ldrh	r2, [r7, #8]
 8006bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4a5c      	ldr	r2, [pc, #368]	@ (8006d3c <HAL_I2C_Master_Receive+0x228>)
 8006bca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006bcc:	8979      	ldrh	r1, [r7, #10]
 8006bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 feac 	bl	8007930 <I2C_MasterRequestRead>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e1c4      	b.n	8006f6c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d113      	bne.n	8006c12 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bea:	2300      	movs	r3, #0
 8006bec:	623b      	str	r3, [r7, #32]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	623b      	str	r3, [r7, #32]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	623b      	str	r3, [r7, #32]
 8006bfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	e198      	b.n	8006f44 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d11b      	bne.n	8006c52 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	61fb      	str	r3, [r7, #28]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	61fb      	str	r3, [r7, #28]
 8006c3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	e178      	b.n	8006f44 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d11b      	bne.n	8006c92 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	61bb      	str	r3, [r7, #24]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	61bb      	str	r3, [r7, #24]
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	e158      	b.n	8006f44 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ca0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	617b      	str	r3, [r7, #20]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	617b      	str	r3, [r7, #20]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	617b      	str	r3, [r7, #20]
 8006cb6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006cb8:	e144      	b.n	8006f44 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cbe:	2b03      	cmp	r3, #3
 8006cc0:	f200 80f1 	bhi.w	8006ea6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d123      	bne.n	8006d14 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f001 fa23 	bl	800811c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e145      	b.n	8006f6c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691a      	ldr	r2, [r3, #16]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d12:	e117      	b.n	8006f44 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d14e      	bne.n	8006dba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d22:	2200      	movs	r2, #0
 8006d24:	4906      	ldr	r1, [pc, #24]	@ (8006d40 <HAL_I2C_Master_Receive+0x22c>)
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f001 f84e 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d008      	beq.n	8006d44 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e11a      	b.n	8006f6c <HAL_I2C_Master_Receive+0x458>
 8006d36:	bf00      	nop
 8006d38:	00100002 	.word	0x00100002
 8006d3c:	ffff0000 	.word	0xffff0000
 8006d40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d70:	3b01      	subs	r3, #1
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	691a      	ldr	r2, [r3, #16]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d90:	b2d2      	uxtb	r2, r2
 8006d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	3b01      	subs	r3, #1
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006db8:	e0c4      	b.n	8006f44 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	496c      	ldr	r1, [pc, #432]	@ (8006f74 <HAL_I2C_Master_Receive+0x460>)
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 ffff 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e0cb      	b.n	8006f6c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006de2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	691a      	ldr	r2, [r3, #16]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e00:	3b01      	subs	r3, #1
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4955      	ldr	r1, [pc, #340]	@ (8006f74 <HAL_I2C_Master_Receive+0x460>)
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 ffd1 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e09d      	b.n	8006f6c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691a      	ldr	r2, [r3, #16]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	691a      	ldr	r2, [r3, #16]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	b2d2      	uxtb	r2, r2
 8006e7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006ea4:	e04e      	b.n	8006f44 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ea8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f001 f936 	bl	800811c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e058      	b.n	8006f6c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	691a      	ldr	r2, [r3, #16]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec4:	b2d2      	uxtb	r2, r2
 8006ec6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f003 0304 	and.w	r3, r3, #4
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	d124      	bne.n	8006f44 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d107      	bne.n	8006f12 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f10:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	691a      	ldr	r2, [r3, #16]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f1c:	b2d2      	uxtb	r2, r2
 8006f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f47f aeb6 	bne.w	8006cba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	e000      	b.n	8006f6c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006f6a:	2302      	movs	r3, #2
  }
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3728      	adds	r7, #40	@ 0x28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	00010004 	.word	0x00010004

08006f78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	4608      	mov	r0, r1
 8006f82:	4611      	mov	r1, r2
 8006f84:	461a      	mov	r2, r3
 8006f86:	4603      	mov	r3, r0
 8006f88:	817b      	strh	r3, [r7, #10]
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	813b      	strh	r3, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f92:	f7fe f8e9 	bl	8005168 <HAL_GetTick>
 8006f96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	f040 80d9 	bne.w	8007158 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	2319      	movs	r3, #25
 8006fac:	2201      	movs	r2, #1
 8006fae:	496d      	ldr	r1, [pc, #436]	@ (8007164 <HAL_I2C_Mem_Write+0x1ec>)
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 ff09 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	e0cc      	b.n	800715a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d101      	bne.n	8006fce <HAL_I2C_Mem_Write+0x56>
 8006fca:	2302      	movs	r3, #2
 8006fcc:	e0c5      	b.n	800715a <HAL_I2C_Mem_Write+0x1e2>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d007      	beq.n	8006ff4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 0201 	orr.w	r2, r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007002:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2221      	movs	r2, #33	@ 0x21
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2240      	movs	r2, #64	@ 0x40
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6a3a      	ldr	r2, [r7, #32]
 800701e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007024:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4a4d      	ldr	r2, [pc, #308]	@ (8007168 <HAL_I2C_Mem_Write+0x1f0>)
 8007034:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007036:	88f8      	ldrh	r0, [r7, #6]
 8007038:	893a      	ldrh	r2, [r7, #8]
 800703a:	8979      	ldrh	r1, [r7, #10]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	4603      	mov	r3, r0
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 fd40 	bl	8007acc <I2C_RequestMemoryWrite>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d052      	beq.n	80070f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e081      	b.n	800715a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 ffce 	bl	8007ffc <I2C_WaitOnTXEFlagUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00d      	beq.n	8007082 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706a:	2b04      	cmp	r3, #4
 800706c:	d107      	bne.n	800707e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800707c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e06b      	b.n	800715a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007086:	781a      	ldrb	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800709c:	3b01      	subs	r3, #1
 800709e:	b29a      	uxth	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	3b01      	subs	r3, #1
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b04      	cmp	r3, #4
 80070be:	d11b      	bne.n	80070f8 <HAL_I2C_Mem_Write+0x180>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d017      	beq.n	80070f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070cc:	781a      	ldrb	r2, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	3b01      	subs	r3, #1
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1aa      	bne.n	8007056 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f000 ffc1 	bl	800808c <I2C_WaitOnBTFFlagUntilTimeout>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00d      	beq.n	800712c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007114:	2b04      	cmp	r3, #4
 8007116:	d107      	bne.n	8007128 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007126:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e016      	b.n	800715a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800713a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	e000      	b.n	800715a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007158:	2302      	movs	r3, #2
  }
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	00100002 	.word	0x00100002
 8007168:	ffff0000 	.word	0xffff0000

0800716c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08c      	sub	sp, #48	@ 0x30
 8007170:	af02      	add	r7, sp, #8
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	4608      	mov	r0, r1
 8007176:	4611      	mov	r1, r2
 8007178:	461a      	mov	r2, r3
 800717a:	4603      	mov	r3, r0
 800717c:	817b      	strh	r3, [r7, #10]
 800717e:	460b      	mov	r3, r1
 8007180:	813b      	strh	r3, [r7, #8]
 8007182:	4613      	mov	r3, r2
 8007184:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007186:	f7fd ffef 	bl	8005168 <HAL_GetTick>
 800718a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b20      	cmp	r3, #32
 8007196:	f040 8214 	bne.w	80075c2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800719a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	2319      	movs	r3, #25
 80071a0:	2201      	movs	r2, #1
 80071a2:	497b      	ldr	r1, [pc, #492]	@ (8007390 <HAL_I2C_Mem_Read+0x224>)
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 fe0f 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80071b0:	2302      	movs	r3, #2
 80071b2:	e207      	b.n	80075c4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d101      	bne.n	80071c2 <HAL_I2C_Mem_Read+0x56>
 80071be:	2302      	movs	r3, #2
 80071c0:	e200      	b.n	80075c4 <HAL_I2C_Mem_Read+0x458>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d007      	beq.n	80071e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2222      	movs	r2, #34	@ 0x22
 80071fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2240      	movs	r2, #64	@ 0x40
 8007204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007212:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007218:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800721e:	b29a      	uxth	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4a5b      	ldr	r2, [pc, #364]	@ (8007394 <HAL_I2C_Mem_Read+0x228>)
 8007228:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800722a:	88f8      	ldrh	r0, [r7, #6]
 800722c:	893a      	ldrh	r2, [r7, #8]
 800722e:	8979      	ldrh	r1, [r7, #10]
 8007230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	4603      	mov	r3, r0
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fcdc 	bl	8007bf8 <I2C_RequestMemoryRead>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e1bc      	b.n	80075c4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800724e:	2b00      	cmp	r3, #0
 8007250:	d113      	bne.n	800727a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007252:	2300      	movs	r3, #0
 8007254:	623b      	str	r3, [r7, #32]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	623b      	str	r3, [r7, #32]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	623b      	str	r3, [r7, #32]
 8007266:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	e190      	b.n	800759c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800727e:	2b01      	cmp	r3, #1
 8007280:	d11b      	bne.n	80072ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007290:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007292:	2300      	movs	r3, #0
 8007294:	61fb      	str	r3, [r7, #28]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	61fb      	str	r3, [r7, #28]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	61fb      	str	r3, [r7, #28]
 80072a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	e170      	b.n	800759c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d11b      	bne.n	80072fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072e2:	2300      	movs	r3, #0
 80072e4:	61bb      	str	r3, [r7, #24]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	61bb      	str	r3, [r7, #24]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	61bb      	str	r3, [r7, #24]
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	e150      	b.n	800759c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072fa:	2300      	movs	r3, #0
 80072fc:	617b      	str	r3, [r7, #20]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	617b      	str	r3, [r7, #20]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007310:	e144      	b.n	800759c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007316:	2b03      	cmp	r3, #3
 8007318:	f200 80f1 	bhi.w	80074fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007320:	2b01      	cmp	r3, #1
 8007322:	d123      	bne.n	800736c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007326:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f000 fef7 	bl	800811c <I2C_WaitOnRXNEFlagUntilTimeout>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e145      	b.n	80075c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691a      	ldr	r2, [r3, #16]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007354:	3b01      	subs	r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007360:	b29b      	uxth	r3, r3
 8007362:	3b01      	subs	r3, #1
 8007364:	b29a      	uxth	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800736a:	e117      	b.n	800759c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007370:	2b02      	cmp	r3, #2
 8007372:	d14e      	bne.n	8007412 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737a:	2200      	movs	r2, #0
 800737c:	4906      	ldr	r1, [pc, #24]	@ (8007398 <HAL_I2C_Mem_Read+0x22c>)
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f000 fd22 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d008      	beq.n	800739c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e11a      	b.n	80075c4 <HAL_I2C_Mem_Read+0x458>
 800738e:	bf00      	nop
 8007390:	00100002 	.word	0x00100002
 8007394:	ffff0000 	.word	0xffff0000
 8007398:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691a      	ldr	r2, [r3, #16]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b6:	b2d2      	uxtb	r2, r2
 80073b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073be:	1c5a      	adds	r2, r3, #1
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073c8:	3b01      	subs	r3, #1
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	3b01      	subs	r3, #1
 80073d8:	b29a      	uxth	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691a      	ldr	r2, [r3, #16]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e8:	b2d2      	uxtb	r2, r2
 80073ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073fa:	3b01      	subs	r3, #1
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007410:	e0c4      	b.n	800759c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007418:	2200      	movs	r2, #0
 800741a:	496c      	ldr	r1, [pc, #432]	@ (80075cc <HAL_I2C_Mem_Read+0x460>)
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 fcd3 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d001      	beq.n	800742c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e0cb      	b.n	80075c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800743a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	691a      	ldr	r2, [r3, #16]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007446:	b2d2      	uxtb	r2, r2
 8007448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007464:	b29b      	uxth	r3, r3
 8007466:	3b01      	subs	r3, #1
 8007468:	b29a      	uxth	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007474:	2200      	movs	r2, #0
 8007476:	4955      	ldr	r1, [pc, #340]	@ (80075cc <HAL_I2C_Mem_Read+0x460>)
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fca5 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e09d      	b.n	80075c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	691a      	ldr	r2, [r3, #16]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	3b01      	subs	r3, #1
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	691a      	ldr	r2, [r3, #16]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d4:	b2d2      	uxtb	r2, r2
 80074d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074e6:	3b01      	subs	r3, #1
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80074fc:	e04e      	b.n	800759c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007500:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 fe0a 	bl	800811c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e058      	b.n	80075c4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	691a      	ldr	r2, [r3, #16]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007524:	1c5a      	adds	r2, r3, #1
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800752e:	3b01      	subs	r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800753a:	b29b      	uxth	r3, r3
 800753c:	3b01      	subs	r3, #1
 800753e:	b29a      	uxth	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	f003 0304 	and.w	r3, r3, #4
 800754e:	2b04      	cmp	r3, #4
 8007550:	d124      	bne.n	800759c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007556:	2b03      	cmp	r3, #3
 8007558:	d107      	bne.n	800756a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007568:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	691a      	ldr	r2, [r3, #16]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007574:	b2d2      	uxtb	r2, r2
 8007576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007592:	b29b      	uxth	r3, r3
 8007594:	3b01      	subs	r3, #1
 8007596:	b29a      	uxth	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f47f aeb6 	bne.w	8007312 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	e000      	b.n	80075c4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80075c2:	2302      	movs	r3, #2
  }
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3728      	adds	r7, #40	@ 0x28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	00010004 	.word	0x00010004

080075d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08a      	sub	sp, #40	@ 0x28
 80075d4:	af02      	add	r7, sp, #8
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	607a      	str	r2, [r7, #4]
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	460b      	mov	r3, r1
 80075de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80075e0:	f7fd fdc2 	bl	8005168 <HAL_GetTick>
 80075e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80075e6:	2300      	movs	r3, #0
 80075e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	2b20      	cmp	r3, #32
 80075f4:	f040 8111 	bne.w	800781a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	2319      	movs	r3, #25
 80075fe:	2201      	movs	r2, #1
 8007600:	4988      	ldr	r1, [pc, #544]	@ (8007824 <HAL_I2C_IsDeviceReady+0x254>)
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 fbe0 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800760e:	2302      	movs	r3, #2
 8007610:	e104      	b.n	800781c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007618:	2b01      	cmp	r3, #1
 800761a:	d101      	bne.n	8007620 <HAL_I2C_IsDeviceReady+0x50>
 800761c:	2302      	movs	r3, #2
 800761e:	e0fd      	b.n	800781c <HAL_I2C_IsDeviceReady+0x24c>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b01      	cmp	r3, #1
 8007634:	d007      	beq.n	8007646 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f042 0201 	orr.w	r2, r2, #1
 8007644:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007654:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2224      	movs	r2, #36	@ 0x24
 800765a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4a70      	ldr	r2, [pc, #448]	@ (8007828 <HAL_I2C_IsDeviceReady+0x258>)
 8007668:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007678:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2200      	movs	r2, #0
 8007682:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 fb9e 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00d      	beq.n	80076ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800769c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076a0:	d103      	bne.n	80076aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076a8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e0b6      	b.n	800781c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80076ae:	897b      	ldrh	r3, [r7, #10]
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	461a      	mov	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80076bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80076be:	f7fd fd53 	bl	8005168 <HAL_GetTick>
 80076c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	bf0c      	ite	eq
 80076d2:	2301      	moveq	r3, #1
 80076d4:	2300      	movne	r3, #0
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076e8:	bf0c      	ite	eq
 80076ea:	2301      	moveq	r3, #1
 80076ec:	2300      	movne	r3, #0
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80076f2:	e025      	b.n	8007740 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80076f4:	f7fd fd38 	bl	8005168 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	683a      	ldr	r2, [r7, #0]
 8007700:	429a      	cmp	r2, r3
 8007702:	d302      	bcc.n	800770a <HAL_I2C_IsDeviceReady+0x13a>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d103      	bne.n	8007712 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	22a0      	movs	r2, #160	@ 0xa0
 800770e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	f003 0302 	and.w	r3, r3, #2
 800771c:	2b02      	cmp	r3, #2
 800771e:	bf0c      	ite	eq
 8007720:	2301      	moveq	r3, #1
 8007722:	2300      	movne	r3, #0
 8007724:	b2db      	uxtb	r3, r3
 8007726:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007736:	bf0c      	ite	eq
 8007738:	2301      	moveq	r3, #1
 800773a:	2300      	movne	r3, #0
 800773c:	b2db      	uxtb	r3, r3
 800773e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2ba0      	cmp	r3, #160	@ 0xa0
 800774a:	d005      	beq.n	8007758 <HAL_I2C_IsDeviceReady+0x188>
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d102      	bne.n	8007758 <HAL_I2C_IsDeviceReady+0x188>
 8007752:	7dbb      	ldrb	r3, [r7, #22]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0cd      	beq.n	80076f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2220      	movs	r2, #32
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b02      	cmp	r3, #2
 800776c:	d129      	bne.n	80077c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800777c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800777e:	2300      	movs	r3, #0
 8007780:	613b      	str	r3, [r7, #16]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	613b      	str	r3, [r7, #16]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	613b      	str	r3, [r7, #16]
 8007792:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	2319      	movs	r3, #25
 800779a:	2201      	movs	r2, #1
 800779c:	4921      	ldr	r1, [pc, #132]	@ (8007824 <HAL_I2C_IsDeviceReady+0x254>)
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 fb12 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e036      	b.n	800781c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	e02c      	b.n	800781c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80077da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	2319      	movs	r3, #25
 80077e2:	2201      	movs	r2, #1
 80077e4:	490f      	ldr	r1, [pc, #60]	@ (8007824 <HAL_I2C_IsDeviceReady+0x254>)
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f000 faee 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e012      	b.n	800781c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	3301      	adds	r3, #1
 80077fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	429a      	cmp	r2, r3
 8007802:	f4ff af32 	bcc.w	800766a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2220      	movs	r2, #32
 800780a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e000      	b.n	800781c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800781a:	2302      	movs	r3, #2
  }
}
 800781c:	4618      	mov	r0, r3
 800781e:	3720      	adds	r7, #32
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	00100002 	.word	0x00100002
 8007828:	ffff0000 	.word	0xffff0000

0800782c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af02      	add	r7, sp, #8
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	607a      	str	r2, [r7, #4]
 8007836:	603b      	str	r3, [r7, #0]
 8007838:	460b      	mov	r3, r1
 800783a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007840:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2b08      	cmp	r3, #8
 8007846:	d006      	beq.n	8007856 <I2C_MasterRequestWrite+0x2a>
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d003      	beq.n	8007856 <I2C_MasterRequestWrite+0x2a>
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007854:	d108      	bne.n	8007868 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	e00b      	b.n	8007880 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800786c:	2b12      	cmp	r3, #18
 800786e:	d107      	bne.n	8007880 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800787e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 fa9b 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00d      	beq.n	80078b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078a6:	d103      	bne.n	80078b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e035      	b.n	8007920 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078bc:	d108      	bne.n	80078d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078be:	897b      	ldrh	r3, [r7, #10]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	461a      	mov	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80078cc:	611a      	str	r2, [r3, #16]
 80078ce:	e01b      	b.n	8007908 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80078d0:	897b      	ldrh	r3, [r7, #10]
 80078d2:	11db      	asrs	r3, r3, #7
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	f003 0306 	and.w	r3, r3, #6
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	f063 030f 	orn	r3, r3, #15
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	490e      	ldr	r1, [pc, #56]	@ (8007928 <I2C_MasterRequestWrite+0xfc>)
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 fae4 	bl	8007ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e010      	b.n	8007920 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80078fe:	897b      	ldrh	r3, [r7, #10]
 8007900:	b2da      	uxtb	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	4907      	ldr	r1, [pc, #28]	@ (800792c <I2C_MasterRequestWrite+0x100>)
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 fad4 	bl	8007ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e000      	b.n	8007920 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	00010008 	.word	0x00010008
 800792c:	00010002 	.word	0x00010002

08007930 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af02      	add	r7, sp, #8
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	607a      	str	r2, [r7, #4]
 800793a:	603b      	str	r3, [r7, #0]
 800793c:	460b      	mov	r3, r1
 800793e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007944:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007954:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b08      	cmp	r3, #8
 800795a:	d006      	beq.n	800796a <I2C_MasterRequestRead+0x3a>
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d003      	beq.n	800796a <I2C_MasterRequestRead+0x3a>
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007968:	d108      	bne.n	800797c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007978:	601a      	str	r2, [r3, #0]
 800797a:	e00b      	b.n	8007994 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007980:	2b11      	cmp	r3, #17
 8007982:	d107      	bne.n	8007994 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007992:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 fa11 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00d      	beq.n	80079c8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079ba:	d103      	bne.n	80079c4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e079      	b.n	8007abc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079d0:	d108      	bne.n	80079e4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80079d2:	897b      	ldrh	r3, [r7, #10]
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	f043 0301 	orr.w	r3, r3, #1
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	611a      	str	r2, [r3, #16]
 80079e2:	e05f      	b.n	8007aa4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80079e4:	897b      	ldrh	r3, [r7, #10]
 80079e6:	11db      	asrs	r3, r3, #7
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	f003 0306 	and.w	r3, r3, #6
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f063 030f 	orn	r3, r3, #15
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	4930      	ldr	r1, [pc, #192]	@ (8007ac4 <I2C_MasterRequestRead+0x194>)
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 fa5a 	bl	8007ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e054      	b.n	8007abc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007a12:	897b      	ldrh	r3, [r7, #10]
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	4929      	ldr	r1, [pc, #164]	@ (8007ac8 <I2C_MasterRequestRead+0x198>)
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 fa4a 	bl	8007ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e044      	b.n	8007abc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a32:	2300      	movs	r3, #0
 8007a34:	613b      	str	r3, [r7, #16]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	613b      	str	r3, [r7, #16]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	613b      	str	r3, [r7, #16]
 8007a46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 f9af 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00d      	beq.n	8007a8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a7e:	d103      	bne.n	8007a88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a86:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e017      	b.n	8007abc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007a8c:	897b      	ldrh	r3, [r7, #10]
 8007a8e:	11db      	asrs	r3, r3, #7
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	f003 0306 	and.w	r3, r3, #6
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	f063 030e 	orn	r3, r3, #14
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	4907      	ldr	r1, [pc, #28]	@ (8007ac8 <I2C_MasterRequestRead+0x198>)
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 fa06 	bl	8007ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e000      	b.n	8007abc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3718      	adds	r7, #24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	00010008 	.word	0x00010008
 8007ac8:	00010002 	.word	0x00010002

08007acc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b088      	sub	sp, #32
 8007ad0:	af02      	add	r7, sp, #8
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	4608      	mov	r0, r1
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	461a      	mov	r2, r3
 8007ada:	4603      	mov	r3, r0
 8007adc:	817b      	strh	r3, [r7, #10]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	813b      	strh	r3, [r7, #8]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007af4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 f960 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00d      	beq.n	8007b2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b1c:	d103      	bne.n	8007b26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e05f      	b.n	8007bea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b2a:	897b      	ldrh	r3, [r7, #10]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	461a      	mov	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007b38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3c:	6a3a      	ldr	r2, [r7, #32]
 8007b3e:	492d      	ldr	r1, [pc, #180]	@ (8007bf4 <I2C_RequestMemoryWrite+0x128>)
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 f9bb 	bl	8007ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e04c      	b.n	8007bea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b50:	2300      	movs	r3, #0
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	617b      	str	r3, [r7, #20]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b68:	6a39      	ldr	r1, [r7, #32]
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 fa46 	bl	8007ffc <I2C_WaitOnTXEFlagUntilTimeout>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00d      	beq.n	8007b92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d107      	bne.n	8007b8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007b8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e02b      	b.n	8007bea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b92:	88fb      	ldrh	r3, [r7, #6]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d105      	bne.n	8007ba4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b98:	893b      	ldrh	r3, [r7, #8]
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	611a      	str	r2, [r3, #16]
 8007ba2:	e021      	b.n	8007be8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ba4:	893b      	ldrh	r3, [r7, #8]
 8007ba6:	0a1b      	lsrs	r3, r3, #8
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bb4:	6a39      	ldr	r1, [r7, #32]
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f000 fa20 	bl	8007ffc <I2C_WaitOnTXEFlagUntilTimeout>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00d      	beq.n	8007bde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	d107      	bne.n	8007bda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e005      	b.n	8007bea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bde:	893b      	ldrh	r3, [r7, #8]
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	00010002 	.word	0x00010002

08007bf8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af02      	add	r7, sp, #8
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	4608      	mov	r0, r1
 8007c02:	4611      	mov	r1, r2
 8007c04:	461a      	mov	r2, r3
 8007c06:	4603      	mov	r3, r0
 8007c08:	817b      	strh	r3, [r7, #10]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	813b      	strh	r3, [r7, #8]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007c20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	6a3b      	ldr	r3, [r7, #32]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 f8c2 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00d      	beq.n	8007c66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c58:	d103      	bne.n	8007c62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e0aa      	b.n	8007dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c66:	897b      	ldrh	r3, [r7, #10]
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007c74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c78:	6a3a      	ldr	r2, [r7, #32]
 8007c7a:	4952      	ldr	r1, [pc, #328]	@ (8007dc4 <I2C_RequestMemoryRead+0x1cc>)
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 f91d 	bl	8007ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e097      	b.n	8007dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	617b      	str	r3, [r7, #20]
 8007ca0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ca4:	6a39      	ldr	r1, [r7, #32]
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 f9a8 	bl	8007ffc <I2C_WaitOnTXEFlagUntilTimeout>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00d      	beq.n	8007cce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d107      	bne.n	8007cca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e076      	b.n	8007dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007cce:	88fb      	ldrh	r3, [r7, #6]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d105      	bne.n	8007ce0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007cd4:	893b      	ldrh	r3, [r7, #8]
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	611a      	str	r2, [r3, #16]
 8007cde:	e021      	b.n	8007d24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ce0:	893b      	ldrh	r3, [r7, #8]
 8007ce2:	0a1b      	lsrs	r3, r3, #8
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cf0:	6a39      	ldr	r1, [r7, #32]
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 f982 	bl	8007ffc <I2C_WaitOnTXEFlagUntilTimeout>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00d      	beq.n	8007d1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d02:	2b04      	cmp	r3, #4
 8007d04:	d107      	bne.n	8007d16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e050      	b.n	8007dbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d1a:	893b      	ldrh	r3, [r7, #8]
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d26:	6a39      	ldr	r1, [r7, #32]
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 f967 	bl	8007ffc <I2C_WaitOnTXEFlagUntilTimeout>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00d      	beq.n	8007d50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d38:	2b04      	cmp	r3, #4
 8007d3a:	d107      	bne.n	8007d4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e035      	b.n	8007dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	6a3b      	ldr	r3, [r7, #32]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 f82b 	bl	8007dc8 <I2C_WaitOnFlagUntilTimeout>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00d      	beq.n	8007d94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d86:	d103      	bne.n	8007d90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e013      	b.n	8007dbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007d94:	897b      	ldrh	r3, [r7, #10]
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	f043 0301 	orr.w	r3, r3, #1
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da6:	6a3a      	ldr	r2, [r7, #32]
 8007da8:	4906      	ldr	r1, [pc, #24]	@ (8007dc4 <I2C_RequestMemoryRead+0x1cc>)
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 f886 	bl	8007ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e000      	b.n	8007dbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3718      	adds	r7, #24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	00010002 	.word	0x00010002

08007dc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dd8:	e048      	b.n	8007e6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de0:	d044      	beq.n	8007e6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007de2:	f7fd f9c1 	bl	8005168 <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d302      	bcc.n	8007df8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d139      	bne.n	8007e6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	0c1b      	lsrs	r3, r3, #16
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d10d      	bne.n	8007e1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	43da      	mvns	r2, r3
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	bf0c      	ite	eq
 8007e14:	2301      	moveq	r3, #1
 8007e16:	2300      	movne	r3, #0
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	e00c      	b.n	8007e38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	43da      	mvns	r2, r3
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	4013      	ands	r3, r2
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	bf0c      	ite	eq
 8007e30:	2301      	moveq	r3, #1
 8007e32:	2300      	movne	r3, #0
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	461a      	mov	r2, r3
 8007e38:	79fb      	ldrb	r3, [r7, #7]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d116      	bne.n	8007e6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e58:	f043 0220 	orr.w	r2, r3, #32
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e023      	b.n	8007eb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	0c1b      	lsrs	r3, r3, #16
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d10d      	bne.n	8007e92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	43da      	mvns	r2, r3
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	4013      	ands	r3, r2
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	bf0c      	ite	eq
 8007e88:	2301      	moveq	r3, #1
 8007e8a:	2300      	movne	r3, #0
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	461a      	mov	r2, r3
 8007e90:	e00c      	b.n	8007eac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	43da      	mvns	r2, r3
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	bf0c      	ite	eq
 8007ea4:	2301      	moveq	r3, #1
 8007ea6:	2300      	movne	r3, #0
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	461a      	mov	r2, r3
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d093      	beq.n	8007dda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
 8007ec8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007eca:	e071      	b.n	8007fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007eda:	d123      	bne.n	8007f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007eea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007ef4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2220      	movs	r2, #32
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f10:	f043 0204 	orr.w	r2, r3, #4
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e067      	b.n	8007ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2a:	d041      	beq.n	8007fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f2c:	f7fd f91c 	bl	8005168 <HAL_GetTick>
 8007f30:	4602      	mov	r2, r0
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d302      	bcc.n	8007f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d136      	bne.n	8007fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	0c1b      	lsrs	r3, r3, #16
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d10c      	bne.n	8007f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	43da      	mvns	r2, r3
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	4013      	ands	r3, r2
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	bf14      	ite	ne
 8007f5e:	2301      	movne	r3, #1
 8007f60:	2300      	moveq	r3, #0
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	e00b      	b.n	8007f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	43da      	mvns	r2, r3
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	4013      	ands	r3, r2
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	bf14      	ite	ne
 8007f78:	2301      	movne	r3, #1
 8007f7a:	2300      	moveq	r3, #0
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d016      	beq.n	8007fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9c:	f043 0220 	orr.w	r2, r3, #32
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e021      	b.n	8007ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	0c1b      	lsrs	r3, r3, #16
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d10c      	bne.n	8007fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	43da      	mvns	r2, r3
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	bf14      	ite	ne
 8007fcc:	2301      	movne	r3, #1
 8007fce:	2300      	moveq	r3, #0
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	e00b      	b.n	8007fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	43da      	mvns	r2, r3
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	4013      	ands	r3, r2
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	bf14      	ite	ne
 8007fe6:	2301      	movne	r3, #1
 8007fe8:	2300      	moveq	r3, #0
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f47f af6d 	bne.w	8007ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008008:	e034      	b.n	8008074 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 f8e3 	bl	80081d6 <I2C_IsAcknowledgeFailed>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e034      	b.n	8008084 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008020:	d028      	beq.n	8008074 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008022:	f7fd f8a1 	bl	8005168 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	429a      	cmp	r2, r3
 8008030:	d302      	bcc.n	8008038 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d11d      	bne.n	8008074 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008042:	2b80      	cmp	r3, #128	@ 0x80
 8008044:	d016      	beq.n	8008074 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2220      	movs	r2, #32
 8008050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008060:	f043 0220 	orr.w	r2, r3, #32
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e007      	b.n	8008084 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800807e:	2b80      	cmp	r3, #128	@ 0x80
 8008080:	d1c3      	bne.n	800800a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008098:	e034      	b.n	8008104 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 f89b 	bl	80081d6 <I2C_IsAcknowledgeFailed>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e034      	b.n	8008114 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b0:	d028      	beq.n	8008104 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080b2:	f7fd f859 	bl	8005168 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d302      	bcc.n	80080c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d11d      	bne.n	8008104 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	f003 0304 	and.w	r3, r3, #4
 80080d2:	2b04      	cmp	r3, #4
 80080d4:	d016      	beq.n	8008104 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2220      	movs	r2, #32
 80080e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080f0:	f043 0220 	orr.w	r2, r3, #32
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e007      	b.n	8008114 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	f003 0304 	and.w	r3, r3, #4
 800810e:	2b04      	cmp	r3, #4
 8008110:	d1c3      	bne.n	800809a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008128:	e049      	b.n	80081be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	f003 0310 	and.w	r3, r3, #16
 8008134:	2b10      	cmp	r3, #16
 8008136:	d119      	bne.n	800816c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f06f 0210 	mvn.w	r2, #16
 8008140:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2220      	movs	r2, #32
 800814c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e030      	b.n	80081ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800816c:	f7fc fffc 	bl	8005168 <HAL_GetTick>
 8008170:	4602      	mov	r2, r0
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	429a      	cmp	r2, r3
 800817a:	d302      	bcc.n	8008182 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d11d      	bne.n	80081be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800818c:	2b40      	cmp	r3, #64	@ 0x40
 800818e:	d016      	beq.n	80081be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2220      	movs	r2, #32
 800819a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081aa:	f043 0220 	orr.w	r2, r3, #32
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e007      	b.n	80081ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081c8:	2b40      	cmp	r3, #64	@ 0x40
 80081ca:	d1ae      	bne.n	800812a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ec:	d11b      	bne.n	8008226 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80081f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2220      	movs	r2, #32
 8008202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008212:	f043 0204 	orr.w	r2, r3, #4
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e000      	b.n	8008228 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800823a:	2300      	movs	r3, #0
 800823c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800823e:	2300      	movs	r3, #0
 8008240:	603b      	str	r3, [r7, #0]
 8008242:	4b20      	ldr	r3, [pc, #128]	@ (80082c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008246:	4a1f      	ldr	r2, [pc, #124]	@ (80082c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800824c:	6413      	str	r3, [r2, #64]	@ 0x40
 800824e:	4b1d      	ldr	r3, [pc, #116]	@ (80082c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008256:	603b      	str	r3, [r7, #0]
 8008258:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800825a:	4b1b      	ldr	r3, [pc, #108]	@ (80082c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800825c:	2201      	movs	r2, #1
 800825e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008260:	f7fc ff82 	bl	8005168 <HAL_GetTick>
 8008264:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008266:	e009      	b.n	800827c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008268:	f7fc ff7e 	bl	8005168 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008276:	d901      	bls.n	800827c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e01f      	b.n	80082bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800827c:	4b13      	ldr	r3, [pc, #76]	@ (80082cc <HAL_PWREx_EnableOverDrive+0x98>)
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008288:	d1ee      	bne.n	8008268 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800828a:	4b11      	ldr	r3, [pc, #68]	@ (80082d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800828c:	2201      	movs	r2, #1
 800828e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008290:	f7fc ff6a 	bl	8005168 <HAL_GetTick>
 8008294:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008296:	e009      	b.n	80082ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008298:	f7fc ff66 	bl	8005168 <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082a6:	d901      	bls.n	80082ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e007      	b.n	80082bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80082ac:	4b07      	ldr	r3, [pc, #28]	@ (80082cc <HAL_PWREx_EnableOverDrive+0x98>)
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082b8:	d1ee      	bne.n	8008298 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	40023800 	.word	0x40023800
 80082c8:	420e0040 	.word	0x420e0040
 80082cc:	40007000 	.word	0x40007000
 80082d0:	420e0044 	.word	0x420e0044

080082d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e0cc      	b.n	8008482 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082e8:	4b68      	ldr	r3, [pc, #416]	@ (800848c <HAL_RCC_ClockConfig+0x1b8>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d90c      	bls.n	8008310 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082f6:	4b65      	ldr	r3, [pc, #404]	@ (800848c <HAL_RCC_ClockConfig+0x1b8>)
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	b2d2      	uxtb	r2, r2
 80082fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082fe:	4b63      	ldr	r3, [pc, #396]	@ (800848c <HAL_RCC_ClockConfig+0x1b8>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 030f 	and.w	r3, r3, #15
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	429a      	cmp	r2, r3
 800830a:	d001      	beq.n	8008310 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e0b8      	b.n	8008482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0302 	and.w	r3, r3, #2
 8008318:	2b00      	cmp	r3, #0
 800831a:	d020      	beq.n	800835e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0304 	and.w	r3, r3, #4
 8008324:	2b00      	cmp	r3, #0
 8008326:	d005      	beq.n	8008334 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008328:	4b59      	ldr	r3, [pc, #356]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	4a58      	ldr	r2, [pc, #352]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 800832e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008332:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0308 	and.w	r3, r3, #8
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008340:	4b53      	ldr	r3, [pc, #332]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	4a52      	ldr	r2, [pc, #328]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 8008346:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800834a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800834c:	4b50      	ldr	r3, [pc, #320]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	494d      	ldr	r1, [pc, #308]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 800835a:	4313      	orrs	r3, r2
 800835c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d044      	beq.n	80083f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d107      	bne.n	8008382 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008372:	4b47      	ldr	r3, [pc, #284]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d119      	bne.n	80083b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e07f      	b.n	8008482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	2b02      	cmp	r3, #2
 8008388:	d003      	beq.n	8008392 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800838e:	2b03      	cmp	r3, #3
 8008390:	d107      	bne.n	80083a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008392:	4b3f      	ldr	r3, [pc, #252]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d109      	bne.n	80083b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e06f      	b.n	8008482 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083a2:	4b3b      	ldr	r3, [pc, #236]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 0302 	and.w	r3, r3, #2
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e067      	b.n	8008482 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083b2:	4b37      	ldr	r3, [pc, #220]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f023 0203 	bic.w	r2, r3, #3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	4934      	ldr	r1, [pc, #208]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80083c4:	f7fc fed0 	bl	8005168 <HAL_GetTick>
 80083c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ca:	e00a      	b.n	80083e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083cc:	f7fc fecc 	bl	8005168 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083da:	4293      	cmp	r3, r2
 80083dc:	d901      	bls.n	80083e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e04f      	b.n	8008482 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083e2:	4b2b      	ldr	r3, [pc, #172]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f003 020c 	and.w	r2, r3, #12
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d1eb      	bne.n	80083cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083f4:	4b25      	ldr	r3, [pc, #148]	@ (800848c <HAL_RCC_ClockConfig+0x1b8>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 030f 	and.w	r3, r3, #15
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d20c      	bcs.n	800841c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008402:	4b22      	ldr	r3, [pc, #136]	@ (800848c <HAL_RCC_ClockConfig+0x1b8>)
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	b2d2      	uxtb	r2, r2
 8008408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800840a:	4b20      	ldr	r3, [pc, #128]	@ (800848c <HAL_RCC_ClockConfig+0x1b8>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 030f 	and.w	r3, r3, #15
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	429a      	cmp	r2, r3
 8008416:	d001      	beq.n	800841c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e032      	b.n	8008482 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	2b00      	cmp	r3, #0
 8008426:	d008      	beq.n	800843a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008428:	4b19      	ldr	r3, [pc, #100]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	4916      	ldr	r1, [pc, #88]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 8008436:	4313      	orrs	r3, r2
 8008438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0308 	and.w	r3, r3, #8
 8008442:	2b00      	cmp	r3, #0
 8008444:	d009      	beq.n	800845a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008446:	4b12      	ldr	r3, [pc, #72]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	490e      	ldr	r1, [pc, #56]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 8008456:	4313      	orrs	r3, r2
 8008458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800845a:	f000 f855 	bl	8008508 <HAL_RCC_GetSysClockFreq>
 800845e:	4602      	mov	r2, r0
 8008460:	4b0b      	ldr	r3, [pc, #44]	@ (8008490 <HAL_RCC_ClockConfig+0x1bc>)
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	091b      	lsrs	r3, r3, #4
 8008466:	f003 030f 	and.w	r3, r3, #15
 800846a:	490a      	ldr	r1, [pc, #40]	@ (8008494 <HAL_RCC_ClockConfig+0x1c0>)
 800846c:	5ccb      	ldrb	r3, [r1, r3]
 800846e:	fa22 f303 	lsr.w	r3, r2, r3
 8008472:	4a09      	ldr	r2, [pc, #36]	@ (8008498 <HAL_RCC_ClockConfig+0x1c4>)
 8008474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008476:	4b09      	ldr	r3, [pc, #36]	@ (800849c <HAL_RCC_ClockConfig+0x1c8>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4618      	mov	r0, r3
 800847c:	f7fc fe30 	bl	80050e0 <HAL_InitTick>

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	40023c00 	.word	0x40023c00
 8008490:	40023800 	.word	0x40023800
 8008494:	0800d7ec 	.word	0x0800d7ec
 8008498:	20000060 	.word	0x20000060
 800849c:	20000064 	.word	0x20000064

080084a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084a0:	b480      	push	{r7}
 80084a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084a4:	4b03      	ldr	r3, [pc, #12]	@ (80084b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80084a6:	681b      	ldr	r3, [r3, #0]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	20000060 	.word	0x20000060

080084b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80084bc:	f7ff fff0 	bl	80084a0 <HAL_RCC_GetHCLKFreq>
 80084c0:	4602      	mov	r2, r0
 80084c2:	4b05      	ldr	r3, [pc, #20]	@ (80084d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	0a9b      	lsrs	r3, r3, #10
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	4903      	ldr	r1, [pc, #12]	@ (80084dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80084ce:	5ccb      	ldrb	r3, [r1, r3]
 80084d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	40023800 	.word	0x40023800
 80084dc:	0800d7fc 	.word	0x0800d7fc

080084e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80084e4:	f7ff ffdc 	bl	80084a0 <HAL_RCC_GetHCLKFreq>
 80084e8:	4602      	mov	r2, r0
 80084ea:	4b05      	ldr	r3, [pc, #20]	@ (8008500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	0b5b      	lsrs	r3, r3, #13
 80084f0:	f003 0307 	and.w	r3, r3, #7
 80084f4:	4903      	ldr	r1, [pc, #12]	@ (8008504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80084f6:	5ccb      	ldrb	r3, [r1, r3]
 80084f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	40023800 	.word	0x40023800
 8008504:	0800d7fc 	.word	0x0800d7fc

08008508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800850c:	b0ae      	sub	sp, #184	@ 0xb8
 800850e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008510:	2300      	movs	r3, #0
 8008512:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8008516:	2300      	movs	r3, #0
 8008518:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800851c:	2300      	movs	r3, #0
 800851e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8008522:	2300      	movs	r3, #0
 8008524:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8008528:	2300      	movs	r3, #0
 800852a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800852e:	4bcb      	ldr	r3, [pc, #812]	@ (800885c <HAL_RCC_GetSysClockFreq+0x354>)
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f003 030c 	and.w	r3, r3, #12
 8008536:	2b0c      	cmp	r3, #12
 8008538:	f200 8206 	bhi.w	8008948 <HAL_RCC_GetSysClockFreq+0x440>
 800853c:	a201      	add	r2, pc, #4	@ (adr r2, 8008544 <HAL_RCC_GetSysClockFreq+0x3c>)
 800853e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008542:	bf00      	nop
 8008544:	08008579 	.word	0x08008579
 8008548:	08008949 	.word	0x08008949
 800854c:	08008949 	.word	0x08008949
 8008550:	08008949 	.word	0x08008949
 8008554:	08008581 	.word	0x08008581
 8008558:	08008949 	.word	0x08008949
 800855c:	08008949 	.word	0x08008949
 8008560:	08008949 	.word	0x08008949
 8008564:	08008589 	.word	0x08008589
 8008568:	08008949 	.word	0x08008949
 800856c:	08008949 	.word	0x08008949
 8008570:	08008949 	.word	0x08008949
 8008574:	08008779 	.word	0x08008779
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008578:	4bb9      	ldr	r3, [pc, #740]	@ (8008860 <HAL_RCC_GetSysClockFreq+0x358>)
 800857a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800857e:	e1e7      	b.n	8008950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008580:	4bb8      	ldr	r3, [pc, #736]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008582:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008586:	e1e3      	b.n	8008950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008588:	4bb4      	ldr	r3, [pc, #720]	@ (800885c <HAL_RCC_GetSysClockFreq+0x354>)
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008594:	4bb1      	ldr	r3, [pc, #708]	@ (800885c <HAL_RCC_GetSysClockFreq+0x354>)
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d071      	beq.n	8008684 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085a0:	4bae      	ldr	r3, [pc, #696]	@ (800885c <HAL_RCC_GetSysClockFreq+0x354>)
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	099b      	lsrs	r3, r3, #6
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80085ac:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80085b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80085bc:	2300      	movs	r3, #0
 80085be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80085c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80085c6:	4622      	mov	r2, r4
 80085c8:	462b      	mov	r3, r5
 80085ca:	f04f 0000 	mov.w	r0, #0
 80085ce:	f04f 0100 	mov.w	r1, #0
 80085d2:	0159      	lsls	r1, r3, #5
 80085d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80085d8:	0150      	lsls	r0, r2, #5
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	4621      	mov	r1, r4
 80085e0:	1a51      	subs	r1, r2, r1
 80085e2:	6439      	str	r1, [r7, #64]	@ 0x40
 80085e4:	4629      	mov	r1, r5
 80085e6:	eb63 0301 	sbc.w	r3, r3, r1
 80085ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	f04f 0300 	mov.w	r3, #0
 80085f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80085f8:	4649      	mov	r1, r9
 80085fa:	018b      	lsls	r3, r1, #6
 80085fc:	4641      	mov	r1, r8
 80085fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008602:	4641      	mov	r1, r8
 8008604:	018a      	lsls	r2, r1, #6
 8008606:	4641      	mov	r1, r8
 8008608:	1a51      	subs	r1, r2, r1
 800860a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800860c:	4649      	mov	r1, r9
 800860e:	eb63 0301 	sbc.w	r3, r3, r1
 8008612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008614:	f04f 0200 	mov.w	r2, #0
 8008618:	f04f 0300 	mov.w	r3, #0
 800861c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8008620:	4649      	mov	r1, r9
 8008622:	00cb      	lsls	r3, r1, #3
 8008624:	4641      	mov	r1, r8
 8008626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800862a:	4641      	mov	r1, r8
 800862c:	00ca      	lsls	r2, r1, #3
 800862e:	4610      	mov	r0, r2
 8008630:	4619      	mov	r1, r3
 8008632:	4603      	mov	r3, r0
 8008634:	4622      	mov	r2, r4
 8008636:	189b      	adds	r3, r3, r2
 8008638:	633b      	str	r3, [r7, #48]	@ 0x30
 800863a:	462b      	mov	r3, r5
 800863c:	460a      	mov	r2, r1
 800863e:	eb42 0303 	adc.w	r3, r2, r3
 8008642:	637b      	str	r3, [r7, #52]	@ 0x34
 8008644:	f04f 0200 	mov.w	r2, #0
 8008648:	f04f 0300 	mov.w	r3, #0
 800864c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008650:	4629      	mov	r1, r5
 8008652:	024b      	lsls	r3, r1, #9
 8008654:	4621      	mov	r1, r4
 8008656:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800865a:	4621      	mov	r1, r4
 800865c:	024a      	lsls	r2, r1, #9
 800865e:	4610      	mov	r0, r2
 8008660:	4619      	mov	r1, r3
 8008662:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008666:	2200      	movs	r2, #0
 8008668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800866c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008670:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008674:	f7f8 fb08 	bl	8000c88 <__aeabi_uldivmod>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4613      	mov	r3, r2
 800867e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008682:	e067      	b.n	8008754 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008684:	4b75      	ldr	r3, [pc, #468]	@ (800885c <HAL_RCC_GetSysClockFreq+0x354>)
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	099b      	lsrs	r3, r3, #6
 800868a:	2200      	movs	r2, #0
 800868c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008690:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008694:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800869c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800869e:	2300      	movs	r3, #0
 80086a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80086a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80086a6:	4622      	mov	r2, r4
 80086a8:	462b      	mov	r3, r5
 80086aa:	f04f 0000 	mov.w	r0, #0
 80086ae:	f04f 0100 	mov.w	r1, #0
 80086b2:	0159      	lsls	r1, r3, #5
 80086b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086b8:	0150      	lsls	r0, r2, #5
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	4621      	mov	r1, r4
 80086c0:	1a51      	subs	r1, r2, r1
 80086c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80086c4:	4629      	mov	r1, r5
 80086c6:	eb63 0301 	sbc.w	r3, r3, r1
 80086ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086cc:	f04f 0200 	mov.w	r2, #0
 80086d0:	f04f 0300 	mov.w	r3, #0
 80086d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80086d8:	4649      	mov	r1, r9
 80086da:	018b      	lsls	r3, r1, #6
 80086dc:	4641      	mov	r1, r8
 80086de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80086e2:	4641      	mov	r1, r8
 80086e4:	018a      	lsls	r2, r1, #6
 80086e6:	4641      	mov	r1, r8
 80086e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80086ec:	4649      	mov	r1, r9
 80086ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80086f2:	f04f 0200 	mov.w	r2, #0
 80086f6:	f04f 0300 	mov.w	r3, #0
 80086fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008702:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008706:	4692      	mov	sl, r2
 8008708:	469b      	mov	fp, r3
 800870a:	4623      	mov	r3, r4
 800870c:	eb1a 0303 	adds.w	r3, sl, r3
 8008710:	623b      	str	r3, [r7, #32]
 8008712:	462b      	mov	r3, r5
 8008714:	eb4b 0303 	adc.w	r3, fp, r3
 8008718:	627b      	str	r3, [r7, #36]	@ 0x24
 800871a:	f04f 0200 	mov.w	r2, #0
 800871e:	f04f 0300 	mov.w	r3, #0
 8008722:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008726:	4629      	mov	r1, r5
 8008728:	028b      	lsls	r3, r1, #10
 800872a:	4621      	mov	r1, r4
 800872c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008730:	4621      	mov	r1, r4
 8008732:	028a      	lsls	r2, r1, #10
 8008734:	4610      	mov	r0, r2
 8008736:	4619      	mov	r1, r3
 8008738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800873c:	2200      	movs	r2, #0
 800873e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008740:	677a      	str	r2, [r7, #116]	@ 0x74
 8008742:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008746:	f7f8 fa9f 	bl	8000c88 <__aeabi_uldivmod>
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	4613      	mov	r3, r2
 8008750:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008754:	4b41      	ldr	r3, [pc, #260]	@ (800885c <HAL_RCC_GetSysClockFreq+0x354>)
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	0c1b      	lsrs	r3, r3, #16
 800875a:	f003 0303 	and.w	r3, r3, #3
 800875e:	3301      	adds	r3, #1
 8008760:	005b      	lsls	r3, r3, #1
 8008762:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8008766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800876a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800876e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008772:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008776:	e0eb      	b.n	8008950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008778:	4b38      	ldr	r3, [pc, #224]	@ (800885c <HAL_RCC_GetSysClockFreq+0x354>)
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008780:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008784:	4b35      	ldr	r3, [pc, #212]	@ (800885c <HAL_RCC_GetSysClockFreq+0x354>)
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d06b      	beq.n	8008868 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008790:	4b32      	ldr	r3, [pc, #200]	@ (800885c <HAL_RCC_GetSysClockFreq+0x354>)
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	099b      	lsrs	r3, r3, #6
 8008796:	2200      	movs	r2, #0
 8008798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800879a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800879c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800879e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80087a4:	2300      	movs	r3, #0
 80087a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80087a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80087ac:	4622      	mov	r2, r4
 80087ae:	462b      	mov	r3, r5
 80087b0:	f04f 0000 	mov.w	r0, #0
 80087b4:	f04f 0100 	mov.w	r1, #0
 80087b8:	0159      	lsls	r1, r3, #5
 80087ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087be:	0150      	lsls	r0, r2, #5
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4621      	mov	r1, r4
 80087c6:	1a51      	subs	r1, r2, r1
 80087c8:	61b9      	str	r1, [r7, #24]
 80087ca:	4629      	mov	r1, r5
 80087cc:	eb63 0301 	sbc.w	r3, r3, r1
 80087d0:	61fb      	str	r3, [r7, #28]
 80087d2:	f04f 0200 	mov.w	r2, #0
 80087d6:	f04f 0300 	mov.w	r3, #0
 80087da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80087de:	4659      	mov	r1, fp
 80087e0:	018b      	lsls	r3, r1, #6
 80087e2:	4651      	mov	r1, sl
 80087e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80087e8:	4651      	mov	r1, sl
 80087ea:	018a      	lsls	r2, r1, #6
 80087ec:	4651      	mov	r1, sl
 80087ee:	ebb2 0801 	subs.w	r8, r2, r1
 80087f2:	4659      	mov	r1, fp
 80087f4:	eb63 0901 	sbc.w	r9, r3, r1
 80087f8:	f04f 0200 	mov.w	r2, #0
 80087fc:	f04f 0300 	mov.w	r3, #0
 8008800:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008804:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008808:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800880c:	4690      	mov	r8, r2
 800880e:	4699      	mov	r9, r3
 8008810:	4623      	mov	r3, r4
 8008812:	eb18 0303 	adds.w	r3, r8, r3
 8008816:	613b      	str	r3, [r7, #16]
 8008818:	462b      	mov	r3, r5
 800881a:	eb49 0303 	adc.w	r3, r9, r3
 800881e:	617b      	str	r3, [r7, #20]
 8008820:	f04f 0200 	mov.w	r2, #0
 8008824:	f04f 0300 	mov.w	r3, #0
 8008828:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800882c:	4629      	mov	r1, r5
 800882e:	024b      	lsls	r3, r1, #9
 8008830:	4621      	mov	r1, r4
 8008832:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008836:	4621      	mov	r1, r4
 8008838:	024a      	lsls	r2, r1, #9
 800883a:	4610      	mov	r0, r2
 800883c:	4619      	mov	r1, r3
 800883e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008842:	2200      	movs	r2, #0
 8008844:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008846:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008848:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800884c:	f7f8 fa1c 	bl	8000c88 <__aeabi_uldivmod>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	4613      	mov	r3, r2
 8008856:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800885a:	e065      	b.n	8008928 <HAL_RCC_GetSysClockFreq+0x420>
 800885c:	40023800 	.word	0x40023800
 8008860:	00f42400 	.word	0x00f42400
 8008864:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008868:	4b3d      	ldr	r3, [pc, #244]	@ (8008960 <HAL_RCC_GetSysClockFreq+0x458>)
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	099b      	lsrs	r3, r3, #6
 800886e:	2200      	movs	r2, #0
 8008870:	4618      	mov	r0, r3
 8008872:	4611      	mov	r1, r2
 8008874:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008878:	653b      	str	r3, [r7, #80]	@ 0x50
 800887a:	2300      	movs	r3, #0
 800887c:	657b      	str	r3, [r7, #84]	@ 0x54
 800887e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8008882:	4642      	mov	r2, r8
 8008884:	464b      	mov	r3, r9
 8008886:	f04f 0000 	mov.w	r0, #0
 800888a:	f04f 0100 	mov.w	r1, #0
 800888e:	0159      	lsls	r1, r3, #5
 8008890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008894:	0150      	lsls	r0, r2, #5
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	4641      	mov	r1, r8
 800889c:	1a51      	subs	r1, r2, r1
 800889e:	60b9      	str	r1, [r7, #8]
 80088a0:	4649      	mov	r1, r9
 80088a2:	eb63 0301 	sbc.w	r3, r3, r1
 80088a6:	60fb      	str	r3, [r7, #12]
 80088a8:	f04f 0200 	mov.w	r2, #0
 80088ac:	f04f 0300 	mov.w	r3, #0
 80088b0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80088b4:	4659      	mov	r1, fp
 80088b6:	018b      	lsls	r3, r1, #6
 80088b8:	4651      	mov	r1, sl
 80088ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80088be:	4651      	mov	r1, sl
 80088c0:	018a      	lsls	r2, r1, #6
 80088c2:	4651      	mov	r1, sl
 80088c4:	1a54      	subs	r4, r2, r1
 80088c6:	4659      	mov	r1, fp
 80088c8:	eb63 0501 	sbc.w	r5, r3, r1
 80088cc:	f04f 0200 	mov.w	r2, #0
 80088d0:	f04f 0300 	mov.w	r3, #0
 80088d4:	00eb      	lsls	r3, r5, #3
 80088d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80088da:	00e2      	lsls	r2, r4, #3
 80088dc:	4614      	mov	r4, r2
 80088de:	461d      	mov	r5, r3
 80088e0:	4643      	mov	r3, r8
 80088e2:	18e3      	adds	r3, r4, r3
 80088e4:	603b      	str	r3, [r7, #0]
 80088e6:	464b      	mov	r3, r9
 80088e8:	eb45 0303 	adc.w	r3, r5, r3
 80088ec:	607b      	str	r3, [r7, #4]
 80088ee:	f04f 0200 	mov.w	r2, #0
 80088f2:	f04f 0300 	mov.w	r3, #0
 80088f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80088fa:	4629      	mov	r1, r5
 80088fc:	028b      	lsls	r3, r1, #10
 80088fe:	4621      	mov	r1, r4
 8008900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008904:	4621      	mov	r1, r4
 8008906:	028a      	lsls	r2, r1, #10
 8008908:	4610      	mov	r0, r2
 800890a:	4619      	mov	r1, r3
 800890c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008910:	2200      	movs	r2, #0
 8008912:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008914:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008916:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800891a:	f7f8 f9b5 	bl	8000c88 <__aeabi_uldivmod>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4613      	mov	r3, r2
 8008924:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008928:	4b0d      	ldr	r3, [pc, #52]	@ (8008960 <HAL_RCC_GetSysClockFreq+0x458>)
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	0f1b      	lsrs	r3, r3, #28
 800892e:	f003 0307 	and.w	r3, r3, #7
 8008932:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8008936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800893a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800893e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008946:	e003      	b.n	8008950 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008948:	4b06      	ldr	r3, [pc, #24]	@ (8008964 <HAL_RCC_GetSysClockFreq+0x45c>)
 800894a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800894e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008950:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8008954:	4618      	mov	r0, r3
 8008956:	37b8      	adds	r7, #184	@ 0xb8
 8008958:	46bd      	mov	sp, r7
 800895a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800895e:	bf00      	nop
 8008960:	40023800 	.word	0x40023800
 8008964:	00f42400 	.word	0x00f42400

08008968 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e28d      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 8083 	beq.w	8008a8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008988:	4b94      	ldr	r3, [pc, #592]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f003 030c 	and.w	r3, r3, #12
 8008990:	2b04      	cmp	r3, #4
 8008992:	d019      	beq.n	80089c8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008994:	4b91      	ldr	r3, [pc, #580]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f003 030c 	and.w	r3, r3, #12
        || \
 800899c:	2b08      	cmp	r3, #8
 800899e:	d106      	bne.n	80089ae <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80089a0:	4b8e      	ldr	r3, [pc, #568]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089ac:	d00c      	beq.n	80089c8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089ae:	4b8b      	ldr	r3, [pc, #556]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80089b6:	2b0c      	cmp	r3, #12
 80089b8:	d112      	bne.n	80089e0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089ba:	4b88      	ldr	r3, [pc, #544]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089c6:	d10b      	bne.n	80089e0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089c8:	4b84      	ldr	r3, [pc, #528]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d05b      	beq.n	8008a8c <HAL_RCC_OscConfig+0x124>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d157      	bne.n	8008a8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e25a      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089e8:	d106      	bne.n	80089f8 <HAL_RCC_OscConfig+0x90>
 80089ea:	4b7c      	ldr	r3, [pc, #496]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a7b      	ldr	r2, [pc, #492]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 80089f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089f4:	6013      	str	r3, [r2, #0]
 80089f6:	e01d      	b.n	8008a34 <HAL_RCC_OscConfig+0xcc>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a00:	d10c      	bne.n	8008a1c <HAL_RCC_OscConfig+0xb4>
 8008a02:	4b76      	ldr	r3, [pc, #472]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a75      	ldr	r2, [pc, #468]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a0c:	6013      	str	r3, [r2, #0]
 8008a0e:	4b73      	ldr	r3, [pc, #460]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a72      	ldr	r2, [pc, #456]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	e00b      	b.n	8008a34 <HAL_RCC_OscConfig+0xcc>
 8008a1c:	4b6f      	ldr	r3, [pc, #444]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a6e      	ldr	r2, [pc, #440]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	4b6c      	ldr	r3, [pc, #432]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a6b      	ldr	r2, [pc, #428]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d013      	beq.n	8008a64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a3c:	f7fc fb94 	bl	8005168 <HAL_GetTick>
 8008a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a42:	e008      	b.n	8008a56 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a44:	f7fc fb90 	bl	8005168 <HAL_GetTick>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	2b64      	cmp	r3, #100	@ 0x64
 8008a50:	d901      	bls.n	8008a56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e21f      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a56:	4b61      	ldr	r3, [pc, #388]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d0f0      	beq.n	8008a44 <HAL_RCC_OscConfig+0xdc>
 8008a62:	e014      	b.n	8008a8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a64:	f7fc fb80 	bl	8005168 <HAL_GetTick>
 8008a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a6a:	e008      	b.n	8008a7e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a6c:	f7fc fb7c 	bl	8005168 <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	2b64      	cmp	r3, #100	@ 0x64
 8008a78:	d901      	bls.n	8008a7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e20b      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a7e:	4b57      	ldr	r3, [pc, #348]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1f0      	bne.n	8008a6c <HAL_RCC_OscConfig+0x104>
 8008a8a:	e000      	b.n	8008a8e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 0302 	and.w	r3, r3, #2
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d06f      	beq.n	8008b7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008a9a:	4b50      	ldr	r3, [pc, #320]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f003 030c 	and.w	r3, r3, #12
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d017      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008aa6:	4b4d      	ldr	r3, [pc, #308]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f003 030c 	and.w	r3, r3, #12
        || \
 8008aae:	2b08      	cmp	r3, #8
 8008ab0:	d105      	bne.n	8008abe <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008ab2:	4b4a      	ldr	r3, [pc, #296]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00b      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008abe:	4b47      	ldr	r3, [pc, #284]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008ac6:	2b0c      	cmp	r3, #12
 8008ac8:	d11c      	bne.n	8008b04 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008aca:	4b44      	ldr	r3, [pc, #272]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d116      	bne.n	8008b04 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ad6:	4b41      	ldr	r3, [pc, #260]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d005      	beq.n	8008aee <HAL_RCC_OscConfig+0x186>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d001      	beq.n	8008aee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e1d3      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008aee:	4b3b      	ldr	r3, [pc, #236]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	00db      	lsls	r3, r3, #3
 8008afc:	4937      	ldr	r1, [pc, #220]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b02:	e03a      	b.n	8008b7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d020      	beq.n	8008b4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b0c:	4b34      	ldr	r3, [pc, #208]	@ (8008be0 <HAL_RCC_OscConfig+0x278>)
 8008b0e:	2201      	movs	r2, #1
 8008b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b12:	f7fc fb29 	bl	8005168 <HAL_GetTick>
 8008b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b18:	e008      	b.n	8008b2c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b1a:	f7fc fb25 	bl	8005168 <HAL_GetTick>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d901      	bls.n	8008b2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e1b4      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0302 	and.w	r3, r3, #2
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d0f0      	beq.n	8008b1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b38:	4b28      	ldr	r3, [pc, #160]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	00db      	lsls	r3, r3, #3
 8008b46:	4925      	ldr	r1, [pc, #148]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	600b      	str	r3, [r1, #0]
 8008b4c:	e015      	b.n	8008b7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b4e:	4b24      	ldr	r3, [pc, #144]	@ (8008be0 <HAL_RCC_OscConfig+0x278>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b54:	f7fc fb08 	bl	8005168 <HAL_GetTick>
 8008b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b5a:	e008      	b.n	8008b6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b5c:	f7fc fb04 	bl	8005168 <HAL_GetTick>
 8008b60:	4602      	mov	r2, r0
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d901      	bls.n	8008b6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008b6a:	2303      	movs	r3, #3
 8008b6c:	e193      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1f0      	bne.n	8008b5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 0308 	and.w	r3, r3, #8
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d036      	beq.n	8008bf4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d016      	beq.n	8008bbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b8e:	4b15      	ldr	r3, [pc, #84]	@ (8008be4 <HAL_RCC_OscConfig+0x27c>)
 8008b90:	2201      	movs	r2, #1
 8008b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b94:	f7fc fae8 	bl	8005168 <HAL_GetTick>
 8008b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b9a:	e008      	b.n	8008bae <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b9c:	f7fc fae4 	bl	8005168 <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d901      	bls.n	8008bae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e173      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008bae:	4b0b      	ldr	r3, [pc, #44]	@ (8008bdc <HAL_RCC_OscConfig+0x274>)
 8008bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d0f0      	beq.n	8008b9c <HAL_RCC_OscConfig+0x234>
 8008bba:	e01b      	b.n	8008bf4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008bbc:	4b09      	ldr	r3, [pc, #36]	@ (8008be4 <HAL_RCC_OscConfig+0x27c>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bc2:	f7fc fad1 	bl	8005168 <HAL_GetTick>
 8008bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bc8:	e00e      	b.n	8008be8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bca:	f7fc facd 	bl	8005168 <HAL_GetTick>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d907      	bls.n	8008be8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e15c      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
 8008bdc:	40023800 	.word	0x40023800
 8008be0:	42470000 	.word	0x42470000
 8008be4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008be8:	4b8a      	ldr	r3, [pc, #552]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bec:	f003 0302 	and.w	r3, r3, #2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1ea      	bne.n	8008bca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0304 	and.w	r3, r3, #4
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 8097 	beq.w	8008d30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c02:	2300      	movs	r3, #0
 8008c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c06:	4b83      	ldr	r3, [pc, #524]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10f      	bne.n	8008c32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c12:	2300      	movs	r3, #0
 8008c14:	60bb      	str	r3, [r7, #8]
 8008c16:	4b7f      	ldr	r3, [pc, #508]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c1a:	4a7e      	ldr	r2, [pc, #504]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8008c22:	4b7c      	ldr	r3, [pc, #496]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c2a:	60bb      	str	r3, [r7, #8]
 8008c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c32:	4b79      	ldr	r3, [pc, #484]	@ (8008e18 <HAL_RCC_OscConfig+0x4b0>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d118      	bne.n	8008c70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c3e:	4b76      	ldr	r3, [pc, #472]	@ (8008e18 <HAL_RCC_OscConfig+0x4b0>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a75      	ldr	r2, [pc, #468]	@ (8008e18 <HAL_RCC_OscConfig+0x4b0>)
 8008c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c4a:	f7fc fa8d 	bl	8005168 <HAL_GetTick>
 8008c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c50:	e008      	b.n	8008c64 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c52:	f7fc fa89 	bl	8005168 <HAL_GetTick>
 8008c56:	4602      	mov	r2, r0
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d901      	bls.n	8008c64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e118      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c64:	4b6c      	ldr	r3, [pc, #432]	@ (8008e18 <HAL_RCC_OscConfig+0x4b0>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d0f0      	beq.n	8008c52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d106      	bne.n	8008c86 <HAL_RCC_OscConfig+0x31e>
 8008c78:	4b66      	ldr	r3, [pc, #408]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c7c:	4a65      	ldr	r2, [pc, #404]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008c7e:	f043 0301 	orr.w	r3, r3, #1
 8008c82:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c84:	e01c      	b.n	8008cc0 <HAL_RCC_OscConfig+0x358>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	2b05      	cmp	r3, #5
 8008c8c:	d10c      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x340>
 8008c8e:	4b61      	ldr	r3, [pc, #388]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c92:	4a60      	ldr	r2, [pc, #384]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008c94:	f043 0304 	orr.w	r3, r3, #4
 8008c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c9a:	4b5e      	ldr	r3, [pc, #376]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c9e:	4a5d      	ldr	r2, [pc, #372]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008ca0:	f043 0301 	orr.w	r3, r3, #1
 8008ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ca6:	e00b      	b.n	8008cc0 <HAL_RCC_OscConfig+0x358>
 8008ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cac:	4a59      	ldr	r2, [pc, #356]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008cae:	f023 0301 	bic.w	r3, r3, #1
 8008cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008cb4:	4b57      	ldr	r3, [pc, #348]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cb8:	4a56      	ldr	r2, [pc, #344]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008cba:	f023 0304 	bic.w	r3, r3, #4
 8008cbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d015      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cc8:	f7fc fa4e 	bl	8005168 <HAL_GetTick>
 8008ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cce:	e00a      	b.n	8008ce6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cd0:	f7fc fa4a 	bl	8005168 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d901      	bls.n	8008ce6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e0d7      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ce6:	4b4b      	ldr	r3, [pc, #300]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0ee      	beq.n	8008cd0 <HAL_RCC_OscConfig+0x368>
 8008cf2:	e014      	b.n	8008d1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cf4:	f7fc fa38 	bl	8005168 <HAL_GetTick>
 8008cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cfa:	e00a      	b.n	8008d12 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cfc:	f7fc fa34 	bl	8005168 <HAL_GetTick>
 8008d00:	4602      	mov	r2, r0
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d901      	bls.n	8008d12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e0c1      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d12:	4b40      	ldr	r3, [pc, #256]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1ee      	bne.n	8008cfc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008d1e:	7dfb      	ldrb	r3, [r7, #23]
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d105      	bne.n	8008d30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d24:	4b3b      	ldr	r3, [pc, #236]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d28:	4a3a      	ldr	r2, [pc, #232]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008d2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 80ad 	beq.w	8008e94 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d3a:	4b36      	ldr	r3, [pc, #216]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f003 030c 	and.w	r3, r3, #12
 8008d42:	2b08      	cmp	r3, #8
 8008d44:	d060      	beq.n	8008e08 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d145      	bne.n	8008dda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d4e:	4b33      	ldr	r3, [pc, #204]	@ (8008e1c <HAL_RCC_OscConfig+0x4b4>)
 8008d50:	2200      	movs	r2, #0
 8008d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d54:	f7fc fa08 	bl	8005168 <HAL_GetTick>
 8008d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d5a:	e008      	b.n	8008d6e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d5c:	f7fc fa04 	bl	8005168 <HAL_GetTick>
 8008d60:	4602      	mov	r2, r0
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d901      	bls.n	8008d6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e093      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d6e:	4b29      	ldr	r3, [pc, #164]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1f0      	bne.n	8008d5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	69da      	ldr	r2, [r3, #28]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	431a      	orrs	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d88:	019b      	lsls	r3, r3, #6
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d90:	085b      	lsrs	r3, r3, #1
 8008d92:	3b01      	subs	r3, #1
 8008d94:	041b      	lsls	r3, r3, #16
 8008d96:	431a      	orrs	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d9c:	061b      	lsls	r3, r3, #24
 8008d9e:	431a      	orrs	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008da4:	071b      	lsls	r3, r3, #28
 8008da6:	491b      	ldr	r1, [pc, #108]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008da8:	4313      	orrs	r3, r2
 8008daa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008dac:	4b1b      	ldr	r3, [pc, #108]	@ (8008e1c <HAL_RCC_OscConfig+0x4b4>)
 8008dae:	2201      	movs	r2, #1
 8008db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db2:	f7fc f9d9 	bl	8005168 <HAL_GetTick>
 8008db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008db8:	e008      	b.n	8008dcc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dba:	f7fc f9d5 	bl	8005168 <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d901      	bls.n	8008dcc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e064      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dcc:	4b11      	ldr	r3, [pc, #68]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d0f0      	beq.n	8008dba <HAL_RCC_OscConfig+0x452>
 8008dd8:	e05c      	b.n	8008e94 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dda:	4b10      	ldr	r3, [pc, #64]	@ (8008e1c <HAL_RCC_OscConfig+0x4b4>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de0:	f7fc f9c2 	bl	8005168 <HAL_GetTick>
 8008de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008de6:	e008      	b.n	8008dfa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008de8:	f7fc f9be 	bl	8005168 <HAL_GetTick>
 8008dec:	4602      	mov	r2, r0
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d901      	bls.n	8008dfa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e04d      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dfa:	4b06      	ldr	r3, [pc, #24]	@ (8008e14 <HAL_RCC_OscConfig+0x4ac>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1f0      	bne.n	8008de8 <HAL_RCC_OscConfig+0x480>
 8008e06:	e045      	b.n	8008e94 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d107      	bne.n	8008e20 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e040      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
 8008e14:	40023800 	.word	0x40023800
 8008e18:	40007000 	.word	0x40007000
 8008e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008e20:	4b1f      	ldr	r3, [pc, #124]	@ (8008ea0 <HAL_RCC_OscConfig+0x538>)
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d030      	beq.n	8008e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d129      	bne.n	8008e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d122      	bne.n	8008e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008e50:	4013      	ands	r3, r2
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d119      	bne.n	8008e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e66:	085b      	lsrs	r3, r3, #1
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d10f      	bne.n	8008e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d107      	bne.n	8008e90 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e8a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d001      	beq.n	8008e94 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	e000      	b.n	8008e96 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40023800 	.word	0x40023800

08008ea4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d101      	bne.n	8008eb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e041      	b.n	8008f3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d106      	bne.n	8008ed0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7fb f850 	bl	8003f70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	3304      	adds	r3, #4
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	f000 faec 	bl	80094c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
	...

08008f44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d109      	bne.n	8008f68 <HAL_TIM_PWM_Start+0x24>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	bf14      	ite	ne
 8008f60:	2301      	movne	r3, #1
 8008f62:	2300      	moveq	r3, #0
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	e022      	b.n	8008fae <HAL_TIM_PWM_Start+0x6a>
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2b04      	cmp	r3, #4
 8008f6c:	d109      	bne.n	8008f82 <HAL_TIM_PWM_Start+0x3e>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	bf14      	ite	ne
 8008f7a:	2301      	movne	r3, #1
 8008f7c:	2300      	moveq	r3, #0
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	e015      	b.n	8008fae <HAL_TIM_PWM_Start+0x6a>
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	2b08      	cmp	r3, #8
 8008f86:	d109      	bne.n	8008f9c <HAL_TIM_PWM_Start+0x58>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	bf14      	ite	ne
 8008f94:	2301      	movne	r3, #1
 8008f96:	2300      	moveq	r3, #0
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	e008      	b.n	8008fae <HAL_TIM_PWM_Start+0x6a>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	bf14      	ite	ne
 8008fa8:	2301      	movne	r3, #1
 8008faa:	2300      	moveq	r3, #0
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e07c      	b.n	80090b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d104      	bne.n	8008fc6 <HAL_TIM_PWM_Start+0x82>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fc4:	e013      	b.n	8008fee <HAL_TIM_PWM_Start+0xaa>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b04      	cmp	r3, #4
 8008fca:	d104      	bne.n	8008fd6 <HAL_TIM_PWM_Start+0x92>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fd4:	e00b      	b.n	8008fee <HAL_TIM_PWM_Start+0xaa>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d104      	bne.n	8008fe6 <HAL_TIM_PWM_Start+0xa2>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2202      	movs	r2, #2
 8008fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fe4:	e003      	b.n	8008fee <HAL_TIM_PWM_Start+0xaa>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2202      	movs	r2, #2
 8008fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 fcbe 	bl	8009978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a2d      	ldr	r2, [pc, #180]	@ (80090b8 <HAL_TIM_PWM_Start+0x174>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d004      	beq.n	8009010 <HAL_TIM_PWM_Start+0xcc>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a2c      	ldr	r2, [pc, #176]	@ (80090bc <HAL_TIM_PWM_Start+0x178>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d101      	bne.n	8009014 <HAL_TIM_PWM_Start+0xd0>
 8009010:	2301      	movs	r3, #1
 8009012:	e000      	b.n	8009016 <HAL_TIM_PWM_Start+0xd2>
 8009014:	2300      	movs	r3, #0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d007      	beq.n	800902a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009028:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a22      	ldr	r2, [pc, #136]	@ (80090b8 <HAL_TIM_PWM_Start+0x174>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d022      	beq.n	800907a <HAL_TIM_PWM_Start+0x136>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800903c:	d01d      	beq.n	800907a <HAL_TIM_PWM_Start+0x136>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a1f      	ldr	r2, [pc, #124]	@ (80090c0 <HAL_TIM_PWM_Start+0x17c>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d018      	beq.n	800907a <HAL_TIM_PWM_Start+0x136>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a1d      	ldr	r2, [pc, #116]	@ (80090c4 <HAL_TIM_PWM_Start+0x180>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d013      	beq.n	800907a <HAL_TIM_PWM_Start+0x136>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a1c      	ldr	r2, [pc, #112]	@ (80090c8 <HAL_TIM_PWM_Start+0x184>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d00e      	beq.n	800907a <HAL_TIM_PWM_Start+0x136>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a16      	ldr	r2, [pc, #88]	@ (80090bc <HAL_TIM_PWM_Start+0x178>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d009      	beq.n	800907a <HAL_TIM_PWM_Start+0x136>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a18      	ldr	r2, [pc, #96]	@ (80090cc <HAL_TIM_PWM_Start+0x188>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d004      	beq.n	800907a <HAL_TIM_PWM_Start+0x136>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a16      	ldr	r2, [pc, #88]	@ (80090d0 <HAL_TIM_PWM_Start+0x18c>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d111      	bne.n	800909e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f003 0307 	and.w	r3, r3, #7
 8009084:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2b06      	cmp	r3, #6
 800908a:	d010      	beq.n	80090ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f042 0201 	orr.w	r2, r2, #1
 800909a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800909c:	e007      	b.n	80090ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f042 0201 	orr.w	r2, r2, #1
 80090ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3710      	adds	r7, #16
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	40010000 	.word	0x40010000
 80090bc:	40010400 	.word	0x40010400
 80090c0:	40000400 	.word	0x40000400
 80090c4:	40000800 	.word	0x40000800
 80090c8:	40000c00 	.word	0x40000c00
 80090cc:	40014000 	.word	0x40014000
 80090d0:	40001800 	.word	0x40001800

080090d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e097      	b.n	8009218 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d106      	bne.n	8009102 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7fa febd 	bl	8003e7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2202      	movs	r2, #2
 8009106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	6812      	ldr	r2, [r2, #0]
 8009114:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009118:	f023 0307 	bic.w	r3, r3, #7
 800911c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	3304      	adds	r3, #4
 8009126:	4619      	mov	r1, r3
 8009128:	4610      	mov	r0, r2
 800912a:	f000 f9c9 	bl	80094c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	699b      	ldr	r3, [r3, #24]
 800913c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6a1b      	ldr	r3, [r3, #32]
 8009144:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	4313      	orrs	r3, r2
 800914e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009156:	f023 0303 	bic.w	r3, r3, #3
 800915a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	689a      	ldr	r2, [r3, #8]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	021b      	lsls	r3, r3, #8
 8009166:	4313      	orrs	r3, r2
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	4313      	orrs	r3, r2
 800916c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009174:	f023 030c 	bic.w	r3, r3, #12
 8009178:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009180:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009184:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	68da      	ldr	r2, [r3, #12]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	021b      	lsls	r3, r3, #8
 8009190:	4313      	orrs	r3, r2
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	4313      	orrs	r3, r2
 8009196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	011a      	lsls	r2, r3, #4
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	031b      	lsls	r3, r3, #12
 80091a4:	4313      	orrs	r3, r2
 80091a6:	693a      	ldr	r2, [r7, #16]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80091b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80091ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	685a      	ldr	r2, [r3, #4]
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	695b      	ldr	r3, [r3, #20]
 80091c4:	011b      	lsls	r3, r3, #4
 80091c6:	4313      	orrs	r3, r2
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009230:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009238:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009240:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009248:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d110      	bne.n	8009272 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	2b01      	cmp	r3, #1
 8009254:	d102      	bne.n	800925c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009256:	7b7b      	ldrb	r3, [r7, #13]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d001      	beq.n	8009260 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e069      	b.n	8009334 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2202      	movs	r2, #2
 8009264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2202      	movs	r2, #2
 800926c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009270:	e031      	b.n	80092d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	2b04      	cmp	r3, #4
 8009276:	d110      	bne.n	800929a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009278:	7bbb      	ldrb	r3, [r7, #14]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d102      	bne.n	8009284 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800927e:	7b3b      	ldrb	r3, [r7, #12]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d001      	beq.n	8009288 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e055      	b.n	8009334 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2202      	movs	r2, #2
 800928c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2202      	movs	r2, #2
 8009294:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009298:	e01d      	b.n	80092d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800929a:	7bfb      	ldrb	r3, [r7, #15]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d108      	bne.n	80092b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80092a0:	7bbb      	ldrb	r3, [r7, #14]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d105      	bne.n	80092b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092a6:	7b7b      	ldrb	r3, [r7, #13]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d102      	bne.n	80092b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80092ac:	7b3b      	ldrb	r3, [r7, #12]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d001      	beq.n	80092b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e03e      	b.n	8009334 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2202      	movs	r2, #2
 80092ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2202      	movs	r2, #2
 80092c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2202      	movs	r2, #2
 80092ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2202      	movs	r2, #2
 80092d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <HAL_TIM_Encoder_Start+0xc4>
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	2b04      	cmp	r3, #4
 80092e0:	d008      	beq.n	80092f4 <HAL_TIM_Encoder_Start+0xd4>
 80092e2:	e00f      	b.n	8009304 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2201      	movs	r2, #1
 80092ea:	2100      	movs	r1, #0
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 fb43 	bl	8009978 <TIM_CCxChannelCmd>
      break;
 80092f2:	e016      	b.n	8009322 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2201      	movs	r2, #1
 80092fa:	2104      	movs	r1, #4
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 fb3b 	bl	8009978 <TIM_CCxChannelCmd>
      break;
 8009302:	e00e      	b.n	8009322 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2201      	movs	r2, #1
 800930a:	2100      	movs	r1, #0
 800930c:	4618      	mov	r0, r3
 800930e:	f000 fb33 	bl	8009978 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2201      	movs	r2, #1
 8009318:	2104      	movs	r1, #4
 800931a:	4618      	mov	r0, r3
 800931c:	f000 fb2c 	bl	8009978 <TIM_CCxChannelCmd>
      break;
 8009320:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f042 0201 	orr.w	r2, r2, #1
 8009330:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009352:	2b01      	cmp	r3, #1
 8009354:	d101      	bne.n	800935a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009356:	2302      	movs	r3, #2
 8009358:	e0ae      	b.n	80094b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b0c      	cmp	r3, #12
 8009366:	f200 809f 	bhi.w	80094a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800936a:	a201      	add	r2, pc, #4	@ (adr r2, 8009370 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800936c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009370:	080093a5 	.word	0x080093a5
 8009374:	080094a9 	.word	0x080094a9
 8009378:	080094a9 	.word	0x080094a9
 800937c:	080094a9 	.word	0x080094a9
 8009380:	080093e5 	.word	0x080093e5
 8009384:	080094a9 	.word	0x080094a9
 8009388:	080094a9 	.word	0x080094a9
 800938c:	080094a9 	.word	0x080094a9
 8009390:	08009427 	.word	0x08009427
 8009394:	080094a9 	.word	0x080094a9
 8009398:	080094a9 	.word	0x080094a9
 800939c:	080094a9 	.word	0x080094a9
 80093a0:	08009467 	.word	0x08009467
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68b9      	ldr	r1, [r7, #8]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 f934 	bl	8009618 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	699a      	ldr	r2, [r3, #24]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f042 0208 	orr.w	r2, r2, #8
 80093be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	699a      	ldr	r2, [r3, #24]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f022 0204 	bic.w	r2, r2, #4
 80093ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6999      	ldr	r1, [r3, #24]
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	691a      	ldr	r2, [r3, #16]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	430a      	orrs	r2, r1
 80093e0:	619a      	str	r2, [r3, #24]
      break;
 80093e2:	e064      	b.n	80094ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68b9      	ldr	r1, [r7, #8]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 f984 	bl	80096f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	699a      	ldr	r2, [r3, #24]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	699a      	ldr	r2, [r3, #24]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800940e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6999      	ldr	r1, [r3, #24]
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	021a      	lsls	r2, r3, #8
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	430a      	orrs	r2, r1
 8009422:	619a      	str	r2, [r3, #24]
      break;
 8009424:	e043      	b.n	80094ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68b9      	ldr	r1, [r7, #8]
 800942c:	4618      	mov	r0, r3
 800942e:	f000 f9d9 	bl	80097e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	69da      	ldr	r2, [r3, #28]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f042 0208 	orr.w	r2, r2, #8
 8009440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	69da      	ldr	r2, [r3, #28]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f022 0204 	bic.w	r2, r2, #4
 8009450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	69d9      	ldr	r1, [r3, #28]
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	691a      	ldr	r2, [r3, #16]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	430a      	orrs	r2, r1
 8009462:	61da      	str	r2, [r3, #28]
      break;
 8009464:	e023      	b.n	80094ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68b9      	ldr	r1, [r7, #8]
 800946c:	4618      	mov	r0, r3
 800946e:	f000 fa2d 	bl	80098cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	69da      	ldr	r2, [r3, #28]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	69da      	ldr	r2, [r3, #28]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	69d9      	ldr	r1, [r3, #28]
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	021a      	lsls	r2, r3, #8
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	430a      	orrs	r2, r1
 80094a4:	61da      	str	r2, [r3, #28]
      break;
 80094a6:	e002      	b.n	80094ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	75fb      	strb	r3, [r7, #23]
      break;
 80094ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3718      	adds	r7, #24
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a46      	ldr	r2, [pc, #280]	@ (80095ec <TIM_Base_SetConfig+0x12c>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d013      	beq.n	8009500 <TIM_Base_SetConfig+0x40>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094de:	d00f      	beq.n	8009500 <TIM_Base_SetConfig+0x40>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a43      	ldr	r2, [pc, #268]	@ (80095f0 <TIM_Base_SetConfig+0x130>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d00b      	beq.n	8009500 <TIM_Base_SetConfig+0x40>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a42      	ldr	r2, [pc, #264]	@ (80095f4 <TIM_Base_SetConfig+0x134>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d007      	beq.n	8009500 <TIM_Base_SetConfig+0x40>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a41      	ldr	r2, [pc, #260]	@ (80095f8 <TIM_Base_SetConfig+0x138>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d003      	beq.n	8009500 <TIM_Base_SetConfig+0x40>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a40      	ldr	r2, [pc, #256]	@ (80095fc <TIM_Base_SetConfig+0x13c>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d108      	bne.n	8009512 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	4313      	orrs	r3, r2
 8009510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a35      	ldr	r2, [pc, #212]	@ (80095ec <TIM_Base_SetConfig+0x12c>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d02b      	beq.n	8009572 <TIM_Base_SetConfig+0xb2>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009520:	d027      	beq.n	8009572 <TIM_Base_SetConfig+0xb2>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a32      	ldr	r2, [pc, #200]	@ (80095f0 <TIM_Base_SetConfig+0x130>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d023      	beq.n	8009572 <TIM_Base_SetConfig+0xb2>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a31      	ldr	r2, [pc, #196]	@ (80095f4 <TIM_Base_SetConfig+0x134>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d01f      	beq.n	8009572 <TIM_Base_SetConfig+0xb2>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a30      	ldr	r2, [pc, #192]	@ (80095f8 <TIM_Base_SetConfig+0x138>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d01b      	beq.n	8009572 <TIM_Base_SetConfig+0xb2>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a2f      	ldr	r2, [pc, #188]	@ (80095fc <TIM_Base_SetConfig+0x13c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d017      	beq.n	8009572 <TIM_Base_SetConfig+0xb2>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a2e      	ldr	r2, [pc, #184]	@ (8009600 <TIM_Base_SetConfig+0x140>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d013      	beq.n	8009572 <TIM_Base_SetConfig+0xb2>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a2d      	ldr	r2, [pc, #180]	@ (8009604 <TIM_Base_SetConfig+0x144>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d00f      	beq.n	8009572 <TIM_Base_SetConfig+0xb2>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a2c      	ldr	r2, [pc, #176]	@ (8009608 <TIM_Base_SetConfig+0x148>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d00b      	beq.n	8009572 <TIM_Base_SetConfig+0xb2>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a2b      	ldr	r2, [pc, #172]	@ (800960c <TIM_Base_SetConfig+0x14c>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d007      	beq.n	8009572 <TIM_Base_SetConfig+0xb2>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a2a      	ldr	r2, [pc, #168]	@ (8009610 <TIM_Base_SetConfig+0x150>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d003      	beq.n	8009572 <TIM_Base_SetConfig+0xb2>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a29      	ldr	r2, [pc, #164]	@ (8009614 <TIM_Base_SetConfig+0x154>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d108      	bne.n	8009584 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	4313      	orrs	r3, r2
 8009582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	4313      	orrs	r3, r2
 8009590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	689a      	ldr	r2, [r3, #8]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a10      	ldr	r2, [pc, #64]	@ (80095ec <TIM_Base_SetConfig+0x12c>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d003      	beq.n	80095b8 <TIM_Base_SetConfig+0xf8>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a12      	ldr	r2, [pc, #72]	@ (80095fc <TIM_Base_SetConfig+0x13c>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d103      	bne.n	80095c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	691a      	ldr	r2, [r3, #16]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d105      	bne.n	80095de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	f023 0201 	bic.w	r2, r3, #1
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	611a      	str	r2, [r3, #16]
  }
}
 80095de:	bf00      	nop
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	40010000 	.word	0x40010000
 80095f0:	40000400 	.word	0x40000400
 80095f4:	40000800 	.word	0x40000800
 80095f8:	40000c00 	.word	0x40000c00
 80095fc:	40010400 	.word	0x40010400
 8009600:	40014000 	.word	0x40014000
 8009604:	40014400 	.word	0x40014400
 8009608:	40014800 	.word	0x40014800
 800960c:	40001800 	.word	0x40001800
 8009610:	40001c00 	.word	0x40001c00
 8009614:	40002000 	.word	0x40002000

08009618 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009618:	b480      	push	{r7}
 800961a:	b087      	sub	sp, #28
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a1b      	ldr	r3, [r3, #32]
 800962c:	f023 0201 	bic.w	r2, r3, #1
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	699b      	ldr	r3, [r3, #24]
 800963e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f023 0303 	bic.w	r3, r3, #3
 800964e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	4313      	orrs	r3, r2
 8009658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f023 0302 	bic.w	r3, r3, #2
 8009660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	4313      	orrs	r3, r2
 800966a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a20      	ldr	r2, [pc, #128]	@ (80096f0 <TIM_OC1_SetConfig+0xd8>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d003      	beq.n	800967c <TIM_OC1_SetConfig+0x64>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a1f      	ldr	r2, [pc, #124]	@ (80096f4 <TIM_OC1_SetConfig+0xdc>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d10c      	bne.n	8009696 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	f023 0308 	bic.w	r3, r3, #8
 8009682:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	697a      	ldr	r2, [r7, #20]
 800968a:	4313      	orrs	r3, r2
 800968c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	f023 0304 	bic.w	r3, r3, #4
 8009694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a15      	ldr	r2, [pc, #84]	@ (80096f0 <TIM_OC1_SetConfig+0xd8>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d003      	beq.n	80096a6 <TIM_OC1_SetConfig+0x8e>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a14      	ldr	r2, [pc, #80]	@ (80096f4 <TIM_OC1_SetConfig+0xdc>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d111      	bne.n	80096ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80096b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	4313      	orrs	r3, r2
 80096be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	693a      	ldr	r2, [r7, #16]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	685a      	ldr	r2, [r3, #4]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	621a      	str	r2, [r3, #32]
}
 80096e4:	bf00      	nop
 80096e6:	371c      	adds	r7, #28
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	40010000 	.word	0x40010000
 80096f4:	40010400 	.word	0x40010400

080096f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b087      	sub	sp, #28
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a1b      	ldr	r3, [r3, #32]
 800970c:	f023 0210 	bic.w	r2, r3, #16
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	699b      	ldr	r3, [r3, #24]
 800971e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800972e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	021b      	lsls	r3, r3, #8
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	4313      	orrs	r3, r2
 800973a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	f023 0320 	bic.w	r3, r3, #32
 8009742:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	011b      	lsls	r3, r3, #4
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	4313      	orrs	r3, r2
 800974e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a22      	ldr	r2, [pc, #136]	@ (80097dc <TIM_OC2_SetConfig+0xe4>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d003      	beq.n	8009760 <TIM_OC2_SetConfig+0x68>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a21      	ldr	r2, [pc, #132]	@ (80097e0 <TIM_OC2_SetConfig+0xe8>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d10d      	bne.n	800977c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	011b      	lsls	r3, r3, #4
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	4313      	orrs	r3, r2
 8009772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800977a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a17      	ldr	r2, [pc, #92]	@ (80097dc <TIM_OC2_SetConfig+0xe4>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d003      	beq.n	800978c <TIM_OC2_SetConfig+0x94>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a16      	ldr	r2, [pc, #88]	@ (80097e0 <TIM_OC2_SetConfig+0xe8>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d113      	bne.n	80097b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009792:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800979a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	693a      	ldr	r2, [r7, #16]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	685a      	ldr	r2, [r3, #4]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	621a      	str	r2, [r3, #32]
}
 80097ce:	bf00      	nop
 80097d0:	371c      	adds	r7, #28
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	40010000 	.word	0x40010000
 80097e0:	40010400 	.word	0x40010400

080097e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b087      	sub	sp, #28
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a1b      	ldr	r3, [r3, #32]
 80097f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f023 0303 	bic.w	r3, r3, #3
 800981a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	4313      	orrs	r3, r2
 8009824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800982c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	021b      	lsls	r3, r3, #8
 8009834:	697a      	ldr	r2, [r7, #20]
 8009836:	4313      	orrs	r3, r2
 8009838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a21      	ldr	r2, [pc, #132]	@ (80098c4 <TIM_OC3_SetConfig+0xe0>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d003      	beq.n	800984a <TIM_OC3_SetConfig+0x66>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a20      	ldr	r2, [pc, #128]	@ (80098c8 <TIM_OC3_SetConfig+0xe4>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d10d      	bne.n	8009866 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009850:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	021b      	lsls	r3, r3, #8
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	4313      	orrs	r3, r2
 800985c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a16      	ldr	r2, [pc, #88]	@ (80098c4 <TIM_OC3_SetConfig+0xe0>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d003      	beq.n	8009876 <TIM_OC3_SetConfig+0x92>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a15      	ldr	r2, [pc, #84]	@ (80098c8 <TIM_OC3_SetConfig+0xe4>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d113      	bne.n	800989e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800987c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	011b      	lsls	r3, r3, #4
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	4313      	orrs	r3, r2
 8009890:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	011b      	lsls	r3, r3, #4
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	4313      	orrs	r3, r2
 800989c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	621a      	str	r2, [r3, #32]
}
 80098b8:	bf00      	nop
 80098ba:	371c      	adds	r7, #28
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	40010000 	.word	0x40010000
 80098c8:	40010400 	.word	0x40010400

080098cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	69db      	ldr	r3, [r3, #28]
 80098f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	021b      	lsls	r3, r3, #8
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	4313      	orrs	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	031b      	lsls	r3, r3, #12
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	4313      	orrs	r3, r2
 8009922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a12      	ldr	r2, [pc, #72]	@ (8009970 <TIM_OC4_SetConfig+0xa4>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d003      	beq.n	8009934 <TIM_OC4_SetConfig+0x68>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a11      	ldr	r2, [pc, #68]	@ (8009974 <TIM_OC4_SetConfig+0xa8>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d109      	bne.n	8009948 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800993a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	019b      	lsls	r3, r3, #6
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	4313      	orrs	r3, r2
 8009946:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	621a      	str	r2, [r3, #32]
}
 8009962:	bf00      	nop
 8009964:	371c      	adds	r7, #28
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	40010000 	.word	0x40010000
 8009974:	40010400 	.word	0x40010400

08009978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009978:	b480      	push	{r7}
 800997a:	b087      	sub	sp, #28
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	f003 031f 	and.w	r3, r3, #31
 800998a:	2201      	movs	r2, #1
 800998c:	fa02 f303 	lsl.w	r3, r2, r3
 8009990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6a1a      	ldr	r2, [r3, #32]
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	43db      	mvns	r3, r3
 800999a:	401a      	ands	r2, r3
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6a1a      	ldr	r2, [r3, #32]
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	f003 031f 	and.w	r3, r3, #31
 80099aa:	6879      	ldr	r1, [r7, #4]
 80099ac:	fa01 f303 	lsl.w	r3, r1, r3
 80099b0:	431a      	orrs	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	621a      	str	r2, [r3, #32]
}
 80099b6:	bf00      	nop
 80099b8:	371c      	adds	r7, #28
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
	...

080099c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b085      	sub	sp, #20
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d101      	bne.n	80099dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099d8:	2302      	movs	r3, #2
 80099da:	e05a      	b.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a21      	ldr	r2, [pc, #132]	@ (8009aa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d022      	beq.n	8009a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a28:	d01d      	beq.n	8009a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d018      	beq.n	8009a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a1b      	ldr	r2, [pc, #108]	@ (8009aa8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d013      	beq.n	8009a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a1a      	ldr	r2, [pc, #104]	@ (8009aac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d00e      	beq.n	8009a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a18      	ldr	r2, [pc, #96]	@ (8009ab0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d009      	beq.n	8009a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a17      	ldr	r2, [pc, #92]	@ (8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d004      	beq.n	8009a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a15      	ldr	r2, [pc, #84]	@ (8009ab8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d10c      	bne.n	8009a80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	4313      	orrs	r3, r2
 8009a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3714      	adds	r7, #20
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	40010000 	.word	0x40010000
 8009aa4:	40000400 	.word	0x40000400
 8009aa8:	40000800 	.word	0x40000800
 8009aac:	40000c00 	.word	0x40000c00
 8009ab0:	40010400 	.word	0x40010400
 8009ab4:	40014000 	.word	0x40014000
 8009ab8:	40001800 	.word	0x40001800

08009abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d101      	bne.n	8009ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e042      	b.n	8009b54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d106      	bne.n	8009ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7fa fac0 	bl	8004068 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2224      	movs	r2, #36	@ 0x24
 8009aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68da      	ldr	r2, [r3, #12]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fc85 	bl	800a410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	691a      	ldr	r2, [r3, #16]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	695a      	ldr	r2, [r3, #20]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68da      	ldr	r2, [r3, #12]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2220      	movs	r2, #32
 8009b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2220      	movs	r2, #32
 8009b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b0ba      	sub	sp, #232	@ 0xe8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009b82:	2300      	movs	r3, #0
 8009b84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b92:	f003 030f 	and.w	r3, r3, #15
 8009b96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009b9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10f      	bne.n	8009bc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ba6:	f003 0320 	and.w	r3, r3, #32
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d009      	beq.n	8009bc2 <HAL_UART_IRQHandler+0x66>
 8009bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bb2:	f003 0320 	and.w	r3, r3, #32
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d003      	beq.n	8009bc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fb69 	bl	800a292 <UART_Receive_IT>
      return;
 8009bc0:	e25b      	b.n	800a07a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009bc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f000 80de 	beq.w	8009d88 <HAL_UART_IRQHandler+0x22c>
 8009bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d106      	bne.n	8009be6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bdc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f000 80d1 	beq.w	8009d88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00b      	beq.n	8009c0a <HAL_UART_IRQHandler+0xae>
 8009bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d005      	beq.n	8009c0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c02:	f043 0201 	orr.w	r2, r3, #1
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c0e:	f003 0304 	and.w	r3, r3, #4
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00b      	beq.n	8009c2e <HAL_UART_IRQHandler+0xd2>
 8009c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d005      	beq.n	8009c2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c26:	f043 0202 	orr.w	r2, r3, #2
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c32:	f003 0302 	and.w	r3, r3, #2
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00b      	beq.n	8009c52 <HAL_UART_IRQHandler+0xf6>
 8009c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c3e:	f003 0301 	and.w	r3, r3, #1
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d005      	beq.n	8009c52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c4a:	f043 0204 	orr.w	r2, r3, #4
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c56:	f003 0308 	and.w	r3, r3, #8
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d011      	beq.n	8009c82 <HAL_UART_IRQHandler+0x126>
 8009c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c62:	f003 0320 	and.w	r3, r3, #32
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d105      	bne.n	8009c76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c6e:	f003 0301 	and.w	r3, r3, #1
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d005      	beq.n	8009c82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c7a:	f043 0208 	orr.w	r2, r3, #8
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 81f2 	beq.w	800a070 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c90:	f003 0320 	and.w	r3, r3, #32
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d008      	beq.n	8009caa <HAL_UART_IRQHandler+0x14e>
 8009c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c9c:	f003 0320 	and.w	r3, r3, #32
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 faf4 	bl	800a292 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	695b      	ldr	r3, [r3, #20]
 8009cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cb4:	2b40      	cmp	r3, #64	@ 0x40
 8009cb6:	bf0c      	ite	eq
 8009cb8:	2301      	moveq	r3, #1
 8009cba:	2300      	movne	r3, #0
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cc6:	f003 0308 	and.w	r3, r3, #8
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d103      	bne.n	8009cd6 <HAL_UART_IRQHandler+0x17a>
 8009cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d04f      	beq.n	8009d76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f9fc 	bl	800a0d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ce6:	2b40      	cmp	r3, #64	@ 0x40
 8009ce8:	d141      	bne.n	8009d6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3314      	adds	r3, #20
 8009cf0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009cf8:	e853 3f00 	ldrex	r3, [r3]
 8009cfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3314      	adds	r3, #20
 8009d12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009d16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d26:	e841 2300 	strex	r3, r2, [r1]
 8009d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1d9      	bne.n	8009cea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d013      	beq.n	8009d66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d42:	4a7e      	ldr	r2, [pc, #504]	@ (8009f3c <HAL_UART_IRQHandler+0x3e0>)
 8009d44:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fc f87c 	bl	8005e48 <HAL_DMA_Abort_IT>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d016      	beq.n	8009d84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009d60:	4610      	mov	r0, r2
 8009d62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d64:	e00e      	b.n	8009d84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f99e 	bl	800a0a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d6c:	e00a      	b.n	8009d84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f99a 	bl	800a0a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d74:	e006      	b.n	8009d84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f996 	bl	800a0a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009d82:	e175      	b.n	800a070 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d84:	bf00      	nop
    return;
 8009d86:	e173      	b.n	800a070 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	f040 814f 	bne.w	800a030 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d96:	f003 0310 	and.w	r3, r3, #16
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	f000 8148 	beq.w	800a030 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009da4:	f003 0310 	and.w	r3, r3, #16
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f000 8141 	beq.w	800a030 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009dae:	2300      	movs	r3, #0
 8009db0:	60bb      	str	r3, [r7, #8]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	60bb      	str	r3, [r7, #8]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	60bb      	str	r3, [r7, #8]
 8009dc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	695b      	ldr	r3, [r3, #20]
 8009dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dce:	2b40      	cmp	r3, #64	@ 0x40
 8009dd0:	f040 80b6 	bne.w	8009f40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009de0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f000 8145 	beq.w	800a074 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009dee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009df2:	429a      	cmp	r2, r3
 8009df4:	f080 813e 	bcs.w	800a074 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009dfe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e0a:	f000 8088 	beq.w	8009f1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	330c      	adds	r3, #12
 8009e14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e1c:	e853 3f00 	ldrex	r3, [r3]
 8009e20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	330c      	adds	r3, #12
 8009e36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009e3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009e46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e4a:	e841 2300 	strex	r3, r2, [r1]
 8009e4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1d9      	bne.n	8009e0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	3314      	adds	r3, #20
 8009e60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e64:	e853 3f00 	ldrex	r3, [r3]
 8009e68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009e6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e6c:	f023 0301 	bic.w	r3, r3, #1
 8009e70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	3314      	adds	r3, #20
 8009e7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009e7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009e82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009e86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e8a:	e841 2300 	strex	r3, r2, [r1]
 8009e8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1e1      	bne.n	8009e5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	3314      	adds	r3, #20
 8009e9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ea0:	e853 3f00 	ldrex	r3, [r3]
 8009ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ea6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ea8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009eac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	3314      	adds	r3, #20
 8009eb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009eba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009ec0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009ec2:	e841 2300 	strex	r3, r2, [r1]
 8009ec6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ec8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1e3      	bne.n	8009e96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2220      	movs	r2, #32
 8009ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	330c      	adds	r3, #12
 8009ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ee6:	e853 3f00 	ldrex	r3, [r3]
 8009eea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009eec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009eee:	f023 0310 	bic.w	r3, r3, #16
 8009ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	330c      	adds	r3, #12
 8009efc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009f00:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009f02:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f08:	e841 2300 	strex	r3, r2, [r1]
 8009f0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d1e3      	bne.n	8009edc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fb ff25 	bl	8005d68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2202      	movs	r2, #2
 8009f22:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 f8c1 	bl	800a0bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f3a:	e09b      	b.n	800a074 <HAL_UART_IRQHandler+0x518>
 8009f3c:	0800a19b 	.word	0x0800a19b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f000 808e 	beq.w	800a078 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009f5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 8089 	beq.w	800a078 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	330c      	adds	r3, #12
 8009f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f70:	e853 3f00 	ldrex	r3, [r3]
 8009f74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	330c      	adds	r3, #12
 8009f86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009f8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f92:	e841 2300 	strex	r3, r2, [r1]
 8009f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1e3      	bne.n	8009f66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	3314      	adds	r3, #20
 8009fa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa8:	e853 3f00 	ldrex	r3, [r3]
 8009fac:	623b      	str	r3, [r7, #32]
   return(result);
 8009fae:	6a3b      	ldr	r3, [r7, #32]
 8009fb0:	f023 0301 	bic.w	r3, r3, #1
 8009fb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3314      	adds	r3, #20
 8009fbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009fc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fca:	e841 2300 	strex	r3, r2, [r1]
 8009fce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1e3      	bne.n	8009f9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2220      	movs	r2, #32
 8009fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	330c      	adds	r3, #12
 8009fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	e853 3f00 	ldrex	r3, [r3]
 8009ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f023 0310 	bic.w	r3, r3, #16
 8009ffa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	330c      	adds	r3, #12
 800a004:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a008:	61fa      	str	r2, [r7, #28]
 800a00a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00c:	69b9      	ldr	r1, [r7, #24]
 800a00e:	69fa      	ldr	r2, [r7, #28]
 800a010:	e841 2300 	strex	r3, r2, [r1]
 800a014:	617b      	str	r3, [r7, #20]
   return(result);
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d1e3      	bne.n	8009fe4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2202      	movs	r2, #2
 800a020:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a022:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a026:	4619      	mov	r1, r3
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f847 	bl	800a0bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a02e:	e023      	b.n	800a078 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d009      	beq.n	800a050 <HAL_UART_IRQHandler+0x4f4>
 800a03c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f8ba 	bl	800a1c2 <UART_Transmit_IT>
    return;
 800a04e:	e014      	b.n	800a07a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00e      	beq.n	800a07a <HAL_UART_IRQHandler+0x51e>
 800a05c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a064:	2b00      	cmp	r3, #0
 800a066:	d008      	beq.n	800a07a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 f8fa 	bl	800a262 <UART_EndTransmit_IT>
    return;
 800a06e:	e004      	b.n	800a07a <HAL_UART_IRQHandler+0x51e>
    return;
 800a070:	bf00      	nop
 800a072:	e002      	b.n	800a07a <HAL_UART_IRQHandler+0x51e>
      return;
 800a074:	bf00      	nop
 800a076:	e000      	b.n	800a07a <HAL_UART_IRQHandler+0x51e>
      return;
 800a078:	bf00      	nop
  }
}
 800a07a:	37e8      	adds	r7, #232	@ 0xe8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a09c:	bf00      	nop
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b095      	sub	sp, #84	@ 0x54
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	330c      	adds	r3, #12
 800a0e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0e6:	e853 3f00 	ldrex	r3, [r3]
 800a0ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	330c      	adds	r3, #12
 800a0fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a0fc:	643a      	str	r2, [r7, #64]	@ 0x40
 800a0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a100:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a102:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a104:	e841 2300 	strex	r3, r2, [r1]
 800a108:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1e5      	bne.n	800a0dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3314      	adds	r3, #20
 800a116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a118:	6a3b      	ldr	r3, [r7, #32]
 800a11a:	e853 3f00 	ldrex	r3, [r3]
 800a11e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	f023 0301 	bic.w	r3, r3, #1
 800a126:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3314      	adds	r3, #20
 800a12e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a130:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a132:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a134:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a138:	e841 2300 	strex	r3, r2, [r1]
 800a13c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1e5      	bne.n	800a110 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d119      	bne.n	800a180 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	330c      	adds	r3, #12
 800a152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	e853 3f00 	ldrex	r3, [r3]
 800a15a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	f023 0310 	bic.w	r3, r3, #16
 800a162:	647b      	str	r3, [r7, #68]	@ 0x44
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	330c      	adds	r3, #12
 800a16a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a16c:	61ba      	str	r2, [r7, #24]
 800a16e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a170:	6979      	ldr	r1, [r7, #20]
 800a172:	69ba      	ldr	r2, [r7, #24]
 800a174:	e841 2300 	strex	r3, r2, [r1]
 800a178:	613b      	str	r3, [r7, #16]
   return(result);
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1e5      	bne.n	800a14c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2220      	movs	r2, #32
 800a184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a18e:	bf00      	nop
 800a190:	3754      	adds	r7, #84	@ 0x54
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b084      	sub	sp, #16
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f7ff ff77 	bl	800a0a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1ba:	bf00      	nop
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b085      	sub	sp, #20
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	2b21      	cmp	r3, #33	@ 0x21
 800a1d4:	d13e      	bne.n	800a254 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1de:	d114      	bne.n	800a20a <UART_Transmit_IT+0x48>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d110      	bne.n	800a20a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6a1b      	ldr	r3, [r3, #32]
 800a1ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	881b      	ldrh	r3, [r3, #0]
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	1c9a      	adds	r2, r3, #2
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	621a      	str	r2, [r3, #32]
 800a208:	e008      	b.n	800a21c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	1c59      	adds	r1, r3, #1
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	6211      	str	r1, [r2, #32]
 800a214:	781a      	ldrb	r2, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a220:	b29b      	uxth	r3, r3
 800a222:	3b01      	subs	r3, #1
 800a224:	b29b      	uxth	r3, r3
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	4619      	mov	r1, r3
 800a22a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10f      	bne.n	800a250 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68da      	ldr	r2, [r3, #12]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a23e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	68da      	ldr	r2, [r3, #12]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a24e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a250:	2300      	movs	r3, #0
 800a252:	e000      	b.n	800a256 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a254:	2302      	movs	r3, #2
  }
}
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b082      	sub	sp, #8
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68da      	ldr	r2, [r3, #12]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a278:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2220      	movs	r2, #32
 800a27e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7ff fefc 	bl	800a080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b08c      	sub	sp, #48	@ 0x30
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b22      	cmp	r3, #34	@ 0x22
 800a2a4:	f040 80ae 	bne.w	800a404 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	689b      	ldr	r3, [r3, #8]
 800a2ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2b0:	d117      	bne.n	800a2e2 <UART_Receive_IT+0x50>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d113      	bne.n	800a2e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2da:	1c9a      	adds	r2, r3, #2
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	629a      	str	r2, [r3, #40]	@ 0x28
 800a2e0:	e026      	b.n	800a330 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2f4:	d007      	beq.n	800a306 <UART_Receive_IT+0x74>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10a      	bne.n	800a314 <UART_Receive_IT+0x82>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d106      	bne.n	800a314 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	b2da      	uxtb	r2, r3
 800a30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a310:	701a      	strb	r2, [r3, #0]
 800a312:	e008      	b.n	800a326 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a320:	b2da      	uxtb	r2, r3
 800a322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a324:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a32a:	1c5a      	adds	r2, r3, #1
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a334:	b29b      	uxth	r3, r3
 800a336:	3b01      	subs	r3, #1
 800a338:	b29b      	uxth	r3, r3
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	4619      	mov	r1, r3
 800a33e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a340:	2b00      	cmp	r3, #0
 800a342:	d15d      	bne.n	800a400 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68da      	ldr	r2, [r3, #12]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f022 0220 	bic.w	r2, r2, #32
 800a352:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68da      	ldr	r2, [r3, #12]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a362:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	695a      	ldr	r2, [r3, #20]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f022 0201 	bic.w	r2, r2, #1
 800a372:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2220      	movs	r2, #32
 800a378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a386:	2b01      	cmp	r3, #1
 800a388:	d135      	bne.n	800a3f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	330c      	adds	r3, #12
 800a396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	e853 3f00 	ldrex	r3, [r3]
 800a39e:	613b      	str	r3, [r7, #16]
   return(result);
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	f023 0310 	bic.w	r3, r3, #16
 800a3a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	330c      	adds	r3, #12
 800a3ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3b0:	623a      	str	r2, [r7, #32]
 800a3b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b4:	69f9      	ldr	r1, [r7, #28]
 800a3b6:	6a3a      	ldr	r2, [r7, #32]
 800a3b8:	e841 2300 	strex	r3, r2, [r1]
 800a3bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1e5      	bne.n	800a390 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0310 	and.w	r3, r3, #16
 800a3ce:	2b10      	cmp	r3, #16
 800a3d0:	d10a      	bne.n	800a3e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	60fb      	str	r3, [r7, #12]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	60fb      	str	r3, [r7, #12]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	60fb      	str	r3, [r7, #12]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f7ff fe64 	bl	800a0bc <HAL_UARTEx_RxEventCallback>
 800a3f4:	e002      	b.n	800a3fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f7ff fe4c 	bl	800a094 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	e002      	b.n	800a406 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	e000      	b.n	800a406 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a404:	2302      	movs	r3, #2
  }
}
 800a406:	4618      	mov	r0, r3
 800a408:	3730      	adds	r7, #48	@ 0x30
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
	...

0800a410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a414:	b0c0      	sub	sp, #256	@ 0x100
 800a416:	af00      	add	r7, sp, #0
 800a418:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a41c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a42c:	68d9      	ldr	r1, [r3, #12]
 800a42e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	ea40 0301 	orr.w	r3, r0, r1
 800a438:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a43a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a43e:	689a      	ldr	r2, [r3, #8]
 800a440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	431a      	orrs	r2, r3
 800a448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a44c:	695b      	ldr	r3, [r3, #20]
 800a44e:	431a      	orrs	r2, r3
 800a450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	4313      	orrs	r3, r2
 800a458:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a45c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a468:	f021 010c 	bic.w	r1, r1, #12
 800a46c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a476:	430b      	orrs	r3, r1
 800a478:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a47a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a48a:	6999      	ldr	r1, [r3, #24]
 800a48c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	ea40 0301 	orr.w	r3, r0, r1
 800a496:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	4b8f      	ldr	r3, [pc, #572]	@ (800a6dc <UART_SetConfig+0x2cc>)
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d005      	beq.n	800a4b0 <UART_SetConfig+0xa0>
 800a4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	4b8d      	ldr	r3, [pc, #564]	@ (800a6e0 <UART_SetConfig+0x2d0>)
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d104      	bne.n	800a4ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a4b0:	f7fe f816 	bl	80084e0 <HAL_RCC_GetPCLK2Freq>
 800a4b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a4b8:	e003      	b.n	800a4c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a4ba:	f7fd fffd 	bl	80084b8 <HAL_RCC_GetPCLK1Freq>
 800a4be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4c6:	69db      	ldr	r3, [r3, #28]
 800a4c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4cc:	f040 810c 	bne.w	800a6e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a4d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a4da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a4de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a4e2:	4622      	mov	r2, r4
 800a4e4:	462b      	mov	r3, r5
 800a4e6:	1891      	adds	r1, r2, r2
 800a4e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a4ea:	415b      	adcs	r3, r3
 800a4ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a4ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	eb12 0801 	adds.w	r8, r2, r1
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	eb43 0901 	adc.w	r9, r3, r1
 800a4fe:	f04f 0200 	mov.w	r2, #0
 800a502:	f04f 0300 	mov.w	r3, #0
 800a506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a50a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a50e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a512:	4690      	mov	r8, r2
 800a514:	4699      	mov	r9, r3
 800a516:	4623      	mov	r3, r4
 800a518:	eb18 0303 	adds.w	r3, r8, r3
 800a51c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a520:	462b      	mov	r3, r5
 800a522:	eb49 0303 	adc.w	r3, r9, r3
 800a526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a52a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a536:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a53a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a53e:	460b      	mov	r3, r1
 800a540:	18db      	adds	r3, r3, r3
 800a542:	653b      	str	r3, [r7, #80]	@ 0x50
 800a544:	4613      	mov	r3, r2
 800a546:	eb42 0303 	adc.w	r3, r2, r3
 800a54a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a54c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a550:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a554:	f7f6 fb98 	bl	8000c88 <__aeabi_uldivmod>
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	4b61      	ldr	r3, [pc, #388]	@ (800a6e4 <UART_SetConfig+0x2d4>)
 800a55e:	fba3 2302 	umull	r2, r3, r3, r2
 800a562:	095b      	lsrs	r3, r3, #5
 800a564:	011c      	lsls	r4, r3, #4
 800a566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a56a:	2200      	movs	r2, #0
 800a56c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a570:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a574:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a578:	4642      	mov	r2, r8
 800a57a:	464b      	mov	r3, r9
 800a57c:	1891      	adds	r1, r2, r2
 800a57e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a580:	415b      	adcs	r3, r3
 800a582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a584:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a588:	4641      	mov	r1, r8
 800a58a:	eb12 0a01 	adds.w	sl, r2, r1
 800a58e:	4649      	mov	r1, r9
 800a590:	eb43 0b01 	adc.w	fp, r3, r1
 800a594:	f04f 0200 	mov.w	r2, #0
 800a598:	f04f 0300 	mov.w	r3, #0
 800a59c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a5a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a5a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a5a8:	4692      	mov	sl, r2
 800a5aa:	469b      	mov	fp, r3
 800a5ac:	4643      	mov	r3, r8
 800a5ae:	eb1a 0303 	adds.w	r3, sl, r3
 800a5b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a5b6:	464b      	mov	r3, r9
 800a5b8:	eb4b 0303 	adc.w	r3, fp, r3
 800a5bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a5cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a5d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	18db      	adds	r3, r3, r3
 800a5d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5da:	4613      	mov	r3, r2
 800a5dc:	eb42 0303 	adc.w	r3, r2, r3
 800a5e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a5e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a5ea:	f7f6 fb4d 	bl	8000c88 <__aeabi_uldivmod>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	4611      	mov	r1, r2
 800a5f4:	4b3b      	ldr	r3, [pc, #236]	@ (800a6e4 <UART_SetConfig+0x2d4>)
 800a5f6:	fba3 2301 	umull	r2, r3, r3, r1
 800a5fa:	095b      	lsrs	r3, r3, #5
 800a5fc:	2264      	movs	r2, #100	@ 0x64
 800a5fe:	fb02 f303 	mul.w	r3, r2, r3
 800a602:	1acb      	subs	r3, r1, r3
 800a604:	00db      	lsls	r3, r3, #3
 800a606:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a60a:	4b36      	ldr	r3, [pc, #216]	@ (800a6e4 <UART_SetConfig+0x2d4>)
 800a60c:	fba3 2302 	umull	r2, r3, r3, r2
 800a610:	095b      	lsrs	r3, r3, #5
 800a612:	005b      	lsls	r3, r3, #1
 800a614:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a618:	441c      	add	r4, r3
 800a61a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a61e:	2200      	movs	r2, #0
 800a620:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a624:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a628:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a62c:	4642      	mov	r2, r8
 800a62e:	464b      	mov	r3, r9
 800a630:	1891      	adds	r1, r2, r2
 800a632:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a634:	415b      	adcs	r3, r3
 800a636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a638:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a63c:	4641      	mov	r1, r8
 800a63e:	1851      	adds	r1, r2, r1
 800a640:	6339      	str	r1, [r7, #48]	@ 0x30
 800a642:	4649      	mov	r1, r9
 800a644:	414b      	adcs	r3, r1
 800a646:	637b      	str	r3, [r7, #52]	@ 0x34
 800a648:	f04f 0200 	mov.w	r2, #0
 800a64c:	f04f 0300 	mov.w	r3, #0
 800a650:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a654:	4659      	mov	r1, fp
 800a656:	00cb      	lsls	r3, r1, #3
 800a658:	4651      	mov	r1, sl
 800a65a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a65e:	4651      	mov	r1, sl
 800a660:	00ca      	lsls	r2, r1, #3
 800a662:	4610      	mov	r0, r2
 800a664:	4619      	mov	r1, r3
 800a666:	4603      	mov	r3, r0
 800a668:	4642      	mov	r2, r8
 800a66a:	189b      	adds	r3, r3, r2
 800a66c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a670:	464b      	mov	r3, r9
 800a672:	460a      	mov	r2, r1
 800a674:	eb42 0303 	adc.w	r3, r2, r3
 800a678:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a67c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a688:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a68c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a690:	460b      	mov	r3, r1
 800a692:	18db      	adds	r3, r3, r3
 800a694:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a696:	4613      	mov	r3, r2
 800a698:	eb42 0303 	adc.w	r3, r2, r3
 800a69c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a69e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a6a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a6a6:	f7f6 faef 	bl	8000c88 <__aeabi_uldivmod>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e4 <UART_SetConfig+0x2d4>)
 800a6b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a6b4:	095b      	lsrs	r3, r3, #5
 800a6b6:	2164      	movs	r1, #100	@ 0x64
 800a6b8:	fb01 f303 	mul.w	r3, r1, r3
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	00db      	lsls	r3, r3, #3
 800a6c0:	3332      	adds	r3, #50	@ 0x32
 800a6c2:	4a08      	ldr	r2, [pc, #32]	@ (800a6e4 <UART_SetConfig+0x2d4>)
 800a6c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a6c8:	095b      	lsrs	r3, r3, #5
 800a6ca:	f003 0207 	and.w	r2, r3, #7
 800a6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4422      	add	r2, r4
 800a6d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a6d8:	e106      	b.n	800a8e8 <UART_SetConfig+0x4d8>
 800a6da:	bf00      	nop
 800a6dc:	40011000 	.word	0x40011000
 800a6e0:	40011400 	.word	0x40011400
 800a6e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a6e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a6f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a6f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a6fa:	4642      	mov	r2, r8
 800a6fc:	464b      	mov	r3, r9
 800a6fe:	1891      	adds	r1, r2, r2
 800a700:	6239      	str	r1, [r7, #32]
 800a702:	415b      	adcs	r3, r3
 800a704:	627b      	str	r3, [r7, #36]	@ 0x24
 800a706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a70a:	4641      	mov	r1, r8
 800a70c:	1854      	adds	r4, r2, r1
 800a70e:	4649      	mov	r1, r9
 800a710:	eb43 0501 	adc.w	r5, r3, r1
 800a714:	f04f 0200 	mov.w	r2, #0
 800a718:	f04f 0300 	mov.w	r3, #0
 800a71c:	00eb      	lsls	r3, r5, #3
 800a71e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a722:	00e2      	lsls	r2, r4, #3
 800a724:	4614      	mov	r4, r2
 800a726:	461d      	mov	r5, r3
 800a728:	4643      	mov	r3, r8
 800a72a:	18e3      	adds	r3, r4, r3
 800a72c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a730:	464b      	mov	r3, r9
 800a732:	eb45 0303 	adc.w	r3, r5, r3
 800a736:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a73a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a746:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a74a:	f04f 0200 	mov.w	r2, #0
 800a74e:	f04f 0300 	mov.w	r3, #0
 800a752:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a756:	4629      	mov	r1, r5
 800a758:	008b      	lsls	r3, r1, #2
 800a75a:	4621      	mov	r1, r4
 800a75c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a760:	4621      	mov	r1, r4
 800a762:	008a      	lsls	r2, r1, #2
 800a764:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a768:	f7f6 fa8e 	bl	8000c88 <__aeabi_uldivmod>
 800a76c:	4602      	mov	r2, r0
 800a76e:	460b      	mov	r3, r1
 800a770:	4b60      	ldr	r3, [pc, #384]	@ (800a8f4 <UART_SetConfig+0x4e4>)
 800a772:	fba3 2302 	umull	r2, r3, r3, r2
 800a776:	095b      	lsrs	r3, r3, #5
 800a778:	011c      	lsls	r4, r3, #4
 800a77a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a77e:	2200      	movs	r2, #0
 800a780:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a784:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a788:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a78c:	4642      	mov	r2, r8
 800a78e:	464b      	mov	r3, r9
 800a790:	1891      	adds	r1, r2, r2
 800a792:	61b9      	str	r1, [r7, #24]
 800a794:	415b      	adcs	r3, r3
 800a796:	61fb      	str	r3, [r7, #28]
 800a798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a79c:	4641      	mov	r1, r8
 800a79e:	1851      	adds	r1, r2, r1
 800a7a0:	6139      	str	r1, [r7, #16]
 800a7a2:	4649      	mov	r1, r9
 800a7a4:	414b      	adcs	r3, r1
 800a7a6:	617b      	str	r3, [r7, #20]
 800a7a8:	f04f 0200 	mov.w	r2, #0
 800a7ac:	f04f 0300 	mov.w	r3, #0
 800a7b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a7b4:	4659      	mov	r1, fp
 800a7b6:	00cb      	lsls	r3, r1, #3
 800a7b8:	4651      	mov	r1, sl
 800a7ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7be:	4651      	mov	r1, sl
 800a7c0:	00ca      	lsls	r2, r1, #3
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	4642      	mov	r2, r8
 800a7ca:	189b      	adds	r3, r3, r2
 800a7cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a7d0:	464b      	mov	r3, r9
 800a7d2:	460a      	mov	r2, r1
 800a7d4:	eb42 0303 	adc.w	r3, r2, r3
 800a7d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a7dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a7e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a7e8:	f04f 0200 	mov.w	r2, #0
 800a7ec:	f04f 0300 	mov.w	r3, #0
 800a7f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a7f4:	4649      	mov	r1, r9
 800a7f6:	008b      	lsls	r3, r1, #2
 800a7f8:	4641      	mov	r1, r8
 800a7fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a7fe:	4641      	mov	r1, r8
 800a800:	008a      	lsls	r2, r1, #2
 800a802:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a806:	f7f6 fa3f 	bl	8000c88 <__aeabi_uldivmod>
 800a80a:	4602      	mov	r2, r0
 800a80c:	460b      	mov	r3, r1
 800a80e:	4611      	mov	r1, r2
 800a810:	4b38      	ldr	r3, [pc, #224]	@ (800a8f4 <UART_SetConfig+0x4e4>)
 800a812:	fba3 2301 	umull	r2, r3, r3, r1
 800a816:	095b      	lsrs	r3, r3, #5
 800a818:	2264      	movs	r2, #100	@ 0x64
 800a81a:	fb02 f303 	mul.w	r3, r2, r3
 800a81e:	1acb      	subs	r3, r1, r3
 800a820:	011b      	lsls	r3, r3, #4
 800a822:	3332      	adds	r3, #50	@ 0x32
 800a824:	4a33      	ldr	r2, [pc, #204]	@ (800a8f4 <UART_SetConfig+0x4e4>)
 800a826:	fba2 2303 	umull	r2, r3, r2, r3
 800a82a:	095b      	lsrs	r3, r3, #5
 800a82c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a830:	441c      	add	r4, r3
 800a832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a836:	2200      	movs	r2, #0
 800a838:	673b      	str	r3, [r7, #112]	@ 0x70
 800a83a:	677a      	str	r2, [r7, #116]	@ 0x74
 800a83c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a840:	4642      	mov	r2, r8
 800a842:	464b      	mov	r3, r9
 800a844:	1891      	adds	r1, r2, r2
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	415b      	adcs	r3, r3
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a850:	4641      	mov	r1, r8
 800a852:	1851      	adds	r1, r2, r1
 800a854:	6039      	str	r1, [r7, #0]
 800a856:	4649      	mov	r1, r9
 800a858:	414b      	adcs	r3, r1
 800a85a:	607b      	str	r3, [r7, #4]
 800a85c:	f04f 0200 	mov.w	r2, #0
 800a860:	f04f 0300 	mov.w	r3, #0
 800a864:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a868:	4659      	mov	r1, fp
 800a86a:	00cb      	lsls	r3, r1, #3
 800a86c:	4651      	mov	r1, sl
 800a86e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a872:	4651      	mov	r1, sl
 800a874:	00ca      	lsls	r2, r1, #3
 800a876:	4610      	mov	r0, r2
 800a878:	4619      	mov	r1, r3
 800a87a:	4603      	mov	r3, r0
 800a87c:	4642      	mov	r2, r8
 800a87e:	189b      	adds	r3, r3, r2
 800a880:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a882:	464b      	mov	r3, r9
 800a884:	460a      	mov	r2, r1
 800a886:	eb42 0303 	adc.w	r3, r2, r3
 800a88a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a88c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	663b      	str	r3, [r7, #96]	@ 0x60
 800a896:	667a      	str	r2, [r7, #100]	@ 0x64
 800a898:	f04f 0200 	mov.w	r2, #0
 800a89c:	f04f 0300 	mov.w	r3, #0
 800a8a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a8a4:	4649      	mov	r1, r9
 800a8a6:	008b      	lsls	r3, r1, #2
 800a8a8:	4641      	mov	r1, r8
 800a8aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8ae:	4641      	mov	r1, r8
 800a8b0:	008a      	lsls	r2, r1, #2
 800a8b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a8b6:	f7f6 f9e7 	bl	8000c88 <__aeabi_uldivmod>
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	460b      	mov	r3, r1
 800a8be:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f4 <UART_SetConfig+0x4e4>)
 800a8c0:	fba3 1302 	umull	r1, r3, r3, r2
 800a8c4:	095b      	lsrs	r3, r3, #5
 800a8c6:	2164      	movs	r1, #100	@ 0x64
 800a8c8:	fb01 f303 	mul.w	r3, r1, r3
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	011b      	lsls	r3, r3, #4
 800a8d0:	3332      	adds	r3, #50	@ 0x32
 800a8d2:	4a08      	ldr	r2, [pc, #32]	@ (800a8f4 <UART_SetConfig+0x4e4>)
 800a8d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d8:	095b      	lsrs	r3, r3, #5
 800a8da:	f003 020f 	and.w	r2, r3, #15
 800a8de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4422      	add	r2, r4
 800a8e6:	609a      	str	r2, [r3, #8]
}
 800a8e8:	bf00      	nop
 800a8ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a8f4:	51eb851f 	.word	0x51eb851f

0800a8f8 <__cvt>:
 800a8f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8fc:	ec57 6b10 	vmov	r6, r7, d0
 800a900:	2f00      	cmp	r7, #0
 800a902:	460c      	mov	r4, r1
 800a904:	4619      	mov	r1, r3
 800a906:	463b      	mov	r3, r7
 800a908:	bfbb      	ittet	lt
 800a90a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a90e:	461f      	movlt	r7, r3
 800a910:	2300      	movge	r3, #0
 800a912:	232d      	movlt	r3, #45	@ 0x2d
 800a914:	700b      	strb	r3, [r1, #0]
 800a916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a918:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a91c:	4691      	mov	r9, r2
 800a91e:	f023 0820 	bic.w	r8, r3, #32
 800a922:	bfbc      	itt	lt
 800a924:	4632      	movlt	r2, r6
 800a926:	4616      	movlt	r6, r2
 800a928:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a92c:	d005      	beq.n	800a93a <__cvt+0x42>
 800a92e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a932:	d100      	bne.n	800a936 <__cvt+0x3e>
 800a934:	3401      	adds	r4, #1
 800a936:	2102      	movs	r1, #2
 800a938:	e000      	b.n	800a93c <__cvt+0x44>
 800a93a:	2103      	movs	r1, #3
 800a93c:	ab03      	add	r3, sp, #12
 800a93e:	9301      	str	r3, [sp, #4]
 800a940:	ab02      	add	r3, sp, #8
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	ec47 6b10 	vmov	d0, r6, r7
 800a948:	4653      	mov	r3, sl
 800a94a:	4622      	mov	r2, r4
 800a94c:	f000 fe90 	bl	800b670 <_dtoa_r>
 800a950:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a954:	4605      	mov	r5, r0
 800a956:	d119      	bne.n	800a98c <__cvt+0x94>
 800a958:	f019 0f01 	tst.w	r9, #1
 800a95c:	d00e      	beq.n	800a97c <__cvt+0x84>
 800a95e:	eb00 0904 	add.w	r9, r0, r4
 800a962:	2200      	movs	r2, #0
 800a964:	2300      	movs	r3, #0
 800a966:	4630      	mov	r0, r6
 800a968:	4639      	mov	r1, r7
 800a96a:	f7f6 f8cd 	bl	8000b08 <__aeabi_dcmpeq>
 800a96e:	b108      	cbz	r0, 800a974 <__cvt+0x7c>
 800a970:	f8cd 900c 	str.w	r9, [sp, #12]
 800a974:	2230      	movs	r2, #48	@ 0x30
 800a976:	9b03      	ldr	r3, [sp, #12]
 800a978:	454b      	cmp	r3, r9
 800a97a:	d31e      	bcc.n	800a9ba <__cvt+0xc2>
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a980:	1b5b      	subs	r3, r3, r5
 800a982:	4628      	mov	r0, r5
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	b004      	add	sp, #16
 800a988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a98c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a990:	eb00 0904 	add.w	r9, r0, r4
 800a994:	d1e5      	bne.n	800a962 <__cvt+0x6a>
 800a996:	7803      	ldrb	r3, [r0, #0]
 800a998:	2b30      	cmp	r3, #48	@ 0x30
 800a99a:	d10a      	bne.n	800a9b2 <__cvt+0xba>
 800a99c:	2200      	movs	r2, #0
 800a99e:	2300      	movs	r3, #0
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	4639      	mov	r1, r7
 800a9a4:	f7f6 f8b0 	bl	8000b08 <__aeabi_dcmpeq>
 800a9a8:	b918      	cbnz	r0, 800a9b2 <__cvt+0xba>
 800a9aa:	f1c4 0401 	rsb	r4, r4, #1
 800a9ae:	f8ca 4000 	str.w	r4, [sl]
 800a9b2:	f8da 3000 	ldr.w	r3, [sl]
 800a9b6:	4499      	add	r9, r3
 800a9b8:	e7d3      	b.n	800a962 <__cvt+0x6a>
 800a9ba:	1c59      	adds	r1, r3, #1
 800a9bc:	9103      	str	r1, [sp, #12]
 800a9be:	701a      	strb	r2, [r3, #0]
 800a9c0:	e7d9      	b.n	800a976 <__cvt+0x7e>

0800a9c2 <__exponent>:
 800a9c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9c4:	2900      	cmp	r1, #0
 800a9c6:	bfba      	itte	lt
 800a9c8:	4249      	neglt	r1, r1
 800a9ca:	232d      	movlt	r3, #45	@ 0x2d
 800a9cc:	232b      	movge	r3, #43	@ 0x2b
 800a9ce:	2909      	cmp	r1, #9
 800a9d0:	7002      	strb	r2, [r0, #0]
 800a9d2:	7043      	strb	r3, [r0, #1]
 800a9d4:	dd29      	ble.n	800aa2a <__exponent+0x68>
 800a9d6:	f10d 0307 	add.w	r3, sp, #7
 800a9da:	461d      	mov	r5, r3
 800a9dc:	270a      	movs	r7, #10
 800a9de:	461a      	mov	r2, r3
 800a9e0:	fbb1 f6f7 	udiv	r6, r1, r7
 800a9e4:	fb07 1416 	mls	r4, r7, r6, r1
 800a9e8:	3430      	adds	r4, #48	@ 0x30
 800a9ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	2c63      	cmp	r4, #99	@ 0x63
 800a9f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	dcf1      	bgt.n	800a9de <__exponent+0x1c>
 800a9fa:	3130      	adds	r1, #48	@ 0x30
 800a9fc:	1e94      	subs	r4, r2, #2
 800a9fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aa02:	1c41      	adds	r1, r0, #1
 800aa04:	4623      	mov	r3, r4
 800aa06:	42ab      	cmp	r3, r5
 800aa08:	d30a      	bcc.n	800aa20 <__exponent+0x5e>
 800aa0a:	f10d 0309 	add.w	r3, sp, #9
 800aa0e:	1a9b      	subs	r3, r3, r2
 800aa10:	42ac      	cmp	r4, r5
 800aa12:	bf88      	it	hi
 800aa14:	2300      	movhi	r3, #0
 800aa16:	3302      	adds	r3, #2
 800aa18:	4403      	add	r3, r0
 800aa1a:	1a18      	subs	r0, r3, r0
 800aa1c:	b003      	add	sp, #12
 800aa1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa20:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aa24:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aa28:	e7ed      	b.n	800aa06 <__exponent+0x44>
 800aa2a:	2330      	movs	r3, #48	@ 0x30
 800aa2c:	3130      	adds	r1, #48	@ 0x30
 800aa2e:	7083      	strb	r3, [r0, #2]
 800aa30:	70c1      	strb	r1, [r0, #3]
 800aa32:	1d03      	adds	r3, r0, #4
 800aa34:	e7f1      	b.n	800aa1a <__exponent+0x58>
	...

0800aa38 <_printf_float>:
 800aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	b08d      	sub	sp, #52	@ 0x34
 800aa3e:	460c      	mov	r4, r1
 800aa40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800aa44:	4616      	mov	r6, r2
 800aa46:	461f      	mov	r7, r3
 800aa48:	4605      	mov	r5, r0
 800aa4a:	f000 fd01 	bl	800b450 <_localeconv_r>
 800aa4e:	6803      	ldr	r3, [r0, #0]
 800aa50:	9304      	str	r3, [sp, #16]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7f5 fc2c 	bl	80002b0 <strlen>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa5c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa60:	9005      	str	r0, [sp, #20]
 800aa62:	3307      	adds	r3, #7
 800aa64:	f023 0307 	bic.w	r3, r3, #7
 800aa68:	f103 0208 	add.w	r2, r3, #8
 800aa6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aa70:	f8d4 b000 	ldr.w	fp, [r4]
 800aa74:	f8c8 2000 	str.w	r2, [r8]
 800aa78:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aa80:	9307      	str	r3, [sp, #28]
 800aa82:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aa8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa8e:	4b9c      	ldr	r3, [pc, #624]	@ (800ad00 <_printf_float+0x2c8>)
 800aa90:	f04f 32ff 	mov.w	r2, #4294967295
 800aa94:	f7f6 f86a 	bl	8000b6c <__aeabi_dcmpun>
 800aa98:	bb70      	cbnz	r0, 800aaf8 <_printf_float+0xc0>
 800aa9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa9e:	4b98      	ldr	r3, [pc, #608]	@ (800ad00 <_printf_float+0x2c8>)
 800aaa0:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa4:	f7f6 f844 	bl	8000b30 <__aeabi_dcmple>
 800aaa8:	bb30      	cbnz	r0, 800aaf8 <_printf_float+0xc0>
 800aaaa:	2200      	movs	r2, #0
 800aaac:	2300      	movs	r3, #0
 800aaae:	4640      	mov	r0, r8
 800aab0:	4649      	mov	r1, r9
 800aab2:	f7f6 f833 	bl	8000b1c <__aeabi_dcmplt>
 800aab6:	b110      	cbz	r0, 800aabe <_printf_float+0x86>
 800aab8:	232d      	movs	r3, #45	@ 0x2d
 800aaba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aabe:	4a91      	ldr	r2, [pc, #580]	@ (800ad04 <_printf_float+0x2cc>)
 800aac0:	4b91      	ldr	r3, [pc, #580]	@ (800ad08 <_printf_float+0x2d0>)
 800aac2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aac6:	bf8c      	ite	hi
 800aac8:	4690      	movhi	r8, r2
 800aaca:	4698      	movls	r8, r3
 800aacc:	2303      	movs	r3, #3
 800aace:	6123      	str	r3, [r4, #16]
 800aad0:	f02b 0304 	bic.w	r3, fp, #4
 800aad4:	6023      	str	r3, [r4, #0]
 800aad6:	f04f 0900 	mov.w	r9, #0
 800aada:	9700      	str	r7, [sp, #0]
 800aadc:	4633      	mov	r3, r6
 800aade:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aae0:	4621      	mov	r1, r4
 800aae2:	4628      	mov	r0, r5
 800aae4:	f000 f9d2 	bl	800ae8c <_printf_common>
 800aae8:	3001      	adds	r0, #1
 800aaea:	f040 808d 	bne.w	800ac08 <_printf_float+0x1d0>
 800aaee:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf2:	b00d      	add	sp, #52	@ 0x34
 800aaf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf8:	4642      	mov	r2, r8
 800aafa:	464b      	mov	r3, r9
 800aafc:	4640      	mov	r0, r8
 800aafe:	4649      	mov	r1, r9
 800ab00:	f7f6 f834 	bl	8000b6c <__aeabi_dcmpun>
 800ab04:	b140      	cbz	r0, 800ab18 <_printf_float+0xe0>
 800ab06:	464b      	mov	r3, r9
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	bfbc      	itt	lt
 800ab0c:	232d      	movlt	r3, #45	@ 0x2d
 800ab0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ab12:	4a7e      	ldr	r2, [pc, #504]	@ (800ad0c <_printf_float+0x2d4>)
 800ab14:	4b7e      	ldr	r3, [pc, #504]	@ (800ad10 <_printf_float+0x2d8>)
 800ab16:	e7d4      	b.n	800aac2 <_printf_float+0x8a>
 800ab18:	6863      	ldr	r3, [r4, #4]
 800ab1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ab1e:	9206      	str	r2, [sp, #24]
 800ab20:	1c5a      	adds	r2, r3, #1
 800ab22:	d13b      	bne.n	800ab9c <_printf_float+0x164>
 800ab24:	2306      	movs	r3, #6
 800ab26:	6063      	str	r3, [r4, #4]
 800ab28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	6022      	str	r2, [r4, #0]
 800ab30:	9303      	str	r3, [sp, #12]
 800ab32:	ab0a      	add	r3, sp, #40	@ 0x28
 800ab34:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ab38:	ab09      	add	r3, sp, #36	@ 0x24
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	6861      	ldr	r1, [r4, #4]
 800ab3e:	ec49 8b10 	vmov	d0, r8, r9
 800ab42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ab46:	4628      	mov	r0, r5
 800ab48:	f7ff fed6 	bl	800a8f8 <__cvt>
 800ab4c:	9b06      	ldr	r3, [sp, #24]
 800ab4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ab50:	2b47      	cmp	r3, #71	@ 0x47
 800ab52:	4680      	mov	r8, r0
 800ab54:	d129      	bne.n	800abaa <_printf_float+0x172>
 800ab56:	1cc8      	adds	r0, r1, #3
 800ab58:	db02      	blt.n	800ab60 <_printf_float+0x128>
 800ab5a:	6863      	ldr	r3, [r4, #4]
 800ab5c:	4299      	cmp	r1, r3
 800ab5e:	dd41      	ble.n	800abe4 <_printf_float+0x1ac>
 800ab60:	f1aa 0a02 	sub.w	sl, sl, #2
 800ab64:	fa5f fa8a 	uxtb.w	sl, sl
 800ab68:	3901      	subs	r1, #1
 800ab6a:	4652      	mov	r2, sl
 800ab6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ab70:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab72:	f7ff ff26 	bl	800a9c2 <__exponent>
 800ab76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab78:	1813      	adds	r3, r2, r0
 800ab7a:	2a01      	cmp	r2, #1
 800ab7c:	4681      	mov	r9, r0
 800ab7e:	6123      	str	r3, [r4, #16]
 800ab80:	dc02      	bgt.n	800ab88 <_printf_float+0x150>
 800ab82:	6822      	ldr	r2, [r4, #0]
 800ab84:	07d2      	lsls	r2, r2, #31
 800ab86:	d501      	bpl.n	800ab8c <_printf_float+0x154>
 800ab88:	3301      	adds	r3, #1
 800ab8a:	6123      	str	r3, [r4, #16]
 800ab8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d0a2      	beq.n	800aada <_printf_float+0xa2>
 800ab94:	232d      	movs	r3, #45	@ 0x2d
 800ab96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab9a:	e79e      	b.n	800aada <_printf_float+0xa2>
 800ab9c:	9a06      	ldr	r2, [sp, #24]
 800ab9e:	2a47      	cmp	r2, #71	@ 0x47
 800aba0:	d1c2      	bne.n	800ab28 <_printf_float+0xf0>
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1c0      	bne.n	800ab28 <_printf_float+0xf0>
 800aba6:	2301      	movs	r3, #1
 800aba8:	e7bd      	b.n	800ab26 <_printf_float+0xee>
 800abaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800abae:	d9db      	bls.n	800ab68 <_printf_float+0x130>
 800abb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800abb4:	d118      	bne.n	800abe8 <_printf_float+0x1b0>
 800abb6:	2900      	cmp	r1, #0
 800abb8:	6863      	ldr	r3, [r4, #4]
 800abba:	dd0b      	ble.n	800abd4 <_printf_float+0x19c>
 800abbc:	6121      	str	r1, [r4, #16]
 800abbe:	b913      	cbnz	r3, 800abc6 <_printf_float+0x18e>
 800abc0:	6822      	ldr	r2, [r4, #0]
 800abc2:	07d0      	lsls	r0, r2, #31
 800abc4:	d502      	bpl.n	800abcc <_printf_float+0x194>
 800abc6:	3301      	adds	r3, #1
 800abc8:	440b      	add	r3, r1
 800abca:	6123      	str	r3, [r4, #16]
 800abcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800abce:	f04f 0900 	mov.w	r9, #0
 800abd2:	e7db      	b.n	800ab8c <_printf_float+0x154>
 800abd4:	b913      	cbnz	r3, 800abdc <_printf_float+0x1a4>
 800abd6:	6822      	ldr	r2, [r4, #0]
 800abd8:	07d2      	lsls	r2, r2, #31
 800abda:	d501      	bpl.n	800abe0 <_printf_float+0x1a8>
 800abdc:	3302      	adds	r3, #2
 800abde:	e7f4      	b.n	800abca <_printf_float+0x192>
 800abe0:	2301      	movs	r3, #1
 800abe2:	e7f2      	b.n	800abca <_printf_float+0x192>
 800abe4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800abe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abea:	4299      	cmp	r1, r3
 800abec:	db05      	blt.n	800abfa <_printf_float+0x1c2>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	6121      	str	r1, [r4, #16]
 800abf2:	07d8      	lsls	r0, r3, #31
 800abf4:	d5ea      	bpl.n	800abcc <_printf_float+0x194>
 800abf6:	1c4b      	adds	r3, r1, #1
 800abf8:	e7e7      	b.n	800abca <_printf_float+0x192>
 800abfa:	2900      	cmp	r1, #0
 800abfc:	bfd4      	ite	le
 800abfe:	f1c1 0202 	rsble	r2, r1, #2
 800ac02:	2201      	movgt	r2, #1
 800ac04:	4413      	add	r3, r2
 800ac06:	e7e0      	b.n	800abca <_printf_float+0x192>
 800ac08:	6823      	ldr	r3, [r4, #0]
 800ac0a:	055a      	lsls	r2, r3, #21
 800ac0c:	d407      	bmi.n	800ac1e <_printf_float+0x1e6>
 800ac0e:	6923      	ldr	r3, [r4, #16]
 800ac10:	4642      	mov	r2, r8
 800ac12:	4631      	mov	r1, r6
 800ac14:	4628      	mov	r0, r5
 800ac16:	47b8      	blx	r7
 800ac18:	3001      	adds	r0, #1
 800ac1a:	d12b      	bne.n	800ac74 <_printf_float+0x23c>
 800ac1c:	e767      	b.n	800aaee <_printf_float+0xb6>
 800ac1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac22:	f240 80dd 	bls.w	800ade0 <_printf_float+0x3a8>
 800ac26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	f7f5 ff6b 	bl	8000b08 <__aeabi_dcmpeq>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	d033      	beq.n	800ac9e <_printf_float+0x266>
 800ac36:	4a37      	ldr	r2, [pc, #220]	@ (800ad14 <_printf_float+0x2dc>)
 800ac38:	2301      	movs	r3, #1
 800ac3a:	4631      	mov	r1, r6
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	47b8      	blx	r7
 800ac40:	3001      	adds	r0, #1
 800ac42:	f43f af54 	beq.w	800aaee <_printf_float+0xb6>
 800ac46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ac4a:	4543      	cmp	r3, r8
 800ac4c:	db02      	blt.n	800ac54 <_printf_float+0x21c>
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	07d8      	lsls	r0, r3, #31
 800ac52:	d50f      	bpl.n	800ac74 <_printf_float+0x23c>
 800ac54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac58:	4631      	mov	r1, r6
 800ac5a:	4628      	mov	r0, r5
 800ac5c:	47b8      	blx	r7
 800ac5e:	3001      	adds	r0, #1
 800ac60:	f43f af45 	beq.w	800aaee <_printf_float+0xb6>
 800ac64:	f04f 0900 	mov.w	r9, #0
 800ac68:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac6c:	f104 0a1a 	add.w	sl, r4, #26
 800ac70:	45c8      	cmp	r8, r9
 800ac72:	dc09      	bgt.n	800ac88 <_printf_float+0x250>
 800ac74:	6823      	ldr	r3, [r4, #0]
 800ac76:	079b      	lsls	r3, r3, #30
 800ac78:	f100 8103 	bmi.w	800ae82 <_printf_float+0x44a>
 800ac7c:	68e0      	ldr	r0, [r4, #12]
 800ac7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac80:	4298      	cmp	r0, r3
 800ac82:	bfb8      	it	lt
 800ac84:	4618      	movlt	r0, r3
 800ac86:	e734      	b.n	800aaf2 <_printf_float+0xba>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	4652      	mov	r2, sl
 800ac8c:	4631      	mov	r1, r6
 800ac8e:	4628      	mov	r0, r5
 800ac90:	47b8      	blx	r7
 800ac92:	3001      	adds	r0, #1
 800ac94:	f43f af2b 	beq.w	800aaee <_printf_float+0xb6>
 800ac98:	f109 0901 	add.w	r9, r9, #1
 800ac9c:	e7e8      	b.n	800ac70 <_printf_float+0x238>
 800ac9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	dc39      	bgt.n	800ad18 <_printf_float+0x2e0>
 800aca4:	4a1b      	ldr	r2, [pc, #108]	@ (800ad14 <_printf_float+0x2dc>)
 800aca6:	2301      	movs	r3, #1
 800aca8:	4631      	mov	r1, r6
 800acaa:	4628      	mov	r0, r5
 800acac:	47b8      	blx	r7
 800acae:	3001      	adds	r0, #1
 800acb0:	f43f af1d 	beq.w	800aaee <_printf_float+0xb6>
 800acb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800acb8:	ea59 0303 	orrs.w	r3, r9, r3
 800acbc:	d102      	bne.n	800acc4 <_printf_float+0x28c>
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	07d9      	lsls	r1, r3, #31
 800acc2:	d5d7      	bpl.n	800ac74 <_printf_float+0x23c>
 800acc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acc8:	4631      	mov	r1, r6
 800acca:	4628      	mov	r0, r5
 800accc:	47b8      	blx	r7
 800acce:	3001      	adds	r0, #1
 800acd0:	f43f af0d 	beq.w	800aaee <_printf_float+0xb6>
 800acd4:	f04f 0a00 	mov.w	sl, #0
 800acd8:	f104 0b1a 	add.w	fp, r4, #26
 800acdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acde:	425b      	negs	r3, r3
 800ace0:	4553      	cmp	r3, sl
 800ace2:	dc01      	bgt.n	800ace8 <_printf_float+0x2b0>
 800ace4:	464b      	mov	r3, r9
 800ace6:	e793      	b.n	800ac10 <_printf_float+0x1d8>
 800ace8:	2301      	movs	r3, #1
 800acea:	465a      	mov	r2, fp
 800acec:	4631      	mov	r1, r6
 800acee:	4628      	mov	r0, r5
 800acf0:	47b8      	blx	r7
 800acf2:	3001      	adds	r0, #1
 800acf4:	f43f aefb 	beq.w	800aaee <_printf_float+0xb6>
 800acf8:	f10a 0a01 	add.w	sl, sl, #1
 800acfc:	e7ee      	b.n	800acdc <_printf_float+0x2a4>
 800acfe:	bf00      	nop
 800ad00:	7fefffff 	.word	0x7fefffff
 800ad04:	0800dc10 	.word	0x0800dc10
 800ad08:	0800dc0c 	.word	0x0800dc0c
 800ad0c:	0800dc18 	.word	0x0800dc18
 800ad10:	0800dc14 	.word	0x0800dc14
 800ad14:	0800dc1c 	.word	0x0800dc1c
 800ad18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ad1e:	4553      	cmp	r3, sl
 800ad20:	bfa8      	it	ge
 800ad22:	4653      	movge	r3, sl
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	4699      	mov	r9, r3
 800ad28:	dc36      	bgt.n	800ad98 <_printf_float+0x360>
 800ad2a:	f04f 0b00 	mov.w	fp, #0
 800ad2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad32:	f104 021a 	add.w	r2, r4, #26
 800ad36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad38:	9306      	str	r3, [sp, #24]
 800ad3a:	eba3 0309 	sub.w	r3, r3, r9
 800ad3e:	455b      	cmp	r3, fp
 800ad40:	dc31      	bgt.n	800ada6 <_printf_float+0x36e>
 800ad42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad44:	459a      	cmp	sl, r3
 800ad46:	dc3a      	bgt.n	800adbe <_printf_float+0x386>
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	07da      	lsls	r2, r3, #31
 800ad4c:	d437      	bmi.n	800adbe <_printf_float+0x386>
 800ad4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad50:	ebaa 0903 	sub.w	r9, sl, r3
 800ad54:	9b06      	ldr	r3, [sp, #24]
 800ad56:	ebaa 0303 	sub.w	r3, sl, r3
 800ad5a:	4599      	cmp	r9, r3
 800ad5c:	bfa8      	it	ge
 800ad5e:	4699      	movge	r9, r3
 800ad60:	f1b9 0f00 	cmp.w	r9, #0
 800ad64:	dc33      	bgt.n	800adce <_printf_float+0x396>
 800ad66:	f04f 0800 	mov.w	r8, #0
 800ad6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad6e:	f104 0b1a 	add.w	fp, r4, #26
 800ad72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad74:	ebaa 0303 	sub.w	r3, sl, r3
 800ad78:	eba3 0309 	sub.w	r3, r3, r9
 800ad7c:	4543      	cmp	r3, r8
 800ad7e:	f77f af79 	ble.w	800ac74 <_printf_float+0x23c>
 800ad82:	2301      	movs	r3, #1
 800ad84:	465a      	mov	r2, fp
 800ad86:	4631      	mov	r1, r6
 800ad88:	4628      	mov	r0, r5
 800ad8a:	47b8      	blx	r7
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	f43f aeae 	beq.w	800aaee <_printf_float+0xb6>
 800ad92:	f108 0801 	add.w	r8, r8, #1
 800ad96:	e7ec      	b.n	800ad72 <_printf_float+0x33a>
 800ad98:	4642      	mov	r2, r8
 800ad9a:	4631      	mov	r1, r6
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	47b8      	blx	r7
 800ada0:	3001      	adds	r0, #1
 800ada2:	d1c2      	bne.n	800ad2a <_printf_float+0x2f2>
 800ada4:	e6a3      	b.n	800aaee <_printf_float+0xb6>
 800ada6:	2301      	movs	r3, #1
 800ada8:	4631      	mov	r1, r6
 800adaa:	4628      	mov	r0, r5
 800adac:	9206      	str	r2, [sp, #24]
 800adae:	47b8      	blx	r7
 800adb0:	3001      	adds	r0, #1
 800adb2:	f43f ae9c 	beq.w	800aaee <_printf_float+0xb6>
 800adb6:	9a06      	ldr	r2, [sp, #24]
 800adb8:	f10b 0b01 	add.w	fp, fp, #1
 800adbc:	e7bb      	b.n	800ad36 <_printf_float+0x2fe>
 800adbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adc2:	4631      	mov	r1, r6
 800adc4:	4628      	mov	r0, r5
 800adc6:	47b8      	blx	r7
 800adc8:	3001      	adds	r0, #1
 800adca:	d1c0      	bne.n	800ad4e <_printf_float+0x316>
 800adcc:	e68f      	b.n	800aaee <_printf_float+0xb6>
 800adce:	9a06      	ldr	r2, [sp, #24]
 800add0:	464b      	mov	r3, r9
 800add2:	4442      	add	r2, r8
 800add4:	4631      	mov	r1, r6
 800add6:	4628      	mov	r0, r5
 800add8:	47b8      	blx	r7
 800adda:	3001      	adds	r0, #1
 800addc:	d1c3      	bne.n	800ad66 <_printf_float+0x32e>
 800adde:	e686      	b.n	800aaee <_printf_float+0xb6>
 800ade0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ade4:	f1ba 0f01 	cmp.w	sl, #1
 800ade8:	dc01      	bgt.n	800adee <_printf_float+0x3b6>
 800adea:	07db      	lsls	r3, r3, #31
 800adec:	d536      	bpl.n	800ae5c <_printf_float+0x424>
 800adee:	2301      	movs	r3, #1
 800adf0:	4642      	mov	r2, r8
 800adf2:	4631      	mov	r1, r6
 800adf4:	4628      	mov	r0, r5
 800adf6:	47b8      	blx	r7
 800adf8:	3001      	adds	r0, #1
 800adfa:	f43f ae78 	beq.w	800aaee <_printf_float+0xb6>
 800adfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae02:	4631      	mov	r1, r6
 800ae04:	4628      	mov	r0, r5
 800ae06:	47b8      	blx	r7
 800ae08:	3001      	adds	r0, #1
 800ae0a:	f43f ae70 	beq.w	800aaee <_printf_float+0xb6>
 800ae0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae12:	2200      	movs	r2, #0
 800ae14:	2300      	movs	r3, #0
 800ae16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae1a:	f7f5 fe75 	bl	8000b08 <__aeabi_dcmpeq>
 800ae1e:	b9c0      	cbnz	r0, 800ae52 <_printf_float+0x41a>
 800ae20:	4653      	mov	r3, sl
 800ae22:	f108 0201 	add.w	r2, r8, #1
 800ae26:	4631      	mov	r1, r6
 800ae28:	4628      	mov	r0, r5
 800ae2a:	47b8      	blx	r7
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	d10c      	bne.n	800ae4a <_printf_float+0x412>
 800ae30:	e65d      	b.n	800aaee <_printf_float+0xb6>
 800ae32:	2301      	movs	r3, #1
 800ae34:	465a      	mov	r2, fp
 800ae36:	4631      	mov	r1, r6
 800ae38:	4628      	mov	r0, r5
 800ae3a:	47b8      	blx	r7
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	f43f ae56 	beq.w	800aaee <_printf_float+0xb6>
 800ae42:	f108 0801 	add.w	r8, r8, #1
 800ae46:	45d0      	cmp	r8, sl
 800ae48:	dbf3      	blt.n	800ae32 <_printf_float+0x3fa>
 800ae4a:	464b      	mov	r3, r9
 800ae4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ae50:	e6df      	b.n	800ac12 <_printf_float+0x1da>
 800ae52:	f04f 0800 	mov.w	r8, #0
 800ae56:	f104 0b1a 	add.w	fp, r4, #26
 800ae5a:	e7f4      	b.n	800ae46 <_printf_float+0x40e>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	4642      	mov	r2, r8
 800ae60:	e7e1      	b.n	800ae26 <_printf_float+0x3ee>
 800ae62:	2301      	movs	r3, #1
 800ae64:	464a      	mov	r2, r9
 800ae66:	4631      	mov	r1, r6
 800ae68:	4628      	mov	r0, r5
 800ae6a:	47b8      	blx	r7
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	f43f ae3e 	beq.w	800aaee <_printf_float+0xb6>
 800ae72:	f108 0801 	add.w	r8, r8, #1
 800ae76:	68e3      	ldr	r3, [r4, #12]
 800ae78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae7a:	1a5b      	subs	r3, r3, r1
 800ae7c:	4543      	cmp	r3, r8
 800ae7e:	dcf0      	bgt.n	800ae62 <_printf_float+0x42a>
 800ae80:	e6fc      	b.n	800ac7c <_printf_float+0x244>
 800ae82:	f04f 0800 	mov.w	r8, #0
 800ae86:	f104 0919 	add.w	r9, r4, #25
 800ae8a:	e7f4      	b.n	800ae76 <_printf_float+0x43e>

0800ae8c <_printf_common>:
 800ae8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae90:	4616      	mov	r6, r2
 800ae92:	4698      	mov	r8, r3
 800ae94:	688a      	ldr	r2, [r1, #8]
 800ae96:	690b      	ldr	r3, [r1, #16]
 800ae98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	bfb8      	it	lt
 800aea0:	4613      	movlt	r3, r2
 800aea2:	6033      	str	r3, [r6, #0]
 800aea4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aea8:	4607      	mov	r7, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	b10a      	cbz	r2, 800aeb2 <_printf_common+0x26>
 800aeae:	3301      	adds	r3, #1
 800aeb0:	6033      	str	r3, [r6, #0]
 800aeb2:	6823      	ldr	r3, [r4, #0]
 800aeb4:	0699      	lsls	r1, r3, #26
 800aeb6:	bf42      	ittt	mi
 800aeb8:	6833      	ldrmi	r3, [r6, #0]
 800aeba:	3302      	addmi	r3, #2
 800aebc:	6033      	strmi	r3, [r6, #0]
 800aebe:	6825      	ldr	r5, [r4, #0]
 800aec0:	f015 0506 	ands.w	r5, r5, #6
 800aec4:	d106      	bne.n	800aed4 <_printf_common+0x48>
 800aec6:	f104 0a19 	add.w	sl, r4, #25
 800aeca:	68e3      	ldr	r3, [r4, #12]
 800aecc:	6832      	ldr	r2, [r6, #0]
 800aece:	1a9b      	subs	r3, r3, r2
 800aed0:	42ab      	cmp	r3, r5
 800aed2:	dc26      	bgt.n	800af22 <_printf_common+0x96>
 800aed4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aed8:	6822      	ldr	r2, [r4, #0]
 800aeda:	3b00      	subs	r3, #0
 800aedc:	bf18      	it	ne
 800aede:	2301      	movne	r3, #1
 800aee0:	0692      	lsls	r2, r2, #26
 800aee2:	d42b      	bmi.n	800af3c <_printf_common+0xb0>
 800aee4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aee8:	4641      	mov	r1, r8
 800aeea:	4638      	mov	r0, r7
 800aeec:	47c8      	blx	r9
 800aeee:	3001      	adds	r0, #1
 800aef0:	d01e      	beq.n	800af30 <_printf_common+0xa4>
 800aef2:	6823      	ldr	r3, [r4, #0]
 800aef4:	6922      	ldr	r2, [r4, #16]
 800aef6:	f003 0306 	and.w	r3, r3, #6
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	bf02      	ittt	eq
 800aefe:	68e5      	ldreq	r5, [r4, #12]
 800af00:	6833      	ldreq	r3, [r6, #0]
 800af02:	1aed      	subeq	r5, r5, r3
 800af04:	68a3      	ldr	r3, [r4, #8]
 800af06:	bf0c      	ite	eq
 800af08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af0c:	2500      	movne	r5, #0
 800af0e:	4293      	cmp	r3, r2
 800af10:	bfc4      	itt	gt
 800af12:	1a9b      	subgt	r3, r3, r2
 800af14:	18ed      	addgt	r5, r5, r3
 800af16:	2600      	movs	r6, #0
 800af18:	341a      	adds	r4, #26
 800af1a:	42b5      	cmp	r5, r6
 800af1c:	d11a      	bne.n	800af54 <_printf_common+0xc8>
 800af1e:	2000      	movs	r0, #0
 800af20:	e008      	b.n	800af34 <_printf_common+0xa8>
 800af22:	2301      	movs	r3, #1
 800af24:	4652      	mov	r2, sl
 800af26:	4641      	mov	r1, r8
 800af28:	4638      	mov	r0, r7
 800af2a:	47c8      	blx	r9
 800af2c:	3001      	adds	r0, #1
 800af2e:	d103      	bne.n	800af38 <_printf_common+0xac>
 800af30:	f04f 30ff 	mov.w	r0, #4294967295
 800af34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af38:	3501      	adds	r5, #1
 800af3a:	e7c6      	b.n	800aeca <_printf_common+0x3e>
 800af3c:	18e1      	adds	r1, r4, r3
 800af3e:	1c5a      	adds	r2, r3, #1
 800af40:	2030      	movs	r0, #48	@ 0x30
 800af42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800af46:	4422      	add	r2, r4
 800af48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800af4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800af50:	3302      	adds	r3, #2
 800af52:	e7c7      	b.n	800aee4 <_printf_common+0x58>
 800af54:	2301      	movs	r3, #1
 800af56:	4622      	mov	r2, r4
 800af58:	4641      	mov	r1, r8
 800af5a:	4638      	mov	r0, r7
 800af5c:	47c8      	blx	r9
 800af5e:	3001      	adds	r0, #1
 800af60:	d0e6      	beq.n	800af30 <_printf_common+0xa4>
 800af62:	3601      	adds	r6, #1
 800af64:	e7d9      	b.n	800af1a <_printf_common+0x8e>
	...

0800af68 <_printf_i>:
 800af68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af6c:	7e0f      	ldrb	r7, [r1, #24]
 800af6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800af70:	2f78      	cmp	r7, #120	@ 0x78
 800af72:	4691      	mov	r9, r2
 800af74:	4680      	mov	r8, r0
 800af76:	460c      	mov	r4, r1
 800af78:	469a      	mov	sl, r3
 800af7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800af7e:	d807      	bhi.n	800af90 <_printf_i+0x28>
 800af80:	2f62      	cmp	r7, #98	@ 0x62
 800af82:	d80a      	bhi.n	800af9a <_printf_i+0x32>
 800af84:	2f00      	cmp	r7, #0
 800af86:	f000 80d1 	beq.w	800b12c <_printf_i+0x1c4>
 800af8a:	2f58      	cmp	r7, #88	@ 0x58
 800af8c:	f000 80b8 	beq.w	800b100 <_printf_i+0x198>
 800af90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af98:	e03a      	b.n	800b010 <_printf_i+0xa8>
 800af9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af9e:	2b15      	cmp	r3, #21
 800afa0:	d8f6      	bhi.n	800af90 <_printf_i+0x28>
 800afa2:	a101      	add	r1, pc, #4	@ (adr r1, 800afa8 <_printf_i+0x40>)
 800afa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afa8:	0800b001 	.word	0x0800b001
 800afac:	0800b015 	.word	0x0800b015
 800afb0:	0800af91 	.word	0x0800af91
 800afb4:	0800af91 	.word	0x0800af91
 800afb8:	0800af91 	.word	0x0800af91
 800afbc:	0800af91 	.word	0x0800af91
 800afc0:	0800b015 	.word	0x0800b015
 800afc4:	0800af91 	.word	0x0800af91
 800afc8:	0800af91 	.word	0x0800af91
 800afcc:	0800af91 	.word	0x0800af91
 800afd0:	0800af91 	.word	0x0800af91
 800afd4:	0800b113 	.word	0x0800b113
 800afd8:	0800b03f 	.word	0x0800b03f
 800afdc:	0800b0cd 	.word	0x0800b0cd
 800afe0:	0800af91 	.word	0x0800af91
 800afe4:	0800af91 	.word	0x0800af91
 800afe8:	0800b135 	.word	0x0800b135
 800afec:	0800af91 	.word	0x0800af91
 800aff0:	0800b03f 	.word	0x0800b03f
 800aff4:	0800af91 	.word	0x0800af91
 800aff8:	0800af91 	.word	0x0800af91
 800affc:	0800b0d5 	.word	0x0800b0d5
 800b000:	6833      	ldr	r3, [r6, #0]
 800b002:	1d1a      	adds	r2, r3, #4
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6032      	str	r2, [r6, #0]
 800b008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b00c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b010:	2301      	movs	r3, #1
 800b012:	e09c      	b.n	800b14e <_printf_i+0x1e6>
 800b014:	6833      	ldr	r3, [r6, #0]
 800b016:	6820      	ldr	r0, [r4, #0]
 800b018:	1d19      	adds	r1, r3, #4
 800b01a:	6031      	str	r1, [r6, #0]
 800b01c:	0606      	lsls	r6, r0, #24
 800b01e:	d501      	bpl.n	800b024 <_printf_i+0xbc>
 800b020:	681d      	ldr	r5, [r3, #0]
 800b022:	e003      	b.n	800b02c <_printf_i+0xc4>
 800b024:	0645      	lsls	r5, r0, #25
 800b026:	d5fb      	bpl.n	800b020 <_printf_i+0xb8>
 800b028:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b02c:	2d00      	cmp	r5, #0
 800b02e:	da03      	bge.n	800b038 <_printf_i+0xd0>
 800b030:	232d      	movs	r3, #45	@ 0x2d
 800b032:	426d      	negs	r5, r5
 800b034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b038:	4858      	ldr	r0, [pc, #352]	@ (800b19c <_printf_i+0x234>)
 800b03a:	230a      	movs	r3, #10
 800b03c:	e011      	b.n	800b062 <_printf_i+0xfa>
 800b03e:	6821      	ldr	r1, [r4, #0]
 800b040:	6833      	ldr	r3, [r6, #0]
 800b042:	0608      	lsls	r0, r1, #24
 800b044:	f853 5b04 	ldr.w	r5, [r3], #4
 800b048:	d402      	bmi.n	800b050 <_printf_i+0xe8>
 800b04a:	0649      	lsls	r1, r1, #25
 800b04c:	bf48      	it	mi
 800b04e:	b2ad      	uxthmi	r5, r5
 800b050:	2f6f      	cmp	r7, #111	@ 0x6f
 800b052:	4852      	ldr	r0, [pc, #328]	@ (800b19c <_printf_i+0x234>)
 800b054:	6033      	str	r3, [r6, #0]
 800b056:	bf14      	ite	ne
 800b058:	230a      	movne	r3, #10
 800b05a:	2308      	moveq	r3, #8
 800b05c:	2100      	movs	r1, #0
 800b05e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b062:	6866      	ldr	r6, [r4, #4]
 800b064:	60a6      	str	r6, [r4, #8]
 800b066:	2e00      	cmp	r6, #0
 800b068:	db05      	blt.n	800b076 <_printf_i+0x10e>
 800b06a:	6821      	ldr	r1, [r4, #0]
 800b06c:	432e      	orrs	r6, r5
 800b06e:	f021 0104 	bic.w	r1, r1, #4
 800b072:	6021      	str	r1, [r4, #0]
 800b074:	d04b      	beq.n	800b10e <_printf_i+0x1a6>
 800b076:	4616      	mov	r6, r2
 800b078:	fbb5 f1f3 	udiv	r1, r5, r3
 800b07c:	fb03 5711 	mls	r7, r3, r1, r5
 800b080:	5dc7      	ldrb	r7, [r0, r7]
 800b082:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b086:	462f      	mov	r7, r5
 800b088:	42bb      	cmp	r3, r7
 800b08a:	460d      	mov	r5, r1
 800b08c:	d9f4      	bls.n	800b078 <_printf_i+0x110>
 800b08e:	2b08      	cmp	r3, #8
 800b090:	d10b      	bne.n	800b0aa <_printf_i+0x142>
 800b092:	6823      	ldr	r3, [r4, #0]
 800b094:	07df      	lsls	r7, r3, #31
 800b096:	d508      	bpl.n	800b0aa <_printf_i+0x142>
 800b098:	6923      	ldr	r3, [r4, #16]
 800b09a:	6861      	ldr	r1, [r4, #4]
 800b09c:	4299      	cmp	r1, r3
 800b09e:	bfde      	ittt	le
 800b0a0:	2330      	movle	r3, #48	@ 0x30
 800b0a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b0a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b0aa:	1b92      	subs	r2, r2, r6
 800b0ac:	6122      	str	r2, [r4, #16]
 800b0ae:	f8cd a000 	str.w	sl, [sp]
 800b0b2:	464b      	mov	r3, r9
 800b0b4:	aa03      	add	r2, sp, #12
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	4640      	mov	r0, r8
 800b0ba:	f7ff fee7 	bl	800ae8c <_printf_common>
 800b0be:	3001      	adds	r0, #1
 800b0c0:	d14a      	bne.n	800b158 <_printf_i+0x1f0>
 800b0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c6:	b004      	add	sp, #16
 800b0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0cc:	6823      	ldr	r3, [r4, #0]
 800b0ce:	f043 0320 	orr.w	r3, r3, #32
 800b0d2:	6023      	str	r3, [r4, #0]
 800b0d4:	4832      	ldr	r0, [pc, #200]	@ (800b1a0 <_printf_i+0x238>)
 800b0d6:	2778      	movs	r7, #120	@ 0x78
 800b0d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b0dc:	6823      	ldr	r3, [r4, #0]
 800b0de:	6831      	ldr	r1, [r6, #0]
 800b0e0:	061f      	lsls	r7, r3, #24
 800b0e2:	f851 5b04 	ldr.w	r5, [r1], #4
 800b0e6:	d402      	bmi.n	800b0ee <_printf_i+0x186>
 800b0e8:	065f      	lsls	r7, r3, #25
 800b0ea:	bf48      	it	mi
 800b0ec:	b2ad      	uxthmi	r5, r5
 800b0ee:	6031      	str	r1, [r6, #0]
 800b0f0:	07d9      	lsls	r1, r3, #31
 800b0f2:	bf44      	itt	mi
 800b0f4:	f043 0320 	orrmi.w	r3, r3, #32
 800b0f8:	6023      	strmi	r3, [r4, #0]
 800b0fa:	b11d      	cbz	r5, 800b104 <_printf_i+0x19c>
 800b0fc:	2310      	movs	r3, #16
 800b0fe:	e7ad      	b.n	800b05c <_printf_i+0xf4>
 800b100:	4826      	ldr	r0, [pc, #152]	@ (800b19c <_printf_i+0x234>)
 800b102:	e7e9      	b.n	800b0d8 <_printf_i+0x170>
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	f023 0320 	bic.w	r3, r3, #32
 800b10a:	6023      	str	r3, [r4, #0]
 800b10c:	e7f6      	b.n	800b0fc <_printf_i+0x194>
 800b10e:	4616      	mov	r6, r2
 800b110:	e7bd      	b.n	800b08e <_printf_i+0x126>
 800b112:	6833      	ldr	r3, [r6, #0]
 800b114:	6825      	ldr	r5, [r4, #0]
 800b116:	6961      	ldr	r1, [r4, #20]
 800b118:	1d18      	adds	r0, r3, #4
 800b11a:	6030      	str	r0, [r6, #0]
 800b11c:	062e      	lsls	r6, r5, #24
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	d501      	bpl.n	800b126 <_printf_i+0x1be>
 800b122:	6019      	str	r1, [r3, #0]
 800b124:	e002      	b.n	800b12c <_printf_i+0x1c4>
 800b126:	0668      	lsls	r0, r5, #25
 800b128:	d5fb      	bpl.n	800b122 <_printf_i+0x1ba>
 800b12a:	8019      	strh	r1, [r3, #0]
 800b12c:	2300      	movs	r3, #0
 800b12e:	6123      	str	r3, [r4, #16]
 800b130:	4616      	mov	r6, r2
 800b132:	e7bc      	b.n	800b0ae <_printf_i+0x146>
 800b134:	6833      	ldr	r3, [r6, #0]
 800b136:	1d1a      	adds	r2, r3, #4
 800b138:	6032      	str	r2, [r6, #0]
 800b13a:	681e      	ldr	r6, [r3, #0]
 800b13c:	6862      	ldr	r2, [r4, #4]
 800b13e:	2100      	movs	r1, #0
 800b140:	4630      	mov	r0, r6
 800b142:	f7f5 f865 	bl	8000210 <memchr>
 800b146:	b108      	cbz	r0, 800b14c <_printf_i+0x1e4>
 800b148:	1b80      	subs	r0, r0, r6
 800b14a:	6060      	str	r0, [r4, #4]
 800b14c:	6863      	ldr	r3, [r4, #4]
 800b14e:	6123      	str	r3, [r4, #16]
 800b150:	2300      	movs	r3, #0
 800b152:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b156:	e7aa      	b.n	800b0ae <_printf_i+0x146>
 800b158:	6923      	ldr	r3, [r4, #16]
 800b15a:	4632      	mov	r2, r6
 800b15c:	4649      	mov	r1, r9
 800b15e:	4640      	mov	r0, r8
 800b160:	47d0      	blx	sl
 800b162:	3001      	adds	r0, #1
 800b164:	d0ad      	beq.n	800b0c2 <_printf_i+0x15a>
 800b166:	6823      	ldr	r3, [r4, #0]
 800b168:	079b      	lsls	r3, r3, #30
 800b16a:	d413      	bmi.n	800b194 <_printf_i+0x22c>
 800b16c:	68e0      	ldr	r0, [r4, #12]
 800b16e:	9b03      	ldr	r3, [sp, #12]
 800b170:	4298      	cmp	r0, r3
 800b172:	bfb8      	it	lt
 800b174:	4618      	movlt	r0, r3
 800b176:	e7a6      	b.n	800b0c6 <_printf_i+0x15e>
 800b178:	2301      	movs	r3, #1
 800b17a:	4632      	mov	r2, r6
 800b17c:	4649      	mov	r1, r9
 800b17e:	4640      	mov	r0, r8
 800b180:	47d0      	blx	sl
 800b182:	3001      	adds	r0, #1
 800b184:	d09d      	beq.n	800b0c2 <_printf_i+0x15a>
 800b186:	3501      	adds	r5, #1
 800b188:	68e3      	ldr	r3, [r4, #12]
 800b18a:	9903      	ldr	r1, [sp, #12]
 800b18c:	1a5b      	subs	r3, r3, r1
 800b18e:	42ab      	cmp	r3, r5
 800b190:	dcf2      	bgt.n	800b178 <_printf_i+0x210>
 800b192:	e7eb      	b.n	800b16c <_printf_i+0x204>
 800b194:	2500      	movs	r5, #0
 800b196:	f104 0619 	add.w	r6, r4, #25
 800b19a:	e7f5      	b.n	800b188 <_printf_i+0x220>
 800b19c:	0800dc1e 	.word	0x0800dc1e
 800b1a0:	0800dc2f 	.word	0x0800dc2f

0800b1a4 <std>:
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	b510      	push	{r4, lr}
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	e9c0 3300 	strd	r3, r3, [r0]
 800b1ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1b2:	6083      	str	r3, [r0, #8]
 800b1b4:	8181      	strh	r1, [r0, #12]
 800b1b6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b1b8:	81c2      	strh	r2, [r0, #14]
 800b1ba:	6183      	str	r3, [r0, #24]
 800b1bc:	4619      	mov	r1, r3
 800b1be:	2208      	movs	r2, #8
 800b1c0:	305c      	adds	r0, #92	@ 0x5c
 800b1c2:	f000 f92a 	bl	800b41a <memset>
 800b1c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b1fc <std+0x58>)
 800b1c8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b1ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b200 <std+0x5c>)
 800b1cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b1ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b204 <std+0x60>)
 800b1d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b208 <std+0x64>)
 800b1d4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b1d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b20c <std+0x68>)
 800b1d8:	6224      	str	r4, [r4, #32]
 800b1da:	429c      	cmp	r4, r3
 800b1dc:	d006      	beq.n	800b1ec <std+0x48>
 800b1de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b1e2:	4294      	cmp	r4, r2
 800b1e4:	d002      	beq.n	800b1ec <std+0x48>
 800b1e6:	33d0      	adds	r3, #208	@ 0xd0
 800b1e8:	429c      	cmp	r4, r3
 800b1ea:	d105      	bne.n	800b1f8 <std+0x54>
 800b1ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b1f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1f4:	f000 b9a0 	b.w	800b538 <__retarget_lock_init_recursive>
 800b1f8:	bd10      	pop	{r4, pc}
 800b1fa:	bf00      	nop
 800b1fc:	0800b395 	.word	0x0800b395
 800b200:	0800b3b7 	.word	0x0800b3b7
 800b204:	0800b3ef 	.word	0x0800b3ef
 800b208:	0800b413 	.word	0x0800b413
 800b20c:	20000d74 	.word	0x20000d74

0800b210 <stdio_exit_handler>:
 800b210:	4a02      	ldr	r2, [pc, #8]	@ (800b21c <stdio_exit_handler+0xc>)
 800b212:	4903      	ldr	r1, [pc, #12]	@ (800b220 <stdio_exit_handler+0x10>)
 800b214:	4803      	ldr	r0, [pc, #12]	@ (800b224 <stdio_exit_handler+0x14>)
 800b216:	f000 b869 	b.w	800b2ec <_fwalk_sglue>
 800b21a:	bf00      	nop
 800b21c:	2000006c 	.word	0x2000006c
 800b220:	0800cebd 	.word	0x0800cebd
 800b224:	2000007c 	.word	0x2000007c

0800b228 <cleanup_stdio>:
 800b228:	6841      	ldr	r1, [r0, #4]
 800b22a:	4b0c      	ldr	r3, [pc, #48]	@ (800b25c <cleanup_stdio+0x34>)
 800b22c:	4299      	cmp	r1, r3
 800b22e:	b510      	push	{r4, lr}
 800b230:	4604      	mov	r4, r0
 800b232:	d001      	beq.n	800b238 <cleanup_stdio+0x10>
 800b234:	f001 fe42 	bl	800cebc <_fflush_r>
 800b238:	68a1      	ldr	r1, [r4, #8]
 800b23a:	4b09      	ldr	r3, [pc, #36]	@ (800b260 <cleanup_stdio+0x38>)
 800b23c:	4299      	cmp	r1, r3
 800b23e:	d002      	beq.n	800b246 <cleanup_stdio+0x1e>
 800b240:	4620      	mov	r0, r4
 800b242:	f001 fe3b 	bl	800cebc <_fflush_r>
 800b246:	68e1      	ldr	r1, [r4, #12]
 800b248:	4b06      	ldr	r3, [pc, #24]	@ (800b264 <cleanup_stdio+0x3c>)
 800b24a:	4299      	cmp	r1, r3
 800b24c:	d004      	beq.n	800b258 <cleanup_stdio+0x30>
 800b24e:	4620      	mov	r0, r4
 800b250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b254:	f001 be32 	b.w	800cebc <_fflush_r>
 800b258:	bd10      	pop	{r4, pc}
 800b25a:	bf00      	nop
 800b25c:	20000d74 	.word	0x20000d74
 800b260:	20000ddc 	.word	0x20000ddc
 800b264:	20000e44 	.word	0x20000e44

0800b268 <global_stdio_init.part.0>:
 800b268:	b510      	push	{r4, lr}
 800b26a:	4b0b      	ldr	r3, [pc, #44]	@ (800b298 <global_stdio_init.part.0+0x30>)
 800b26c:	4c0b      	ldr	r4, [pc, #44]	@ (800b29c <global_stdio_init.part.0+0x34>)
 800b26e:	4a0c      	ldr	r2, [pc, #48]	@ (800b2a0 <global_stdio_init.part.0+0x38>)
 800b270:	601a      	str	r2, [r3, #0]
 800b272:	4620      	mov	r0, r4
 800b274:	2200      	movs	r2, #0
 800b276:	2104      	movs	r1, #4
 800b278:	f7ff ff94 	bl	800b1a4 <std>
 800b27c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b280:	2201      	movs	r2, #1
 800b282:	2109      	movs	r1, #9
 800b284:	f7ff ff8e 	bl	800b1a4 <std>
 800b288:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b28c:	2202      	movs	r2, #2
 800b28e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b292:	2112      	movs	r1, #18
 800b294:	f7ff bf86 	b.w	800b1a4 <std>
 800b298:	20000eac 	.word	0x20000eac
 800b29c:	20000d74 	.word	0x20000d74
 800b2a0:	0800b211 	.word	0x0800b211

0800b2a4 <__sfp_lock_acquire>:
 800b2a4:	4801      	ldr	r0, [pc, #4]	@ (800b2ac <__sfp_lock_acquire+0x8>)
 800b2a6:	f000 b948 	b.w	800b53a <__retarget_lock_acquire_recursive>
 800b2aa:	bf00      	nop
 800b2ac:	20000eb5 	.word	0x20000eb5

0800b2b0 <__sfp_lock_release>:
 800b2b0:	4801      	ldr	r0, [pc, #4]	@ (800b2b8 <__sfp_lock_release+0x8>)
 800b2b2:	f000 b943 	b.w	800b53c <__retarget_lock_release_recursive>
 800b2b6:	bf00      	nop
 800b2b8:	20000eb5 	.word	0x20000eb5

0800b2bc <__sinit>:
 800b2bc:	b510      	push	{r4, lr}
 800b2be:	4604      	mov	r4, r0
 800b2c0:	f7ff fff0 	bl	800b2a4 <__sfp_lock_acquire>
 800b2c4:	6a23      	ldr	r3, [r4, #32]
 800b2c6:	b11b      	cbz	r3, 800b2d0 <__sinit+0x14>
 800b2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2cc:	f7ff bff0 	b.w	800b2b0 <__sfp_lock_release>
 800b2d0:	4b04      	ldr	r3, [pc, #16]	@ (800b2e4 <__sinit+0x28>)
 800b2d2:	6223      	str	r3, [r4, #32]
 800b2d4:	4b04      	ldr	r3, [pc, #16]	@ (800b2e8 <__sinit+0x2c>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1f5      	bne.n	800b2c8 <__sinit+0xc>
 800b2dc:	f7ff ffc4 	bl	800b268 <global_stdio_init.part.0>
 800b2e0:	e7f2      	b.n	800b2c8 <__sinit+0xc>
 800b2e2:	bf00      	nop
 800b2e4:	0800b229 	.word	0x0800b229
 800b2e8:	20000eac 	.word	0x20000eac

0800b2ec <_fwalk_sglue>:
 800b2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f0:	4607      	mov	r7, r0
 800b2f2:	4688      	mov	r8, r1
 800b2f4:	4614      	mov	r4, r2
 800b2f6:	2600      	movs	r6, #0
 800b2f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2fc:	f1b9 0901 	subs.w	r9, r9, #1
 800b300:	d505      	bpl.n	800b30e <_fwalk_sglue+0x22>
 800b302:	6824      	ldr	r4, [r4, #0]
 800b304:	2c00      	cmp	r4, #0
 800b306:	d1f7      	bne.n	800b2f8 <_fwalk_sglue+0xc>
 800b308:	4630      	mov	r0, r6
 800b30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b30e:	89ab      	ldrh	r3, [r5, #12]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d907      	bls.n	800b324 <_fwalk_sglue+0x38>
 800b314:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b318:	3301      	adds	r3, #1
 800b31a:	d003      	beq.n	800b324 <_fwalk_sglue+0x38>
 800b31c:	4629      	mov	r1, r5
 800b31e:	4638      	mov	r0, r7
 800b320:	47c0      	blx	r8
 800b322:	4306      	orrs	r6, r0
 800b324:	3568      	adds	r5, #104	@ 0x68
 800b326:	e7e9      	b.n	800b2fc <_fwalk_sglue+0x10>

0800b328 <sniprintf>:
 800b328:	b40c      	push	{r2, r3}
 800b32a:	b530      	push	{r4, r5, lr}
 800b32c:	4b18      	ldr	r3, [pc, #96]	@ (800b390 <sniprintf+0x68>)
 800b32e:	1e0c      	subs	r4, r1, #0
 800b330:	681d      	ldr	r5, [r3, #0]
 800b332:	b09d      	sub	sp, #116	@ 0x74
 800b334:	da08      	bge.n	800b348 <sniprintf+0x20>
 800b336:	238b      	movs	r3, #139	@ 0x8b
 800b338:	602b      	str	r3, [r5, #0]
 800b33a:	f04f 30ff 	mov.w	r0, #4294967295
 800b33e:	b01d      	add	sp, #116	@ 0x74
 800b340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b344:	b002      	add	sp, #8
 800b346:	4770      	bx	lr
 800b348:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b34c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b350:	f04f 0300 	mov.w	r3, #0
 800b354:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b356:	bf14      	ite	ne
 800b358:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b35c:	4623      	moveq	r3, r4
 800b35e:	9304      	str	r3, [sp, #16]
 800b360:	9307      	str	r3, [sp, #28]
 800b362:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b366:	9002      	str	r0, [sp, #8]
 800b368:	9006      	str	r0, [sp, #24]
 800b36a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b36e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b370:	ab21      	add	r3, sp, #132	@ 0x84
 800b372:	a902      	add	r1, sp, #8
 800b374:	4628      	mov	r0, r5
 800b376:	9301      	str	r3, [sp, #4]
 800b378:	f001 fc20 	bl	800cbbc <_svfiprintf_r>
 800b37c:	1c43      	adds	r3, r0, #1
 800b37e:	bfbc      	itt	lt
 800b380:	238b      	movlt	r3, #139	@ 0x8b
 800b382:	602b      	strlt	r3, [r5, #0]
 800b384:	2c00      	cmp	r4, #0
 800b386:	d0da      	beq.n	800b33e <sniprintf+0x16>
 800b388:	9b02      	ldr	r3, [sp, #8]
 800b38a:	2200      	movs	r2, #0
 800b38c:	701a      	strb	r2, [r3, #0]
 800b38e:	e7d6      	b.n	800b33e <sniprintf+0x16>
 800b390:	20000078 	.word	0x20000078

0800b394 <__sread>:
 800b394:	b510      	push	{r4, lr}
 800b396:	460c      	mov	r4, r1
 800b398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b39c:	f000 f87e 	bl	800b49c <_read_r>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	bfab      	itete	ge
 800b3a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b3a6:	89a3      	ldrhlt	r3, [r4, #12]
 800b3a8:	181b      	addge	r3, r3, r0
 800b3aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b3ae:	bfac      	ite	ge
 800b3b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b3b2:	81a3      	strhlt	r3, [r4, #12]
 800b3b4:	bd10      	pop	{r4, pc}

0800b3b6 <__swrite>:
 800b3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ba:	461f      	mov	r7, r3
 800b3bc:	898b      	ldrh	r3, [r1, #12]
 800b3be:	05db      	lsls	r3, r3, #23
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	4616      	mov	r6, r2
 800b3c6:	d505      	bpl.n	800b3d4 <__swrite+0x1e>
 800b3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3cc:	2302      	movs	r3, #2
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f000 f852 	bl	800b478 <_lseek_r>
 800b3d4:	89a3      	ldrh	r3, [r4, #12]
 800b3d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3de:	81a3      	strh	r3, [r4, #12]
 800b3e0:	4632      	mov	r2, r6
 800b3e2:	463b      	mov	r3, r7
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ea:	f000 b869 	b.w	800b4c0 <_write_r>

0800b3ee <__sseek>:
 800b3ee:	b510      	push	{r4, lr}
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f6:	f000 f83f 	bl	800b478 <_lseek_r>
 800b3fa:	1c43      	adds	r3, r0, #1
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	bf15      	itete	ne
 800b400:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b402:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b406:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b40a:	81a3      	strheq	r3, [r4, #12]
 800b40c:	bf18      	it	ne
 800b40e:	81a3      	strhne	r3, [r4, #12]
 800b410:	bd10      	pop	{r4, pc}

0800b412 <__sclose>:
 800b412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b416:	f000 b81f 	b.w	800b458 <_close_r>

0800b41a <memset>:
 800b41a:	4402      	add	r2, r0
 800b41c:	4603      	mov	r3, r0
 800b41e:	4293      	cmp	r3, r2
 800b420:	d100      	bne.n	800b424 <memset+0xa>
 800b422:	4770      	bx	lr
 800b424:	f803 1b01 	strb.w	r1, [r3], #1
 800b428:	e7f9      	b.n	800b41e <memset+0x4>

0800b42a <strncpy>:
 800b42a:	b510      	push	{r4, lr}
 800b42c:	3901      	subs	r1, #1
 800b42e:	4603      	mov	r3, r0
 800b430:	b132      	cbz	r2, 800b440 <strncpy+0x16>
 800b432:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b436:	f803 4b01 	strb.w	r4, [r3], #1
 800b43a:	3a01      	subs	r2, #1
 800b43c:	2c00      	cmp	r4, #0
 800b43e:	d1f7      	bne.n	800b430 <strncpy+0x6>
 800b440:	441a      	add	r2, r3
 800b442:	2100      	movs	r1, #0
 800b444:	4293      	cmp	r3, r2
 800b446:	d100      	bne.n	800b44a <strncpy+0x20>
 800b448:	bd10      	pop	{r4, pc}
 800b44a:	f803 1b01 	strb.w	r1, [r3], #1
 800b44e:	e7f9      	b.n	800b444 <strncpy+0x1a>

0800b450 <_localeconv_r>:
 800b450:	4800      	ldr	r0, [pc, #0]	@ (800b454 <_localeconv_r+0x4>)
 800b452:	4770      	bx	lr
 800b454:	200001b8 	.word	0x200001b8

0800b458 <_close_r>:
 800b458:	b538      	push	{r3, r4, r5, lr}
 800b45a:	4d06      	ldr	r5, [pc, #24]	@ (800b474 <_close_r+0x1c>)
 800b45c:	2300      	movs	r3, #0
 800b45e:	4604      	mov	r4, r0
 800b460:	4608      	mov	r0, r1
 800b462:	602b      	str	r3, [r5, #0]
 800b464:	f7f8 ffbc 	bl	80043e0 <_close>
 800b468:	1c43      	adds	r3, r0, #1
 800b46a:	d102      	bne.n	800b472 <_close_r+0x1a>
 800b46c:	682b      	ldr	r3, [r5, #0]
 800b46e:	b103      	cbz	r3, 800b472 <_close_r+0x1a>
 800b470:	6023      	str	r3, [r4, #0]
 800b472:	bd38      	pop	{r3, r4, r5, pc}
 800b474:	20000eb0 	.word	0x20000eb0

0800b478 <_lseek_r>:
 800b478:	b538      	push	{r3, r4, r5, lr}
 800b47a:	4d07      	ldr	r5, [pc, #28]	@ (800b498 <_lseek_r+0x20>)
 800b47c:	4604      	mov	r4, r0
 800b47e:	4608      	mov	r0, r1
 800b480:	4611      	mov	r1, r2
 800b482:	2200      	movs	r2, #0
 800b484:	602a      	str	r2, [r5, #0]
 800b486:	461a      	mov	r2, r3
 800b488:	f7f8 ffd1 	bl	800442e <_lseek>
 800b48c:	1c43      	adds	r3, r0, #1
 800b48e:	d102      	bne.n	800b496 <_lseek_r+0x1e>
 800b490:	682b      	ldr	r3, [r5, #0]
 800b492:	b103      	cbz	r3, 800b496 <_lseek_r+0x1e>
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	bd38      	pop	{r3, r4, r5, pc}
 800b498:	20000eb0 	.word	0x20000eb0

0800b49c <_read_r>:
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4d07      	ldr	r5, [pc, #28]	@ (800b4bc <_read_r+0x20>)
 800b4a0:	4604      	mov	r4, r0
 800b4a2:	4608      	mov	r0, r1
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	602a      	str	r2, [r5, #0]
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	f7f8 ff5f 	bl	800436e <_read>
 800b4b0:	1c43      	adds	r3, r0, #1
 800b4b2:	d102      	bne.n	800b4ba <_read_r+0x1e>
 800b4b4:	682b      	ldr	r3, [r5, #0]
 800b4b6:	b103      	cbz	r3, 800b4ba <_read_r+0x1e>
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	bd38      	pop	{r3, r4, r5, pc}
 800b4bc:	20000eb0 	.word	0x20000eb0

0800b4c0 <_write_r>:
 800b4c0:	b538      	push	{r3, r4, r5, lr}
 800b4c2:	4d07      	ldr	r5, [pc, #28]	@ (800b4e0 <_write_r+0x20>)
 800b4c4:	4604      	mov	r4, r0
 800b4c6:	4608      	mov	r0, r1
 800b4c8:	4611      	mov	r1, r2
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	602a      	str	r2, [r5, #0]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	f7f8 ff6a 	bl	80043a8 <_write>
 800b4d4:	1c43      	adds	r3, r0, #1
 800b4d6:	d102      	bne.n	800b4de <_write_r+0x1e>
 800b4d8:	682b      	ldr	r3, [r5, #0]
 800b4da:	b103      	cbz	r3, 800b4de <_write_r+0x1e>
 800b4dc:	6023      	str	r3, [r4, #0]
 800b4de:	bd38      	pop	{r3, r4, r5, pc}
 800b4e0:	20000eb0 	.word	0x20000eb0

0800b4e4 <__errno>:
 800b4e4:	4b01      	ldr	r3, [pc, #4]	@ (800b4ec <__errno+0x8>)
 800b4e6:	6818      	ldr	r0, [r3, #0]
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	20000078 	.word	0x20000078

0800b4f0 <__libc_init_array>:
 800b4f0:	b570      	push	{r4, r5, r6, lr}
 800b4f2:	4d0d      	ldr	r5, [pc, #52]	@ (800b528 <__libc_init_array+0x38>)
 800b4f4:	4c0d      	ldr	r4, [pc, #52]	@ (800b52c <__libc_init_array+0x3c>)
 800b4f6:	1b64      	subs	r4, r4, r5
 800b4f8:	10a4      	asrs	r4, r4, #2
 800b4fa:	2600      	movs	r6, #0
 800b4fc:	42a6      	cmp	r6, r4
 800b4fe:	d109      	bne.n	800b514 <__libc_init_array+0x24>
 800b500:	4d0b      	ldr	r5, [pc, #44]	@ (800b530 <__libc_init_array+0x40>)
 800b502:	4c0c      	ldr	r4, [pc, #48]	@ (800b534 <__libc_init_array+0x44>)
 800b504:	f002 f906 	bl	800d714 <_init>
 800b508:	1b64      	subs	r4, r4, r5
 800b50a:	10a4      	asrs	r4, r4, #2
 800b50c:	2600      	movs	r6, #0
 800b50e:	42a6      	cmp	r6, r4
 800b510:	d105      	bne.n	800b51e <__libc_init_array+0x2e>
 800b512:	bd70      	pop	{r4, r5, r6, pc}
 800b514:	f855 3b04 	ldr.w	r3, [r5], #4
 800b518:	4798      	blx	r3
 800b51a:	3601      	adds	r6, #1
 800b51c:	e7ee      	b.n	800b4fc <__libc_init_array+0xc>
 800b51e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b522:	4798      	blx	r3
 800b524:	3601      	adds	r6, #1
 800b526:	e7f2      	b.n	800b50e <__libc_init_array+0x1e>
 800b528:	0800df8c 	.word	0x0800df8c
 800b52c:	0800df8c 	.word	0x0800df8c
 800b530:	0800df8c 	.word	0x0800df8c
 800b534:	0800df90 	.word	0x0800df90

0800b538 <__retarget_lock_init_recursive>:
 800b538:	4770      	bx	lr

0800b53a <__retarget_lock_acquire_recursive>:
 800b53a:	4770      	bx	lr

0800b53c <__retarget_lock_release_recursive>:
 800b53c:	4770      	bx	lr

0800b53e <memcpy>:
 800b53e:	440a      	add	r2, r1
 800b540:	4291      	cmp	r1, r2
 800b542:	f100 33ff 	add.w	r3, r0, #4294967295
 800b546:	d100      	bne.n	800b54a <memcpy+0xc>
 800b548:	4770      	bx	lr
 800b54a:	b510      	push	{r4, lr}
 800b54c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b550:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b554:	4291      	cmp	r1, r2
 800b556:	d1f9      	bne.n	800b54c <memcpy+0xe>
 800b558:	bd10      	pop	{r4, pc}

0800b55a <quorem>:
 800b55a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55e:	6903      	ldr	r3, [r0, #16]
 800b560:	690c      	ldr	r4, [r1, #16]
 800b562:	42a3      	cmp	r3, r4
 800b564:	4607      	mov	r7, r0
 800b566:	db7e      	blt.n	800b666 <quorem+0x10c>
 800b568:	3c01      	subs	r4, #1
 800b56a:	f101 0814 	add.w	r8, r1, #20
 800b56e:	00a3      	lsls	r3, r4, #2
 800b570:	f100 0514 	add.w	r5, r0, #20
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b57a:	9301      	str	r3, [sp, #4]
 800b57c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b580:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b584:	3301      	adds	r3, #1
 800b586:	429a      	cmp	r2, r3
 800b588:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b58c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b590:	d32e      	bcc.n	800b5f0 <quorem+0x96>
 800b592:	f04f 0a00 	mov.w	sl, #0
 800b596:	46c4      	mov	ip, r8
 800b598:	46ae      	mov	lr, r5
 800b59a:	46d3      	mov	fp, sl
 800b59c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b5a0:	b298      	uxth	r0, r3
 800b5a2:	fb06 a000 	mla	r0, r6, r0, sl
 800b5a6:	0c02      	lsrs	r2, r0, #16
 800b5a8:	0c1b      	lsrs	r3, r3, #16
 800b5aa:	fb06 2303 	mla	r3, r6, r3, r2
 800b5ae:	f8de 2000 	ldr.w	r2, [lr]
 800b5b2:	b280      	uxth	r0, r0
 800b5b4:	b292      	uxth	r2, r2
 800b5b6:	1a12      	subs	r2, r2, r0
 800b5b8:	445a      	add	r2, fp
 800b5ba:	f8de 0000 	ldr.w	r0, [lr]
 800b5be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b5c8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b5cc:	b292      	uxth	r2, r2
 800b5ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b5d2:	45e1      	cmp	r9, ip
 800b5d4:	f84e 2b04 	str.w	r2, [lr], #4
 800b5d8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b5dc:	d2de      	bcs.n	800b59c <quorem+0x42>
 800b5de:	9b00      	ldr	r3, [sp, #0]
 800b5e0:	58eb      	ldr	r3, [r5, r3]
 800b5e2:	b92b      	cbnz	r3, 800b5f0 <quorem+0x96>
 800b5e4:	9b01      	ldr	r3, [sp, #4]
 800b5e6:	3b04      	subs	r3, #4
 800b5e8:	429d      	cmp	r5, r3
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	d32f      	bcc.n	800b64e <quorem+0xf4>
 800b5ee:	613c      	str	r4, [r7, #16]
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	f001 f97f 	bl	800c8f4 <__mcmp>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	db25      	blt.n	800b646 <quorem+0xec>
 800b5fa:	4629      	mov	r1, r5
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	f858 2b04 	ldr.w	r2, [r8], #4
 800b602:	f8d1 c000 	ldr.w	ip, [r1]
 800b606:	fa1f fe82 	uxth.w	lr, r2
 800b60a:	fa1f f38c 	uxth.w	r3, ip
 800b60e:	eba3 030e 	sub.w	r3, r3, lr
 800b612:	4403      	add	r3, r0
 800b614:	0c12      	lsrs	r2, r2, #16
 800b616:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b61a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b61e:	b29b      	uxth	r3, r3
 800b620:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b624:	45c1      	cmp	r9, r8
 800b626:	f841 3b04 	str.w	r3, [r1], #4
 800b62a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b62e:	d2e6      	bcs.n	800b5fe <quorem+0xa4>
 800b630:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b634:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b638:	b922      	cbnz	r2, 800b644 <quorem+0xea>
 800b63a:	3b04      	subs	r3, #4
 800b63c:	429d      	cmp	r5, r3
 800b63e:	461a      	mov	r2, r3
 800b640:	d30b      	bcc.n	800b65a <quorem+0x100>
 800b642:	613c      	str	r4, [r7, #16]
 800b644:	3601      	adds	r6, #1
 800b646:	4630      	mov	r0, r6
 800b648:	b003      	add	sp, #12
 800b64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64e:	6812      	ldr	r2, [r2, #0]
 800b650:	3b04      	subs	r3, #4
 800b652:	2a00      	cmp	r2, #0
 800b654:	d1cb      	bne.n	800b5ee <quorem+0x94>
 800b656:	3c01      	subs	r4, #1
 800b658:	e7c6      	b.n	800b5e8 <quorem+0x8e>
 800b65a:	6812      	ldr	r2, [r2, #0]
 800b65c:	3b04      	subs	r3, #4
 800b65e:	2a00      	cmp	r2, #0
 800b660:	d1ef      	bne.n	800b642 <quorem+0xe8>
 800b662:	3c01      	subs	r4, #1
 800b664:	e7ea      	b.n	800b63c <quorem+0xe2>
 800b666:	2000      	movs	r0, #0
 800b668:	e7ee      	b.n	800b648 <quorem+0xee>
 800b66a:	0000      	movs	r0, r0
 800b66c:	0000      	movs	r0, r0
	...

0800b670 <_dtoa_r>:
 800b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b674:	69c7      	ldr	r7, [r0, #28]
 800b676:	b097      	sub	sp, #92	@ 0x5c
 800b678:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b67c:	ec55 4b10 	vmov	r4, r5, d0
 800b680:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b682:	9107      	str	r1, [sp, #28]
 800b684:	4681      	mov	r9, r0
 800b686:	920c      	str	r2, [sp, #48]	@ 0x30
 800b688:	9311      	str	r3, [sp, #68]	@ 0x44
 800b68a:	b97f      	cbnz	r7, 800b6ac <_dtoa_r+0x3c>
 800b68c:	2010      	movs	r0, #16
 800b68e:	f000 fe09 	bl	800c2a4 <malloc>
 800b692:	4602      	mov	r2, r0
 800b694:	f8c9 001c 	str.w	r0, [r9, #28]
 800b698:	b920      	cbnz	r0, 800b6a4 <_dtoa_r+0x34>
 800b69a:	4ba9      	ldr	r3, [pc, #676]	@ (800b940 <_dtoa_r+0x2d0>)
 800b69c:	21ef      	movs	r1, #239	@ 0xef
 800b69e:	48a9      	ldr	r0, [pc, #676]	@ (800b944 <_dtoa_r+0x2d4>)
 800b6a0:	f001 fc5e 	bl	800cf60 <__assert_func>
 800b6a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b6a8:	6007      	str	r7, [r0, #0]
 800b6aa:	60c7      	str	r7, [r0, #12]
 800b6ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b6b0:	6819      	ldr	r1, [r3, #0]
 800b6b2:	b159      	cbz	r1, 800b6cc <_dtoa_r+0x5c>
 800b6b4:	685a      	ldr	r2, [r3, #4]
 800b6b6:	604a      	str	r2, [r1, #4]
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	4093      	lsls	r3, r2
 800b6bc:	608b      	str	r3, [r1, #8]
 800b6be:	4648      	mov	r0, r9
 800b6c0:	f000 fee6 	bl	800c490 <_Bfree>
 800b6c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	601a      	str	r2, [r3, #0]
 800b6cc:	1e2b      	subs	r3, r5, #0
 800b6ce:	bfb9      	ittee	lt
 800b6d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b6d4:	9305      	strlt	r3, [sp, #20]
 800b6d6:	2300      	movge	r3, #0
 800b6d8:	6033      	strge	r3, [r6, #0]
 800b6da:	9f05      	ldr	r7, [sp, #20]
 800b6dc:	4b9a      	ldr	r3, [pc, #616]	@ (800b948 <_dtoa_r+0x2d8>)
 800b6de:	bfbc      	itt	lt
 800b6e0:	2201      	movlt	r2, #1
 800b6e2:	6032      	strlt	r2, [r6, #0]
 800b6e4:	43bb      	bics	r3, r7
 800b6e6:	d112      	bne.n	800b70e <_dtoa_r+0x9e>
 800b6e8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b6ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b6ee:	6013      	str	r3, [r2, #0]
 800b6f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b6f4:	4323      	orrs	r3, r4
 800b6f6:	f000 855a 	beq.w	800c1ae <_dtoa_r+0xb3e>
 800b6fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b6fc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b95c <_dtoa_r+0x2ec>
 800b700:	2b00      	cmp	r3, #0
 800b702:	f000 855c 	beq.w	800c1be <_dtoa_r+0xb4e>
 800b706:	f10a 0303 	add.w	r3, sl, #3
 800b70a:	f000 bd56 	b.w	800c1ba <_dtoa_r+0xb4a>
 800b70e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b712:	2200      	movs	r2, #0
 800b714:	ec51 0b17 	vmov	r0, r1, d7
 800b718:	2300      	movs	r3, #0
 800b71a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b71e:	f7f5 f9f3 	bl	8000b08 <__aeabi_dcmpeq>
 800b722:	4680      	mov	r8, r0
 800b724:	b158      	cbz	r0, 800b73e <_dtoa_r+0xce>
 800b726:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b728:	2301      	movs	r3, #1
 800b72a:	6013      	str	r3, [r2, #0]
 800b72c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b72e:	b113      	cbz	r3, 800b736 <_dtoa_r+0xc6>
 800b730:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b732:	4b86      	ldr	r3, [pc, #536]	@ (800b94c <_dtoa_r+0x2dc>)
 800b734:	6013      	str	r3, [r2, #0]
 800b736:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b960 <_dtoa_r+0x2f0>
 800b73a:	f000 bd40 	b.w	800c1be <_dtoa_r+0xb4e>
 800b73e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b742:	aa14      	add	r2, sp, #80	@ 0x50
 800b744:	a915      	add	r1, sp, #84	@ 0x54
 800b746:	4648      	mov	r0, r9
 800b748:	f001 f984 	bl	800ca54 <__d2b>
 800b74c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b750:	9002      	str	r0, [sp, #8]
 800b752:	2e00      	cmp	r6, #0
 800b754:	d078      	beq.n	800b848 <_dtoa_r+0x1d8>
 800b756:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b758:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b75c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b760:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b764:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b768:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b76c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b770:	4619      	mov	r1, r3
 800b772:	2200      	movs	r2, #0
 800b774:	4b76      	ldr	r3, [pc, #472]	@ (800b950 <_dtoa_r+0x2e0>)
 800b776:	f7f4 fda7 	bl	80002c8 <__aeabi_dsub>
 800b77a:	a36b      	add	r3, pc, #428	@ (adr r3, 800b928 <_dtoa_r+0x2b8>)
 800b77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b780:	f7f4 ff5a 	bl	8000638 <__aeabi_dmul>
 800b784:	a36a      	add	r3, pc, #424	@ (adr r3, 800b930 <_dtoa_r+0x2c0>)
 800b786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78a:	f7f4 fd9f 	bl	80002cc <__adddf3>
 800b78e:	4604      	mov	r4, r0
 800b790:	4630      	mov	r0, r6
 800b792:	460d      	mov	r5, r1
 800b794:	f7f4 fee6 	bl	8000564 <__aeabi_i2d>
 800b798:	a367      	add	r3, pc, #412	@ (adr r3, 800b938 <_dtoa_r+0x2c8>)
 800b79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79e:	f7f4 ff4b 	bl	8000638 <__aeabi_dmul>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	f7f4 fd8f 	bl	80002cc <__adddf3>
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	460d      	mov	r5, r1
 800b7b2:	f7f5 f9f1 	bl	8000b98 <__aeabi_d2iz>
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	4607      	mov	r7, r0
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	4620      	mov	r0, r4
 800b7be:	4629      	mov	r1, r5
 800b7c0:	f7f5 f9ac 	bl	8000b1c <__aeabi_dcmplt>
 800b7c4:	b140      	cbz	r0, 800b7d8 <_dtoa_r+0x168>
 800b7c6:	4638      	mov	r0, r7
 800b7c8:	f7f4 fecc 	bl	8000564 <__aeabi_i2d>
 800b7cc:	4622      	mov	r2, r4
 800b7ce:	462b      	mov	r3, r5
 800b7d0:	f7f5 f99a 	bl	8000b08 <__aeabi_dcmpeq>
 800b7d4:	b900      	cbnz	r0, 800b7d8 <_dtoa_r+0x168>
 800b7d6:	3f01      	subs	r7, #1
 800b7d8:	2f16      	cmp	r7, #22
 800b7da:	d852      	bhi.n	800b882 <_dtoa_r+0x212>
 800b7dc:	4b5d      	ldr	r3, [pc, #372]	@ (800b954 <_dtoa_r+0x2e4>)
 800b7de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b7ea:	f7f5 f997 	bl	8000b1c <__aeabi_dcmplt>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d049      	beq.n	800b886 <_dtoa_r+0x216>
 800b7f2:	3f01      	subs	r7, #1
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b7f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b7fa:	1b9b      	subs	r3, r3, r6
 800b7fc:	1e5a      	subs	r2, r3, #1
 800b7fe:	bf45      	ittet	mi
 800b800:	f1c3 0301 	rsbmi	r3, r3, #1
 800b804:	9300      	strmi	r3, [sp, #0]
 800b806:	2300      	movpl	r3, #0
 800b808:	2300      	movmi	r3, #0
 800b80a:	9206      	str	r2, [sp, #24]
 800b80c:	bf54      	ite	pl
 800b80e:	9300      	strpl	r3, [sp, #0]
 800b810:	9306      	strmi	r3, [sp, #24]
 800b812:	2f00      	cmp	r7, #0
 800b814:	db39      	blt.n	800b88a <_dtoa_r+0x21a>
 800b816:	9b06      	ldr	r3, [sp, #24]
 800b818:	970d      	str	r7, [sp, #52]	@ 0x34
 800b81a:	443b      	add	r3, r7
 800b81c:	9306      	str	r3, [sp, #24]
 800b81e:	2300      	movs	r3, #0
 800b820:	9308      	str	r3, [sp, #32]
 800b822:	9b07      	ldr	r3, [sp, #28]
 800b824:	2b09      	cmp	r3, #9
 800b826:	d863      	bhi.n	800b8f0 <_dtoa_r+0x280>
 800b828:	2b05      	cmp	r3, #5
 800b82a:	bfc4      	itt	gt
 800b82c:	3b04      	subgt	r3, #4
 800b82e:	9307      	strgt	r3, [sp, #28]
 800b830:	9b07      	ldr	r3, [sp, #28]
 800b832:	f1a3 0302 	sub.w	r3, r3, #2
 800b836:	bfcc      	ite	gt
 800b838:	2400      	movgt	r4, #0
 800b83a:	2401      	movle	r4, #1
 800b83c:	2b03      	cmp	r3, #3
 800b83e:	d863      	bhi.n	800b908 <_dtoa_r+0x298>
 800b840:	e8df f003 	tbb	[pc, r3]
 800b844:	2b375452 	.word	0x2b375452
 800b848:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b84c:	441e      	add	r6, r3
 800b84e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b852:	2b20      	cmp	r3, #32
 800b854:	bfc1      	itttt	gt
 800b856:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b85a:	409f      	lslgt	r7, r3
 800b85c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b860:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b864:	bfd6      	itet	le
 800b866:	f1c3 0320 	rsble	r3, r3, #32
 800b86a:	ea47 0003 	orrgt.w	r0, r7, r3
 800b86e:	fa04 f003 	lslle.w	r0, r4, r3
 800b872:	f7f4 fe67 	bl	8000544 <__aeabi_ui2d>
 800b876:	2201      	movs	r2, #1
 800b878:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b87c:	3e01      	subs	r6, #1
 800b87e:	9212      	str	r2, [sp, #72]	@ 0x48
 800b880:	e776      	b.n	800b770 <_dtoa_r+0x100>
 800b882:	2301      	movs	r3, #1
 800b884:	e7b7      	b.n	800b7f6 <_dtoa_r+0x186>
 800b886:	9010      	str	r0, [sp, #64]	@ 0x40
 800b888:	e7b6      	b.n	800b7f8 <_dtoa_r+0x188>
 800b88a:	9b00      	ldr	r3, [sp, #0]
 800b88c:	1bdb      	subs	r3, r3, r7
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	427b      	negs	r3, r7
 800b892:	9308      	str	r3, [sp, #32]
 800b894:	2300      	movs	r3, #0
 800b896:	930d      	str	r3, [sp, #52]	@ 0x34
 800b898:	e7c3      	b.n	800b822 <_dtoa_r+0x1b2>
 800b89a:	2301      	movs	r3, #1
 800b89c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b89e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b8a0:	eb07 0b03 	add.w	fp, r7, r3
 800b8a4:	f10b 0301 	add.w	r3, fp, #1
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	9303      	str	r3, [sp, #12]
 800b8ac:	bfb8      	it	lt
 800b8ae:	2301      	movlt	r3, #1
 800b8b0:	e006      	b.n	800b8c0 <_dtoa_r+0x250>
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	dd28      	ble.n	800b90e <_dtoa_r+0x29e>
 800b8bc:	469b      	mov	fp, r3
 800b8be:	9303      	str	r3, [sp, #12]
 800b8c0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	2204      	movs	r2, #4
 800b8c8:	f102 0514 	add.w	r5, r2, #20
 800b8cc:	429d      	cmp	r5, r3
 800b8ce:	d926      	bls.n	800b91e <_dtoa_r+0x2ae>
 800b8d0:	6041      	str	r1, [r0, #4]
 800b8d2:	4648      	mov	r0, r9
 800b8d4:	f000 fd9c 	bl	800c410 <_Balloc>
 800b8d8:	4682      	mov	sl, r0
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	d142      	bne.n	800b964 <_dtoa_r+0x2f4>
 800b8de:	4b1e      	ldr	r3, [pc, #120]	@ (800b958 <_dtoa_r+0x2e8>)
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	f240 11af 	movw	r1, #431	@ 0x1af
 800b8e6:	e6da      	b.n	800b69e <_dtoa_r+0x2e>
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	e7e3      	b.n	800b8b4 <_dtoa_r+0x244>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	e7d5      	b.n	800b89c <_dtoa_r+0x22c>
 800b8f0:	2401      	movs	r4, #1
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	9307      	str	r3, [sp, #28]
 800b8f6:	9409      	str	r4, [sp, #36]	@ 0x24
 800b8f8:	f04f 3bff 	mov.w	fp, #4294967295
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	f8cd b00c 	str.w	fp, [sp, #12]
 800b902:	2312      	movs	r3, #18
 800b904:	920c      	str	r2, [sp, #48]	@ 0x30
 800b906:	e7db      	b.n	800b8c0 <_dtoa_r+0x250>
 800b908:	2301      	movs	r3, #1
 800b90a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b90c:	e7f4      	b.n	800b8f8 <_dtoa_r+0x288>
 800b90e:	f04f 0b01 	mov.w	fp, #1
 800b912:	f8cd b00c 	str.w	fp, [sp, #12]
 800b916:	465b      	mov	r3, fp
 800b918:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b91c:	e7d0      	b.n	800b8c0 <_dtoa_r+0x250>
 800b91e:	3101      	adds	r1, #1
 800b920:	0052      	lsls	r2, r2, #1
 800b922:	e7d1      	b.n	800b8c8 <_dtoa_r+0x258>
 800b924:	f3af 8000 	nop.w
 800b928:	636f4361 	.word	0x636f4361
 800b92c:	3fd287a7 	.word	0x3fd287a7
 800b930:	8b60c8b3 	.word	0x8b60c8b3
 800b934:	3fc68a28 	.word	0x3fc68a28
 800b938:	509f79fb 	.word	0x509f79fb
 800b93c:	3fd34413 	.word	0x3fd34413
 800b940:	0800dc4d 	.word	0x0800dc4d
 800b944:	0800dc64 	.word	0x0800dc64
 800b948:	7ff00000 	.word	0x7ff00000
 800b94c:	0800dc1d 	.word	0x0800dc1d
 800b950:	3ff80000 	.word	0x3ff80000
 800b954:	0800ddb8 	.word	0x0800ddb8
 800b958:	0800dcbc 	.word	0x0800dcbc
 800b95c:	0800dc49 	.word	0x0800dc49
 800b960:	0800dc1c 	.word	0x0800dc1c
 800b964:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b968:	6018      	str	r0, [r3, #0]
 800b96a:	9b03      	ldr	r3, [sp, #12]
 800b96c:	2b0e      	cmp	r3, #14
 800b96e:	f200 80a1 	bhi.w	800bab4 <_dtoa_r+0x444>
 800b972:	2c00      	cmp	r4, #0
 800b974:	f000 809e 	beq.w	800bab4 <_dtoa_r+0x444>
 800b978:	2f00      	cmp	r7, #0
 800b97a:	dd33      	ble.n	800b9e4 <_dtoa_r+0x374>
 800b97c:	4b9c      	ldr	r3, [pc, #624]	@ (800bbf0 <_dtoa_r+0x580>)
 800b97e:	f007 020f 	and.w	r2, r7, #15
 800b982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b986:	ed93 7b00 	vldr	d7, [r3]
 800b98a:	05f8      	lsls	r0, r7, #23
 800b98c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b990:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b994:	d516      	bpl.n	800b9c4 <_dtoa_r+0x354>
 800b996:	4b97      	ldr	r3, [pc, #604]	@ (800bbf4 <_dtoa_r+0x584>)
 800b998:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b99c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9a0:	f7f4 ff74 	bl	800088c <__aeabi_ddiv>
 800b9a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9a8:	f004 040f 	and.w	r4, r4, #15
 800b9ac:	2603      	movs	r6, #3
 800b9ae:	4d91      	ldr	r5, [pc, #580]	@ (800bbf4 <_dtoa_r+0x584>)
 800b9b0:	b954      	cbnz	r4, 800b9c8 <_dtoa_r+0x358>
 800b9b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b9b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9ba:	f7f4 ff67 	bl	800088c <__aeabi_ddiv>
 800b9be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9c2:	e028      	b.n	800ba16 <_dtoa_r+0x3a6>
 800b9c4:	2602      	movs	r6, #2
 800b9c6:	e7f2      	b.n	800b9ae <_dtoa_r+0x33e>
 800b9c8:	07e1      	lsls	r1, r4, #31
 800b9ca:	d508      	bpl.n	800b9de <_dtoa_r+0x36e>
 800b9cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b9d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b9d4:	f7f4 fe30 	bl	8000638 <__aeabi_dmul>
 800b9d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b9dc:	3601      	adds	r6, #1
 800b9de:	1064      	asrs	r4, r4, #1
 800b9e0:	3508      	adds	r5, #8
 800b9e2:	e7e5      	b.n	800b9b0 <_dtoa_r+0x340>
 800b9e4:	f000 80af 	beq.w	800bb46 <_dtoa_r+0x4d6>
 800b9e8:	427c      	negs	r4, r7
 800b9ea:	4b81      	ldr	r3, [pc, #516]	@ (800bbf0 <_dtoa_r+0x580>)
 800b9ec:	4d81      	ldr	r5, [pc, #516]	@ (800bbf4 <_dtoa_r+0x584>)
 800b9ee:	f004 020f 	and.w	r2, r4, #15
 800b9f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b9fe:	f7f4 fe1b 	bl	8000638 <__aeabi_dmul>
 800ba02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba06:	1124      	asrs	r4, r4, #4
 800ba08:	2300      	movs	r3, #0
 800ba0a:	2602      	movs	r6, #2
 800ba0c:	2c00      	cmp	r4, #0
 800ba0e:	f040 808f 	bne.w	800bb30 <_dtoa_r+0x4c0>
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d1d3      	bne.n	800b9be <_dtoa_r+0x34e>
 800ba16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ba18:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f000 8094 	beq.w	800bb4a <_dtoa_r+0x4da>
 800ba22:	4b75      	ldr	r3, [pc, #468]	@ (800bbf8 <_dtoa_r+0x588>)
 800ba24:	2200      	movs	r2, #0
 800ba26:	4620      	mov	r0, r4
 800ba28:	4629      	mov	r1, r5
 800ba2a:	f7f5 f877 	bl	8000b1c <__aeabi_dcmplt>
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	f000 808b 	beq.w	800bb4a <_dtoa_r+0x4da>
 800ba34:	9b03      	ldr	r3, [sp, #12]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	f000 8087 	beq.w	800bb4a <_dtoa_r+0x4da>
 800ba3c:	f1bb 0f00 	cmp.w	fp, #0
 800ba40:	dd34      	ble.n	800baac <_dtoa_r+0x43c>
 800ba42:	4620      	mov	r0, r4
 800ba44:	4b6d      	ldr	r3, [pc, #436]	@ (800bbfc <_dtoa_r+0x58c>)
 800ba46:	2200      	movs	r2, #0
 800ba48:	4629      	mov	r1, r5
 800ba4a:	f7f4 fdf5 	bl	8000638 <__aeabi_dmul>
 800ba4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba52:	f107 38ff 	add.w	r8, r7, #4294967295
 800ba56:	3601      	adds	r6, #1
 800ba58:	465c      	mov	r4, fp
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f7f4 fd82 	bl	8000564 <__aeabi_i2d>
 800ba60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba64:	f7f4 fde8 	bl	8000638 <__aeabi_dmul>
 800ba68:	4b65      	ldr	r3, [pc, #404]	@ (800bc00 <_dtoa_r+0x590>)
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	f7f4 fc2e 	bl	80002cc <__adddf3>
 800ba70:	4605      	mov	r5, r0
 800ba72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ba76:	2c00      	cmp	r4, #0
 800ba78:	d16a      	bne.n	800bb50 <_dtoa_r+0x4e0>
 800ba7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba7e:	4b61      	ldr	r3, [pc, #388]	@ (800bc04 <_dtoa_r+0x594>)
 800ba80:	2200      	movs	r2, #0
 800ba82:	f7f4 fc21 	bl	80002c8 <__aeabi_dsub>
 800ba86:	4602      	mov	r2, r0
 800ba88:	460b      	mov	r3, r1
 800ba8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba8e:	462a      	mov	r2, r5
 800ba90:	4633      	mov	r3, r6
 800ba92:	f7f5 f861 	bl	8000b58 <__aeabi_dcmpgt>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	f040 8298 	bne.w	800bfcc <_dtoa_r+0x95c>
 800ba9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800baa0:	462a      	mov	r2, r5
 800baa2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800baa6:	f7f5 f839 	bl	8000b1c <__aeabi_dcmplt>
 800baaa:	bb38      	cbnz	r0, 800bafc <_dtoa_r+0x48c>
 800baac:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800bab0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bab4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f2c0 8157 	blt.w	800bd6a <_dtoa_r+0x6fa>
 800babc:	2f0e      	cmp	r7, #14
 800babe:	f300 8154 	bgt.w	800bd6a <_dtoa_r+0x6fa>
 800bac2:	4b4b      	ldr	r3, [pc, #300]	@ (800bbf0 <_dtoa_r+0x580>)
 800bac4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bac8:	ed93 7b00 	vldr	d7, [r3]
 800bacc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bace:	2b00      	cmp	r3, #0
 800bad0:	ed8d 7b00 	vstr	d7, [sp]
 800bad4:	f280 80e5 	bge.w	800bca2 <_dtoa_r+0x632>
 800bad8:	9b03      	ldr	r3, [sp, #12]
 800bada:	2b00      	cmp	r3, #0
 800badc:	f300 80e1 	bgt.w	800bca2 <_dtoa_r+0x632>
 800bae0:	d10c      	bne.n	800bafc <_dtoa_r+0x48c>
 800bae2:	4b48      	ldr	r3, [pc, #288]	@ (800bc04 <_dtoa_r+0x594>)
 800bae4:	2200      	movs	r2, #0
 800bae6:	ec51 0b17 	vmov	r0, r1, d7
 800baea:	f7f4 fda5 	bl	8000638 <__aeabi_dmul>
 800baee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800baf2:	f7f5 f827 	bl	8000b44 <__aeabi_dcmpge>
 800baf6:	2800      	cmp	r0, #0
 800baf8:	f000 8266 	beq.w	800bfc8 <_dtoa_r+0x958>
 800bafc:	2400      	movs	r4, #0
 800bafe:	4625      	mov	r5, r4
 800bb00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bb02:	4656      	mov	r6, sl
 800bb04:	ea6f 0803 	mvn.w	r8, r3
 800bb08:	2700      	movs	r7, #0
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	4648      	mov	r0, r9
 800bb0e:	f000 fcbf 	bl	800c490 <_Bfree>
 800bb12:	2d00      	cmp	r5, #0
 800bb14:	f000 80bd 	beq.w	800bc92 <_dtoa_r+0x622>
 800bb18:	b12f      	cbz	r7, 800bb26 <_dtoa_r+0x4b6>
 800bb1a:	42af      	cmp	r7, r5
 800bb1c:	d003      	beq.n	800bb26 <_dtoa_r+0x4b6>
 800bb1e:	4639      	mov	r1, r7
 800bb20:	4648      	mov	r0, r9
 800bb22:	f000 fcb5 	bl	800c490 <_Bfree>
 800bb26:	4629      	mov	r1, r5
 800bb28:	4648      	mov	r0, r9
 800bb2a:	f000 fcb1 	bl	800c490 <_Bfree>
 800bb2e:	e0b0      	b.n	800bc92 <_dtoa_r+0x622>
 800bb30:	07e2      	lsls	r2, r4, #31
 800bb32:	d505      	bpl.n	800bb40 <_dtoa_r+0x4d0>
 800bb34:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb38:	f7f4 fd7e 	bl	8000638 <__aeabi_dmul>
 800bb3c:	3601      	adds	r6, #1
 800bb3e:	2301      	movs	r3, #1
 800bb40:	1064      	asrs	r4, r4, #1
 800bb42:	3508      	adds	r5, #8
 800bb44:	e762      	b.n	800ba0c <_dtoa_r+0x39c>
 800bb46:	2602      	movs	r6, #2
 800bb48:	e765      	b.n	800ba16 <_dtoa_r+0x3a6>
 800bb4a:	9c03      	ldr	r4, [sp, #12]
 800bb4c:	46b8      	mov	r8, r7
 800bb4e:	e784      	b.n	800ba5a <_dtoa_r+0x3ea>
 800bb50:	4b27      	ldr	r3, [pc, #156]	@ (800bbf0 <_dtoa_r+0x580>)
 800bb52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb5c:	4454      	add	r4, sl
 800bb5e:	2900      	cmp	r1, #0
 800bb60:	d054      	beq.n	800bc0c <_dtoa_r+0x59c>
 800bb62:	4929      	ldr	r1, [pc, #164]	@ (800bc08 <_dtoa_r+0x598>)
 800bb64:	2000      	movs	r0, #0
 800bb66:	f7f4 fe91 	bl	800088c <__aeabi_ddiv>
 800bb6a:	4633      	mov	r3, r6
 800bb6c:	462a      	mov	r2, r5
 800bb6e:	f7f4 fbab 	bl	80002c8 <__aeabi_dsub>
 800bb72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bb76:	4656      	mov	r6, sl
 800bb78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb7c:	f7f5 f80c 	bl	8000b98 <__aeabi_d2iz>
 800bb80:	4605      	mov	r5, r0
 800bb82:	f7f4 fcef 	bl	8000564 <__aeabi_i2d>
 800bb86:	4602      	mov	r2, r0
 800bb88:	460b      	mov	r3, r1
 800bb8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb8e:	f7f4 fb9b 	bl	80002c8 <__aeabi_dsub>
 800bb92:	3530      	adds	r5, #48	@ 0x30
 800bb94:	4602      	mov	r2, r0
 800bb96:	460b      	mov	r3, r1
 800bb98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb9c:	f806 5b01 	strb.w	r5, [r6], #1
 800bba0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bba4:	f7f4 ffba 	bl	8000b1c <__aeabi_dcmplt>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d172      	bne.n	800bc92 <_dtoa_r+0x622>
 800bbac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbb0:	4911      	ldr	r1, [pc, #68]	@ (800bbf8 <_dtoa_r+0x588>)
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	f7f4 fb88 	bl	80002c8 <__aeabi_dsub>
 800bbb8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bbbc:	f7f4 ffae 	bl	8000b1c <__aeabi_dcmplt>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	f040 80b4 	bne.w	800bd2e <_dtoa_r+0x6be>
 800bbc6:	42a6      	cmp	r6, r4
 800bbc8:	f43f af70 	beq.w	800baac <_dtoa_r+0x43c>
 800bbcc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bbd0:	4b0a      	ldr	r3, [pc, #40]	@ (800bbfc <_dtoa_r+0x58c>)
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f7f4 fd30 	bl	8000638 <__aeabi_dmul>
 800bbd8:	4b08      	ldr	r3, [pc, #32]	@ (800bbfc <_dtoa_r+0x58c>)
 800bbda:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bbde:	2200      	movs	r2, #0
 800bbe0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbe4:	f7f4 fd28 	bl	8000638 <__aeabi_dmul>
 800bbe8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbec:	e7c4      	b.n	800bb78 <_dtoa_r+0x508>
 800bbee:	bf00      	nop
 800bbf0:	0800ddb8 	.word	0x0800ddb8
 800bbf4:	0800dd90 	.word	0x0800dd90
 800bbf8:	3ff00000 	.word	0x3ff00000
 800bbfc:	40240000 	.word	0x40240000
 800bc00:	401c0000 	.word	0x401c0000
 800bc04:	40140000 	.word	0x40140000
 800bc08:	3fe00000 	.word	0x3fe00000
 800bc0c:	4631      	mov	r1, r6
 800bc0e:	4628      	mov	r0, r5
 800bc10:	f7f4 fd12 	bl	8000638 <__aeabi_dmul>
 800bc14:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bc18:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bc1a:	4656      	mov	r6, sl
 800bc1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc20:	f7f4 ffba 	bl	8000b98 <__aeabi_d2iz>
 800bc24:	4605      	mov	r5, r0
 800bc26:	f7f4 fc9d 	bl	8000564 <__aeabi_i2d>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc32:	f7f4 fb49 	bl	80002c8 <__aeabi_dsub>
 800bc36:	3530      	adds	r5, #48	@ 0x30
 800bc38:	f806 5b01 	strb.w	r5, [r6], #1
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	42a6      	cmp	r6, r4
 800bc42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc46:	f04f 0200 	mov.w	r2, #0
 800bc4a:	d124      	bne.n	800bc96 <_dtoa_r+0x626>
 800bc4c:	4baf      	ldr	r3, [pc, #700]	@ (800bf0c <_dtoa_r+0x89c>)
 800bc4e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bc52:	f7f4 fb3b 	bl	80002cc <__adddf3>
 800bc56:	4602      	mov	r2, r0
 800bc58:	460b      	mov	r3, r1
 800bc5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc5e:	f7f4 ff7b 	bl	8000b58 <__aeabi_dcmpgt>
 800bc62:	2800      	cmp	r0, #0
 800bc64:	d163      	bne.n	800bd2e <_dtoa_r+0x6be>
 800bc66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bc6a:	49a8      	ldr	r1, [pc, #672]	@ (800bf0c <_dtoa_r+0x89c>)
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	f7f4 fb2b 	bl	80002c8 <__aeabi_dsub>
 800bc72:	4602      	mov	r2, r0
 800bc74:	460b      	mov	r3, r1
 800bc76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc7a:	f7f4 ff4f 	bl	8000b1c <__aeabi_dcmplt>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	f43f af14 	beq.w	800baac <_dtoa_r+0x43c>
 800bc84:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bc86:	1e73      	subs	r3, r6, #1
 800bc88:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc8e:	2b30      	cmp	r3, #48	@ 0x30
 800bc90:	d0f8      	beq.n	800bc84 <_dtoa_r+0x614>
 800bc92:	4647      	mov	r7, r8
 800bc94:	e03b      	b.n	800bd0e <_dtoa_r+0x69e>
 800bc96:	4b9e      	ldr	r3, [pc, #632]	@ (800bf10 <_dtoa_r+0x8a0>)
 800bc98:	f7f4 fcce 	bl	8000638 <__aeabi_dmul>
 800bc9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bca0:	e7bc      	b.n	800bc1c <_dtoa_r+0x5ac>
 800bca2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bca6:	4656      	mov	r6, sl
 800bca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcac:	4620      	mov	r0, r4
 800bcae:	4629      	mov	r1, r5
 800bcb0:	f7f4 fdec 	bl	800088c <__aeabi_ddiv>
 800bcb4:	f7f4 ff70 	bl	8000b98 <__aeabi_d2iz>
 800bcb8:	4680      	mov	r8, r0
 800bcba:	f7f4 fc53 	bl	8000564 <__aeabi_i2d>
 800bcbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcc2:	f7f4 fcb9 	bl	8000638 <__aeabi_dmul>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	460b      	mov	r3, r1
 800bcca:	4620      	mov	r0, r4
 800bccc:	4629      	mov	r1, r5
 800bcce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bcd2:	f7f4 faf9 	bl	80002c8 <__aeabi_dsub>
 800bcd6:	f806 4b01 	strb.w	r4, [r6], #1
 800bcda:	9d03      	ldr	r5, [sp, #12]
 800bcdc:	eba6 040a 	sub.w	r4, r6, sl
 800bce0:	42a5      	cmp	r5, r4
 800bce2:	4602      	mov	r2, r0
 800bce4:	460b      	mov	r3, r1
 800bce6:	d133      	bne.n	800bd50 <_dtoa_r+0x6e0>
 800bce8:	f7f4 faf0 	bl	80002cc <__adddf3>
 800bcec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	460d      	mov	r5, r1
 800bcf4:	f7f4 ff30 	bl	8000b58 <__aeabi_dcmpgt>
 800bcf8:	b9c0      	cbnz	r0, 800bd2c <_dtoa_r+0x6bc>
 800bcfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcfe:	4620      	mov	r0, r4
 800bd00:	4629      	mov	r1, r5
 800bd02:	f7f4 ff01 	bl	8000b08 <__aeabi_dcmpeq>
 800bd06:	b110      	cbz	r0, 800bd0e <_dtoa_r+0x69e>
 800bd08:	f018 0f01 	tst.w	r8, #1
 800bd0c:	d10e      	bne.n	800bd2c <_dtoa_r+0x6bc>
 800bd0e:	9902      	ldr	r1, [sp, #8]
 800bd10:	4648      	mov	r0, r9
 800bd12:	f000 fbbd 	bl	800c490 <_Bfree>
 800bd16:	2300      	movs	r3, #0
 800bd18:	7033      	strb	r3, [r6, #0]
 800bd1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bd1c:	3701      	adds	r7, #1
 800bd1e:	601f      	str	r7, [r3, #0]
 800bd20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	f000 824b 	beq.w	800c1be <_dtoa_r+0xb4e>
 800bd28:	601e      	str	r6, [r3, #0]
 800bd2a:	e248      	b.n	800c1be <_dtoa_r+0xb4e>
 800bd2c:	46b8      	mov	r8, r7
 800bd2e:	4633      	mov	r3, r6
 800bd30:	461e      	mov	r6, r3
 800bd32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd36:	2a39      	cmp	r2, #57	@ 0x39
 800bd38:	d106      	bne.n	800bd48 <_dtoa_r+0x6d8>
 800bd3a:	459a      	cmp	sl, r3
 800bd3c:	d1f8      	bne.n	800bd30 <_dtoa_r+0x6c0>
 800bd3e:	2230      	movs	r2, #48	@ 0x30
 800bd40:	f108 0801 	add.w	r8, r8, #1
 800bd44:	f88a 2000 	strb.w	r2, [sl]
 800bd48:	781a      	ldrb	r2, [r3, #0]
 800bd4a:	3201      	adds	r2, #1
 800bd4c:	701a      	strb	r2, [r3, #0]
 800bd4e:	e7a0      	b.n	800bc92 <_dtoa_r+0x622>
 800bd50:	4b6f      	ldr	r3, [pc, #444]	@ (800bf10 <_dtoa_r+0x8a0>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	f7f4 fc70 	bl	8000638 <__aeabi_dmul>
 800bd58:	2200      	movs	r2, #0
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	4604      	mov	r4, r0
 800bd5e:	460d      	mov	r5, r1
 800bd60:	f7f4 fed2 	bl	8000b08 <__aeabi_dcmpeq>
 800bd64:	2800      	cmp	r0, #0
 800bd66:	d09f      	beq.n	800bca8 <_dtoa_r+0x638>
 800bd68:	e7d1      	b.n	800bd0e <_dtoa_r+0x69e>
 800bd6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd6c:	2a00      	cmp	r2, #0
 800bd6e:	f000 80ea 	beq.w	800bf46 <_dtoa_r+0x8d6>
 800bd72:	9a07      	ldr	r2, [sp, #28]
 800bd74:	2a01      	cmp	r2, #1
 800bd76:	f300 80cd 	bgt.w	800bf14 <_dtoa_r+0x8a4>
 800bd7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bd7c:	2a00      	cmp	r2, #0
 800bd7e:	f000 80c1 	beq.w	800bf04 <_dtoa_r+0x894>
 800bd82:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bd86:	9c08      	ldr	r4, [sp, #32]
 800bd88:	9e00      	ldr	r6, [sp, #0]
 800bd8a:	9a00      	ldr	r2, [sp, #0]
 800bd8c:	441a      	add	r2, r3
 800bd8e:	9200      	str	r2, [sp, #0]
 800bd90:	9a06      	ldr	r2, [sp, #24]
 800bd92:	2101      	movs	r1, #1
 800bd94:	441a      	add	r2, r3
 800bd96:	4648      	mov	r0, r9
 800bd98:	9206      	str	r2, [sp, #24]
 800bd9a:	f000 fc2d 	bl	800c5f8 <__i2b>
 800bd9e:	4605      	mov	r5, r0
 800bda0:	b166      	cbz	r6, 800bdbc <_dtoa_r+0x74c>
 800bda2:	9b06      	ldr	r3, [sp, #24]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	dd09      	ble.n	800bdbc <_dtoa_r+0x74c>
 800bda8:	42b3      	cmp	r3, r6
 800bdaa:	9a00      	ldr	r2, [sp, #0]
 800bdac:	bfa8      	it	ge
 800bdae:	4633      	movge	r3, r6
 800bdb0:	1ad2      	subs	r2, r2, r3
 800bdb2:	9200      	str	r2, [sp, #0]
 800bdb4:	9a06      	ldr	r2, [sp, #24]
 800bdb6:	1af6      	subs	r6, r6, r3
 800bdb8:	1ad3      	subs	r3, r2, r3
 800bdba:	9306      	str	r3, [sp, #24]
 800bdbc:	9b08      	ldr	r3, [sp, #32]
 800bdbe:	b30b      	cbz	r3, 800be04 <_dtoa_r+0x794>
 800bdc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f000 80c6 	beq.w	800bf54 <_dtoa_r+0x8e4>
 800bdc8:	2c00      	cmp	r4, #0
 800bdca:	f000 80c0 	beq.w	800bf4e <_dtoa_r+0x8de>
 800bdce:	4629      	mov	r1, r5
 800bdd0:	4622      	mov	r2, r4
 800bdd2:	4648      	mov	r0, r9
 800bdd4:	f000 fcc8 	bl	800c768 <__pow5mult>
 800bdd8:	9a02      	ldr	r2, [sp, #8]
 800bdda:	4601      	mov	r1, r0
 800bddc:	4605      	mov	r5, r0
 800bdde:	4648      	mov	r0, r9
 800bde0:	f000 fc20 	bl	800c624 <__multiply>
 800bde4:	9902      	ldr	r1, [sp, #8]
 800bde6:	4680      	mov	r8, r0
 800bde8:	4648      	mov	r0, r9
 800bdea:	f000 fb51 	bl	800c490 <_Bfree>
 800bdee:	9b08      	ldr	r3, [sp, #32]
 800bdf0:	1b1b      	subs	r3, r3, r4
 800bdf2:	9308      	str	r3, [sp, #32]
 800bdf4:	f000 80b1 	beq.w	800bf5a <_dtoa_r+0x8ea>
 800bdf8:	9a08      	ldr	r2, [sp, #32]
 800bdfa:	4641      	mov	r1, r8
 800bdfc:	4648      	mov	r0, r9
 800bdfe:	f000 fcb3 	bl	800c768 <__pow5mult>
 800be02:	9002      	str	r0, [sp, #8]
 800be04:	2101      	movs	r1, #1
 800be06:	4648      	mov	r0, r9
 800be08:	f000 fbf6 	bl	800c5f8 <__i2b>
 800be0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be0e:	4604      	mov	r4, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	f000 81d8 	beq.w	800c1c6 <_dtoa_r+0xb56>
 800be16:	461a      	mov	r2, r3
 800be18:	4601      	mov	r1, r0
 800be1a:	4648      	mov	r0, r9
 800be1c:	f000 fca4 	bl	800c768 <__pow5mult>
 800be20:	9b07      	ldr	r3, [sp, #28]
 800be22:	2b01      	cmp	r3, #1
 800be24:	4604      	mov	r4, r0
 800be26:	f300 809f 	bgt.w	800bf68 <_dtoa_r+0x8f8>
 800be2a:	9b04      	ldr	r3, [sp, #16]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f040 8097 	bne.w	800bf60 <_dtoa_r+0x8f0>
 800be32:	9b05      	ldr	r3, [sp, #20]
 800be34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f040 8093 	bne.w	800bf64 <_dtoa_r+0x8f4>
 800be3e:	9b05      	ldr	r3, [sp, #20]
 800be40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be44:	0d1b      	lsrs	r3, r3, #20
 800be46:	051b      	lsls	r3, r3, #20
 800be48:	b133      	cbz	r3, 800be58 <_dtoa_r+0x7e8>
 800be4a:	9b00      	ldr	r3, [sp, #0]
 800be4c:	3301      	adds	r3, #1
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	9b06      	ldr	r3, [sp, #24]
 800be52:	3301      	adds	r3, #1
 800be54:	9306      	str	r3, [sp, #24]
 800be56:	2301      	movs	r3, #1
 800be58:	9308      	str	r3, [sp, #32]
 800be5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f000 81b8 	beq.w	800c1d2 <_dtoa_r+0xb62>
 800be62:	6923      	ldr	r3, [r4, #16]
 800be64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be68:	6918      	ldr	r0, [r3, #16]
 800be6a:	f000 fb79 	bl	800c560 <__hi0bits>
 800be6e:	f1c0 0020 	rsb	r0, r0, #32
 800be72:	9b06      	ldr	r3, [sp, #24]
 800be74:	4418      	add	r0, r3
 800be76:	f010 001f 	ands.w	r0, r0, #31
 800be7a:	f000 8082 	beq.w	800bf82 <_dtoa_r+0x912>
 800be7e:	f1c0 0320 	rsb	r3, r0, #32
 800be82:	2b04      	cmp	r3, #4
 800be84:	dd73      	ble.n	800bf6e <_dtoa_r+0x8fe>
 800be86:	9b00      	ldr	r3, [sp, #0]
 800be88:	f1c0 001c 	rsb	r0, r0, #28
 800be8c:	4403      	add	r3, r0
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	9b06      	ldr	r3, [sp, #24]
 800be92:	4403      	add	r3, r0
 800be94:	4406      	add	r6, r0
 800be96:	9306      	str	r3, [sp, #24]
 800be98:	9b00      	ldr	r3, [sp, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	dd05      	ble.n	800beaa <_dtoa_r+0x83a>
 800be9e:	9902      	ldr	r1, [sp, #8]
 800bea0:	461a      	mov	r2, r3
 800bea2:	4648      	mov	r0, r9
 800bea4:	f000 fcba 	bl	800c81c <__lshift>
 800bea8:	9002      	str	r0, [sp, #8]
 800beaa:	9b06      	ldr	r3, [sp, #24]
 800beac:	2b00      	cmp	r3, #0
 800beae:	dd05      	ble.n	800bebc <_dtoa_r+0x84c>
 800beb0:	4621      	mov	r1, r4
 800beb2:	461a      	mov	r2, r3
 800beb4:	4648      	mov	r0, r9
 800beb6:	f000 fcb1 	bl	800c81c <__lshift>
 800beba:	4604      	mov	r4, r0
 800bebc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d061      	beq.n	800bf86 <_dtoa_r+0x916>
 800bec2:	9802      	ldr	r0, [sp, #8]
 800bec4:	4621      	mov	r1, r4
 800bec6:	f000 fd15 	bl	800c8f4 <__mcmp>
 800beca:	2800      	cmp	r0, #0
 800becc:	da5b      	bge.n	800bf86 <_dtoa_r+0x916>
 800bece:	2300      	movs	r3, #0
 800bed0:	9902      	ldr	r1, [sp, #8]
 800bed2:	220a      	movs	r2, #10
 800bed4:	4648      	mov	r0, r9
 800bed6:	f000 fafd 	bl	800c4d4 <__multadd>
 800beda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bedc:	9002      	str	r0, [sp, #8]
 800bede:	f107 38ff 	add.w	r8, r7, #4294967295
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	f000 8177 	beq.w	800c1d6 <_dtoa_r+0xb66>
 800bee8:	4629      	mov	r1, r5
 800beea:	2300      	movs	r3, #0
 800beec:	220a      	movs	r2, #10
 800beee:	4648      	mov	r0, r9
 800bef0:	f000 faf0 	bl	800c4d4 <__multadd>
 800bef4:	f1bb 0f00 	cmp.w	fp, #0
 800bef8:	4605      	mov	r5, r0
 800befa:	dc6f      	bgt.n	800bfdc <_dtoa_r+0x96c>
 800befc:	9b07      	ldr	r3, [sp, #28]
 800befe:	2b02      	cmp	r3, #2
 800bf00:	dc49      	bgt.n	800bf96 <_dtoa_r+0x926>
 800bf02:	e06b      	b.n	800bfdc <_dtoa_r+0x96c>
 800bf04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bf06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bf0a:	e73c      	b.n	800bd86 <_dtoa_r+0x716>
 800bf0c:	3fe00000 	.word	0x3fe00000
 800bf10:	40240000 	.word	0x40240000
 800bf14:	9b03      	ldr	r3, [sp, #12]
 800bf16:	1e5c      	subs	r4, r3, #1
 800bf18:	9b08      	ldr	r3, [sp, #32]
 800bf1a:	42a3      	cmp	r3, r4
 800bf1c:	db09      	blt.n	800bf32 <_dtoa_r+0x8c2>
 800bf1e:	1b1c      	subs	r4, r3, r4
 800bf20:	9b03      	ldr	r3, [sp, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	f6bf af30 	bge.w	800bd88 <_dtoa_r+0x718>
 800bf28:	9b00      	ldr	r3, [sp, #0]
 800bf2a:	9a03      	ldr	r2, [sp, #12]
 800bf2c:	1a9e      	subs	r6, r3, r2
 800bf2e:	2300      	movs	r3, #0
 800bf30:	e72b      	b.n	800bd8a <_dtoa_r+0x71a>
 800bf32:	9b08      	ldr	r3, [sp, #32]
 800bf34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf36:	9408      	str	r4, [sp, #32]
 800bf38:	1ae3      	subs	r3, r4, r3
 800bf3a:	441a      	add	r2, r3
 800bf3c:	9e00      	ldr	r6, [sp, #0]
 800bf3e:	9b03      	ldr	r3, [sp, #12]
 800bf40:	920d      	str	r2, [sp, #52]	@ 0x34
 800bf42:	2400      	movs	r4, #0
 800bf44:	e721      	b.n	800bd8a <_dtoa_r+0x71a>
 800bf46:	9c08      	ldr	r4, [sp, #32]
 800bf48:	9e00      	ldr	r6, [sp, #0]
 800bf4a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800bf4c:	e728      	b.n	800bda0 <_dtoa_r+0x730>
 800bf4e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bf52:	e751      	b.n	800bdf8 <_dtoa_r+0x788>
 800bf54:	9a08      	ldr	r2, [sp, #32]
 800bf56:	9902      	ldr	r1, [sp, #8]
 800bf58:	e750      	b.n	800bdfc <_dtoa_r+0x78c>
 800bf5a:	f8cd 8008 	str.w	r8, [sp, #8]
 800bf5e:	e751      	b.n	800be04 <_dtoa_r+0x794>
 800bf60:	2300      	movs	r3, #0
 800bf62:	e779      	b.n	800be58 <_dtoa_r+0x7e8>
 800bf64:	9b04      	ldr	r3, [sp, #16]
 800bf66:	e777      	b.n	800be58 <_dtoa_r+0x7e8>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	9308      	str	r3, [sp, #32]
 800bf6c:	e779      	b.n	800be62 <_dtoa_r+0x7f2>
 800bf6e:	d093      	beq.n	800be98 <_dtoa_r+0x828>
 800bf70:	9a00      	ldr	r2, [sp, #0]
 800bf72:	331c      	adds	r3, #28
 800bf74:	441a      	add	r2, r3
 800bf76:	9200      	str	r2, [sp, #0]
 800bf78:	9a06      	ldr	r2, [sp, #24]
 800bf7a:	441a      	add	r2, r3
 800bf7c:	441e      	add	r6, r3
 800bf7e:	9206      	str	r2, [sp, #24]
 800bf80:	e78a      	b.n	800be98 <_dtoa_r+0x828>
 800bf82:	4603      	mov	r3, r0
 800bf84:	e7f4      	b.n	800bf70 <_dtoa_r+0x900>
 800bf86:	9b03      	ldr	r3, [sp, #12]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	46b8      	mov	r8, r7
 800bf8c:	dc20      	bgt.n	800bfd0 <_dtoa_r+0x960>
 800bf8e:	469b      	mov	fp, r3
 800bf90:	9b07      	ldr	r3, [sp, #28]
 800bf92:	2b02      	cmp	r3, #2
 800bf94:	dd1e      	ble.n	800bfd4 <_dtoa_r+0x964>
 800bf96:	f1bb 0f00 	cmp.w	fp, #0
 800bf9a:	f47f adb1 	bne.w	800bb00 <_dtoa_r+0x490>
 800bf9e:	4621      	mov	r1, r4
 800bfa0:	465b      	mov	r3, fp
 800bfa2:	2205      	movs	r2, #5
 800bfa4:	4648      	mov	r0, r9
 800bfa6:	f000 fa95 	bl	800c4d4 <__multadd>
 800bfaa:	4601      	mov	r1, r0
 800bfac:	4604      	mov	r4, r0
 800bfae:	9802      	ldr	r0, [sp, #8]
 800bfb0:	f000 fca0 	bl	800c8f4 <__mcmp>
 800bfb4:	2800      	cmp	r0, #0
 800bfb6:	f77f ada3 	ble.w	800bb00 <_dtoa_r+0x490>
 800bfba:	4656      	mov	r6, sl
 800bfbc:	2331      	movs	r3, #49	@ 0x31
 800bfbe:	f806 3b01 	strb.w	r3, [r6], #1
 800bfc2:	f108 0801 	add.w	r8, r8, #1
 800bfc6:	e59f      	b.n	800bb08 <_dtoa_r+0x498>
 800bfc8:	9c03      	ldr	r4, [sp, #12]
 800bfca:	46b8      	mov	r8, r7
 800bfcc:	4625      	mov	r5, r4
 800bfce:	e7f4      	b.n	800bfba <_dtoa_r+0x94a>
 800bfd0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bfd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	f000 8101 	beq.w	800c1de <_dtoa_r+0xb6e>
 800bfdc:	2e00      	cmp	r6, #0
 800bfde:	dd05      	ble.n	800bfec <_dtoa_r+0x97c>
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	4632      	mov	r2, r6
 800bfe4:	4648      	mov	r0, r9
 800bfe6:	f000 fc19 	bl	800c81c <__lshift>
 800bfea:	4605      	mov	r5, r0
 800bfec:	9b08      	ldr	r3, [sp, #32]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d05c      	beq.n	800c0ac <_dtoa_r+0xa3c>
 800bff2:	6869      	ldr	r1, [r5, #4]
 800bff4:	4648      	mov	r0, r9
 800bff6:	f000 fa0b 	bl	800c410 <_Balloc>
 800bffa:	4606      	mov	r6, r0
 800bffc:	b928      	cbnz	r0, 800c00a <_dtoa_r+0x99a>
 800bffe:	4b82      	ldr	r3, [pc, #520]	@ (800c208 <_dtoa_r+0xb98>)
 800c000:	4602      	mov	r2, r0
 800c002:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c006:	f7ff bb4a 	b.w	800b69e <_dtoa_r+0x2e>
 800c00a:	692a      	ldr	r2, [r5, #16]
 800c00c:	3202      	adds	r2, #2
 800c00e:	0092      	lsls	r2, r2, #2
 800c010:	f105 010c 	add.w	r1, r5, #12
 800c014:	300c      	adds	r0, #12
 800c016:	f7ff fa92 	bl	800b53e <memcpy>
 800c01a:	2201      	movs	r2, #1
 800c01c:	4631      	mov	r1, r6
 800c01e:	4648      	mov	r0, r9
 800c020:	f000 fbfc 	bl	800c81c <__lshift>
 800c024:	f10a 0301 	add.w	r3, sl, #1
 800c028:	9300      	str	r3, [sp, #0]
 800c02a:	eb0a 030b 	add.w	r3, sl, fp
 800c02e:	9308      	str	r3, [sp, #32]
 800c030:	9b04      	ldr	r3, [sp, #16]
 800c032:	f003 0301 	and.w	r3, r3, #1
 800c036:	462f      	mov	r7, r5
 800c038:	9306      	str	r3, [sp, #24]
 800c03a:	4605      	mov	r5, r0
 800c03c:	9b00      	ldr	r3, [sp, #0]
 800c03e:	9802      	ldr	r0, [sp, #8]
 800c040:	4621      	mov	r1, r4
 800c042:	f103 3bff 	add.w	fp, r3, #4294967295
 800c046:	f7ff fa88 	bl	800b55a <quorem>
 800c04a:	4603      	mov	r3, r0
 800c04c:	3330      	adds	r3, #48	@ 0x30
 800c04e:	9003      	str	r0, [sp, #12]
 800c050:	4639      	mov	r1, r7
 800c052:	9802      	ldr	r0, [sp, #8]
 800c054:	9309      	str	r3, [sp, #36]	@ 0x24
 800c056:	f000 fc4d 	bl	800c8f4 <__mcmp>
 800c05a:	462a      	mov	r2, r5
 800c05c:	9004      	str	r0, [sp, #16]
 800c05e:	4621      	mov	r1, r4
 800c060:	4648      	mov	r0, r9
 800c062:	f000 fc63 	bl	800c92c <__mdiff>
 800c066:	68c2      	ldr	r2, [r0, #12]
 800c068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c06a:	4606      	mov	r6, r0
 800c06c:	bb02      	cbnz	r2, 800c0b0 <_dtoa_r+0xa40>
 800c06e:	4601      	mov	r1, r0
 800c070:	9802      	ldr	r0, [sp, #8]
 800c072:	f000 fc3f 	bl	800c8f4 <__mcmp>
 800c076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c078:	4602      	mov	r2, r0
 800c07a:	4631      	mov	r1, r6
 800c07c:	4648      	mov	r0, r9
 800c07e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c080:	9309      	str	r3, [sp, #36]	@ 0x24
 800c082:	f000 fa05 	bl	800c490 <_Bfree>
 800c086:	9b07      	ldr	r3, [sp, #28]
 800c088:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c08a:	9e00      	ldr	r6, [sp, #0]
 800c08c:	ea42 0103 	orr.w	r1, r2, r3
 800c090:	9b06      	ldr	r3, [sp, #24]
 800c092:	4319      	orrs	r1, r3
 800c094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c096:	d10d      	bne.n	800c0b4 <_dtoa_r+0xa44>
 800c098:	2b39      	cmp	r3, #57	@ 0x39
 800c09a:	d027      	beq.n	800c0ec <_dtoa_r+0xa7c>
 800c09c:	9a04      	ldr	r2, [sp, #16]
 800c09e:	2a00      	cmp	r2, #0
 800c0a0:	dd01      	ble.n	800c0a6 <_dtoa_r+0xa36>
 800c0a2:	9b03      	ldr	r3, [sp, #12]
 800c0a4:	3331      	adds	r3, #49	@ 0x31
 800c0a6:	f88b 3000 	strb.w	r3, [fp]
 800c0aa:	e52e      	b.n	800bb0a <_dtoa_r+0x49a>
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	e7b9      	b.n	800c024 <_dtoa_r+0x9b4>
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	e7e2      	b.n	800c07a <_dtoa_r+0xa0a>
 800c0b4:	9904      	ldr	r1, [sp, #16]
 800c0b6:	2900      	cmp	r1, #0
 800c0b8:	db04      	blt.n	800c0c4 <_dtoa_r+0xa54>
 800c0ba:	9807      	ldr	r0, [sp, #28]
 800c0bc:	4301      	orrs	r1, r0
 800c0be:	9806      	ldr	r0, [sp, #24]
 800c0c0:	4301      	orrs	r1, r0
 800c0c2:	d120      	bne.n	800c106 <_dtoa_r+0xa96>
 800c0c4:	2a00      	cmp	r2, #0
 800c0c6:	ddee      	ble.n	800c0a6 <_dtoa_r+0xa36>
 800c0c8:	9902      	ldr	r1, [sp, #8]
 800c0ca:	9300      	str	r3, [sp, #0]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	4648      	mov	r0, r9
 800c0d0:	f000 fba4 	bl	800c81c <__lshift>
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	9002      	str	r0, [sp, #8]
 800c0d8:	f000 fc0c 	bl	800c8f4 <__mcmp>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	9b00      	ldr	r3, [sp, #0]
 800c0e0:	dc02      	bgt.n	800c0e8 <_dtoa_r+0xa78>
 800c0e2:	d1e0      	bne.n	800c0a6 <_dtoa_r+0xa36>
 800c0e4:	07da      	lsls	r2, r3, #31
 800c0e6:	d5de      	bpl.n	800c0a6 <_dtoa_r+0xa36>
 800c0e8:	2b39      	cmp	r3, #57	@ 0x39
 800c0ea:	d1da      	bne.n	800c0a2 <_dtoa_r+0xa32>
 800c0ec:	2339      	movs	r3, #57	@ 0x39
 800c0ee:	f88b 3000 	strb.w	r3, [fp]
 800c0f2:	4633      	mov	r3, r6
 800c0f4:	461e      	mov	r6, r3
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c0fc:	2a39      	cmp	r2, #57	@ 0x39
 800c0fe:	d04e      	beq.n	800c19e <_dtoa_r+0xb2e>
 800c100:	3201      	adds	r2, #1
 800c102:	701a      	strb	r2, [r3, #0]
 800c104:	e501      	b.n	800bb0a <_dtoa_r+0x49a>
 800c106:	2a00      	cmp	r2, #0
 800c108:	dd03      	ble.n	800c112 <_dtoa_r+0xaa2>
 800c10a:	2b39      	cmp	r3, #57	@ 0x39
 800c10c:	d0ee      	beq.n	800c0ec <_dtoa_r+0xa7c>
 800c10e:	3301      	adds	r3, #1
 800c110:	e7c9      	b.n	800c0a6 <_dtoa_r+0xa36>
 800c112:	9a00      	ldr	r2, [sp, #0]
 800c114:	9908      	ldr	r1, [sp, #32]
 800c116:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c11a:	428a      	cmp	r2, r1
 800c11c:	d028      	beq.n	800c170 <_dtoa_r+0xb00>
 800c11e:	9902      	ldr	r1, [sp, #8]
 800c120:	2300      	movs	r3, #0
 800c122:	220a      	movs	r2, #10
 800c124:	4648      	mov	r0, r9
 800c126:	f000 f9d5 	bl	800c4d4 <__multadd>
 800c12a:	42af      	cmp	r7, r5
 800c12c:	9002      	str	r0, [sp, #8]
 800c12e:	f04f 0300 	mov.w	r3, #0
 800c132:	f04f 020a 	mov.w	r2, #10
 800c136:	4639      	mov	r1, r7
 800c138:	4648      	mov	r0, r9
 800c13a:	d107      	bne.n	800c14c <_dtoa_r+0xadc>
 800c13c:	f000 f9ca 	bl	800c4d4 <__multadd>
 800c140:	4607      	mov	r7, r0
 800c142:	4605      	mov	r5, r0
 800c144:	9b00      	ldr	r3, [sp, #0]
 800c146:	3301      	adds	r3, #1
 800c148:	9300      	str	r3, [sp, #0]
 800c14a:	e777      	b.n	800c03c <_dtoa_r+0x9cc>
 800c14c:	f000 f9c2 	bl	800c4d4 <__multadd>
 800c150:	4629      	mov	r1, r5
 800c152:	4607      	mov	r7, r0
 800c154:	2300      	movs	r3, #0
 800c156:	220a      	movs	r2, #10
 800c158:	4648      	mov	r0, r9
 800c15a:	f000 f9bb 	bl	800c4d4 <__multadd>
 800c15e:	4605      	mov	r5, r0
 800c160:	e7f0      	b.n	800c144 <_dtoa_r+0xad4>
 800c162:	f1bb 0f00 	cmp.w	fp, #0
 800c166:	bfcc      	ite	gt
 800c168:	465e      	movgt	r6, fp
 800c16a:	2601      	movle	r6, #1
 800c16c:	4456      	add	r6, sl
 800c16e:	2700      	movs	r7, #0
 800c170:	9902      	ldr	r1, [sp, #8]
 800c172:	9300      	str	r3, [sp, #0]
 800c174:	2201      	movs	r2, #1
 800c176:	4648      	mov	r0, r9
 800c178:	f000 fb50 	bl	800c81c <__lshift>
 800c17c:	4621      	mov	r1, r4
 800c17e:	9002      	str	r0, [sp, #8]
 800c180:	f000 fbb8 	bl	800c8f4 <__mcmp>
 800c184:	2800      	cmp	r0, #0
 800c186:	dcb4      	bgt.n	800c0f2 <_dtoa_r+0xa82>
 800c188:	d102      	bne.n	800c190 <_dtoa_r+0xb20>
 800c18a:	9b00      	ldr	r3, [sp, #0]
 800c18c:	07db      	lsls	r3, r3, #31
 800c18e:	d4b0      	bmi.n	800c0f2 <_dtoa_r+0xa82>
 800c190:	4633      	mov	r3, r6
 800c192:	461e      	mov	r6, r3
 800c194:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c198:	2a30      	cmp	r2, #48	@ 0x30
 800c19a:	d0fa      	beq.n	800c192 <_dtoa_r+0xb22>
 800c19c:	e4b5      	b.n	800bb0a <_dtoa_r+0x49a>
 800c19e:	459a      	cmp	sl, r3
 800c1a0:	d1a8      	bne.n	800c0f4 <_dtoa_r+0xa84>
 800c1a2:	2331      	movs	r3, #49	@ 0x31
 800c1a4:	f108 0801 	add.w	r8, r8, #1
 800c1a8:	f88a 3000 	strb.w	r3, [sl]
 800c1ac:	e4ad      	b.n	800bb0a <_dtoa_r+0x49a>
 800c1ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c1b0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c20c <_dtoa_r+0xb9c>
 800c1b4:	b11b      	cbz	r3, 800c1be <_dtoa_r+0xb4e>
 800c1b6:	f10a 0308 	add.w	r3, sl, #8
 800c1ba:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c1bc:	6013      	str	r3, [r2, #0]
 800c1be:	4650      	mov	r0, sl
 800c1c0:	b017      	add	sp, #92	@ 0x5c
 800c1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c6:	9b07      	ldr	r3, [sp, #28]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	f77f ae2e 	ble.w	800be2a <_dtoa_r+0x7ba>
 800c1ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1d0:	9308      	str	r3, [sp, #32]
 800c1d2:	2001      	movs	r0, #1
 800c1d4:	e64d      	b.n	800be72 <_dtoa_r+0x802>
 800c1d6:	f1bb 0f00 	cmp.w	fp, #0
 800c1da:	f77f aed9 	ble.w	800bf90 <_dtoa_r+0x920>
 800c1de:	4656      	mov	r6, sl
 800c1e0:	9802      	ldr	r0, [sp, #8]
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	f7ff f9b9 	bl	800b55a <quorem>
 800c1e8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c1ec:	f806 3b01 	strb.w	r3, [r6], #1
 800c1f0:	eba6 020a 	sub.w	r2, r6, sl
 800c1f4:	4593      	cmp	fp, r2
 800c1f6:	ddb4      	ble.n	800c162 <_dtoa_r+0xaf2>
 800c1f8:	9902      	ldr	r1, [sp, #8]
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	220a      	movs	r2, #10
 800c1fe:	4648      	mov	r0, r9
 800c200:	f000 f968 	bl	800c4d4 <__multadd>
 800c204:	9002      	str	r0, [sp, #8]
 800c206:	e7eb      	b.n	800c1e0 <_dtoa_r+0xb70>
 800c208:	0800dcbc 	.word	0x0800dcbc
 800c20c:	0800dc40 	.word	0x0800dc40

0800c210 <_free_r>:
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	4605      	mov	r5, r0
 800c214:	2900      	cmp	r1, #0
 800c216:	d041      	beq.n	800c29c <_free_r+0x8c>
 800c218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c21c:	1f0c      	subs	r4, r1, #4
 800c21e:	2b00      	cmp	r3, #0
 800c220:	bfb8      	it	lt
 800c222:	18e4      	addlt	r4, r4, r3
 800c224:	f000 f8e8 	bl	800c3f8 <__malloc_lock>
 800c228:	4a1d      	ldr	r2, [pc, #116]	@ (800c2a0 <_free_r+0x90>)
 800c22a:	6813      	ldr	r3, [r2, #0]
 800c22c:	b933      	cbnz	r3, 800c23c <_free_r+0x2c>
 800c22e:	6063      	str	r3, [r4, #4]
 800c230:	6014      	str	r4, [r2, #0]
 800c232:	4628      	mov	r0, r5
 800c234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c238:	f000 b8e4 	b.w	800c404 <__malloc_unlock>
 800c23c:	42a3      	cmp	r3, r4
 800c23e:	d908      	bls.n	800c252 <_free_r+0x42>
 800c240:	6820      	ldr	r0, [r4, #0]
 800c242:	1821      	adds	r1, r4, r0
 800c244:	428b      	cmp	r3, r1
 800c246:	bf01      	itttt	eq
 800c248:	6819      	ldreq	r1, [r3, #0]
 800c24a:	685b      	ldreq	r3, [r3, #4]
 800c24c:	1809      	addeq	r1, r1, r0
 800c24e:	6021      	streq	r1, [r4, #0]
 800c250:	e7ed      	b.n	800c22e <_free_r+0x1e>
 800c252:	461a      	mov	r2, r3
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	b10b      	cbz	r3, 800c25c <_free_r+0x4c>
 800c258:	42a3      	cmp	r3, r4
 800c25a:	d9fa      	bls.n	800c252 <_free_r+0x42>
 800c25c:	6811      	ldr	r1, [r2, #0]
 800c25e:	1850      	adds	r0, r2, r1
 800c260:	42a0      	cmp	r0, r4
 800c262:	d10b      	bne.n	800c27c <_free_r+0x6c>
 800c264:	6820      	ldr	r0, [r4, #0]
 800c266:	4401      	add	r1, r0
 800c268:	1850      	adds	r0, r2, r1
 800c26a:	4283      	cmp	r3, r0
 800c26c:	6011      	str	r1, [r2, #0]
 800c26e:	d1e0      	bne.n	800c232 <_free_r+0x22>
 800c270:	6818      	ldr	r0, [r3, #0]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	6053      	str	r3, [r2, #4]
 800c276:	4408      	add	r0, r1
 800c278:	6010      	str	r0, [r2, #0]
 800c27a:	e7da      	b.n	800c232 <_free_r+0x22>
 800c27c:	d902      	bls.n	800c284 <_free_r+0x74>
 800c27e:	230c      	movs	r3, #12
 800c280:	602b      	str	r3, [r5, #0]
 800c282:	e7d6      	b.n	800c232 <_free_r+0x22>
 800c284:	6820      	ldr	r0, [r4, #0]
 800c286:	1821      	adds	r1, r4, r0
 800c288:	428b      	cmp	r3, r1
 800c28a:	bf04      	itt	eq
 800c28c:	6819      	ldreq	r1, [r3, #0]
 800c28e:	685b      	ldreq	r3, [r3, #4]
 800c290:	6063      	str	r3, [r4, #4]
 800c292:	bf04      	itt	eq
 800c294:	1809      	addeq	r1, r1, r0
 800c296:	6021      	streq	r1, [r4, #0]
 800c298:	6054      	str	r4, [r2, #4]
 800c29a:	e7ca      	b.n	800c232 <_free_r+0x22>
 800c29c:	bd38      	pop	{r3, r4, r5, pc}
 800c29e:	bf00      	nop
 800c2a0:	20000ebc 	.word	0x20000ebc

0800c2a4 <malloc>:
 800c2a4:	4b02      	ldr	r3, [pc, #8]	@ (800c2b0 <malloc+0xc>)
 800c2a6:	4601      	mov	r1, r0
 800c2a8:	6818      	ldr	r0, [r3, #0]
 800c2aa:	f000 b825 	b.w	800c2f8 <_malloc_r>
 800c2ae:	bf00      	nop
 800c2b0:	20000078 	.word	0x20000078

0800c2b4 <sbrk_aligned>:
 800c2b4:	b570      	push	{r4, r5, r6, lr}
 800c2b6:	4e0f      	ldr	r6, [pc, #60]	@ (800c2f4 <sbrk_aligned+0x40>)
 800c2b8:	460c      	mov	r4, r1
 800c2ba:	6831      	ldr	r1, [r6, #0]
 800c2bc:	4605      	mov	r5, r0
 800c2be:	b911      	cbnz	r1, 800c2c6 <sbrk_aligned+0x12>
 800c2c0:	f000 fe3e 	bl	800cf40 <_sbrk_r>
 800c2c4:	6030      	str	r0, [r6, #0]
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	f000 fe39 	bl	800cf40 <_sbrk_r>
 800c2ce:	1c43      	adds	r3, r0, #1
 800c2d0:	d103      	bne.n	800c2da <sbrk_aligned+0x26>
 800c2d2:	f04f 34ff 	mov.w	r4, #4294967295
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	bd70      	pop	{r4, r5, r6, pc}
 800c2da:	1cc4      	adds	r4, r0, #3
 800c2dc:	f024 0403 	bic.w	r4, r4, #3
 800c2e0:	42a0      	cmp	r0, r4
 800c2e2:	d0f8      	beq.n	800c2d6 <sbrk_aligned+0x22>
 800c2e4:	1a21      	subs	r1, r4, r0
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	f000 fe2a 	bl	800cf40 <_sbrk_r>
 800c2ec:	3001      	adds	r0, #1
 800c2ee:	d1f2      	bne.n	800c2d6 <sbrk_aligned+0x22>
 800c2f0:	e7ef      	b.n	800c2d2 <sbrk_aligned+0x1e>
 800c2f2:	bf00      	nop
 800c2f4:	20000eb8 	.word	0x20000eb8

0800c2f8 <_malloc_r>:
 800c2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2fc:	1ccd      	adds	r5, r1, #3
 800c2fe:	f025 0503 	bic.w	r5, r5, #3
 800c302:	3508      	adds	r5, #8
 800c304:	2d0c      	cmp	r5, #12
 800c306:	bf38      	it	cc
 800c308:	250c      	movcc	r5, #12
 800c30a:	2d00      	cmp	r5, #0
 800c30c:	4606      	mov	r6, r0
 800c30e:	db01      	blt.n	800c314 <_malloc_r+0x1c>
 800c310:	42a9      	cmp	r1, r5
 800c312:	d904      	bls.n	800c31e <_malloc_r+0x26>
 800c314:	230c      	movs	r3, #12
 800c316:	6033      	str	r3, [r6, #0]
 800c318:	2000      	movs	r0, #0
 800c31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c31e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c3f4 <_malloc_r+0xfc>
 800c322:	f000 f869 	bl	800c3f8 <__malloc_lock>
 800c326:	f8d8 3000 	ldr.w	r3, [r8]
 800c32a:	461c      	mov	r4, r3
 800c32c:	bb44      	cbnz	r4, 800c380 <_malloc_r+0x88>
 800c32e:	4629      	mov	r1, r5
 800c330:	4630      	mov	r0, r6
 800c332:	f7ff ffbf 	bl	800c2b4 <sbrk_aligned>
 800c336:	1c43      	adds	r3, r0, #1
 800c338:	4604      	mov	r4, r0
 800c33a:	d158      	bne.n	800c3ee <_malloc_r+0xf6>
 800c33c:	f8d8 4000 	ldr.w	r4, [r8]
 800c340:	4627      	mov	r7, r4
 800c342:	2f00      	cmp	r7, #0
 800c344:	d143      	bne.n	800c3ce <_malloc_r+0xd6>
 800c346:	2c00      	cmp	r4, #0
 800c348:	d04b      	beq.n	800c3e2 <_malloc_r+0xea>
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	4639      	mov	r1, r7
 800c34e:	4630      	mov	r0, r6
 800c350:	eb04 0903 	add.w	r9, r4, r3
 800c354:	f000 fdf4 	bl	800cf40 <_sbrk_r>
 800c358:	4581      	cmp	r9, r0
 800c35a:	d142      	bne.n	800c3e2 <_malloc_r+0xea>
 800c35c:	6821      	ldr	r1, [r4, #0]
 800c35e:	1a6d      	subs	r5, r5, r1
 800c360:	4629      	mov	r1, r5
 800c362:	4630      	mov	r0, r6
 800c364:	f7ff ffa6 	bl	800c2b4 <sbrk_aligned>
 800c368:	3001      	adds	r0, #1
 800c36a:	d03a      	beq.n	800c3e2 <_malloc_r+0xea>
 800c36c:	6823      	ldr	r3, [r4, #0]
 800c36e:	442b      	add	r3, r5
 800c370:	6023      	str	r3, [r4, #0]
 800c372:	f8d8 3000 	ldr.w	r3, [r8]
 800c376:	685a      	ldr	r2, [r3, #4]
 800c378:	bb62      	cbnz	r2, 800c3d4 <_malloc_r+0xdc>
 800c37a:	f8c8 7000 	str.w	r7, [r8]
 800c37e:	e00f      	b.n	800c3a0 <_malloc_r+0xa8>
 800c380:	6822      	ldr	r2, [r4, #0]
 800c382:	1b52      	subs	r2, r2, r5
 800c384:	d420      	bmi.n	800c3c8 <_malloc_r+0xd0>
 800c386:	2a0b      	cmp	r2, #11
 800c388:	d917      	bls.n	800c3ba <_malloc_r+0xc2>
 800c38a:	1961      	adds	r1, r4, r5
 800c38c:	42a3      	cmp	r3, r4
 800c38e:	6025      	str	r5, [r4, #0]
 800c390:	bf18      	it	ne
 800c392:	6059      	strne	r1, [r3, #4]
 800c394:	6863      	ldr	r3, [r4, #4]
 800c396:	bf08      	it	eq
 800c398:	f8c8 1000 	streq.w	r1, [r8]
 800c39c:	5162      	str	r2, [r4, r5]
 800c39e:	604b      	str	r3, [r1, #4]
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f000 f82f 	bl	800c404 <__malloc_unlock>
 800c3a6:	f104 000b 	add.w	r0, r4, #11
 800c3aa:	1d23      	adds	r3, r4, #4
 800c3ac:	f020 0007 	bic.w	r0, r0, #7
 800c3b0:	1ac2      	subs	r2, r0, r3
 800c3b2:	bf1c      	itt	ne
 800c3b4:	1a1b      	subne	r3, r3, r0
 800c3b6:	50a3      	strne	r3, [r4, r2]
 800c3b8:	e7af      	b.n	800c31a <_malloc_r+0x22>
 800c3ba:	6862      	ldr	r2, [r4, #4]
 800c3bc:	42a3      	cmp	r3, r4
 800c3be:	bf0c      	ite	eq
 800c3c0:	f8c8 2000 	streq.w	r2, [r8]
 800c3c4:	605a      	strne	r2, [r3, #4]
 800c3c6:	e7eb      	b.n	800c3a0 <_malloc_r+0xa8>
 800c3c8:	4623      	mov	r3, r4
 800c3ca:	6864      	ldr	r4, [r4, #4]
 800c3cc:	e7ae      	b.n	800c32c <_malloc_r+0x34>
 800c3ce:	463c      	mov	r4, r7
 800c3d0:	687f      	ldr	r7, [r7, #4]
 800c3d2:	e7b6      	b.n	800c342 <_malloc_r+0x4a>
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	42a3      	cmp	r3, r4
 800c3da:	d1fb      	bne.n	800c3d4 <_malloc_r+0xdc>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	6053      	str	r3, [r2, #4]
 800c3e0:	e7de      	b.n	800c3a0 <_malloc_r+0xa8>
 800c3e2:	230c      	movs	r3, #12
 800c3e4:	6033      	str	r3, [r6, #0]
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	f000 f80c 	bl	800c404 <__malloc_unlock>
 800c3ec:	e794      	b.n	800c318 <_malloc_r+0x20>
 800c3ee:	6005      	str	r5, [r0, #0]
 800c3f0:	e7d6      	b.n	800c3a0 <_malloc_r+0xa8>
 800c3f2:	bf00      	nop
 800c3f4:	20000ebc 	.word	0x20000ebc

0800c3f8 <__malloc_lock>:
 800c3f8:	4801      	ldr	r0, [pc, #4]	@ (800c400 <__malloc_lock+0x8>)
 800c3fa:	f7ff b89e 	b.w	800b53a <__retarget_lock_acquire_recursive>
 800c3fe:	bf00      	nop
 800c400:	20000eb4 	.word	0x20000eb4

0800c404 <__malloc_unlock>:
 800c404:	4801      	ldr	r0, [pc, #4]	@ (800c40c <__malloc_unlock+0x8>)
 800c406:	f7ff b899 	b.w	800b53c <__retarget_lock_release_recursive>
 800c40a:	bf00      	nop
 800c40c:	20000eb4 	.word	0x20000eb4

0800c410 <_Balloc>:
 800c410:	b570      	push	{r4, r5, r6, lr}
 800c412:	69c6      	ldr	r6, [r0, #28]
 800c414:	4604      	mov	r4, r0
 800c416:	460d      	mov	r5, r1
 800c418:	b976      	cbnz	r6, 800c438 <_Balloc+0x28>
 800c41a:	2010      	movs	r0, #16
 800c41c:	f7ff ff42 	bl	800c2a4 <malloc>
 800c420:	4602      	mov	r2, r0
 800c422:	61e0      	str	r0, [r4, #28]
 800c424:	b920      	cbnz	r0, 800c430 <_Balloc+0x20>
 800c426:	4b18      	ldr	r3, [pc, #96]	@ (800c488 <_Balloc+0x78>)
 800c428:	4818      	ldr	r0, [pc, #96]	@ (800c48c <_Balloc+0x7c>)
 800c42a:	216b      	movs	r1, #107	@ 0x6b
 800c42c:	f000 fd98 	bl	800cf60 <__assert_func>
 800c430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c434:	6006      	str	r6, [r0, #0]
 800c436:	60c6      	str	r6, [r0, #12]
 800c438:	69e6      	ldr	r6, [r4, #28]
 800c43a:	68f3      	ldr	r3, [r6, #12]
 800c43c:	b183      	cbz	r3, 800c460 <_Balloc+0x50>
 800c43e:	69e3      	ldr	r3, [r4, #28]
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c446:	b9b8      	cbnz	r0, 800c478 <_Balloc+0x68>
 800c448:	2101      	movs	r1, #1
 800c44a:	fa01 f605 	lsl.w	r6, r1, r5
 800c44e:	1d72      	adds	r2, r6, #5
 800c450:	0092      	lsls	r2, r2, #2
 800c452:	4620      	mov	r0, r4
 800c454:	f000 fda2 	bl	800cf9c <_calloc_r>
 800c458:	b160      	cbz	r0, 800c474 <_Balloc+0x64>
 800c45a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c45e:	e00e      	b.n	800c47e <_Balloc+0x6e>
 800c460:	2221      	movs	r2, #33	@ 0x21
 800c462:	2104      	movs	r1, #4
 800c464:	4620      	mov	r0, r4
 800c466:	f000 fd99 	bl	800cf9c <_calloc_r>
 800c46a:	69e3      	ldr	r3, [r4, #28]
 800c46c:	60f0      	str	r0, [r6, #12]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d1e4      	bne.n	800c43e <_Balloc+0x2e>
 800c474:	2000      	movs	r0, #0
 800c476:	bd70      	pop	{r4, r5, r6, pc}
 800c478:	6802      	ldr	r2, [r0, #0]
 800c47a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c47e:	2300      	movs	r3, #0
 800c480:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c484:	e7f7      	b.n	800c476 <_Balloc+0x66>
 800c486:	bf00      	nop
 800c488:	0800dc4d 	.word	0x0800dc4d
 800c48c:	0800dccd 	.word	0x0800dccd

0800c490 <_Bfree>:
 800c490:	b570      	push	{r4, r5, r6, lr}
 800c492:	69c6      	ldr	r6, [r0, #28]
 800c494:	4605      	mov	r5, r0
 800c496:	460c      	mov	r4, r1
 800c498:	b976      	cbnz	r6, 800c4b8 <_Bfree+0x28>
 800c49a:	2010      	movs	r0, #16
 800c49c:	f7ff ff02 	bl	800c2a4 <malloc>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	61e8      	str	r0, [r5, #28]
 800c4a4:	b920      	cbnz	r0, 800c4b0 <_Bfree+0x20>
 800c4a6:	4b09      	ldr	r3, [pc, #36]	@ (800c4cc <_Bfree+0x3c>)
 800c4a8:	4809      	ldr	r0, [pc, #36]	@ (800c4d0 <_Bfree+0x40>)
 800c4aa:	218f      	movs	r1, #143	@ 0x8f
 800c4ac:	f000 fd58 	bl	800cf60 <__assert_func>
 800c4b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4b4:	6006      	str	r6, [r0, #0]
 800c4b6:	60c6      	str	r6, [r0, #12]
 800c4b8:	b13c      	cbz	r4, 800c4ca <_Bfree+0x3a>
 800c4ba:	69eb      	ldr	r3, [r5, #28]
 800c4bc:	6862      	ldr	r2, [r4, #4]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4c4:	6021      	str	r1, [r4, #0]
 800c4c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4ca:	bd70      	pop	{r4, r5, r6, pc}
 800c4cc:	0800dc4d 	.word	0x0800dc4d
 800c4d0:	0800dccd 	.word	0x0800dccd

0800c4d4 <__multadd>:
 800c4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4d8:	690d      	ldr	r5, [r1, #16]
 800c4da:	4607      	mov	r7, r0
 800c4dc:	460c      	mov	r4, r1
 800c4de:	461e      	mov	r6, r3
 800c4e0:	f101 0c14 	add.w	ip, r1, #20
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	f8dc 3000 	ldr.w	r3, [ip]
 800c4ea:	b299      	uxth	r1, r3
 800c4ec:	fb02 6101 	mla	r1, r2, r1, r6
 800c4f0:	0c1e      	lsrs	r6, r3, #16
 800c4f2:	0c0b      	lsrs	r3, r1, #16
 800c4f4:	fb02 3306 	mla	r3, r2, r6, r3
 800c4f8:	b289      	uxth	r1, r1
 800c4fa:	3001      	adds	r0, #1
 800c4fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c500:	4285      	cmp	r5, r0
 800c502:	f84c 1b04 	str.w	r1, [ip], #4
 800c506:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c50a:	dcec      	bgt.n	800c4e6 <__multadd+0x12>
 800c50c:	b30e      	cbz	r6, 800c552 <__multadd+0x7e>
 800c50e:	68a3      	ldr	r3, [r4, #8]
 800c510:	42ab      	cmp	r3, r5
 800c512:	dc19      	bgt.n	800c548 <__multadd+0x74>
 800c514:	6861      	ldr	r1, [r4, #4]
 800c516:	4638      	mov	r0, r7
 800c518:	3101      	adds	r1, #1
 800c51a:	f7ff ff79 	bl	800c410 <_Balloc>
 800c51e:	4680      	mov	r8, r0
 800c520:	b928      	cbnz	r0, 800c52e <__multadd+0x5a>
 800c522:	4602      	mov	r2, r0
 800c524:	4b0c      	ldr	r3, [pc, #48]	@ (800c558 <__multadd+0x84>)
 800c526:	480d      	ldr	r0, [pc, #52]	@ (800c55c <__multadd+0x88>)
 800c528:	21ba      	movs	r1, #186	@ 0xba
 800c52a:	f000 fd19 	bl	800cf60 <__assert_func>
 800c52e:	6922      	ldr	r2, [r4, #16]
 800c530:	3202      	adds	r2, #2
 800c532:	f104 010c 	add.w	r1, r4, #12
 800c536:	0092      	lsls	r2, r2, #2
 800c538:	300c      	adds	r0, #12
 800c53a:	f7ff f800 	bl	800b53e <memcpy>
 800c53e:	4621      	mov	r1, r4
 800c540:	4638      	mov	r0, r7
 800c542:	f7ff ffa5 	bl	800c490 <_Bfree>
 800c546:	4644      	mov	r4, r8
 800c548:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c54c:	3501      	adds	r5, #1
 800c54e:	615e      	str	r6, [r3, #20]
 800c550:	6125      	str	r5, [r4, #16]
 800c552:	4620      	mov	r0, r4
 800c554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c558:	0800dcbc 	.word	0x0800dcbc
 800c55c:	0800dccd 	.word	0x0800dccd

0800c560 <__hi0bits>:
 800c560:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c564:	4603      	mov	r3, r0
 800c566:	bf36      	itet	cc
 800c568:	0403      	lslcc	r3, r0, #16
 800c56a:	2000      	movcs	r0, #0
 800c56c:	2010      	movcc	r0, #16
 800c56e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c572:	bf3c      	itt	cc
 800c574:	021b      	lslcc	r3, r3, #8
 800c576:	3008      	addcc	r0, #8
 800c578:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c57c:	bf3c      	itt	cc
 800c57e:	011b      	lslcc	r3, r3, #4
 800c580:	3004      	addcc	r0, #4
 800c582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c586:	bf3c      	itt	cc
 800c588:	009b      	lslcc	r3, r3, #2
 800c58a:	3002      	addcc	r0, #2
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	db05      	blt.n	800c59c <__hi0bits+0x3c>
 800c590:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c594:	f100 0001 	add.w	r0, r0, #1
 800c598:	bf08      	it	eq
 800c59a:	2020      	moveq	r0, #32
 800c59c:	4770      	bx	lr

0800c59e <__lo0bits>:
 800c59e:	6803      	ldr	r3, [r0, #0]
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	f013 0007 	ands.w	r0, r3, #7
 800c5a6:	d00b      	beq.n	800c5c0 <__lo0bits+0x22>
 800c5a8:	07d9      	lsls	r1, r3, #31
 800c5aa:	d421      	bmi.n	800c5f0 <__lo0bits+0x52>
 800c5ac:	0798      	lsls	r0, r3, #30
 800c5ae:	bf49      	itett	mi
 800c5b0:	085b      	lsrmi	r3, r3, #1
 800c5b2:	089b      	lsrpl	r3, r3, #2
 800c5b4:	2001      	movmi	r0, #1
 800c5b6:	6013      	strmi	r3, [r2, #0]
 800c5b8:	bf5c      	itt	pl
 800c5ba:	6013      	strpl	r3, [r2, #0]
 800c5bc:	2002      	movpl	r0, #2
 800c5be:	4770      	bx	lr
 800c5c0:	b299      	uxth	r1, r3
 800c5c2:	b909      	cbnz	r1, 800c5c8 <__lo0bits+0x2a>
 800c5c4:	0c1b      	lsrs	r3, r3, #16
 800c5c6:	2010      	movs	r0, #16
 800c5c8:	b2d9      	uxtb	r1, r3
 800c5ca:	b909      	cbnz	r1, 800c5d0 <__lo0bits+0x32>
 800c5cc:	3008      	adds	r0, #8
 800c5ce:	0a1b      	lsrs	r3, r3, #8
 800c5d0:	0719      	lsls	r1, r3, #28
 800c5d2:	bf04      	itt	eq
 800c5d4:	091b      	lsreq	r3, r3, #4
 800c5d6:	3004      	addeq	r0, #4
 800c5d8:	0799      	lsls	r1, r3, #30
 800c5da:	bf04      	itt	eq
 800c5dc:	089b      	lsreq	r3, r3, #2
 800c5de:	3002      	addeq	r0, #2
 800c5e0:	07d9      	lsls	r1, r3, #31
 800c5e2:	d403      	bmi.n	800c5ec <__lo0bits+0x4e>
 800c5e4:	085b      	lsrs	r3, r3, #1
 800c5e6:	f100 0001 	add.w	r0, r0, #1
 800c5ea:	d003      	beq.n	800c5f4 <__lo0bits+0x56>
 800c5ec:	6013      	str	r3, [r2, #0]
 800c5ee:	4770      	bx	lr
 800c5f0:	2000      	movs	r0, #0
 800c5f2:	4770      	bx	lr
 800c5f4:	2020      	movs	r0, #32
 800c5f6:	4770      	bx	lr

0800c5f8 <__i2b>:
 800c5f8:	b510      	push	{r4, lr}
 800c5fa:	460c      	mov	r4, r1
 800c5fc:	2101      	movs	r1, #1
 800c5fe:	f7ff ff07 	bl	800c410 <_Balloc>
 800c602:	4602      	mov	r2, r0
 800c604:	b928      	cbnz	r0, 800c612 <__i2b+0x1a>
 800c606:	4b05      	ldr	r3, [pc, #20]	@ (800c61c <__i2b+0x24>)
 800c608:	4805      	ldr	r0, [pc, #20]	@ (800c620 <__i2b+0x28>)
 800c60a:	f240 1145 	movw	r1, #325	@ 0x145
 800c60e:	f000 fca7 	bl	800cf60 <__assert_func>
 800c612:	2301      	movs	r3, #1
 800c614:	6144      	str	r4, [r0, #20]
 800c616:	6103      	str	r3, [r0, #16]
 800c618:	bd10      	pop	{r4, pc}
 800c61a:	bf00      	nop
 800c61c:	0800dcbc 	.word	0x0800dcbc
 800c620:	0800dccd 	.word	0x0800dccd

0800c624 <__multiply>:
 800c624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c628:	4617      	mov	r7, r2
 800c62a:	690a      	ldr	r2, [r1, #16]
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	429a      	cmp	r2, r3
 800c630:	bfa8      	it	ge
 800c632:	463b      	movge	r3, r7
 800c634:	4689      	mov	r9, r1
 800c636:	bfa4      	itt	ge
 800c638:	460f      	movge	r7, r1
 800c63a:	4699      	movge	r9, r3
 800c63c:	693d      	ldr	r5, [r7, #16]
 800c63e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	6879      	ldr	r1, [r7, #4]
 800c646:	eb05 060a 	add.w	r6, r5, sl
 800c64a:	42b3      	cmp	r3, r6
 800c64c:	b085      	sub	sp, #20
 800c64e:	bfb8      	it	lt
 800c650:	3101      	addlt	r1, #1
 800c652:	f7ff fedd 	bl	800c410 <_Balloc>
 800c656:	b930      	cbnz	r0, 800c666 <__multiply+0x42>
 800c658:	4602      	mov	r2, r0
 800c65a:	4b41      	ldr	r3, [pc, #260]	@ (800c760 <__multiply+0x13c>)
 800c65c:	4841      	ldr	r0, [pc, #260]	@ (800c764 <__multiply+0x140>)
 800c65e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c662:	f000 fc7d 	bl	800cf60 <__assert_func>
 800c666:	f100 0414 	add.w	r4, r0, #20
 800c66a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c66e:	4623      	mov	r3, r4
 800c670:	2200      	movs	r2, #0
 800c672:	4573      	cmp	r3, lr
 800c674:	d320      	bcc.n	800c6b8 <__multiply+0x94>
 800c676:	f107 0814 	add.w	r8, r7, #20
 800c67a:	f109 0114 	add.w	r1, r9, #20
 800c67e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c682:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c686:	9302      	str	r3, [sp, #8]
 800c688:	1beb      	subs	r3, r5, r7
 800c68a:	3b15      	subs	r3, #21
 800c68c:	f023 0303 	bic.w	r3, r3, #3
 800c690:	3304      	adds	r3, #4
 800c692:	3715      	adds	r7, #21
 800c694:	42bd      	cmp	r5, r7
 800c696:	bf38      	it	cc
 800c698:	2304      	movcc	r3, #4
 800c69a:	9301      	str	r3, [sp, #4]
 800c69c:	9b02      	ldr	r3, [sp, #8]
 800c69e:	9103      	str	r1, [sp, #12]
 800c6a0:	428b      	cmp	r3, r1
 800c6a2:	d80c      	bhi.n	800c6be <__multiply+0x9a>
 800c6a4:	2e00      	cmp	r6, #0
 800c6a6:	dd03      	ble.n	800c6b0 <__multiply+0x8c>
 800c6a8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d055      	beq.n	800c75c <__multiply+0x138>
 800c6b0:	6106      	str	r6, [r0, #16]
 800c6b2:	b005      	add	sp, #20
 800c6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b8:	f843 2b04 	str.w	r2, [r3], #4
 800c6bc:	e7d9      	b.n	800c672 <__multiply+0x4e>
 800c6be:	f8b1 a000 	ldrh.w	sl, [r1]
 800c6c2:	f1ba 0f00 	cmp.w	sl, #0
 800c6c6:	d01f      	beq.n	800c708 <__multiply+0xe4>
 800c6c8:	46c4      	mov	ip, r8
 800c6ca:	46a1      	mov	r9, r4
 800c6cc:	2700      	movs	r7, #0
 800c6ce:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c6d2:	f8d9 3000 	ldr.w	r3, [r9]
 800c6d6:	fa1f fb82 	uxth.w	fp, r2
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	fb0a 330b 	mla	r3, sl, fp, r3
 800c6e0:	443b      	add	r3, r7
 800c6e2:	f8d9 7000 	ldr.w	r7, [r9]
 800c6e6:	0c12      	lsrs	r2, r2, #16
 800c6e8:	0c3f      	lsrs	r7, r7, #16
 800c6ea:	fb0a 7202 	mla	r2, sl, r2, r7
 800c6ee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6f8:	4565      	cmp	r5, ip
 800c6fa:	f849 3b04 	str.w	r3, [r9], #4
 800c6fe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c702:	d8e4      	bhi.n	800c6ce <__multiply+0xaa>
 800c704:	9b01      	ldr	r3, [sp, #4]
 800c706:	50e7      	str	r7, [r4, r3]
 800c708:	9b03      	ldr	r3, [sp, #12]
 800c70a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c70e:	3104      	adds	r1, #4
 800c710:	f1b9 0f00 	cmp.w	r9, #0
 800c714:	d020      	beq.n	800c758 <__multiply+0x134>
 800c716:	6823      	ldr	r3, [r4, #0]
 800c718:	4647      	mov	r7, r8
 800c71a:	46a4      	mov	ip, r4
 800c71c:	f04f 0a00 	mov.w	sl, #0
 800c720:	f8b7 b000 	ldrh.w	fp, [r7]
 800c724:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c728:	fb09 220b 	mla	r2, r9, fp, r2
 800c72c:	4452      	add	r2, sl
 800c72e:	b29b      	uxth	r3, r3
 800c730:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c734:	f84c 3b04 	str.w	r3, [ip], #4
 800c738:	f857 3b04 	ldr.w	r3, [r7], #4
 800c73c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c740:	f8bc 3000 	ldrh.w	r3, [ip]
 800c744:	fb09 330a 	mla	r3, r9, sl, r3
 800c748:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c74c:	42bd      	cmp	r5, r7
 800c74e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c752:	d8e5      	bhi.n	800c720 <__multiply+0xfc>
 800c754:	9a01      	ldr	r2, [sp, #4]
 800c756:	50a3      	str	r3, [r4, r2]
 800c758:	3404      	adds	r4, #4
 800c75a:	e79f      	b.n	800c69c <__multiply+0x78>
 800c75c:	3e01      	subs	r6, #1
 800c75e:	e7a1      	b.n	800c6a4 <__multiply+0x80>
 800c760:	0800dcbc 	.word	0x0800dcbc
 800c764:	0800dccd 	.word	0x0800dccd

0800c768 <__pow5mult>:
 800c768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c76c:	4615      	mov	r5, r2
 800c76e:	f012 0203 	ands.w	r2, r2, #3
 800c772:	4607      	mov	r7, r0
 800c774:	460e      	mov	r6, r1
 800c776:	d007      	beq.n	800c788 <__pow5mult+0x20>
 800c778:	4c25      	ldr	r4, [pc, #148]	@ (800c810 <__pow5mult+0xa8>)
 800c77a:	3a01      	subs	r2, #1
 800c77c:	2300      	movs	r3, #0
 800c77e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c782:	f7ff fea7 	bl	800c4d4 <__multadd>
 800c786:	4606      	mov	r6, r0
 800c788:	10ad      	asrs	r5, r5, #2
 800c78a:	d03d      	beq.n	800c808 <__pow5mult+0xa0>
 800c78c:	69fc      	ldr	r4, [r7, #28]
 800c78e:	b97c      	cbnz	r4, 800c7b0 <__pow5mult+0x48>
 800c790:	2010      	movs	r0, #16
 800c792:	f7ff fd87 	bl	800c2a4 <malloc>
 800c796:	4602      	mov	r2, r0
 800c798:	61f8      	str	r0, [r7, #28]
 800c79a:	b928      	cbnz	r0, 800c7a8 <__pow5mult+0x40>
 800c79c:	4b1d      	ldr	r3, [pc, #116]	@ (800c814 <__pow5mult+0xac>)
 800c79e:	481e      	ldr	r0, [pc, #120]	@ (800c818 <__pow5mult+0xb0>)
 800c7a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c7a4:	f000 fbdc 	bl	800cf60 <__assert_func>
 800c7a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7ac:	6004      	str	r4, [r0, #0]
 800c7ae:	60c4      	str	r4, [r0, #12]
 800c7b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c7b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7b8:	b94c      	cbnz	r4, 800c7ce <__pow5mult+0x66>
 800c7ba:	f240 2171 	movw	r1, #625	@ 0x271
 800c7be:	4638      	mov	r0, r7
 800c7c0:	f7ff ff1a 	bl	800c5f8 <__i2b>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7ca:	4604      	mov	r4, r0
 800c7cc:	6003      	str	r3, [r0, #0]
 800c7ce:	f04f 0900 	mov.w	r9, #0
 800c7d2:	07eb      	lsls	r3, r5, #31
 800c7d4:	d50a      	bpl.n	800c7ec <__pow5mult+0x84>
 800c7d6:	4631      	mov	r1, r6
 800c7d8:	4622      	mov	r2, r4
 800c7da:	4638      	mov	r0, r7
 800c7dc:	f7ff ff22 	bl	800c624 <__multiply>
 800c7e0:	4631      	mov	r1, r6
 800c7e2:	4680      	mov	r8, r0
 800c7e4:	4638      	mov	r0, r7
 800c7e6:	f7ff fe53 	bl	800c490 <_Bfree>
 800c7ea:	4646      	mov	r6, r8
 800c7ec:	106d      	asrs	r5, r5, #1
 800c7ee:	d00b      	beq.n	800c808 <__pow5mult+0xa0>
 800c7f0:	6820      	ldr	r0, [r4, #0]
 800c7f2:	b938      	cbnz	r0, 800c804 <__pow5mult+0x9c>
 800c7f4:	4622      	mov	r2, r4
 800c7f6:	4621      	mov	r1, r4
 800c7f8:	4638      	mov	r0, r7
 800c7fa:	f7ff ff13 	bl	800c624 <__multiply>
 800c7fe:	6020      	str	r0, [r4, #0]
 800c800:	f8c0 9000 	str.w	r9, [r0]
 800c804:	4604      	mov	r4, r0
 800c806:	e7e4      	b.n	800c7d2 <__pow5mult+0x6a>
 800c808:	4630      	mov	r0, r6
 800c80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c80e:	bf00      	nop
 800c810:	0800dd80 	.word	0x0800dd80
 800c814:	0800dc4d 	.word	0x0800dc4d
 800c818:	0800dccd 	.word	0x0800dccd

0800c81c <__lshift>:
 800c81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c820:	460c      	mov	r4, r1
 800c822:	6849      	ldr	r1, [r1, #4]
 800c824:	6923      	ldr	r3, [r4, #16]
 800c826:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c82a:	68a3      	ldr	r3, [r4, #8]
 800c82c:	4607      	mov	r7, r0
 800c82e:	4691      	mov	r9, r2
 800c830:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c834:	f108 0601 	add.w	r6, r8, #1
 800c838:	42b3      	cmp	r3, r6
 800c83a:	db0b      	blt.n	800c854 <__lshift+0x38>
 800c83c:	4638      	mov	r0, r7
 800c83e:	f7ff fde7 	bl	800c410 <_Balloc>
 800c842:	4605      	mov	r5, r0
 800c844:	b948      	cbnz	r0, 800c85a <__lshift+0x3e>
 800c846:	4602      	mov	r2, r0
 800c848:	4b28      	ldr	r3, [pc, #160]	@ (800c8ec <__lshift+0xd0>)
 800c84a:	4829      	ldr	r0, [pc, #164]	@ (800c8f0 <__lshift+0xd4>)
 800c84c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c850:	f000 fb86 	bl	800cf60 <__assert_func>
 800c854:	3101      	adds	r1, #1
 800c856:	005b      	lsls	r3, r3, #1
 800c858:	e7ee      	b.n	800c838 <__lshift+0x1c>
 800c85a:	2300      	movs	r3, #0
 800c85c:	f100 0114 	add.w	r1, r0, #20
 800c860:	f100 0210 	add.w	r2, r0, #16
 800c864:	4618      	mov	r0, r3
 800c866:	4553      	cmp	r3, sl
 800c868:	db33      	blt.n	800c8d2 <__lshift+0xb6>
 800c86a:	6920      	ldr	r0, [r4, #16]
 800c86c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c870:	f104 0314 	add.w	r3, r4, #20
 800c874:	f019 091f 	ands.w	r9, r9, #31
 800c878:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c87c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c880:	d02b      	beq.n	800c8da <__lshift+0xbe>
 800c882:	f1c9 0e20 	rsb	lr, r9, #32
 800c886:	468a      	mov	sl, r1
 800c888:	2200      	movs	r2, #0
 800c88a:	6818      	ldr	r0, [r3, #0]
 800c88c:	fa00 f009 	lsl.w	r0, r0, r9
 800c890:	4310      	orrs	r0, r2
 800c892:	f84a 0b04 	str.w	r0, [sl], #4
 800c896:	f853 2b04 	ldr.w	r2, [r3], #4
 800c89a:	459c      	cmp	ip, r3
 800c89c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c8a0:	d8f3      	bhi.n	800c88a <__lshift+0x6e>
 800c8a2:	ebac 0304 	sub.w	r3, ip, r4
 800c8a6:	3b15      	subs	r3, #21
 800c8a8:	f023 0303 	bic.w	r3, r3, #3
 800c8ac:	3304      	adds	r3, #4
 800c8ae:	f104 0015 	add.w	r0, r4, #21
 800c8b2:	4560      	cmp	r0, ip
 800c8b4:	bf88      	it	hi
 800c8b6:	2304      	movhi	r3, #4
 800c8b8:	50ca      	str	r2, [r1, r3]
 800c8ba:	b10a      	cbz	r2, 800c8c0 <__lshift+0xa4>
 800c8bc:	f108 0602 	add.w	r6, r8, #2
 800c8c0:	3e01      	subs	r6, #1
 800c8c2:	4638      	mov	r0, r7
 800c8c4:	612e      	str	r6, [r5, #16]
 800c8c6:	4621      	mov	r1, r4
 800c8c8:	f7ff fde2 	bl	800c490 <_Bfree>
 800c8cc:	4628      	mov	r0, r5
 800c8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	e7c5      	b.n	800c866 <__lshift+0x4a>
 800c8da:	3904      	subs	r1, #4
 800c8dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8e0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8e4:	459c      	cmp	ip, r3
 800c8e6:	d8f9      	bhi.n	800c8dc <__lshift+0xc0>
 800c8e8:	e7ea      	b.n	800c8c0 <__lshift+0xa4>
 800c8ea:	bf00      	nop
 800c8ec:	0800dcbc 	.word	0x0800dcbc
 800c8f0:	0800dccd 	.word	0x0800dccd

0800c8f4 <__mcmp>:
 800c8f4:	690a      	ldr	r2, [r1, #16]
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	6900      	ldr	r0, [r0, #16]
 800c8fa:	1a80      	subs	r0, r0, r2
 800c8fc:	b530      	push	{r4, r5, lr}
 800c8fe:	d10e      	bne.n	800c91e <__mcmp+0x2a>
 800c900:	3314      	adds	r3, #20
 800c902:	3114      	adds	r1, #20
 800c904:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c908:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c90c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c910:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c914:	4295      	cmp	r5, r2
 800c916:	d003      	beq.n	800c920 <__mcmp+0x2c>
 800c918:	d205      	bcs.n	800c926 <__mcmp+0x32>
 800c91a:	f04f 30ff 	mov.w	r0, #4294967295
 800c91e:	bd30      	pop	{r4, r5, pc}
 800c920:	42a3      	cmp	r3, r4
 800c922:	d3f3      	bcc.n	800c90c <__mcmp+0x18>
 800c924:	e7fb      	b.n	800c91e <__mcmp+0x2a>
 800c926:	2001      	movs	r0, #1
 800c928:	e7f9      	b.n	800c91e <__mcmp+0x2a>
	...

0800c92c <__mdiff>:
 800c92c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c930:	4689      	mov	r9, r1
 800c932:	4606      	mov	r6, r0
 800c934:	4611      	mov	r1, r2
 800c936:	4648      	mov	r0, r9
 800c938:	4614      	mov	r4, r2
 800c93a:	f7ff ffdb 	bl	800c8f4 <__mcmp>
 800c93e:	1e05      	subs	r5, r0, #0
 800c940:	d112      	bne.n	800c968 <__mdiff+0x3c>
 800c942:	4629      	mov	r1, r5
 800c944:	4630      	mov	r0, r6
 800c946:	f7ff fd63 	bl	800c410 <_Balloc>
 800c94a:	4602      	mov	r2, r0
 800c94c:	b928      	cbnz	r0, 800c95a <__mdiff+0x2e>
 800c94e:	4b3f      	ldr	r3, [pc, #252]	@ (800ca4c <__mdiff+0x120>)
 800c950:	f240 2137 	movw	r1, #567	@ 0x237
 800c954:	483e      	ldr	r0, [pc, #248]	@ (800ca50 <__mdiff+0x124>)
 800c956:	f000 fb03 	bl	800cf60 <__assert_func>
 800c95a:	2301      	movs	r3, #1
 800c95c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c960:	4610      	mov	r0, r2
 800c962:	b003      	add	sp, #12
 800c964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c968:	bfbc      	itt	lt
 800c96a:	464b      	movlt	r3, r9
 800c96c:	46a1      	movlt	r9, r4
 800c96e:	4630      	mov	r0, r6
 800c970:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c974:	bfba      	itte	lt
 800c976:	461c      	movlt	r4, r3
 800c978:	2501      	movlt	r5, #1
 800c97a:	2500      	movge	r5, #0
 800c97c:	f7ff fd48 	bl	800c410 <_Balloc>
 800c980:	4602      	mov	r2, r0
 800c982:	b918      	cbnz	r0, 800c98c <__mdiff+0x60>
 800c984:	4b31      	ldr	r3, [pc, #196]	@ (800ca4c <__mdiff+0x120>)
 800c986:	f240 2145 	movw	r1, #581	@ 0x245
 800c98a:	e7e3      	b.n	800c954 <__mdiff+0x28>
 800c98c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c990:	6926      	ldr	r6, [r4, #16]
 800c992:	60c5      	str	r5, [r0, #12]
 800c994:	f109 0310 	add.w	r3, r9, #16
 800c998:	f109 0514 	add.w	r5, r9, #20
 800c99c:	f104 0e14 	add.w	lr, r4, #20
 800c9a0:	f100 0b14 	add.w	fp, r0, #20
 800c9a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c9a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c9ac:	9301      	str	r3, [sp, #4]
 800c9ae:	46d9      	mov	r9, fp
 800c9b0:	f04f 0c00 	mov.w	ip, #0
 800c9b4:	9b01      	ldr	r3, [sp, #4]
 800c9b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c9ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c9be:	9301      	str	r3, [sp, #4]
 800c9c0:	fa1f f38a 	uxth.w	r3, sl
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	b283      	uxth	r3, r0
 800c9c8:	1acb      	subs	r3, r1, r3
 800c9ca:	0c00      	lsrs	r0, r0, #16
 800c9cc:	4463      	add	r3, ip
 800c9ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c9d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c9dc:	4576      	cmp	r6, lr
 800c9de:	f849 3b04 	str.w	r3, [r9], #4
 800c9e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c9e6:	d8e5      	bhi.n	800c9b4 <__mdiff+0x88>
 800c9e8:	1b33      	subs	r3, r6, r4
 800c9ea:	3b15      	subs	r3, #21
 800c9ec:	f023 0303 	bic.w	r3, r3, #3
 800c9f0:	3415      	adds	r4, #21
 800c9f2:	3304      	adds	r3, #4
 800c9f4:	42a6      	cmp	r6, r4
 800c9f6:	bf38      	it	cc
 800c9f8:	2304      	movcc	r3, #4
 800c9fa:	441d      	add	r5, r3
 800c9fc:	445b      	add	r3, fp
 800c9fe:	461e      	mov	r6, r3
 800ca00:	462c      	mov	r4, r5
 800ca02:	4544      	cmp	r4, r8
 800ca04:	d30e      	bcc.n	800ca24 <__mdiff+0xf8>
 800ca06:	f108 0103 	add.w	r1, r8, #3
 800ca0a:	1b49      	subs	r1, r1, r5
 800ca0c:	f021 0103 	bic.w	r1, r1, #3
 800ca10:	3d03      	subs	r5, #3
 800ca12:	45a8      	cmp	r8, r5
 800ca14:	bf38      	it	cc
 800ca16:	2100      	movcc	r1, #0
 800ca18:	440b      	add	r3, r1
 800ca1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca1e:	b191      	cbz	r1, 800ca46 <__mdiff+0x11a>
 800ca20:	6117      	str	r7, [r2, #16]
 800ca22:	e79d      	b.n	800c960 <__mdiff+0x34>
 800ca24:	f854 1b04 	ldr.w	r1, [r4], #4
 800ca28:	46e6      	mov	lr, ip
 800ca2a:	0c08      	lsrs	r0, r1, #16
 800ca2c:	fa1c fc81 	uxtah	ip, ip, r1
 800ca30:	4471      	add	r1, lr
 800ca32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ca36:	b289      	uxth	r1, r1
 800ca38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ca3c:	f846 1b04 	str.w	r1, [r6], #4
 800ca40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca44:	e7dd      	b.n	800ca02 <__mdiff+0xd6>
 800ca46:	3f01      	subs	r7, #1
 800ca48:	e7e7      	b.n	800ca1a <__mdiff+0xee>
 800ca4a:	bf00      	nop
 800ca4c:	0800dcbc 	.word	0x0800dcbc
 800ca50:	0800dccd 	.word	0x0800dccd

0800ca54 <__d2b>:
 800ca54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca58:	460f      	mov	r7, r1
 800ca5a:	2101      	movs	r1, #1
 800ca5c:	ec59 8b10 	vmov	r8, r9, d0
 800ca60:	4616      	mov	r6, r2
 800ca62:	f7ff fcd5 	bl	800c410 <_Balloc>
 800ca66:	4604      	mov	r4, r0
 800ca68:	b930      	cbnz	r0, 800ca78 <__d2b+0x24>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	4b23      	ldr	r3, [pc, #140]	@ (800cafc <__d2b+0xa8>)
 800ca6e:	4824      	ldr	r0, [pc, #144]	@ (800cb00 <__d2b+0xac>)
 800ca70:	f240 310f 	movw	r1, #783	@ 0x30f
 800ca74:	f000 fa74 	bl	800cf60 <__assert_func>
 800ca78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca80:	b10d      	cbz	r5, 800ca86 <__d2b+0x32>
 800ca82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca86:	9301      	str	r3, [sp, #4]
 800ca88:	f1b8 0300 	subs.w	r3, r8, #0
 800ca8c:	d023      	beq.n	800cad6 <__d2b+0x82>
 800ca8e:	4668      	mov	r0, sp
 800ca90:	9300      	str	r3, [sp, #0]
 800ca92:	f7ff fd84 	bl	800c59e <__lo0bits>
 800ca96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca9a:	b1d0      	cbz	r0, 800cad2 <__d2b+0x7e>
 800ca9c:	f1c0 0320 	rsb	r3, r0, #32
 800caa0:	fa02 f303 	lsl.w	r3, r2, r3
 800caa4:	430b      	orrs	r3, r1
 800caa6:	40c2      	lsrs	r2, r0
 800caa8:	6163      	str	r3, [r4, #20]
 800caaa:	9201      	str	r2, [sp, #4]
 800caac:	9b01      	ldr	r3, [sp, #4]
 800caae:	61a3      	str	r3, [r4, #24]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	bf0c      	ite	eq
 800cab4:	2201      	moveq	r2, #1
 800cab6:	2202      	movne	r2, #2
 800cab8:	6122      	str	r2, [r4, #16]
 800caba:	b1a5      	cbz	r5, 800cae6 <__d2b+0x92>
 800cabc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cac0:	4405      	add	r5, r0
 800cac2:	603d      	str	r5, [r7, #0]
 800cac4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cac8:	6030      	str	r0, [r6, #0]
 800caca:	4620      	mov	r0, r4
 800cacc:	b003      	add	sp, #12
 800cace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cad2:	6161      	str	r1, [r4, #20]
 800cad4:	e7ea      	b.n	800caac <__d2b+0x58>
 800cad6:	a801      	add	r0, sp, #4
 800cad8:	f7ff fd61 	bl	800c59e <__lo0bits>
 800cadc:	9b01      	ldr	r3, [sp, #4]
 800cade:	6163      	str	r3, [r4, #20]
 800cae0:	3020      	adds	r0, #32
 800cae2:	2201      	movs	r2, #1
 800cae4:	e7e8      	b.n	800cab8 <__d2b+0x64>
 800cae6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800caea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800caee:	6038      	str	r0, [r7, #0]
 800caf0:	6918      	ldr	r0, [r3, #16]
 800caf2:	f7ff fd35 	bl	800c560 <__hi0bits>
 800caf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cafa:	e7e5      	b.n	800cac8 <__d2b+0x74>
 800cafc:	0800dcbc 	.word	0x0800dcbc
 800cb00:	0800dccd 	.word	0x0800dccd

0800cb04 <__ssputs_r>:
 800cb04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb08:	688e      	ldr	r6, [r1, #8]
 800cb0a:	461f      	mov	r7, r3
 800cb0c:	42be      	cmp	r6, r7
 800cb0e:	680b      	ldr	r3, [r1, #0]
 800cb10:	4682      	mov	sl, r0
 800cb12:	460c      	mov	r4, r1
 800cb14:	4690      	mov	r8, r2
 800cb16:	d82d      	bhi.n	800cb74 <__ssputs_r+0x70>
 800cb18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cb20:	d026      	beq.n	800cb70 <__ssputs_r+0x6c>
 800cb22:	6965      	ldr	r5, [r4, #20]
 800cb24:	6909      	ldr	r1, [r1, #16]
 800cb26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb2a:	eba3 0901 	sub.w	r9, r3, r1
 800cb2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb32:	1c7b      	adds	r3, r7, #1
 800cb34:	444b      	add	r3, r9
 800cb36:	106d      	asrs	r5, r5, #1
 800cb38:	429d      	cmp	r5, r3
 800cb3a:	bf38      	it	cc
 800cb3c:	461d      	movcc	r5, r3
 800cb3e:	0553      	lsls	r3, r2, #21
 800cb40:	d527      	bpl.n	800cb92 <__ssputs_r+0x8e>
 800cb42:	4629      	mov	r1, r5
 800cb44:	f7ff fbd8 	bl	800c2f8 <_malloc_r>
 800cb48:	4606      	mov	r6, r0
 800cb4a:	b360      	cbz	r0, 800cba6 <__ssputs_r+0xa2>
 800cb4c:	6921      	ldr	r1, [r4, #16]
 800cb4e:	464a      	mov	r2, r9
 800cb50:	f7fe fcf5 	bl	800b53e <memcpy>
 800cb54:	89a3      	ldrh	r3, [r4, #12]
 800cb56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cb5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb5e:	81a3      	strh	r3, [r4, #12]
 800cb60:	6126      	str	r6, [r4, #16]
 800cb62:	6165      	str	r5, [r4, #20]
 800cb64:	444e      	add	r6, r9
 800cb66:	eba5 0509 	sub.w	r5, r5, r9
 800cb6a:	6026      	str	r6, [r4, #0]
 800cb6c:	60a5      	str	r5, [r4, #8]
 800cb6e:	463e      	mov	r6, r7
 800cb70:	42be      	cmp	r6, r7
 800cb72:	d900      	bls.n	800cb76 <__ssputs_r+0x72>
 800cb74:	463e      	mov	r6, r7
 800cb76:	6820      	ldr	r0, [r4, #0]
 800cb78:	4632      	mov	r2, r6
 800cb7a:	4641      	mov	r1, r8
 800cb7c:	f000 f9c6 	bl	800cf0c <memmove>
 800cb80:	68a3      	ldr	r3, [r4, #8]
 800cb82:	1b9b      	subs	r3, r3, r6
 800cb84:	60a3      	str	r3, [r4, #8]
 800cb86:	6823      	ldr	r3, [r4, #0]
 800cb88:	4433      	add	r3, r6
 800cb8a:	6023      	str	r3, [r4, #0]
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb92:	462a      	mov	r2, r5
 800cb94:	f000 fa28 	bl	800cfe8 <_realloc_r>
 800cb98:	4606      	mov	r6, r0
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	d1e0      	bne.n	800cb60 <__ssputs_r+0x5c>
 800cb9e:	6921      	ldr	r1, [r4, #16]
 800cba0:	4650      	mov	r0, sl
 800cba2:	f7ff fb35 	bl	800c210 <_free_r>
 800cba6:	230c      	movs	r3, #12
 800cba8:	f8ca 3000 	str.w	r3, [sl]
 800cbac:	89a3      	ldrh	r3, [r4, #12]
 800cbae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbb2:	81a3      	strh	r3, [r4, #12]
 800cbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb8:	e7e9      	b.n	800cb8e <__ssputs_r+0x8a>
	...

0800cbbc <_svfiprintf_r>:
 800cbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc0:	4698      	mov	r8, r3
 800cbc2:	898b      	ldrh	r3, [r1, #12]
 800cbc4:	061b      	lsls	r3, r3, #24
 800cbc6:	b09d      	sub	sp, #116	@ 0x74
 800cbc8:	4607      	mov	r7, r0
 800cbca:	460d      	mov	r5, r1
 800cbcc:	4614      	mov	r4, r2
 800cbce:	d510      	bpl.n	800cbf2 <_svfiprintf_r+0x36>
 800cbd0:	690b      	ldr	r3, [r1, #16]
 800cbd2:	b973      	cbnz	r3, 800cbf2 <_svfiprintf_r+0x36>
 800cbd4:	2140      	movs	r1, #64	@ 0x40
 800cbd6:	f7ff fb8f 	bl	800c2f8 <_malloc_r>
 800cbda:	6028      	str	r0, [r5, #0]
 800cbdc:	6128      	str	r0, [r5, #16]
 800cbde:	b930      	cbnz	r0, 800cbee <_svfiprintf_r+0x32>
 800cbe0:	230c      	movs	r3, #12
 800cbe2:	603b      	str	r3, [r7, #0]
 800cbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe8:	b01d      	add	sp, #116	@ 0x74
 800cbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbee:	2340      	movs	r3, #64	@ 0x40
 800cbf0:	616b      	str	r3, [r5, #20]
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbf6:	2320      	movs	r3, #32
 800cbf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cbfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc00:	2330      	movs	r3, #48	@ 0x30
 800cc02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cda0 <_svfiprintf_r+0x1e4>
 800cc06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc0a:	f04f 0901 	mov.w	r9, #1
 800cc0e:	4623      	mov	r3, r4
 800cc10:	469a      	mov	sl, r3
 800cc12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc16:	b10a      	cbz	r2, 800cc1c <_svfiprintf_r+0x60>
 800cc18:	2a25      	cmp	r2, #37	@ 0x25
 800cc1a:	d1f9      	bne.n	800cc10 <_svfiprintf_r+0x54>
 800cc1c:	ebba 0b04 	subs.w	fp, sl, r4
 800cc20:	d00b      	beq.n	800cc3a <_svfiprintf_r+0x7e>
 800cc22:	465b      	mov	r3, fp
 800cc24:	4622      	mov	r2, r4
 800cc26:	4629      	mov	r1, r5
 800cc28:	4638      	mov	r0, r7
 800cc2a:	f7ff ff6b 	bl	800cb04 <__ssputs_r>
 800cc2e:	3001      	adds	r0, #1
 800cc30:	f000 80a7 	beq.w	800cd82 <_svfiprintf_r+0x1c6>
 800cc34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc36:	445a      	add	r2, fp
 800cc38:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc3a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	f000 809f 	beq.w	800cd82 <_svfiprintf_r+0x1c6>
 800cc44:	2300      	movs	r3, #0
 800cc46:	f04f 32ff 	mov.w	r2, #4294967295
 800cc4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc4e:	f10a 0a01 	add.w	sl, sl, #1
 800cc52:	9304      	str	r3, [sp, #16]
 800cc54:	9307      	str	r3, [sp, #28]
 800cc56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc5c:	4654      	mov	r4, sl
 800cc5e:	2205      	movs	r2, #5
 800cc60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc64:	484e      	ldr	r0, [pc, #312]	@ (800cda0 <_svfiprintf_r+0x1e4>)
 800cc66:	f7f3 fad3 	bl	8000210 <memchr>
 800cc6a:	9a04      	ldr	r2, [sp, #16]
 800cc6c:	b9d8      	cbnz	r0, 800cca6 <_svfiprintf_r+0xea>
 800cc6e:	06d0      	lsls	r0, r2, #27
 800cc70:	bf44      	itt	mi
 800cc72:	2320      	movmi	r3, #32
 800cc74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc78:	0711      	lsls	r1, r2, #28
 800cc7a:	bf44      	itt	mi
 800cc7c:	232b      	movmi	r3, #43	@ 0x2b
 800cc7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cc82:	f89a 3000 	ldrb.w	r3, [sl]
 800cc86:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc88:	d015      	beq.n	800ccb6 <_svfiprintf_r+0xfa>
 800cc8a:	9a07      	ldr	r2, [sp, #28]
 800cc8c:	4654      	mov	r4, sl
 800cc8e:	2000      	movs	r0, #0
 800cc90:	f04f 0c0a 	mov.w	ip, #10
 800cc94:	4621      	mov	r1, r4
 800cc96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc9a:	3b30      	subs	r3, #48	@ 0x30
 800cc9c:	2b09      	cmp	r3, #9
 800cc9e:	d94b      	bls.n	800cd38 <_svfiprintf_r+0x17c>
 800cca0:	b1b0      	cbz	r0, 800ccd0 <_svfiprintf_r+0x114>
 800cca2:	9207      	str	r2, [sp, #28]
 800cca4:	e014      	b.n	800ccd0 <_svfiprintf_r+0x114>
 800cca6:	eba0 0308 	sub.w	r3, r0, r8
 800ccaa:	fa09 f303 	lsl.w	r3, r9, r3
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	9304      	str	r3, [sp, #16]
 800ccb2:	46a2      	mov	sl, r4
 800ccb4:	e7d2      	b.n	800cc5c <_svfiprintf_r+0xa0>
 800ccb6:	9b03      	ldr	r3, [sp, #12]
 800ccb8:	1d19      	adds	r1, r3, #4
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	9103      	str	r1, [sp, #12]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	bfbb      	ittet	lt
 800ccc2:	425b      	neglt	r3, r3
 800ccc4:	f042 0202 	orrlt.w	r2, r2, #2
 800ccc8:	9307      	strge	r3, [sp, #28]
 800ccca:	9307      	strlt	r3, [sp, #28]
 800cccc:	bfb8      	it	lt
 800ccce:	9204      	strlt	r2, [sp, #16]
 800ccd0:	7823      	ldrb	r3, [r4, #0]
 800ccd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800ccd4:	d10a      	bne.n	800ccec <_svfiprintf_r+0x130>
 800ccd6:	7863      	ldrb	r3, [r4, #1]
 800ccd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccda:	d132      	bne.n	800cd42 <_svfiprintf_r+0x186>
 800ccdc:	9b03      	ldr	r3, [sp, #12]
 800ccde:	1d1a      	adds	r2, r3, #4
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	9203      	str	r2, [sp, #12]
 800cce4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cce8:	3402      	adds	r4, #2
 800ccea:	9305      	str	r3, [sp, #20]
 800ccec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cdb0 <_svfiprintf_r+0x1f4>
 800ccf0:	7821      	ldrb	r1, [r4, #0]
 800ccf2:	2203      	movs	r2, #3
 800ccf4:	4650      	mov	r0, sl
 800ccf6:	f7f3 fa8b 	bl	8000210 <memchr>
 800ccfa:	b138      	cbz	r0, 800cd0c <_svfiprintf_r+0x150>
 800ccfc:	9b04      	ldr	r3, [sp, #16]
 800ccfe:	eba0 000a 	sub.w	r0, r0, sl
 800cd02:	2240      	movs	r2, #64	@ 0x40
 800cd04:	4082      	lsls	r2, r0
 800cd06:	4313      	orrs	r3, r2
 800cd08:	3401      	adds	r4, #1
 800cd0a:	9304      	str	r3, [sp, #16]
 800cd0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd10:	4824      	ldr	r0, [pc, #144]	@ (800cda4 <_svfiprintf_r+0x1e8>)
 800cd12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd16:	2206      	movs	r2, #6
 800cd18:	f7f3 fa7a 	bl	8000210 <memchr>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	d036      	beq.n	800cd8e <_svfiprintf_r+0x1d2>
 800cd20:	4b21      	ldr	r3, [pc, #132]	@ (800cda8 <_svfiprintf_r+0x1ec>)
 800cd22:	bb1b      	cbnz	r3, 800cd6c <_svfiprintf_r+0x1b0>
 800cd24:	9b03      	ldr	r3, [sp, #12]
 800cd26:	3307      	adds	r3, #7
 800cd28:	f023 0307 	bic.w	r3, r3, #7
 800cd2c:	3308      	adds	r3, #8
 800cd2e:	9303      	str	r3, [sp, #12]
 800cd30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd32:	4433      	add	r3, r6
 800cd34:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd36:	e76a      	b.n	800cc0e <_svfiprintf_r+0x52>
 800cd38:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd3c:	460c      	mov	r4, r1
 800cd3e:	2001      	movs	r0, #1
 800cd40:	e7a8      	b.n	800cc94 <_svfiprintf_r+0xd8>
 800cd42:	2300      	movs	r3, #0
 800cd44:	3401      	adds	r4, #1
 800cd46:	9305      	str	r3, [sp, #20]
 800cd48:	4619      	mov	r1, r3
 800cd4a:	f04f 0c0a 	mov.w	ip, #10
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd54:	3a30      	subs	r2, #48	@ 0x30
 800cd56:	2a09      	cmp	r2, #9
 800cd58:	d903      	bls.n	800cd62 <_svfiprintf_r+0x1a6>
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d0c6      	beq.n	800ccec <_svfiprintf_r+0x130>
 800cd5e:	9105      	str	r1, [sp, #20]
 800cd60:	e7c4      	b.n	800ccec <_svfiprintf_r+0x130>
 800cd62:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd66:	4604      	mov	r4, r0
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e7f0      	b.n	800cd4e <_svfiprintf_r+0x192>
 800cd6c:	ab03      	add	r3, sp, #12
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	462a      	mov	r2, r5
 800cd72:	4b0e      	ldr	r3, [pc, #56]	@ (800cdac <_svfiprintf_r+0x1f0>)
 800cd74:	a904      	add	r1, sp, #16
 800cd76:	4638      	mov	r0, r7
 800cd78:	f7fd fe5e 	bl	800aa38 <_printf_float>
 800cd7c:	1c42      	adds	r2, r0, #1
 800cd7e:	4606      	mov	r6, r0
 800cd80:	d1d6      	bne.n	800cd30 <_svfiprintf_r+0x174>
 800cd82:	89ab      	ldrh	r3, [r5, #12]
 800cd84:	065b      	lsls	r3, r3, #25
 800cd86:	f53f af2d 	bmi.w	800cbe4 <_svfiprintf_r+0x28>
 800cd8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd8c:	e72c      	b.n	800cbe8 <_svfiprintf_r+0x2c>
 800cd8e:	ab03      	add	r3, sp, #12
 800cd90:	9300      	str	r3, [sp, #0]
 800cd92:	462a      	mov	r2, r5
 800cd94:	4b05      	ldr	r3, [pc, #20]	@ (800cdac <_svfiprintf_r+0x1f0>)
 800cd96:	a904      	add	r1, sp, #16
 800cd98:	4638      	mov	r0, r7
 800cd9a:	f7fe f8e5 	bl	800af68 <_printf_i>
 800cd9e:	e7ed      	b.n	800cd7c <_svfiprintf_r+0x1c0>
 800cda0:	0800dd26 	.word	0x0800dd26
 800cda4:	0800dd30 	.word	0x0800dd30
 800cda8:	0800aa39 	.word	0x0800aa39
 800cdac:	0800cb05 	.word	0x0800cb05
 800cdb0:	0800dd2c 	.word	0x0800dd2c

0800cdb4 <__sflush_r>:
 800cdb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdbc:	0716      	lsls	r6, r2, #28
 800cdbe:	4605      	mov	r5, r0
 800cdc0:	460c      	mov	r4, r1
 800cdc2:	d454      	bmi.n	800ce6e <__sflush_r+0xba>
 800cdc4:	684b      	ldr	r3, [r1, #4]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	dc02      	bgt.n	800cdd0 <__sflush_r+0x1c>
 800cdca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	dd48      	ble.n	800ce62 <__sflush_r+0xae>
 800cdd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cdd2:	2e00      	cmp	r6, #0
 800cdd4:	d045      	beq.n	800ce62 <__sflush_r+0xae>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cddc:	682f      	ldr	r7, [r5, #0]
 800cdde:	6a21      	ldr	r1, [r4, #32]
 800cde0:	602b      	str	r3, [r5, #0]
 800cde2:	d030      	beq.n	800ce46 <__sflush_r+0x92>
 800cde4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cde6:	89a3      	ldrh	r3, [r4, #12]
 800cde8:	0759      	lsls	r1, r3, #29
 800cdea:	d505      	bpl.n	800cdf8 <__sflush_r+0x44>
 800cdec:	6863      	ldr	r3, [r4, #4]
 800cdee:	1ad2      	subs	r2, r2, r3
 800cdf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cdf2:	b10b      	cbz	r3, 800cdf8 <__sflush_r+0x44>
 800cdf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cdf6:	1ad2      	subs	r2, r2, r3
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cdfc:	6a21      	ldr	r1, [r4, #32]
 800cdfe:	4628      	mov	r0, r5
 800ce00:	47b0      	blx	r6
 800ce02:	1c43      	adds	r3, r0, #1
 800ce04:	89a3      	ldrh	r3, [r4, #12]
 800ce06:	d106      	bne.n	800ce16 <__sflush_r+0x62>
 800ce08:	6829      	ldr	r1, [r5, #0]
 800ce0a:	291d      	cmp	r1, #29
 800ce0c:	d82b      	bhi.n	800ce66 <__sflush_r+0xb2>
 800ce0e:	4a2a      	ldr	r2, [pc, #168]	@ (800ceb8 <__sflush_r+0x104>)
 800ce10:	40ca      	lsrs	r2, r1
 800ce12:	07d6      	lsls	r6, r2, #31
 800ce14:	d527      	bpl.n	800ce66 <__sflush_r+0xb2>
 800ce16:	2200      	movs	r2, #0
 800ce18:	6062      	str	r2, [r4, #4]
 800ce1a:	04d9      	lsls	r1, r3, #19
 800ce1c:	6922      	ldr	r2, [r4, #16]
 800ce1e:	6022      	str	r2, [r4, #0]
 800ce20:	d504      	bpl.n	800ce2c <__sflush_r+0x78>
 800ce22:	1c42      	adds	r2, r0, #1
 800ce24:	d101      	bne.n	800ce2a <__sflush_r+0x76>
 800ce26:	682b      	ldr	r3, [r5, #0]
 800ce28:	b903      	cbnz	r3, 800ce2c <__sflush_r+0x78>
 800ce2a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ce2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce2e:	602f      	str	r7, [r5, #0]
 800ce30:	b1b9      	cbz	r1, 800ce62 <__sflush_r+0xae>
 800ce32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce36:	4299      	cmp	r1, r3
 800ce38:	d002      	beq.n	800ce40 <__sflush_r+0x8c>
 800ce3a:	4628      	mov	r0, r5
 800ce3c:	f7ff f9e8 	bl	800c210 <_free_r>
 800ce40:	2300      	movs	r3, #0
 800ce42:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce44:	e00d      	b.n	800ce62 <__sflush_r+0xae>
 800ce46:	2301      	movs	r3, #1
 800ce48:	4628      	mov	r0, r5
 800ce4a:	47b0      	blx	r6
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	1c50      	adds	r0, r2, #1
 800ce50:	d1c9      	bne.n	800cde6 <__sflush_r+0x32>
 800ce52:	682b      	ldr	r3, [r5, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d0c6      	beq.n	800cde6 <__sflush_r+0x32>
 800ce58:	2b1d      	cmp	r3, #29
 800ce5a:	d001      	beq.n	800ce60 <__sflush_r+0xac>
 800ce5c:	2b16      	cmp	r3, #22
 800ce5e:	d11e      	bne.n	800ce9e <__sflush_r+0xea>
 800ce60:	602f      	str	r7, [r5, #0]
 800ce62:	2000      	movs	r0, #0
 800ce64:	e022      	b.n	800ceac <__sflush_r+0xf8>
 800ce66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce6a:	b21b      	sxth	r3, r3
 800ce6c:	e01b      	b.n	800cea6 <__sflush_r+0xf2>
 800ce6e:	690f      	ldr	r7, [r1, #16]
 800ce70:	2f00      	cmp	r7, #0
 800ce72:	d0f6      	beq.n	800ce62 <__sflush_r+0xae>
 800ce74:	0793      	lsls	r3, r2, #30
 800ce76:	680e      	ldr	r6, [r1, #0]
 800ce78:	bf08      	it	eq
 800ce7a:	694b      	ldreq	r3, [r1, #20]
 800ce7c:	600f      	str	r7, [r1, #0]
 800ce7e:	bf18      	it	ne
 800ce80:	2300      	movne	r3, #0
 800ce82:	eba6 0807 	sub.w	r8, r6, r7
 800ce86:	608b      	str	r3, [r1, #8]
 800ce88:	f1b8 0f00 	cmp.w	r8, #0
 800ce8c:	dde9      	ble.n	800ce62 <__sflush_r+0xae>
 800ce8e:	6a21      	ldr	r1, [r4, #32]
 800ce90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ce92:	4643      	mov	r3, r8
 800ce94:	463a      	mov	r2, r7
 800ce96:	4628      	mov	r0, r5
 800ce98:	47b0      	blx	r6
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	dc08      	bgt.n	800ceb0 <__sflush_r+0xfc>
 800ce9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cea6:	81a3      	strh	r3, [r4, #12]
 800cea8:	f04f 30ff 	mov.w	r0, #4294967295
 800ceac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceb0:	4407      	add	r7, r0
 800ceb2:	eba8 0800 	sub.w	r8, r8, r0
 800ceb6:	e7e7      	b.n	800ce88 <__sflush_r+0xd4>
 800ceb8:	20400001 	.word	0x20400001

0800cebc <_fflush_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	690b      	ldr	r3, [r1, #16]
 800cec0:	4605      	mov	r5, r0
 800cec2:	460c      	mov	r4, r1
 800cec4:	b913      	cbnz	r3, 800cecc <_fflush_r+0x10>
 800cec6:	2500      	movs	r5, #0
 800cec8:	4628      	mov	r0, r5
 800ceca:	bd38      	pop	{r3, r4, r5, pc}
 800cecc:	b118      	cbz	r0, 800ced6 <_fflush_r+0x1a>
 800cece:	6a03      	ldr	r3, [r0, #32]
 800ced0:	b90b      	cbnz	r3, 800ced6 <_fflush_r+0x1a>
 800ced2:	f7fe f9f3 	bl	800b2bc <__sinit>
 800ced6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d0f3      	beq.n	800cec6 <_fflush_r+0xa>
 800cede:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cee0:	07d0      	lsls	r0, r2, #31
 800cee2:	d404      	bmi.n	800ceee <_fflush_r+0x32>
 800cee4:	0599      	lsls	r1, r3, #22
 800cee6:	d402      	bmi.n	800ceee <_fflush_r+0x32>
 800cee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ceea:	f7fe fb26 	bl	800b53a <__retarget_lock_acquire_recursive>
 800ceee:	4628      	mov	r0, r5
 800cef0:	4621      	mov	r1, r4
 800cef2:	f7ff ff5f 	bl	800cdb4 <__sflush_r>
 800cef6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cef8:	07da      	lsls	r2, r3, #31
 800cefa:	4605      	mov	r5, r0
 800cefc:	d4e4      	bmi.n	800cec8 <_fflush_r+0xc>
 800cefe:	89a3      	ldrh	r3, [r4, #12]
 800cf00:	059b      	lsls	r3, r3, #22
 800cf02:	d4e1      	bmi.n	800cec8 <_fflush_r+0xc>
 800cf04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf06:	f7fe fb19 	bl	800b53c <__retarget_lock_release_recursive>
 800cf0a:	e7dd      	b.n	800cec8 <_fflush_r+0xc>

0800cf0c <memmove>:
 800cf0c:	4288      	cmp	r0, r1
 800cf0e:	b510      	push	{r4, lr}
 800cf10:	eb01 0402 	add.w	r4, r1, r2
 800cf14:	d902      	bls.n	800cf1c <memmove+0x10>
 800cf16:	4284      	cmp	r4, r0
 800cf18:	4623      	mov	r3, r4
 800cf1a:	d807      	bhi.n	800cf2c <memmove+0x20>
 800cf1c:	1e43      	subs	r3, r0, #1
 800cf1e:	42a1      	cmp	r1, r4
 800cf20:	d008      	beq.n	800cf34 <memmove+0x28>
 800cf22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf2a:	e7f8      	b.n	800cf1e <memmove+0x12>
 800cf2c:	4402      	add	r2, r0
 800cf2e:	4601      	mov	r1, r0
 800cf30:	428a      	cmp	r2, r1
 800cf32:	d100      	bne.n	800cf36 <memmove+0x2a>
 800cf34:	bd10      	pop	{r4, pc}
 800cf36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf3e:	e7f7      	b.n	800cf30 <memmove+0x24>

0800cf40 <_sbrk_r>:
 800cf40:	b538      	push	{r3, r4, r5, lr}
 800cf42:	4d06      	ldr	r5, [pc, #24]	@ (800cf5c <_sbrk_r+0x1c>)
 800cf44:	2300      	movs	r3, #0
 800cf46:	4604      	mov	r4, r0
 800cf48:	4608      	mov	r0, r1
 800cf4a:	602b      	str	r3, [r5, #0]
 800cf4c:	f7f7 fa7c 	bl	8004448 <_sbrk>
 800cf50:	1c43      	adds	r3, r0, #1
 800cf52:	d102      	bne.n	800cf5a <_sbrk_r+0x1a>
 800cf54:	682b      	ldr	r3, [r5, #0]
 800cf56:	b103      	cbz	r3, 800cf5a <_sbrk_r+0x1a>
 800cf58:	6023      	str	r3, [r4, #0]
 800cf5a:	bd38      	pop	{r3, r4, r5, pc}
 800cf5c:	20000eb0 	.word	0x20000eb0

0800cf60 <__assert_func>:
 800cf60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf62:	4614      	mov	r4, r2
 800cf64:	461a      	mov	r2, r3
 800cf66:	4b09      	ldr	r3, [pc, #36]	@ (800cf8c <__assert_func+0x2c>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	4605      	mov	r5, r0
 800cf6c:	68d8      	ldr	r0, [r3, #12]
 800cf6e:	b14c      	cbz	r4, 800cf84 <__assert_func+0x24>
 800cf70:	4b07      	ldr	r3, [pc, #28]	@ (800cf90 <__assert_func+0x30>)
 800cf72:	9100      	str	r1, [sp, #0]
 800cf74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf78:	4906      	ldr	r1, [pc, #24]	@ (800cf94 <__assert_func+0x34>)
 800cf7a:	462b      	mov	r3, r5
 800cf7c:	f000 f870 	bl	800d060 <fiprintf>
 800cf80:	f000 f880 	bl	800d084 <abort>
 800cf84:	4b04      	ldr	r3, [pc, #16]	@ (800cf98 <__assert_func+0x38>)
 800cf86:	461c      	mov	r4, r3
 800cf88:	e7f3      	b.n	800cf72 <__assert_func+0x12>
 800cf8a:	bf00      	nop
 800cf8c:	20000078 	.word	0x20000078
 800cf90:	0800dd41 	.word	0x0800dd41
 800cf94:	0800dd4e 	.word	0x0800dd4e
 800cf98:	0800dd7c 	.word	0x0800dd7c

0800cf9c <_calloc_r>:
 800cf9c:	b570      	push	{r4, r5, r6, lr}
 800cf9e:	fba1 5402 	umull	r5, r4, r1, r2
 800cfa2:	b934      	cbnz	r4, 800cfb2 <_calloc_r+0x16>
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	f7ff f9a7 	bl	800c2f8 <_malloc_r>
 800cfaa:	4606      	mov	r6, r0
 800cfac:	b928      	cbnz	r0, 800cfba <_calloc_r+0x1e>
 800cfae:	4630      	mov	r0, r6
 800cfb0:	bd70      	pop	{r4, r5, r6, pc}
 800cfb2:	220c      	movs	r2, #12
 800cfb4:	6002      	str	r2, [r0, #0]
 800cfb6:	2600      	movs	r6, #0
 800cfb8:	e7f9      	b.n	800cfae <_calloc_r+0x12>
 800cfba:	462a      	mov	r2, r5
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	f7fe fa2c 	bl	800b41a <memset>
 800cfc2:	e7f4      	b.n	800cfae <_calloc_r+0x12>

0800cfc4 <__ascii_mbtowc>:
 800cfc4:	b082      	sub	sp, #8
 800cfc6:	b901      	cbnz	r1, 800cfca <__ascii_mbtowc+0x6>
 800cfc8:	a901      	add	r1, sp, #4
 800cfca:	b142      	cbz	r2, 800cfde <__ascii_mbtowc+0x1a>
 800cfcc:	b14b      	cbz	r3, 800cfe2 <__ascii_mbtowc+0x1e>
 800cfce:	7813      	ldrb	r3, [r2, #0]
 800cfd0:	600b      	str	r3, [r1, #0]
 800cfd2:	7812      	ldrb	r2, [r2, #0]
 800cfd4:	1e10      	subs	r0, r2, #0
 800cfd6:	bf18      	it	ne
 800cfd8:	2001      	movne	r0, #1
 800cfda:	b002      	add	sp, #8
 800cfdc:	4770      	bx	lr
 800cfde:	4610      	mov	r0, r2
 800cfe0:	e7fb      	b.n	800cfda <__ascii_mbtowc+0x16>
 800cfe2:	f06f 0001 	mvn.w	r0, #1
 800cfe6:	e7f8      	b.n	800cfda <__ascii_mbtowc+0x16>

0800cfe8 <_realloc_r>:
 800cfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfec:	4607      	mov	r7, r0
 800cfee:	4614      	mov	r4, r2
 800cff0:	460d      	mov	r5, r1
 800cff2:	b921      	cbnz	r1, 800cffe <_realloc_r+0x16>
 800cff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cff8:	4611      	mov	r1, r2
 800cffa:	f7ff b97d 	b.w	800c2f8 <_malloc_r>
 800cffe:	b92a      	cbnz	r2, 800d00c <_realloc_r+0x24>
 800d000:	f7ff f906 	bl	800c210 <_free_r>
 800d004:	4625      	mov	r5, r4
 800d006:	4628      	mov	r0, r5
 800d008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d00c:	f000 f841 	bl	800d092 <_malloc_usable_size_r>
 800d010:	4284      	cmp	r4, r0
 800d012:	4606      	mov	r6, r0
 800d014:	d802      	bhi.n	800d01c <_realloc_r+0x34>
 800d016:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d01a:	d8f4      	bhi.n	800d006 <_realloc_r+0x1e>
 800d01c:	4621      	mov	r1, r4
 800d01e:	4638      	mov	r0, r7
 800d020:	f7ff f96a 	bl	800c2f8 <_malloc_r>
 800d024:	4680      	mov	r8, r0
 800d026:	b908      	cbnz	r0, 800d02c <_realloc_r+0x44>
 800d028:	4645      	mov	r5, r8
 800d02a:	e7ec      	b.n	800d006 <_realloc_r+0x1e>
 800d02c:	42b4      	cmp	r4, r6
 800d02e:	4622      	mov	r2, r4
 800d030:	4629      	mov	r1, r5
 800d032:	bf28      	it	cs
 800d034:	4632      	movcs	r2, r6
 800d036:	f7fe fa82 	bl	800b53e <memcpy>
 800d03a:	4629      	mov	r1, r5
 800d03c:	4638      	mov	r0, r7
 800d03e:	f7ff f8e7 	bl	800c210 <_free_r>
 800d042:	e7f1      	b.n	800d028 <_realloc_r+0x40>

0800d044 <__ascii_wctomb>:
 800d044:	4603      	mov	r3, r0
 800d046:	4608      	mov	r0, r1
 800d048:	b141      	cbz	r1, 800d05c <__ascii_wctomb+0x18>
 800d04a:	2aff      	cmp	r2, #255	@ 0xff
 800d04c:	d904      	bls.n	800d058 <__ascii_wctomb+0x14>
 800d04e:	228a      	movs	r2, #138	@ 0x8a
 800d050:	601a      	str	r2, [r3, #0]
 800d052:	f04f 30ff 	mov.w	r0, #4294967295
 800d056:	4770      	bx	lr
 800d058:	700a      	strb	r2, [r1, #0]
 800d05a:	2001      	movs	r0, #1
 800d05c:	4770      	bx	lr
	...

0800d060 <fiprintf>:
 800d060:	b40e      	push	{r1, r2, r3}
 800d062:	b503      	push	{r0, r1, lr}
 800d064:	4601      	mov	r1, r0
 800d066:	ab03      	add	r3, sp, #12
 800d068:	4805      	ldr	r0, [pc, #20]	@ (800d080 <fiprintf+0x20>)
 800d06a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d06e:	6800      	ldr	r0, [r0, #0]
 800d070:	9301      	str	r3, [sp, #4]
 800d072:	f000 f83f 	bl	800d0f4 <_vfiprintf_r>
 800d076:	b002      	add	sp, #8
 800d078:	f85d eb04 	ldr.w	lr, [sp], #4
 800d07c:	b003      	add	sp, #12
 800d07e:	4770      	bx	lr
 800d080:	20000078 	.word	0x20000078

0800d084 <abort>:
 800d084:	b508      	push	{r3, lr}
 800d086:	2006      	movs	r0, #6
 800d088:	f000 fa08 	bl	800d49c <raise>
 800d08c:	2001      	movs	r0, #1
 800d08e:	f7f7 f963 	bl	8004358 <_exit>

0800d092 <_malloc_usable_size_r>:
 800d092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d096:	1f18      	subs	r0, r3, #4
 800d098:	2b00      	cmp	r3, #0
 800d09a:	bfbc      	itt	lt
 800d09c:	580b      	ldrlt	r3, [r1, r0]
 800d09e:	18c0      	addlt	r0, r0, r3
 800d0a0:	4770      	bx	lr

0800d0a2 <__sfputc_r>:
 800d0a2:	6893      	ldr	r3, [r2, #8]
 800d0a4:	3b01      	subs	r3, #1
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	b410      	push	{r4}
 800d0aa:	6093      	str	r3, [r2, #8]
 800d0ac:	da08      	bge.n	800d0c0 <__sfputc_r+0x1e>
 800d0ae:	6994      	ldr	r4, [r2, #24]
 800d0b0:	42a3      	cmp	r3, r4
 800d0b2:	db01      	blt.n	800d0b8 <__sfputc_r+0x16>
 800d0b4:	290a      	cmp	r1, #10
 800d0b6:	d103      	bne.n	800d0c0 <__sfputc_r+0x1e>
 800d0b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0bc:	f000 b932 	b.w	800d324 <__swbuf_r>
 800d0c0:	6813      	ldr	r3, [r2, #0]
 800d0c2:	1c58      	adds	r0, r3, #1
 800d0c4:	6010      	str	r0, [r2, #0]
 800d0c6:	7019      	strb	r1, [r3, #0]
 800d0c8:	4608      	mov	r0, r1
 800d0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <__sfputs_r>:
 800d0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0d2:	4606      	mov	r6, r0
 800d0d4:	460f      	mov	r7, r1
 800d0d6:	4614      	mov	r4, r2
 800d0d8:	18d5      	adds	r5, r2, r3
 800d0da:	42ac      	cmp	r4, r5
 800d0dc:	d101      	bne.n	800d0e2 <__sfputs_r+0x12>
 800d0de:	2000      	movs	r0, #0
 800d0e0:	e007      	b.n	800d0f2 <__sfputs_r+0x22>
 800d0e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0e6:	463a      	mov	r2, r7
 800d0e8:	4630      	mov	r0, r6
 800d0ea:	f7ff ffda 	bl	800d0a2 <__sfputc_r>
 800d0ee:	1c43      	adds	r3, r0, #1
 800d0f0:	d1f3      	bne.n	800d0da <__sfputs_r+0xa>
 800d0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0f4 <_vfiprintf_r>:
 800d0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f8:	460d      	mov	r5, r1
 800d0fa:	b09d      	sub	sp, #116	@ 0x74
 800d0fc:	4614      	mov	r4, r2
 800d0fe:	4698      	mov	r8, r3
 800d100:	4606      	mov	r6, r0
 800d102:	b118      	cbz	r0, 800d10c <_vfiprintf_r+0x18>
 800d104:	6a03      	ldr	r3, [r0, #32]
 800d106:	b90b      	cbnz	r3, 800d10c <_vfiprintf_r+0x18>
 800d108:	f7fe f8d8 	bl	800b2bc <__sinit>
 800d10c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d10e:	07d9      	lsls	r1, r3, #31
 800d110:	d405      	bmi.n	800d11e <_vfiprintf_r+0x2a>
 800d112:	89ab      	ldrh	r3, [r5, #12]
 800d114:	059a      	lsls	r2, r3, #22
 800d116:	d402      	bmi.n	800d11e <_vfiprintf_r+0x2a>
 800d118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d11a:	f7fe fa0e 	bl	800b53a <__retarget_lock_acquire_recursive>
 800d11e:	89ab      	ldrh	r3, [r5, #12]
 800d120:	071b      	lsls	r3, r3, #28
 800d122:	d501      	bpl.n	800d128 <_vfiprintf_r+0x34>
 800d124:	692b      	ldr	r3, [r5, #16]
 800d126:	b99b      	cbnz	r3, 800d150 <_vfiprintf_r+0x5c>
 800d128:	4629      	mov	r1, r5
 800d12a:	4630      	mov	r0, r6
 800d12c:	f000 f938 	bl	800d3a0 <__swsetup_r>
 800d130:	b170      	cbz	r0, 800d150 <_vfiprintf_r+0x5c>
 800d132:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d134:	07dc      	lsls	r4, r3, #31
 800d136:	d504      	bpl.n	800d142 <_vfiprintf_r+0x4e>
 800d138:	f04f 30ff 	mov.w	r0, #4294967295
 800d13c:	b01d      	add	sp, #116	@ 0x74
 800d13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d142:	89ab      	ldrh	r3, [r5, #12]
 800d144:	0598      	lsls	r0, r3, #22
 800d146:	d4f7      	bmi.n	800d138 <_vfiprintf_r+0x44>
 800d148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d14a:	f7fe f9f7 	bl	800b53c <__retarget_lock_release_recursive>
 800d14e:	e7f3      	b.n	800d138 <_vfiprintf_r+0x44>
 800d150:	2300      	movs	r3, #0
 800d152:	9309      	str	r3, [sp, #36]	@ 0x24
 800d154:	2320      	movs	r3, #32
 800d156:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d15a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d15e:	2330      	movs	r3, #48	@ 0x30
 800d160:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d310 <_vfiprintf_r+0x21c>
 800d164:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d168:	f04f 0901 	mov.w	r9, #1
 800d16c:	4623      	mov	r3, r4
 800d16e:	469a      	mov	sl, r3
 800d170:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d174:	b10a      	cbz	r2, 800d17a <_vfiprintf_r+0x86>
 800d176:	2a25      	cmp	r2, #37	@ 0x25
 800d178:	d1f9      	bne.n	800d16e <_vfiprintf_r+0x7a>
 800d17a:	ebba 0b04 	subs.w	fp, sl, r4
 800d17e:	d00b      	beq.n	800d198 <_vfiprintf_r+0xa4>
 800d180:	465b      	mov	r3, fp
 800d182:	4622      	mov	r2, r4
 800d184:	4629      	mov	r1, r5
 800d186:	4630      	mov	r0, r6
 800d188:	f7ff ffa2 	bl	800d0d0 <__sfputs_r>
 800d18c:	3001      	adds	r0, #1
 800d18e:	f000 80a7 	beq.w	800d2e0 <_vfiprintf_r+0x1ec>
 800d192:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d194:	445a      	add	r2, fp
 800d196:	9209      	str	r2, [sp, #36]	@ 0x24
 800d198:	f89a 3000 	ldrb.w	r3, [sl]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	f000 809f 	beq.w	800d2e0 <_vfiprintf_r+0x1ec>
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1ac:	f10a 0a01 	add.w	sl, sl, #1
 800d1b0:	9304      	str	r3, [sp, #16]
 800d1b2:	9307      	str	r3, [sp, #28]
 800d1b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1ba:	4654      	mov	r4, sl
 800d1bc:	2205      	movs	r2, #5
 800d1be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1c2:	4853      	ldr	r0, [pc, #332]	@ (800d310 <_vfiprintf_r+0x21c>)
 800d1c4:	f7f3 f824 	bl	8000210 <memchr>
 800d1c8:	9a04      	ldr	r2, [sp, #16]
 800d1ca:	b9d8      	cbnz	r0, 800d204 <_vfiprintf_r+0x110>
 800d1cc:	06d1      	lsls	r1, r2, #27
 800d1ce:	bf44      	itt	mi
 800d1d0:	2320      	movmi	r3, #32
 800d1d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1d6:	0713      	lsls	r3, r2, #28
 800d1d8:	bf44      	itt	mi
 800d1da:	232b      	movmi	r3, #43	@ 0x2b
 800d1dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1e0:	f89a 3000 	ldrb.w	r3, [sl]
 800d1e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1e6:	d015      	beq.n	800d214 <_vfiprintf_r+0x120>
 800d1e8:	9a07      	ldr	r2, [sp, #28]
 800d1ea:	4654      	mov	r4, sl
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	f04f 0c0a 	mov.w	ip, #10
 800d1f2:	4621      	mov	r1, r4
 800d1f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1f8:	3b30      	subs	r3, #48	@ 0x30
 800d1fa:	2b09      	cmp	r3, #9
 800d1fc:	d94b      	bls.n	800d296 <_vfiprintf_r+0x1a2>
 800d1fe:	b1b0      	cbz	r0, 800d22e <_vfiprintf_r+0x13a>
 800d200:	9207      	str	r2, [sp, #28]
 800d202:	e014      	b.n	800d22e <_vfiprintf_r+0x13a>
 800d204:	eba0 0308 	sub.w	r3, r0, r8
 800d208:	fa09 f303 	lsl.w	r3, r9, r3
 800d20c:	4313      	orrs	r3, r2
 800d20e:	9304      	str	r3, [sp, #16]
 800d210:	46a2      	mov	sl, r4
 800d212:	e7d2      	b.n	800d1ba <_vfiprintf_r+0xc6>
 800d214:	9b03      	ldr	r3, [sp, #12]
 800d216:	1d19      	adds	r1, r3, #4
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	9103      	str	r1, [sp, #12]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	bfbb      	ittet	lt
 800d220:	425b      	neglt	r3, r3
 800d222:	f042 0202 	orrlt.w	r2, r2, #2
 800d226:	9307      	strge	r3, [sp, #28]
 800d228:	9307      	strlt	r3, [sp, #28]
 800d22a:	bfb8      	it	lt
 800d22c:	9204      	strlt	r2, [sp, #16]
 800d22e:	7823      	ldrb	r3, [r4, #0]
 800d230:	2b2e      	cmp	r3, #46	@ 0x2e
 800d232:	d10a      	bne.n	800d24a <_vfiprintf_r+0x156>
 800d234:	7863      	ldrb	r3, [r4, #1]
 800d236:	2b2a      	cmp	r3, #42	@ 0x2a
 800d238:	d132      	bne.n	800d2a0 <_vfiprintf_r+0x1ac>
 800d23a:	9b03      	ldr	r3, [sp, #12]
 800d23c:	1d1a      	adds	r2, r3, #4
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	9203      	str	r2, [sp, #12]
 800d242:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d246:	3402      	adds	r4, #2
 800d248:	9305      	str	r3, [sp, #20]
 800d24a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d320 <_vfiprintf_r+0x22c>
 800d24e:	7821      	ldrb	r1, [r4, #0]
 800d250:	2203      	movs	r2, #3
 800d252:	4650      	mov	r0, sl
 800d254:	f7f2 ffdc 	bl	8000210 <memchr>
 800d258:	b138      	cbz	r0, 800d26a <_vfiprintf_r+0x176>
 800d25a:	9b04      	ldr	r3, [sp, #16]
 800d25c:	eba0 000a 	sub.w	r0, r0, sl
 800d260:	2240      	movs	r2, #64	@ 0x40
 800d262:	4082      	lsls	r2, r0
 800d264:	4313      	orrs	r3, r2
 800d266:	3401      	adds	r4, #1
 800d268:	9304      	str	r3, [sp, #16]
 800d26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d26e:	4829      	ldr	r0, [pc, #164]	@ (800d314 <_vfiprintf_r+0x220>)
 800d270:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d274:	2206      	movs	r2, #6
 800d276:	f7f2 ffcb 	bl	8000210 <memchr>
 800d27a:	2800      	cmp	r0, #0
 800d27c:	d03f      	beq.n	800d2fe <_vfiprintf_r+0x20a>
 800d27e:	4b26      	ldr	r3, [pc, #152]	@ (800d318 <_vfiprintf_r+0x224>)
 800d280:	bb1b      	cbnz	r3, 800d2ca <_vfiprintf_r+0x1d6>
 800d282:	9b03      	ldr	r3, [sp, #12]
 800d284:	3307      	adds	r3, #7
 800d286:	f023 0307 	bic.w	r3, r3, #7
 800d28a:	3308      	adds	r3, #8
 800d28c:	9303      	str	r3, [sp, #12]
 800d28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d290:	443b      	add	r3, r7
 800d292:	9309      	str	r3, [sp, #36]	@ 0x24
 800d294:	e76a      	b.n	800d16c <_vfiprintf_r+0x78>
 800d296:	fb0c 3202 	mla	r2, ip, r2, r3
 800d29a:	460c      	mov	r4, r1
 800d29c:	2001      	movs	r0, #1
 800d29e:	e7a8      	b.n	800d1f2 <_vfiprintf_r+0xfe>
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	3401      	adds	r4, #1
 800d2a4:	9305      	str	r3, [sp, #20]
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	f04f 0c0a 	mov.w	ip, #10
 800d2ac:	4620      	mov	r0, r4
 800d2ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2b2:	3a30      	subs	r2, #48	@ 0x30
 800d2b4:	2a09      	cmp	r2, #9
 800d2b6:	d903      	bls.n	800d2c0 <_vfiprintf_r+0x1cc>
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d0c6      	beq.n	800d24a <_vfiprintf_r+0x156>
 800d2bc:	9105      	str	r1, [sp, #20]
 800d2be:	e7c4      	b.n	800d24a <_vfiprintf_r+0x156>
 800d2c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2c4:	4604      	mov	r4, r0
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e7f0      	b.n	800d2ac <_vfiprintf_r+0x1b8>
 800d2ca:	ab03      	add	r3, sp, #12
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	462a      	mov	r2, r5
 800d2d0:	4b12      	ldr	r3, [pc, #72]	@ (800d31c <_vfiprintf_r+0x228>)
 800d2d2:	a904      	add	r1, sp, #16
 800d2d4:	4630      	mov	r0, r6
 800d2d6:	f7fd fbaf 	bl	800aa38 <_printf_float>
 800d2da:	4607      	mov	r7, r0
 800d2dc:	1c78      	adds	r0, r7, #1
 800d2de:	d1d6      	bne.n	800d28e <_vfiprintf_r+0x19a>
 800d2e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2e2:	07d9      	lsls	r1, r3, #31
 800d2e4:	d405      	bmi.n	800d2f2 <_vfiprintf_r+0x1fe>
 800d2e6:	89ab      	ldrh	r3, [r5, #12]
 800d2e8:	059a      	lsls	r2, r3, #22
 800d2ea:	d402      	bmi.n	800d2f2 <_vfiprintf_r+0x1fe>
 800d2ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2ee:	f7fe f925 	bl	800b53c <__retarget_lock_release_recursive>
 800d2f2:	89ab      	ldrh	r3, [r5, #12]
 800d2f4:	065b      	lsls	r3, r3, #25
 800d2f6:	f53f af1f 	bmi.w	800d138 <_vfiprintf_r+0x44>
 800d2fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2fc:	e71e      	b.n	800d13c <_vfiprintf_r+0x48>
 800d2fe:	ab03      	add	r3, sp, #12
 800d300:	9300      	str	r3, [sp, #0]
 800d302:	462a      	mov	r2, r5
 800d304:	4b05      	ldr	r3, [pc, #20]	@ (800d31c <_vfiprintf_r+0x228>)
 800d306:	a904      	add	r1, sp, #16
 800d308:	4630      	mov	r0, r6
 800d30a:	f7fd fe2d 	bl	800af68 <_printf_i>
 800d30e:	e7e4      	b.n	800d2da <_vfiprintf_r+0x1e6>
 800d310:	0800dd26 	.word	0x0800dd26
 800d314:	0800dd30 	.word	0x0800dd30
 800d318:	0800aa39 	.word	0x0800aa39
 800d31c:	0800d0d1 	.word	0x0800d0d1
 800d320:	0800dd2c 	.word	0x0800dd2c

0800d324 <__swbuf_r>:
 800d324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d326:	460e      	mov	r6, r1
 800d328:	4614      	mov	r4, r2
 800d32a:	4605      	mov	r5, r0
 800d32c:	b118      	cbz	r0, 800d336 <__swbuf_r+0x12>
 800d32e:	6a03      	ldr	r3, [r0, #32]
 800d330:	b90b      	cbnz	r3, 800d336 <__swbuf_r+0x12>
 800d332:	f7fd ffc3 	bl	800b2bc <__sinit>
 800d336:	69a3      	ldr	r3, [r4, #24]
 800d338:	60a3      	str	r3, [r4, #8]
 800d33a:	89a3      	ldrh	r3, [r4, #12]
 800d33c:	071a      	lsls	r2, r3, #28
 800d33e:	d501      	bpl.n	800d344 <__swbuf_r+0x20>
 800d340:	6923      	ldr	r3, [r4, #16]
 800d342:	b943      	cbnz	r3, 800d356 <__swbuf_r+0x32>
 800d344:	4621      	mov	r1, r4
 800d346:	4628      	mov	r0, r5
 800d348:	f000 f82a 	bl	800d3a0 <__swsetup_r>
 800d34c:	b118      	cbz	r0, 800d356 <__swbuf_r+0x32>
 800d34e:	f04f 37ff 	mov.w	r7, #4294967295
 800d352:	4638      	mov	r0, r7
 800d354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d356:	6823      	ldr	r3, [r4, #0]
 800d358:	6922      	ldr	r2, [r4, #16]
 800d35a:	1a98      	subs	r0, r3, r2
 800d35c:	6963      	ldr	r3, [r4, #20]
 800d35e:	b2f6      	uxtb	r6, r6
 800d360:	4283      	cmp	r3, r0
 800d362:	4637      	mov	r7, r6
 800d364:	dc05      	bgt.n	800d372 <__swbuf_r+0x4e>
 800d366:	4621      	mov	r1, r4
 800d368:	4628      	mov	r0, r5
 800d36a:	f7ff fda7 	bl	800cebc <_fflush_r>
 800d36e:	2800      	cmp	r0, #0
 800d370:	d1ed      	bne.n	800d34e <__swbuf_r+0x2a>
 800d372:	68a3      	ldr	r3, [r4, #8]
 800d374:	3b01      	subs	r3, #1
 800d376:	60a3      	str	r3, [r4, #8]
 800d378:	6823      	ldr	r3, [r4, #0]
 800d37a:	1c5a      	adds	r2, r3, #1
 800d37c:	6022      	str	r2, [r4, #0]
 800d37e:	701e      	strb	r6, [r3, #0]
 800d380:	6962      	ldr	r2, [r4, #20]
 800d382:	1c43      	adds	r3, r0, #1
 800d384:	429a      	cmp	r2, r3
 800d386:	d004      	beq.n	800d392 <__swbuf_r+0x6e>
 800d388:	89a3      	ldrh	r3, [r4, #12]
 800d38a:	07db      	lsls	r3, r3, #31
 800d38c:	d5e1      	bpl.n	800d352 <__swbuf_r+0x2e>
 800d38e:	2e0a      	cmp	r6, #10
 800d390:	d1df      	bne.n	800d352 <__swbuf_r+0x2e>
 800d392:	4621      	mov	r1, r4
 800d394:	4628      	mov	r0, r5
 800d396:	f7ff fd91 	bl	800cebc <_fflush_r>
 800d39a:	2800      	cmp	r0, #0
 800d39c:	d0d9      	beq.n	800d352 <__swbuf_r+0x2e>
 800d39e:	e7d6      	b.n	800d34e <__swbuf_r+0x2a>

0800d3a0 <__swsetup_r>:
 800d3a0:	b538      	push	{r3, r4, r5, lr}
 800d3a2:	4b29      	ldr	r3, [pc, #164]	@ (800d448 <__swsetup_r+0xa8>)
 800d3a4:	4605      	mov	r5, r0
 800d3a6:	6818      	ldr	r0, [r3, #0]
 800d3a8:	460c      	mov	r4, r1
 800d3aa:	b118      	cbz	r0, 800d3b4 <__swsetup_r+0x14>
 800d3ac:	6a03      	ldr	r3, [r0, #32]
 800d3ae:	b90b      	cbnz	r3, 800d3b4 <__swsetup_r+0x14>
 800d3b0:	f7fd ff84 	bl	800b2bc <__sinit>
 800d3b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3b8:	0719      	lsls	r1, r3, #28
 800d3ba:	d422      	bmi.n	800d402 <__swsetup_r+0x62>
 800d3bc:	06da      	lsls	r2, r3, #27
 800d3be:	d407      	bmi.n	800d3d0 <__swsetup_r+0x30>
 800d3c0:	2209      	movs	r2, #9
 800d3c2:	602a      	str	r2, [r5, #0]
 800d3c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3c8:	81a3      	strh	r3, [r4, #12]
 800d3ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ce:	e033      	b.n	800d438 <__swsetup_r+0x98>
 800d3d0:	0758      	lsls	r0, r3, #29
 800d3d2:	d512      	bpl.n	800d3fa <__swsetup_r+0x5a>
 800d3d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d3d6:	b141      	cbz	r1, 800d3ea <__swsetup_r+0x4a>
 800d3d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d3dc:	4299      	cmp	r1, r3
 800d3de:	d002      	beq.n	800d3e6 <__swsetup_r+0x46>
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	f7fe ff15 	bl	800c210 <_free_r>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d3ea:	89a3      	ldrh	r3, [r4, #12]
 800d3ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d3f0:	81a3      	strh	r3, [r4, #12]
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	6063      	str	r3, [r4, #4]
 800d3f6:	6923      	ldr	r3, [r4, #16]
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	89a3      	ldrh	r3, [r4, #12]
 800d3fc:	f043 0308 	orr.w	r3, r3, #8
 800d400:	81a3      	strh	r3, [r4, #12]
 800d402:	6923      	ldr	r3, [r4, #16]
 800d404:	b94b      	cbnz	r3, 800d41a <__swsetup_r+0x7a>
 800d406:	89a3      	ldrh	r3, [r4, #12]
 800d408:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d40c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d410:	d003      	beq.n	800d41a <__swsetup_r+0x7a>
 800d412:	4621      	mov	r1, r4
 800d414:	4628      	mov	r0, r5
 800d416:	f000 f883 	bl	800d520 <__smakebuf_r>
 800d41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d41e:	f013 0201 	ands.w	r2, r3, #1
 800d422:	d00a      	beq.n	800d43a <__swsetup_r+0x9a>
 800d424:	2200      	movs	r2, #0
 800d426:	60a2      	str	r2, [r4, #8]
 800d428:	6962      	ldr	r2, [r4, #20]
 800d42a:	4252      	negs	r2, r2
 800d42c:	61a2      	str	r2, [r4, #24]
 800d42e:	6922      	ldr	r2, [r4, #16]
 800d430:	b942      	cbnz	r2, 800d444 <__swsetup_r+0xa4>
 800d432:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d436:	d1c5      	bne.n	800d3c4 <__swsetup_r+0x24>
 800d438:	bd38      	pop	{r3, r4, r5, pc}
 800d43a:	0799      	lsls	r1, r3, #30
 800d43c:	bf58      	it	pl
 800d43e:	6962      	ldrpl	r2, [r4, #20]
 800d440:	60a2      	str	r2, [r4, #8]
 800d442:	e7f4      	b.n	800d42e <__swsetup_r+0x8e>
 800d444:	2000      	movs	r0, #0
 800d446:	e7f7      	b.n	800d438 <__swsetup_r+0x98>
 800d448:	20000078 	.word	0x20000078

0800d44c <_raise_r>:
 800d44c:	291f      	cmp	r1, #31
 800d44e:	b538      	push	{r3, r4, r5, lr}
 800d450:	4605      	mov	r5, r0
 800d452:	460c      	mov	r4, r1
 800d454:	d904      	bls.n	800d460 <_raise_r+0x14>
 800d456:	2316      	movs	r3, #22
 800d458:	6003      	str	r3, [r0, #0]
 800d45a:	f04f 30ff 	mov.w	r0, #4294967295
 800d45e:	bd38      	pop	{r3, r4, r5, pc}
 800d460:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d462:	b112      	cbz	r2, 800d46a <_raise_r+0x1e>
 800d464:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d468:	b94b      	cbnz	r3, 800d47e <_raise_r+0x32>
 800d46a:	4628      	mov	r0, r5
 800d46c:	f000 f830 	bl	800d4d0 <_getpid_r>
 800d470:	4622      	mov	r2, r4
 800d472:	4601      	mov	r1, r0
 800d474:	4628      	mov	r0, r5
 800d476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d47a:	f000 b817 	b.w	800d4ac <_kill_r>
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d00a      	beq.n	800d498 <_raise_r+0x4c>
 800d482:	1c59      	adds	r1, r3, #1
 800d484:	d103      	bne.n	800d48e <_raise_r+0x42>
 800d486:	2316      	movs	r3, #22
 800d488:	6003      	str	r3, [r0, #0]
 800d48a:	2001      	movs	r0, #1
 800d48c:	e7e7      	b.n	800d45e <_raise_r+0x12>
 800d48e:	2100      	movs	r1, #0
 800d490:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d494:	4620      	mov	r0, r4
 800d496:	4798      	blx	r3
 800d498:	2000      	movs	r0, #0
 800d49a:	e7e0      	b.n	800d45e <_raise_r+0x12>

0800d49c <raise>:
 800d49c:	4b02      	ldr	r3, [pc, #8]	@ (800d4a8 <raise+0xc>)
 800d49e:	4601      	mov	r1, r0
 800d4a0:	6818      	ldr	r0, [r3, #0]
 800d4a2:	f7ff bfd3 	b.w	800d44c <_raise_r>
 800d4a6:	bf00      	nop
 800d4a8:	20000078 	.word	0x20000078

0800d4ac <_kill_r>:
 800d4ac:	b538      	push	{r3, r4, r5, lr}
 800d4ae:	4d07      	ldr	r5, [pc, #28]	@ (800d4cc <_kill_r+0x20>)
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	4608      	mov	r0, r1
 800d4b6:	4611      	mov	r1, r2
 800d4b8:	602b      	str	r3, [r5, #0]
 800d4ba:	f7f6 ff3d 	bl	8004338 <_kill>
 800d4be:	1c43      	adds	r3, r0, #1
 800d4c0:	d102      	bne.n	800d4c8 <_kill_r+0x1c>
 800d4c2:	682b      	ldr	r3, [r5, #0]
 800d4c4:	b103      	cbz	r3, 800d4c8 <_kill_r+0x1c>
 800d4c6:	6023      	str	r3, [r4, #0]
 800d4c8:	bd38      	pop	{r3, r4, r5, pc}
 800d4ca:	bf00      	nop
 800d4cc:	20000eb0 	.word	0x20000eb0

0800d4d0 <_getpid_r>:
 800d4d0:	f7f6 bf2a 	b.w	8004328 <_getpid>

0800d4d4 <__swhatbuf_r>:
 800d4d4:	b570      	push	{r4, r5, r6, lr}
 800d4d6:	460c      	mov	r4, r1
 800d4d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4dc:	2900      	cmp	r1, #0
 800d4de:	b096      	sub	sp, #88	@ 0x58
 800d4e0:	4615      	mov	r5, r2
 800d4e2:	461e      	mov	r6, r3
 800d4e4:	da0d      	bge.n	800d502 <__swhatbuf_r+0x2e>
 800d4e6:	89a3      	ldrh	r3, [r4, #12]
 800d4e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d4ec:	f04f 0100 	mov.w	r1, #0
 800d4f0:	bf14      	ite	ne
 800d4f2:	2340      	movne	r3, #64	@ 0x40
 800d4f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d4f8:	2000      	movs	r0, #0
 800d4fa:	6031      	str	r1, [r6, #0]
 800d4fc:	602b      	str	r3, [r5, #0]
 800d4fe:	b016      	add	sp, #88	@ 0x58
 800d500:	bd70      	pop	{r4, r5, r6, pc}
 800d502:	466a      	mov	r2, sp
 800d504:	f000 f848 	bl	800d598 <_fstat_r>
 800d508:	2800      	cmp	r0, #0
 800d50a:	dbec      	blt.n	800d4e6 <__swhatbuf_r+0x12>
 800d50c:	9901      	ldr	r1, [sp, #4]
 800d50e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d512:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d516:	4259      	negs	r1, r3
 800d518:	4159      	adcs	r1, r3
 800d51a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d51e:	e7eb      	b.n	800d4f8 <__swhatbuf_r+0x24>

0800d520 <__smakebuf_r>:
 800d520:	898b      	ldrh	r3, [r1, #12]
 800d522:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d524:	079d      	lsls	r5, r3, #30
 800d526:	4606      	mov	r6, r0
 800d528:	460c      	mov	r4, r1
 800d52a:	d507      	bpl.n	800d53c <__smakebuf_r+0x1c>
 800d52c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d530:	6023      	str	r3, [r4, #0]
 800d532:	6123      	str	r3, [r4, #16]
 800d534:	2301      	movs	r3, #1
 800d536:	6163      	str	r3, [r4, #20]
 800d538:	b003      	add	sp, #12
 800d53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d53c:	ab01      	add	r3, sp, #4
 800d53e:	466a      	mov	r2, sp
 800d540:	f7ff ffc8 	bl	800d4d4 <__swhatbuf_r>
 800d544:	9f00      	ldr	r7, [sp, #0]
 800d546:	4605      	mov	r5, r0
 800d548:	4639      	mov	r1, r7
 800d54a:	4630      	mov	r0, r6
 800d54c:	f7fe fed4 	bl	800c2f8 <_malloc_r>
 800d550:	b948      	cbnz	r0, 800d566 <__smakebuf_r+0x46>
 800d552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d556:	059a      	lsls	r2, r3, #22
 800d558:	d4ee      	bmi.n	800d538 <__smakebuf_r+0x18>
 800d55a:	f023 0303 	bic.w	r3, r3, #3
 800d55e:	f043 0302 	orr.w	r3, r3, #2
 800d562:	81a3      	strh	r3, [r4, #12]
 800d564:	e7e2      	b.n	800d52c <__smakebuf_r+0xc>
 800d566:	89a3      	ldrh	r3, [r4, #12]
 800d568:	6020      	str	r0, [r4, #0]
 800d56a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d56e:	81a3      	strh	r3, [r4, #12]
 800d570:	9b01      	ldr	r3, [sp, #4]
 800d572:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d576:	b15b      	cbz	r3, 800d590 <__smakebuf_r+0x70>
 800d578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d57c:	4630      	mov	r0, r6
 800d57e:	f000 f81d 	bl	800d5bc <_isatty_r>
 800d582:	b128      	cbz	r0, 800d590 <__smakebuf_r+0x70>
 800d584:	89a3      	ldrh	r3, [r4, #12]
 800d586:	f023 0303 	bic.w	r3, r3, #3
 800d58a:	f043 0301 	orr.w	r3, r3, #1
 800d58e:	81a3      	strh	r3, [r4, #12]
 800d590:	89a3      	ldrh	r3, [r4, #12]
 800d592:	431d      	orrs	r5, r3
 800d594:	81a5      	strh	r5, [r4, #12]
 800d596:	e7cf      	b.n	800d538 <__smakebuf_r+0x18>

0800d598 <_fstat_r>:
 800d598:	b538      	push	{r3, r4, r5, lr}
 800d59a:	4d07      	ldr	r5, [pc, #28]	@ (800d5b8 <_fstat_r+0x20>)
 800d59c:	2300      	movs	r3, #0
 800d59e:	4604      	mov	r4, r0
 800d5a0:	4608      	mov	r0, r1
 800d5a2:	4611      	mov	r1, r2
 800d5a4:	602b      	str	r3, [r5, #0]
 800d5a6:	f7f6 ff27 	bl	80043f8 <_fstat>
 800d5aa:	1c43      	adds	r3, r0, #1
 800d5ac:	d102      	bne.n	800d5b4 <_fstat_r+0x1c>
 800d5ae:	682b      	ldr	r3, [r5, #0]
 800d5b0:	b103      	cbz	r3, 800d5b4 <_fstat_r+0x1c>
 800d5b2:	6023      	str	r3, [r4, #0]
 800d5b4:	bd38      	pop	{r3, r4, r5, pc}
 800d5b6:	bf00      	nop
 800d5b8:	20000eb0 	.word	0x20000eb0

0800d5bc <_isatty_r>:
 800d5bc:	b538      	push	{r3, r4, r5, lr}
 800d5be:	4d06      	ldr	r5, [pc, #24]	@ (800d5d8 <_isatty_r+0x1c>)
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	4608      	mov	r0, r1
 800d5c6:	602b      	str	r3, [r5, #0]
 800d5c8:	f7f6 ff26 	bl	8004418 <_isatty>
 800d5cc:	1c43      	adds	r3, r0, #1
 800d5ce:	d102      	bne.n	800d5d6 <_isatty_r+0x1a>
 800d5d0:	682b      	ldr	r3, [r5, #0]
 800d5d2:	b103      	cbz	r3, 800d5d6 <_isatty_r+0x1a>
 800d5d4:	6023      	str	r3, [r4, #0]
 800d5d6:	bd38      	pop	{r3, r4, r5, pc}
 800d5d8:	20000eb0 	.word	0x20000eb0

0800d5dc <fmaxf>:
 800d5dc:	b508      	push	{r3, lr}
 800d5de:	ed2d 8b02 	vpush	{d8}
 800d5e2:	eeb0 8a40 	vmov.f32	s16, s0
 800d5e6:	eef0 8a60 	vmov.f32	s17, s1
 800d5ea:	f000 f831 	bl	800d650 <__fpclassifyf>
 800d5ee:	b930      	cbnz	r0, 800d5fe <fmaxf+0x22>
 800d5f0:	eeb0 8a68 	vmov.f32	s16, s17
 800d5f4:	eeb0 0a48 	vmov.f32	s0, s16
 800d5f8:	ecbd 8b02 	vpop	{d8}
 800d5fc:	bd08      	pop	{r3, pc}
 800d5fe:	eeb0 0a68 	vmov.f32	s0, s17
 800d602:	f000 f825 	bl	800d650 <__fpclassifyf>
 800d606:	2800      	cmp	r0, #0
 800d608:	d0f4      	beq.n	800d5f4 <fmaxf+0x18>
 800d60a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d612:	dded      	ble.n	800d5f0 <fmaxf+0x14>
 800d614:	e7ee      	b.n	800d5f4 <fmaxf+0x18>

0800d616 <fminf>:
 800d616:	b508      	push	{r3, lr}
 800d618:	ed2d 8b02 	vpush	{d8}
 800d61c:	eeb0 8a40 	vmov.f32	s16, s0
 800d620:	eef0 8a60 	vmov.f32	s17, s1
 800d624:	f000 f814 	bl	800d650 <__fpclassifyf>
 800d628:	b930      	cbnz	r0, 800d638 <fminf+0x22>
 800d62a:	eeb0 8a68 	vmov.f32	s16, s17
 800d62e:	eeb0 0a48 	vmov.f32	s0, s16
 800d632:	ecbd 8b02 	vpop	{d8}
 800d636:	bd08      	pop	{r3, pc}
 800d638:	eeb0 0a68 	vmov.f32	s0, s17
 800d63c:	f000 f808 	bl	800d650 <__fpclassifyf>
 800d640:	2800      	cmp	r0, #0
 800d642:	d0f4      	beq.n	800d62e <fminf+0x18>
 800d644:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d64c:	d5ed      	bpl.n	800d62a <fminf+0x14>
 800d64e:	e7ee      	b.n	800d62e <fminf+0x18>

0800d650 <__fpclassifyf>:
 800d650:	ee10 3a10 	vmov	r3, s0
 800d654:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800d658:	d00d      	beq.n	800d676 <__fpclassifyf+0x26>
 800d65a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800d65e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800d662:	d30a      	bcc.n	800d67a <__fpclassifyf+0x2a>
 800d664:	4b07      	ldr	r3, [pc, #28]	@ (800d684 <__fpclassifyf+0x34>)
 800d666:	1e42      	subs	r2, r0, #1
 800d668:	429a      	cmp	r2, r3
 800d66a:	d908      	bls.n	800d67e <__fpclassifyf+0x2e>
 800d66c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800d670:	4258      	negs	r0, r3
 800d672:	4158      	adcs	r0, r3
 800d674:	4770      	bx	lr
 800d676:	2002      	movs	r0, #2
 800d678:	4770      	bx	lr
 800d67a:	2004      	movs	r0, #4
 800d67c:	4770      	bx	lr
 800d67e:	2003      	movs	r0, #3
 800d680:	4770      	bx	lr
 800d682:	bf00      	nop
 800d684:	007ffffe 	.word	0x007ffffe

0800d688 <round>:
 800d688:	ec51 0b10 	vmov	r0, r1, d0
 800d68c:	b570      	push	{r4, r5, r6, lr}
 800d68e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800d692:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800d696:	2a13      	cmp	r2, #19
 800d698:	460b      	mov	r3, r1
 800d69a:	4605      	mov	r5, r0
 800d69c:	dc1b      	bgt.n	800d6d6 <round+0x4e>
 800d69e:	2a00      	cmp	r2, #0
 800d6a0:	da0b      	bge.n	800d6ba <round+0x32>
 800d6a2:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800d6a6:	3201      	adds	r2, #1
 800d6a8:	bf04      	itt	eq
 800d6aa:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800d6ae:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	4610      	mov	r0, r2
 800d6b8:	e015      	b.n	800d6e6 <round+0x5e>
 800d6ba:	4c15      	ldr	r4, [pc, #84]	@ (800d710 <round+0x88>)
 800d6bc:	4114      	asrs	r4, r2
 800d6be:	ea04 0601 	and.w	r6, r4, r1
 800d6c2:	4306      	orrs	r6, r0
 800d6c4:	d00f      	beq.n	800d6e6 <round+0x5e>
 800d6c6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800d6ca:	fa41 f202 	asr.w	r2, r1, r2
 800d6ce:	4413      	add	r3, r2
 800d6d0:	ea23 0304 	bic.w	r3, r3, r4
 800d6d4:	e7ed      	b.n	800d6b2 <round+0x2a>
 800d6d6:	2a33      	cmp	r2, #51	@ 0x33
 800d6d8:	dd08      	ble.n	800d6ec <round+0x64>
 800d6da:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800d6de:	d102      	bne.n	800d6e6 <round+0x5e>
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	f7f2 fdf3 	bl	80002cc <__adddf3>
 800d6e6:	ec41 0b10 	vmov	d0, r0, r1
 800d6ea:	bd70      	pop	{r4, r5, r6, pc}
 800d6ec:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800d6f0:	f04f 34ff 	mov.w	r4, #4294967295
 800d6f4:	40f4      	lsrs	r4, r6
 800d6f6:	4204      	tst	r4, r0
 800d6f8:	d0f5      	beq.n	800d6e6 <round+0x5e>
 800d6fa:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800d6fe:	2201      	movs	r2, #1
 800d700:	408a      	lsls	r2, r1
 800d702:	1952      	adds	r2, r2, r5
 800d704:	bf28      	it	cs
 800d706:	3301      	addcs	r3, #1
 800d708:	ea22 0204 	bic.w	r2, r2, r4
 800d70c:	e7d2      	b.n	800d6b4 <round+0x2c>
 800d70e:	bf00      	nop
 800d710:	000fffff 	.word	0x000fffff

0800d714 <_init>:
 800d714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d716:	bf00      	nop
 800d718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d71a:	bc08      	pop	{r3}
 800d71c:	469e      	mov	lr, r3
 800d71e:	4770      	bx	lr

0800d720 <_fini>:
 800d720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d722:	bf00      	nop
 800d724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d726:	bc08      	pop	{r3}
 800d728:	469e      	mov	lr, r3
 800d72a:	4770      	bx	lr
