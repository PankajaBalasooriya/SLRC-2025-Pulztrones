
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e10  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007fe0  08007fe0  00008fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008048  08008048  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  08008048  08008048  00009048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008050  08008050  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008050  08008050  00009050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008054  08008054  00009054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008058  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000071c  2000005c  080080b4  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  080080b4  0000a778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001417c  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f36  00000000  00000000  0001e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  00021140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb7  00000000  00000000  00022408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250e1  00000000  00000000  000232bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b2d  00000000  00000000  000483a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e14b0  00000000  00000000  00061ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014337d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d4  00000000  00000000  001433c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  00148894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007fc8 	.word	0x08007fc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08007fc8 	.word	0x08007fc8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96a 	b.w	8000dd8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	460c      	mov	r4, r1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d14e      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b28:	4694      	mov	ip, r2
 8000b2a:	458c      	cmp	ip, r1
 8000b2c:	4686      	mov	lr, r0
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	d962      	bls.n	8000bfa <__udivmoddi4+0xde>
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b44:	4319      	orrs	r1, r3
 8000b46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4e:	fa1f f68c 	uxth.w	r6, ip
 8000b52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb04 f106 	mul.w	r1, r4, r6
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b72:	f080 8112 	bcs.w	8000d9a <__udivmoddi4+0x27e>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 810f 	bls.w	8000d9a <__udivmoddi4+0x27e>
 8000b7c:	3c02      	subs	r4, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	fa1f f38e 	uxth.w	r3, lr
 8000b86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b92:	fb00 f606 	mul.w	r6, r0, r6
 8000b96:	429e      	cmp	r6, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x94>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba2:	f080 80fc 	bcs.w	8000d9e <__udivmoddi4+0x282>
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	f240 80f9 	bls.w	8000d9e <__udivmoddi4+0x282>
 8000bac:	4463      	add	r3, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11d      	cbz	r5, 8000bc2 <__udivmoddi4+0xa6>
 8000bba:	40d3      	lsrs	r3, r2
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d905      	bls.n	8000bd6 <__udivmoddi4+0xba>
 8000bca:	b10d      	cbz	r5, 8000bd0 <__udivmoddi4+0xb4>
 8000bcc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e7f5      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bd6:	fab3 f183 	clz	r1, r3
 8000bda:	2900      	cmp	r1, #0
 8000bdc:	d146      	bne.n	8000c6c <__udivmoddi4+0x150>
 8000bde:	42a3      	cmp	r3, r4
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xcc>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	f0c0 80f0 	bcc.w	8000dc8 <__udivmoddi4+0x2ac>
 8000be8:	1a86      	subs	r6, r0, r2
 8000bea:	eb64 0303 	sbc.w	r3, r4, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d0e6      	beq.n	8000bc2 <__udivmoddi4+0xa6>
 8000bf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bf8:	e7e3      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	f040 8090 	bne.w	8000d20 <__udivmoddi4+0x204>
 8000c00:	eba1 040c 	sub.w	r4, r1, ip
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa1f f78c 	uxth.w	r7, ip
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb08 4416 	mls	r4, r8, r6, r4
 8000c1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1e:	fb07 f006 	mul.w	r0, r7, r6
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x11c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x11a>
 8000c30:	4298      	cmp	r0, r3
 8000c32:	f200 80cd 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000c36:	4626      	mov	r6, r4
 8000c38:	1a1c      	subs	r4, r3, r0
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c42:	fb08 4410 	mls	r4, r8, r0, r4
 8000c46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4a:	fb00 f707 	mul.w	r7, r0, r7
 8000c4e:	429f      	cmp	r7, r3
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x148>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x146>
 8000c5c:	429f      	cmp	r7, r3
 8000c5e:	f200 80b0 	bhi.w	8000dc2 <__udivmoddi4+0x2a6>
 8000c62:	4620      	mov	r0, r4
 8000c64:	1bdb      	subs	r3, r3, r7
 8000c66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6a:	e7a5      	b.n	8000bb8 <__udivmoddi4+0x9c>
 8000c6c:	f1c1 0620 	rsb	r6, r1, #32
 8000c70:	408b      	lsls	r3, r1
 8000c72:	fa22 f706 	lsr.w	r7, r2, r6
 8000c76:	431f      	orrs	r7, r3
 8000c78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c80:	ea43 030c 	orr.w	r3, r3, ip
 8000c84:	40f4      	lsrs	r4, r6
 8000c86:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8a:	0c38      	lsrs	r0, r7, #16
 8000c8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c90:	fbb4 fef0 	udiv	lr, r4, r0
 8000c94:	fa1f fc87 	uxth.w	ip, r7
 8000c98:	fb00 441e 	mls	r4, r0, lr, r4
 8000c9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ca4:	45a1      	cmp	r9, r4
 8000ca6:	fa02 f201 	lsl.w	r2, r2, r1
 8000caa:	d90a      	bls.n	8000cc2 <__udivmoddi4+0x1a6>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cb2:	f080 8084 	bcs.w	8000dbe <__udivmoddi4+0x2a2>
 8000cb6:	45a1      	cmp	r9, r4
 8000cb8:	f240 8081 	bls.w	8000dbe <__udivmoddi4+0x2a2>
 8000cbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc0:	443c      	add	r4, r7
 8000cc2:	eba4 0409 	sub.w	r4, r4, r9
 8000cc6:	fa1f f983 	uxth.w	r9, r3
 8000cca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cce:	fb00 4413 	mls	r4, r0, r3, r4
 8000cd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x1d2>
 8000cde:	193c      	adds	r4, r7, r4
 8000ce0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ce4:	d267      	bcs.n	8000db6 <__udivmoddi4+0x29a>
 8000ce6:	45a4      	cmp	ip, r4
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0x29a>
 8000cea:	3b02      	subs	r3, #2
 8000cec:	443c      	add	r4, r7
 8000cee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cf2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cf6:	eba4 040c 	sub.w	r4, r4, ip
 8000cfa:	429c      	cmp	r4, r3
 8000cfc:	46ce      	mov	lr, r9
 8000cfe:	469c      	mov	ip, r3
 8000d00:	d351      	bcc.n	8000da6 <__udivmoddi4+0x28a>
 8000d02:	d04e      	beq.n	8000da2 <__udivmoddi4+0x286>
 8000d04:	b155      	cbz	r5, 8000d1c <__udivmoddi4+0x200>
 8000d06:	ebb8 030e 	subs.w	r3, r8, lr
 8000d0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d12:	40cb      	lsrs	r3, r1
 8000d14:	431e      	orrs	r6, r3
 8000d16:	40cc      	lsrs	r4, r1
 8000d18:	e9c5 6400 	strd	r6, r4, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	e750      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000d20:	f1c2 0320 	rsb	r3, r2, #32
 8000d24:	fa20 f103 	lsr.w	r1, r0, r3
 8000d28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d30:	4094      	lsls	r4, r2
 8000d32:	430c      	orrs	r4, r1
 8000d34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3110 	mls	r1, r8, r0, r3
 8000d48:	0c23      	lsrs	r3, r4, #16
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f107 	mul.w	r1, r0, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x24c>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d5e:	d22c      	bcs.n	8000dba <__udivmoddi4+0x29e>
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d92a      	bls.n	8000dba <__udivmoddi4+0x29e>
 8000d64:	3802      	subs	r0, #2
 8000d66:	4463      	add	r3, ip
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d70:	fb08 3311 	mls	r3, r8, r1, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb01 f307 	mul.w	r3, r1, r7
 8000d7c:	42a3      	cmp	r3, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x276>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d88:	d213      	bcs.n	8000db2 <__udivmoddi4+0x296>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d911      	bls.n	8000db2 <__udivmoddi4+0x296>
 8000d8e:	3902      	subs	r1, #2
 8000d90:	4464      	add	r4, ip
 8000d92:	1ae4      	subs	r4, r4, r3
 8000d94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d98:	e739      	b.n	8000c0e <__udivmoddi4+0xf2>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	e6f0      	b.n	8000b80 <__udivmoddi4+0x64>
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e706      	b.n	8000bb0 <__udivmoddi4+0x94>
 8000da2:	45c8      	cmp	r8, r9
 8000da4:	d2ae      	bcs.n	8000d04 <__udivmoddi4+0x1e8>
 8000da6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000daa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dae:	3801      	subs	r0, #1
 8000db0:	e7a8      	b.n	8000d04 <__udivmoddi4+0x1e8>
 8000db2:	4631      	mov	r1, r6
 8000db4:	e7ed      	b.n	8000d92 <__udivmoddi4+0x276>
 8000db6:	4603      	mov	r3, r0
 8000db8:	e799      	b.n	8000cee <__udivmoddi4+0x1d2>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e7d4      	b.n	8000d68 <__udivmoddi4+0x24c>
 8000dbe:	46d6      	mov	lr, sl
 8000dc0:	e77f      	b.n	8000cc2 <__udivmoddi4+0x1a6>
 8000dc2:	4463      	add	r3, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	e74d      	b.n	8000c64 <__udivmoddi4+0x148>
 8000dc8:	4606      	mov	r6, r0
 8000dca:	4623      	mov	r3, r4
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e70f      	b.n	8000bf0 <__udivmoddi4+0xd4>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	e730      	b.n	8000c38 <__udivmoddi4+0x11c>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <AnalogMux_SelectChannel>:
/**
 * @brief Select a channel on the multiplexer
 * @param channel Channel number (0-15)
 */
void AnalogMux_SelectChannel(uint8_t channel)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
    // Ensure channel is within valid range (0-15)
    if (channel > 15)
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d901      	bls.n	8000df0 <AnalogMux_SelectChannel+0x14>
        channel = 15;
 8000dec:	230f      	movs	r3, #15
 8000dee:	71fb      	strb	r3, [r7, #7]

    // Set S0 (least significant bit)
    if (channel & 0x01)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d006      	beq.n	8000e08 <AnalogMux_SelectChannel+0x2c>
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e00:	4823      	ldr	r0, [pc, #140]	@ (8000e90 <AnalogMux_SelectChannel+0xb4>)
 8000e02:	f003 f823 	bl	8003e4c <HAL_GPIO_WritePin>
 8000e06:	e005      	b.n	8000e14 <AnalogMux_SelectChannel+0x38>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e0e:	4820      	ldr	r0, [pc, #128]	@ (8000e90 <AnalogMux_SelectChannel+0xb4>)
 8000e10:	f003 f81c 	bl	8003e4c <HAL_GPIO_WritePin>

    // Set S1
    if (channel & 0x02)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d006      	beq.n	8000e2c <AnalogMux_SelectChannel+0x50>
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e24:	481a      	ldr	r0, [pc, #104]	@ (8000e90 <AnalogMux_SelectChannel+0xb4>)
 8000e26:	f003 f811 	bl	8003e4c <HAL_GPIO_WritePin>
 8000e2a:	e005      	b.n	8000e38 <AnalogMux_SelectChannel+0x5c>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e32:	4817      	ldr	r0, [pc, #92]	@ (8000e90 <AnalogMux_SelectChannel+0xb4>)
 8000e34:	f003 f80a 	bl	8003e4c <HAL_GPIO_WritePin>

    // Set S2
    if (channel & 0x04)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d006      	beq.n	8000e50 <AnalogMux_SelectChannel+0x74>
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e48:	4811      	ldr	r0, [pc, #68]	@ (8000e90 <AnalogMux_SelectChannel+0xb4>)
 8000e4a:	f002 ffff 	bl	8003e4c <HAL_GPIO_WritePin>
 8000e4e:	e005      	b.n	8000e5c <AnalogMux_SelectChannel+0x80>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e56:	480e      	ldr	r0, [pc, #56]	@ (8000e90 <AnalogMux_SelectChannel+0xb4>)
 8000e58:	f002 fff8 	bl	8003e4c <HAL_GPIO_WritePin>

    // Set S3 (most significant bit)
    if (channel & 0x08)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d006      	beq.n	8000e74 <AnalogMux_SelectChannel+0x98>
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e6c:	4808      	ldr	r0, [pc, #32]	@ (8000e90 <AnalogMux_SelectChannel+0xb4>)
 8000e6e:	f002 ffed 	bl	8003e4c <HAL_GPIO_WritePin>
 8000e72:	e005      	b.n	8000e80 <AnalogMux_SelectChannel+0xa4>
    else
        HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e7a:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <AnalogMux_SelectChannel+0xb4>)
 8000e7c:	f002 ffe6 	bl	8003e4c <HAL_GPIO_WritePin>

    // Add short delay for the multiplexer to settle
    // Typically 0.5-1 microsecond is enough for the CD74HC4067
    delayMicroseconds(1);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f000 f859 	bl	8000f38 <delayMicroseconds>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40020400 	.word	0x40020400

08000e94 <AnalogMux_ReadADC>:
/**
 * @brief Read the ADC value from the currently selected channel
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadADC(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
    uint16_t adcValue = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	80fb      	strh	r3, [r7, #6]

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 8000e9e:	480b      	ldr	r0, [pc, #44]	@ (8000ecc <AnalogMux_ReadADC+0x38>)
 8000ea0:	f001 fde6 	bl	8002a70 <HAL_ADC_Start>

    // Wait for conversion to complete (timeout after 100 cycles)
    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8000ea4:	2164      	movs	r1, #100	@ 0x64
 8000ea6:	4809      	ldr	r0, [pc, #36]	@ (8000ecc <AnalogMux_ReadADC+0x38>)
 8000ea8:	f001 fee7 	bl	8002c7a <HAL_ADC_PollForConversion>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d104      	bne.n	8000ebc <AnalogMux_ReadADC+0x28>
    {
        // Read the converted value
        adcValue = HAL_ADC_GetValue(&hadc1);
 8000eb2:	4806      	ldr	r0, [pc, #24]	@ (8000ecc <AnalogMux_ReadADC+0x38>)
 8000eb4:	f001 ff6c 	bl	8002d90 <HAL_ADC_GetValue>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	80fb      	strh	r3, [r7, #6]
    }

    // Stop ADC conversion
    HAL_ADC_Stop(&hadc1);
 8000ebc:	4803      	ldr	r0, [pc, #12]	@ (8000ecc <AnalogMux_ReadADC+0x38>)
 8000ebe:	f001 fea9 	bl	8002c14 <HAL_ADC_Stop>

    return adcValue;
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000078 	.word	0x20000078

08000ed0 <AnalogMux_ReadChannel>:
 * @brief Read ADC value from a specific channel (selects channel then reads)
 * @param channel Channel number (0-15)
 * @return ADC conversion result
 */
uint16_t AnalogMux_ReadChannel(uint8_t channel)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
    // Select the desired channel
    AnalogMux_SelectChannel(channel);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff7d 	bl	8000ddc <AnalogMux_SelectChannel>

    // Allow settling time for the analog signal
    delayMicroseconds(5);
 8000ee2:	2005      	movs	r0, #5
 8000ee4:	f000 f828 	bl	8000f38 <delayMicroseconds>

    // Read and return the ADC value
    return AnalogMux_ReadADC();
 8000ee8:	f7ff ffd4 	bl	8000e94 <AnalogMux_ReadADC>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 8000efc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <Delay_Init+0x38>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10e      	bne.n	8000f26 <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f08:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <Delay_Init+0x38>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	4a08      	ldr	r2, [pc, #32]	@ (8000f30 <Delay_Init+0x38>)
 8000f0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f12:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 8000f14:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <Delay_Init+0x3c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <Delay_Init+0x3c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a05      	ldr	r2, [pc, #20]	@ (8000f34 <Delay_Init+0x3c>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6013      	str	r3, [r2, #0]
    }
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000edf0 	.word	0xe000edf0
 8000f34:	e0001000 	.word	0xe0001000

08000f38 <delayMicroseconds>:

// Delays for us microseconds
void delayMicroseconds(uint32_t us)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000f40:	4b0b      	ldr	r3, [pc, #44]	@ (8000f70 <delayMicroseconds+0x38>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	60fb      	str	r3, [r7, #12]
    delayTicks = us * 180; // Our MCU runs at 180 MHz, so each microsecond lasts 16 clock ticks
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	22b4      	movs	r2, #180	@ 0xb4
 8000f4a:	fb02 f303 	mul.w	r3, r2, r3
 8000f4e:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8000f50:	bf00      	nop
 8000f52:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <delayMicroseconds+0x38>)
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f8      	bhi.n	8000f52 <delayMicroseconds+0x1a>
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e0001000 	.word	0xe0001000

08000f74 <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 8000f78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7e:	b21b      	sxth	r3, r3
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 8000f90:	4b03      	ldr	r3, [pc, #12]	@ (8000fa0 <getLeftEncoderCounts+0x14>)
 8000f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f94:	b21b      	sxth	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	40010000 	.word	0x40010000

08000fa4 <resetEncoders>:

void resetEncoders() {
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <resetEncoders+0x1c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 8000fae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40010000 	.word	0x40010000

08000fc4 <HAL_UART_RxCpltCallback>:
    // Transmit the string over UART
    HAL_UART_Transmit(huart, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6)  // Check if it's UART6
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	@ (8000ff0 <HAL_UART_RxCpltCallback+0x2c>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d107      	bne.n	8000fe6 <HAL_UART_RxCpltCallback+0x22>
    {
        data_received = 1;  // Set flag to indicate new data
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <HAL_UART_RxCpltCallback+0x30>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Restart reception
 8000fdc:	2232      	movs	r2, #50	@ 0x32
 8000fde:	4906      	ldr	r1, [pc, #24]	@ (8000ff8 <HAL_UART_RxCpltCallback+0x34>)
 8000fe0:	4806      	ldr	r0, [pc, #24]	@ (8000ffc <HAL_UART_RxCpltCallback+0x38>)
 8000fe2:	f005 fc05 	bl	80067f0 <HAL_UART_Receive_IT>
    }
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40011400 	.word	0x40011400
 8000ff4:	200003aa 	.word	0x200003aa
 8000ff8:	20000378 	.word	0x20000378
 8000ffc:	200002d0 	.word	0x200002d0

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001006:	f001 fc59 	bl	80028bc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100a:	f000 f885 	bl	8001118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100e:	f000 fb67 	bl	80016e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001012:	f000 fb45 	bl	80016a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001016:	f000 fac5 	bl	80015a4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800101a:	f000 f99d 	bl	8001358 <MX_TIM1_Init>
  MX_TIM2_Init();
 800101e:	f000 f9f3 	bl	8001408 <MX_TIM2_Init>
  MX_I2C2_Init();
 8001022:	f000 f96b 	bl	80012fc <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8001026:	f000 fae7 	bl	80015f8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800102a:	f000 fb0f 	bl	800164c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800102e:	f000 f8e5 	bl	80011fc <MX_ADC1_Init>
  MX_I2C1_Init();
 8001032:	f000 f935 	bl	80012a0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001036:	f000 fa3b 	bl	80014b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800103a:	213c      	movs	r1, #60	@ 0x3c
 800103c:	4828      	ldr	r0, [pc, #160]	@ (80010e0 <main+0xe0>)
 800103e:	f004 ff39 	bl	8005eb4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001042:	213c      	movs	r1, #60	@ 0x3c
 8001044:	4827      	ldr	r0, [pc, #156]	@ (80010e4 <main+0xe4>)
 8001046:	f004 ff35 	bl	8005eb4 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800104a:	2100      	movs	r1, #0
 800104c:	4826      	ldr	r0, [pc, #152]	@ (80010e8 <main+0xe8>)
 800104e:	f004 fdc3 	bl	8005bd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001052:	2104      	movs	r1, #4
 8001054:	4824      	ldr	r0, [pc, #144]	@ (80010e8 <main+0xe8>)
 8001056:	f004 fdbf 	bl	8005bd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800105a:	2108      	movs	r1, #8
 800105c:	4822      	ldr	r0, [pc, #136]	@ (80010e8 <main+0xe8>)
 800105e:	f004 fdbb 	bl	8005bd8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001062:	210c      	movs	r1, #12
 8001064:	4820      	ldr	r0, [pc, #128]	@ (80010e8 <main+0xe8>)
 8001066:	f004 fdb7 	bl	8005bd8 <HAL_TIM_PWM_Start>

  /*---------------------Delay--------------------------------*/
  Delay_Init();
 800106a:	f7ff ff45 	bl	8000ef8 <Delay_Init>
  /*-------------------------------------------------------------------*/

  //AnalogMux_Init();

  /*---------------------Servo--------------------------------*/
  Servo_Init(50);  // 50Hz for standard servos
 800106e:	2032      	movs	r0, #50	@ 0x32
 8001070:	f000 feba 	bl	8001de8 <Servo_Init>

  //Examples
  // Register servos (do this once)
  int claw = Servo_Register(11, "claw", 0, 180);
 8001074:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80010ec <main+0xec>
 8001078:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 80010f0 <main+0xf0>
 800107c:	491d      	ldr	r1, [pc, #116]	@ (80010f4 <main+0xf4>)
 800107e:	200b      	movs	r0, #11
 8001080:	f000 fed6 	bl	8001e30 <Servo_Register>
 8001084:	6078      	str	r0, [r7, #4]
  int arm = Servo_Register(13, "arm", 0, 180);
 8001086:	eddf 0a19 	vldr	s1, [pc, #100]	@ 80010ec <main+0xec>
 800108a:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 80010f0 <main+0xf0>
 800108e:	491a      	ldr	r1, [pc, #104]	@ (80010f8 <main+0xf8>)
 8001090:	200d      	movs	r0, #13
 8001092:	f000 fecd 	bl	8001e30 <Servo_Register>
 8001096:	6038      	str	r0, [r7, #0]
  //int base = Servo_Register(15, "base", 0, 180);

  // Later in your code, use the servos by ID
  Servo_SetAngle(claw, 35);   // Set claw to 45 degrees
 8001098:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80010fc <main+0xfc>
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 ffbb 	bl	8002018 <Servo_SetAngle>
  Servo_SetAngle(arm,100);    // Set arm to 90 degrees
 80010a2:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8001100 <main+0x100>
 80010a6:	6838      	ldr	r0, [r7, #0]
 80010a8:	f000 ffb6 	bl	8002018 <Servo_SetAngle>
  // Reset all servos to center position
  //Servo_ResetAll();


  /*-------------------------------------------------------------------*/
  HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Enable UART interrupt
 80010ac:	2232      	movs	r2, #50	@ 0x32
 80010ae:	4915      	ldr	r1, [pc, #84]	@ (8001104 <main+0x104>)
 80010b0:	4815      	ldr	r0, [pc, #84]	@ (8001108 <main+0x108>)
 80010b2:	f005 fb9d 	bl	80067f0 <HAL_UART_Receive_IT>

  HAL_Delay(2000);
 80010b6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010ba:	f001 fc71 	bl	80029a0 <HAL_Delay>
  RAYKHA_Calibrate(&raykha_calibration, RAYKHA_LINE_WHITE);
 80010be:	2101      	movs	r1, #1
 80010c0:	4812      	ldr	r0, [pc, #72]	@ (800110c <main+0x10c>)
 80010c2:	f000 fcdf 	bl	8001a84 <RAYKHA_Calibrate>
//		  HAL_UART_Transmit(&huart6, (uint8_t *)uart_rx_buffer, strlen(uart_rx_buffer), HAL_MAX_DELAY);
//	  }



	  RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 80010c6:	4911      	ldr	r1, [pc, #68]	@ (800110c <main+0x10c>)
 80010c8:	4811      	ldr	r0, [pc, #68]	@ (8001110 <main+0x110>)
 80010ca:	f000 fd8d 	bl	8001be8 <RAYKHA_ReadCalibrated>

	     /* Get position for PID controller (centered around 0) */
	  line_position = RAYKHA_GetPositionForPID(sensor_values, &raykha_calibration);
 80010ce:	490f      	ldr	r1, [pc, #60]	@ (800110c <main+0x10c>)
 80010d0:	480f      	ldr	r0, [pc, #60]	@ (8001110 <main+0x110>)
 80010d2:	f000 fe38 	bl	8001d46 <RAYKHA_GetPositionForPID>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001114 <main+0x114>)
 80010da:	6013      	str	r3, [r2, #0]
	  RAYKHA_ReadCalibrated(sensor_values, &raykha_calibration);
 80010dc:	bf00      	nop
 80010de:	e7f2      	b.n	80010c6 <main+0xc6>
 80010e0:	20000168 	.word	0x20000168
 80010e4:	200001b0 	.word	0x200001b0
 80010e8:	200001f8 	.word	0x200001f8
 80010ec:	43340000 	.word	0x43340000
 80010f0:	00000000 	.word	0x00000000
 80010f4:	08007fe0 	.word	0x08007fe0
 80010f8:	08007fe8 	.word	0x08007fe8
 80010fc:	420c0000 	.word	0x420c0000
 8001100:	42c80000 	.word	0x42c80000
 8001104:	20000378 	.word	0x20000378
 8001108:	200002d0 	.word	0x200002d0
 800110c:	200003ac 	.word	0x200003ac
 8001110:	200003d0 	.word	0x200003d0
 8001114:	200003e0 	.word	0x200003e0

08001118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b094      	sub	sp, #80	@ 0x50
 800111c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	2234      	movs	r2, #52	@ 0x34
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f006 faba 	bl	80076a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	4b2c      	ldr	r3, [pc, #176]	@ (80011f4 <SystemClock_Config+0xdc>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001144:	4a2b      	ldr	r2, [pc, #172]	@ (80011f4 <SystemClock_Config+0xdc>)
 8001146:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800114a:	6413      	str	r3, [r2, #64]	@ 0x40
 800114c:	4b29      	ldr	r3, [pc, #164]	@ (80011f4 <SystemClock_Config+0xdc>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001158:	2300      	movs	r3, #0
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <SystemClock_Config+0xe0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a25      	ldr	r2, [pc, #148]	@ (80011f8 <SystemClock_Config+0xe0>)
 8001162:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b23      	ldr	r3, [pc, #140]	@ (80011f8 <SystemClock_Config+0xe0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001174:	2302      	movs	r3, #2
 8001176:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001178:	2301      	movs	r3, #1
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117c:	2310      	movs	r3, #16
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001180:	2302      	movs	r3, #2
 8001182:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001184:	2300      	movs	r3, #0
 8001186:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001188:	2308      	movs	r3, #8
 800118a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800118c:	23b4      	movs	r3, #180	@ 0xb4
 800118e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001190:	2302      	movs	r3, #2
 8001192:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001198:	2302      	movs	r3, #2
 800119a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 fa2b 	bl	80055fc <HAL_RCC_OscConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011ac:	f000 fb1e 	bl	80017ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011b0:	f003 fe8a 	bl	8004ec8 <HAL_PWREx_EnableOverDrive>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011ba:	f000 fb17 	bl	80017ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011be:	230f      	movs	r3, #15
 80011c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c2:	2302      	movs	r3, #2
 80011c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	2105      	movs	r1, #5
 80011dc:	4618      	mov	r0, r3
 80011de:	f003 fec3 	bl	8004f68 <HAL_RCC_ClockConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80011e8:	f000 fb00 	bl	80017ec <Error_Handler>
  }
}
 80011ec:	bf00      	nop
 80011ee:	3750      	adds	r7, #80	@ 0x50
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40007000 	.word	0x40007000

080011fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001202:	463b      	mov	r3, r7
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <MX_ADC1_Init+0x98>)
 8001210:	4a21      	ldr	r2, [pc, #132]	@ (8001298 <MX_ADC1_Init+0x9c>)
 8001212:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001214:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <MX_ADC1_Init+0x98>)
 8001216:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800121a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800121c:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <MX_ADC1_Init+0x98>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001222:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <MX_ADC1_Init+0x98>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001228:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <MX_ADC1_Init+0x98>)
 800122a:	2201      	movs	r2, #1
 800122c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <MX_ADC1_Init+0x98>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001236:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <MX_ADC1_Init+0x98>)
 8001238:	2200      	movs	r2, #0
 800123a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800123c:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <MX_ADC1_Init+0x98>)
 800123e:	4a17      	ldr	r2, [pc, #92]	@ (800129c <MX_ADC1_Init+0xa0>)
 8001240:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001242:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <MX_ADC1_Init+0x98>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001248:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <MX_ADC1_Init+0x98>)
 800124a:	2201      	movs	r2, #1
 800124c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_ADC1_Init+0x98>)
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <MX_ADC1_Init+0x98>)
 8001258:	2201      	movs	r2, #1
 800125a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800125c:	480d      	ldr	r0, [pc, #52]	@ (8001294 <MX_ADC1_Init+0x98>)
 800125e:	f001 fbc3 	bl	80029e8 <HAL_ADC_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001268:	f000 fac0 	bl	80017ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800126c:	230a      	movs	r3, #10
 800126e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_ADC1_Init+0x98>)
 800127e:	f001 fd95 	bl	8002dac <HAL_ADC_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001288:	f000 fab0 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000078 	.word	0x20000078
 8001298:	40012000 	.word	0x40012000
 800129c:	0f000001 	.word	0x0f000001

080012a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	@ (80012f4 <MX_I2C1_Init+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012ac:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <MX_I2C1_Init+0x58>)
 80012ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012de:	f002 fdcf 	bl	8003e80 <HAL_I2C_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e8:	f000 fa80 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200000c0 	.word	0x200000c0
 80012f4:	40005400 	.word	0x40005400
 80012f8:	000186a0 	.word	0x000186a0

080012fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <MX_I2C2_Init+0x50>)
 8001302:	4a13      	ldr	r2, [pc, #76]	@ (8001350 <MX_I2C2_Init+0x54>)
 8001304:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_I2C2_Init+0x50>)
 8001308:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <MX_I2C2_Init+0x58>)
 800130a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_I2C2_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_I2C2_Init+0x50>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_I2C2_Init+0x50>)
 800131a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800131e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <MX_I2C2_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_I2C2_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800132c:	4b07      	ldr	r3, [pc, #28]	@ (800134c <MX_I2C2_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MX_I2C2_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001338:	4804      	ldr	r0, [pc, #16]	@ (800134c <MX_I2C2_Init+0x50>)
 800133a:	f002 fda1 	bl	8003e80 <HAL_I2C_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001344:	f000 fa52 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000114 	.word	0x20000114
 8001350:	40005800 	.word	0x40005800
 8001354:	000186a0 	.word	0x000186a0

08001358 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	@ 0x30
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2224      	movs	r2, #36	@ 0x24
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f006 f99a 	bl	80076a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001374:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <MX_TIM1_Init+0xa8>)
 8001376:	4a23      	ldr	r2, [pc, #140]	@ (8001404 <MX_TIM1_Init+0xac>)
 8001378:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800137a:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <MX_TIM1_Init+0xa8>)
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001380:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <MX_TIM1_Init+0xa8>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001386:	4b1e      	ldr	r3, [pc, #120]	@ (8001400 <MX_TIM1_Init+0xa8>)
 8001388:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800138c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138e:	4b1c      	ldr	r3, [pc, #112]	@ (8001400 <MX_TIM1_Init+0xa8>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001394:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <MX_TIM1_Init+0xa8>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139a:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <MX_TIM1_Init+0xa8>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013a0:	2303      	movs	r3, #3
 80013a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013a8:	2301      	movs	r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013b8:	2301      	movs	r3, #1
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4619      	mov	r1, r3
 80013ca:	480d      	ldr	r0, [pc, #52]	@ (8001400 <MX_TIM1_Init+0xa8>)
 80013cc:	f004 fccc 	bl	8005d68 <HAL_TIM_Encoder_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80013d6:	f000 fa09 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	@ (8001400 <MX_TIM1_Init+0xa8>)
 80013e8:	f005 f936 	bl	8006658 <HAL_TIMEx_MasterConfigSynchronization>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80013f2:	f000 f9fb 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	3730      	adds	r7, #48	@ 0x30
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000168 	.word	0x20000168
 8001404:	40010000 	.word	0x40010000

08001408 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	@ 0x30
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	2224      	movs	r2, #36	@ 0x24
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f006 f942 	bl	80076a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001424:	4b21      	ldr	r3, [pc, #132]	@ (80014ac <MX_TIM2_Init+0xa4>)
 8001426:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800142a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800142c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <MX_TIM2_Init+0xa4>)
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	4b1e      	ldr	r3, [pc, #120]	@ (80014ac <MX_TIM2_Init+0xa4>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001438:	4b1c      	ldr	r3, [pc, #112]	@ (80014ac <MX_TIM2_Init+0xa4>)
 800143a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <MX_TIM2_Init+0xa4>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <MX_TIM2_Init+0xa4>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800144c:	2303      	movs	r3, #3
 800144e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001454:	2301      	movs	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001464:	2301      	movs	r3, #1
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	4619      	mov	r1, r3
 8001476:	480d      	ldr	r0, [pc, #52]	@ (80014ac <MX_TIM2_Init+0xa4>)
 8001478:	f004 fc76 	bl	8005d68 <HAL_TIM_Encoder_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001482:	f000 f9b3 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4619      	mov	r1, r3
 8001492:	4806      	ldr	r0, [pc, #24]	@ (80014ac <MX_TIM2_Init+0xa4>)
 8001494:	f005 f8e0 	bl	8006658 <HAL_TIMEx_MasterConfigSynchronization>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800149e:	f000 f9a5 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	3730      	adds	r7, #48	@ 0x30
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200001b0 	.word	0x200001b0

080014b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08a      	sub	sp, #40	@ 0x28
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]
 80014ce:	615a      	str	r2, [r3, #20]
 80014d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014d2:	4b32      	ldr	r3, [pc, #200]	@ (800159c <MX_TIM3_Init+0xec>)
 80014d4:	4a32      	ldr	r2, [pc, #200]	@ (80015a0 <MX_TIM3_Init+0xf0>)
 80014d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014d8:	4b30      	ldr	r3, [pc, #192]	@ (800159c <MX_TIM3_Init+0xec>)
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b2f      	ldr	r3, [pc, #188]	@ (800159c <MX_TIM3_Init+0xec>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 80014e4:	4b2d      	ldr	r3, [pc, #180]	@ (800159c <MX_TIM3_Init+0xec>)
 80014e6:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80014ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ec:	4b2b      	ldr	r3, [pc, #172]	@ (800159c <MX_TIM3_Init+0xec>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f2:	4b2a      	ldr	r3, [pc, #168]	@ (800159c <MX_TIM3_Init+0xec>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014f8:	4828      	ldr	r0, [pc, #160]	@ (800159c <MX_TIM3_Init+0xec>)
 80014fa:	f004 fb1d 	bl	8005b38 <HAL_TIM_PWM_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001504:	f000 f972 	bl	80017ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001510:	f107 0320 	add.w	r3, r7, #32
 8001514:	4619      	mov	r1, r3
 8001516:	4821      	ldr	r0, [pc, #132]	@ (800159c <MX_TIM3_Init+0xec>)
 8001518:	f005 f89e 	bl	8006658 <HAL_TIMEx_MasterConfigSynchronization>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001522:	f000 f963 	bl	80017ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001526:	2360      	movs	r3, #96	@ 0x60
 8001528:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2200      	movs	r2, #0
 800153a:	4619      	mov	r1, r3
 800153c:	4817      	ldr	r0, [pc, #92]	@ (800159c <MX_TIM3_Init+0xec>)
 800153e:	f004 fd47 	bl	8005fd0 <HAL_TIM_PWM_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001548:	f000 f950 	bl	80017ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2204      	movs	r2, #4
 8001550:	4619      	mov	r1, r3
 8001552:	4812      	ldr	r0, [pc, #72]	@ (800159c <MX_TIM3_Init+0xec>)
 8001554:	f004 fd3c 	bl	8005fd0 <HAL_TIM_PWM_ConfigChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800155e:	f000 f945 	bl	80017ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2208      	movs	r2, #8
 8001566:	4619      	mov	r1, r3
 8001568:	480c      	ldr	r0, [pc, #48]	@ (800159c <MX_TIM3_Init+0xec>)
 800156a:	f004 fd31 	bl	8005fd0 <HAL_TIM_PWM_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001574:	f000 f93a 	bl	80017ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	220c      	movs	r2, #12
 800157c:	4619      	mov	r1, r3
 800157e:	4807      	ldr	r0, [pc, #28]	@ (800159c <MX_TIM3_Init+0xec>)
 8001580:	f004 fd26 	bl	8005fd0 <HAL_TIM_PWM_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800158a:	f000 f92f 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800158e:	4803      	ldr	r0, [pc, #12]	@ (800159c <MX_TIM3_Init+0xec>)
 8001590:	f000 ff5c 	bl	800244c <HAL_TIM_MspPostInit>

}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	@ 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	200001f8 	.word	0x200001f8
 80015a0:	40000400 	.word	0x40000400

080015a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <MX_USART2_UART_Init+0x4c>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	@ (80015f4 <MX_USART2_UART_Init+0x50>)
 80015ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ae:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <MX_USART2_UART_Init+0x4c>)
 80015b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <MX_USART2_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <MX_USART2_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <MX_USART2_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015c8:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <MX_USART2_UART_Init+0x4c>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <MX_USART2_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <MX_USART2_UART_Init+0x4c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	@ (80015f0 <MX_USART2_UART_Init+0x4c>)
 80015dc:	f005 f8b8 	bl	8006750 <HAL_UART_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015e6:	f000 f901 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000240 	.word	0x20000240
 80015f4:	40004400 	.word	0x40004400

080015f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015fc:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	@ (8001648 <MX_USART3_UART_Init+0x50>)
 8001600:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MX_USART3_UART_Init+0x4c>)
 8001630:	f005 f88e 	bl	8006750 <HAL_UART_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800163a:	f000 f8d7 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000288 	.word	0x20000288
 8001648:	40004800 	.word	0x40004800

0800164c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <MX_USART6_UART_Init+0x4c>)
 8001652:	4a12      	ldr	r2, [pc, #72]	@ (800169c <MX_USART6_UART_Init+0x50>)
 8001654:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001656:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <MX_USART6_UART_Init+0x4c>)
 8001658:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800165c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <MX_USART6_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001664:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <MX_USART6_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <MX_USART6_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <MX_USART6_UART_Init+0x4c>)
 8001672:	220c      	movs	r2, #12
 8001674:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001676:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <MX_USART6_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <MX_USART6_UART_Init+0x4c>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_USART6_UART_Init+0x4c>)
 8001684:	f005 f864 	bl	8006750 <HAL_UART_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800168e:	f000 f8ad 	bl	80017ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200002d0 	.word	0x200002d0
 800169c:	40011400 	.word	0x40011400

080016a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <MX_DMA_Init+0x3c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a0b      	ldr	r2, [pc, #44]	@ (80016dc <MX_DMA_Init+0x3c>)
 80016b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_DMA_Init+0x3c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	2039      	movs	r0, #57	@ 0x39
 80016c8:	f001 fe79 	bl	80033be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80016cc:	2039      	movs	r0, #57	@ 0x39
 80016ce:	f001 fe92 	bl	80033f6 <HAL_NVIC_EnableIRQ>

}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800

080016e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	@ 0x28
 80016e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	4b38      	ldr	r3, [pc, #224]	@ (80017dc <MX_GPIO_Init+0xfc>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a37      	ldr	r2, [pc, #220]	@ (80017dc <MX_GPIO_Init+0xfc>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b35      	ldr	r3, [pc, #212]	@ (80017dc <MX_GPIO_Init+0xfc>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b31      	ldr	r3, [pc, #196]	@ (80017dc <MX_GPIO_Init+0xfc>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a30      	ldr	r2, [pc, #192]	@ (80017dc <MX_GPIO_Init+0xfc>)
 800171c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b2e      	ldr	r3, [pc, #184]	@ (80017dc <MX_GPIO_Init+0xfc>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	4b2a      	ldr	r3, [pc, #168]	@ (80017dc <MX_GPIO_Init+0xfc>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a29      	ldr	r2, [pc, #164]	@ (80017dc <MX_GPIO_Init+0xfc>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b27      	ldr	r3, [pc, #156]	@ (80017dc <MX_GPIO_Init+0xfc>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b23      	ldr	r3, [pc, #140]	@ (80017dc <MX_GPIO_Init+0xfc>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a22      	ldr	r2, [pc, #136]	@ (80017dc <MX_GPIO_Init+0xfc>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b20      	ldr	r3, [pc, #128]	@ (80017dc <MX_GPIO_Init+0xfc>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	2120      	movs	r1, #32
 800176a:	481d      	ldr	r0, [pc, #116]	@ (80017e0 <MX_GPIO_Init+0x100>)
 800176c:	f002 fb6e 	bl	8003e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001776:	481b      	ldr	r0, [pc, #108]	@ (80017e4 <MX_GPIO_Init+0x104>)
 8001778:	f002 fb68 	bl	8003e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800177c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001782:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	4619      	mov	r1, r3
 8001792:	4815      	ldr	r0, [pc, #84]	@ (80017e8 <MX_GPIO_Init+0x108>)
 8001794:	f002 f9c6 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001798:	2320      	movs	r3, #32
 800179a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	480c      	ldr	r0, [pc, #48]	@ (80017e0 <MX_GPIO_Init+0x100>)
 80017b0:	f002 f9b8 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 80017b4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80017b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <MX_GPIO_Init+0x104>)
 80017ce:	f002 f9a9 	bl	8003b24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	@ 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020000 	.word	0x40020000
 80017e4:	40020400 	.word	0x40020400
 80017e8:	40020800 	.word	0x40020800

080017ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f0:	b672      	cpsid	i
}
 80017f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <Error_Handler+0x8>

080017f8 <PCA9685_SetBit>:
  * @param  Bit: Bit position to modify (0-7)
  * @param  Value: Value to set (0 or 1)
  * @retval None
  */
void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af04      	add	r7, sp, #16
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
 8001802:	460b      	mov	r3, r1
 8001804:	71bb      	strb	r3, [r7, #6]
 8001806:	4613      	mov	r3, r2
 8001808:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	b29a      	uxth	r2, r3
 800180e:	230a      	movs	r3, #10
 8001810:	9302      	str	r3, [sp, #8]
 8001812:	2301      	movs	r3, #1
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	f107 030f 	add.w	r3, r7, #15
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2301      	movs	r3, #1
 800181e:	2180      	movs	r1, #128	@ 0x80
 8001820:	4819      	ldr	r0, [pc, #100]	@ (8001888 <PCA9685_SetBit+0x90>)
 8001822:	f002 fd6b 	bl	80042fc <HAL_I2C_Mem_Read>
  if (Value == 0)
 8001826:	797b      	ldrb	r3, [r7, #5]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10d      	bne.n	8001848 <PCA9685_SetBit+0x50>
    readValue &= ~(1 << Bit);
 800182c:	79bb      	ldrb	r3, [r7, #6]
 800182e:	2201      	movs	r2, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	b25b      	sxtb	r3, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	b25a      	sxtb	r2, r3
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	b25b      	sxtb	r3, r3
 800183e:	4013      	ands	r3, r2
 8001840:	b25b      	sxtb	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	73fb      	strb	r3, [r7, #15]
 8001846:	e00a      	b.n	800185e <PCA9685_SetBit+0x66>
  else
    readValue |= (1 << Bit);
 8001848:	79bb      	ldrb	r3, [r7, #6]
 800184a:	2201      	movs	r2, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	b25a      	sxtb	r2, r3
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	b25b      	sxtb	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b25b      	sxtb	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	b29a      	uxth	r2, r3
 8001862:	230a      	movs	r3, #10
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	2301      	movs	r3, #1
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	f107 030f 	add.w	r3, r7, #15
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2301      	movs	r3, #1
 8001872:	2180      	movs	r1, #128	@ 0x80
 8001874:	4804      	ldr	r0, [pc, #16]	@ (8001888 <PCA9685_SetBit+0x90>)
 8001876:	f002 fc47 	bl	8004108 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 800187a:	2001      	movs	r0, #1
 800187c:	f001 f890 	bl	80029a0 <HAL_Delay>
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000114 	.word	0x20000114

0800188c <PCA9685_SetPWMFrequency>:
  * @brief  Set PWM frequency (24Hz to 1526Hz)
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af04      	add	r7, sp, #16
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;

  // Ensure frequency is within valid range
  if(frequency >= 1526)
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 800189c:	4293      	cmp	r3, r2
 800189e:	d902      	bls.n	80018a6 <PCA9685_SetPWMFrequency+0x1a>
    prescale = 0x03;  // Maximum frequency (1526Hz)
 80018a0:	2303      	movs	r3, #3
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e00c      	b.n	80018c0 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24)
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	2b18      	cmp	r3, #24
 80018aa:	d802      	bhi.n	80018b2 <PCA9685_SetPWMFrequency+0x26>
    prescale = 0xFF;  // Minimum frequency (24Hz)
 80018ac:	23ff      	movs	r3, #255	@ 0xff
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e006      	b.n	80018c0 <PCA9685_SetPWMFrequency+0x34>
  else
    // Calculate prescale value based on 25MHz internal oscillator
    prescale = (uint8_t)(25000000 / (4096 * frequency));
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	031b      	lsls	r3, r3, #12
 80018b6:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <PCA9685_SetPWMFrequency+0x74>)
 80018b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	73fb      	strb	r3, [r7, #15]

  // Enter sleep mode before changing the frequency
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 80018c0:	2201      	movs	r2, #1
 80018c2:	2104      	movs	r1, #4
 80018c4:	2000      	movs	r0, #0
 80018c6:	f7ff ff97 	bl	80017f8 <PCA9685_SetBit>

  // Set the prescale value
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 80018ca:	230a      	movs	r3, #10
 80018cc:	9302      	str	r3, [sp, #8]
 80018ce:	2301      	movs	r3, #1
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	f107 030f 	add.w	r3, r7, #15
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2301      	movs	r3, #1
 80018da:	22fe      	movs	r2, #254	@ 0xfe
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	4809      	ldr	r0, [pc, #36]	@ (8001904 <PCA9685_SetPWMFrequency+0x78>)
 80018e0:	f002 fc12 	bl	8004108 <HAL_I2C_Mem_Write>

  // Exit sleep mode
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2104      	movs	r1, #4
 80018e8:	2000      	movs	r0, #0
 80018ea:	f7ff ff85 	bl	80017f8 <PCA9685_SetBit>

  // Restart all PWM channels
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 80018ee:	2201      	movs	r2, #1
 80018f0:	2107      	movs	r1, #7
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff ff80 	bl	80017f8 <PCA9685_SetBit>
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	017d7840 	.word	0x017d7840
 8001904:	20000114 	.word	0x20000114

08001908 <PCA9685_Init>:
  * @brief  Initialize PCA9685 with specified frequency
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_Init(uint16_t frequency)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	80fb      	strh	r3, [r7, #6]
  // Set desired PWM frequency (usually 50Hz for standard servos)
  PCA9685_SetPWMFrequency(frequency);
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ffb9 	bl	800188c <PCA9685_SetPWMFrequency>

  // Enable Auto-Increment for efficient register writing
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 800191a:	2201      	movs	r2, #1
 800191c:	2105      	movs	r1, #5
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff ff6a 	bl	80017f8 <PCA9685_SetBit>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <PCA9685_SetPWM>:
  * @param  OnTime: Value between 0-4095 for ON time
  * @param  OffTime: Value between 0-4095 for OFF time
  * @retval None
  */
void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af04      	add	r7, sp, #16
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
 8001936:	460b      	mov	r3, r1
 8001938:	80bb      	strh	r3, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];

  // Calculate register address for the specified channel
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	b2db      	uxtb	r3, r3
 8001944:	3306      	adds	r3, #6
 8001946:	73fb      	strb	r3, [r7, #15]

  // Prepare data bytes for ON and OFF times
  pwm[0] = OnTime & 0xFF;         // ON Low byte
 8001948:	88bb      	ldrh	r3, [r7, #4]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	723b      	strb	r3, [r7, #8]
  pwm[1] = (OnTime >> 8) & 0xFF;  // ON High byte
 800194e:	88bb      	ldrh	r3, [r7, #4]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	b29b      	uxth	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;        // OFF Low byte
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	72bb      	strb	r3, [r7, #10]
  pwm[3] = (OffTime >> 8) & 0xFF; // OFF High byte
 800195e:	887b      	ldrh	r3, [r7, #2]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	b29b      	uxth	r3, r3
 8001964:	b2db      	uxtb	r3, r3
 8001966:	72fb      	strb	r3, [r7, #11]

  // Write all 4 bytes in a single I2C transaction
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	b29a      	uxth	r2, r3
 800196c:	230a      	movs	r3, #10
 800196e:	9302      	str	r3, [sp, #8]
 8001970:	2304      	movs	r3, #4
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	2301      	movs	r3, #1
 800197c:	2180      	movs	r1, #128	@ 0x80
 800197e:	4803      	ldr	r0, [pc, #12]	@ (800198c <PCA9685_SetPWM+0x60>)
 8001980:	f002 fbc2 	bl	8004108 <HAL_I2C_Mem_Write>
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000114 	.word	0x20000114

08001990 <PCA9685_SetServoAngle>:
  * @param  Channel: Channel number (0-15)
  * @param  Angle: Desired angle (0-180 degrees)
  * @retval None
  */
void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	ed87 0a00 	vstr	s0, [r7]
 800199c:	71fb      	strb	r3, [r7, #7]
  float pwmValue;

  // Limit angle to 0-180 range
  if (Angle < 0) Angle = 0;
 800199e:	edd7 7a00 	vldr	s15, [r7]
 80019a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019aa:	d502      	bpl.n	80019b2 <PCA9685_SetServoAngle+0x22>
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
  if (Angle > 180) Angle = 180;
 80019b2:	edd7 7a00 	vldr	s15, [r7]
 80019b6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001a40 <PCA9685_SetServoAngle+0xb0>
 80019ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c2:	dd01      	ble.n	80019c8 <PCA9685_SetServoAngle+0x38>
 80019c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a44 <PCA9685_SetServoAngle+0xb4>)
 80019c6:	603b      	str	r3, [r7, #0]

  // Convert angle to PWM value
  // At 50Hz: 0° = 102.4 value (0.5ms), 180° = 511.9 value (2.5ms)
  pwmValue = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f7fe fdd5 	bl	8000578 <__aeabi_f2d>
 80019ce:	a318      	add	r3, pc, #96	@ (adr r3, 8001a30 <PCA9685_SetServoAngle+0xa0>)
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7fe fe28 	bl	8000628 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <PCA9685_SetServoAngle+0xb8>)
 80019e6:	f7fe ff49 	bl	800087c <__aeabi_ddiv>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	a311      	add	r3, pc, #68	@ (adr r3, 8001a38 <PCA9685_SetServoAngle+0xa8>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fc60 	bl	80002bc <__adddf3>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff f822 	bl	8000a4c <__aeabi_d2f>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60fb      	str	r3, [r7, #12]

  // Set PWM with calculated value
  PCA9685_SetPWM(Channel, 0, (uint16_t)pwmValue);
 8001a0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a14:	ee17 3a90 	vmov	r3, s15
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff84 	bl	800192c <PCA9685_SetPWM>
}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	f3af 8000 	nop.w
 8001a30:	00000000 	.word	0x00000000
 8001a34:	40799800 	.word	0x40799800
 8001a38:	9999999a 	.word	0x9999999a
 8001a3c:	40599999 	.word	0x40599999
 8001a40:	43340000 	.word	0x43340000
 8001a44:	43340000 	.word	0x43340000
 8001a48:	40668000 	.word	0x40668000

08001a4c <RAYKHA_ReadRaw>:
/**
 * @brief Read raw values from all sensors
 * @param sensor_values Array to store the raw sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 */
void RAYKHA_ReadRaw(uint16_t *sensor_values)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
    // Read each sensor
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	e00c      	b.n	8001a74 <RAYKHA_ReadRaw+0x28>
    {
        sensor_values[i] = AnalogMux_ReadChannel(RAYKHA_FIRST_MUX_CHANNEL + i);
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	18d4      	adds	r4, r2, r3
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fa33 	bl	8000ed0 <AnalogMux_ReadChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	3301      	adds	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	2b07      	cmp	r3, #7
 8001a78:	d9ef      	bls.n	8001a5a <RAYKHA_ReadRaw+0xe>
    }
}
 8001a7a:	bf00      	nop
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd90      	pop	{r4, r7, pc}

08001a84 <RAYKHA_Calibrate>:
 * @brief Calibrate the sensor array
 * @param calibration Pointer to calibration data structure
 * @param line_type Type of line (RAYKHA_LINE_WHITE or RAYKHA_LINE_BLACK)
 */
void RAYKHA_Calibrate(RAYKHA_Calibration *calibration, uint8_t line_type)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	70fb      	strb	r3, [r7, #3]

		uint16_t sensor_values[RAYKHA_NUM_SENSORS];

		// Initialize calibration data
		for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	77fb      	strb	r3, [r7, #31]
 8001a94:	e00e      	b.n	8001ab4 <RAYKHA_Calibrate+0x30>
		{
			calibration->min_values[i] = 0xFFFF;  // Max possible value
 8001a96:	7ffa      	ldrb	r2, [r7, #31]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001a9e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			calibration->max_values[i] = 0;       // Min possible value
 8001aa2:	7ffa      	ldrb	r2, [r7, #31]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3208      	adds	r2, #8
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001aae:	7ffb      	ldrb	r3, [r7, #31]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	77fb      	strb	r3, [r7, #31]
 8001ab4:	7ffb      	ldrb	r3, [r7, #31]
 8001ab6:	2b07      	cmp	r3, #7
 8001ab8:	d9ed      	bls.n	8001a96 <RAYKHA_Calibrate+0x12>
		}

		calibration->line_type = line_type;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	f883 2020 	strb.w	r2, [r3, #32]

    	for(uint8_t i = 0; i < 100; i++){
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	77bb      	strb	r3, [r7, #30]
 8001ac6:	e086      	b.n	8001bd6 <RAYKHA_Calibrate+0x152>
    		// Take multiple samples for more accurate calibration
			for (uint8_t sample = 0; sample < RAYKHA_CALIBRATION_SAMPLES; sample++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	777b      	strb	r3, [r7, #29]
 8001acc:	e041      	b.n	8001b52 <RAYKHA_Calibrate+0xce>
			{
				// Read raw sensor values
				RAYKHA_ReadRaw(sensor_values);
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ffba 	bl	8001a4c <RAYKHA_ReadRaw>

				// Update min and max values
				for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	773b      	strb	r3, [r7, #28]
 8001adc:	e030      	b.n	8001b40 <RAYKHA_Calibrate+0xbc>
				{
					if (sensor_values[i] < calibration->min_values[i])
 8001ade:	7f3b      	ldrb	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	3320      	adds	r3, #32
 8001ae4:	443b      	add	r3, r7
 8001ae6:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8001aea:	7f39      	ldrb	r1, [r7, #28]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d209      	bcs.n	8001b0a <RAYKHA_Calibrate+0x86>
					{
						calibration->min_values[i] = sensor_values[i];
 8001af6:	7f3b      	ldrb	r3, [r7, #28]
 8001af8:	7f3a      	ldrb	r2, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	3320      	adds	r3, #32
 8001afe:	443b      	add	r3, r7
 8001b00:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					}
					if (sensor_values[i] > calibration->max_values[i])
 8001b0a:	7f3b      	ldrb	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	3320      	adds	r3, #32
 8001b10:	443b      	add	r3, r7
 8001b12:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8001b16:	7f39      	ldrb	r1, [r7, #28]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3108      	adds	r1, #8
 8001b1c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d90a      	bls.n	8001b3a <RAYKHA_Calibrate+0xb6>
					{
						calibration->max_values[i] = sensor_values[i];
 8001b24:	7f3b      	ldrb	r3, [r7, #28]
 8001b26:	7f3a      	ldrb	r2, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	3320      	adds	r3, #32
 8001b2c:	443b      	add	r3, r7
 8001b2e:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001b3a:	7f3b      	ldrb	r3, [r7, #28]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	773b      	strb	r3, [r7, #28]
 8001b40:	7f3b      	ldrb	r3, [r7, #28]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	d9cb      	bls.n	8001ade <RAYKHA_Calibrate+0x5a>
					}
				}

				// Short delay between samples
				HAL_Delay(10);
 8001b46:	200a      	movs	r0, #10
 8001b48:	f000 ff2a 	bl	80029a0 <HAL_Delay>
			for (uint8_t sample = 0; sample < RAYKHA_CALIBRATION_SAMPLES; sample++)
 8001b4c:	7f7b      	ldrb	r3, [r7, #29]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	777b      	strb	r3, [r7, #29]
 8001b52:	7f7b      	ldrb	r3, [r7, #29]
 8001b54:	2b09      	cmp	r3, #9
 8001b56:	d9ba      	bls.n	8001ace <RAYKHA_Calibrate+0x4a>
			}

			// Add small margins to avoid edge cases
			for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	76fb      	strb	r3, [r7, #27]
 8001b5c:	e035      	b.n	8001bca <RAYKHA_Calibrate+0x146>
			{
				if (calibration->min_values[i] > 20)
 8001b5e:	7efa      	ldrb	r2, [r7, #27]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b66:	2b14      	cmp	r3, #20
 8001b68:	d90a      	bls.n	8001b80 <RAYKHA_Calibrate+0xfc>
					calibration->min_values[i] -= 20;
 8001b6a:	7efa      	ldrb	r2, [r7, #27]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b72:	7efa      	ldrb	r2, [r7, #27]
 8001b74:	3b14      	subs	r3, #20
 8001b76:	b299      	uxth	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001b7e:	e004      	b.n	8001b8a <RAYKHA_Calibrate+0x106>
				else
					calibration->min_values[i] = 0;
 8001b80:	7efa      	ldrb	r2, [r7, #27]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2100      	movs	r1, #0
 8001b86:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

				if (calibration->max_values[i] < 4075)
 8001b8a:	7efa      	ldrb	r2, [r7, #27]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3208      	adds	r2, #8
 8001b90:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b94:	f640 72ea 	movw	r2, #4074	@ 0xfea
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d80c      	bhi.n	8001bb6 <RAYKHA_Calibrate+0x132>
					calibration->max_values[i] += 20;
 8001b9c:	7efa      	ldrb	r2, [r7, #27]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3208      	adds	r2, #8
 8001ba2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ba6:	7efa      	ldrb	r2, [r7, #27]
 8001ba8:	3314      	adds	r3, #20
 8001baa:	b299      	uxth	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3208      	adds	r2, #8
 8001bb0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001bb4:	e006      	b.n	8001bc4 <RAYKHA_Calibrate+0x140>
				else
					calibration->max_values[i] = 4095;
 8001bb6:	7efa      	ldrb	r2, [r7, #27]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3208      	adds	r2, #8
 8001bbc:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8001bc0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001bc4:	7efb      	ldrb	r3, [r7, #27]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	76fb      	strb	r3, [r7, #27]
 8001bca:	7efb      	ldrb	r3, [r7, #27]
 8001bcc:	2b07      	cmp	r3, #7
 8001bce:	d9c6      	bls.n	8001b5e <RAYKHA_Calibrate+0xda>
    	for(uint8_t i = 0; i < 100; i++){
 8001bd0:	7fbb      	ldrb	r3, [r7, #30]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	77bb      	strb	r3, [r7, #30]
 8001bd6:	7fbb      	ldrb	r3, [r7, #30]
 8001bd8:	2b63      	cmp	r3, #99	@ 0x63
 8001bda:	f67f af75 	bls.w	8001ac8 <RAYKHA_Calibrate+0x44>
			}
    	}

}
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <RAYKHA_ReadCalibrated>:
 * @brief Read calibrated values from all sensors
 * @param sensor_values Array to store the calibrated sensor values (must be at least RAYKHA_NUM_SENSORS in size)
 * @param calibration Pointer to calibration data structure
 */
void RAYKHA_ReadCalibrated(uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8001be8:	b5b0      	push	{r4, r5, r7, lr}
 8001bea:	b08a      	sub	sp, #40	@ 0x28
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
    uint16_t raw_values[RAYKHA_NUM_SENSORS];

    // Read raw values
    RAYKHA_ReadRaw(raw_values);
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff28 	bl	8001a4c <RAYKHA_ReadRaw>

    // Apply calibration
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	77fb      	strb	r3, [r7, #31]
 8001c00:	e058      	b.n	8001cb4 <RAYKHA_ReadCalibrated+0xcc>
    {
        if (raw_values[i] < calibration->min_values[i])
 8001c02:	7ffb      	ldrb	r3, [r7, #31]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	3320      	adds	r3, #32
 8001c08:	443b      	add	r3, r7
 8001c0a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8001c0e:	7ff9      	ldrb	r1, [r7, #31]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d206      	bcs.n	8001c28 <RAYKHA_ReadCalibrated+0x40>
        {
            sensor_values[i] = 0;
 8001c1a:	7ffb      	ldrb	r3, [r7, #31]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	2200      	movs	r2, #0
 8001c24:	801a      	strh	r2, [r3, #0]
 8001c26:	e042      	b.n	8001cae <RAYKHA_ReadCalibrated+0xc6>
        }
        else if (raw_values[i] > calibration->max_values[i])
 8001c28:	7ffb      	ldrb	r3, [r7, #31]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	3320      	adds	r3, #32
 8001c2e:	443b      	add	r3, r7
 8001c30:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8001c34:	7ff9      	ldrb	r1, [r7, #31]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	3108      	adds	r1, #8
 8001c3a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d907      	bls.n	8001c52 <RAYKHA_ReadCalibrated+0x6a>
        {
            sensor_values[i] = 1000;
 8001c42:	7ffb      	ldrb	r3, [r7, #31]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c4e:	801a      	strh	r2, [r3, #0]
 8001c50:	e02d      	b.n	8001cae <RAYKHA_ReadCalibrated+0xc6>
        }
        else
        {
            // Map to 0-1000 range
            sensor_values[i] = map_range(raw_values[i],
 8001c52:	7ffb      	ldrb	r3, [r7, #31]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	3320      	adds	r3, #32
 8001c58:	443b      	add	r3, r7
 8001c5a:	f833 0c14 	ldrh.w	r0, [r3, #-20]
 8001c5e:	7ffa      	ldrb	r2, [r7, #31]
                                        calibration->min_values[i],
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
            sensor_values[i] = map_range(raw_values[i],
 8001c66:	7ffa      	ldrb	r2, [r7, #31]
                                        calibration->max_values[i],
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	3208      	adds	r2, #8
 8001c6c:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
            sensor_values[i] = map_range(raw_values[i],
 8001c70:	7ffb      	ldrb	r3, [r7, #31]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	18d4      	adds	r4, r2, r3
 8001c78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	462a      	mov	r2, r5
 8001c82:	f000 f878 	bl	8001d76 <map_range>
 8001c86:	4603      	mov	r3, r0
 8001c88:	8023      	strh	r3, [r4, #0]
                                        0, 1000);

		// Invert if needed (for white line on black background)
		if (calibration->line_type == RAYKHA_LINE_WHITE)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d10c      	bne.n	8001cae <RAYKHA_ReadCalibrated+0xc6>
		{
			sensor_values[i] = 1000 - sensor_values[i];
 8001c94:	7ffb      	ldrb	r3, [r7, #31]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	881a      	ldrh	r2, [r3, #0]
 8001c9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	440b      	add	r3, r1
 8001ca6:	f5c2 727a 	rsb	r2, r2, #1000	@ 0x3e8
 8001caa:	b292      	uxth	r2, r2
 8001cac:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001cae:	7ffb      	ldrb	r3, [r7, #31]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	77fb      	strb	r3, [r7, #31]
 8001cb4:	7ffb      	ldrb	r3, [r7, #31]
 8001cb6:	2b07      	cmp	r3, #7
 8001cb8:	d9a3      	bls.n	8001c02 <RAYKHA_ReadCalibrated+0x1a>
		}
        }
    }
}
 8001cba:	bf00      	nop
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bdb0      	pop	{r4, r5, r7, pc}

08001cc4 <RAYKHA_GetLinePosition>:
 * @param calibration Pointer to calibration data structure
 * @return Line position (0 to 7000, where 0 is the leftmost sensor and 7000 is the rightmost sensor)
 *         Returns -1 if no line is detected
 */
int32_t RAYKHA_GetLinePosition(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
    uint32_t weighted_sum = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
    uint32_t sum = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
    uint8_t line_detected = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]

    // Calculate weighted average
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	73bb      	strb	r3, [r7, #14]
 8001cde:	e01c      	b.n	8001d1a <RAYKHA_GetLinePosition+0x56>
    {
        uint16_t value = sensor_values[i];
 8001ce0:	7bbb      	ldrb	r3, [r7, #14]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	81bb      	strh	r3, [r7, #12]

        // A value above 200 indicates a line
        if (value > 200)
 8001cec:	89bb      	ldrh	r3, [r7, #12]
 8001cee:	2bc8      	cmp	r3, #200	@ 0xc8
 8001cf0:	d901      	bls.n	8001cf6 <RAYKHA_GetLinePosition+0x32>
        {
            line_detected = 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
        }

        weighted_sum += (uint32_t)value * (i * 1000);
 8001cf6:	89bb      	ldrh	r3, [r7, #12]
 8001cf8:	7bba      	ldrb	r2, [r7, #14]
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
 8001cfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4413      	add	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
        sum += value;
 8001d0c:	89bb      	ldrh	r3, [r7, #12]
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4413      	add	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
    for (uint8_t i = 0; i < RAYKHA_NUM_SENSORS; i++)
 8001d14:	7bbb      	ldrb	r3, [r7, #14]
 8001d16:	3301      	adds	r3, #1
 8001d18:	73bb      	strb	r3, [r7, #14]
 8001d1a:	7bbb      	ldrb	r3, [r7, #14]
 8001d1c:	2b07      	cmp	r3, #7
 8001d1e:	d9df      	bls.n	8001ce0 <RAYKHA_GetLinePosition+0x1c>
    }

    // Check if line is detected
    if (!line_detected || sum < 100)
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <RAYKHA_GetLinePosition+0x68>
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2b63      	cmp	r3, #99	@ 0x63
 8001d2a:	d802      	bhi.n	8001d32 <RAYKHA_GetLinePosition+0x6e>
    {
        return -1;
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d30:	e003      	b.n	8001d3a <RAYKHA_GetLinePosition+0x76>
    }

    return weighted_sum / sum;
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	371c      	adds	r7, #28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <RAYKHA_GetPositionForPID>:
 * @param calibration Pointer to calibration data structure
 * @return Line position centered around 0 (-3500 to 3500)
 *         Returns a large value (9999) if no line is detected
 */
int32_t RAYKHA_GetPositionForPID(const uint16_t *sensor_values, const RAYKHA_Calibration *calibration)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
    int32_t position = RAYKHA_GetLinePosition(sensor_values, calibration);
 8001d50:	6839      	ldr	r1, [r7, #0]
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ffb6 	bl	8001cc4 <RAYKHA_GetLinePosition>
 8001d58:	60f8      	str	r0, [r7, #12]

    // If no line detected, return a large value
    if (position == -1)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d60:	d102      	bne.n	8001d68 <RAYKHA_GetPositionForPID+0x22>
    {
        return 9999;
 8001d62:	f242 730f 	movw	r3, #9999	@ 0x270f
 8001d66:	e002      	b.n	8001d6e <RAYKHA_GetPositionForPID+0x28>
    }

    // Center the position around 0
    // The center of the sensor array is at 3500
    return position - 3500;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f6a3 53ac 	subw	r3, r3, #3500	@ 0xdac
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <map_range>:
 * @param out_min Minimum output value
 * @param out_max Maximum output value
 * @return Mapped value
 */
static uint16_t map_range(uint16_t value, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 8001d76:	b490      	push	{r4, r7}
 8001d78:	b084      	sub	sp, #16
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4604      	mov	r4, r0
 8001d7e:	4608      	mov	r0, r1
 8001d80:	4611      	mov	r1, r2
 8001d82:	461a      	mov	r2, r3
 8001d84:	4623      	mov	r3, r4
 8001d86:	80fb      	strh	r3, [r7, #6]
 8001d88:	4603      	mov	r3, r0
 8001d8a:	80bb      	strh	r3, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
 8001d90:	4613      	mov	r3, r2
 8001d92:	803b      	strh	r3, [r7, #0]
    // Check for division by zero
    if (in_max <= in_min) return out_min;
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	88bb      	ldrh	r3, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d801      	bhi.n	8001da0 <map_range+0x2a>
 8001d9c:	883b      	ldrh	r3, [r7, #0]
 8001d9e:	e01d      	b.n	8001ddc <map_range+0x66>

    // Map the value
    int32_t result = (int32_t)(value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001da0:	88fa      	ldrh	r2, [r7, #6]
 8001da2:	88bb      	ldrh	r3, [r7, #4]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	8b39      	ldrh	r1, [r7, #24]
 8001da8:	883a      	ldrh	r2, [r7, #0]
 8001daa:	1a8a      	subs	r2, r1, r2
 8001dac:	fb03 f202 	mul.w	r2, r3, r2
 8001db0:	8879      	ldrh	r1, [r7, #2]
 8001db2:	88bb      	ldrh	r3, [r7, #4]
 8001db4:	1acb      	subs	r3, r1, r3
 8001db6:	fb92 f2f3 	sdiv	r2, r2, r3
 8001dba:	883b      	ldrh	r3, [r7, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]

    // Constrain the result
    if (result < out_min) result = out_min;
 8001dc0:	883b      	ldrh	r3, [r7, #0]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	da01      	bge.n	8001dcc <map_range+0x56>
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	60fb      	str	r3, [r7, #12]
    if (result > out_max) result = out_max;
 8001dcc:	8b3b      	ldrh	r3, [r7, #24]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dd01      	ble.n	8001dd8 <map_range+0x62>
 8001dd4:	8b3b      	ldrh	r3, [r7, #24]
 8001dd6:	60fb      	str	r3, [r7, #12]

    return (uint16_t)result;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	b29b      	uxth	r3, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc90      	pop	{r4, r7}
 8001de4:	4770      	bx	lr
	...

08001de8 <Servo_Init>:
  * @brief  Initialize the servo control system
  * @param  frequency: PWM frequency for the servos (typically 50Hz)
  * @retval None
  */
void Servo_Init(uint16_t frequency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
    if (isInitialized)
 8001df2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <Servo_Init+0x3c>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d110      	bne.n	8001e1c <Servo_Init+0x34>
        return;

    // Initialize PCA9685 with the specified frequency
    PCA9685_Init(frequency);
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fd83 	bl	8001908 <PCA9685_Init>

    // Clear the servo array
    memset(servos, 0, sizeof(servos));
 8001e02:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8001e06:	2100      	movs	r1, #0
 8001e08:	4807      	ldr	r0, [pc, #28]	@ (8001e28 <Servo_Init+0x40>)
 8001e0a:	f005 fc49 	bl	80076a0 <memset>
    servoCount = 0;
 8001e0e:	4b07      	ldr	r3, [pc, #28]	@ (8001e2c <Servo_Init+0x44>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
    isInitialized = 1;
 8001e14:	4b03      	ldr	r3, [pc, #12]	@ (8001e24 <Servo_Init+0x3c>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
 8001e1a:	e000      	b.n	8001e1e <Servo_Init+0x36>
        return;
 8001e1c:	bf00      	nop
}
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000625 	.word	0x20000625
 8001e28:	200003e4 	.word	0x200003e4
 8001e2c:	20000624 	.word	0x20000624

08001e30 <Servo_Register>:
  * @param  minAngle: Minimum angle limit (0-180)
  * @param  maxAngle: Maximum angle limit (0-180)
  * @retval int: Servo ID (0 to MAX_SERVOS-1) or -1 if error
  */
int Servo_Register(uint8_t channel, const char* name, float minAngle, float maxAngle)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e3e:	edc7 0a00 	vstr	s1, [r7]
 8001e42:	73fb      	strb	r3, [r7, #15]
    // Check if initialized
    if (!isInitialized)
 8001e44:	4b6e      	ldr	r3, [pc, #440]	@ (8002000 <Servo_Register+0x1d0>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <Servo_Register+0x22>
        return -1;
 8001e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e50:	e0d1      	b.n	8001ff6 <Servo_Register+0x1c6>

    // Check if we've reached maximum servo count
    if (servoCount >= MAX_SERVOS)
 8001e52:	4b6c      	ldr	r3, [pc, #432]	@ (8002004 <Servo_Register+0x1d4>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b0f      	cmp	r3, #15
 8001e58:	d902      	bls.n	8001e60 <Servo_Register+0x30>
        return -1;
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5e:	e0ca      	b.n	8001ff6 <Servo_Register+0x1c6>

    // Check if channel is valid
    if (channel >= MAX_SERVOS)
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	2b0f      	cmp	r3, #15
 8001e64:	d902      	bls.n	8001e6c <Servo_Register+0x3c>
        return -1;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6a:	e0c4      	b.n	8001ff6 <Servo_Register+0x1c6>

    // Check if the channel is already in use
    for (int i = 0; i < servoCount; i++) {
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	e01b      	b.n	8001eaa <Servo_Register+0x7a>
        if (servos[i].initialized && servos[i].channel == channel)
 8001e72:	4965      	ldr	r1, [pc, #404]	@ (8002008 <Servo_Register+0x1d8>)
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	3310      	adds	r3, #16
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00d      	beq.n	8001ea4 <Servo_Register+0x74>
 8001e88:	495f      	ldr	r1, [pc, #380]	@ (8002008 <Servo_Register+0x1d8>)
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d102      	bne.n	8001ea4 <Servo_Register+0x74>
            return -1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	e0a8      	b.n	8001ff6 <Servo_Register+0x1c6>
    for (int i = 0; i < servoCount; i++) {
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	4b56      	ldr	r3, [pc, #344]	@ (8002004 <Servo_Register+0x1d4>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	dbdd      	blt.n	8001e72 <Servo_Register+0x42>
    }

    // Validate angle limits
    if (minAngle < SERVO_ANGLE_MIN) minAngle = SERVO_ANGLE_MIN;
 8001eb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec2:	d502      	bpl.n	8001eca <Servo_Register+0x9a>
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
    if (maxAngle > SERVO_ANGLE_MAX) maxAngle = SERVO_ANGLE_MAX;
 8001eca:	edd7 7a00 	vldr	s15, [r7]
 8001ece:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800200c <Servo_Register+0x1dc>
 8001ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eda:	dd01      	ble.n	8001ee0 <Servo_Register+0xb0>
 8001edc:	4b4c      	ldr	r3, [pc, #304]	@ (8002010 <Servo_Register+0x1e0>)
 8001ede:	603b      	str	r3, [r7, #0]
    if (minAngle >= maxAngle) return -1;
 8001ee0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ee4:	edd7 7a00 	vldr	s15, [r7]
 8001ee8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef0:	db02      	blt.n	8001ef8 <Servo_Register+0xc8>
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef6:	e07e      	b.n	8001ff6 <Servo_Register+0x1c6>

    // Register the servo
    int servoId = servoCount;
 8001ef8:	4b42      	ldr	r3, [pc, #264]	@ (8002004 <Servo_Register+0x1d4>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	613b      	str	r3, [r7, #16]
    servos[servoId].channel = channel;
 8001efe:	4942      	ldr	r1, [pc, #264]	@ (8002008 <Servo_Register+0x1d8>)
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	701a      	strb	r2, [r3, #0]
    servos[servoId].minAngle = minAngle;
 8001f10:	493d      	ldr	r1, [pc, #244]	@ (8002008 <Servo_Register+0x1d8>)
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3304      	adds	r3, #4
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	601a      	str	r2, [r3, #0]
    servos[servoId].maxAngle = maxAngle;
 8001f24:	4938      	ldr	r1, [pc, #224]	@ (8002008 <Servo_Register+0x1d8>)
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	3308      	adds	r3, #8
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	601a      	str	r2, [r3, #0]
    servos[servoId].currentAngle = (minAngle + maxAngle) / 2.0f;  // Center position
 8001f38:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f3c:	edd7 7a00 	vldr	s15, [r7]
 8001f40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f44:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f4c:	492e      	ldr	r1, [pc, #184]	@ (8002008 <Servo_Register+0x1d8>)
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	330c      	adds	r3, #12
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
    servos[servoId].initialized = 1;
 8001f60:	4929      	ldr	r1, [pc, #164]	@ (8002008 <Servo_Register+0x1d8>)
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	3310      	adds	r3, #16
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]

    // Set optional name
    if (name != NULL) {
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d018      	beq.n	8001fac <Servo_Register+0x17c>
        strncpy(servos[servoId].name, name, sizeof(servos[servoId].name) - 1);
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	3310      	adds	r3, #16
 8001f86:	4a20      	ldr	r2, [pc, #128]	@ (8002008 <Servo_Register+0x1d8>)
 8001f88:	4413      	add	r3, r2
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f005 fb8d 	bl	80076b0 <strncpy>
        servos[servoId].name[sizeof(servos[servoId].name) - 1] = '\0';  // Ensure null termination
 8001f96:	491c      	ldr	r1, [pc, #112]	@ (8002008 <Servo_Register+0x1d8>)
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	3320      	adds	r3, #32
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
 8001faa:	e00d      	b.n	8001fc8 <Servo_Register+0x198>
    } else {
        snprintf(servos[servoId].name, sizeof(servos[servoId].name), "Servo%d", servoId);
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	3310      	adds	r3, #16
 8001fb8:	4a13      	ldr	r2, [pc, #76]	@ (8002008 <Servo_Register+0x1d8>)
 8001fba:	4413      	add	r3, r2
 8001fbc:	1c58      	adds	r0, r3, #1
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4a14      	ldr	r2, [pc, #80]	@ (8002014 <Servo_Register+0x1e4>)
 8001fc2:	2110      	movs	r1, #16
 8001fc4:	f005 fb38 	bl	8007638 <sniprintf>
    }

    // Update servo count
    servoCount++;
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <Servo_Register+0x1d4>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <Servo_Register+0x1d4>)
 8001fd2:	701a      	strb	r2, [r3, #0]

    // Move servo to center position
    PCA9685_SetServoAngle(channel, servos[servoId].currentAngle);
 8001fd4:	490c      	ldr	r1, [pc, #48]	@ (8002008 <Servo_Register+0x1d8>)
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	330c      	adds	r3, #12
 8001fe4:	edd3 7a00 	vldr	s15, [r3]
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	eeb0 0a67 	vmov.f32	s0, s15
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fcce 	bl	8001990 <PCA9685_SetServoAngle>

    return servoId;
 8001ff4:	693b      	ldr	r3, [r7, #16]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000625 	.word	0x20000625
 8002004:	20000624 	.word	0x20000624
 8002008:	200003e4 	.word	0x200003e4
 800200c:	43340000 	.word	0x43340000
 8002010:	43340000 	.word	0x43340000
 8002014:	08007fec 	.word	0x08007fec

08002018 <Servo_SetAngle>:
  * @param  servoId: ID returned from Servo_Register
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngle(int servoId, float angle)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	ed87 0a00 	vstr	s0, [r7]
    // Check if servo ID is valid
    if (servoId < 0 || servoId >= servoCount || !servos[servoId].initialized)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	db10      	blt.n	800204c <Servo_SetAngle+0x34>
 800202a:	4b33      	ldr	r3, [pc, #204]	@ (80020f8 <Servo_SetAngle+0xe0>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4293      	cmp	r3, r2
 8002034:	da0a      	bge.n	800204c <Servo_SetAngle+0x34>
 8002036:	4931      	ldr	r1, [pc, #196]	@ (80020fc <Servo_SetAngle+0xe4>)
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	3310      	adds	r3, #16
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <Servo_SetAngle+0x3a>
        return -1;
 800204c:	f04f 33ff 	mov.w	r3, #4294967295
 8002050:	e04d      	b.n	80020ee <Servo_SetAngle+0xd6>

    // Clamp angle to servo limits
    if (angle < servos[servoId].minAngle)
 8002052:	492a      	ldr	r1, [pc, #168]	@ (80020fc <Servo_SetAngle+0xe4>)
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	3304      	adds	r3, #4
 8002062:	edd3 7a00 	vldr	s15, [r3]
 8002066:	ed97 7a00 	vldr	s14, [r7]
 800206a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800206e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002072:	d509      	bpl.n	8002088 <Servo_SetAngle+0x70>
        angle = servos[servoId].minAngle;
 8002074:	4921      	ldr	r1, [pc, #132]	@ (80020fc <Servo_SetAngle+0xe4>)
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	3304      	adds	r3, #4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	603b      	str	r3, [r7, #0]
    if (angle > servos[servoId].maxAngle)
 8002088:	491c      	ldr	r1, [pc, #112]	@ (80020fc <Servo_SetAngle+0xe4>)
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	3308      	adds	r3, #8
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	ed97 7a00 	vldr	s14, [r7]
 80020a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a8:	dd09      	ble.n	80020be <Servo_SetAngle+0xa6>
        angle = servos[servoId].maxAngle;
 80020aa:	4914      	ldr	r1, [pc, #80]	@ (80020fc <Servo_SetAngle+0xe4>)
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	3308      	adds	r3, #8
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	603b      	str	r3, [r7, #0]

    // Update current angle
    servos[servoId].currentAngle = angle;
 80020be:	490f      	ldr	r1, [pc, #60]	@ (80020fc <Servo_SetAngle+0xe4>)
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	330c      	adds	r3, #12
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	601a      	str	r2, [r3, #0]

    // Set servo position
    PCA9685_SetServoAngle(servos[servoId].channel, angle);
 80020d2:	490a      	ldr	r1, [pc, #40]	@ (80020fc <Servo_SetAngle+0xe4>)
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	ed97 0a00 	vldr	s0, [r7]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fc52 	bl	8001990 <PCA9685_SetServoAngle>

    return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000624 	.word	0x20000624
 80020fc:	200003e4 	.word	0x200003e4

08002100 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <HAL_MspInit+0x4c>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	4a0f      	ldr	r2, [pc, #60]	@ (800214c <HAL_MspInit+0x4c>)
 8002110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002114:	6453      	str	r3, [r2, #68]	@ 0x44
 8002116:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <HAL_MspInit+0x4c>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	4b09      	ldr	r3, [pc, #36]	@ (800214c <HAL_MspInit+0x4c>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	4a08      	ldr	r2, [pc, #32]	@ (800214c <HAL_MspInit+0x4c>)
 800212c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002130:	6413      	str	r3, [r2, #64]	@ 0x40
 8002132:	4b06      	ldr	r3, [pc, #24]	@ (800214c <HAL_MspInit+0x4c>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800213e:	2007      	movs	r0, #7
 8002140:	f001 f932 	bl	80033a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800

08002150 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	@ 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a17      	ldr	r2, [pc, #92]	@ (80021cc <HAL_ADC_MspInit+0x7c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d127      	bne.n	80021c2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	4b16      	ldr	r3, [pc, #88]	@ (80021d0 <HAL_ADC_MspInit+0x80>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	4a15      	ldr	r2, [pc, #84]	@ (80021d0 <HAL_ADC_MspInit+0x80>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002180:	6453      	str	r3, [r2, #68]	@ 0x44
 8002182:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <HAL_ADC_MspInit+0x80>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4b0f      	ldr	r3, [pc, #60]	@ (80021d0 <HAL_ADC_MspInit+0x80>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	4a0e      	ldr	r2, [pc, #56]	@ (80021d0 <HAL_ADC_MspInit+0x80>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6313      	str	r3, [r2, #48]	@ 0x30
 800219e:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <HAL_ADC_MspInit+0x80>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_ADC_Pin;
 80021aa:	2301      	movs	r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ae:	2303      	movs	r3, #3
 80021b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_ADC_GPIO_Port, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	4805      	ldr	r0, [pc, #20]	@ (80021d4 <HAL_ADC_MspInit+0x84>)
 80021be:	f001 fcb1 	bl	8003b24 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80021c2:	bf00      	nop
 80021c4:	3728      	adds	r7, #40	@ 0x28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40012000 	.word	0x40012000
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40020800 	.word	0x40020800

080021d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	@ 0x30
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a42      	ldr	r2, [pc, #264]	@ (8002300 <HAL_I2C_MspInit+0x128>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d12c      	bne.n	8002254 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	4b41      	ldr	r3, [pc, #260]	@ (8002304 <HAL_I2C_MspInit+0x12c>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002202:	4a40      	ldr	r2, [pc, #256]	@ (8002304 <HAL_I2C_MspInit+0x12c>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	6313      	str	r3, [r2, #48]	@ 0x30
 800220a:	4b3e      	ldr	r3, [pc, #248]	@ (8002304 <HAL_I2C_MspInit+0x12c>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002216:	23c0      	movs	r3, #192	@ 0xc0
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800221a:	2312      	movs	r3, #18
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002226:	2304      	movs	r3, #4
 8002228:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	4835      	ldr	r0, [pc, #212]	@ (8002308 <HAL_I2C_MspInit+0x130>)
 8002232:	f001 fc77 	bl	8003b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	4b32      	ldr	r3, [pc, #200]	@ (8002304 <HAL_I2C_MspInit+0x12c>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	4a31      	ldr	r2, [pc, #196]	@ (8002304 <HAL_I2C_MspInit+0x12c>)
 8002240:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002244:	6413      	str	r3, [r2, #64]	@ 0x40
 8002246:	4b2f      	ldr	r3, [pc, #188]	@ (8002304 <HAL_I2C_MspInit+0x12c>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002252:	e050      	b.n	80022f6 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2c      	ldr	r2, [pc, #176]	@ (800230c <HAL_I2C_MspInit+0x134>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d14b      	bne.n	80022f6 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	4b28      	ldr	r3, [pc, #160]	@ (8002304 <HAL_I2C_MspInit+0x12c>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	4a27      	ldr	r2, [pc, #156]	@ (8002304 <HAL_I2C_MspInit+0x12c>)
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	6313      	str	r3, [r2, #48]	@ 0x30
 800226e:	4b25      	ldr	r3, [pc, #148]	@ (8002304 <HAL_I2C_MspInit+0x12c>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b21      	ldr	r3, [pc, #132]	@ (8002304 <HAL_I2C_MspInit+0x12c>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	4a20      	ldr	r2, [pc, #128]	@ (8002304 <HAL_I2C_MspInit+0x12c>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6313      	str	r3, [r2, #48]	@ 0x30
 800228a:	4b1e      	ldr	r3, [pc, #120]	@ (8002304 <HAL_I2C_MspInit+0x12c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800229a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800229c:	2312      	movs	r3, #18
 800229e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a4:	2303      	movs	r3, #3
 80022a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022a8:	2304      	movs	r3, #4
 80022aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ac:	f107 031c 	add.w	r3, r7, #28
 80022b0:	4619      	mov	r1, r3
 80022b2:	4815      	ldr	r0, [pc, #84]	@ (8002308 <HAL_I2C_MspInit+0x130>)
 80022b4:	f001 fc36 	bl	8003b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022be:	2312      	movs	r3, #18
 80022c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c6:	2303      	movs	r3, #3
 80022c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022ca:	2304      	movs	r3, #4
 80022cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ce:	f107 031c 	add.w	r3, r7, #28
 80022d2:	4619      	mov	r1, r3
 80022d4:	480e      	ldr	r0, [pc, #56]	@ (8002310 <HAL_I2C_MspInit+0x138>)
 80022d6:	f001 fc25 	bl	8003b24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <HAL_I2C_MspInit+0x12c>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	4a08      	ldr	r2, [pc, #32]	@ (8002304 <HAL_I2C_MspInit+0x12c>)
 80022e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ea:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <HAL_I2C_MspInit+0x12c>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
}
 80022f6:	bf00      	nop
 80022f8:	3730      	adds	r7, #48	@ 0x30
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40005400 	.word	0x40005400
 8002304:	40023800 	.word	0x40023800
 8002308:	40020400 	.word	0x40020400
 800230c:	40005800 	.word	0x40005800
 8002310:	40020800 	.word	0x40020800

08002314 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08c      	sub	sp, #48	@ 0x30
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a32      	ldr	r2, [pc, #200]	@ (80023fc <HAL_TIM_Encoder_MspInit+0xe8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d12d      	bne.n	8002392 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	4b31      	ldr	r3, [pc, #196]	@ (8002400 <HAL_TIM_Encoder_MspInit+0xec>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	4a30      	ldr	r2, [pc, #192]	@ (8002400 <HAL_TIM_Encoder_MspInit+0xec>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6453      	str	r3, [r2, #68]	@ 0x44
 8002346:	4b2e      	ldr	r3, [pc, #184]	@ (8002400 <HAL_TIM_Encoder_MspInit+0xec>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	4b2a      	ldr	r3, [pc, #168]	@ (8002400 <HAL_TIM_Encoder_MspInit+0xec>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	4a29      	ldr	r2, [pc, #164]	@ (8002400 <HAL_TIM_Encoder_MspInit+0xec>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6313      	str	r3, [r2, #48]	@ 0x30
 8002362:	4b27      	ldr	r3, [pc, #156]	@ (8002400 <HAL_TIM_Encoder_MspInit+0xec>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 800236e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002380:	2301      	movs	r3, #1
 8002382:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002384:	f107 031c 	add.w	r3, r7, #28
 8002388:	4619      	mov	r1, r3
 800238a:	481e      	ldr	r0, [pc, #120]	@ (8002404 <HAL_TIM_Encoder_MspInit+0xf0>)
 800238c:	f001 fbca 	bl	8003b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002390:	e030      	b.n	80023f4 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800239a:	d12b      	bne.n	80023f4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800239c:	2300      	movs	r3, #0
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	4b17      	ldr	r3, [pc, #92]	@ (8002400 <HAL_TIM_Encoder_MspInit+0xec>)
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a4:	4a16      	ldr	r2, [pc, #88]	@ (8002400 <HAL_TIM_Encoder_MspInit+0xec>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ac:	4b14      	ldr	r3, [pc, #80]	@ (8002400 <HAL_TIM_Encoder_MspInit+0xec>)
 80023ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	4b10      	ldr	r3, [pc, #64]	@ (8002400 <HAL_TIM_Encoder_MspInit+0xec>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c0:	4a0f      	ldr	r2, [pc, #60]	@ (8002400 <HAL_TIM_Encoder_MspInit+0xec>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002400 <HAL_TIM_Encoder_MspInit+0xec>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 80023d4:	2303      	movs	r3, #3
 80023d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023e4:	2301      	movs	r3, #1
 80023e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 031c 	add.w	r3, r7, #28
 80023ec:	4619      	mov	r1, r3
 80023ee:	4805      	ldr	r0, [pc, #20]	@ (8002404 <HAL_TIM_Encoder_MspInit+0xf0>)
 80023f0:	f001 fb98 	bl	8003b24 <HAL_GPIO_Init>
}
 80023f4:	bf00      	nop
 80023f6:	3730      	adds	r7, #48	@ 0x30
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40010000 	.word	0x40010000
 8002400:	40023800 	.word	0x40023800
 8002404:	40020000 	.word	0x40020000

08002408 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a0b      	ldr	r2, [pc, #44]	@ (8002444 <HAL_TIM_PWM_MspInit+0x3c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d10d      	bne.n	8002436 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <HAL_TIM_PWM_MspInit+0x40>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002422:	4a09      	ldr	r2, [pc, #36]	@ (8002448 <HAL_TIM_PWM_MspInit+0x40>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	6413      	str	r3, [r2, #64]	@ 0x40
 800242a:	4b07      	ldr	r3, [pc, #28]	@ (8002448 <HAL_TIM_PWM_MspInit+0x40>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40000400 	.word	0x40000400
 8002448:	40023800 	.word	0x40023800

0800244c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	@ 0x28
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a21      	ldr	r2, [pc, #132]	@ (80024f0 <HAL_TIM_MspPostInit+0xa4>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d13b      	bne.n	80024e6 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <HAL_TIM_MspPostInit+0xa8>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	4a1f      	ldr	r2, [pc, #124]	@ (80024f4 <HAL_TIM_MspPostInit+0xa8>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6313      	str	r3, [r2, #48]	@ 0x30
 800247e:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <HAL_TIM_MspPostInit+0xa8>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	4b19      	ldr	r3, [pc, #100]	@ (80024f4 <HAL_TIM_MspPostInit+0xa8>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	4a18      	ldr	r2, [pc, #96]	@ (80024f4 <HAL_TIM_MspPostInit+0xa8>)
 8002494:	f043 0302 	orr.w	r3, r3, #2
 8002498:	6313      	str	r3, [r2, #48]	@ 0x30
 800249a:	4b16      	ldr	r3, [pc, #88]	@ (80024f4 <HAL_TIM_MspPostInit+0xa8>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024a6:	23c0      	movs	r3, #192	@ 0xc0
 80024a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024aa:	2302      	movs	r3, #2
 80024ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024b6:	2302      	movs	r3, #2
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4619      	mov	r1, r3
 80024c0:	480d      	ldr	r0, [pc, #52]	@ (80024f8 <HAL_TIM_MspPostInit+0xac>)
 80024c2:	f001 fb2f 	bl	8003b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024c6:	2303      	movs	r3, #3
 80024c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d2:	2300      	movs	r3, #0
 80024d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024d6:	2302      	movs	r3, #2
 80024d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	4806      	ldr	r0, [pc, #24]	@ (80024fc <HAL_TIM_MspPostInit+0xb0>)
 80024e2:	f001 fb1f 	bl	8003b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80024e6:	bf00      	nop
 80024e8:	3728      	adds	r7, #40	@ 0x28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40000400 	.word	0x40000400
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40020400 	.word	0x40020400

08002500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08e      	sub	sp, #56	@ 0x38
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a66      	ldr	r2, [pc, #408]	@ (80026b8 <HAL_UART_MspInit+0x1b8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d12c      	bne.n	800257c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	623b      	str	r3, [r7, #32]
 8002526:	4b65      	ldr	r3, [pc, #404]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	4a64      	ldr	r2, [pc, #400]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 800252c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002530:	6413      	str	r3, [r2, #64]	@ 0x40
 8002532:	4b62      	ldr	r3, [pc, #392]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253a:	623b      	str	r3, [r7, #32]
 800253c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	4b5e      	ldr	r3, [pc, #376]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	4a5d      	ldr	r2, [pc, #372]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6313      	str	r3, [r2, #48]	@ 0x30
 800254e:	4b5b      	ldr	r3, [pc, #364]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	61fb      	str	r3, [r7, #28]
 8002558:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800255a:	230c      	movs	r3, #12
 800255c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002566:	2303      	movs	r3, #3
 8002568:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800256a:	2307      	movs	r3, #7
 800256c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002572:	4619      	mov	r1, r3
 8002574:	4852      	ldr	r0, [pc, #328]	@ (80026c0 <HAL_UART_MspInit+0x1c0>)
 8002576:	f001 fad5 	bl	8003b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800257a:	e099      	b.n	80026b0 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a50      	ldr	r2, [pc, #320]	@ (80026c4 <HAL_UART_MspInit+0x1c4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d12d      	bne.n	80025e2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	4b4c      	ldr	r3, [pc, #304]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	4a4b      	ldr	r2, [pc, #300]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 8002590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002594:	6413      	str	r3, [r2, #64]	@ 0x40
 8002596:	4b49      	ldr	r3, [pc, #292]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	4b45      	ldr	r3, [pc, #276]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	4a44      	ldr	r2, [pc, #272]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b2:	4b42      	ldr	r3, [pc, #264]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80025be:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c4:	2302      	movs	r3, #2
 80025c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025cc:	2303      	movs	r3, #3
 80025ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025d0:	2307      	movs	r3, #7
 80025d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025d8:	4619      	mov	r1, r3
 80025da:	483b      	ldr	r0, [pc, #236]	@ (80026c8 <HAL_UART_MspInit+0x1c8>)
 80025dc:	f001 faa2 	bl	8003b24 <HAL_GPIO_Init>
}
 80025e0:	e066      	b.n	80026b0 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a39      	ldr	r2, [pc, #228]	@ (80026cc <HAL_UART_MspInit+0x1cc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d161      	bne.n	80026b0 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025ec:	2300      	movs	r3, #0
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	4b32      	ldr	r3, [pc, #200]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 80025f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f4:	4a31      	ldr	r2, [pc, #196]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 80025f6:	f043 0320 	orr.w	r3, r3, #32
 80025fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80025fc:	4b2f      	ldr	r3, [pc, #188]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 80025fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	4b2b      	ldr	r3, [pc, #172]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002610:	4a2a      	ldr	r2, [pc, #168]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 8002612:	f043 0304 	orr.w	r3, r3, #4
 8002616:	6313      	str	r3, [r2, #48]	@ 0x30
 8002618:	4b28      	ldr	r3, [pc, #160]	@ (80026bc <HAL_UART_MspInit+0x1bc>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002624:	23c0      	movs	r3, #192	@ 0xc0
 8002626:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002630:	2303      	movs	r3, #3
 8002632:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002634:	2308      	movs	r3, #8
 8002636:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002638:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800263c:	4619      	mov	r1, r3
 800263e:	4822      	ldr	r0, [pc, #136]	@ (80026c8 <HAL_UART_MspInit+0x1c8>)
 8002640:	f001 fa70 	bl	8003b24 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002644:	4b22      	ldr	r3, [pc, #136]	@ (80026d0 <HAL_UART_MspInit+0x1d0>)
 8002646:	4a23      	ldr	r2, [pc, #140]	@ (80026d4 <HAL_UART_MspInit+0x1d4>)
 8002648:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800264a:	4b21      	ldr	r3, [pc, #132]	@ (80026d0 <HAL_UART_MspInit+0x1d0>)
 800264c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002650:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002652:	4b1f      	ldr	r3, [pc, #124]	@ (80026d0 <HAL_UART_MspInit+0x1d0>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002658:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <HAL_UART_MspInit+0x1d0>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800265e:	4b1c      	ldr	r3, [pc, #112]	@ (80026d0 <HAL_UART_MspInit+0x1d0>)
 8002660:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002664:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002666:	4b1a      	ldr	r3, [pc, #104]	@ (80026d0 <HAL_UART_MspInit+0x1d0>)
 8002668:	2200      	movs	r2, #0
 800266a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800266c:	4b18      	ldr	r3, [pc, #96]	@ (80026d0 <HAL_UART_MspInit+0x1d0>)
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002672:	4b17      	ldr	r3, [pc, #92]	@ (80026d0 <HAL_UART_MspInit+0x1d0>)
 8002674:	2200      	movs	r2, #0
 8002676:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002678:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <HAL_UART_MspInit+0x1d0>)
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800267e:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <HAL_UART_MspInit+0x1d0>)
 8002680:	2200      	movs	r2, #0
 8002682:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002684:	4812      	ldr	r0, [pc, #72]	@ (80026d0 <HAL_UART_MspInit+0x1d0>)
 8002686:	f000 fed1 	bl	800342c <HAL_DMA_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_UART_MspInit+0x194>
      Error_Handler();
 8002690:	f7ff f8ac 	bl	80017ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a0e      	ldr	r2, [pc, #56]	@ (80026d0 <HAL_UART_MspInit+0x1d0>)
 8002698:	63da      	str	r2, [r3, #60]	@ 0x3c
 800269a:	4a0d      	ldr	r2, [pc, #52]	@ (80026d0 <HAL_UART_MspInit+0x1d0>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	2100      	movs	r1, #0
 80026a4:	2047      	movs	r0, #71	@ 0x47
 80026a6:	f000 fe8a 	bl	80033be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80026aa:	2047      	movs	r0, #71	@ 0x47
 80026ac:	f000 fea3 	bl	80033f6 <HAL_NVIC_EnableIRQ>
}
 80026b0:	bf00      	nop
 80026b2:	3738      	adds	r7, #56	@ 0x38
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40004400 	.word	0x40004400
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40020000 	.word	0x40020000
 80026c4:	40004800 	.word	0x40004800
 80026c8:	40020800 	.word	0x40020800
 80026cc:	40011400 	.word	0x40011400
 80026d0:	20000318 	.word	0x20000318
 80026d4:	40026428 	.word	0x40026428

080026d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <NMI_Handler+0x4>

080026e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <HardFault_Handler+0x4>

080026e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <MemManage_Handler+0x4>

080026f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <BusFault_Handler+0x4>

080026f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <UsageFault_Handler+0x4>

08002700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800272e:	f000 f917 	bl	8002960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 8002732:	f000 f85f 	bl	80027f4 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002740:	4802      	ldr	r0, [pc, #8]	@ (800274c <DMA2_Stream1_IRQHandler+0x10>)
 8002742:	f000 ffb3 	bl	80036ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000318 	.word	0x20000318

08002750 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002754:	4802      	ldr	r0, [pc, #8]	@ (8002760 <USART6_IRQHandler+0x10>)
 8002756:	f004 f871 	bl	800683c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200002d0 	.word	0x200002d0

08002764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800276c:	4a14      	ldr	r2, [pc, #80]	@ (80027c0 <_sbrk+0x5c>)
 800276e:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <_sbrk+0x60>)
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002778:	4b13      	ldr	r3, [pc, #76]	@ (80027c8 <_sbrk+0x64>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002780:	4b11      	ldr	r3, [pc, #68]	@ (80027c8 <_sbrk+0x64>)
 8002782:	4a12      	ldr	r2, [pc, #72]	@ (80027cc <_sbrk+0x68>)
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002786:	4b10      	ldr	r3, [pc, #64]	@ (80027c8 <_sbrk+0x64>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	429a      	cmp	r2, r3
 8002792:	d207      	bcs.n	80027a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002794:	f004 ffa0 	bl	80076d8 <__errno>
 8002798:	4603      	mov	r3, r0
 800279a:	220c      	movs	r2, #12
 800279c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
 80027a2:	e009      	b.n	80027b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027a4:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <_sbrk+0x64>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027aa:	4b07      	ldr	r3, [pc, #28]	@ (80027c8 <_sbrk+0x64>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	4a05      	ldr	r2, [pc, #20]	@ (80027c8 <_sbrk+0x64>)
 80027b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	20020000 	.word	0x20020000
 80027c4:	00000400 	.word	0x00000400
 80027c8:	20000628 	.word	0x20000628
 80027cc:	20000778 	.word	0x20000778

080027d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027d4:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <SystemInit+0x20>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027da:	4a05      	ldr	r2, [pc, #20]	@ (80027f0 <SystemInit+0x20>)
 80027dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <SysTickFunction>:

#include "main.h"
// #include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 80027fa:	f7fe fbbb 	bl	8000f74 <getRightEncoderCounts>
 80027fe:	4603      	mov	r3, r0
 8002800:	461a      	mov	r2, r3
 8002802:	f647 1318 	movw	r3, #31000	@ 0x7918
 8002806:	429a      	cmp	r2, r3
 8002808:	dc15      	bgt.n	8002836 <SysTickFunction+0x42>
 800280a:	f7fe fbbf 	bl	8000f8c <getLeftEncoderCounts>
 800280e:	4603      	mov	r3, r0
 8002810:	461a      	mov	r2, r3
 8002812:	f647 1318 	movw	r3, #31000	@ 0x7918
 8002816:	429a      	cmp	r2, r3
 8002818:	dc0d      	bgt.n	8002836 <SysTickFunction+0x42>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 800281a:	f7fe fbab 	bl	8000f74 <getRightEncoderCounts>
 800281e:	4603      	mov	r3, r0
 8002820:	461a      	mov	r2, r3
 8002822:	4b0f      	ldr	r3, [pc, #60]	@ (8002860 <SysTickFunction+0x6c>)
 8002824:	429a      	cmp	r2, r3
 8002826:	db06      	blt.n	8002836 <SysTickFunction+0x42>
 8002828:	f7fe fbb0 	bl	8000f8c <getLeftEncoderCounts>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	4b0b      	ldr	r3, [pc, #44]	@ (8002860 <SysTickFunction+0x6c>)
 8002832:	429a      	cmp	r2, r3
 8002834:	da10      	bge.n	8002858 <SysTickFunction+0x64>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8002836:	f7fe fb9d 	bl	8000f74 <getRightEncoderCounts>
 800283a:	4603      	mov	r3, r0
 800283c:	b29c      	uxth	r4, r3
 800283e:	f7fe fba5 	bl	8000f8c <getLeftEncoderCounts>
 8002842:	4603      	mov	r3, r0
 8002844:	b29b      	uxth	r3, r3
 8002846:	1ae3      	subs	r3, r4, r3
 8002848:	b29b      	uxth	r3, r3
 800284a:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 800284c:	f7fe fbaa 	bl	8000fa4 <resetEncoders>
		TIM1->CNT = (int16_t) difference;
 8002850:	4a04      	ldr	r2, [pc, #16]	@ (8002864 <SysTickFunction+0x70>)
 8002852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002856:	6253      	str	r3, [r2, #36]	@ 0x24
	}
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bd90      	pop	{r4, r7, pc}
 8002860:	ffff86e8 	.word	0xffff86e8
 8002864:	40010000 	.word	0x40010000

08002868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002868:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800286c:	f7ff ffb0 	bl	80027d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002870:	480c      	ldr	r0, [pc, #48]	@ (80028a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002872:	490d      	ldr	r1, [pc, #52]	@ (80028a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002874:	4a0d      	ldr	r2, [pc, #52]	@ (80028ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002878:	e002      	b.n	8002880 <LoopCopyDataInit>

0800287a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800287a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800287c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800287e:	3304      	adds	r3, #4

08002880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002884:	d3f9      	bcc.n	800287a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002886:	4a0a      	ldr	r2, [pc, #40]	@ (80028b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002888:	4c0a      	ldr	r4, [pc, #40]	@ (80028b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800288a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800288c:	e001      	b.n	8002892 <LoopFillZerobss>

0800288e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800288e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002890:	3204      	adds	r2, #4

08002892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002894:	d3fb      	bcc.n	800288e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002896:	f004 ff25 	bl	80076e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800289a:	f7fe fbb1 	bl	8001000 <main>
  bx  lr    
 800289e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80028ac:	08008058 	.word	0x08008058
  ldr r2, =_sbss
 80028b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80028b4:	20000778 	.word	0x20000778

080028b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028b8:	e7fe      	b.n	80028b8 <ADC_IRQHandler>
	...

080028bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028c0:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <HAL_Init+0x40>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0d      	ldr	r2, [pc, #52]	@ (80028fc <HAL_Init+0x40>)
 80028c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028cc:	4b0b      	ldr	r3, [pc, #44]	@ (80028fc <HAL_Init+0x40>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a0a      	ldr	r2, [pc, #40]	@ (80028fc <HAL_Init+0x40>)
 80028d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d8:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <HAL_Init+0x40>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a07      	ldr	r2, [pc, #28]	@ (80028fc <HAL_Init+0x40>)
 80028de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e4:	2003      	movs	r0, #3
 80028e6:	f000 fd5f 	bl	80033a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f000 f808 	bl	8002900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028f0:	f7ff fc06 	bl	8002100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40023c00 	.word	0x40023c00

08002900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002908:	4b12      	ldr	r3, [pc, #72]	@ (8002954 <HAL_InitTick+0x54>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <HAL_InitTick+0x58>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	4619      	mov	r1, r3
 8002912:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002916:	fbb3 f3f1 	udiv	r3, r3, r1
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fd77 	bl	8003412 <HAL_SYSTICK_Config>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e00e      	b.n	800294c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b0f      	cmp	r3, #15
 8002932:	d80a      	bhi.n	800294a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002934:	2200      	movs	r2, #0
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	f04f 30ff 	mov.w	r0, #4294967295
 800293c:	f000 fd3f 	bl	80033be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002940:	4a06      	ldr	r2, [pc, #24]	@ (800295c <HAL_InitTick+0x5c>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	e000      	b.n	800294c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000000 	.word	0x20000000
 8002958:	20000008 	.word	0x20000008
 800295c:	20000004 	.word	0x20000004

08002960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002964:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <HAL_IncTick+0x20>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <HAL_IncTick+0x24>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4413      	add	r3, r2
 8002970:	4a04      	ldr	r2, [pc, #16]	@ (8002984 <HAL_IncTick+0x24>)
 8002972:	6013      	str	r3, [r2, #0]
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000008 	.word	0x20000008
 8002984:	2000062c 	.word	0x2000062c

08002988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return uwTick;
 800298c:	4b03      	ldr	r3, [pc, #12]	@ (800299c <HAL_GetTick+0x14>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	2000062c 	.word	0x2000062c

080029a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a8:	f7ff ffee 	bl	8002988 <HAL_GetTick>
 80029ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d005      	beq.n	80029c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ba:	4b0a      	ldr	r3, [pc, #40]	@ (80029e4 <HAL_Delay+0x44>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4413      	add	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029c6:	bf00      	nop
 80029c8:	f7ff ffde 	bl	8002988 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d8f7      	bhi.n	80029c8 <HAL_Delay+0x28>
  {
  }
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000008 	.word	0x20000008

080029e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e033      	b.n	8002a66 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7ff fba2 	bl	8002150 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d118      	bne.n	8002a58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a2e:	f023 0302 	bic.w	r3, r3, #2
 8002a32:	f043 0202 	orr.w	r2, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fae8 	bl	8003010 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	f023 0303 	bic.w	r3, r3, #3
 8002a4e:	f043 0201 	orr.w	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a56:	e001      	b.n	8002a5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_ADC_Start+0x1a>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e0b2      	b.n	8002bf0 <HAL_ADC_Start+0x180>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d018      	beq.n	8002ad2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ab0:	4b52      	ldr	r3, [pc, #328]	@ (8002bfc <HAL_ADC_Start+0x18c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a52      	ldr	r2, [pc, #328]	@ (8002c00 <HAL_ADC_Start+0x190>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	0c9a      	lsrs	r2, r3, #18
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002ac4:	e002      	b.n	8002acc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f9      	bne.n	8002ac6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d17a      	bne.n	8002bd6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b0a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b1e:	d106      	bne.n	8002b2e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b24:	f023 0206 	bic.w	r2, r3, #6
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b2c:	e002      	b.n	8002b34 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b3c:	4b31      	ldr	r3, [pc, #196]	@ (8002c04 <HAL_ADC_Start+0x194>)
 8002b3e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b48:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 031f 	and.w	r3, r3, #31
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d12a      	bne.n	8002bac <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2b      	ldr	r2, [pc, #172]	@ (8002c08 <HAL_ADC_Start+0x198>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d015      	beq.n	8002b8c <HAL_ADC_Start+0x11c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a29      	ldr	r2, [pc, #164]	@ (8002c0c <HAL_ADC_Start+0x19c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d105      	bne.n	8002b76 <HAL_ADC_Start+0x106>
 8002b6a:	4b26      	ldr	r3, [pc, #152]	@ (8002c04 <HAL_ADC_Start+0x194>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a25      	ldr	r2, [pc, #148]	@ (8002c10 <HAL_ADC_Start+0x1a0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d136      	bne.n	8002bee <HAL_ADC_Start+0x17e>
 8002b80:	4b20      	ldr	r3, [pc, #128]	@ (8002c04 <HAL_ADC_Start+0x194>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d130      	bne.n	8002bee <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d129      	bne.n	8002bee <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ba8:	609a      	str	r2, [r3, #8]
 8002baa:	e020      	b.n	8002bee <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a15      	ldr	r2, [pc, #84]	@ (8002c08 <HAL_ADC_Start+0x198>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d11b      	bne.n	8002bee <HAL_ADC_Start+0x17e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d114      	bne.n	8002bee <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	e00b      	b.n	8002bee <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	f043 0210 	orr.w	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	431bde83 	.word	0x431bde83
 8002c04:	40012300 	.word	0x40012300
 8002c08:	40012000 	.word	0x40012000
 8002c0c:	40012100 	.word	0x40012100
 8002c10:	40012200 	.word	0x40012200

08002c14 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_Stop+0x16>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e021      	b.n	8002c6e <HAL_ADC_Stop+0x5a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0201 	bic.w	r2, r2, #1
 8002c40:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d109      	bne.n	8002c64 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	f043 0201 	orr.w	r2, r3, #1
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c96:	d113      	bne.n	8002cc0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ca6:	d10b      	bne.n	8002cc0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	f043 0220 	orr.w	r2, r3, #32
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e063      	b.n	8002d88 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc0:	f7ff fe62 	bl	8002988 <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cc6:	e021      	b.n	8002d0c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cce:	d01d      	beq.n	8002d0c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_ADC_PollForConversion+0x6c>
 8002cd6:	f7ff fe57 	bl	8002988 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d212      	bcs.n	8002d0c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d00b      	beq.n	8002d0c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	f043 0204 	orr.w	r2, r3, #4
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e03d      	b.n	8002d88 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d1d6      	bne.n	8002cc8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f06f 0212 	mvn.w	r2, #18
 8002d22:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d123      	bne.n	8002d86 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11f      	bne.n	8002d86 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d006      	beq.n	8002d62 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d111      	bne.n	8002d86 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d105      	bne.n	8002d86 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	f043 0201 	orr.w	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x1c>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e113      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x244>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b09      	cmp	r3, #9
 8002dd6:	d925      	bls.n	8002e24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68d9      	ldr	r1, [r3, #12]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	3b1e      	subs	r3, #30
 8002dee:	2207      	movs	r2, #7
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43da      	mvns	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68d9      	ldr	r1, [r3, #12]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	4618      	mov	r0, r3
 8002e10:	4603      	mov	r3, r0
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4403      	add	r3, r0
 8002e16:	3b1e      	subs	r3, #30
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	e022      	b.n	8002e6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6919      	ldr	r1, [r3, #16]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	4613      	mov	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	2207      	movs	r2, #7
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	400a      	ands	r2, r1
 8002e46:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6919      	ldr	r1, [r3, #16]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	4618      	mov	r0, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4403      	add	r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d824      	bhi.n	8002ebc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	3b05      	subs	r3, #5
 8002e84:	221f      	movs	r2, #31
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	400a      	ands	r2, r1
 8002e92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	3b05      	subs	r3, #5
 8002eae:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002eba:	e04c      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	d824      	bhi.n	8002f0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3b23      	subs	r3, #35	@ 0x23
 8002ed6:	221f      	movs	r2, #31
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43da      	mvns	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	400a      	ands	r2, r1
 8002ee4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	3b23      	subs	r3, #35	@ 0x23
 8002f00:	fa00 f203 	lsl.w	r2, r0, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f0c:	e023      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3b41      	subs	r3, #65	@ 0x41
 8002f20:	221f      	movs	r2, #31
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43da      	mvns	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	3b41      	subs	r3, #65	@ 0x41
 8002f4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f56:	4b29      	ldr	r3, [pc, #164]	@ (8002ffc <HAL_ADC_ConfigChannel+0x250>)
 8002f58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a28      	ldr	r2, [pc, #160]	@ (8003000 <HAL_ADC_ConfigChannel+0x254>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d10f      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1d8>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b12      	cmp	r3, #18
 8002f6a:	d10b      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1d      	ldr	r2, [pc, #116]	@ (8003000 <HAL_ADC_ConfigChannel+0x254>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d12b      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x23a>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1c      	ldr	r2, [pc, #112]	@ (8003004 <HAL_ADC_ConfigChannel+0x258>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <HAL_ADC_ConfigChannel+0x1f4>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b11      	cmp	r3, #17
 8002f9e:	d122      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a11      	ldr	r2, [pc, #68]	@ (8003004 <HAL_ADC_ConfigChannel+0x258>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d111      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fc2:	4b11      	ldr	r3, [pc, #68]	@ (8003008 <HAL_ADC_ConfigChannel+0x25c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a11      	ldr	r2, [pc, #68]	@ (800300c <HAL_ADC_ConfigChannel+0x260>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	0c9a      	lsrs	r2, r3, #18
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fd8:	e002      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f9      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40012300 	.word	0x40012300
 8003000:	40012000 	.word	0x40012000
 8003004:	10000012 	.word	0x10000012
 8003008:	20000000 	.word	0x20000000
 800300c:	431bde83 	.word	0x431bde83

08003010 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003018:	4b79      	ldr	r3, [pc, #484]	@ (8003200 <ADC_Init+0x1f0>)
 800301a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	431a      	orrs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	021a      	lsls	r2, r3, #8
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003068:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800308a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6899      	ldr	r1, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a2:	4a58      	ldr	r2, [pc, #352]	@ (8003204 <ADC_Init+0x1f4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d022      	beq.n	80030ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6899      	ldr	r1, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6899      	ldr	r1, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	e00f      	b.n	800310e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800310c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0202 	bic.w	r2, r2, #2
 800311c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6899      	ldr	r1, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	7e1b      	ldrb	r3, [r3, #24]
 8003128:	005a      	lsls	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01b      	beq.n	8003174 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800314a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800315a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6859      	ldr	r1, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003166:	3b01      	subs	r3, #1
 8003168:	035a      	lsls	r2, r3, #13
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	e007      	b.n	8003184 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003182:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003192:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	3b01      	subs	r3, #1
 80031a0:	051a      	lsls	r2, r3, #20
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6899      	ldr	r1, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031c6:	025a      	lsls	r2, r3, #9
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6899      	ldr	r1, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	029a      	lsls	r2, r3, #10
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	40012300 	.word	0x40012300
 8003204:	0f000001 	.word	0x0f000001

08003208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003218:	4b0c      	ldr	r3, [pc, #48]	@ (800324c <__NVIC_SetPriorityGrouping+0x44>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003224:	4013      	ands	r3, r2
 8003226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003230:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800323a:	4a04      	ldr	r2, [pc, #16]	@ (800324c <__NVIC_SetPriorityGrouping+0x44>)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	60d3      	str	r3, [r2, #12]
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003254:	4b04      	ldr	r3, [pc, #16]	@ (8003268 <__NVIC_GetPriorityGrouping+0x18>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	0a1b      	lsrs	r3, r3, #8
 800325a:	f003 0307 	and.w	r3, r3, #7
}
 800325e:	4618      	mov	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327a:	2b00      	cmp	r3, #0
 800327c:	db0b      	blt.n	8003296 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	f003 021f 	and.w	r2, r3, #31
 8003284:	4907      	ldr	r1, [pc, #28]	@ (80032a4 <__NVIC_EnableIRQ+0x38>)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2001      	movs	r0, #1
 800328e:	fa00 f202 	lsl.w	r2, r0, r2
 8003292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	e000e100 	.word	0xe000e100

080032a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	db0a      	blt.n	80032d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	490c      	ldr	r1, [pc, #48]	@ (80032f4 <__NVIC_SetPriority+0x4c>)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	0112      	lsls	r2, r2, #4
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	440b      	add	r3, r1
 80032cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d0:	e00a      	b.n	80032e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4908      	ldr	r1, [pc, #32]	@ (80032f8 <__NVIC_SetPriority+0x50>)
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	3b04      	subs	r3, #4
 80032e0:	0112      	lsls	r2, r2, #4
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	440b      	add	r3, r1
 80032e6:	761a      	strb	r2, [r3, #24]
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000e100 	.word	0xe000e100
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b089      	sub	sp, #36	@ 0x24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f1c3 0307 	rsb	r3, r3, #7
 8003316:	2b04      	cmp	r3, #4
 8003318:	bf28      	it	cs
 800331a:	2304      	movcs	r3, #4
 800331c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3304      	adds	r3, #4
 8003322:	2b06      	cmp	r3, #6
 8003324:	d902      	bls.n	800332c <NVIC_EncodePriority+0x30>
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3b03      	subs	r3, #3
 800332a:	e000      	b.n	800332e <NVIC_EncodePriority+0x32>
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003330:	f04f 32ff 	mov.w	r2, #4294967295
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43da      	mvns	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	401a      	ands	r2, r3
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003344:	f04f 31ff 	mov.w	r1, #4294967295
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	fa01 f303 	lsl.w	r3, r1, r3
 800334e:	43d9      	mvns	r1, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003354:	4313      	orrs	r3, r2
         );
}
 8003356:	4618      	mov	r0, r3
 8003358:	3724      	adds	r7, #36	@ 0x24
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3b01      	subs	r3, #1
 8003370:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003374:	d301      	bcc.n	800337a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003376:	2301      	movs	r3, #1
 8003378:	e00f      	b.n	800339a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800337a:	4a0a      	ldr	r2, [pc, #40]	@ (80033a4 <SysTick_Config+0x40>)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3b01      	subs	r3, #1
 8003380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003382:	210f      	movs	r1, #15
 8003384:	f04f 30ff 	mov.w	r0, #4294967295
 8003388:	f7ff ff8e 	bl	80032a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800338c:	4b05      	ldr	r3, [pc, #20]	@ (80033a4 <SysTick_Config+0x40>)
 800338e:	2200      	movs	r2, #0
 8003390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003392:	4b04      	ldr	r3, [pc, #16]	@ (80033a4 <SysTick_Config+0x40>)
 8003394:	2207      	movs	r2, #7
 8003396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	e000e010 	.word	0xe000e010

080033a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ff29 	bl	8003208 <__NVIC_SetPriorityGrouping>
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033be:	b580      	push	{r7, lr}
 80033c0:	b086      	sub	sp, #24
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033d0:	f7ff ff3e 	bl	8003250 <__NVIC_GetPriorityGrouping>
 80033d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	6978      	ldr	r0, [r7, #20]
 80033dc:	f7ff ff8e 	bl	80032fc <NVIC_EncodePriority>
 80033e0:	4602      	mov	r2, r0
 80033e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e6:	4611      	mov	r1, r2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff ff5d 	bl	80032a8 <__NVIC_SetPriority>
}
 80033ee:	bf00      	nop
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	4603      	mov	r3, r0
 80033fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff31 	bl	800326c <__NVIC_EnableIRQ>
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ffa2 	bl	8003364 <SysTick_Config>
 8003420:	4603      	mov	r3, r0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003438:	f7ff faa6 	bl	8002988 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e099      	b.n	800357c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0201 	bic.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003468:	e00f      	b.n	800348a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800346a:	f7ff fa8d 	bl	8002988 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b05      	cmp	r3, #5
 8003476:	d908      	bls.n	800348a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2203      	movs	r2, #3
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e078      	b.n	800357c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e8      	bne.n	800346a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4b38      	ldr	r3, [pc, #224]	@ (8003584 <HAL_DMA_Init+0x158>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d107      	bne.n	80034f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ec:	4313      	orrs	r3, r2
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f023 0307 	bic.w	r3, r3, #7
 800350a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351a:	2b04      	cmp	r3, #4
 800351c:	d117      	bne.n	800354e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4313      	orrs	r3, r2
 8003526:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00e      	beq.n	800354e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fa7b 	bl	8003a2c <DMA_CheckFifoParam>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2240      	movs	r2, #64	@ 0x40
 8003540:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800354a:	2301      	movs	r3, #1
 800354c:	e016      	b.n	800357c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fa32 	bl	80039c0 <DMA_CalcBaseAndBitshift>
 800355c:	4603      	mov	r3, r0
 800355e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003564:	223f      	movs	r2, #63	@ 0x3f
 8003566:	409a      	lsls	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	f010803f 	.word	0xf010803f

08003588 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003594:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003596:	f7ff f9f7 	bl	8002988 <HAL_GetTick>
 800359a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d008      	beq.n	80035ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2280      	movs	r2, #128	@ 0x80
 80035ac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e052      	b.n	8003660 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0216 	bic.w	r2, r2, #22
 80035c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d103      	bne.n	80035ea <HAL_DMA_Abort+0x62>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0208 	bic.w	r2, r2, #8
 80035f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800360a:	e013      	b.n	8003634 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800360c:	f7ff f9bc 	bl	8002988 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b05      	cmp	r3, #5
 8003618:	d90c      	bls.n	8003634 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2203      	movs	r2, #3
 8003624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e015      	b.n	8003660 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1e4      	bne.n	800360c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003646:	223f      	movs	r2, #63	@ 0x3f
 8003648:	409a      	lsls	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d004      	beq.n	8003686 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2280      	movs	r2, #128	@ 0x80
 8003680:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e00c      	b.n	80036a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2205      	movs	r2, #5
 800368a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0201 	bic.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036b8:	4b8e      	ldr	r3, [pc, #568]	@ (80038f4 <HAL_DMA_IRQHandler+0x248>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a8e      	ldr	r2, [pc, #568]	@ (80038f8 <HAL_DMA_IRQHandler+0x24c>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	0a9b      	lsrs	r3, r3, #10
 80036c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d6:	2208      	movs	r2, #8
 80036d8:	409a      	lsls	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01a      	beq.n	8003718 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d013      	beq.n	8003718 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0204 	bic.w	r2, r2, #4
 80036fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003704:	2208      	movs	r2, #8
 8003706:	409a      	lsls	r2, r3
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003710:	f043 0201 	orr.w	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371c:	2201      	movs	r2, #1
 800371e:	409a      	lsls	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4013      	ands	r3, r2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d012      	beq.n	800374e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00b      	beq.n	800374e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373a:	2201      	movs	r2, #1
 800373c:	409a      	lsls	r2, r3
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003746:	f043 0202 	orr.w	r2, r3, #2
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003752:	2204      	movs	r2, #4
 8003754:	409a      	lsls	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d012      	beq.n	8003784 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00b      	beq.n	8003784 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003770:	2204      	movs	r2, #4
 8003772:	409a      	lsls	r2, r3
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377c:	f043 0204 	orr.w	r2, r3, #4
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003788:	2210      	movs	r2, #16
 800378a:	409a      	lsls	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d043      	beq.n	800381c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d03c      	beq.n	800381c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a6:	2210      	movs	r2, #16
 80037a8:	409a      	lsls	r2, r3
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d018      	beq.n	80037ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d108      	bne.n	80037dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d024      	beq.n	800381c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
 80037da:	e01f      	b.n	800381c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01b      	beq.n	800381c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	4798      	blx	r3
 80037ec:	e016      	b.n	800381c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d107      	bne.n	800380c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0208 	bic.w	r2, r2, #8
 800380a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003820:	2220      	movs	r2, #32
 8003822:	409a      	lsls	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4013      	ands	r3, r2
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 808f 	beq.w	800394c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8087 	beq.w	800394c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003842:	2220      	movs	r2, #32
 8003844:	409a      	lsls	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b05      	cmp	r3, #5
 8003854:	d136      	bne.n	80038c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0216 	bic.w	r2, r2, #22
 8003864:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003874:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <HAL_DMA_IRQHandler+0x1da>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0208 	bic.w	r2, r2, #8
 8003894:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389a:	223f      	movs	r2, #63	@ 0x3f
 800389c:	409a      	lsls	r2, r3
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d07e      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	4798      	blx	r3
        }
        return;
 80038c2:	e079      	b.n	80039b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d01d      	beq.n	800390e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10d      	bne.n	80038fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d031      	beq.n	800394c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4798      	blx	r3
 80038f0:	e02c      	b.n	800394c <HAL_DMA_IRQHandler+0x2a0>
 80038f2:	bf00      	nop
 80038f4:	20000000 	.word	0x20000000
 80038f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d023      	beq.n	800394c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	4798      	blx	r3
 800390c:	e01e      	b.n	800394c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10f      	bne.n	800393c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0210 	bic.w	r2, r2, #16
 800392a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003950:	2b00      	cmp	r3, #0
 8003952:	d032      	beq.n	80039ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d022      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2205      	movs	r2, #5
 8003964:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	3301      	adds	r3, #1
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	429a      	cmp	r2, r3
 8003982:	d307      	bcc.n	8003994 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f2      	bne.n	8003978 <HAL_DMA_IRQHandler+0x2cc>
 8003992:	e000      	b.n	8003996 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003994:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	4798      	blx	r3
 80039b6:	e000      	b.n	80039ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80039b8:	bf00      	nop
    }
  }
}
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	3b10      	subs	r3, #16
 80039d0:	4a14      	ldr	r2, [pc, #80]	@ (8003a24 <DMA_CalcBaseAndBitshift+0x64>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039da:	4a13      	ldr	r2, [pc, #76]	@ (8003a28 <DMA_CalcBaseAndBitshift+0x68>)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4413      	add	r3, r2
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d909      	bls.n	8003a02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039f6:	f023 0303 	bic.w	r3, r3, #3
 80039fa:	1d1a      	adds	r2, r3, #4
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a00:	e007      	b.n	8003a12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a0a:	f023 0303 	bic.w	r3, r3, #3
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	aaaaaaab 	.word	0xaaaaaaab
 8003a28:	0800800c 	.word	0x0800800c

08003a2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d11f      	bne.n	8003a86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d856      	bhi.n	8003afa <DMA_CheckFifoParam+0xce>
 8003a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a54 <DMA_CheckFifoParam+0x28>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a65 	.word	0x08003a65
 8003a58:	08003a77 	.word	0x08003a77
 8003a5c:	08003a65 	.word	0x08003a65
 8003a60:	08003afb 	.word	0x08003afb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d046      	beq.n	8003afe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a74:	e043      	b.n	8003afe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a7e:	d140      	bne.n	8003b02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a84:	e03d      	b.n	8003b02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a8e:	d121      	bne.n	8003ad4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d837      	bhi.n	8003b06 <DMA_CheckFifoParam+0xda>
 8003a96:	a201      	add	r2, pc, #4	@ (adr r2, 8003a9c <DMA_CheckFifoParam+0x70>)
 8003a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9c:	08003aad 	.word	0x08003aad
 8003aa0:	08003ab3 	.word	0x08003ab3
 8003aa4:	08003aad 	.word	0x08003aad
 8003aa8:	08003ac5 	.word	0x08003ac5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab0:	e030      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d025      	beq.n	8003b0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ac2:	e022      	b.n	8003b0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003acc:	d11f      	bne.n	8003b0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ad2:	e01c      	b.n	8003b0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d903      	bls.n	8003ae2 <DMA_CheckFifoParam+0xb6>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d003      	beq.n	8003ae8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ae0:	e018      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae6:	e015      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00e      	beq.n	8003b12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
      break;
 8003af8:	e00b      	b.n	8003b12 <DMA_CheckFifoParam+0xe6>
      break;
 8003afa:	bf00      	nop
 8003afc:	e00a      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;
 8003afe:	bf00      	nop
 8003b00:	e008      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;
 8003b02:	bf00      	nop
 8003b04:	e006      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;
 8003b06:	bf00      	nop
 8003b08:	e004      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e002      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b0e:	bf00      	nop
 8003b10:	e000      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;
 8003b12:	bf00      	nop
    }
  } 
  
  return status; 
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop

08003b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	@ 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	e165      	b.n	8003e0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b40:	2201      	movs	r2, #1
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4013      	ands	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	f040 8154 	bne.w	8003e06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d005      	beq.n	8003b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d130      	bne.n	8003bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	2203      	movs	r2, #3
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bac:	2201      	movs	r2, #1
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 0201 	and.w	r2, r3, #1
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d017      	beq.n	8003c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	2203      	movs	r2, #3
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d123      	bne.n	8003c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	08da      	lsrs	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3208      	adds	r2, #8
 8003c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	220f      	movs	r2, #15
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	08da      	lsrs	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3208      	adds	r2, #8
 8003c62:	69b9      	ldr	r1, [r7, #24]
 8003c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	2203      	movs	r2, #3
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0203 	and.w	r2, r3, #3
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80ae 	beq.w	8003e06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	4b5d      	ldr	r3, [pc, #372]	@ (8003e24 <HAL_GPIO_Init+0x300>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb2:	4a5c      	ldr	r2, [pc, #368]	@ (8003e24 <HAL_GPIO_Init+0x300>)
 8003cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cba:	4b5a      	ldr	r3, [pc, #360]	@ (8003e24 <HAL_GPIO_Init+0x300>)
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cc6:	4a58      	ldr	r2, [pc, #352]	@ (8003e28 <HAL_GPIO_Init+0x304>)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	089b      	lsrs	r3, r3, #2
 8003ccc:	3302      	adds	r3, #2
 8003cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	220f      	movs	r2, #15
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a4f      	ldr	r2, [pc, #316]	@ (8003e2c <HAL_GPIO_Init+0x308>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d025      	beq.n	8003d3e <HAL_GPIO_Init+0x21a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a4e      	ldr	r2, [pc, #312]	@ (8003e30 <HAL_GPIO_Init+0x30c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01f      	beq.n	8003d3a <HAL_GPIO_Init+0x216>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a4d      	ldr	r2, [pc, #308]	@ (8003e34 <HAL_GPIO_Init+0x310>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d019      	beq.n	8003d36 <HAL_GPIO_Init+0x212>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a4c      	ldr	r2, [pc, #304]	@ (8003e38 <HAL_GPIO_Init+0x314>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <HAL_GPIO_Init+0x20e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a4b      	ldr	r2, [pc, #300]	@ (8003e3c <HAL_GPIO_Init+0x318>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00d      	beq.n	8003d2e <HAL_GPIO_Init+0x20a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a4a      	ldr	r2, [pc, #296]	@ (8003e40 <HAL_GPIO_Init+0x31c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d007      	beq.n	8003d2a <HAL_GPIO_Init+0x206>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a49      	ldr	r2, [pc, #292]	@ (8003e44 <HAL_GPIO_Init+0x320>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d101      	bne.n	8003d26 <HAL_GPIO_Init+0x202>
 8003d22:	2306      	movs	r3, #6
 8003d24:	e00c      	b.n	8003d40 <HAL_GPIO_Init+0x21c>
 8003d26:	2307      	movs	r3, #7
 8003d28:	e00a      	b.n	8003d40 <HAL_GPIO_Init+0x21c>
 8003d2a:	2305      	movs	r3, #5
 8003d2c:	e008      	b.n	8003d40 <HAL_GPIO_Init+0x21c>
 8003d2e:	2304      	movs	r3, #4
 8003d30:	e006      	b.n	8003d40 <HAL_GPIO_Init+0x21c>
 8003d32:	2303      	movs	r3, #3
 8003d34:	e004      	b.n	8003d40 <HAL_GPIO_Init+0x21c>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e002      	b.n	8003d40 <HAL_GPIO_Init+0x21c>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <HAL_GPIO_Init+0x21c>
 8003d3e:	2300      	movs	r3, #0
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	f002 0203 	and.w	r2, r2, #3
 8003d46:	0092      	lsls	r2, r2, #2
 8003d48:	4093      	lsls	r3, r2
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d50:	4935      	ldr	r1, [pc, #212]	@ (8003e28 <HAL_GPIO_Init+0x304>)
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	089b      	lsrs	r3, r3, #2
 8003d56:	3302      	adds	r3, #2
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e48 <HAL_GPIO_Init+0x324>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	43db      	mvns	r3, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d82:	4a31      	ldr	r2, [pc, #196]	@ (8003e48 <HAL_GPIO_Init+0x324>)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d88:	4b2f      	ldr	r3, [pc, #188]	@ (8003e48 <HAL_GPIO_Init+0x324>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dac:	4a26      	ldr	r2, [pc, #152]	@ (8003e48 <HAL_GPIO_Init+0x324>)
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003db2:	4b25      	ldr	r3, [pc, #148]	@ (8003e48 <HAL_GPIO_Init+0x324>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e48 <HAL_GPIO_Init+0x324>)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e48 <HAL_GPIO_Init+0x324>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e00:	4a11      	ldr	r2, [pc, #68]	@ (8003e48 <HAL_GPIO_Init+0x324>)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	61fb      	str	r3, [r7, #28]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	2b0f      	cmp	r3, #15
 8003e10:	f67f ae96 	bls.w	8003b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop
 8003e18:	3724      	adds	r7, #36	@ 0x24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40013800 	.word	0x40013800
 8003e2c:	40020000 	.word	0x40020000
 8003e30:	40020400 	.word	0x40020400
 8003e34:	40020800 	.word	0x40020800
 8003e38:	40020c00 	.word	0x40020c00
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	40021400 	.word	0x40021400
 8003e44:	40021800 	.word	0x40021800
 8003e48:	40013c00 	.word	0x40013c00

08003e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	807b      	strh	r3, [r7, #2]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e5c:	787b      	ldrb	r3, [r7, #1]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e62:	887a      	ldrh	r2, [r7, #2]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e68:	e003      	b.n	8003e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e6a:	887b      	ldrh	r3, [r7, #2]
 8003e6c:	041a      	lsls	r2, r3, #16
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	619a      	str	r2, [r3, #24]
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e12b      	b.n	80040ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fe f996 	bl	80021d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2224      	movs	r2, #36	@ 0x24
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ed2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ee2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ee4:	f001 f932 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 8003ee8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4a81      	ldr	r2, [pc, #516]	@ (80040f4 <HAL_I2C_Init+0x274>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d807      	bhi.n	8003f04 <HAL_I2C_Init+0x84>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4a80      	ldr	r2, [pc, #512]	@ (80040f8 <HAL_I2C_Init+0x278>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	bf94      	ite	ls
 8003efc:	2301      	movls	r3, #1
 8003efe:	2300      	movhi	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	e006      	b.n	8003f12 <HAL_I2C_Init+0x92>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4a7d      	ldr	r2, [pc, #500]	@ (80040fc <HAL_I2C_Init+0x27c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	bf94      	ite	ls
 8003f0c:	2301      	movls	r3, #1
 8003f0e:	2300      	movhi	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e0e7      	b.n	80040ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4a78      	ldr	r2, [pc, #480]	@ (8004100 <HAL_I2C_Init+0x280>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	0c9b      	lsrs	r3, r3, #18
 8003f24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4a6a      	ldr	r2, [pc, #424]	@ (80040f4 <HAL_I2C_Init+0x274>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d802      	bhi.n	8003f54 <HAL_I2C_Init+0xd4>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	3301      	adds	r3, #1
 8003f52:	e009      	b.n	8003f68 <HAL_I2C_Init+0xe8>
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	4a69      	ldr	r2, [pc, #420]	@ (8004104 <HAL_I2C_Init+0x284>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	099b      	lsrs	r3, r3, #6
 8003f66:	3301      	adds	r3, #1
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f7a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	495c      	ldr	r1, [pc, #368]	@ (80040f4 <HAL_I2C_Init+0x274>)
 8003f84:	428b      	cmp	r3, r1
 8003f86:	d819      	bhi.n	8003fbc <HAL_I2C_Init+0x13c>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1e59      	subs	r1, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f96:	1c59      	adds	r1, r3, #1
 8003f98:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f9c:	400b      	ands	r3, r1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_I2C_Init+0x138>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	1e59      	subs	r1, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb6:	e051      	b.n	800405c <HAL_I2C_Init+0x1dc>
 8003fb8:	2304      	movs	r3, #4
 8003fba:	e04f      	b.n	800405c <HAL_I2C_Init+0x1dc>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d111      	bne.n	8003fe8 <HAL_I2C_Init+0x168>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1e58      	subs	r0, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6859      	ldr	r1, [r3, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	440b      	add	r3, r1
 8003fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	e012      	b.n	800400e <HAL_I2C_Init+0x18e>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	1e58      	subs	r0, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6859      	ldr	r1, [r3, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	0099      	lsls	r1, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ffe:	3301      	adds	r3, #1
 8004000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004004:	2b00      	cmp	r3, #0
 8004006:	bf0c      	ite	eq
 8004008:	2301      	moveq	r3, #1
 800400a:	2300      	movne	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_I2C_Init+0x196>
 8004012:	2301      	movs	r3, #1
 8004014:	e022      	b.n	800405c <HAL_I2C_Init+0x1dc>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10e      	bne.n	800403c <HAL_I2C_Init+0x1bc>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1e58      	subs	r0, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6859      	ldr	r1, [r3, #4]
 8004026:	460b      	mov	r3, r1
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	440b      	add	r3, r1
 800402c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004030:	3301      	adds	r3, #1
 8004032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800403a:	e00f      	b.n	800405c <HAL_I2C_Init+0x1dc>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	1e58      	subs	r0, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	0099      	lsls	r1, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004052:	3301      	adds	r3, #1
 8004054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004058:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	6809      	ldr	r1, [r1, #0]
 8004060:	4313      	orrs	r3, r2
 8004062:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69da      	ldr	r2, [r3, #28]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800408a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6911      	ldr	r1, [r2, #16]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68d2      	ldr	r2, [r2, #12]
 8004096:	4311      	orrs	r1, r2
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	430b      	orrs	r3, r1
 800409e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695a      	ldr	r2, [r3, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	000186a0 	.word	0x000186a0
 80040f8:	001e847f 	.word	0x001e847f
 80040fc:	003d08ff 	.word	0x003d08ff
 8004100:	431bde83 	.word	0x431bde83
 8004104:	10624dd3 	.word	0x10624dd3

08004108 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	4608      	mov	r0, r1
 8004112:	4611      	mov	r1, r2
 8004114:	461a      	mov	r2, r3
 8004116:	4603      	mov	r3, r0
 8004118:	817b      	strh	r3, [r7, #10]
 800411a:	460b      	mov	r3, r1
 800411c:	813b      	strh	r3, [r7, #8]
 800411e:	4613      	mov	r3, r2
 8004120:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004122:	f7fe fc31 	bl	8002988 <HAL_GetTick>
 8004126:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b20      	cmp	r3, #32
 8004132:	f040 80d9 	bne.w	80042e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	2319      	movs	r3, #25
 800413c:	2201      	movs	r2, #1
 800413e:	496d      	ldr	r1, [pc, #436]	@ (80042f4 <HAL_I2C_Mem_Write+0x1ec>)
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 fc8b 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800414c:	2302      	movs	r3, #2
 800414e:	e0cc      	b.n	80042ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_I2C_Mem_Write+0x56>
 800415a:	2302      	movs	r3, #2
 800415c:	e0c5      	b.n	80042ea <HAL_I2C_Mem_Write+0x1e2>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b01      	cmp	r3, #1
 8004172:	d007      	beq.n	8004184 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004192:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2221      	movs	r2, #33	@ 0x21
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2240      	movs	r2, #64	@ 0x40
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a3a      	ldr	r2, [r7, #32]
 80041ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4a4d      	ldr	r2, [pc, #308]	@ (80042f8 <HAL_I2C_Mem_Write+0x1f0>)
 80041c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041c6:	88f8      	ldrh	r0, [r7, #6]
 80041c8:	893a      	ldrh	r2, [r7, #8]
 80041ca:	8979      	ldrh	r1, [r7, #10]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	4603      	mov	r3, r0
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 fac2 	bl	8004760 <I2C_RequestMemoryWrite>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d052      	beq.n	8004288 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e081      	b.n	80042ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fd50 	bl	8004c90 <I2C_WaitOnTXEFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00d      	beq.n	8004212 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d107      	bne.n	800420e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800420c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e06b      	b.n	80042ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004216:	781a      	ldrb	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b04      	cmp	r3, #4
 800424e:	d11b      	bne.n	8004288 <HAL_I2C_Mem_Write+0x180>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004254:	2b00      	cmp	r3, #0
 8004256:	d017      	beq.n	8004288 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	781a      	ldrb	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1aa      	bne.n	80041e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fd43 	bl	8004d20 <I2C_WaitOnBTFFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d107      	bne.n	80042b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e016      	b.n	80042ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	e000      	b.n	80042ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80042e8:	2302      	movs	r3, #2
  }
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	00100002 	.word	0x00100002
 80042f8:	ffff0000 	.word	0xffff0000

080042fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08c      	sub	sp, #48	@ 0x30
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	4608      	mov	r0, r1
 8004306:	4611      	mov	r1, r2
 8004308:	461a      	mov	r2, r3
 800430a:	4603      	mov	r3, r0
 800430c:	817b      	strh	r3, [r7, #10]
 800430e:	460b      	mov	r3, r1
 8004310:	813b      	strh	r3, [r7, #8]
 8004312:	4613      	mov	r3, r2
 8004314:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004316:	f7fe fb37 	bl	8002988 <HAL_GetTick>
 800431a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b20      	cmp	r3, #32
 8004326:	f040 8214 	bne.w	8004752 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	2319      	movs	r3, #25
 8004330:	2201      	movs	r2, #1
 8004332:	497b      	ldr	r1, [pc, #492]	@ (8004520 <HAL_I2C_Mem_Read+0x224>)
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fb91 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004340:	2302      	movs	r3, #2
 8004342:	e207      	b.n	8004754 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_I2C_Mem_Read+0x56>
 800434e:	2302      	movs	r3, #2
 8004350:	e200      	b.n	8004754 <HAL_I2C_Mem_Read+0x458>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b01      	cmp	r3, #1
 8004366:	d007      	beq.n	8004378 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004386:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2222      	movs	r2, #34	@ 0x22
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2240      	movs	r2, #64	@ 0x40
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80043a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004524 <HAL_I2C_Mem_Read+0x228>)
 80043b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043ba:	88f8      	ldrh	r0, [r7, #6]
 80043bc:	893a      	ldrh	r2, [r7, #8]
 80043be:	8979      	ldrh	r1, [r7, #10]
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	9301      	str	r3, [sp, #4]
 80043c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	4603      	mov	r3, r0
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fa5e 	bl	800488c <I2C_RequestMemoryRead>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e1bc      	b.n	8004754 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d113      	bne.n	800440a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e2:	2300      	movs	r3, #0
 80043e4:	623b      	str	r3, [r7, #32]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	623b      	str	r3, [r7, #32]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	623b      	str	r3, [r7, #32]
 80043f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	e190      	b.n	800472c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800440e:	2b01      	cmp	r3, #1
 8004410:	d11b      	bne.n	800444a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004420:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	e170      	b.n	800472c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800444e:	2b02      	cmp	r3, #2
 8004450:	d11b      	bne.n	800448a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004460:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004470:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	e150      	b.n	800472c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044a0:	e144      	b.n	800472c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	f200 80f1 	bhi.w	800468e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d123      	bne.n	80044fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 fc79 	bl	8004db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d001      	beq.n	80044c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e145      	b.n	8004754 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691a      	ldr	r2, [r3, #16]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044fa:	e117      	b.n	800472c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004500:	2b02      	cmp	r3, #2
 8004502:	d14e      	bne.n	80045a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450a:	2200      	movs	r2, #0
 800450c:	4906      	ldr	r1, [pc, #24]	@ (8004528 <HAL_I2C_Mem_Read+0x22c>)
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 faa4 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d008      	beq.n	800452c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e11a      	b.n	8004754 <HAL_I2C_Mem_Read+0x458>
 800451e:	bf00      	nop
 8004520:	00100002 	.word	0x00100002
 8004524:	ffff0000 	.word	0xffff0000
 8004528:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800453a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045a0:	e0c4      	b.n	800472c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a8:	2200      	movs	r2, #0
 80045aa:	496c      	ldr	r1, [pc, #432]	@ (800475c <HAL_I2C_Mem_Read+0x460>)
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fa55 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0cb      	b.n	8004754 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691a      	ldr	r2, [r3, #16]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004604:	2200      	movs	r2, #0
 8004606:	4955      	ldr	r1, [pc, #340]	@ (800475c <HAL_I2C_Mem_Read+0x460>)
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 fa27 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e09d      	b.n	8004754 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004626:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800468c:	e04e      	b.n	800472c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800468e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004690:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fb8c 	bl	8004db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e058      	b.n	8004754 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d124      	bne.n	800472c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d107      	bne.n	80046fa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046f8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004730:	2b00      	cmp	r3, #0
 8004732:	f47f aeb6 	bne.w	80044a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	e000      	b.n	8004754 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004752:	2302      	movs	r3, #2
  }
}
 8004754:	4618      	mov	r0, r3
 8004756:	3728      	adds	r7, #40	@ 0x28
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	00010004 	.word	0x00010004

08004760 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af02      	add	r7, sp, #8
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	4608      	mov	r0, r1
 800476a:	4611      	mov	r1, r2
 800476c:	461a      	mov	r2, r3
 800476e:	4603      	mov	r3, r0
 8004770:	817b      	strh	r3, [r7, #10]
 8004772:	460b      	mov	r3, r1
 8004774:	813b      	strh	r3, [r7, #8]
 8004776:	4613      	mov	r3, r2
 8004778:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004788:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	2200      	movs	r2, #0
 8004792:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f960 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00d      	beq.n	80047be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047b0:	d103      	bne.n	80047ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e05f      	b.n	800487e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047be:	897b      	ldrh	r3, [r7, #10]
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	6a3a      	ldr	r2, [r7, #32]
 80047d2:	492d      	ldr	r1, [pc, #180]	@ (8004888 <I2C_RequestMemoryWrite+0x128>)
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f9bb 	bl	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e04c      	b.n	800487e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	617b      	str	r3, [r7, #20]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fc:	6a39      	ldr	r1, [r7, #32]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fa46 	bl	8004c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00d      	beq.n	8004826 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480e:	2b04      	cmp	r3, #4
 8004810:	d107      	bne.n	8004822 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004820:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e02b      	b.n	800487e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d105      	bne.n	8004838 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800482c:	893b      	ldrh	r3, [r7, #8]
 800482e:	b2da      	uxtb	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	611a      	str	r2, [r3, #16]
 8004836:	e021      	b.n	800487c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004838:	893b      	ldrh	r3, [r7, #8]
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	b29b      	uxth	r3, r3
 800483e:	b2da      	uxtb	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004848:	6a39      	ldr	r1, [r7, #32]
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 fa20 	bl	8004c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00d      	beq.n	8004872 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485a:	2b04      	cmp	r3, #4
 800485c:	d107      	bne.n	800486e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800486c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e005      	b.n	800487e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004872:	893b      	ldrh	r3, [r7, #8]
 8004874:	b2da      	uxtb	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	00010002 	.word	0x00010002

0800488c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af02      	add	r7, sp, #8
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	4608      	mov	r0, r1
 8004896:	4611      	mov	r1, r2
 8004898:	461a      	mov	r2, r3
 800489a:	4603      	mov	r3, r0
 800489c:	817b      	strh	r3, [r7, #10]
 800489e:	460b      	mov	r3, r1
 80048a0:	813b      	strh	r3, [r7, #8]
 80048a2:	4613      	mov	r3, r2
 80048a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 f8c2 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00d      	beq.n	80048fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ec:	d103      	bne.n	80048f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e0aa      	b.n	8004a50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048fa:	897b      	ldrh	r3, [r7, #10]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	461a      	mov	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004908:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	6a3a      	ldr	r2, [r7, #32]
 800490e:	4952      	ldr	r1, [pc, #328]	@ (8004a58 <I2C_RequestMemoryRead+0x1cc>)
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f91d 	bl	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e097      	b.n	8004a50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004938:	6a39      	ldr	r1, [r7, #32]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 f9a8 	bl	8004c90 <I2C_WaitOnTXEFlagUntilTimeout>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00d      	beq.n	8004962 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	2b04      	cmp	r3, #4
 800494c:	d107      	bne.n	800495e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800495c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e076      	b.n	8004a50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d105      	bne.n	8004974 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004968:	893b      	ldrh	r3, [r7, #8]
 800496a:	b2da      	uxtb	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	611a      	str	r2, [r3, #16]
 8004972:	e021      	b.n	80049b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004974:	893b      	ldrh	r3, [r7, #8]
 8004976:	0a1b      	lsrs	r3, r3, #8
 8004978:	b29b      	uxth	r3, r3
 800497a:	b2da      	uxtb	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004984:	6a39      	ldr	r1, [r7, #32]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f982 	bl	8004c90 <I2C_WaitOnTXEFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00d      	beq.n	80049ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	2b04      	cmp	r3, #4
 8004998:	d107      	bne.n	80049aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e050      	b.n	8004a50 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049ae:	893b      	ldrh	r3, [r7, #8]
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ba:	6a39      	ldr	r1, [r7, #32]
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f967 	bl	8004c90 <I2C_WaitOnTXEFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00d      	beq.n	80049e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d107      	bne.n	80049e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e035      	b.n	8004a50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f82b 	bl	8004a5c <I2C_WaitOnFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00d      	beq.n	8004a28 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a1a:	d103      	bne.n	8004a24 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e013      	b.n	8004a50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a28:	897b      	ldrh	r3, [r7, #10]
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	f043 0301 	orr.w	r3, r3, #1
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	6a3a      	ldr	r2, [r7, #32]
 8004a3c:	4906      	ldr	r1, [pc, #24]	@ (8004a58 <I2C_RequestMemoryRead+0x1cc>)
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 f886 	bl	8004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e000      	b.n	8004a50 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	00010002 	.word	0x00010002

08004a5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a6c:	e048      	b.n	8004b00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d044      	beq.n	8004b00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a76:	f7fd ff87 	bl	8002988 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d302      	bcc.n	8004a8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d139      	bne.n	8004b00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	0c1b      	lsrs	r3, r3, #16
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d10d      	bne.n	8004ab2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	43da      	mvns	r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	e00c      	b.n	8004acc <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	43da      	mvns	r2, r3
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4013      	ands	r3, r2
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bf0c      	ite	eq
 8004ac4:	2301      	moveq	r3, #1
 8004ac6:	2300      	movne	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	79fb      	ldrb	r3, [r7, #7]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d116      	bne.n	8004b00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	f043 0220 	orr.w	r2, r3, #32
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e023      	b.n	8004b48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	0c1b      	lsrs	r3, r3, #16
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d10d      	bne.n	8004b26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	43da      	mvns	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4013      	ands	r3, r2
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bf0c      	ite	eq
 8004b1c:	2301      	moveq	r3, #1
 8004b1e:	2300      	movne	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	e00c      	b.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	43da      	mvns	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	4013      	ands	r3, r2
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bf0c      	ite	eq
 8004b38:	2301      	moveq	r3, #1
 8004b3a:	2300      	movne	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d093      	beq.n	8004a6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b5e:	e071      	b.n	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b6e:	d123      	bne.n	8004bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba4:	f043 0204 	orr.w	r2, r3, #4
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e067      	b.n	8004c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbe:	d041      	beq.n	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc0:	f7fd fee2 	bl	8002988 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d302      	bcc.n	8004bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d136      	bne.n	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	0c1b      	lsrs	r3, r3, #16
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d10c      	bne.n	8004bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	43da      	mvns	r2, r3
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4013      	ands	r3, r2
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	bf14      	ite	ne
 8004bf2:	2301      	movne	r3, #1
 8004bf4:	2300      	moveq	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	e00b      	b.n	8004c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	43da      	mvns	r2, r3
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4013      	ands	r3, r2
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bf14      	ite	ne
 8004c0c:	2301      	movne	r3, #1
 8004c0e:	2300      	moveq	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d016      	beq.n	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c30:	f043 0220 	orr.w	r2, r3, #32
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e021      	b.n	8004c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	0c1b      	lsrs	r3, r3, #16
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d10c      	bne.n	8004c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	43da      	mvns	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e00b      	b.n	8004c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	4013      	ands	r3, r2
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bf14      	ite	ne
 8004c7a:	2301      	movne	r3, #1
 8004c7c:	2300      	moveq	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f47f af6d 	bne.w	8004b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c9c:	e034      	b.n	8004d08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f8e3 	bl	8004e6a <I2C_IsAcknowledgeFailed>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e034      	b.n	8004d18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d028      	beq.n	8004d08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb6:	f7fd fe67 	bl	8002988 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d302      	bcc.n	8004ccc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d11d      	bne.n	8004d08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd6:	2b80      	cmp	r3, #128	@ 0x80
 8004cd8:	d016      	beq.n	8004d08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf4:	f043 0220 	orr.w	r2, r3, #32
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e007      	b.n	8004d18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d12:	2b80      	cmp	r3, #128	@ 0x80
 8004d14:	d1c3      	bne.n	8004c9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d2c:	e034      	b.n	8004d98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f89b 	bl	8004e6a <I2C_IsAcknowledgeFailed>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e034      	b.n	8004da8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d028      	beq.n	8004d98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d46:	f7fd fe1f 	bl	8002988 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d302      	bcc.n	8004d5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d11d      	bne.n	8004d98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	d016      	beq.n	8004d98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d84:	f043 0220 	orr.w	r2, r3, #32
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e007      	b.n	8004da8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d1c3      	bne.n	8004d2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dbc:	e049      	b.n	8004e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d119      	bne.n	8004e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f06f 0210 	mvn.w	r2, #16
 8004dd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e030      	b.n	8004e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e00:	f7fd fdc2 	bl	8002988 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d302      	bcc.n	8004e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d11d      	bne.n	8004e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e20:	2b40      	cmp	r3, #64	@ 0x40
 8004e22:	d016      	beq.n	8004e52 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	f043 0220 	orr.w	r2, r3, #32
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e007      	b.n	8004e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e5c:	2b40      	cmp	r3, #64	@ 0x40
 8004e5e:	d1ae      	bne.n	8004dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e80:	d11b      	bne.n	8004eba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e8a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea6:	f043 0204 	orr.w	r2, r3, #4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	4b20      	ldr	r3, [pc, #128]	@ (8004f58 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	4a1f      	ldr	r2, [pc, #124]	@ (8004f58 <HAL_PWREx_EnableOverDrive+0x90>)
 8004edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f58 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004eee:	4b1b      	ldr	r3, [pc, #108]	@ (8004f5c <HAL_PWREx_EnableOverDrive+0x94>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ef4:	f7fd fd48 	bl	8002988 <HAL_GetTick>
 8004ef8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004efa:	e009      	b.n	8004f10 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004efc:	f7fd fd44 	bl	8002988 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f0a:	d901      	bls.n	8004f10 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e01f      	b.n	8004f50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f10:	4b13      	ldr	r3, [pc, #76]	@ (8004f60 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f1c:	d1ee      	bne.n	8004efc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f1e:	4b11      	ldr	r3, [pc, #68]	@ (8004f64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f20:	2201      	movs	r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f24:	f7fd fd30 	bl	8002988 <HAL_GetTick>
 8004f28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f2a:	e009      	b.n	8004f40 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f2c:	f7fd fd2c 	bl	8002988 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f3a:	d901      	bls.n	8004f40 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e007      	b.n	8004f50 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f40:	4b07      	ldr	r3, [pc, #28]	@ (8004f60 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f4c:	d1ee      	bne.n	8004f2c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	420e0040 	.word	0x420e0040
 8004f60:	40007000 	.word	0x40007000
 8004f64:	420e0044 	.word	0x420e0044

08004f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0cc      	b.n	8005116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f7c:	4b68      	ldr	r3, [pc, #416]	@ (8005120 <HAL_RCC_ClockConfig+0x1b8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d90c      	bls.n	8004fa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8a:	4b65      	ldr	r3, [pc, #404]	@ (8005120 <HAL_RCC_ClockConfig+0x1b8>)
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f92:	4b63      	ldr	r3, [pc, #396]	@ (8005120 <HAL_RCC_ClockConfig+0x1b8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e0b8      	b.n	8005116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d020      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fbc:	4b59      	ldr	r3, [pc, #356]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	4a58      	ldr	r2, [pc, #352]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004fc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fd4:	4b53      	ldr	r3, [pc, #332]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	4a52      	ldr	r2, [pc, #328]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8004fda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004fde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe0:	4b50      	ldr	r3, [pc, #320]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	494d      	ldr	r1, [pc, #308]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d044      	beq.n	8005088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d107      	bne.n	8005016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005006:	4b47      	ldr	r3, [pc, #284]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d119      	bne.n	8005046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e07f      	b.n	8005116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d003      	beq.n	8005026 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005022:	2b03      	cmp	r3, #3
 8005024:	d107      	bne.n	8005036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005026:	4b3f      	ldr	r3, [pc, #252]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d109      	bne.n	8005046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e06f      	b.n	8005116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005036:	4b3b      	ldr	r3, [pc, #236]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e067      	b.n	8005116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005046:	4b37      	ldr	r3, [pc, #220]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f023 0203 	bic.w	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	4934      	ldr	r1, [pc, #208]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8005054:	4313      	orrs	r3, r2
 8005056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005058:	f7fd fc96 	bl	8002988 <HAL_GetTick>
 800505c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505e:	e00a      	b.n	8005076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005060:	f7fd fc92 	bl	8002988 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506e:	4293      	cmp	r3, r2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e04f      	b.n	8005116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005076:	4b2b      	ldr	r3, [pc, #172]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 020c 	and.w	r2, r3, #12
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	429a      	cmp	r2, r3
 8005086:	d1eb      	bne.n	8005060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005088:	4b25      	ldr	r3, [pc, #148]	@ (8005120 <HAL_RCC_ClockConfig+0x1b8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 030f 	and.w	r3, r3, #15
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d20c      	bcs.n	80050b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005096:	4b22      	ldr	r3, [pc, #136]	@ (8005120 <HAL_RCC_ClockConfig+0x1b8>)
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800509e:	4b20      	ldr	r3, [pc, #128]	@ (8005120 <HAL_RCC_ClockConfig+0x1b8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d001      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e032      	b.n	8005116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d008      	beq.n	80050ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050bc:	4b19      	ldr	r3, [pc, #100]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4916      	ldr	r1, [pc, #88]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050da:	4b12      	ldr	r3, [pc, #72]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	490e      	ldr	r1, [pc, #56]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ee:	f000 f855 	bl	800519c <HAL_RCC_GetSysClockFreq>
 80050f2:	4602      	mov	r2, r0
 80050f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	091b      	lsrs	r3, r3, #4
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	490a      	ldr	r1, [pc, #40]	@ (8005128 <HAL_RCC_ClockConfig+0x1c0>)
 8005100:	5ccb      	ldrb	r3, [r1, r3]
 8005102:	fa22 f303 	lsr.w	r3, r2, r3
 8005106:	4a09      	ldr	r2, [pc, #36]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8005108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800510a:	4b09      	ldr	r3, [pc, #36]	@ (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f7fd fbf6 	bl	8002900 <HAL_InitTick>

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40023c00 	.word	0x40023c00
 8005124:	40023800 	.word	0x40023800
 8005128:	08007ff4 	.word	0x08007ff4
 800512c:	20000000 	.word	0x20000000
 8005130:	20000004 	.word	0x20000004

08005134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005138:	4b03      	ldr	r3, [pc, #12]	@ (8005148 <HAL_RCC_GetHCLKFreq+0x14>)
 800513a:	681b      	ldr	r3, [r3, #0]
}
 800513c:	4618      	mov	r0, r3
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	20000000 	.word	0x20000000

0800514c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005150:	f7ff fff0 	bl	8005134 <HAL_RCC_GetHCLKFreq>
 8005154:	4602      	mov	r2, r0
 8005156:	4b05      	ldr	r3, [pc, #20]	@ (800516c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	0a9b      	lsrs	r3, r3, #10
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	4903      	ldr	r1, [pc, #12]	@ (8005170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005162:	5ccb      	ldrb	r3, [r1, r3]
 8005164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005168:	4618      	mov	r0, r3
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40023800 	.word	0x40023800
 8005170:	08008004 	.word	0x08008004

08005174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005178:	f7ff ffdc 	bl	8005134 <HAL_RCC_GetHCLKFreq>
 800517c:	4602      	mov	r2, r0
 800517e:	4b05      	ldr	r3, [pc, #20]	@ (8005194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	0b5b      	lsrs	r3, r3, #13
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	4903      	ldr	r1, [pc, #12]	@ (8005198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800518a:	5ccb      	ldrb	r3, [r1, r3]
 800518c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005190:	4618      	mov	r0, r3
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40023800 	.word	0x40023800
 8005198:	08008004 	.word	0x08008004

0800519c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800519c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a0:	b0ae      	sub	sp, #184	@ 0xb8
 80051a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051c2:	4bcb      	ldr	r3, [pc, #812]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 030c 	and.w	r3, r3, #12
 80051ca:	2b0c      	cmp	r3, #12
 80051cc:	f200 8206 	bhi.w	80055dc <HAL_RCC_GetSysClockFreq+0x440>
 80051d0:	a201      	add	r2, pc, #4	@ (adr r2, 80051d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	0800520d 	.word	0x0800520d
 80051dc:	080055dd 	.word	0x080055dd
 80051e0:	080055dd 	.word	0x080055dd
 80051e4:	080055dd 	.word	0x080055dd
 80051e8:	08005215 	.word	0x08005215
 80051ec:	080055dd 	.word	0x080055dd
 80051f0:	080055dd 	.word	0x080055dd
 80051f4:	080055dd 	.word	0x080055dd
 80051f8:	0800521d 	.word	0x0800521d
 80051fc:	080055dd 	.word	0x080055dd
 8005200:	080055dd 	.word	0x080055dd
 8005204:	080055dd 	.word	0x080055dd
 8005208:	0800540d 	.word	0x0800540d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800520c:	4bb9      	ldr	r3, [pc, #740]	@ (80054f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800520e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005212:	e1e7      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005214:	4bb8      	ldr	r3, [pc, #736]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005216:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800521a:	e1e3      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800521c:	4bb4      	ldr	r3, [pc, #720]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005224:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005228:	4bb1      	ldr	r3, [pc, #708]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d071      	beq.n	8005318 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005234:	4bae      	ldr	r3, [pc, #696]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	099b      	lsrs	r3, r3, #6
 800523a:	2200      	movs	r2, #0
 800523c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005240:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005244:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005250:	2300      	movs	r3, #0
 8005252:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005256:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800525a:	4622      	mov	r2, r4
 800525c:	462b      	mov	r3, r5
 800525e:	f04f 0000 	mov.w	r0, #0
 8005262:	f04f 0100 	mov.w	r1, #0
 8005266:	0159      	lsls	r1, r3, #5
 8005268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800526c:	0150      	lsls	r0, r2, #5
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4621      	mov	r1, r4
 8005274:	1a51      	subs	r1, r2, r1
 8005276:	6439      	str	r1, [r7, #64]	@ 0x40
 8005278:	4629      	mov	r1, r5
 800527a:	eb63 0301 	sbc.w	r3, r3, r1
 800527e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800528c:	4649      	mov	r1, r9
 800528e:	018b      	lsls	r3, r1, #6
 8005290:	4641      	mov	r1, r8
 8005292:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005296:	4641      	mov	r1, r8
 8005298:	018a      	lsls	r2, r1, #6
 800529a:	4641      	mov	r1, r8
 800529c:	1a51      	subs	r1, r2, r1
 800529e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80052a0:	4649      	mov	r1, r9
 80052a2:	eb63 0301 	sbc.w	r3, r3, r1
 80052a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80052b4:	4649      	mov	r1, r9
 80052b6:	00cb      	lsls	r3, r1, #3
 80052b8:	4641      	mov	r1, r8
 80052ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052be:	4641      	mov	r1, r8
 80052c0:	00ca      	lsls	r2, r1, #3
 80052c2:	4610      	mov	r0, r2
 80052c4:	4619      	mov	r1, r3
 80052c6:	4603      	mov	r3, r0
 80052c8:	4622      	mov	r2, r4
 80052ca:	189b      	adds	r3, r3, r2
 80052cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80052ce:	462b      	mov	r3, r5
 80052d0:	460a      	mov	r2, r1
 80052d2:	eb42 0303 	adc.w	r3, r2, r3
 80052d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	f04f 0300 	mov.w	r3, #0
 80052e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052e4:	4629      	mov	r1, r5
 80052e6:	024b      	lsls	r3, r1, #9
 80052e8:	4621      	mov	r1, r4
 80052ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052ee:	4621      	mov	r1, r4
 80052f0:	024a      	lsls	r2, r1, #9
 80052f2:	4610      	mov	r0, r2
 80052f4:	4619      	mov	r1, r3
 80052f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052fa:	2200      	movs	r2, #0
 80052fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005300:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005304:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005308:	f7fb fbf0 	bl	8000aec <__aeabi_uldivmod>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4613      	mov	r3, r2
 8005312:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005316:	e067      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005318:	4b75      	ldr	r3, [pc, #468]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	099b      	lsrs	r3, r3, #6
 800531e:	2200      	movs	r2, #0
 8005320:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005324:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005328:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800532c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005330:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005332:	2300      	movs	r3, #0
 8005334:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005336:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800533a:	4622      	mov	r2, r4
 800533c:	462b      	mov	r3, r5
 800533e:	f04f 0000 	mov.w	r0, #0
 8005342:	f04f 0100 	mov.w	r1, #0
 8005346:	0159      	lsls	r1, r3, #5
 8005348:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800534c:	0150      	lsls	r0, r2, #5
 800534e:	4602      	mov	r2, r0
 8005350:	460b      	mov	r3, r1
 8005352:	4621      	mov	r1, r4
 8005354:	1a51      	subs	r1, r2, r1
 8005356:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005358:	4629      	mov	r1, r5
 800535a:	eb63 0301 	sbc.w	r3, r3, r1
 800535e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800536c:	4649      	mov	r1, r9
 800536e:	018b      	lsls	r3, r1, #6
 8005370:	4641      	mov	r1, r8
 8005372:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005376:	4641      	mov	r1, r8
 8005378:	018a      	lsls	r2, r1, #6
 800537a:	4641      	mov	r1, r8
 800537c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005380:	4649      	mov	r1, r9
 8005382:	eb63 0b01 	sbc.w	fp, r3, r1
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005392:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005396:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800539a:	4692      	mov	sl, r2
 800539c:	469b      	mov	fp, r3
 800539e:	4623      	mov	r3, r4
 80053a0:	eb1a 0303 	adds.w	r3, sl, r3
 80053a4:	623b      	str	r3, [r7, #32]
 80053a6:	462b      	mov	r3, r5
 80053a8:	eb4b 0303 	adc.w	r3, fp, r3
 80053ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80053ba:	4629      	mov	r1, r5
 80053bc:	028b      	lsls	r3, r1, #10
 80053be:	4621      	mov	r1, r4
 80053c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053c4:	4621      	mov	r1, r4
 80053c6:	028a      	lsls	r2, r1, #10
 80053c8:	4610      	mov	r0, r2
 80053ca:	4619      	mov	r1, r3
 80053cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053d0:	2200      	movs	r2, #0
 80053d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80053d4:	677a      	str	r2, [r7, #116]	@ 0x74
 80053d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80053da:	f7fb fb87 	bl	8000aec <__aeabi_uldivmod>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4613      	mov	r3, r2
 80053e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053e8:	4b41      	ldr	r3, [pc, #260]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	0c1b      	lsrs	r3, r3, #16
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	3301      	adds	r3, #1
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80053fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005402:	fbb2 f3f3 	udiv	r3, r2, r3
 8005406:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800540a:	e0eb      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800540c:	4b38      	ldr	r3, [pc, #224]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005414:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005418:	4b35      	ldr	r3, [pc, #212]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d06b      	beq.n	80054fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005424:	4b32      	ldr	r3, [pc, #200]	@ (80054f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	099b      	lsrs	r3, r3, #6
 800542a:	2200      	movs	r2, #0
 800542c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800542e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005430:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005436:	663b      	str	r3, [r7, #96]	@ 0x60
 8005438:	2300      	movs	r3, #0
 800543a:	667b      	str	r3, [r7, #100]	@ 0x64
 800543c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005440:	4622      	mov	r2, r4
 8005442:	462b      	mov	r3, r5
 8005444:	f04f 0000 	mov.w	r0, #0
 8005448:	f04f 0100 	mov.w	r1, #0
 800544c:	0159      	lsls	r1, r3, #5
 800544e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005452:	0150      	lsls	r0, r2, #5
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	4621      	mov	r1, r4
 800545a:	1a51      	subs	r1, r2, r1
 800545c:	61b9      	str	r1, [r7, #24]
 800545e:	4629      	mov	r1, r5
 8005460:	eb63 0301 	sbc.w	r3, r3, r1
 8005464:	61fb      	str	r3, [r7, #28]
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	f04f 0300 	mov.w	r3, #0
 800546e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005472:	4659      	mov	r1, fp
 8005474:	018b      	lsls	r3, r1, #6
 8005476:	4651      	mov	r1, sl
 8005478:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800547c:	4651      	mov	r1, sl
 800547e:	018a      	lsls	r2, r1, #6
 8005480:	4651      	mov	r1, sl
 8005482:	ebb2 0801 	subs.w	r8, r2, r1
 8005486:	4659      	mov	r1, fp
 8005488:	eb63 0901 	sbc.w	r9, r3, r1
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005498:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800549c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054a0:	4690      	mov	r8, r2
 80054a2:	4699      	mov	r9, r3
 80054a4:	4623      	mov	r3, r4
 80054a6:	eb18 0303 	adds.w	r3, r8, r3
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	462b      	mov	r3, r5
 80054ae:	eb49 0303 	adc.w	r3, r9, r3
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80054c0:	4629      	mov	r1, r5
 80054c2:	024b      	lsls	r3, r1, #9
 80054c4:	4621      	mov	r1, r4
 80054c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054ca:	4621      	mov	r1, r4
 80054cc:	024a      	lsls	r2, r1, #9
 80054ce:	4610      	mov	r0, r2
 80054d0:	4619      	mov	r1, r3
 80054d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054d6:	2200      	movs	r2, #0
 80054d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80054dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80054e0:	f7fb fb04 	bl	8000aec <__aeabi_uldivmod>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4613      	mov	r3, r2
 80054ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054ee:	e065      	b.n	80055bc <HAL_RCC_GetSysClockFreq+0x420>
 80054f0:	40023800 	.word	0x40023800
 80054f4:	00f42400 	.word	0x00f42400
 80054f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054fc:	4b3d      	ldr	r3, [pc, #244]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	099b      	lsrs	r3, r3, #6
 8005502:	2200      	movs	r2, #0
 8005504:	4618      	mov	r0, r3
 8005506:	4611      	mov	r1, r2
 8005508:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800550c:	653b      	str	r3, [r7, #80]	@ 0x50
 800550e:	2300      	movs	r3, #0
 8005510:	657b      	str	r3, [r7, #84]	@ 0x54
 8005512:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8005516:	4642      	mov	r2, r8
 8005518:	464b      	mov	r3, r9
 800551a:	f04f 0000 	mov.w	r0, #0
 800551e:	f04f 0100 	mov.w	r1, #0
 8005522:	0159      	lsls	r1, r3, #5
 8005524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005528:	0150      	lsls	r0, r2, #5
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	4641      	mov	r1, r8
 8005530:	1a51      	subs	r1, r2, r1
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	4649      	mov	r1, r9
 8005536:	eb63 0301 	sbc.w	r3, r3, r1
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	f04f 0200 	mov.w	r2, #0
 8005540:	f04f 0300 	mov.w	r3, #0
 8005544:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005548:	4659      	mov	r1, fp
 800554a:	018b      	lsls	r3, r1, #6
 800554c:	4651      	mov	r1, sl
 800554e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005552:	4651      	mov	r1, sl
 8005554:	018a      	lsls	r2, r1, #6
 8005556:	4651      	mov	r1, sl
 8005558:	1a54      	subs	r4, r2, r1
 800555a:	4659      	mov	r1, fp
 800555c:	eb63 0501 	sbc.w	r5, r3, r1
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	00eb      	lsls	r3, r5, #3
 800556a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800556e:	00e2      	lsls	r2, r4, #3
 8005570:	4614      	mov	r4, r2
 8005572:	461d      	mov	r5, r3
 8005574:	4643      	mov	r3, r8
 8005576:	18e3      	adds	r3, r4, r3
 8005578:	603b      	str	r3, [r7, #0]
 800557a:	464b      	mov	r3, r9
 800557c:	eb45 0303 	adc.w	r3, r5, r3
 8005580:	607b      	str	r3, [r7, #4]
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	f04f 0300 	mov.w	r3, #0
 800558a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800558e:	4629      	mov	r1, r5
 8005590:	028b      	lsls	r3, r1, #10
 8005592:	4621      	mov	r1, r4
 8005594:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005598:	4621      	mov	r1, r4
 800559a:	028a      	lsls	r2, r1, #10
 800559c:	4610      	mov	r0, r2
 800559e:	4619      	mov	r1, r3
 80055a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80055a4:	2200      	movs	r2, #0
 80055a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055a8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80055aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055ae:	f7fb fa9d 	bl	8000aec <__aeabi_uldivmod>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4613      	mov	r3, r2
 80055b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80055bc:	4b0d      	ldr	r3, [pc, #52]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	0f1b      	lsrs	r3, r3, #28
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80055ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80055d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80055da:	e003      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055dc:	4b06      	ldr	r3, [pc, #24]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80055de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80055e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	37b8      	adds	r7, #184	@ 0xb8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055f2:	bf00      	nop
 80055f4:	40023800 	.word	0x40023800
 80055f8:	00f42400 	.word	0x00f42400

080055fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e28d      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 8083 	beq.w	8005722 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800561c:	4b94      	ldr	r3, [pc, #592]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f003 030c 	and.w	r3, r3, #12
 8005624:	2b04      	cmp	r3, #4
 8005626:	d019      	beq.n	800565c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005628:	4b91      	ldr	r3, [pc, #580]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f003 030c 	and.w	r3, r3, #12
        || \
 8005630:	2b08      	cmp	r3, #8
 8005632:	d106      	bne.n	8005642 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005634:	4b8e      	ldr	r3, [pc, #568]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800563c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005640:	d00c      	beq.n	800565c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005642:	4b8b      	ldr	r3, [pc, #556]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800564a:	2b0c      	cmp	r3, #12
 800564c:	d112      	bne.n	8005674 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800564e:	4b88      	ldr	r3, [pc, #544]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005656:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800565a:	d10b      	bne.n	8005674 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800565c:	4b84      	ldr	r3, [pc, #528]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d05b      	beq.n	8005720 <HAL_RCC_OscConfig+0x124>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d157      	bne.n	8005720 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e25a      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800567c:	d106      	bne.n	800568c <HAL_RCC_OscConfig+0x90>
 800567e:	4b7c      	ldr	r3, [pc, #496]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a7b      	ldr	r2, [pc, #492]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 8005684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	e01d      	b.n	80056c8 <HAL_RCC_OscConfig+0xcc>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005694:	d10c      	bne.n	80056b0 <HAL_RCC_OscConfig+0xb4>
 8005696:	4b76      	ldr	r3, [pc, #472]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a75      	ldr	r2, [pc, #468]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 800569c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	4b73      	ldr	r3, [pc, #460]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a72      	ldr	r2, [pc, #456]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 80056a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	e00b      	b.n	80056c8 <HAL_RCC_OscConfig+0xcc>
 80056b0:	4b6f      	ldr	r3, [pc, #444]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a6e      	ldr	r2, [pc, #440]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 80056b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	4b6c      	ldr	r3, [pc, #432]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a6b      	ldr	r2, [pc, #428]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 80056c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d013      	beq.n	80056f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d0:	f7fd f95a 	bl	8002988 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d8:	f7fd f956 	bl	8002988 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b64      	cmp	r3, #100	@ 0x64
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e21f      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ea:	4b61      	ldr	r3, [pc, #388]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f0      	beq.n	80056d8 <HAL_RCC_OscConfig+0xdc>
 80056f6:	e014      	b.n	8005722 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f8:	f7fd f946 	bl	8002988 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005700:	f7fd f942 	bl	8002988 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b64      	cmp	r3, #100	@ 0x64
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e20b      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005712:	4b57      	ldr	r3, [pc, #348]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f0      	bne.n	8005700 <HAL_RCC_OscConfig+0x104>
 800571e:	e000      	b.n	8005722 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d06f      	beq.n	800580e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800572e:	4b50      	ldr	r3, [pc, #320]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 030c 	and.w	r3, r3, #12
 8005736:	2b00      	cmp	r3, #0
 8005738:	d017      	beq.n	800576a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800573a:	4b4d      	ldr	r3, [pc, #308]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005742:	2b08      	cmp	r3, #8
 8005744:	d105      	bne.n	8005752 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005746:	4b4a      	ldr	r3, [pc, #296]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00b      	beq.n	800576a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005752:	4b47      	ldr	r3, [pc, #284]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800575a:	2b0c      	cmp	r3, #12
 800575c:	d11c      	bne.n	8005798 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800575e:	4b44      	ldr	r3, [pc, #272]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d116      	bne.n	8005798 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800576a:	4b41      	ldr	r3, [pc, #260]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <HAL_RCC_OscConfig+0x186>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d001      	beq.n	8005782 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e1d3      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005782:	4b3b      	ldr	r3, [pc, #236]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	4937      	ldr	r1, [pc, #220]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 8005792:	4313      	orrs	r3, r2
 8005794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005796:	e03a      	b.n	800580e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d020      	beq.n	80057e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057a0:	4b34      	ldr	r3, [pc, #208]	@ (8005874 <HAL_RCC_OscConfig+0x278>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a6:	f7fd f8ef 	bl	8002988 <HAL_GetTick>
 80057aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057ae:	f7fd f8eb 	bl	8002988 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e1b4      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0f0      	beq.n	80057ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057cc:	4b28      	ldr	r3, [pc, #160]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	4925      	ldr	r1, [pc, #148]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	600b      	str	r3, [r1, #0]
 80057e0:	e015      	b.n	800580e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057e2:	4b24      	ldr	r3, [pc, #144]	@ (8005874 <HAL_RCC_OscConfig+0x278>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fd f8ce 	bl	8002988 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057f0:	f7fd f8ca 	bl	8002988 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e193      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005802:	4b1b      	ldr	r3, [pc, #108]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d036      	beq.n	8005888 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d016      	beq.n	8005850 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005822:	4b15      	ldr	r3, [pc, #84]	@ (8005878 <HAL_RCC_OscConfig+0x27c>)
 8005824:	2201      	movs	r2, #1
 8005826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005828:	f7fd f8ae 	bl	8002988 <HAL_GetTick>
 800582c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005830:	f7fd f8aa 	bl	8002988 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e173      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005842:	4b0b      	ldr	r3, [pc, #44]	@ (8005870 <HAL_RCC_OscConfig+0x274>)
 8005844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0f0      	beq.n	8005830 <HAL_RCC_OscConfig+0x234>
 800584e:	e01b      	b.n	8005888 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005850:	4b09      	ldr	r3, [pc, #36]	@ (8005878 <HAL_RCC_OscConfig+0x27c>)
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005856:	f7fd f897 	bl	8002988 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800585c:	e00e      	b.n	800587c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800585e:	f7fd f893 	bl	8002988 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d907      	bls.n	800587c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e15c      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
 8005870:	40023800 	.word	0x40023800
 8005874:	42470000 	.word	0x42470000
 8005878:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800587c:	4b8a      	ldr	r3, [pc, #552]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 800587e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1ea      	bne.n	800585e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 8097 	beq.w	80059c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005896:	2300      	movs	r3, #0
 8005898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800589a:	4b83      	ldr	r3, [pc, #524]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10f      	bne.n	80058c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a6:	2300      	movs	r3, #0
 80058a8:	60bb      	str	r3, [r7, #8]
 80058aa:	4b7f      	ldr	r3, [pc, #508]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 80058ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ae:	4a7e      	ldr	r2, [pc, #504]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 80058b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80058b6:	4b7c      	ldr	r3, [pc, #496]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058be:	60bb      	str	r3, [r7, #8]
 80058c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058c2:	2301      	movs	r3, #1
 80058c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c6:	4b79      	ldr	r3, [pc, #484]	@ (8005aac <HAL_RCC_OscConfig+0x4b0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d118      	bne.n	8005904 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058d2:	4b76      	ldr	r3, [pc, #472]	@ (8005aac <HAL_RCC_OscConfig+0x4b0>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a75      	ldr	r2, [pc, #468]	@ (8005aac <HAL_RCC_OscConfig+0x4b0>)
 80058d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058de:	f7fd f853 	bl	8002988 <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e6:	f7fd f84f 	bl	8002988 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e118      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f8:	4b6c      	ldr	r3, [pc, #432]	@ (8005aac <HAL_RCC_OscConfig+0x4b0>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0f0      	beq.n	80058e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d106      	bne.n	800591a <HAL_RCC_OscConfig+0x31e>
 800590c:	4b66      	ldr	r3, [pc, #408]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 800590e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005910:	4a65      	ldr	r2, [pc, #404]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 8005912:	f043 0301 	orr.w	r3, r3, #1
 8005916:	6713      	str	r3, [r2, #112]	@ 0x70
 8005918:	e01c      	b.n	8005954 <HAL_RCC_OscConfig+0x358>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b05      	cmp	r3, #5
 8005920:	d10c      	bne.n	800593c <HAL_RCC_OscConfig+0x340>
 8005922:	4b61      	ldr	r3, [pc, #388]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 8005924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005926:	4a60      	ldr	r2, [pc, #384]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 8005928:	f043 0304 	orr.w	r3, r3, #4
 800592c:	6713      	str	r3, [r2, #112]	@ 0x70
 800592e:	4b5e      	ldr	r3, [pc, #376]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 8005930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005932:	4a5d      	ldr	r2, [pc, #372]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 8005934:	f043 0301 	orr.w	r3, r3, #1
 8005938:	6713      	str	r3, [r2, #112]	@ 0x70
 800593a:	e00b      	b.n	8005954 <HAL_RCC_OscConfig+0x358>
 800593c:	4b5a      	ldr	r3, [pc, #360]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 800593e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005940:	4a59      	ldr	r2, [pc, #356]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 8005942:	f023 0301 	bic.w	r3, r3, #1
 8005946:	6713      	str	r3, [r2, #112]	@ 0x70
 8005948:	4b57      	ldr	r3, [pc, #348]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 800594a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594c:	4a56      	ldr	r2, [pc, #344]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 800594e:	f023 0304 	bic.w	r3, r3, #4
 8005952:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d015      	beq.n	8005988 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595c:	f7fd f814 	bl	8002988 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005962:	e00a      	b.n	800597a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005964:	f7fd f810 	bl	8002988 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005972:	4293      	cmp	r3, r2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e0d7      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800597a:	4b4b      	ldr	r3, [pc, #300]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 800597c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0ee      	beq.n	8005964 <HAL_RCC_OscConfig+0x368>
 8005986:	e014      	b.n	80059b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005988:	f7fc fffe 	bl	8002988 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800598e:	e00a      	b.n	80059a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005990:	f7fc fffa 	bl	8002988 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800599e:	4293      	cmp	r3, r2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e0c1      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059a6:	4b40      	ldr	r3, [pc, #256]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 80059a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1ee      	bne.n	8005990 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d105      	bne.n	80059c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059b8:	4b3b      	ldr	r3, [pc, #236]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 80059ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059bc:	4a3a      	ldr	r2, [pc, #232]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 80059be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80ad 	beq.w	8005b28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059ce:	4b36      	ldr	r3, [pc, #216]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 030c 	and.w	r3, r3, #12
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d060      	beq.n	8005a9c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d145      	bne.n	8005a6e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059e2:	4b33      	ldr	r3, [pc, #204]	@ (8005ab0 <HAL_RCC_OscConfig+0x4b4>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e8:	f7fc ffce 	bl	8002988 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059f0:	f7fc ffca 	bl	8002988 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e093      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a02:	4b29      	ldr	r3, [pc, #164]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f0      	bne.n	80059f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69da      	ldr	r2, [r3, #28]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	019b      	lsls	r3, r3, #6
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a24:	085b      	lsrs	r3, r3, #1
 8005a26:	3b01      	subs	r3, #1
 8005a28:	041b      	lsls	r3, r3, #16
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a30:	061b      	lsls	r3, r3, #24
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a38:	071b      	lsls	r3, r3, #28
 8005a3a:	491b      	ldr	r1, [pc, #108]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a40:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab0 <HAL_RCC_OscConfig+0x4b4>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a46:	f7fc ff9f 	bl	8002988 <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a4e:	f7fc ff9b 	bl	8002988 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e064      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a60:	4b11      	ldr	r3, [pc, #68]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCC_OscConfig+0x452>
 8005a6c:	e05c      	b.n	8005b28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6e:	4b10      	ldr	r3, [pc, #64]	@ (8005ab0 <HAL_RCC_OscConfig+0x4b4>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a74:	f7fc ff88 	bl	8002988 <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a7c:	f7fc ff84 	bl	8002988 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e04d      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a8e:	4b06      	ldr	r3, [pc, #24]	@ (8005aa8 <HAL_RCC_OscConfig+0x4ac>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f0      	bne.n	8005a7c <HAL_RCC_OscConfig+0x480>
 8005a9a:	e045      	b.n	8005b28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d107      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e040      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	40007000 	.word	0x40007000
 8005ab0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8005b34 <HAL_RCC_OscConfig+0x538>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d030      	beq.n	8005b24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d129      	bne.n	8005b24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d122      	bne.n	8005b24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005aea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d119      	bne.n	8005b24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afa:	085b      	lsrs	r3, r3, #1
 8005afc:	3b01      	subs	r3, #1
 8005afe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d10f      	bne.n	8005b24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d107      	bne.n	8005b24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d001      	beq.n	8005b28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e000      	b.n	8005b2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	40023800 	.word	0x40023800

08005b38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e041      	b.n	8005bce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fc fc52 	bl	8002408 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3304      	adds	r3, #4
 8005b74:	4619      	mov	r1, r3
 8005b76:	4610      	mov	r0, r2
 8005b78:	f000 faec 	bl	8006154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d109      	bne.n	8005bfc <HAL_TIM_PWM_Start+0x24>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	bf14      	ite	ne
 8005bf4:	2301      	movne	r3, #1
 8005bf6:	2300      	moveq	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	e022      	b.n	8005c42 <HAL_TIM_PWM_Start+0x6a>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d109      	bne.n	8005c16 <HAL_TIM_PWM_Start+0x3e>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	bf14      	ite	ne
 8005c0e:	2301      	movne	r3, #1
 8005c10:	2300      	moveq	r3, #0
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	e015      	b.n	8005c42 <HAL_TIM_PWM_Start+0x6a>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	d109      	bne.n	8005c30 <HAL_TIM_PWM_Start+0x58>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	bf14      	ite	ne
 8005c28:	2301      	movne	r3, #1
 8005c2a:	2300      	moveq	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	e008      	b.n	8005c42 <HAL_TIM_PWM_Start+0x6a>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	bf14      	ite	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	2300      	moveq	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e07c      	b.n	8005d44 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d104      	bne.n	8005c5a <HAL_TIM_PWM_Start+0x82>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c58:	e013      	b.n	8005c82 <HAL_TIM_PWM_Start+0xaa>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d104      	bne.n	8005c6a <HAL_TIM_PWM_Start+0x92>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c68:	e00b      	b.n	8005c82 <HAL_TIM_PWM_Start+0xaa>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d104      	bne.n	8005c7a <HAL_TIM_PWM_Start+0xa2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c78:	e003      	b.n	8005c82 <HAL_TIM_PWM_Start+0xaa>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2201      	movs	r2, #1
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fcbe 	bl	800660c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a2d      	ldr	r2, [pc, #180]	@ (8005d4c <HAL_TIM_PWM_Start+0x174>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d004      	beq.n	8005ca4 <HAL_TIM_PWM_Start+0xcc>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d50 <HAL_TIM_PWM_Start+0x178>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d101      	bne.n	8005ca8 <HAL_TIM_PWM_Start+0xd0>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e000      	b.n	8005caa <HAL_TIM_PWM_Start+0xd2>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d007      	beq.n	8005cbe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a22      	ldr	r2, [pc, #136]	@ (8005d4c <HAL_TIM_PWM_Start+0x174>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d022      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cd0:	d01d      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8005d54 <HAL_TIM_PWM_Start+0x17c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d018      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d58 <HAL_TIM_PWM_Start+0x180>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a1c      	ldr	r2, [pc, #112]	@ (8005d5c <HAL_TIM_PWM_Start+0x184>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00e      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a16      	ldr	r2, [pc, #88]	@ (8005d50 <HAL_TIM_PWM_Start+0x178>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d009      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a18      	ldr	r2, [pc, #96]	@ (8005d60 <HAL_TIM_PWM_Start+0x188>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d004      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x136>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a16      	ldr	r2, [pc, #88]	@ (8005d64 <HAL_TIM_PWM_Start+0x18c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d111      	bne.n	8005d32 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b06      	cmp	r3, #6
 8005d1e:	d010      	beq.n	8005d42 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0201 	orr.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d30:	e007      	b.n	8005d42 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f042 0201 	orr.w	r2, r2, #1
 8005d40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	40010000 	.word	0x40010000
 8005d50:	40010400 	.word	0x40010400
 8005d54:	40000400 	.word	0x40000400
 8005d58:	40000800 	.word	0x40000800
 8005d5c:	40000c00 	.word	0x40000c00
 8005d60:	40014000 	.word	0x40014000
 8005d64:	40001800 	.word	0x40001800

08005d68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e097      	b.n	8005eac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d106      	bne.n	8005d96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7fc fabf 	bl	8002314 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dac:	f023 0307 	bic.w	r3, r3, #7
 8005db0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3304      	adds	r3, #4
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	f000 f9c9 	bl	8006154 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dea:	f023 0303 	bic.w	r3, r3, #3
 8005dee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	021b      	lsls	r3, r3, #8
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005e08:	f023 030c 	bic.w	r3, r3, #12
 8005e0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	021b      	lsls	r3, r3, #8
 8005e24:	4313      	orrs	r3, r2
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	011a      	lsls	r2, r3, #4
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	031b      	lsls	r3, r3, #12
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005e46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005e4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ec4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ecc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ed4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005edc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d110      	bne.n	8005f06 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ee4:	7bfb      	ldrb	r3, [r7, #15]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d102      	bne.n	8005ef0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005eea:	7b7b      	ldrb	r3, [r7, #13]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d001      	beq.n	8005ef4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e069      	b.n	8005fc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f04:	e031      	b.n	8005f6a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b04      	cmp	r3, #4
 8005f0a:	d110      	bne.n	8005f2e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f0c:	7bbb      	ldrb	r3, [r7, #14]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d102      	bne.n	8005f18 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f12:	7b3b      	ldrb	r3, [r7, #12]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d001      	beq.n	8005f1c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e055      	b.n	8005fc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f2c:	e01d      	b.n	8005f6a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d108      	bne.n	8005f46 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f34:	7bbb      	ldrb	r3, [r7, #14]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d105      	bne.n	8005f46 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f3a:	7b7b      	ldrb	r3, [r7, #13]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d102      	bne.n	8005f46 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f40:	7b3b      	ldrb	r3, [r7, #12]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d001      	beq.n	8005f4a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e03e      	b.n	8005fc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2202      	movs	r2, #2
 8005f56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2202      	movs	r2, #2
 8005f66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_TIM_Encoder_Start+0xc4>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d008      	beq.n	8005f88 <HAL_TIM_Encoder_Start+0xd4>
 8005f76:	e00f      	b.n	8005f98 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	2100      	movs	r1, #0
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fb43 	bl	800660c <TIM_CCxChannelCmd>
      break;
 8005f86:	e016      	b.n	8005fb6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	2104      	movs	r1, #4
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 fb3b 	bl	800660c <TIM_CCxChannelCmd>
      break;
 8005f96:	e00e      	b.n	8005fb6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fb33 	bl	800660c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2201      	movs	r2, #1
 8005fac:	2104      	movs	r1, #4
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 fb2c 	bl	800660c <TIM_CCxChannelCmd>
      break;
 8005fb4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f042 0201 	orr.w	r2, r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d101      	bne.n	8005fee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005fea:	2302      	movs	r3, #2
 8005fec:	e0ae      	b.n	800614c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2b0c      	cmp	r3, #12
 8005ffa:	f200 809f 	bhi.w	800613c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8006004 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006004:	08006039 	.word	0x08006039
 8006008:	0800613d 	.word	0x0800613d
 800600c:	0800613d 	.word	0x0800613d
 8006010:	0800613d 	.word	0x0800613d
 8006014:	08006079 	.word	0x08006079
 8006018:	0800613d 	.word	0x0800613d
 800601c:	0800613d 	.word	0x0800613d
 8006020:	0800613d 	.word	0x0800613d
 8006024:	080060bb 	.word	0x080060bb
 8006028:	0800613d 	.word	0x0800613d
 800602c:	0800613d 	.word	0x0800613d
 8006030:	0800613d 	.word	0x0800613d
 8006034:	080060fb 	.word	0x080060fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 f934 	bl	80062ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0208 	orr.w	r2, r2, #8
 8006052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0204 	bic.w	r2, r2, #4
 8006062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6999      	ldr	r1, [r3, #24]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	691a      	ldr	r2, [r3, #16]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	619a      	str	r2, [r3, #24]
      break;
 8006076:	e064      	b.n	8006142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	4618      	mov	r0, r3
 8006080:	f000 f984 	bl	800638c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699a      	ldr	r2, [r3, #24]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6999      	ldr	r1, [r3, #24]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	021a      	lsls	r2, r3, #8
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	619a      	str	r2, [r3, #24]
      break;
 80060b8:	e043      	b.n	8006142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f000 f9d9 	bl	8006478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69da      	ldr	r2, [r3, #28]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0208 	orr.w	r2, r2, #8
 80060d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0204 	bic.w	r2, r2, #4
 80060e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	69d9      	ldr	r1, [r3, #28]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	61da      	str	r2, [r3, #28]
      break;
 80060f8:	e023      	b.n	8006142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68b9      	ldr	r1, [r7, #8]
 8006100:	4618      	mov	r0, r3
 8006102:	f000 fa2d 	bl	8006560 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69da      	ldr	r2, [r3, #28]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69da      	ldr	r2, [r3, #28]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69d9      	ldr	r1, [r3, #28]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	021a      	lsls	r2, r3, #8
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	61da      	str	r2, [r3, #28]
      break;
 800613a:	e002      	b.n	8006142 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	75fb      	strb	r3, [r7, #23]
      break;
 8006140:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800614a:	7dfb      	ldrb	r3, [r7, #23]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a46      	ldr	r2, [pc, #280]	@ (8006280 <TIM_Base_SetConfig+0x12c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d013      	beq.n	8006194 <TIM_Base_SetConfig+0x40>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006172:	d00f      	beq.n	8006194 <TIM_Base_SetConfig+0x40>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a43      	ldr	r2, [pc, #268]	@ (8006284 <TIM_Base_SetConfig+0x130>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d00b      	beq.n	8006194 <TIM_Base_SetConfig+0x40>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a42      	ldr	r2, [pc, #264]	@ (8006288 <TIM_Base_SetConfig+0x134>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d007      	beq.n	8006194 <TIM_Base_SetConfig+0x40>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a41      	ldr	r2, [pc, #260]	@ (800628c <TIM_Base_SetConfig+0x138>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d003      	beq.n	8006194 <TIM_Base_SetConfig+0x40>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a40      	ldr	r2, [pc, #256]	@ (8006290 <TIM_Base_SetConfig+0x13c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d108      	bne.n	80061a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a35      	ldr	r2, [pc, #212]	@ (8006280 <TIM_Base_SetConfig+0x12c>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d02b      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b4:	d027      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a32      	ldr	r2, [pc, #200]	@ (8006284 <TIM_Base_SetConfig+0x130>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d023      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a31      	ldr	r2, [pc, #196]	@ (8006288 <TIM_Base_SetConfig+0x134>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d01f      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a30      	ldr	r2, [pc, #192]	@ (800628c <TIM_Base_SetConfig+0x138>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d01b      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a2f      	ldr	r2, [pc, #188]	@ (8006290 <TIM_Base_SetConfig+0x13c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d017      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a2e      	ldr	r2, [pc, #184]	@ (8006294 <TIM_Base_SetConfig+0x140>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d013      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006298 <TIM_Base_SetConfig+0x144>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00f      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a2c      	ldr	r2, [pc, #176]	@ (800629c <TIM_Base_SetConfig+0x148>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00b      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a2b      	ldr	r2, [pc, #172]	@ (80062a0 <TIM_Base_SetConfig+0x14c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d007      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a2a      	ldr	r2, [pc, #168]	@ (80062a4 <TIM_Base_SetConfig+0x150>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d003      	beq.n	8006206 <TIM_Base_SetConfig+0xb2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a29      	ldr	r2, [pc, #164]	@ (80062a8 <TIM_Base_SetConfig+0x154>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d108      	bne.n	8006218 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800620c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a10      	ldr	r2, [pc, #64]	@ (8006280 <TIM_Base_SetConfig+0x12c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d003      	beq.n	800624c <TIM_Base_SetConfig+0xf8>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a12      	ldr	r2, [pc, #72]	@ (8006290 <TIM_Base_SetConfig+0x13c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d103      	bne.n	8006254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b01      	cmp	r3, #1
 8006264:	d105      	bne.n	8006272 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f023 0201 	bic.w	r2, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	611a      	str	r2, [r3, #16]
  }
}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40010000 	.word	0x40010000
 8006284:	40000400 	.word	0x40000400
 8006288:	40000800 	.word	0x40000800
 800628c:	40000c00 	.word	0x40000c00
 8006290:	40010400 	.word	0x40010400
 8006294:	40014000 	.word	0x40014000
 8006298:	40014400 	.word	0x40014400
 800629c:	40014800 	.word	0x40014800
 80062a0:	40001800 	.word	0x40001800
 80062a4:	40001c00 	.word	0x40001c00
 80062a8:	40002000 	.word	0x40002000

080062ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	f023 0201 	bic.w	r2, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f023 0302 	bic.w	r3, r3, #2
 80062f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a20      	ldr	r2, [pc, #128]	@ (8006384 <TIM_OC1_SetConfig+0xd8>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d003      	beq.n	8006310 <TIM_OC1_SetConfig+0x64>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a1f      	ldr	r2, [pc, #124]	@ (8006388 <TIM_OC1_SetConfig+0xdc>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d10c      	bne.n	800632a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f023 0308 	bic.w	r3, r3, #8
 8006316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f023 0304 	bic.w	r3, r3, #4
 8006328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a15      	ldr	r2, [pc, #84]	@ (8006384 <TIM_OC1_SetConfig+0xd8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d003      	beq.n	800633a <TIM_OC1_SetConfig+0x8e>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a14      	ldr	r2, [pc, #80]	@ (8006388 <TIM_OC1_SetConfig+0xdc>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d111      	bne.n	800635e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	621a      	str	r2, [r3, #32]
}
 8006378:	bf00      	nop
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	40010000 	.word	0x40010000
 8006388:	40010400 	.word	0x40010400

0800638c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	f023 0210 	bic.w	r2, r3, #16
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f023 0320 	bic.w	r3, r3, #32
 80063d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	011b      	lsls	r3, r3, #4
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a22      	ldr	r2, [pc, #136]	@ (8006470 <TIM_OC2_SetConfig+0xe4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_OC2_SetConfig+0x68>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a21      	ldr	r2, [pc, #132]	@ (8006474 <TIM_OC2_SetConfig+0xe8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d10d      	bne.n	8006410 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800640e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a17      	ldr	r2, [pc, #92]	@ (8006470 <TIM_OC2_SetConfig+0xe4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_OC2_SetConfig+0x94>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a16      	ldr	r2, [pc, #88]	@ (8006474 <TIM_OC2_SetConfig+0xe8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d113      	bne.n	8006448 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006426:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800642e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	621a      	str	r2, [r3, #32]
}
 8006462:	bf00      	nop
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40010000 	.word	0x40010000
 8006474:	40010400 	.word	0x40010400

08006478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0303 	bic.w	r3, r3, #3
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	021b      	lsls	r3, r3, #8
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a21      	ldr	r2, [pc, #132]	@ (8006558 <TIM_OC3_SetConfig+0xe0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d003      	beq.n	80064de <TIM_OC3_SetConfig+0x66>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a20      	ldr	r2, [pc, #128]	@ (800655c <TIM_OC3_SetConfig+0xe4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d10d      	bne.n	80064fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a16      	ldr	r2, [pc, #88]	@ (8006558 <TIM_OC3_SetConfig+0xe0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d003      	beq.n	800650a <TIM_OC3_SetConfig+0x92>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a15      	ldr	r2, [pc, #84]	@ (800655c <TIM_OC3_SetConfig+0xe4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d113      	bne.n	8006532 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4313      	orrs	r3, r2
 8006530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	621a      	str	r2, [r3, #32]
}
 800654c:	bf00      	nop
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	40010000 	.word	0x40010000
 800655c:	40010400 	.word	0x40010400

08006560 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800658e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	021b      	lsls	r3, r3, #8
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	031b      	lsls	r3, r3, #12
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a12      	ldr	r2, [pc, #72]	@ (8006604 <TIM_OC4_SetConfig+0xa4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d003      	beq.n	80065c8 <TIM_OC4_SetConfig+0x68>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a11      	ldr	r2, [pc, #68]	@ (8006608 <TIM_OC4_SetConfig+0xa8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d109      	bne.n	80065dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	019b      	lsls	r3, r3, #6
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4313      	orrs	r3, r2
 80065da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	621a      	str	r2, [r3, #32]
}
 80065f6:	bf00      	nop
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40010000 	.word	0x40010000
 8006608:	40010400 	.word	0x40010400

0800660c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f003 031f 	and.w	r3, r3, #31
 800661e:	2201      	movs	r2, #1
 8006620:	fa02 f303 	lsl.w	r3, r2, r3
 8006624:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a1a      	ldr	r2, [r3, #32]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	43db      	mvns	r3, r3
 800662e:	401a      	ands	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a1a      	ldr	r2, [r3, #32]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f003 031f 	and.w	r3, r3, #31
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	fa01 f303 	lsl.w	r3, r1, r3
 8006644:	431a      	orrs	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	621a      	str	r2, [r3, #32]
}
 800664a:	bf00      	nop
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
	...

08006658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006668:	2b01      	cmp	r3, #1
 800666a:	d101      	bne.n	8006670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800666c:	2302      	movs	r3, #2
 800666e:	e05a      	b.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a21      	ldr	r2, [pc, #132]	@ (8006734 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d022      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066bc:	d01d      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1d      	ldr	r2, [pc, #116]	@ (8006738 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d018      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a1b      	ldr	r2, [pc, #108]	@ (800673c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d013      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006740 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00e      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a18      	ldr	r2, [pc, #96]	@ (8006744 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d009      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a17      	ldr	r2, [pc, #92]	@ (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d004      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a15      	ldr	r2, [pc, #84]	@ (800674c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d10c      	bne.n	8006714 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	4313      	orrs	r3, r2
 800670a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	40010000 	.word	0x40010000
 8006738:	40000400 	.word	0x40000400
 800673c:	40000800 	.word	0x40000800
 8006740:	40000c00 	.word	0x40000c00
 8006744:	40010400 	.word	0x40010400
 8006748:	40014000 	.word	0x40014000
 800674c:	40001800 	.word	0x40001800

08006750 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e042      	b.n	80067e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fb fec2 	bl	8002500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2224      	movs	r2, #36	@ 0x24
 8006780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006792:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fcdb 	bl	8007150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	695a      	ldr	r2, [r3, #20]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80067c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b20      	cmp	r3, #32
 8006808:	d112      	bne.n	8006830 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <HAL_UART_Receive_IT+0x26>
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e00b      	b.n	8006832 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006820:	88fb      	ldrh	r3, [r7, #6]
 8006822:	461a      	mov	r2, r3
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 faba 	bl	8006da0 <UART_Start_Receive_IT>
 800682c:	4603      	mov	r3, r0
 800682e:	e000      	b.n	8006832 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006830:	2302      	movs	r3, #2
  }
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b0ba      	sub	sp, #232	@ 0xe8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006862:	2300      	movs	r3, #0
 8006864:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006868:	2300      	movs	r3, #0
 800686a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800686e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800687a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10f      	bne.n	80068a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b00      	cmp	r3, #0
 800688c:	d009      	beq.n	80068a2 <HAL_UART_IRQHandler+0x66>
 800688e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fb99 	bl	8006fd2 <UART_Receive_IT>
      return;
 80068a0:	e25b      	b.n	8006d5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 80de 	beq.w	8006a68 <HAL_UART_IRQHandler+0x22c>
 80068ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d106      	bne.n	80068c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80068b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 80d1 	beq.w	8006a68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00b      	beq.n	80068ea <HAL_UART_IRQHandler+0xae>
 80068d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068e2:	f043 0201 	orr.w	r2, r3, #1
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00b      	beq.n	800690e <HAL_UART_IRQHandler+0xd2>
 80068f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006906:	f043 0202 	orr.w	r2, r3, #2
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00b      	beq.n	8006932 <HAL_UART_IRQHandler+0xf6>
 800691a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800692a:	f043 0204 	orr.w	r2, r3, #4
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d011      	beq.n	8006962 <HAL_UART_IRQHandler+0x126>
 800693e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d105      	bne.n	8006956 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800694a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800695a:	f043 0208 	orr.w	r2, r3, #8
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006966:	2b00      	cmp	r3, #0
 8006968:	f000 81f2 	beq.w	8006d50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800696c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006970:	f003 0320 	and.w	r3, r3, #32
 8006974:	2b00      	cmp	r3, #0
 8006976:	d008      	beq.n	800698a <HAL_UART_IRQHandler+0x14e>
 8006978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fb24 	bl	8006fd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006994:	2b40      	cmp	r3, #64	@ 0x40
 8006996:	bf0c      	ite	eq
 8006998:	2301      	moveq	r3, #1
 800699a:	2300      	movne	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d103      	bne.n	80069b6 <HAL_UART_IRQHandler+0x17a>
 80069ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d04f      	beq.n	8006a56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fa2c 	bl	8006e14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c6:	2b40      	cmp	r3, #64	@ 0x40
 80069c8:	d141      	bne.n	8006a4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3314      	adds	r3, #20
 80069d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3314      	adds	r3, #20
 80069f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1d9      	bne.n	80069ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d013      	beq.n	8006a46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a22:	4a7e      	ldr	r2, [pc, #504]	@ (8006c1c <HAL_UART_IRQHandler+0x3e0>)
 8006a24:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fc fe1c 	bl	8003668 <HAL_DMA_Abort_IT>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d016      	beq.n	8006a64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a40:	4610      	mov	r0, r2
 8006a42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a44:	e00e      	b.n	8006a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f994 	bl	8006d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4c:	e00a      	b.n	8006a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f990 	bl	8006d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a54:	e006      	b.n	8006a64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f98c 	bl	8006d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a62:	e175      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a64:	bf00      	nop
    return;
 8006a66:	e173      	b.n	8006d50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	f040 814f 	bne.w	8006d10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a76:	f003 0310 	and.w	r3, r3, #16
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8148 	beq.w	8006d10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a84:	f003 0310 	and.w	r3, r3, #16
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 8141 	beq.w	8006d10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60bb      	str	r3, [r7, #8]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	60bb      	str	r3, [r7, #8]
 8006aa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aae:	2b40      	cmp	r3, #64	@ 0x40
 8006ab0:	f040 80b6 	bne.w	8006c20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ac0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 8145 	beq.w	8006d54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	f080 813e 	bcs.w	8006d54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ade:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006aea:	f000 8088 	beq.w	8006bfe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006b1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1d9      	bne.n	8006aee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3314      	adds	r3, #20
 8006b40:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3314      	adds	r3, #20
 8006b5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b5e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b62:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e1      	bne.n	8006b3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3314      	adds	r3, #20
 8006b7c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3314      	adds	r3, #20
 8006b96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b9c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ba0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ba8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e3      	bne.n	8006b76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	330c      	adds	r3, #12
 8006bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc6:	e853 3f00 	ldrex	r3, [r3]
 8006bca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bce:	f023 0310 	bic.w	r3, r3, #16
 8006bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006be0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006be2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006be6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006be8:	e841 2300 	strex	r3, r2, [r1]
 8006bec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1e3      	bne.n	8006bbc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fc fcc5 	bl	8003588 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2202      	movs	r2, #2
 8006c02:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f8b7 	bl	8006d88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c1a:	e09b      	b.n	8006d54 <HAL_UART_IRQHandler+0x518>
 8006c1c:	08006edb 	.word	0x08006edb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 808e 	beq.w	8006d58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 8089 	beq.w	8006d58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	330c      	adds	r3, #12
 8006c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	330c      	adds	r3, #12
 8006c66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e3      	bne.n	8006c46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3314      	adds	r3, #20
 8006c84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3314      	adds	r3, #20
 8006c9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ca2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006caa:	e841 2300 	strex	r3, r2, [r1]
 8006cae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e3      	bne.n	8006c7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	330c      	adds	r3, #12
 8006cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	e853 3f00 	ldrex	r3, [r3]
 8006cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0310 	bic.w	r3, r3, #16
 8006cda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ce8:	61fa      	str	r2, [r7, #28]
 8006cea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	69b9      	ldr	r1, [r7, #24]
 8006cee:	69fa      	ldr	r2, [r7, #28]
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e3      	bne.n	8006cc4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f83d 	bl	8006d88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d0e:	e023      	b.n	8006d58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d009      	beq.n	8006d30 <HAL_UART_IRQHandler+0x4f4>
 8006d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f8ea 	bl	8006f02 <UART_Transmit_IT>
    return;
 8006d2e:	e014      	b.n	8006d5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00e      	beq.n	8006d5a <HAL_UART_IRQHandler+0x51e>
 8006d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d008      	beq.n	8006d5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f92a 	bl	8006fa2 <UART_EndTransmit_IT>
    return;
 8006d4e:	e004      	b.n	8006d5a <HAL_UART_IRQHandler+0x51e>
    return;
 8006d50:	bf00      	nop
 8006d52:	e002      	b.n	8006d5a <HAL_UART_IRQHandler+0x51e>
      return;
 8006d54:	bf00      	nop
 8006d56:	e000      	b.n	8006d5a <HAL_UART_IRQHandler+0x51e>
      return;
 8006d58:	bf00      	nop
  }
}
 8006d5a:	37e8      	adds	r7, #232	@ 0xe8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	4613      	mov	r3, r2
 8006dac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	88fa      	ldrh	r2, [r7, #6]
 8006db8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	88fa      	ldrh	r2, [r7, #6]
 8006dbe:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2222      	movs	r2, #34	@ 0x22
 8006dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d007      	beq.n	8006de6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006de4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	695a      	ldr	r2, [r3, #20]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f042 0201 	orr.w	r2, r2, #1
 8006df4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0220 	orr.w	r2, r2, #32
 8006e04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b095      	sub	sp, #84	@ 0x54
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	330c      	adds	r3, #12
 8006e22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e3c:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e5      	bne.n	8006e1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3314      	adds	r3, #20
 8006e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	e853 3f00 	ldrex	r3, [r3]
 8006e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	f023 0301 	bic.w	r3, r3, #1
 8006e66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3314      	adds	r3, #20
 8006e6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e5      	bne.n	8006e50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d119      	bne.n	8006ec0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	330c      	adds	r3, #12
 8006e92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	e853 3f00 	ldrex	r3, [r3]
 8006e9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f023 0310 	bic.w	r3, r3, #16
 8006ea2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	330c      	adds	r3, #12
 8006eaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006eac:	61ba      	str	r2, [r7, #24]
 8006eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb0:	6979      	ldr	r1, [r7, #20]
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	e841 2300 	strex	r3, r2, [r1]
 8006eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1e5      	bne.n	8006e8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ece:	bf00      	nop
 8006ed0:	3754      	adds	r7, #84	@ 0x54
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f7ff ff3d 	bl	8006d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006efa:	bf00      	nop
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b085      	sub	sp, #20
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b21      	cmp	r3, #33	@ 0x21
 8006f14:	d13e      	bne.n	8006f94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f1e:	d114      	bne.n	8006f4a <UART_Transmit_IT+0x48>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d110      	bne.n	8006f4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	1c9a      	adds	r2, r3, #2
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	621a      	str	r2, [r3, #32]
 8006f48:	e008      	b.n	8006f5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	1c59      	adds	r1, r3, #1
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6211      	str	r1, [r2, #32]
 8006f54:	781a      	ldrb	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10f      	bne.n	8006f90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68da      	ldr	r2, [r3, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	e000      	b.n	8006f96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f94:	2302      	movs	r3, #2
  }
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b082      	sub	sp, #8
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff fecc 	bl	8006d60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b08c      	sub	sp, #48	@ 0x30
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b22      	cmp	r3, #34	@ 0x22
 8006fe4:	f040 80ae 	bne.w	8007144 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ff0:	d117      	bne.n	8007022 <UART_Receive_IT+0x50>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d113      	bne.n	8007022 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007002:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	b29b      	uxth	r3, r3
 800700c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007010:	b29a      	uxth	r2, r3
 8007012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007014:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701a:	1c9a      	adds	r2, r3, #2
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007020:	e026      	b.n	8007070 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007026:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007028:	2300      	movs	r3, #0
 800702a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007034:	d007      	beq.n	8007046 <UART_Receive_IT+0x74>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <UART_Receive_IT+0x82>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	b2da      	uxtb	r2, r3
 800704e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	e008      	b.n	8007066 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007060:	b2da      	uxtb	r2, r3
 8007062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007064:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007074:	b29b      	uxth	r3, r3
 8007076:	3b01      	subs	r3, #1
 8007078:	b29b      	uxth	r3, r3
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	4619      	mov	r1, r3
 800707e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007080:	2b00      	cmp	r3, #0
 8007082:	d15d      	bne.n	8007140 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68da      	ldr	r2, [r3, #12]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0220 	bic.w	r2, r2, #32
 8007092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	695a      	ldr	r2, [r3, #20]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0201 	bic.w	r2, r2, #1
 80070b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2220      	movs	r2, #32
 80070b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d135      	bne.n	8007136 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	330c      	adds	r3, #12
 80070d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	613b      	str	r3, [r7, #16]
   return(result);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f023 0310 	bic.w	r3, r3, #16
 80070e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	330c      	adds	r3, #12
 80070ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070f0:	623a      	str	r2, [r7, #32]
 80070f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	69f9      	ldr	r1, [r7, #28]
 80070f6:	6a3a      	ldr	r2, [r7, #32]
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e5      	bne.n	80070d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0310 	and.w	r3, r3, #16
 800710e:	2b10      	cmp	r3, #16
 8007110:	d10a      	bne.n	8007128 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007112:	2300      	movs	r3, #0
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	60fb      	str	r3, [r7, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff fe2a 	bl	8006d88 <HAL_UARTEx_RxEventCallback>
 8007134:	e002      	b.n	800713c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7f9 ff44 	bl	8000fc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	e002      	b.n	8007146 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	e000      	b.n	8007146 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007144:	2302      	movs	r3, #2
  }
}
 8007146:	4618      	mov	r0, r3
 8007148:	3730      	adds	r7, #48	@ 0x30
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
	...

08007150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007154:	b0c0      	sub	sp, #256	@ 0x100
 8007156:	af00      	add	r7, sp, #0
 8007158:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800715c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800716c:	68d9      	ldr	r1, [r3, #12]
 800716e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	ea40 0301 	orr.w	r3, r0, r1
 8007178:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800717a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	431a      	orrs	r2, r3
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800718c:	695b      	ldr	r3, [r3, #20]
 800718e:	431a      	orrs	r2, r3
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800719c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80071a8:	f021 010c 	bic.w	r1, r1, #12
 80071ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071b6:	430b      	orrs	r3, r1
 80071b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80071c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ca:	6999      	ldr	r1, [r3, #24]
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	ea40 0301 	orr.w	r3, r0, r1
 80071d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	4b8f      	ldr	r3, [pc, #572]	@ (800741c <UART_SetConfig+0x2cc>)
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d005      	beq.n	80071f0 <UART_SetConfig+0xa0>
 80071e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	4b8d      	ldr	r3, [pc, #564]	@ (8007420 <UART_SetConfig+0x2d0>)
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d104      	bne.n	80071fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071f0:	f7fd ffc0 	bl	8005174 <HAL_RCC_GetPCLK2Freq>
 80071f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80071f8:	e003      	b.n	8007202 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071fa:	f7fd ffa7 	bl	800514c <HAL_RCC_GetPCLK1Freq>
 80071fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800720c:	f040 810c 	bne.w	8007428 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007214:	2200      	movs	r2, #0
 8007216:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800721a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800721e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007222:	4622      	mov	r2, r4
 8007224:	462b      	mov	r3, r5
 8007226:	1891      	adds	r1, r2, r2
 8007228:	65b9      	str	r1, [r7, #88]	@ 0x58
 800722a:	415b      	adcs	r3, r3
 800722c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800722e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007232:	4621      	mov	r1, r4
 8007234:	eb12 0801 	adds.w	r8, r2, r1
 8007238:	4629      	mov	r1, r5
 800723a:	eb43 0901 	adc.w	r9, r3, r1
 800723e:	f04f 0200 	mov.w	r2, #0
 8007242:	f04f 0300 	mov.w	r3, #0
 8007246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800724a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800724e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007252:	4690      	mov	r8, r2
 8007254:	4699      	mov	r9, r3
 8007256:	4623      	mov	r3, r4
 8007258:	eb18 0303 	adds.w	r3, r8, r3
 800725c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007260:	462b      	mov	r3, r5
 8007262:	eb49 0303 	adc.w	r3, r9, r3
 8007266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800726a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007276:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800727a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800727e:	460b      	mov	r3, r1
 8007280:	18db      	adds	r3, r3, r3
 8007282:	653b      	str	r3, [r7, #80]	@ 0x50
 8007284:	4613      	mov	r3, r2
 8007286:	eb42 0303 	adc.w	r3, r2, r3
 800728a:	657b      	str	r3, [r7, #84]	@ 0x54
 800728c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007290:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007294:	f7f9 fc2a 	bl	8000aec <__aeabi_uldivmod>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4b61      	ldr	r3, [pc, #388]	@ (8007424 <UART_SetConfig+0x2d4>)
 800729e:	fba3 2302 	umull	r2, r3, r3, r2
 80072a2:	095b      	lsrs	r3, r3, #5
 80072a4:	011c      	lsls	r4, r3, #4
 80072a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072aa:	2200      	movs	r2, #0
 80072ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80072b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072b8:	4642      	mov	r2, r8
 80072ba:	464b      	mov	r3, r9
 80072bc:	1891      	adds	r1, r2, r2
 80072be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072c0:	415b      	adcs	r3, r3
 80072c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072c8:	4641      	mov	r1, r8
 80072ca:	eb12 0a01 	adds.w	sl, r2, r1
 80072ce:	4649      	mov	r1, r9
 80072d0:	eb43 0b01 	adc.w	fp, r3, r1
 80072d4:	f04f 0200 	mov.w	r2, #0
 80072d8:	f04f 0300 	mov.w	r3, #0
 80072dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072e8:	4692      	mov	sl, r2
 80072ea:	469b      	mov	fp, r3
 80072ec:	4643      	mov	r3, r8
 80072ee:	eb1a 0303 	adds.w	r3, sl, r3
 80072f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072f6:	464b      	mov	r3, r9
 80072f8:	eb4b 0303 	adc.w	r3, fp, r3
 80072fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800730c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007310:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007314:	460b      	mov	r3, r1
 8007316:	18db      	adds	r3, r3, r3
 8007318:	643b      	str	r3, [r7, #64]	@ 0x40
 800731a:	4613      	mov	r3, r2
 800731c:	eb42 0303 	adc.w	r3, r2, r3
 8007320:	647b      	str	r3, [r7, #68]	@ 0x44
 8007322:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007326:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800732a:	f7f9 fbdf 	bl	8000aec <__aeabi_uldivmod>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4611      	mov	r1, r2
 8007334:	4b3b      	ldr	r3, [pc, #236]	@ (8007424 <UART_SetConfig+0x2d4>)
 8007336:	fba3 2301 	umull	r2, r3, r3, r1
 800733a:	095b      	lsrs	r3, r3, #5
 800733c:	2264      	movs	r2, #100	@ 0x64
 800733e:	fb02 f303 	mul.w	r3, r2, r3
 8007342:	1acb      	subs	r3, r1, r3
 8007344:	00db      	lsls	r3, r3, #3
 8007346:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800734a:	4b36      	ldr	r3, [pc, #216]	@ (8007424 <UART_SetConfig+0x2d4>)
 800734c:	fba3 2302 	umull	r2, r3, r3, r2
 8007350:	095b      	lsrs	r3, r3, #5
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007358:	441c      	add	r4, r3
 800735a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800735e:	2200      	movs	r2, #0
 8007360:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007364:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007368:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800736c:	4642      	mov	r2, r8
 800736e:	464b      	mov	r3, r9
 8007370:	1891      	adds	r1, r2, r2
 8007372:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007374:	415b      	adcs	r3, r3
 8007376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007378:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800737c:	4641      	mov	r1, r8
 800737e:	1851      	adds	r1, r2, r1
 8007380:	6339      	str	r1, [r7, #48]	@ 0x30
 8007382:	4649      	mov	r1, r9
 8007384:	414b      	adcs	r3, r1
 8007386:	637b      	str	r3, [r7, #52]	@ 0x34
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007394:	4659      	mov	r1, fp
 8007396:	00cb      	lsls	r3, r1, #3
 8007398:	4651      	mov	r1, sl
 800739a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800739e:	4651      	mov	r1, sl
 80073a0:	00ca      	lsls	r2, r1, #3
 80073a2:	4610      	mov	r0, r2
 80073a4:	4619      	mov	r1, r3
 80073a6:	4603      	mov	r3, r0
 80073a8:	4642      	mov	r2, r8
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073b0:	464b      	mov	r3, r9
 80073b2:	460a      	mov	r2, r1
 80073b4:	eb42 0303 	adc.w	r3, r2, r3
 80073b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073d0:	460b      	mov	r3, r1
 80073d2:	18db      	adds	r3, r3, r3
 80073d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073d6:	4613      	mov	r3, r2
 80073d8:	eb42 0303 	adc.w	r3, r2, r3
 80073dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80073e6:	f7f9 fb81 	bl	8000aec <__aeabi_uldivmod>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007424 <UART_SetConfig+0x2d4>)
 80073f0:	fba3 1302 	umull	r1, r3, r3, r2
 80073f4:	095b      	lsrs	r3, r3, #5
 80073f6:	2164      	movs	r1, #100	@ 0x64
 80073f8:	fb01 f303 	mul.w	r3, r1, r3
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	3332      	adds	r3, #50	@ 0x32
 8007402:	4a08      	ldr	r2, [pc, #32]	@ (8007424 <UART_SetConfig+0x2d4>)
 8007404:	fba2 2303 	umull	r2, r3, r2, r3
 8007408:	095b      	lsrs	r3, r3, #5
 800740a:	f003 0207 	and.w	r2, r3, #7
 800740e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4422      	add	r2, r4
 8007416:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007418:	e106      	b.n	8007628 <UART_SetConfig+0x4d8>
 800741a:	bf00      	nop
 800741c:	40011000 	.word	0x40011000
 8007420:	40011400 	.word	0x40011400
 8007424:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800742c:	2200      	movs	r2, #0
 800742e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007432:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007436:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800743a:	4642      	mov	r2, r8
 800743c:	464b      	mov	r3, r9
 800743e:	1891      	adds	r1, r2, r2
 8007440:	6239      	str	r1, [r7, #32]
 8007442:	415b      	adcs	r3, r3
 8007444:	627b      	str	r3, [r7, #36]	@ 0x24
 8007446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800744a:	4641      	mov	r1, r8
 800744c:	1854      	adds	r4, r2, r1
 800744e:	4649      	mov	r1, r9
 8007450:	eb43 0501 	adc.w	r5, r3, r1
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	f04f 0300 	mov.w	r3, #0
 800745c:	00eb      	lsls	r3, r5, #3
 800745e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007462:	00e2      	lsls	r2, r4, #3
 8007464:	4614      	mov	r4, r2
 8007466:	461d      	mov	r5, r3
 8007468:	4643      	mov	r3, r8
 800746a:	18e3      	adds	r3, r4, r3
 800746c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007470:	464b      	mov	r3, r9
 8007472:	eb45 0303 	adc.w	r3, r5, r3
 8007476:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800747a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007486:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800748a:	f04f 0200 	mov.w	r2, #0
 800748e:	f04f 0300 	mov.w	r3, #0
 8007492:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007496:	4629      	mov	r1, r5
 8007498:	008b      	lsls	r3, r1, #2
 800749a:	4621      	mov	r1, r4
 800749c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074a0:	4621      	mov	r1, r4
 80074a2:	008a      	lsls	r2, r1, #2
 80074a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80074a8:	f7f9 fb20 	bl	8000aec <__aeabi_uldivmod>
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	4b60      	ldr	r3, [pc, #384]	@ (8007634 <UART_SetConfig+0x4e4>)
 80074b2:	fba3 2302 	umull	r2, r3, r3, r2
 80074b6:	095b      	lsrs	r3, r3, #5
 80074b8:	011c      	lsls	r4, r3, #4
 80074ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074be:	2200      	movs	r2, #0
 80074c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80074c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80074cc:	4642      	mov	r2, r8
 80074ce:	464b      	mov	r3, r9
 80074d0:	1891      	adds	r1, r2, r2
 80074d2:	61b9      	str	r1, [r7, #24]
 80074d4:	415b      	adcs	r3, r3
 80074d6:	61fb      	str	r3, [r7, #28]
 80074d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074dc:	4641      	mov	r1, r8
 80074de:	1851      	adds	r1, r2, r1
 80074e0:	6139      	str	r1, [r7, #16]
 80074e2:	4649      	mov	r1, r9
 80074e4:	414b      	adcs	r3, r1
 80074e6:	617b      	str	r3, [r7, #20]
 80074e8:	f04f 0200 	mov.w	r2, #0
 80074ec:	f04f 0300 	mov.w	r3, #0
 80074f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074f4:	4659      	mov	r1, fp
 80074f6:	00cb      	lsls	r3, r1, #3
 80074f8:	4651      	mov	r1, sl
 80074fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074fe:	4651      	mov	r1, sl
 8007500:	00ca      	lsls	r2, r1, #3
 8007502:	4610      	mov	r0, r2
 8007504:	4619      	mov	r1, r3
 8007506:	4603      	mov	r3, r0
 8007508:	4642      	mov	r2, r8
 800750a:	189b      	adds	r3, r3, r2
 800750c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007510:	464b      	mov	r3, r9
 8007512:	460a      	mov	r2, r1
 8007514:	eb42 0303 	adc.w	r3, r2, r3
 8007518:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800751c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007526:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007528:	f04f 0200 	mov.w	r2, #0
 800752c:	f04f 0300 	mov.w	r3, #0
 8007530:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007534:	4649      	mov	r1, r9
 8007536:	008b      	lsls	r3, r1, #2
 8007538:	4641      	mov	r1, r8
 800753a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800753e:	4641      	mov	r1, r8
 8007540:	008a      	lsls	r2, r1, #2
 8007542:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007546:	f7f9 fad1 	bl	8000aec <__aeabi_uldivmod>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	4611      	mov	r1, r2
 8007550:	4b38      	ldr	r3, [pc, #224]	@ (8007634 <UART_SetConfig+0x4e4>)
 8007552:	fba3 2301 	umull	r2, r3, r3, r1
 8007556:	095b      	lsrs	r3, r3, #5
 8007558:	2264      	movs	r2, #100	@ 0x64
 800755a:	fb02 f303 	mul.w	r3, r2, r3
 800755e:	1acb      	subs	r3, r1, r3
 8007560:	011b      	lsls	r3, r3, #4
 8007562:	3332      	adds	r3, #50	@ 0x32
 8007564:	4a33      	ldr	r2, [pc, #204]	@ (8007634 <UART_SetConfig+0x4e4>)
 8007566:	fba2 2303 	umull	r2, r3, r2, r3
 800756a:	095b      	lsrs	r3, r3, #5
 800756c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007570:	441c      	add	r4, r3
 8007572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007576:	2200      	movs	r2, #0
 8007578:	673b      	str	r3, [r7, #112]	@ 0x70
 800757a:	677a      	str	r2, [r7, #116]	@ 0x74
 800757c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007580:	4642      	mov	r2, r8
 8007582:	464b      	mov	r3, r9
 8007584:	1891      	adds	r1, r2, r2
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	415b      	adcs	r3, r3
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007590:	4641      	mov	r1, r8
 8007592:	1851      	adds	r1, r2, r1
 8007594:	6039      	str	r1, [r7, #0]
 8007596:	4649      	mov	r1, r9
 8007598:	414b      	adcs	r3, r1
 800759a:	607b      	str	r3, [r7, #4]
 800759c:	f04f 0200 	mov.w	r2, #0
 80075a0:	f04f 0300 	mov.w	r3, #0
 80075a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075a8:	4659      	mov	r1, fp
 80075aa:	00cb      	lsls	r3, r1, #3
 80075ac:	4651      	mov	r1, sl
 80075ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075b2:	4651      	mov	r1, sl
 80075b4:	00ca      	lsls	r2, r1, #3
 80075b6:	4610      	mov	r0, r2
 80075b8:	4619      	mov	r1, r3
 80075ba:	4603      	mov	r3, r0
 80075bc:	4642      	mov	r2, r8
 80075be:	189b      	adds	r3, r3, r2
 80075c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075c2:	464b      	mov	r3, r9
 80075c4:	460a      	mov	r2, r1
 80075c6:	eb42 0303 	adc.w	r3, r2, r3
 80075ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80075d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80075d8:	f04f 0200 	mov.w	r2, #0
 80075dc:	f04f 0300 	mov.w	r3, #0
 80075e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80075e4:	4649      	mov	r1, r9
 80075e6:	008b      	lsls	r3, r1, #2
 80075e8:	4641      	mov	r1, r8
 80075ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075ee:	4641      	mov	r1, r8
 80075f0:	008a      	lsls	r2, r1, #2
 80075f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80075f6:	f7f9 fa79 	bl	8000aec <__aeabi_uldivmod>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007634 <UART_SetConfig+0x4e4>)
 8007600:	fba3 1302 	umull	r1, r3, r3, r2
 8007604:	095b      	lsrs	r3, r3, #5
 8007606:	2164      	movs	r1, #100	@ 0x64
 8007608:	fb01 f303 	mul.w	r3, r1, r3
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	3332      	adds	r3, #50	@ 0x32
 8007612:	4a08      	ldr	r2, [pc, #32]	@ (8007634 <UART_SetConfig+0x4e4>)
 8007614:	fba2 2303 	umull	r2, r3, r2, r3
 8007618:	095b      	lsrs	r3, r3, #5
 800761a:	f003 020f 	and.w	r2, r3, #15
 800761e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4422      	add	r2, r4
 8007626:	609a      	str	r2, [r3, #8]
}
 8007628:	bf00      	nop
 800762a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800762e:	46bd      	mov	sp, r7
 8007630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007634:	51eb851f 	.word	0x51eb851f

08007638 <sniprintf>:
 8007638:	b40c      	push	{r2, r3}
 800763a:	b530      	push	{r4, r5, lr}
 800763c:	4b17      	ldr	r3, [pc, #92]	@ (800769c <sniprintf+0x64>)
 800763e:	1e0c      	subs	r4, r1, #0
 8007640:	681d      	ldr	r5, [r3, #0]
 8007642:	b09d      	sub	sp, #116	@ 0x74
 8007644:	da08      	bge.n	8007658 <sniprintf+0x20>
 8007646:	238b      	movs	r3, #139	@ 0x8b
 8007648:	602b      	str	r3, [r5, #0]
 800764a:	f04f 30ff 	mov.w	r0, #4294967295
 800764e:	b01d      	add	sp, #116	@ 0x74
 8007650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007654:	b002      	add	sp, #8
 8007656:	4770      	bx	lr
 8007658:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800765c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007660:	bf14      	ite	ne
 8007662:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007666:	4623      	moveq	r3, r4
 8007668:	9304      	str	r3, [sp, #16]
 800766a:	9307      	str	r3, [sp, #28]
 800766c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007670:	9002      	str	r0, [sp, #8]
 8007672:	9006      	str	r0, [sp, #24]
 8007674:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007678:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800767a:	ab21      	add	r3, sp, #132	@ 0x84
 800767c:	a902      	add	r1, sp, #8
 800767e:	4628      	mov	r0, r5
 8007680:	9301      	str	r3, [sp, #4]
 8007682:	f000 f9a9 	bl	80079d8 <_svfiprintf_r>
 8007686:	1c43      	adds	r3, r0, #1
 8007688:	bfbc      	itt	lt
 800768a:	238b      	movlt	r3, #139	@ 0x8b
 800768c:	602b      	strlt	r3, [r5, #0]
 800768e:	2c00      	cmp	r4, #0
 8007690:	d0dd      	beq.n	800764e <sniprintf+0x16>
 8007692:	9b02      	ldr	r3, [sp, #8]
 8007694:	2200      	movs	r2, #0
 8007696:	701a      	strb	r2, [r3, #0]
 8007698:	e7d9      	b.n	800764e <sniprintf+0x16>
 800769a:	bf00      	nop
 800769c:	2000000c 	.word	0x2000000c

080076a0 <memset>:
 80076a0:	4402      	add	r2, r0
 80076a2:	4603      	mov	r3, r0
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d100      	bne.n	80076aa <memset+0xa>
 80076a8:	4770      	bx	lr
 80076aa:	f803 1b01 	strb.w	r1, [r3], #1
 80076ae:	e7f9      	b.n	80076a4 <memset+0x4>

080076b0 <strncpy>:
 80076b0:	b510      	push	{r4, lr}
 80076b2:	3901      	subs	r1, #1
 80076b4:	4603      	mov	r3, r0
 80076b6:	b132      	cbz	r2, 80076c6 <strncpy+0x16>
 80076b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80076bc:	f803 4b01 	strb.w	r4, [r3], #1
 80076c0:	3a01      	subs	r2, #1
 80076c2:	2c00      	cmp	r4, #0
 80076c4:	d1f7      	bne.n	80076b6 <strncpy+0x6>
 80076c6:	441a      	add	r2, r3
 80076c8:	2100      	movs	r1, #0
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d100      	bne.n	80076d0 <strncpy+0x20>
 80076ce:	bd10      	pop	{r4, pc}
 80076d0:	f803 1b01 	strb.w	r1, [r3], #1
 80076d4:	e7f9      	b.n	80076ca <strncpy+0x1a>
	...

080076d8 <__errno>:
 80076d8:	4b01      	ldr	r3, [pc, #4]	@ (80076e0 <__errno+0x8>)
 80076da:	6818      	ldr	r0, [r3, #0]
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	2000000c 	.word	0x2000000c

080076e4 <__libc_init_array>:
 80076e4:	b570      	push	{r4, r5, r6, lr}
 80076e6:	4d0d      	ldr	r5, [pc, #52]	@ (800771c <__libc_init_array+0x38>)
 80076e8:	4c0d      	ldr	r4, [pc, #52]	@ (8007720 <__libc_init_array+0x3c>)
 80076ea:	1b64      	subs	r4, r4, r5
 80076ec:	10a4      	asrs	r4, r4, #2
 80076ee:	2600      	movs	r6, #0
 80076f0:	42a6      	cmp	r6, r4
 80076f2:	d109      	bne.n	8007708 <__libc_init_array+0x24>
 80076f4:	4d0b      	ldr	r5, [pc, #44]	@ (8007724 <__libc_init_array+0x40>)
 80076f6:	4c0c      	ldr	r4, [pc, #48]	@ (8007728 <__libc_init_array+0x44>)
 80076f8:	f000 fc66 	bl	8007fc8 <_init>
 80076fc:	1b64      	subs	r4, r4, r5
 80076fe:	10a4      	asrs	r4, r4, #2
 8007700:	2600      	movs	r6, #0
 8007702:	42a6      	cmp	r6, r4
 8007704:	d105      	bne.n	8007712 <__libc_init_array+0x2e>
 8007706:	bd70      	pop	{r4, r5, r6, pc}
 8007708:	f855 3b04 	ldr.w	r3, [r5], #4
 800770c:	4798      	blx	r3
 800770e:	3601      	adds	r6, #1
 8007710:	e7ee      	b.n	80076f0 <__libc_init_array+0xc>
 8007712:	f855 3b04 	ldr.w	r3, [r5], #4
 8007716:	4798      	blx	r3
 8007718:	3601      	adds	r6, #1
 800771a:	e7f2      	b.n	8007702 <__libc_init_array+0x1e>
 800771c:	08008050 	.word	0x08008050
 8007720:	08008050 	.word	0x08008050
 8007724:	08008050 	.word	0x08008050
 8007728:	08008054 	.word	0x08008054

0800772c <__retarget_lock_acquire_recursive>:
 800772c:	4770      	bx	lr

0800772e <__retarget_lock_release_recursive>:
 800772e:	4770      	bx	lr

08007730 <_free_r>:
 8007730:	b538      	push	{r3, r4, r5, lr}
 8007732:	4605      	mov	r5, r0
 8007734:	2900      	cmp	r1, #0
 8007736:	d041      	beq.n	80077bc <_free_r+0x8c>
 8007738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800773c:	1f0c      	subs	r4, r1, #4
 800773e:	2b00      	cmp	r3, #0
 8007740:	bfb8      	it	lt
 8007742:	18e4      	addlt	r4, r4, r3
 8007744:	f000 f8e0 	bl	8007908 <__malloc_lock>
 8007748:	4a1d      	ldr	r2, [pc, #116]	@ (80077c0 <_free_r+0x90>)
 800774a:	6813      	ldr	r3, [r2, #0]
 800774c:	b933      	cbnz	r3, 800775c <_free_r+0x2c>
 800774e:	6063      	str	r3, [r4, #4]
 8007750:	6014      	str	r4, [r2, #0]
 8007752:	4628      	mov	r0, r5
 8007754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007758:	f000 b8dc 	b.w	8007914 <__malloc_unlock>
 800775c:	42a3      	cmp	r3, r4
 800775e:	d908      	bls.n	8007772 <_free_r+0x42>
 8007760:	6820      	ldr	r0, [r4, #0]
 8007762:	1821      	adds	r1, r4, r0
 8007764:	428b      	cmp	r3, r1
 8007766:	bf01      	itttt	eq
 8007768:	6819      	ldreq	r1, [r3, #0]
 800776a:	685b      	ldreq	r3, [r3, #4]
 800776c:	1809      	addeq	r1, r1, r0
 800776e:	6021      	streq	r1, [r4, #0]
 8007770:	e7ed      	b.n	800774e <_free_r+0x1e>
 8007772:	461a      	mov	r2, r3
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	b10b      	cbz	r3, 800777c <_free_r+0x4c>
 8007778:	42a3      	cmp	r3, r4
 800777a:	d9fa      	bls.n	8007772 <_free_r+0x42>
 800777c:	6811      	ldr	r1, [r2, #0]
 800777e:	1850      	adds	r0, r2, r1
 8007780:	42a0      	cmp	r0, r4
 8007782:	d10b      	bne.n	800779c <_free_r+0x6c>
 8007784:	6820      	ldr	r0, [r4, #0]
 8007786:	4401      	add	r1, r0
 8007788:	1850      	adds	r0, r2, r1
 800778a:	4283      	cmp	r3, r0
 800778c:	6011      	str	r1, [r2, #0]
 800778e:	d1e0      	bne.n	8007752 <_free_r+0x22>
 8007790:	6818      	ldr	r0, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	6053      	str	r3, [r2, #4]
 8007796:	4408      	add	r0, r1
 8007798:	6010      	str	r0, [r2, #0]
 800779a:	e7da      	b.n	8007752 <_free_r+0x22>
 800779c:	d902      	bls.n	80077a4 <_free_r+0x74>
 800779e:	230c      	movs	r3, #12
 80077a0:	602b      	str	r3, [r5, #0]
 80077a2:	e7d6      	b.n	8007752 <_free_r+0x22>
 80077a4:	6820      	ldr	r0, [r4, #0]
 80077a6:	1821      	adds	r1, r4, r0
 80077a8:	428b      	cmp	r3, r1
 80077aa:	bf04      	itt	eq
 80077ac:	6819      	ldreq	r1, [r3, #0]
 80077ae:	685b      	ldreq	r3, [r3, #4]
 80077b0:	6063      	str	r3, [r4, #4]
 80077b2:	bf04      	itt	eq
 80077b4:	1809      	addeq	r1, r1, r0
 80077b6:	6021      	streq	r1, [r4, #0]
 80077b8:	6054      	str	r4, [r2, #4]
 80077ba:	e7ca      	b.n	8007752 <_free_r+0x22>
 80077bc:	bd38      	pop	{r3, r4, r5, pc}
 80077be:	bf00      	nop
 80077c0:	20000774 	.word	0x20000774

080077c4 <sbrk_aligned>:
 80077c4:	b570      	push	{r4, r5, r6, lr}
 80077c6:	4e0f      	ldr	r6, [pc, #60]	@ (8007804 <sbrk_aligned+0x40>)
 80077c8:	460c      	mov	r4, r1
 80077ca:	6831      	ldr	r1, [r6, #0]
 80077cc:	4605      	mov	r5, r0
 80077ce:	b911      	cbnz	r1, 80077d6 <sbrk_aligned+0x12>
 80077d0:	f000 fba6 	bl	8007f20 <_sbrk_r>
 80077d4:	6030      	str	r0, [r6, #0]
 80077d6:	4621      	mov	r1, r4
 80077d8:	4628      	mov	r0, r5
 80077da:	f000 fba1 	bl	8007f20 <_sbrk_r>
 80077de:	1c43      	adds	r3, r0, #1
 80077e0:	d103      	bne.n	80077ea <sbrk_aligned+0x26>
 80077e2:	f04f 34ff 	mov.w	r4, #4294967295
 80077e6:	4620      	mov	r0, r4
 80077e8:	bd70      	pop	{r4, r5, r6, pc}
 80077ea:	1cc4      	adds	r4, r0, #3
 80077ec:	f024 0403 	bic.w	r4, r4, #3
 80077f0:	42a0      	cmp	r0, r4
 80077f2:	d0f8      	beq.n	80077e6 <sbrk_aligned+0x22>
 80077f4:	1a21      	subs	r1, r4, r0
 80077f6:	4628      	mov	r0, r5
 80077f8:	f000 fb92 	bl	8007f20 <_sbrk_r>
 80077fc:	3001      	adds	r0, #1
 80077fe:	d1f2      	bne.n	80077e6 <sbrk_aligned+0x22>
 8007800:	e7ef      	b.n	80077e2 <sbrk_aligned+0x1e>
 8007802:	bf00      	nop
 8007804:	20000770 	.word	0x20000770

08007808 <_malloc_r>:
 8007808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800780c:	1ccd      	adds	r5, r1, #3
 800780e:	f025 0503 	bic.w	r5, r5, #3
 8007812:	3508      	adds	r5, #8
 8007814:	2d0c      	cmp	r5, #12
 8007816:	bf38      	it	cc
 8007818:	250c      	movcc	r5, #12
 800781a:	2d00      	cmp	r5, #0
 800781c:	4606      	mov	r6, r0
 800781e:	db01      	blt.n	8007824 <_malloc_r+0x1c>
 8007820:	42a9      	cmp	r1, r5
 8007822:	d904      	bls.n	800782e <_malloc_r+0x26>
 8007824:	230c      	movs	r3, #12
 8007826:	6033      	str	r3, [r6, #0]
 8007828:	2000      	movs	r0, #0
 800782a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800782e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007904 <_malloc_r+0xfc>
 8007832:	f000 f869 	bl	8007908 <__malloc_lock>
 8007836:	f8d8 3000 	ldr.w	r3, [r8]
 800783a:	461c      	mov	r4, r3
 800783c:	bb44      	cbnz	r4, 8007890 <_malloc_r+0x88>
 800783e:	4629      	mov	r1, r5
 8007840:	4630      	mov	r0, r6
 8007842:	f7ff ffbf 	bl	80077c4 <sbrk_aligned>
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	4604      	mov	r4, r0
 800784a:	d158      	bne.n	80078fe <_malloc_r+0xf6>
 800784c:	f8d8 4000 	ldr.w	r4, [r8]
 8007850:	4627      	mov	r7, r4
 8007852:	2f00      	cmp	r7, #0
 8007854:	d143      	bne.n	80078de <_malloc_r+0xd6>
 8007856:	2c00      	cmp	r4, #0
 8007858:	d04b      	beq.n	80078f2 <_malloc_r+0xea>
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	4639      	mov	r1, r7
 800785e:	4630      	mov	r0, r6
 8007860:	eb04 0903 	add.w	r9, r4, r3
 8007864:	f000 fb5c 	bl	8007f20 <_sbrk_r>
 8007868:	4581      	cmp	r9, r0
 800786a:	d142      	bne.n	80078f2 <_malloc_r+0xea>
 800786c:	6821      	ldr	r1, [r4, #0]
 800786e:	1a6d      	subs	r5, r5, r1
 8007870:	4629      	mov	r1, r5
 8007872:	4630      	mov	r0, r6
 8007874:	f7ff ffa6 	bl	80077c4 <sbrk_aligned>
 8007878:	3001      	adds	r0, #1
 800787a:	d03a      	beq.n	80078f2 <_malloc_r+0xea>
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	442b      	add	r3, r5
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	f8d8 3000 	ldr.w	r3, [r8]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	bb62      	cbnz	r2, 80078e4 <_malloc_r+0xdc>
 800788a:	f8c8 7000 	str.w	r7, [r8]
 800788e:	e00f      	b.n	80078b0 <_malloc_r+0xa8>
 8007890:	6822      	ldr	r2, [r4, #0]
 8007892:	1b52      	subs	r2, r2, r5
 8007894:	d420      	bmi.n	80078d8 <_malloc_r+0xd0>
 8007896:	2a0b      	cmp	r2, #11
 8007898:	d917      	bls.n	80078ca <_malloc_r+0xc2>
 800789a:	1961      	adds	r1, r4, r5
 800789c:	42a3      	cmp	r3, r4
 800789e:	6025      	str	r5, [r4, #0]
 80078a0:	bf18      	it	ne
 80078a2:	6059      	strne	r1, [r3, #4]
 80078a4:	6863      	ldr	r3, [r4, #4]
 80078a6:	bf08      	it	eq
 80078a8:	f8c8 1000 	streq.w	r1, [r8]
 80078ac:	5162      	str	r2, [r4, r5]
 80078ae:	604b      	str	r3, [r1, #4]
 80078b0:	4630      	mov	r0, r6
 80078b2:	f000 f82f 	bl	8007914 <__malloc_unlock>
 80078b6:	f104 000b 	add.w	r0, r4, #11
 80078ba:	1d23      	adds	r3, r4, #4
 80078bc:	f020 0007 	bic.w	r0, r0, #7
 80078c0:	1ac2      	subs	r2, r0, r3
 80078c2:	bf1c      	itt	ne
 80078c4:	1a1b      	subne	r3, r3, r0
 80078c6:	50a3      	strne	r3, [r4, r2]
 80078c8:	e7af      	b.n	800782a <_malloc_r+0x22>
 80078ca:	6862      	ldr	r2, [r4, #4]
 80078cc:	42a3      	cmp	r3, r4
 80078ce:	bf0c      	ite	eq
 80078d0:	f8c8 2000 	streq.w	r2, [r8]
 80078d4:	605a      	strne	r2, [r3, #4]
 80078d6:	e7eb      	b.n	80078b0 <_malloc_r+0xa8>
 80078d8:	4623      	mov	r3, r4
 80078da:	6864      	ldr	r4, [r4, #4]
 80078dc:	e7ae      	b.n	800783c <_malloc_r+0x34>
 80078de:	463c      	mov	r4, r7
 80078e0:	687f      	ldr	r7, [r7, #4]
 80078e2:	e7b6      	b.n	8007852 <_malloc_r+0x4a>
 80078e4:	461a      	mov	r2, r3
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	42a3      	cmp	r3, r4
 80078ea:	d1fb      	bne.n	80078e4 <_malloc_r+0xdc>
 80078ec:	2300      	movs	r3, #0
 80078ee:	6053      	str	r3, [r2, #4]
 80078f0:	e7de      	b.n	80078b0 <_malloc_r+0xa8>
 80078f2:	230c      	movs	r3, #12
 80078f4:	6033      	str	r3, [r6, #0]
 80078f6:	4630      	mov	r0, r6
 80078f8:	f000 f80c 	bl	8007914 <__malloc_unlock>
 80078fc:	e794      	b.n	8007828 <_malloc_r+0x20>
 80078fe:	6005      	str	r5, [r0, #0]
 8007900:	e7d6      	b.n	80078b0 <_malloc_r+0xa8>
 8007902:	bf00      	nop
 8007904:	20000774 	.word	0x20000774

08007908 <__malloc_lock>:
 8007908:	4801      	ldr	r0, [pc, #4]	@ (8007910 <__malloc_lock+0x8>)
 800790a:	f7ff bf0f 	b.w	800772c <__retarget_lock_acquire_recursive>
 800790e:	bf00      	nop
 8007910:	2000076c 	.word	0x2000076c

08007914 <__malloc_unlock>:
 8007914:	4801      	ldr	r0, [pc, #4]	@ (800791c <__malloc_unlock+0x8>)
 8007916:	f7ff bf0a 	b.w	800772e <__retarget_lock_release_recursive>
 800791a:	bf00      	nop
 800791c:	2000076c 	.word	0x2000076c

08007920 <__ssputs_r>:
 8007920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007924:	688e      	ldr	r6, [r1, #8]
 8007926:	461f      	mov	r7, r3
 8007928:	42be      	cmp	r6, r7
 800792a:	680b      	ldr	r3, [r1, #0]
 800792c:	4682      	mov	sl, r0
 800792e:	460c      	mov	r4, r1
 8007930:	4690      	mov	r8, r2
 8007932:	d82d      	bhi.n	8007990 <__ssputs_r+0x70>
 8007934:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007938:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800793c:	d026      	beq.n	800798c <__ssputs_r+0x6c>
 800793e:	6965      	ldr	r5, [r4, #20]
 8007940:	6909      	ldr	r1, [r1, #16]
 8007942:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007946:	eba3 0901 	sub.w	r9, r3, r1
 800794a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800794e:	1c7b      	adds	r3, r7, #1
 8007950:	444b      	add	r3, r9
 8007952:	106d      	asrs	r5, r5, #1
 8007954:	429d      	cmp	r5, r3
 8007956:	bf38      	it	cc
 8007958:	461d      	movcc	r5, r3
 800795a:	0553      	lsls	r3, r2, #21
 800795c:	d527      	bpl.n	80079ae <__ssputs_r+0x8e>
 800795e:	4629      	mov	r1, r5
 8007960:	f7ff ff52 	bl	8007808 <_malloc_r>
 8007964:	4606      	mov	r6, r0
 8007966:	b360      	cbz	r0, 80079c2 <__ssputs_r+0xa2>
 8007968:	6921      	ldr	r1, [r4, #16]
 800796a:	464a      	mov	r2, r9
 800796c:	f000 fae8 	bl	8007f40 <memcpy>
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800797a:	81a3      	strh	r3, [r4, #12]
 800797c:	6126      	str	r6, [r4, #16]
 800797e:	6165      	str	r5, [r4, #20]
 8007980:	444e      	add	r6, r9
 8007982:	eba5 0509 	sub.w	r5, r5, r9
 8007986:	6026      	str	r6, [r4, #0]
 8007988:	60a5      	str	r5, [r4, #8]
 800798a:	463e      	mov	r6, r7
 800798c:	42be      	cmp	r6, r7
 800798e:	d900      	bls.n	8007992 <__ssputs_r+0x72>
 8007990:	463e      	mov	r6, r7
 8007992:	6820      	ldr	r0, [r4, #0]
 8007994:	4632      	mov	r2, r6
 8007996:	4641      	mov	r1, r8
 8007998:	f000 faa8 	bl	8007eec <memmove>
 800799c:	68a3      	ldr	r3, [r4, #8]
 800799e:	1b9b      	subs	r3, r3, r6
 80079a0:	60a3      	str	r3, [r4, #8]
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	4433      	add	r3, r6
 80079a6:	6023      	str	r3, [r4, #0]
 80079a8:	2000      	movs	r0, #0
 80079aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ae:	462a      	mov	r2, r5
 80079b0:	f000 fad4 	bl	8007f5c <_realloc_r>
 80079b4:	4606      	mov	r6, r0
 80079b6:	2800      	cmp	r0, #0
 80079b8:	d1e0      	bne.n	800797c <__ssputs_r+0x5c>
 80079ba:	6921      	ldr	r1, [r4, #16]
 80079bc:	4650      	mov	r0, sl
 80079be:	f7ff feb7 	bl	8007730 <_free_r>
 80079c2:	230c      	movs	r3, #12
 80079c4:	f8ca 3000 	str.w	r3, [sl]
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ce:	81a3      	strh	r3, [r4, #12]
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	e7e9      	b.n	80079aa <__ssputs_r+0x8a>
	...

080079d8 <_svfiprintf_r>:
 80079d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079dc:	4698      	mov	r8, r3
 80079de:	898b      	ldrh	r3, [r1, #12]
 80079e0:	061b      	lsls	r3, r3, #24
 80079e2:	b09d      	sub	sp, #116	@ 0x74
 80079e4:	4607      	mov	r7, r0
 80079e6:	460d      	mov	r5, r1
 80079e8:	4614      	mov	r4, r2
 80079ea:	d510      	bpl.n	8007a0e <_svfiprintf_r+0x36>
 80079ec:	690b      	ldr	r3, [r1, #16]
 80079ee:	b973      	cbnz	r3, 8007a0e <_svfiprintf_r+0x36>
 80079f0:	2140      	movs	r1, #64	@ 0x40
 80079f2:	f7ff ff09 	bl	8007808 <_malloc_r>
 80079f6:	6028      	str	r0, [r5, #0]
 80079f8:	6128      	str	r0, [r5, #16]
 80079fa:	b930      	cbnz	r0, 8007a0a <_svfiprintf_r+0x32>
 80079fc:	230c      	movs	r3, #12
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	f04f 30ff 	mov.w	r0, #4294967295
 8007a04:	b01d      	add	sp, #116	@ 0x74
 8007a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0a:	2340      	movs	r3, #64	@ 0x40
 8007a0c:	616b      	str	r3, [r5, #20]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a12:	2320      	movs	r3, #32
 8007a14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a18:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a1c:	2330      	movs	r3, #48	@ 0x30
 8007a1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007bbc <_svfiprintf_r+0x1e4>
 8007a22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a26:	f04f 0901 	mov.w	r9, #1
 8007a2a:	4623      	mov	r3, r4
 8007a2c:	469a      	mov	sl, r3
 8007a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a32:	b10a      	cbz	r2, 8007a38 <_svfiprintf_r+0x60>
 8007a34:	2a25      	cmp	r2, #37	@ 0x25
 8007a36:	d1f9      	bne.n	8007a2c <_svfiprintf_r+0x54>
 8007a38:	ebba 0b04 	subs.w	fp, sl, r4
 8007a3c:	d00b      	beq.n	8007a56 <_svfiprintf_r+0x7e>
 8007a3e:	465b      	mov	r3, fp
 8007a40:	4622      	mov	r2, r4
 8007a42:	4629      	mov	r1, r5
 8007a44:	4638      	mov	r0, r7
 8007a46:	f7ff ff6b 	bl	8007920 <__ssputs_r>
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	f000 80a7 	beq.w	8007b9e <_svfiprintf_r+0x1c6>
 8007a50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a52:	445a      	add	r2, fp
 8007a54:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a56:	f89a 3000 	ldrb.w	r3, [sl]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 809f 	beq.w	8007b9e <_svfiprintf_r+0x1c6>
 8007a60:	2300      	movs	r3, #0
 8007a62:	f04f 32ff 	mov.w	r2, #4294967295
 8007a66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a6a:	f10a 0a01 	add.w	sl, sl, #1
 8007a6e:	9304      	str	r3, [sp, #16]
 8007a70:	9307      	str	r3, [sp, #28]
 8007a72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a76:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a78:	4654      	mov	r4, sl
 8007a7a:	2205      	movs	r2, #5
 8007a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a80:	484e      	ldr	r0, [pc, #312]	@ (8007bbc <_svfiprintf_r+0x1e4>)
 8007a82:	f7f8 fbc5 	bl	8000210 <memchr>
 8007a86:	9a04      	ldr	r2, [sp, #16]
 8007a88:	b9d8      	cbnz	r0, 8007ac2 <_svfiprintf_r+0xea>
 8007a8a:	06d0      	lsls	r0, r2, #27
 8007a8c:	bf44      	itt	mi
 8007a8e:	2320      	movmi	r3, #32
 8007a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a94:	0711      	lsls	r1, r2, #28
 8007a96:	bf44      	itt	mi
 8007a98:	232b      	movmi	r3, #43	@ 0x2b
 8007a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007aa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007aa4:	d015      	beq.n	8007ad2 <_svfiprintf_r+0xfa>
 8007aa6:	9a07      	ldr	r2, [sp, #28]
 8007aa8:	4654      	mov	r4, sl
 8007aaa:	2000      	movs	r0, #0
 8007aac:	f04f 0c0a 	mov.w	ip, #10
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ab6:	3b30      	subs	r3, #48	@ 0x30
 8007ab8:	2b09      	cmp	r3, #9
 8007aba:	d94b      	bls.n	8007b54 <_svfiprintf_r+0x17c>
 8007abc:	b1b0      	cbz	r0, 8007aec <_svfiprintf_r+0x114>
 8007abe:	9207      	str	r2, [sp, #28]
 8007ac0:	e014      	b.n	8007aec <_svfiprintf_r+0x114>
 8007ac2:	eba0 0308 	sub.w	r3, r0, r8
 8007ac6:	fa09 f303 	lsl.w	r3, r9, r3
 8007aca:	4313      	orrs	r3, r2
 8007acc:	9304      	str	r3, [sp, #16]
 8007ace:	46a2      	mov	sl, r4
 8007ad0:	e7d2      	b.n	8007a78 <_svfiprintf_r+0xa0>
 8007ad2:	9b03      	ldr	r3, [sp, #12]
 8007ad4:	1d19      	adds	r1, r3, #4
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	9103      	str	r1, [sp, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bfbb      	ittet	lt
 8007ade:	425b      	neglt	r3, r3
 8007ae0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ae4:	9307      	strge	r3, [sp, #28]
 8007ae6:	9307      	strlt	r3, [sp, #28]
 8007ae8:	bfb8      	it	lt
 8007aea:	9204      	strlt	r2, [sp, #16]
 8007aec:	7823      	ldrb	r3, [r4, #0]
 8007aee:	2b2e      	cmp	r3, #46	@ 0x2e
 8007af0:	d10a      	bne.n	8007b08 <_svfiprintf_r+0x130>
 8007af2:	7863      	ldrb	r3, [r4, #1]
 8007af4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007af6:	d132      	bne.n	8007b5e <_svfiprintf_r+0x186>
 8007af8:	9b03      	ldr	r3, [sp, #12]
 8007afa:	1d1a      	adds	r2, r3, #4
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	9203      	str	r2, [sp, #12]
 8007b00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b04:	3402      	adds	r4, #2
 8007b06:	9305      	str	r3, [sp, #20]
 8007b08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007bcc <_svfiprintf_r+0x1f4>
 8007b0c:	7821      	ldrb	r1, [r4, #0]
 8007b0e:	2203      	movs	r2, #3
 8007b10:	4650      	mov	r0, sl
 8007b12:	f7f8 fb7d 	bl	8000210 <memchr>
 8007b16:	b138      	cbz	r0, 8007b28 <_svfiprintf_r+0x150>
 8007b18:	9b04      	ldr	r3, [sp, #16]
 8007b1a:	eba0 000a 	sub.w	r0, r0, sl
 8007b1e:	2240      	movs	r2, #64	@ 0x40
 8007b20:	4082      	lsls	r2, r0
 8007b22:	4313      	orrs	r3, r2
 8007b24:	3401      	adds	r4, #1
 8007b26:	9304      	str	r3, [sp, #16]
 8007b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b2c:	4824      	ldr	r0, [pc, #144]	@ (8007bc0 <_svfiprintf_r+0x1e8>)
 8007b2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b32:	2206      	movs	r2, #6
 8007b34:	f7f8 fb6c 	bl	8000210 <memchr>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d036      	beq.n	8007baa <_svfiprintf_r+0x1d2>
 8007b3c:	4b21      	ldr	r3, [pc, #132]	@ (8007bc4 <_svfiprintf_r+0x1ec>)
 8007b3e:	bb1b      	cbnz	r3, 8007b88 <_svfiprintf_r+0x1b0>
 8007b40:	9b03      	ldr	r3, [sp, #12]
 8007b42:	3307      	adds	r3, #7
 8007b44:	f023 0307 	bic.w	r3, r3, #7
 8007b48:	3308      	adds	r3, #8
 8007b4a:	9303      	str	r3, [sp, #12]
 8007b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b4e:	4433      	add	r3, r6
 8007b50:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b52:	e76a      	b.n	8007a2a <_svfiprintf_r+0x52>
 8007b54:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b58:	460c      	mov	r4, r1
 8007b5a:	2001      	movs	r0, #1
 8007b5c:	e7a8      	b.n	8007ab0 <_svfiprintf_r+0xd8>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	3401      	adds	r4, #1
 8007b62:	9305      	str	r3, [sp, #20]
 8007b64:	4619      	mov	r1, r3
 8007b66:	f04f 0c0a 	mov.w	ip, #10
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b70:	3a30      	subs	r2, #48	@ 0x30
 8007b72:	2a09      	cmp	r2, #9
 8007b74:	d903      	bls.n	8007b7e <_svfiprintf_r+0x1a6>
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0c6      	beq.n	8007b08 <_svfiprintf_r+0x130>
 8007b7a:	9105      	str	r1, [sp, #20]
 8007b7c:	e7c4      	b.n	8007b08 <_svfiprintf_r+0x130>
 8007b7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b82:	4604      	mov	r4, r0
 8007b84:	2301      	movs	r3, #1
 8007b86:	e7f0      	b.n	8007b6a <_svfiprintf_r+0x192>
 8007b88:	ab03      	add	r3, sp, #12
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	462a      	mov	r2, r5
 8007b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007bc8 <_svfiprintf_r+0x1f0>)
 8007b90:	a904      	add	r1, sp, #16
 8007b92:	4638      	mov	r0, r7
 8007b94:	f3af 8000 	nop.w
 8007b98:	1c42      	adds	r2, r0, #1
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	d1d6      	bne.n	8007b4c <_svfiprintf_r+0x174>
 8007b9e:	89ab      	ldrh	r3, [r5, #12]
 8007ba0:	065b      	lsls	r3, r3, #25
 8007ba2:	f53f af2d 	bmi.w	8007a00 <_svfiprintf_r+0x28>
 8007ba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ba8:	e72c      	b.n	8007a04 <_svfiprintf_r+0x2c>
 8007baa:	ab03      	add	r3, sp, #12
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	462a      	mov	r2, r5
 8007bb0:	4b05      	ldr	r3, [pc, #20]	@ (8007bc8 <_svfiprintf_r+0x1f0>)
 8007bb2:	a904      	add	r1, sp, #16
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	f000 f879 	bl	8007cac <_printf_i>
 8007bba:	e7ed      	b.n	8007b98 <_svfiprintf_r+0x1c0>
 8007bbc:	08008014 	.word	0x08008014
 8007bc0:	0800801e 	.word	0x0800801e
 8007bc4:	00000000 	.word	0x00000000
 8007bc8:	08007921 	.word	0x08007921
 8007bcc:	0800801a 	.word	0x0800801a

08007bd0 <_printf_common>:
 8007bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd4:	4616      	mov	r6, r2
 8007bd6:	4698      	mov	r8, r3
 8007bd8:	688a      	ldr	r2, [r1, #8]
 8007bda:	690b      	ldr	r3, [r1, #16]
 8007bdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007be0:	4293      	cmp	r3, r2
 8007be2:	bfb8      	it	lt
 8007be4:	4613      	movlt	r3, r2
 8007be6:	6033      	str	r3, [r6, #0]
 8007be8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bec:	4607      	mov	r7, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	b10a      	cbz	r2, 8007bf6 <_printf_common+0x26>
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	6033      	str	r3, [r6, #0]
 8007bf6:	6823      	ldr	r3, [r4, #0]
 8007bf8:	0699      	lsls	r1, r3, #26
 8007bfa:	bf42      	ittt	mi
 8007bfc:	6833      	ldrmi	r3, [r6, #0]
 8007bfe:	3302      	addmi	r3, #2
 8007c00:	6033      	strmi	r3, [r6, #0]
 8007c02:	6825      	ldr	r5, [r4, #0]
 8007c04:	f015 0506 	ands.w	r5, r5, #6
 8007c08:	d106      	bne.n	8007c18 <_printf_common+0x48>
 8007c0a:	f104 0a19 	add.w	sl, r4, #25
 8007c0e:	68e3      	ldr	r3, [r4, #12]
 8007c10:	6832      	ldr	r2, [r6, #0]
 8007c12:	1a9b      	subs	r3, r3, r2
 8007c14:	42ab      	cmp	r3, r5
 8007c16:	dc26      	bgt.n	8007c66 <_printf_common+0x96>
 8007c18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c1c:	6822      	ldr	r2, [r4, #0]
 8007c1e:	3b00      	subs	r3, #0
 8007c20:	bf18      	it	ne
 8007c22:	2301      	movne	r3, #1
 8007c24:	0692      	lsls	r2, r2, #26
 8007c26:	d42b      	bmi.n	8007c80 <_printf_common+0xb0>
 8007c28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c2c:	4641      	mov	r1, r8
 8007c2e:	4638      	mov	r0, r7
 8007c30:	47c8      	blx	r9
 8007c32:	3001      	adds	r0, #1
 8007c34:	d01e      	beq.n	8007c74 <_printf_common+0xa4>
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	6922      	ldr	r2, [r4, #16]
 8007c3a:	f003 0306 	and.w	r3, r3, #6
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	bf02      	ittt	eq
 8007c42:	68e5      	ldreq	r5, [r4, #12]
 8007c44:	6833      	ldreq	r3, [r6, #0]
 8007c46:	1aed      	subeq	r5, r5, r3
 8007c48:	68a3      	ldr	r3, [r4, #8]
 8007c4a:	bf0c      	ite	eq
 8007c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c50:	2500      	movne	r5, #0
 8007c52:	4293      	cmp	r3, r2
 8007c54:	bfc4      	itt	gt
 8007c56:	1a9b      	subgt	r3, r3, r2
 8007c58:	18ed      	addgt	r5, r5, r3
 8007c5a:	2600      	movs	r6, #0
 8007c5c:	341a      	adds	r4, #26
 8007c5e:	42b5      	cmp	r5, r6
 8007c60:	d11a      	bne.n	8007c98 <_printf_common+0xc8>
 8007c62:	2000      	movs	r0, #0
 8007c64:	e008      	b.n	8007c78 <_printf_common+0xa8>
 8007c66:	2301      	movs	r3, #1
 8007c68:	4652      	mov	r2, sl
 8007c6a:	4641      	mov	r1, r8
 8007c6c:	4638      	mov	r0, r7
 8007c6e:	47c8      	blx	r9
 8007c70:	3001      	adds	r0, #1
 8007c72:	d103      	bne.n	8007c7c <_printf_common+0xac>
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295
 8007c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c7c:	3501      	adds	r5, #1
 8007c7e:	e7c6      	b.n	8007c0e <_printf_common+0x3e>
 8007c80:	18e1      	adds	r1, r4, r3
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	2030      	movs	r0, #48	@ 0x30
 8007c86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c8a:	4422      	add	r2, r4
 8007c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c94:	3302      	adds	r3, #2
 8007c96:	e7c7      	b.n	8007c28 <_printf_common+0x58>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	4641      	mov	r1, r8
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	47c8      	blx	r9
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	d0e6      	beq.n	8007c74 <_printf_common+0xa4>
 8007ca6:	3601      	adds	r6, #1
 8007ca8:	e7d9      	b.n	8007c5e <_printf_common+0x8e>
	...

08007cac <_printf_i>:
 8007cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb0:	7e0f      	ldrb	r7, [r1, #24]
 8007cb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007cb4:	2f78      	cmp	r7, #120	@ 0x78
 8007cb6:	4691      	mov	r9, r2
 8007cb8:	4680      	mov	r8, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	469a      	mov	sl, r3
 8007cbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007cc2:	d807      	bhi.n	8007cd4 <_printf_i+0x28>
 8007cc4:	2f62      	cmp	r7, #98	@ 0x62
 8007cc6:	d80a      	bhi.n	8007cde <_printf_i+0x32>
 8007cc8:	2f00      	cmp	r7, #0
 8007cca:	f000 80d2 	beq.w	8007e72 <_printf_i+0x1c6>
 8007cce:	2f58      	cmp	r7, #88	@ 0x58
 8007cd0:	f000 80b9 	beq.w	8007e46 <_printf_i+0x19a>
 8007cd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007cdc:	e03a      	b.n	8007d54 <_printf_i+0xa8>
 8007cde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ce2:	2b15      	cmp	r3, #21
 8007ce4:	d8f6      	bhi.n	8007cd4 <_printf_i+0x28>
 8007ce6:	a101      	add	r1, pc, #4	@ (adr r1, 8007cec <_printf_i+0x40>)
 8007ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cec:	08007d45 	.word	0x08007d45
 8007cf0:	08007d59 	.word	0x08007d59
 8007cf4:	08007cd5 	.word	0x08007cd5
 8007cf8:	08007cd5 	.word	0x08007cd5
 8007cfc:	08007cd5 	.word	0x08007cd5
 8007d00:	08007cd5 	.word	0x08007cd5
 8007d04:	08007d59 	.word	0x08007d59
 8007d08:	08007cd5 	.word	0x08007cd5
 8007d0c:	08007cd5 	.word	0x08007cd5
 8007d10:	08007cd5 	.word	0x08007cd5
 8007d14:	08007cd5 	.word	0x08007cd5
 8007d18:	08007e59 	.word	0x08007e59
 8007d1c:	08007d83 	.word	0x08007d83
 8007d20:	08007e13 	.word	0x08007e13
 8007d24:	08007cd5 	.word	0x08007cd5
 8007d28:	08007cd5 	.word	0x08007cd5
 8007d2c:	08007e7b 	.word	0x08007e7b
 8007d30:	08007cd5 	.word	0x08007cd5
 8007d34:	08007d83 	.word	0x08007d83
 8007d38:	08007cd5 	.word	0x08007cd5
 8007d3c:	08007cd5 	.word	0x08007cd5
 8007d40:	08007e1b 	.word	0x08007e1b
 8007d44:	6833      	ldr	r3, [r6, #0]
 8007d46:	1d1a      	adds	r2, r3, #4
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	6032      	str	r2, [r6, #0]
 8007d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d54:	2301      	movs	r3, #1
 8007d56:	e09d      	b.n	8007e94 <_printf_i+0x1e8>
 8007d58:	6833      	ldr	r3, [r6, #0]
 8007d5a:	6820      	ldr	r0, [r4, #0]
 8007d5c:	1d19      	adds	r1, r3, #4
 8007d5e:	6031      	str	r1, [r6, #0]
 8007d60:	0606      	lsls	r6, r0, #24
 8007d62:	d501      	bpl.n	8007d68 <_printf_i+0xbc>
 8007d64:	681d      	ldr	r5, [r3, #0]
 8007d66:	e003      	b.n	8007d70 <_printf_i+0xc4>
 8007d68:	0645      	lsls	r5, r0, #25
 8007d6a:	d5fb      	bpl.n	8007d64 <_printf_i+0xb8>
 8007d6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d70:	2d00      	cmp	r5, #0
 8007d72:	da03      	bge.n	8007d7c <_printf_i+0xd0>
 8007d74:	232d      	movs	r3, #45	@ 0x2d
 8007d76:	426d      	negs	r5, r5
 8007d78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d7c:	4859      	ldr	r0, [pc, #356]	@ (8007ee4 <_printf_i+0x238>)
 8007d7e:	230a      	movs	r3, #10
 8007d80:	e011      	b.n	8007da6 <_printf_i+0xfa>
 8007d82:	6821      	ldr	r1, [r4, #0]
 8007d84:	6833      	ldr	r3, [r6, #0]
 8007d86:	0608      	lsls	r0, r1, #24
 8007d88:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d8c:	d402      	bmi.n	8007d94 <_printf_i+0xe8>
 8007d8e:	0649      	lsls	r1, r1, #25
 8007d90:	bf48      	it	mi
 8007d92:	b2ad      	uxthmi	r5, r5
 8007d94:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d96:	4853      	ldr	r0, [pc, #332]	@ (8007ee4 <_printf_i+0x238>)
 8007d98:	6033      	str	r3, [r6, #0]
 8007d9a:	bf14      	ite	ne
 8007d9c:	230a      	movne	r3, #10
 8007d9e:	2308      	moveq	r3, #8
 8007da0:	2100      	movs	r1, #0
 8007da2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007da6:	6866      	ldr	r6, [r4, #4]
 8007da8:	60a6      	str	r6, [r4, #8]
 8007daa:	2e00      	cmp	r6, #0
 8007dac:	bfa2      	ittt	ge
 8007dae:	6821      	ldrge	r1, [r4, #0]
 8007db0:	f021 0104 	bicge.w	r1, r1, #4
 8007db4:	6021      	strge	r1, [r4, #0]
 8007db6:	b90d      	cbnz	r5, 8007dbc <_printf_i+0x110>
 8007db8:	2e00      	cmp	r6, #0
 8007dba:	d04b      	beq.n	8007e54 <_printf_i+0x1a8>
 8007dbc:	4616      	mov	r6, r2
 8007dbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007dc2:	fb03 5711 	mls	r7, r3, r1, r5
 8007dc6:	5dc7      	ldrb	r7, [r0, r7]
 8007dc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007dcc:	462f      	mov	r7, r5
 8007dce:	42bb      	cmp	r3, r7
 8007dd0:	460d      	mov	r5, r1
 8007dd2:	d9f4      	bls.n	8007dbe <_printf_i+0x112>
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d10b      	bne.n	8007df0 <_printf_i+0x144>
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	07df      	lsls	r7, r3, #31
 8007ddc:	d508      	bpl.n	8007df0 <_printf_i+0x144>
 8007dde:	6923      	ldr	r3, [r4, #16]
 8007de0:	6861      	ldr	r1, [r4, #4]
 8007de2:	4299      	cmp	r1, r3
 8007de4:	bfde      	ittt	le
 8007de6:	2330      	movle	r3, #48	@ 0x30
 8007de8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007dec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007df0:	1b92      	subs	r2, r2, r6
 8007df2:	6122      	str	r2, [r4, #16]
 8007df4:	f8cd a000 	str.w	sl, [sp]
 8007df8:	464b      	mov	r3, r9
 8007dfa:	aa03      	add	r2, sp, #12
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	4640      	mov	r0, r8
 8007e00:	f7ff fee6 	bl	8007bd0 <_printf_common>
 8007e04:	3001      	adds	r0, #1
 8007e06:	d14a      	bne.n	8007e9e <_printf_i+0x1f2>
 8007e08:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0c:	b004      	add	sp, #16
 8007e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	f043 0320 	orr.w	r3, r3, #32
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	4833      	ldr	r0, [pc, #204]	@ (8007ee8 <_printf_i+0x23c>)
 8007e1c:	2778      	movs	r7, #120	@ 0x78
 8007e1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	6831      	ldr	r1, [r6, #0]
 8007e26:	061f      	lsls	r7, r3, #24
 8007e28:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e2c:	d402      	bmi.n	8007e34 <_printf_i+0x188>
 8007e2e:	065f      	lsls	r7, r3, #25
 8007e30:	bf48      	it	mi
 8007e32:	b2ad      	uxthmi	r5, r5
 8007e34:	6031      	str	r1, [r6, #0]
 8007e36:	07d9      	lsls	r1, r3, #31
 8007e38:	bf44      	itt	mi
 8007e3a:	f043 0320 	orrmi.w	r3, r3, #32
 8007e3e:	6023      	strmi	r3, [r4, #0]
 8007e40:	b11d      	cbz	r5, 8007e4a <_printf_i+0x19e>
 8007e42:	2310      	movs	r3, #16
 8007e44:	e7ac      	b.n	8007da0 <_printf_i+0xf4>
 8007e46:	4827      	ldr	r0, [pc, #156]	@ (8007ee4 <_printf_i+0x238>)
 8007e48:	e7e9      	b.n	8007e1e <_printf_i+0x172>
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	f023 0320 	bic.w	r3, r3, #32
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	e7f6      	b.n	8007e42 <_printf_i+0x196>
 8007e54:	4616      	mov	r6, r2
 8007e56:	e7bd      	b.n	8007dd4 <_printf_i+0x128>
 8007e58:	6833      	ldr	r3, [r6, #0]
 8007e5a:	6825      	ldr	r5, [r4, #0]
 8007e5c:	6961      	ldr	r1, [r4, #20]
 8007e5e:	1d18      	adds	r0, r3, #4
 8007e60:	6030      	str	r0, [r6, #0]
 8007e62:	062e      	lsls	r6, r5, #24
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	d501      	bpl.n	8007e6c <_printf_i+0x1c0>
 8007e68:	6019      	str	r1, [r3, #0]
 8007e6a:	e002      	b.n	8007e72 <_printf_i+0x1c6>
 8007e6c:	0668      	lsls	r0, r5, #25
 8007e6e:	d5fb      	bpl.n	8007e68 <_printf_i+0x1bc>
 8007e70:	8019      	strh	r1, [r3, #0]
 8007e72:	2300      	movs	r3, #0
 8007e74:	6123      	str	r3, [r4, #16]
 8007e76:	4616      	mov	r6, r2
 8007e78:	e7bc      	b.n	8007df4 <_printf_i+0x148>
 8007e7a:	6833      	ldr	r3, [r6, #0]
 8007e7c:	1d1a      	adds	r2, r3, #4
 8007e7e:	6032      	str	r2, [r6, #0]
 8007e80:	681e      	ldr	r6, [r3, #0]
 8007e82:	6862      	ldr	r2, [r4, #4]
 8007e84:	2100      	movs	r1, #0
 8007e86:	4630      	mov	r0, r6
 8007e88:	f7f8 f9c2 	bl	8000210 <memchr>
 8007e8c:	b108      	cbz	r0, 8007e92 <_printf_i+0x1e6>
 8007e8e:	1b80      	subs	r0, r0, r6
 8007e90:	6060      	str	r0, [r4, #4]
 8007e92:	6863      	ldr	r3, [r4, #4]
 8007e94:	6123      	str	r3, [r4, #16]
 8007e96:	2300      	movs	r3, #0
 8007e98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e9c:	e7aa      	b.n	8007df4 <_printf_i+0x148>
 8007e9e:	6923      	ldr	r3, [r4, #16]
 8007ea0:	4632      	mov	r2, r6
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	4640      	mov	r0, r8
 8007ea6:	47d0      	blx	sl
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	d0ad      	beq.n	8007e08 <_printf_i+0x15c>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	079b      	lsls	r3, r3, #30
 8007eb0:	d413      	bmi.n	8007eda <_printf_i+0x22e>
 8007eb2:	68e0      	ldr	r0, [r4, #12]
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	4298      	cmp	r0, r3
 8007eb8:	bfb8      	it	lt
 8007eba:	4618      	movlt	r0, r3
 8007ebc:	e7a6      	b.n	8007e0c <_printf_i+0x160>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	4632      	mov	r2, r6
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	4640      	mov	r0, r8
 8007ec6:	47d0      	blx	sl
 8007ec8:	3001      	adds	r0, #1
 8007eca:	d09d      	beq.n	8007e08 <_printf_i+0x15c>
 8007ecc:	3501      	adds	r5, #1
 8007ece:	68e3      	ldr	r3, [r4, #12]
 8007ed0:	9903      	ldr	r1, [sp, #12]
 8007ed2:	1a5b      	subs	r3, r3, r1
 8007ed4:	42ab      	cmp	r3, r5
 8007ed6:	dcf2      	bgt.n	8007ebe <_printf_i+0x212>
 8007ed8:	e7eb      	b.n	8007eb2 <_printf_i+0x206>
 8007eda:	2500      	movs	r5, #0
 8007edc:	f104 0619 	add.w	r6, r4, #25
 8007ee0:	e7f5      	b.n	8007ece <_printf_i+0x222>
 8007ee2:	bf00      	nop
 8007ee4:	08008025 	.word	0x08008025
 8007ee8:	08008036 	.word	0x08008036

08007eec <memmove>:
 8007eec:	4288      	cmp	r0, r1
 8007eee:	b510      	push	{r4, lr}
 8007ef0:	eb01 0402 	add.w	r4, r1, r2
 8007ef4:	d902      	bls.n	8007efc <memmove+0x10>
 8007ef6:	4284      	cmp	r4, r0
 8007ef8:	4623      	mov	r3, r4
 8007efa:	d807      	bhi.n	8007f0c <memmove+0x20>
 8007efc:	1e43      	subs	r3, r0, #1
 8007efe:	42a1      	cmp	r1, r4
 8007f00:	d008      	beq.n	8007f14 <memmove+0x28>
 8007f02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f0a:	e7f8      	b.n	8007efe <memmove+0x12>
 8007f0c:	4402      	add	r2, r0
 8007f0e:	4601      	mov	r1, r0
 8007f10:	428a      	cmp	r2, r1
 8007f12:	d100      	bne.n	8007f16 <memmove+0x2a>
 8007f14:	bd10      	pop	{r4, pc}
 8007f16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f1e:	e7f7      	b.n	8007f10 <memmove+0x24>

08007f20 <_sbrk_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4d06      	ldr	r5, [pc, #24]	@ (8007f3c <_sbrk_r+0x1c>)
 8007f24:	2300      	movs	r3, #0
 8007f26:	4604      	mov	r4, r0
 8007f28:	4608      	mov	r0, r1
 8007f2a:	602b      	str	r3, [r5, #0]
 8007f2c:	f7fa fc1a 	bl	8002764 <_sbrk>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d102      	bne.n	8007f3a <_sbrk_r+0x1a>
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	b103      	cbz	r3, 8007f3a <_sbrk_r+0x1a>
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	bd38      	pop	{r3, r4, r5, pc}
 8007f3c:	20000768 	.word	0x20000768

08007f40 <memcpy>:
 8007f40:	440a      	add	r2, r1
 8007f42:	4291      	cmp	r1, r2
 8007f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f48:	d100      	bne.n	8007f4c <memcpy+0xc>
 8007f4a:	4770      	bx	lr
 8007f4c:	b510      	push	{r4, lr}
 8007f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f56:	4291      	cmp	r1, r2
 8007f58:	d1f9      	bne.n	8007f4e <memcpy+0xe>
 8007f5a:	bd10      	pop	{r4, pc}

08007f5c <_realloc_r>:
 8007f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f60:	4680      	mov	r8, r0
 8007f62:	4615      	mov	r5, r2
 8007f64:	460c      	mov	r4, r1
 8007f66:	b921      	cbnz	r1, 8007f72 <_realloc_r+0x16>
 8007f68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	f7ff bc4b 	b.w	8007808 <_malloc_r>
 8007f72:	b92a      	cbnz	r2, 8007f80 <_realloc_r+0x24>
 8007f74:	f7ff fbdc 	bl	8007730 <_free_r>
 8007f78:	2400      	movs	r4, #0
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f80:	f000 f81a 	bl	8007fb8 <_malloc_usable_size_r>
 8007f84:	4285      	cmp	r5, r0
 8007f86:	4606      	mov	r6, r0
 8007f88:	d802      	bhi.n	8007f90 <_realloc_r+0x34>
 8007f8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007f8e:	d8f4      	bhi.n	8007f7a <_realloc_r+0x1e>
 8007f90:	4629      	mov	r1, r5
 8007f92:	4640      	mov	r0, r8
 8007f94:	f7ff fc38 	bl	8007808 <_malloc_r>
 8007f98:	4607      	mov	r7, r0
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d0ec      	beq.n	8007f78 <_realloc_r+0x1c>
 8007f9e:	42b5      	cmp	r5, r6
 8007fa0:	462a      	mov	r2, r5
 8007fa2:	4621      	mov	r1, r4
 8007fa4:	bf28      	it	cs
 8007fa6:	4632      	movcs	r2, r6
 8007fa8:	f7ff ffca 	bl	8007f40 <memcpy>
 8007fac:	4621      	mov	r1, r4
 8007fae:	4640      	mov	r0, r8
 8007fb0:	f7ff fbbe 	bl	8007730 <_free_r>
 8007fb4:	463c      	mov	r4, r7
 8007fb6:	e7e0      	b.n	8007f7a <_realloc_r+0x1e>

08007fb8 <_malloc_usable_size_r>:
 8007fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fbc:	1f18      	subs	r0, r3, #4
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	bfbc      	itt	lt
 8007fc2:	580b      	ldrlt	r3, [r1, r0]
 8007fc4:	18c0      	addlt	r0, r0, r3
 8007fc6:	4770      	bx	lr

08007fc8 <_init>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	bf00      	nop
 8007fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fce:	bc08      	pop	{r3}
 8007fd0:	469e      	mov	lr, r3
 8007fd2:	4770      	bx	lr

08007fd4 <_fini>:
 8007fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd6:	bf00      	nop
 8007fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fda:	bc08      	pop	{r3}
 8007fdc:	469e      	mov	lr, r3
 8007fde:	4770      	bx	lr
