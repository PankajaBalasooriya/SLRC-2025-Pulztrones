
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071ac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800737c  0800737c  0000837c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073ec  080073ec  0000905c  2**0
                  CONTENTS
  4 .ARM          00000008  080073ec  080073ec  000083ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073f4  080073f4  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073f4  080073f4  000083f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073f8  080073f8  000083f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080073fc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  2000005c  08007458  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  08007458  000096a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012170  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002863  00000000  00000000  0001b1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0001da60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d68  00000000  00000000  0001eb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023329  00000000  00000000  0001f8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000165d4  00000000  00000000  00042bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d45c5  00000000  00000000  000591cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d792  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e20  00000000  00000000  0012d7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  001325f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007364 	.word	0x08007364

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08007364 	.word	0x08007364

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b96a 	b.w	8000df8 <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	460c      	mov	r4, r1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d14e      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b48:	4694      	mov	ip, r2
 8000b4a:	458c      	cmp	ip, r1
 8000b4c:	4686      	mov	lr, r0
 8000b4e:	fab2 f282 	clz	r2, r2
 8000b52:	d962      	bls.n	8000c1a <__udivmoddi4+0xde>
 8000b54:	b14a      	cbz	r2, 8000b6a <__udivmoddi4+0x2e>
 8000b56:	f1c2 0320 	rsb	r3, r2, #32
 8000b5a:	4091      	lsls	r1, r2
 8000b5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b64:	4319      	orrs	r1, r3
 8000b66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6e:	fa1f f68c 	uxth.w	r6, ip
 8000b72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b82:	fb04 f106 	mul.w	r1, r4, r6
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b92:	f080 8112 	bcs.w	8000dba <__udivmoddi4+0x27e>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 810f 	bls.w	8000dba <__udivmoddi4+0x27e>
 8000b9c:	3c02      	subs	r4, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000baa:	fb07 1110 	mls	r1, r7, r0, r1
 8000bae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb2:	fb00 f606 	mul.w	r6, r0, r6
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	d90a      	bls.n	8000bd0 <__udivmoddi4+0x94>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc2:	f080 80fc 	bcs.w	8000dbe <__udivmoddi4+0x282>
 8000bc6:	429e      	cmp	r6, r3
 8000bc8:	f240 80f9 	bls.w	8000dbe <__udivmoddi4+0x282>
 8000bcc:	4463      	add	r3, ip
 8000bce:	3802      	subs	r0, #2
 8000bd0:	1b9b      	subs	r3, r3, r6
 8000bd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	b11d      	cbz	r5, 8000be2 <__udivmoddi4+0xa6>
 8000bda:	40d3      	lsrs	r3, r2
 8000bdc:	2200      	movs	r2, #0
 8000bde:	e9c5 3200 	strd	r3, r2, [r5]
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d905      	bls.n	8000bf6 <__udivmoddi4+0xba>
 8000bea:	b10d      	cbz	r5, 8000bf0 <__udivmoddi4+0xb4>
 8000bec:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	e7f5      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000bf6:	fab3 f183 	clz	r1, r3
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	d146      	bne.n	8000c8c <__udivmoddi4+0x150>
 8000bfe:	42a3      	cmp	r3, r4
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xcc>
 8000c02:	4290      	cmp	r0, r2
 8000c04:	f0c0 80f0 	bcc.w	8000de8 <__udivmoddi4+0x2ac>
 8000c08:	1a86      	subs	r6, r0, r2
 8000c0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	d0e6      	beq.n	8000be2 <__udivmoddi4+0xa6>
 8000c14:	e9c5 6300 	strd	r6, r3, [r5]
 8000c18:	e7e3      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	f040 8090 	bne.w	8000d40 <__udivmoddi4+0x204>
 8000c20:	eba1 040c 	sub.w	r4, r1, ip
 8000c24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c28:	fa1f f78c 	uxth.w	r7, ip
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb08 4416 	mls	r4, r8, r6, r4
 8000c3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c3e:	fb07 f006 	mul.w	r0, r7, r6
 8000c42:	4298      	cmp	r0, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x11c>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x11a>
 8000c50:	4298      	cmp	r0, r3
 8000c52:	f200 80cd 	bhi.w	8000df0 <__udivmoddi4+0x2b4>
 8000c56:	4626      	mov	r6, r4
 8000c58:	1a1c      	subs	r4, r3, r0
 8000c5a:	fa1f f38e 	uxth.w	r3, lr
 8000c5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c62:	fb08 4410 	mls	r4, r8, r0, r4
 8000c66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c6a:	fb00 f707 	mul.w	r7, r0, r7
 8000c6e:	429f      	cmp	r7, r3
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0x148>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x146>
 8000c7c:	429f      	cmp	r7, r3
 8000c7e:	f200 80b0 	bhi.w	8000de2 <__udivmoddi4+0x2a6>
 8000c82:	4620      	mov	r0, r4
 8000c84:	1bdb      	subs	r3, r3, r7
 8000c86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8a:	e7a5      	b.n	8000bd8 <__udivmoddi4+0x9c>
 8000c8c:	f1c1 0620 	rsb	r6, r1, #32
 8000c90:	408b      	lsls	r3, r1
 8000c92:	fa22 f706 	lsr.w	r7, r2, r6
 8000c96:	431f      	orrs	r7, r3
 8000c98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000ca0:	ea43 030c 	orr.w	r3, r3, ip
 8000ca4:	40f4      	lsrs	r4, r6
 8000ca6:	fa00 f801 	lsl.w	r8, r0, r1
 8000caa:	0c38      	lsrs	r0, r7, #16
 8000cac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cb0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cb4:	fa1f fc87 	uxth.w	ip, r7
 8000cb8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cc4:	45a1      	cmp	r9, r4
 8000cc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cca:	d90a      	bls.n	8000ce2 <__udivmoddi4+0x1a6>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cd2:	f080 8084 	bcs.w	8000dde <__udivmoddi4+0x2a2>
 8000cd6:	45a1      	cmp	r9, r4
 8000cd8:	f240 8081 	bls.w	8000dde <__udivmoddi4+0x2a2>
 8000cdc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ce0:	443c      	add	r4, r7
 8000ce2:	eba4 0409 	sub.w	r4, r4, r9
 8000ce6:	fa1f f983 	uxth.w	r9, r3
 8000cea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cee:	fb00 4413 	mls	r4, r0, r3, r4
 8000cf2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d907      	bls.n	8000d0e <__udivmoddi4+0x1d2>
 8000cfe:	193c      	adds	r4, r7, r4
 8000d00:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d04:	d267      	bcs.n	8000dd6 <__udivmoddi4+0x29a>
 8000d06:	45a4      	cmp	ip, r4
 8000d08:	d965      	bls.n	8000dd6 <__udivmoddi4+0x29a>
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	443c      	add	r4, r7
 8000d0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d12:	fba0 9302 	umull	r9, r3, r0, r2
 8000d16:	eba4 040c 	sub.w	r4, r4, ip
 8000d1a:	429c      	cmp	r4, r3
 8000d1c:	46ce      	mov	lr, r9
 8000d1e:	469c      	mov	ip, r3
 8000d20:	d351      	bcc.n	8000dc6 <__udivmoddi4+0x28a>
 8000d22:	d04e      	beq.n	8000dc2 <__udivmoddi4+0x286>
 8000d24:	b155      	cbz	r5, 8000d3c <__udivmoddi4+0x200>
 8000d26:	ebb8 030e 	subs.w	r3, r8, lr
 8000d2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d32:	40cb      	lsrs	r3, r1
 8000d34:	431e      	orrs	r6, r3
 8000d36:	40cc      	lsrs	r4, r1
 8000d38:	e9c5 6400 	strd	r6, r4, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e750      	b.n	8000be2 <__udivmoddi4+0xa6>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f103 	lsr.w	r1, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d50:	4094      	lsls	r4, r2
 8000d52:	430c      	orrs	r4, r1
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d5c:	fa1f f78c 	uxth.w	r7, ip
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3110 	mls	r1, r8, r0, r3
 8000d68:	0c23      	lsrs	r3, r4, #16
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f107 	mul.w	r1, r0, r7
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x24c>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d7e:	d22c      	bcs.n	8000dda <__udivmoddi4+0x29e>
 8000d80:	4299      	cmp	r1, r3
 8000d82:	d92a      	bls.n	8000dda <__udivmoddi4+0x29e>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d90:	fb08 3311 	mls	r3, r8, r1, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb01 f307 	mul.w	r3, r1, r7
 8000d9c:	42a3      	cmp	r3, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x276>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000da8:	d213      	bcs.n	8000dd2 <__udivmoddi4+0x296>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d911      	bls.n	8000dd2 <__udivmoddi4+0x296>
 8000dae:	3902      	subs	r1, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	1ae4      	subs	r4, r4, r3
 8000db4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db8:	e739      	b.n	8000c2e <__udivmoddi4+0xf2>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	e6f0      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e706      	b.n	8000bd0 <__udivmoddi4+0x94>
 8000dc2:	45c8      	cmp	r8, r9
 8000dc4:	d2ae      	bcs.n	8000d24 <__udivmoddi4+0x1e8>
 8000dc6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dce:	3801      	subs	r0, #1
 8000dd0:	e7a8      	b.n	8000d24 <__udivmoddi4+0x1e8>
 8000dd2:	4631      	mov	r1, r6
 8000dd4:	e7ed      	b.n	8000db2 <__udivmoddi4+0x276>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	e799      	b.n	8000d0e <__udivmoddi4+0x1d2>
 8000dda:	4630      	mov	r0, r6
 8000ddc:	e7d4      	b.n	8000d88 <__udivmoddi4+0x24c>
 8000dde:	46d6      	mov	lr, sl
 8000de0:	e77f      	b.n	8000ce2 <__udivmoddi4+0x1a6>
 8000de2:	4463      	add	r3, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	e74d      	b.n	8000c84 <__udivmoddi4+0x148>
 8000de8:	4606      	mov	r6, r0
 8000dea:	4623      	mov	r3, r4
 8000dec:	4608      	mov	r0, r1
 8000dee:	e70f      	b.n	8000c10 <__udivmoddi4+0xd4>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	e730      	b.n	8000c58 <__udivmoddi4+0x11c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 8000e00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e06:	b21b      	sxth	r3, r3
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 8000e18:	4b03      	ldr	r3, [pc, #12]	@ (8000e28 <getLeftEncoderCounts+0x14>)
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1c:	b21b      	sxth	r3, r3
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	40010000 	.word	0x40010000

08000e2c <resetEncoders>:

void resetEncoders() {
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 8000e30:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <resetEncoders+0x1c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 8000e36:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	40010000 	.word	0x40010000

08000e4c <HAL_UART_RxCpltCallback>:
    // Transmit the string over UART
    HAL_UART_Transmit(huart, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6)  // Check if it's UART6
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	@ (8000e78 <HAL_UART_RxCpltCallback+0x2c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d107      	bne.n	8000e6e <HAL_UART_RxCpltCallback+0x22>
    {
        data_received = 1;  // Set flag to indicate new data
 8000e5e:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <HAL_UART_RxCpltCallback+0x30>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Restart reception
 8000e64:	2232      	movs	r2, #50	@ 0x32
 8000e66:	4906      	ldr	r1, [pc, #24]	@ (8000e80 <HAL_UART_RxCpltCallback+0x34>)
 8000e68:	4806      	ldr	r0, [pc, #24]	@ (8000e84 <HAL_UART_RxCpltCallback+0x38>)
 8000e6a:	f004 fe8f 	bl	8005b8c <HAL_UART_Receive_IT>
    }
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40011400 	.word	0x40011400
 8000e7c:	2000030e 	.word	0x2000030e
 8000e80:	200002dc 	.word	0x200002dc
 8000e84:	20000234 	.word	0x20000234

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8e:	f001 f9bd 	bl	800220c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e92:	f000 f879 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e96:	f000 fadb 	bl	8001450 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e9a:	f000 fab9 	bl	8001410 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e9e:	f000 fa39 	bl	8001314 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ea2:	f000 f911 	bl	80010c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ea6:	f000 f967 	bl	8001178 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000eaa:	f000 f9b9 	bl	8001220 <MX_TIM4_Init>
  MX_I2C2_Init();
 8000eae:	f000 f8dd 	bl	800106c <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000eb2:	f000 fa59 	bl	8001368 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000eb6:	f000 fa81 	bl	80013bc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000eba:	213c      	movs	r1, #60	@ 0x3c
 8000ebc:	4825      	ldr	r0, [pc, #148]	@ (8000f54 <main+0xcc>)
 8000ebe:	f004 f891 	bl	8004fe4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000ec2:	213c      	movs	r1, #60	@ 0x3c
 8000ec4:	4824      	ldr	r0, [pc, #144]	@ (8000f58 <main+0xd0>)
 8000ec6:	f004 f88d 	bl	8004fe4 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4823      	ldr	r0, [pc, #140]	@ (8000f5c <main+0xd4>)
 8000ece:	f003 ff1b 	bl	8004d08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	4821      	ldr	r0, [pc, #132]	@ (8000f5c <main+0xd4>)
 8000ed6:	f003 ff17 	bl	8004d08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000eda:	2108      	movs	r1, #8
 8000edc:	481f      	ldr	r0, [pc, #124]	@ (8000f5c <main+0xd4>)
 8000ede:	f003 ff13 	bl	8004d08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000ee2:	210c      	movs	r1, #12
 8000ee4:	481d      	ldr	r0, [pc, #116]	@ (8000f5c <main+0xd4>)
 8000ee6:	f003 ff0f 	bl	8004d08 <HAL_TIM_PWM_Start>


  /*---------------------Servo init--------------------------------*/
  Servo_Init(50);  // 50Hz for standard servos
 8000eea:	2032      	movs	r0, #50	@ 0x32
 8000eec:	f000 fc4e 	bl	800178c <Servo_Init>

  //Examples
  // Register servos (do this once)
  int claw = Servo_Register(11, "claw", 0, 180);
 8000ef0:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8000f60 <main+0xd8>
 8000ef4:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8000f64 <main+0xdc>
 8000ef8:	491b      	ldr	r1, [pc, #108]	@ (8000f68 <main+0xe0>)
 8000efa:	200b      	movs	r0, #11
 8000efc:	f000 fc6a 	bl	80017d4 <Servo_Register>
 8000f00:	60f8      	str	r0, [r7, #12]
  int arm = Servo_Register(13, "arm", 0, 180);
 8000f02:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8000f60 <main+0xd8>
 8000f06:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8000f64 <main+0xdc>
 8000f0a:	4918      	ldr	r1, [pc, #96]	@ (8000f6c <main+0xe4>)
 8000f0c:	200d      	movs	r0, #13
 8000f0e:	f000 fc61 	bl	80017d4 <Servo_Register>
 8000f12:	60b8      	str	r0, [r7, #8]
  int base = Servo_Register(15, "base", 0, 180);
 8000f14:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8000f60 <main+0xd8>
 8000f18:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8000f64 <main+0xdc>
 8000f1c:	4914      	ldr	r1, [pc, #80]	@ (8000f70 <main+0xe8>)
 8000f1e:	200f      	movs	r0, #15
 8000f20:	f000 fc58 	bl	80017d4 <Servo_Register>
 8000f24:	6078      	str	r0, [r7, #4]

  // Later in your code, use the servos by ID
  Servo_SetAngle(claw, 35);   // Set claw to 45 degrees
 8000f26:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8000f74 <main+0xec>
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f000 fd46 	bl	80019bc <Servo_SetAngle>
  Servo_SetAngle(arm,100);    // Set arm to 90 degrees
 8000f30:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8000f78 <main+0xf0>
 8000f34:	68b8      	ldr	r0, [r7, #8]
 8000f36:	f000 fd41 	bl	80019bc <Servo_SetAngle>

  // Or use them by name
  Servo_SetAngleByName("base", 150);  // Set base to 120 degrees
 8000f3a:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8000f7c <main+0xf4>
 8000f3e:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <main+0xe8>)
 8000f40:	f000 fdb0 	bl	8001aa4 <Servo_SetAngleByName>
  // Reset all servos to center position
  //Servo_ResetAll();


  /*-------------------------------------------------------------------*/
  HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Enable UART interrupt
 8000f44:	2232      	movs	r2, #50	@ 0x32
 8000f46:	490e      	ldr	r1, [pc, #56]	@ (8000f80 <main+0xf8>)
 8000f48:	480e      	ldr	r0, [pc, #56]	@ (8000f84 <main+0xfc>)
 8000f4a:	f004 fe1f 	bl	8005b8c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f4e:	bf00      	nop
 8000f50:	e7fd      	b.n	8000f4e <main+0xc6>
 8000f52:	bf00      	nop
 8000f54:	200000cc 	.word	0x200000cc
 8000f58:	20000114 	.word	0x20000114
 8000f5c:	2000015c 	.word	0x2000015c
 8000f60:	43340000 	.word	0x43340000
 8000f64:	00000000 	.word	0x00000000
 8000f68:	0800737c 	.word	0x0800737c
 8000f6c:	08007384 	.word	0x08007384
 8000f70:	08007388 	.word	0x08007388
 8000f74:	420c0000 	.word	0x420c0000
 8000f78:	42c80000 	.word	0x42c80000
 8000f7c:	43160000 	.word	0x43160000
 8000f80:	200002dc 	.word	0x200002dc
 8000f84:	20000234 	.word	0x20000234

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b094      	sub	sp, #80	@ 0x50
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	2234      	movs	r2, #52	@ 0x34
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f005 fd50 	bl	8006a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4b2c      	ldr	r3, [pc, #176]	@ (8001064 <SystemClock_Config+0xdc>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	4a2b      	ldr	r2, [pc, #172]	@ (8001064 <SystemClock_Config+0xdc>)
 8000fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fbc:	4b29      	ldr	r3, [pc, #164]	@ (8001064 <SystemClock_Config+0xdc>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc8:	2300      	movs	r3, #0
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <SystemClock_Config+0xe0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a25      	ldr	r2, [pc, #148]	@ (8001068 <SystemClock_Config+0xe0>)
 8000fd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b23      	ldr	r3, [pc, #140]	@ (8001068 <SystemClock_Config+0xe0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fec:	2310      	movs	r3, #16
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ffc:	23b4      	movs	r3, #180	@ 0xb4
 8000ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001000:	2302      	movs	r3, #2
 8001002:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001004:	2302      	movs	r3, #2
 8001006:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001008:	2302      	movs	r3, #2
 800100a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4618      	mov	r0, r3
 8001012:	f003 fb8b 	bl	800472c <HAL_RCC_OscConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800101c:	f000 fa86 	bl	800152c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001020:	f002 ffea 	bl	8003ff8 <HAL_PWREx_EnableOverDrive>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800102a:	f000 fa7f 	bl	800152c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102e:	230f      	movs	r3, #15
 8001030:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001032:	2302      	movs	r3, #2
 8001034:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800103a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800103e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001040:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001044:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	2105      	movs	r1, #5
 800104c:	4618      	mov	r0, r3
 800104e:	f003 f823 	bl	8004098 <HAL_RCC_ClockConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001058:	f000 fa68 	bl	800152c <Error_Handler>
  }
}
 800105c:	bf00      	nop
 800105e:	3750      	adds	r7, #80	@ 0x50
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000

0800106c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <MX_I2C2_Init+0x50>)
 8001072:	4a13      	ldr	r2, [pc, #76]	@ (80010c0 <MX_I2C2_Init+0x54>)
 8001074:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <MX_I2C2_Init+0x50>)
 8001078:	4a12      	ldr	r2, [pc, #72]	@ (80010c4 <MX_I2C2_Init+0x58>)
 800107a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800107c:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <MX_I2C2_Init+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001082:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <MX_I2C2_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001088:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <MX_I2C2_Init+0x50>)
 800108a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800108e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001090:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <MX_I2C2_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001096:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <MX_I2C2_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800109c:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <MX_I2C2_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <MX_I2C2_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010a8:	4804      	ldr	r0, [pc, #16]	@ (80010bc <MX_I2C2_Init+0x50>)
 80010aa:	f001 ff81 	bl	8002fb0 <HAL_I2C_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010b4:	f000 fa3a 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000078 	.word	0x20000078
 80010c0:	40005800 	.word	0x40005800
 80010c4:	000186a0 	.word	0x000186a0

080010c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	@ 0x30
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010ce:	f107 030c 	add.w	r3, r7, #12
 80010d2:	2224      	movs	r2, #36	@ 0x24
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f005 fcb0 	bl	8006a3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010e4:	4b22      	ldr	r3, [pc, #136]	@ (8001170 <MX_TIM1_Init+0xa8>)
 80010e6:	4a23      	ldr	r2, [pc, #140]	@ (8001174 <MX_TIM1_Init+0xac>)
 80010e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010ea:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <MX_TIM1_Init+0xa8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001170 <MX_TIM1_Init+0xa8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001170 <MX_TIM1_Init+0xa8>)
 80010f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001170 <MX_TIM1_Init+0xa8>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001104:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <MX_TIM1_Init+0xa8>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110a:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <MX_TIM1_Init+0xa8>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001110:	2303      	movs	r3, #3
 8001112:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001118:	2301      	movs	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001128:	2301      	movs	r3, #1
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	@ (8001170 <MX_TIM1_Init+0xa8>)
 800113c:	f003 feac 	bl	8004e98 <HAL_TIM_Encoder_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001146:	f000 f9f1 	bl	800152c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <MX_TIM1_Init+0xa8>)
 8001158:	f004 fc38 	bl	80059cc <HAL_TIMEx_MasterConfigSynchronization>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001162:	f000 f9e3 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	3730      	adds	r7, #48	@ 0x30
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200000cc 	.word	0x200000cc
 8001174:	40010000 	.word	0x40010000

08001178 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	@ 0x30
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	2224      	movs	r2, #36	@ 0x24
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f005 fc58 	bl	8006a3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001194:	4b21      	ldr	r3, [pc, #132]	@ (800121c <MX_TIM2_Init+0xa4>)
 8001196:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800119a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800119c:	4b1f      	ldr	r3, [pc, #124]	@ (800121c <MX_TIM2_Init+0xa4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a2:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <MX_TIM2_Init+0xa4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011a8:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <MX_TIM2_Init+0xa4>)
 80011aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <MX_TIM2_Init+0xa4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b6:	4b19      	ldr	r3, [pc, #100]	@ (800121c <MX_TIM2_Init+0xa4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011bc:	2303      	movs	r3, #3
 80011be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011c4:	2301      	movs	r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011d4:	2301      	movs	r3, #1
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	4619      	mov	r1, r3
 80011e6:	480d      	ldr	r0, [pc, #52]	@ (800121c <MX_TIM2_Init+0xa4>)
 80011e8:	f003 fe56 	bl	8004e98 <HAL_TIM_Encoder_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80011f2:	f000 f99b 	bl	800152c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4619      	mov	r1, r3
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <MX_TIM2_Init+0xa4>)
 8001204:	f004 fbe2 	bl	80059cc <HAL_TIMEx_MasterConfigSynchronization>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800120e:	f000 f98d 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	3730      	adds	r7, #48	@ 0x30
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000114 	.word	0x20000114

08001220 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	@ 0x28
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
 800123e:	615a      	str	r2, [r3, #20]
 8001240:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001242:	4b32      	ldr	r3, [pc, #200]	@ (800130c <MX_TIM4_Init+0xec>)
 8001244:	4a32      	ldr	r2, [pc, #200]	@ (8001310 <MX_TIM4_Init+0xf0>)
 8001246:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001248:	4b30      	ldr	r3, [pc, #192]	@ (800130c <MX_TIM4_Init+0xec>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b2f      	ldr	r3, [pc, #188]	@ (800130c <MX_TIM4_Init+0xec>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7199;
 8001254:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <MX_TIM4_Init+0xec>)
 8001256:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800125a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b2b      	ldr	r3, [pc, #172]	@ (800130c <MX_TIM4_Init+0xec>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <MX_TIM4_Init+0xec>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001268:	4828      	ldr	r0, [pc, #160]	@ (800130c <MX_TIM4_Init+0xec>)
 800126a:	f003 fcfd 	bl	8004c68 <HAL_TIM_PWM_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001274:	f000 f95a 	bl	800152c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	4619      	mov	r1, r3
 8001286:	4821      	ldr	r0, [pc, #132]	@ (800130c <MX_TIM4_Init+0xec>)
 8001288:	f004 fba0 	bl	80059cc <HAL_TIMEx_MasterConfigSynchronization>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001292:	f000 f94b 	bl	800152c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001296:	2360      	movs	r3, #96	@ 0x60
 8001298:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	4619      	mov	r1, r3
 80012ac:	4817      	ldr	r0, [pc, #92]	@ (800130c <MX_TIM4_Init+0xec>)
 80012ae:	f004 f817 	bl	80052e0 <HAL_TIM_PWM_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80012b8:	f000 f938 	bl	800152c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2204      	movs	r2, #4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4812      	ldr	r0, [pc, #72]	@ (800130c <MX_TIM4_Init+0xec>)
 80012c4:	f004 f80c 	bl	80052e0 <HAL_TIM_PWM_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80012ce:	f000 f92d 	bl	800152c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2208      	movs	r2, #8
 80012d6:	4619      	mov	r1, r3
 80012d8:	480c      	ldr	r0, [pc, #48]	@ (800130c <MX_TIM4_Init+0xec>)
 80012da:	f004 f801 	bl	80052e0 <HAL_TIM_PWM_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80012e4:	f000 f922 	bl	800152c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	220c      	movs	r2, #12
 80012ec:	4619      	mov	r1, r3
 80012ee:	4807      	ldr	r0, [pc, #28]	@ (800130c <MX_TIM4_Init+0xec>)
 80012f0:	f003 fff6 	bl	80052e0 <HAL_TIM_PWM_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80012fa:	f000 f917 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012fe:	4803      	ldr	r0, [pc, #12]	@ (800130c <MX_TIM4_Init+0xec>)
 8001300:	f000 fd62 	bl	8001dc8 <HAL_TIM_MspPostInit>

}
 8001304:	bf00      	nop
 8001306:	3728      	adds	r7, #40	@ 0x28
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2000015c 	.word	0x2000015c
 8001310:	40000800 	.word	0x40000800

08001314 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001318:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 800131a:	4a12      	ldr	r2, [pc, #72]	@ (8001364 <MX_USART2_UART_Init+0x50>)
 800131c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800131e:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	@ (8001360 <MX_USART2_UART_Init+0x4c>)
 800134c:	f004 fbce 	bl	8005aec <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001356:	f000 f8e9 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200001a4 	.word	0x200001a4
 8001364:	40004400 	.word	0x40004400

08001368 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_USART3_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <MX_USART3_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <MX_USART3_UART_Init+0x4c>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <MX_USART3_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <MX_USART3_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <MX_USART3_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <MX_USART3_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <MX_USART3_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <MX_USART3_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_USART3_UART_Init+0x4c>)
 80013a0:	f004 fba4 	bl	8005aec <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f000 f8bf 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200001ec 	.word	0x200001ec
 80013b8:	40004800 	.word	0x40004800

080013bc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	@ (800140c <MX_USART6_UART_Init+0x50>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	@ (8001408 <MX_USART6_UART_Init+0x4c>)
 80013f4:	f004 fb7a 	bl	8005aec <HAL_UART_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80013fe:	f000 f895 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000234 	.word	0x20000234
 800140c:	40011400 	.word	0x40011400

08001410 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <MX_DMA_Init+0x3c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a0b      	ldr	r2, [pc, #44]	@ (800144c <MX_DMA_Init+0x3c>)
 8001420:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <MX_DMA_Init+0x3c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2039      	movs	r0, #57	@ 0x39
 8001438:	f001 f859 	bl	80024ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800143c:	2039      	movs	r0, #57	@ 0x39
 800143e:	f001 f872 	bl	8002526 <HAL_NVIC_EnableIRQ>

}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	@ 0x28
 8001454:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b2d      	ldr	r3, [pc, #180]	@ (8001520 <MX_GPIO_Init+0xd0>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a2c      	ldr	r2, [pc, #176]	@ (8001520 <MX_GPIO_Init+0xd0>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b2a      	ldr	r3, [pc, #168]	@ (8001520 <MX_GPIO_Init+0xd0>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <MX_GPIO_Init+0xd0>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a25      	ldr	r2, [pc, #148]	@ (8001520 <MX_GPIO_Init+0xd0>)
 800148c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <MX_GPIO_Init+0xd0>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <MX_GPIO_Init+0xd0>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001520 <MX_GPIO_Init+0xd0>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001520 <MX_GPIO_Init+0xd0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <MX_GPIO_Init+0xd0>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <MX_GPIO_Init+0xd0>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <MX_GPIO_Init+0xd0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2120      	movs	r1, #32
 80014da:	4812      	ldr	r0, [pc, #72]	@ (8001524 <MX_GPIO_Init+0xd4>)
 80014dc:	f001 fd4e 	bl	8002f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	480c      	ldr	r0, [pc, #48]	@ (8001528 <MX_GPIO_Init+0xd8>)
 80014f8:	f001 fbac 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014fc:	2320      	movs	r3, #32
 80014fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4804      	ldr	r0, [pc, #16]	@ (8001524 <MX_GPIO_Init+0xd4>)
 8001514:	f001 fb9e 	bl	8002c54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001518:	bf00      	nop
 800151a:	3728      	adds	r7, #40	@ 0x28
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40023800 	.word	0x40023800
 8001524:	40020000 	.word	0x40020000
 8001528:	40020800 	.word	0x40020800

0800152c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001530:	b672      	cpsid	i
}
 8001532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <Error_Handler+0x8>

08001538 <PCA9685_SetBit>:
  * @param  Bit: Bit position to modify (0-7)
  * @param  Value: Value to set (0 or 1)
  * @retval None
  */
void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af04      	add	r7, sp, #16
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
 8001542:	460b      	mov	r3, r1
 8001544:	71bb      	strb	r3, [r7, #6]
 8001546:	4613      	mov	r3, r2
 8001548:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	b29a      	uxth	r2, r3
 800154e:	230a      	movs	r3, #10
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	2301      	movs	r3, #1
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	f107 030f 	add.w	r3, r7, #15
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2301      	movs	r3, #1
 800155e:	2180      	movs	r1, #128	@ 0x80
 8001560:	4819      	ldr	r0, [pc, #100]	@ (80015c8 <PCA9685_SetBit+0x90>)
 8001562:	f001 ff63 	bl	800342c <HAL_I2C_Mem_Read>
  if (Value == 0)
 8001566:	797b      	ldrb	r3, [r7, #5]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10d      	bne.n	8001588 <PCA9685_SetBit+0x50>
    readValue &= ~(1 << Bit);
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	2201      	movs	r2, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	b25b      	sxtb	r3, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	b25a      	sxtb	r2, r3
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	b25b      	sxtb	r3, r3
 800157e:	4013      	ands	r3, r2
 8001580:	b25b      	sxtb	r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	73fb      	strb	r3, [r7, #15]
 8001586:	e00a      	b.n	800159e <PCA9685_SetBit+0x66>
  else
    readValue |= (1 << Bit);
 8001588:	79bb      	ldrb	r3, [r7, #6]
 800158a:	2201      	movs	r2, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	b25a      	sxtb	r2, r3
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	b25b      	sxtb	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	b25b      	sxtb	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	230a      	movs	r3, #10
 80015a4:	9302      	str	r3, [sp, #8]
 80015a6:	2301      	movs	r3, #1
 80015a8:	9301      	str	r3, [sp, #4]
 80015aa:	f107 030f 	add.w	r3, r7, #15
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2301      	movs	r3, #1
 80015b2:	2180      	movs	r1, #128	@ 0x80
 80015b4:	4804      	ldr	r0, [pc, #16]	@ (80015c8 <PCA9685_SetBit+0x90>)
 80015b6:	f001 fe3f 	bl	8003238 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f000 fe98 	bl	80022f0 <HAL_Delay>
}
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000078 	.word	0x20000078

080015cc <PCA9685_SetPWMFrequency>:
  * @brief  Set PWM frequency (24Hz to 1526Hz)
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af04      	add	r7, sp, #16
 80015d2:	4603      	mov	r3, r0
 80015d4:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;

  // Ensure frequency is within valid range
  if(frequency >= 1526)
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 80015dc:	4293      	cmp	r3, r2
 80015de:	d902      	bls.n	80015e6 <PCA9685_SetPWMFrequency+0x1a>
    prescale = 0x03;  // Maximum frequency (1526Hz)
 80015e0:	2303      	movs	r3, #3
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e00c      	b.n	8001600 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24)
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	2b18      	cmp	r3, #24
 80015ea:	d802      	bhi.n	80015f2 <PCA9685_SetPWMFrequency+0x26>
    prescale = 0xFF;  // Minimum frequency (24Hz)
 80015ec:	23ff      	movs	r3, #255	@ 0xff
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	e006      	b.n	8001600 <PCA9685_SetPWMFrequency+0x34>
  else
    // Calculate prescale value based on 25MHz internal oscillator
    prescale = (uint8_t)(25000000 / (4096 * frequency));
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	031b      	lsls	r3, r3, #12
 80015f6:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <PCA9685_SetPWMFrequency+0x74>)
 80015f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	73fb      	strb	r3, [r7, #15]

  // Enter sleep mode before changing the frequency
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8001600:	2201      	movs	r2, #1
 8001602:	2104      	movs	r1, #4
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff ff97 	bl	8001538 <PCA9685_SetBit>

  // Set the prescale value
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 800160a:	230a      	movs	r3, #10
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	2301      	movs	r3, #1
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	f107 030f 	add.w	r3, r7, #15
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2301      	movs	r3, #1
 800161a:	22fe      	movs	r2, #254	@ 0xfe
 800161c:	2180      	movs	r1, #128	@ 0x80
 800161e:	4809      	ldr	r0, [pc, #36]	@ (8001644 <PCA9685_SetPWMFrequency+0x78>)
 8001620:	f001 fe0a 	bl	8003238 <HAL_I2C_Mem_Write>

  // Exit sleep mode
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2104      	movs	r1, #4
 8001628:	2000      	movs	r0, #0
 800162a:	f7ff ff85 	bl	8001538 <PCA9685_SetBit>

  // Restart all PWM channels
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 800162e:	2201      	movs	r2, #1
 8001630:	2107      	movs	r1, #7
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff ff80 	bl	8001538 <PCA9685_SetBit>
}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	017d7840 	.word	0x017d7840
 8001644:	20000078 	.word	0x20000078

08001648 <PCA9685_Init>:
  * @brief  Initialize PCA9685 with specified frequency
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_Init(uint16_t frequency)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
  // Set desired PWM frequency (usually 50Hz for standard servos)
  PCA9685_SetPWMFrequency(frequency);
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ffb9 	bl	80015cc <PCA9685_SetPWMFrequency>

  // Enable Auto-Increment for efficient register writing
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 800165a:	2201      	movs	r2, #1
 800165c:	2105      	movs	r1, #5
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff ff6a 	bl	8001538 <PCA9685_SetBit>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <PCA9685_SetPWM>:
  * @param  OnTime: Value between 0-4095 for ON time
  * @param  OffTime: Value between 0-4095 for OFF time
  * @retval None
  */
void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af04      	add	r7, sp, #16
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
 8001676:	460b      	mov	r3, r1
 8001678:	80bb      	strh	r3, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];

  // Calculate register address for the specified channel
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	b2db      	uxtb	r3, r3
 8001684:	3306      	adds	r3, #6
 8001686:	73fb      	strb	r3, [r7, #15]

  // Prepare data bytes for ON and OFF times
  pwm[0] = OnTime & 0xFF;         // ON Low byte
 8001688:	88bb      	ldrh	r3, [r7, #4]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	723b      	strb	r3, [r7, #8]
  pwm[1] = (OnTime >> 8) & 0xFF;  // ON High byte
 800168e:	88bb      	ldrh	r3, [r7, #4]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	b29b      	uxth	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;        // OFF Low byte
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	72bb      	strb	r3, [r7, #10]
  pwm[3] = (OffTime >> 8) & 0xFF; // OFF High byte
 800169e:	887b      	ldrh	r3, [r7, #2]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	72fb      	strb	r3, [r7, #11]

  // Write all 4 bytes in a single I2C transaction
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	230a      	movs	r3, #10
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	2304      	movs	r3, #4
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	f107 0308 	add.w	r3, r7, #8
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2301      	movs	r3, #1
 80016bc:	2180      	movs	r1, #128	@ 0x80
 80016be:	4803      	ldr	r0, [pc, #12]	@ (80016cc <PCA9685_SetPWM+0x60>)
 80016c0:	f001 fdba 	bl	8003238 <HAL_I2C_Mem_Write>
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000078 	.word	0x20000078

080016d0 <PCA9685_SetServoAngle>:
  * @param  Channel: Channel number (0-15)
  * @param  Angle: Desired angle (0-180 degrees)
  * @retval None
  */
void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	ed87 0a00 	vstr	s0, [r7]
 80016dc:	71fb      	strb	r3, [r7, #7]
  float pwmValue;

  // Limit angle to 0-180 range
  if (Angle < 0) Angle = 0;
 80016de:	edd7 7a00 	vldr	s15, [r7]
 80016e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	d502      	bpl.n	80016f2 <PCA9685_SetServoAngle+0x22>
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
  if (Angle > 180) Angle = 180;
 80016f2:	edd7 7a00 	vldr	s15, [r7]
 80016f6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001780 <PCA9685_SetServoAngle+0xb0>
 80016fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	dd01      	ble.n	8001708 <PCA9685_SetServoAngle+0x38>
 8001704:	4b1f      	ldr	r3, [pc, #124]	@ (8001784 <PCA9685_SetServoAngle+0xb4>)
 8001706:	603b      	str	r3, [r7, #0]

  // Convert angle to PWM value
  // At 50Hz: 0° = 102.4 value (0.5ms), 180° = 511.9 value (2.5ms)
  pwmValue = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8001708:	6838      	ldr	r0, [r7, #0]
 800170a:	f7fe ff45 	bl	8000598 <__aeabi_f2d>
 800170e:	a318      	add	r3, pc, #96	@ (adr r3, 8001770 <PCA9685_SetServoAngle+0xa0>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7fe ff98 	bl	8000648 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <PCA9685_SetServoAngle+0xb8>)
 8001726:	f7ff f8b9 	bl	800089c <__aeabi_ddiv>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	a311      	add	r3, pc, #68	@ (adr r3, 8001778 <PCA9685_SetServoAngle+0xa8>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	f7fe fdd0 	bl	80002dc <__adddf3>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff f992 	bl	8000a6c <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	60fb      	str	r3, [r7, #12]

  // Set PWM with calculated value
  PCA9685_SetPWM(Channel, 0, (uint16_t)pwmValue);
 800174c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001754:	ee17 3a90 	vmov	r3, s15
 8001758:	b29a      	uxth	r2, r3
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff84 	bl	800166c <PCA9685_SetPWM>
}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	f3af 8000 	nop.w
 8001770:	00000000 	.word	0x00000000
 8001774:	40799800 	.word	0x40799800
 8001778:	9999999a 	.word	0x9999999a
 800177c:	40599999 	.word	0x40599999
 8001780:	43340000 	.word	0x43340000
 8001784:	43340000 	.word	0x43340000
 8001788:	40668000 	.word	0x40668000

0800178c <Servo_Init>:
  * @brief  Initialize the servo control system
  * @param  frequency: PWM frequency for the servos (typically 50Hz)
  * @retval None
  */
void Servo_Init(uint16_t frequency)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	80fb      	strh	r3, [r7, #6]
    if (isInitialized)
 8001796:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <Servo_Init+0x3c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d110      	bne.n	80017c0 <Servo_Init+0x34>
        return;

    // Initialize PCA9685 with the specified frequency
    PCA9685_Init(frequency);
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff51 	bl	8001648 <PCA9685_Init>

    // Clear the servo array
    memset(servos, 0, sizeof(servos));
 80017a6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80017aa:	2100      	movs	r1, #0
 80017ac:	4807      	ldr	r0, [pc, #28]	@ (80017cc <Servo_Init+0x40>)
 80017ae:	f005 f945 	bl	8006a3c <memset>
    servoCount = 0;
 80017b2:	4b07      	ldr	r3, [pc, #28]	@ (80017d0 <Servo_Init+0x44>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
    isInitialized = 1;
 80017b8:	4b03      	ldr	r3, [pc, #12]	@ (80017c8 <Servo_Init+0x3c>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	e000      	b.n	80017c2 <Servo_Init+0x36>
        return;
 80017c0:	bf00      	nop
}
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000551 	.word	0x20000551
 80017cc:	20000310 	.word	0x20000310
 80017d0:	20000550 	.word	0x20000550

080017d4 <Servo_Register>:
  * @param  minAngle: Minimum angle limit (0-180)
  * @param  maxAngle: Maximum angle limit (0-180)
  * @retval int: Servo ID (0 to MAX_SERVOS-1) or -1 if error
  */
int Servo_Register(uint8_t channel, const char* name, float minAngle, float maxAngle)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	ed87 0a01 	vstr	s0, [r7, #4]
 80017e2:	edc7 0a00 	vstr	s1, [r7]
 80017e6:	73fb      	strb	r3, [r7, #15]
    // Check if initialized
    if (!isInitialized)
 80017e8:	4b6e      	ldr	r3, [pc, #440]	@ (80019a4 <Servo_Register+0x1d0>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <Servo_Register+0x22>
        return -1;
 80017f0:	f04f 33ff 	mov.w	r3, #4294967295
 80017f4:	e0d1      	b.n	800199a <Servo_Register+0x1c6>

    // Check if we've reached maximum servo count
    if (servoCount >= MAX_SERVOS)
 80017f6:	4b6c      	ldr	r3, [pc, #432]	@ (80019a8 <Servo_Register+0x1d4>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b0f      	cmp	r3, #15
 80017fc:	d902      	bls.n	8001804 <Servo_Register+0x30>
        return -1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e0ca      	b.n	800199a <Servo_Register+0x1c6>

    // Check if channel is valid
    if (channel >= MAX_SERVOS)
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	2b0f      	cmp	r3, #15
 8001808:	d902      	bls.n	8001810 <Servo_Register+0x3c>
        return -1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	e0c4      	b.n	800199a <Servo_Register+0x1c6>

    // Check if the channel is already in use
    for (int i = 0; i < servoCount; i++) {
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	e01b      	b.n	800184e <Servo_Register+0x7a>
        if (servos[i].initialized && servos[i].channel == channel)
 8001816:	4965      	ldr	r1, [pc, #404]	@ (80019ac <Servo_Register+0x1d8>)
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	4613      	mov	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	3310      	adds	r3, #16
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00d      	beq.n	8001848 <Servo_Register+0x74>
 800182c:	495f      	ldr	r1, [pc, #380]	@ (80019ac <Servo_Register+0x1d8>)
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	429a      	cmp	r2, r3
 8001840:	d102      	bne.n	8001848 <Servo_Register+0x74>
            return -1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	e0a8      	b.n	800199a <Servo_Register+0x1c6>
    for (int i = 0; i < servoCount; i++) {
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	3301      	adds	r3, #1
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	4b56      	ldr	r3, [pc, #344]	@ (80019a8 <Servo_Register+0x1d4>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	4293      	cmp	r3, r2
 8001858:	dbdd      	blt.n	8001816 <Servo_Register+0x42>
    }

    // Validate angle limits
    if (minAngle < SERVO_ANGLE_MIN) minAngle = SERVO_ANGLE_MIN;
 800185a:	edd7 7a01 	vldr	s15, [r7, #4]
 800185e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001866:	d502      	bpl.n	800186e <Servo_Register+0x9a>
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
    if (maxAngle > SERVO_ANGLE_MAX) maxAngle = SERVO_ANGLE_MAX;
 800186e:	edd7 7a00 	vldr	s15, [r7]
 8001872:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80019b0 <Servo_Register+0x1dc>
 8001876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	dd01      	ble.n	8001884 <Servo_Register+0xb0>
 8001880:	4b4c      	ldr	r3, [pc, #304]	@ (80019b4 <Servo_Register+0x1e0>)
 8001882:	603b      	str	r3, [r7, #0]
    if (minAngle >= maxAngle) return -1;
 8001884:	ed97 7a01 	vldr	s14, [r7, #4]
 8001888:	edd7 7a00 	vldr	s15, [r7]
 800188c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	db02      	blt.n	800189c <Servo_Register+0xc8>
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e07e      	b.n	800199a <Servo_Register+0x1c6>

    // Register the servo
    int servoId = servoCount;
 800189c:	4b42      	ldr	r3, [pc, #264]	@ (80019a8 <Servo_Register+0x1d4>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	613b      	str	r3, [r7, #16]
    servos[servoId].channel = channel;
 80018a2:	4942      	ldr	r1, [pc, #264]	@ (80019ac <Servo_Register+0x1d8>)
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4613      	mov	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	7bfa      	ldrb	r2, [r7, #15]
 80018b2:	701a      	strb	r2, [r3, #0]
    servos[servoId].minAngle = minAngle;
 80018b4:	493d      	ldr	r1, [pc, #244]	@ (80019ac <Servo_Register+0x1d8>)
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4613      	mov	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	3304      	adds	r3, #4
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	601a      	str	r2, [r3, #0]
    servos[servoId].maxAngle = maxAngle;
 80018c8:	4938      	ldr	r1, [pc, #224]	@ (80019ac <Servo_Register+0x1d8>)
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	3308      	adds	r3, #8
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	601a      	str	r2, [r3, #0]
    servos[servoId].currentAngle = (minAngle + maxAngle) / 2.0f;  // Center position
 80018dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80018e0:	edd7 7a00 	vldr	s15, [r7]
 80018e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018e8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80018ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f0:	492e      	ldr	r1, [pc, #184]	@ (80019ac <Servo_Register+0x1d8>)
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4613      	mov	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	330c      	adds	r3, #12
 8001900:	edc3 7a00 	vstr	s15, [r3]
    servos[servoId].initialized = 1;
 8001904:	4929      	ldr	r1, [pc, #164]	@ (80019ac <Servo_Register+0x1d8>)
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4613      	mov	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	3310      	adds	r3, #16
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]

    // Set optional name
    if (name != NULL) {
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d018      	beq.n	8001950 <Servo_Register+0x17c>
        strncpy(servos[servoId].name, name, sizeof(servos[servoId].name) - 1);
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4613      	mov	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	3310      	adds	r3, #16
 800192a:	4a20      	ldr	r2, [pc, #128]	@ (80019ac <Servo_Register+0x1d8>)
 800192c:	4413      	add	r3, r2
 800192e:	3301      	adds	r3, #1
 8001930:	220f      	movs	r2, #15
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	4618      	mov	r0, r3
 8001936:	f005 f889 	bl	8006a4c <strncpy>
        servos[servoId].name[sizeof(servos[servoId].name) - 1] = '\0';  // Ensure null termination
 800193a:	491c      	ldr	r1, [pc, #112]	@ (80019ac <Servo_Register+0x1d8>)
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4613      	mov	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	3320      	adds	r3, #32
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	e00d      	b.n	800196c <Servo_Register+0x198>
    } else {
        snprintf(servos[servoId].name, sizeof(servos[servoId].name), "Servo%d", servoId);
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4613      	mov	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	3310      	adds	r3, #16
 800195c:	4a13      	ldr	r2, [pc, #76]	@ (80019ac <Servo_Register+0x1d8>)
 800195e:	4413      	add	r3, r2
 8001960:	1c58      	adds	r0, r3, #1
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4a14      	ldr	r2, [pc, #80]	@ (80019b8 <Servo_Register+0x1e4>)
 8001966:	2110      	movs	r1, #16
 8001968:	f005 f834 	bl	80069d4 <sniprintf>
    }

    // Update servo count
    servoCount++;
 800196c:	4b0e      	ldr	r3, [pc, #56]	@ (80019a8 <Servo_Register+0x1d4>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	b2da      	uxtb	r2, r3
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <Servo_Register+0x1d4>)
 8001976:	701a      	strb	r2, [r3, #0]

    // Move servo to center position
    PCA9685_SetServoAngle(channel, servos[servoId].currentAngle);
 8001978:	490c      	ldr	r1, [pc, #48]	@ (80019ac <Servo_Register+0x1d8>)
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	330c      	adds	r3, #12
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	eeb0 0a67 	vmov.f32	s0, s15
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fe9c 	bl	80016d0 <PCA9685_SetServoAngle>

    return servoId;
 8001998:	693b      	ldr	r3, [r7, #16]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000551 	.word	0x20000551
 80019a8:	20000550 	.word	0x20000550
 80019ac:	20000310 	.word	0x20000310
 80019b0:	43340000 	.word	0x43340000
 80019b4:	43340000 	.word	0x43340000
 80019b8:	08007390 	.word	0x08007390

080019bc <Servo_SetAngle>:
  * @param  servoId: ID returned from Servo_Register
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngle(int servoId, float angle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	ed87 0a00 	vstr	s0, [r7]
    // Check if servo ID is valid
    if (servoId < 0 || servoId >= servoCount || !servos[servoId].initialized)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db10      	blt.n	80019f0 <Servo_SetAngle+0x34>
 80019ce:	4b33      	ldr	r3, [pc, #204]	@ (8001a9c <Servo_SetAngle+0xe0>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4293      	cmp	r3, r2
 80019d8:	da0a      	bge.n	80019f0 <Servo_SetAngle+0x34>
 80019da:	4931      	ldr	r1, [pc, #196]	@ (8001aa0 <Servo_SetAngle+0xe4>)
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	3310      	adds	r3, #16
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d102      	bne.n	80019f6 <Servo_SetAngle+0x3a>
        return -1;
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295
 80019f4:	e04d      	b.n	8001a92 <Servo_SetAngle+0xd6>

    // Clamp angle to servo limits
    if (angle < servos[servoId].minAngle)
 80019f6:	492a      	ldr	r1, [pc, #168]	@ (8001aa0 <Servo_SetAngle+0xe4>)
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4413      	add	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	440b      	add	r3, r1
 8001a04:	3304      	adds	r3, #4
 8001a06:	edd3 7a00 	vldr	s15, [r3]
 8001a0a:	ed97 7a00 	vldr	s14, [r7]
 8001a0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a16:	d509      	bpl.n	8001a2c <Servo_SetAngle+0x70>
        angle = servos[servoId].minAngle;
 8001a18:	4921      	ldr	r1, [pc, #132]	@ (8001aa0 <Servo_SetAngle+0xe4>)
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	3304      	adds	r3, #4
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	603b      	str	r3, [r7, #0]
    if (angle > servos[servoId].maxAngle)
 8001a2c:	491c      	ldr	r1, [pc, #112]	@ (8001aa0 <Servo_SetAngle+0xe4>)
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ed97 7a00 	vldr	s14, [r7]
 8001a44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4c:	dd09      	ble.n	8001a62 <Servo_SetAngle+0xa6>
        angle = servos[servoId].maxAngle;
 8001a4e:	4914      	ldr	r1, [pc, #80]	@ (8001aa0 <Servo_SetAngle+0xe4>)
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3308      	adds	r3, #8
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	603b      	str	r3, [r7, #0]

    // Update current angle
    servos[servoId].currentAngle = angle;
 8001a62:	490f      	ldr	r1, [pc, #60]	@ (8001aa0 <Servo_SetAngle+0xe4>)
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	330c      	adds	r3, #12
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	601a      	str	r2, [r3, #0]

    // Set servo position
    PCA9685_SetServoAngle(servos[servoId].channel, angle);
 8001a76:	490a      	ldr	r1, [pc, #40]	@ (8001aa0 <Servo_SetAngle+0xe4>)
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4413      	add	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	ed97 0a00 	vldr	s0, [r7]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fe20 	bl	80016d0 <PCA9685_SetServoAngle>

    return 0;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000550 	.word	0x20000550
 8001aa0:	20000310 	.word	0x20000310

08001aa4 <Servo_SetAngleByName>:
  * @param  name: Name of the servo
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngleByName(const char* name, float angle)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	ed87 0a00 	vstr	s0, [r7]
    if (name == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d102      	bne.n	8001abc <Servo_SetAngleByName+0x18>
        return -1;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aba:	e00f      	b.n	8001adc <Servo_SetAngleByName+0x38>

    int servoId = Servo_GetIdByName(name);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f811 	bl	8001ae4 <Servo_GetIdByName>
 8001ac2:	60f8      	str	r0, [r7, #12]

    if (servoId >= 0)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	db06      	blt.n	8001ad8 <Servo_SetAngleByName+0x34>
        return Servo_SetAngle(servoId, angle);
 8001aca:	ed97 0a00 	vldr	s0, [r7]
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f7ff ff74 	bl	80019bc <Servo_SetAngle>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	e001      	b.n	8001adc <Servo_SetAngleByName+0x38>
    else
        return -1;
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <Servo_GetIdByName>:
  * @brief  Get servo ID by name
  * @param  name: Name of the servo
  * @retval int: Servo ID or -1 if not found
  */
int Servo_GetIdByName(const char* name)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
    if (name == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d102      	bne.n	8001af8 <Servo_GetIdByName+0x14>
        return -1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	e02a      	b.n	8001b4e <Servo_GetIdByName+0x6a>

    // Search for servo with the given name
    for (int i = 0; i < servoCount; i++) {
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e01f      	b.n	8001b3e <Servo_GetIdByName+0x5a>
        if (servos[i].initialized && strcmp(servos[i].name, name) == 0)
 8001afe:	4916      	ldr	r1, [pc, #88]	@ (8001b58 <Servo_GetIdByName+0x74>)
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4613      	mov	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	4413      	add	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	3310      	adds	r3, #16
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d011      	beq.n	8001b38 <Servo_GetIdByName+0x54>
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	3310      	adds	r3, #16
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <Servo_GetIdByName+0x74>)
 8001b22:	4413      	add	r3, r2
 8001b24:	3301      	adds	r3, #1
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fb71 	bl	8000210 <strcmp>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <Servo_GetIdByName+0x54>
            return i;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	e00a      	b.n	8001b4e <Servo_GetIdByName+0x6a>
    for (int i = 0; i < servoCount; i++) {
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <Servo_GetIdByName+0x78>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4293      	cmp	r3, r2
 8001b48:	dbd9      	blt.n	8001afe <Servo_GetIdByName+0x1a>
    }

    return -1;
 8001b4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000310 	.word	0x20000310
 8001b5c:	20000550 	.word	0x20000550

08001b60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b76:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	4a08      	ldr	r2, [pc, #32]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_MspInit+0x4c>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b9e:	2007      	movs	r0, #7
 8001ba0:	f000 fc9a 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800

08001bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	@ 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a29      	ldr	r2, [pc, #164]	@ (8001c74 <HAL_I2C_MspInit+0xc4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d14b      	bne.n	8001c6a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b28      	ldr	r3, [pc, #160]	@ (8001c78 <HAL_I2C_MspInit+0xc8>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	4a27      	ldr	r2, [pc, #156]	@ (8001c78 <HAL_I2C_MspInit+0xc8>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be2:	4b25      	ldr	r3, [pc, #148]	@ (8001c78 <HAL_I2C_MspInit+0xc8>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b21      	ldr	r3, [pc, #132]	@ (8001c78 <HAL_I2C_MspInit+0xc8>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	4a20      	ldr	r2, [pc, #128]	@ (8001c78 <HAL_I2C_MspInit+0xc8>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <HAL_I2C_MspInit+0xc8>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c10:	2312      	movs	r3, #18
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	4815      	ldr	r0, [pc, #84]	@ (8001c7c <HAL_I2C_MspInit+0xcc>)
 8001c28:	f001 f814 	bl	8002c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c32:	2312      	movs	r3, #18
 8001c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c3e:	2304      	movs	r3, #4
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	480d      	ldr	r0, [pc, #52]	@ (8001c80 <HAL_I2C_MspInit+0xd0>)
 8001c4a:	f001 f803 	bl	8002c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <HAL_I2C_MspInit+0xc8>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	4a08      	ldr	r2, [pc, #32]	@ (8001c78 <HAL_I2C_MspInit+0xc8>)
 8001c58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <HAL_I2C_MspInit+0xc8>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	@ 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40005800 	.word	0x40005800
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	40020800 	.word	0x40020800

08001c84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08c      	sub	sp, #48	@ 0x30
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a32      	ldr	r2, [pc, #200]	@ (8001d6c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d12d      	bne.n	8001d02 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	4b31      	ldr	r3, [pc, #196]	@ (8001d70 <HAL_TIM_Encoder_MspInit+0xec>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cae:	4a30      	ldr	r2, [pc, #192]	@ (8001d70 <HAL_TIM_Encoder_MspInit+0xec>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d70 <HAL_TIM_Encoder_MspInit+0xec>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d70 <HAL_TIM_Encoder_MspInit+0xec>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a29      	ldr	r2, [pc, #164]	@ (8001d70 <HAL_TIM_Encoder_MspInit+0xec>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b27      	ldr	r3, [pc, #156]	@ (8001d70 <HAL_TIM_Encoder_MspInit+0xec>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8001cde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	481e      	ldr	r0, [pc, #120]	@ (8001d74 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001cfc:	f000 ffaa 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d00:	e030      	b.n	8001d64 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d0a:	d12b      	bne.n	8001d64 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <HAL_TIM_Encoder_MspInit+0xec>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d14:	4a16      	ldr	r2, [pc, #88]	@ (8001d70 <HAL_TIM_Encoder_MspInit+0xec>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1c:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <HAL_TIM_Encoder_MspInit+0xec>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <HAL_TIM_Encoder_MspInit+0xec>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d30:	4a0f      	ldr	r2, [pc, #60]	@ (8001d70 <HAL_TIM_Encoder_MspInit+0xec>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d38:	4b0d      	ldr	r3, [pc, #52]	@ (8001d70 <HAL_TIM_Encoder_MspInit+0xec>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8001d44:	2303      	movs	r3, #3
 8001d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d54:	2301      	movs	r3, #1
 8001d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f107 031c 	add.w	r3, r7, #28
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4805      	ldr	r0, [pc, #20]	@ (8001d74 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001d60:	f000 ff78 	bl	8002c54 <HAL_GPIO_Init>
}
 8001d64:	bf00      	nop
 8001d66:	3730      	adds	r7, #48	@ 0x30
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020000 	.word	0x40020000

08001d78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc0 <HAL_TIM_PWM_MspInit+0x48>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d115      	bne.n	8001db6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <HAL_TIM_PWM_MspInit+0x4c>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc4 <HAL_TIM_PWM_MspInit+0x4c>)
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc4 <HAL_TIM_PWM_MspInit+0x4c>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	201e      	movs	r0, #30
 8001dac:	f000 fb9f 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001db0:	201e      	movs	r0, #30
 8001db2:	f000 fbb8 	bl	8002526 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40000800 	.word	0x40000800
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a12      	ldr	r2, [pc, #72]	@ (8001e30 <HAL_TIM_MspPostInit+0x68>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d11e      	bne.n	8001e28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <HAL_TIM_MspPostInit+0x6c>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	4a10      	ldr	r2, [pc, #64]	@ (8001e34 <HAL_TIM_MspPostInit+0x6c>)
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <HAL_TIM_MspPostInit+0x6c>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e06:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001e0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	4619      	mov	r1, r3
 8001e22:	4805      	ldr	r0, [pc, #20]	@ (8001e38 <HAL_TIM_MspPostInit+0x70>)
 8001e24:	f000 ff16 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001e28:	bf00      	nop
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40000800 	.word	0x40000800
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020400 	.word	0x40020400

08001e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08e      	sub	sp, #56	@ 0x38
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a66      	ldr	r2, [pc, #408]	@ (8001ff4 <HAL_UART_MspInit+0x1b8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d12c      	bne.n	8001eb8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
 8001e62:	4b65      	ldr	r3, [pc, #404]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	4a64      	ldr	r2, [pc, #400]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6e:	4b62      	ldr	r3, [pc, #392]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e76:	623b      	str	r3, [r7, #32]
 8001e78:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	4a5d      	ldr	r2, [pc, #372]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e96:	230c      	movs	r3, #12
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ea6:	2307      	movs	r3, #7
 8001ea8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4852      	ldr	r0, [pc, #328]	@ (8001ffc <HAL_UART_MspInit+0x1c0>)
 8001eb2:	f000 fecf 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001eb6:	e099      	b.n	8001fec <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a50      	ldr	r2, [pc, #320]	@ (8002000 <HAL_UART_MspInit+0x1c4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d12d      	bne.n	8001f1e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	4b4c      	ldr	r3, [pc, #304]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed2:	4b49      	ldr	r3, [pc, #292]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	4b45      	ldr	r3, [pc, #276]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a44      	ldr	r2, [pc, #272]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b42      	ldr	r3, [pc, #264]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8001efa:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f0c:	2307      	movs	r3, #7
 8001f0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f14:	4619      	mov	r1, r3
 8001f16:	483b      	ldr	r0, [pc, #236]	@ (8002004 <HAL_UART_MspInit+0x1c8>)
 8001f18:	f000 fe9c 	bl	8002c54 <HAL_GPIO_Init>
}
 8001f1c:	e066      	b.n	8001fec <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a39      	ldr	r2, [pc, #228]	@ (8002008 <HAL_UART_MspInit+0x1cc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d161      	bne.n	8001fec <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f28:	2300      	movs	r3, #0
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	4b32      	ldr	r3, [pc, #200]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f30:	4a31      	ldr	r2, [pc, #196]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001f32:	f043 0320 	orr.w	r3, r3, #32
 8001f36:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f38:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001f4e:	f043 0304 	orr.w	r3, r3, #4
 8001f52:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f54:	4b28      	ldr	r3, [pc, #160]	@ (8001ff8 <HAL_UART_MspInit+0x1bc>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f60:	23c0      	movs	r3, #192	@ 0xc0
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f70:	2308      	movs	r3, #8
 8001f72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4822      	ldr	r0, [pc, #136]	@ (8002004 <HAL_UART_MspInit+0x1c8>)
 8001f7c:	f000 fe6a 	bl	8002c54 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001f80:	4b22      	ldr	r3, [pc, #136]	@ (800200c <HAL_UART_MspInit+0x1d0>)
 8001f82:	4a23      	ldr	r2, [pc, #140]	@ (8002010 <HAL_UART_MspInit+0x1d4>)
 8001f84:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001f86:	4b21      	ldr	r3, [pc, #132]	@ (800200c <HAL_UART_MspInit+0x1d0>)
 8001f88:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001f8c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800200c <HAL_UART_MspInit+0x1d0>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f94:	4b1d      	ldr	r3, [pc, #116]	@ (800200c <HAL_UART_MspInit+0x1d0>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800200c <HAL_UART_MspInit+0x1d0>)
 8001f9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fa0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800200c <HAL_UART_MspInit+0x1d0>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fa8:	4b18      	ldr	r3, [pc, #96]	@ (800200c <HAL_UART_MspInit+0x1d0>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001fae:	4b17      	ldr	r3, [pc, #92]	@ (800200c <HAL_UART_MspInit+0x1d0>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fb4:	4b15      	ldr	r3, [pc, #84]	@ (800200c <HAL_UART_MspInit+0x1d0>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fba:	4b14      	ldr	r3, [pc, #80]	@ (800200c <HAL_UART_MspInit+0x1d0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001fc0:	4812      	ldr	r0, [pc, #72]	@ (800200c <HAL_UART_MspInit+0x1d0>)
 8001fc2:	f000 facb 	bl	800255c <HAL_DMA_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <HAL_UART_MspInit+0x194>
      Error_Handler();
 8001fcc:	f7ff faae 	bl	800152c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800200c <HAL_UART_MspInit+0x1d0>)
 8001fd4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001fd6:	4a0d      	ldr	r2, [pc, #52]	@ (800200c <HAL_UART_MspInit+0x1d0>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2047      	movs	r0, #71	@ 0x47
 8001fe2:	f000 fa84 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001fe6:	2047      	movs	r0, #71	@ 0x47
 8001fe8:	f000 fa9d 	bl	8002526 <HAL_NVIC_EnableIRQ>
}
 8001fec:	bf00      	nop
 8001fee:	3738      	adds	r7, #56	@ 0x38
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40004400 	.word	0x40004400
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40004800 	.word	0x40004800
 8002004:	40020800 	.word	0x40020800
 8002008:	40011400 	.word	0x40011400
 800200c:	2000027c 	.word	0x2000027c
 8002010:	40026428 	.word	0x40026428

08002014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <NMI_Handler+0x4>

0800201c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <HardFault_Handler+0x4>

08002024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <MemManage_Handler+0x4>

0800202c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <BusFault_Handler+0x4>

08002034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <UsageFault_Handler+0x4>

0800203c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800206a:	f000 f921 	bl	80022b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 800206e:	f000 f869 	bl	8002144 <SysTickFunction>

  /* USER CODE END SysTick_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <TIM4_IRQHandler+0x10>)
 800207e:	f003 f83f 	bl	8005100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000015c 	.word	0x2000015c

0800208c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002090:	4802      	ldr	r0, [pc, #8]	@ (800209c <DMA2_Stream1_IRQHandler+0x10>)
 8002092:	f000 fba3 	bl	80027dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	2000027c 	.word	0x2000027c

080020a0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020a4:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <USART6_IRQHandler+0x10>)
 80020a6:	f003 fd97 	bl	8005bd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000234 	.word	0x20000234

080020b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020bc:	4a14      	ldr	r2, [pc, #80]	@ (8002110 <_sbrk+0x5c>)
 80020be:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <_sbrk+0x60>)
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c8:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d0:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <_sbrk+0x64>)
 80020d2:	4a12      	ldr	r2, [pc, #72]	@ (800211c <_sbrk+0x68>)
 80020d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d6:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d207      	bcs.n	80020f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e4:	f004 fcc6 	bl	8006a74 <__errno>
 80020e8:	4603      	mov	r3, r0
 80020ea:	220c      	movs	r2, #12
 80020ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
 80020f2:	e009      	b.n	8002108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f4:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fa:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	4a05      	ldr	r2, [pc, #20]	@ (8002118 <_sbrk+0x64>)
 8002104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20020000 	.word	0x20020000
 8002114:	00000400 	.word	0x00000400
 8002118:	20000554 	.word	0x20000554
 800211c:	200006a8 	.word	0x200006a8

08002120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <SystemInit+0x20>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212a:	4a05      	ldr	r2, [pc, #20]	@ (8002140 <SystemInit+0x20>)
 800212c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002130:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <SysTickFunction>:

#include "main.h"
// #include "pid.h"
#include "encoders.h"

void SysTickFunction(void) {
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
	 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
	 *
	 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
	 * turning. But that'll be approximately never in Micromouse :)
	 */
	if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 800214a:	f7fe fe57 	bl	8000dfc <getRightEncoderCounts>
 800214e:	4603      	mov	r3, r0
 8002150:	461a      	mov	r2, r3
 8002152:	f647 1318 	movw	r3, #31000	@ 0x7918
 8002156:	429a      	cmp	r2, r3
 8002158:	dc15      	bgt.n	8002186 <SysTickFunction+0x42>
 800215a:	f7fe fe5b 	bl	8000e14 <getLeftEncoderCounts>
 800215e:	4603      	mov	r3, r0
 8002160:	461a      	mov	r2, r3
 8002162:	f647 1318 	movw	r3, #31000	@ 0x7918
 8002166:	429a      	cmp	r2, r3
 8002168:	dc0d      	bgt.n	8002186 <SysTickFunction+0x42>
			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 800216a:	f7fe fe47 	bl	8000dfc <getRightEncoderCounts>
 800216e:	4603      	mov	r3, r0
 8002170:	461a      	mov	r2, r3
 8002172:	4b0f      	ldr	r3, [pc, #60]	@ (80021b0 <SysTickFunction+0x6c>)
 8002174:	429a      	cmp	r2, r3
 8002176:	db06      	blt.n	8002186 <SysTickFunction+0x42>
 8002178:	f7fe fe4c 	bl	8000e14 <getLeftEncoderCounts>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <SysTickFunction+0x6c>)
 8002182:	429a      	cmp	r2, r3
 8002184:	da10      	bge.n	80021a8 <SysTickFunction+0x64>
		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8002186:	f7fe fe39 	bl	8000dfc <getRightEncoderCounts>
 800218a:	4603      	mov	r3, r0
 800218c:	b29c      	uxth	r4, r3
 800218e:	f7fe fe41 	bl	8000e14 <getLeftEncoderCounts>
 8002192:	4603      	mov	r3, r0
 8002194:	b29b      	uxth	r3, r3
 8002196:	1ae3      	subs	r3, r4, r3
 8002198:	b29b      	uxth	r3, r3
 800219a:	80fb      	strh	r3, [r7, #6]
		resetEncoders();
 800219c:	f7fe fe46 	bl	8000e2c <resetEncoders>
		TIM1->CNT = (int16_t) difference;
 80021a0:	4a04      	ldr	r2, [pc, #16]	@ (80021b4 <SysTickFunction+0x70>)
 80021a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021a6:	6253      	str	r3, [r2, #36]	@ 0x24
	}
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd90      	pop	{r4, r7, pc}
 80021b0:	ffff86e8 	.word	0xffff86e8
 80021b4:	40010000 	.word	0x40010000

080021b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021bc:	f7ff ffb0 	bl	8002120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021c0:	480c      	ldr	r0, [pc, #48]	@ (80021f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021c2:	490d      	ldr	r1, [pc, #52]	@ (80021f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021c4:	4a0d      	ldr	r2, [pc, #52]	@ (80021fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c8:	e002      	b.n	80021d0 <LoopCopyDataInit>

080021ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ce:	3304      	adds	r3, #4

080021d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d4:	d3f9      	bcc.n	80021ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002204 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021dc:	e001      	b.n	80021e2 <LoopFillZerobss>

080021de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e0:	3204      	adds	r2, #4

080021e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e4:	d3fb      	bcc.n	80021de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021e6:	f004 fc4b 	bl	8006a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ea:	f7fe fe4d 	bl	8000e88 <main>
  bx  lr    
 80021ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80021fc:	080073fc 	.word	0x080073fc
  ldr r2, =_sbss
 8002200:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002204:	200006a4 	.word	0x200006a4

08002208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002208:	e7fe      	b.n	8002208 <ADC_IRQHandler>
	...

0800220c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002210:	4b0e      	ldr	r3, [pc, #56]	@ (800224c <HAL_Init+0x40>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <HAL_Init+0x40>)
 8002216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800221a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800221c:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <HAL_Init+0x40>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0a      	ldr	r2, [pc, #40]	@ (800224c <HAL_Init+0x40>)
 8002222:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002226:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002228:	4b08      	ldr	r3, [pc, #32]	@ (800224c <HAL_Init+0x40>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a07      	ldr	r2, [pc, #28]	@ (800224c <HAL_Init+0x40>)
 800222e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002234:	2003      	movs	r0, #3
 8002236:	f000 f94f 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800223a:	2000      	movs	r0, #0
 800223c:	f000 f808 	bl	8002250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002240:	f7ff fc8e 	bl	8001b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023c00 	.word	0x40023c00

08002250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002258:	4b12      	ldr	r3, [pc, #72]	@ (80022a4 <HAL_InitTick+0x54>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b12      	ldr	r3, [pc, #72]	@ (80022a8 <HAL_InitTick+0x58>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002266:	fbb3 f3f1 	udiv	r3, r3, r1
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f967 	bl	8002542 <HAL_SYSTICK_Config>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e00e      	b.n	800229c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b0f      	cmp	r3, #15
 8002282:	d80a      	bhi.n	800229a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002284:	2200      	movs	r2, #0
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	f04f 30ff 	mov.w	r0, #4294967295
 800228c:	f000 f92f 	bl	80024ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002290:	4a06      	ldr	r2, [pc, #24]	@ (80022ac <HAL_InitTick+0x5c>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	e000      	b.n	800229c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000008 	.word	0x20000008
 80022ac:	20000004 	.word	0x20000004

080022b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022b4:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <HAL_IncTick+0x20>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <HAL_IncTick+0x24>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	4a04      	ldr	r2, [pc, #16]	@ (80022d4 <HAL_IncTick+0x24>)
 80022c2:	6013      	str	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	20000008 	.word	0x20000008
 80022d4:	20000558 	.word	0x20000558

080022d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return uwTick;
 80022dc:	4b03      	ldr	r3, [pc, #12]	@ (80022ec <HAL_GetTick+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000558 	.word	0x20000558

080022f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff ffee 	bl	80022d8 <HAL_GetTick>
 80022fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002308:	d005      	beq.n	8002316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800230a:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <HAL_Delay+0x44>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002316:	bf00      	nop
 8002318:	f7ff ffde 	bl	80022d8 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	429a      	cmp	r2, r3
 8002326:	d8f7      	bhi.n	8002318 <HAL_Delay+0x28>
  {
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000008 	.word	0x20000008

08002338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0c      	ldr	r3, [pc, #48]	@ (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002360:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236a:	4a04      	ldr	r2, [pc, #16]	@ (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60d3      	str	r3, [r2, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4907      	ldr	r1, [pc, #28]	@ (80023d4 <__NVIC_EnableIRQ+0x38>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	@ (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	@ (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	@ 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
         );
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	@ 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024a4:	d301      	bcc.n	80024aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00f      	b.n	80024ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024aa:	4a0a      	ldr	r2, [pc, #40]	@ (80024d4 <SysTick_Config+0x40>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b2:	210f      	movs	r1, #15
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f7ff ff8e 	bl	80023d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024bc:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <SysTick_Config+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c2:	4b04      	ldr	r3, [pc, #16]	@ (80024d4 <SysTick_Config+0x40>)
 80024c4:	2207      	movs	r2, #7
 80024c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff29 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002500:	f7ff ff3e 	bl	8002380 <__NVIC_GetPriorityGrouping>
 8002504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff8e 	bl	800242c <NVIC_EncodePriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5d 	bl	80023d8 <__NVIC_SetPriority>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff31 	bl	800239c <__NVIC_EnableIRQ>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ffa2 	bl	8002494 <SysTick_Config>
 8002550:	4603      	mov	r3, r0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002568:	f7ff feb6 	bl	80022d8 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e099      	b.n	80026ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002598:	e00f      	b.n	80025ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800259a:	f7ff fe9d 	bl	80022d8 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d908      	bls.n	80025ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2203      	movs	r2, #3
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e078      	b.n	80026ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1e8      	bne.n	800259a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	4b38      	ldr	r3, [pc, #224]	@ (80026b4 <HAL_DMA_Init+0x158>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	4313      	orrs	r3, r2
 800260a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	2b04      	cmp	r3, #4
 8002612:	d107      	bne.n	8002624 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261c:	4313      	orrs	r3, r2
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f023 0307 	bic.w	r3, r3, #7
 800263a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	2b04      	cmp	r3, #4
 800264c:	d117      	bne.n	800267e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4313      	orrs	r3, r2
 8002656:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00e      	beq.n	800267e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fa7b 	bl	8002b5c <DMA_CheckFifoParam>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2240      	movs	r2, #64	@ 0x40
 8002670:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800267a:	2301      	movs	r3, #1
 800267c:	e016      	b.n	80026ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fa32 	bl	8002af0 <DMA_CalcBaseAndBitshift>
 800268c:	4603      	mov	r3, r0
 800268e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	223f      	movs	r2, #63	@ 0x3f
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	f010803f 	.word	0xf010803f

080026b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026c6:	f7ff fe07 	bl	80022d8 <HAL_GetTick>
 80026ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d008      	beq.n	80026ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2280      	movs	r2, #128	@ 0x80
 80026dc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e052      	b.n	8002790 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0216 	bic.w	r2, r2, #22
 80026f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002708:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d103      	bne.n	800271a <HAL_DMA_Abort+0x62>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0208 	bic.w	r2, r2, #8
 8002728:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0201 	bic.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273a:	e013      	b.n	8002764 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800273c:	f7ff fdcc 	bl	80022d8 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b05      	cmp	r3, #5
 8002748:	d90c      	bls.n	8002764 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2220      	movs	r2, #32
 800274e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2203      	movs	r2, #3
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e015      	b.n	8002790 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e4      	bne.n	800273c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002776:	223f      	movs	r2, #63	@ 0x3f
 8002778:	409a      	lsls	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d004      	beq.n	80027b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2280      	movs	r2, #128	@ 0x80
 80027b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e00c      	b.n	80027d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2205      	movs	r2, #5
 80027ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0201 	bic.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027e8:	4b8e      	ldr	r3, [pc, #568]	@ (8002a24 <HAL_DMA_IRQHandler+0x248>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a8e      	ldr	r2, [pc, #568]	@ (8002a28 <HAL_DMA_IRQHandler+0x24c>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	0a9b      	lsrs	r3, r3, #10
 80027f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002806:	2208      	movs	r2, #8
 8002808:	409a      	lsls	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d01a      	beq.n	8002848 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d013      	beq.n	8002848 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0204 	bic.w	r2, r2, #4
 800282e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002834:	2208      	movs	r2, #8
 8002836:	409a      	lsls	r2, r3
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002840:	f043 0201 	orr.w	r2, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284c:	2201      	movs	r2, #1
 800284e:	409a      	lsls	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d012      	beq.n	800287e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00b      	beq.n	800287e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286a:	2201      	movs	r2, #1
 800286c:	409a      	lsls	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002876:	f043 0202 	orr.w	r2, r3, #2
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002882:	2204      	movs	r2, #4
 8002884:	409a      	lsls	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d012      	beq.n	80028b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00b      	beq.n	80028b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a0:	2204      	movs	r2, #4
 80028a2:	409a      	lsls	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ac:	f043 0204 	orr.w	r2, r3, #4
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b8:	2210      	movs	r2, #16
 80028ba:	409a      	lsls	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4013      	ands	r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d043      	beq.n	800294c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d03c      	beq.n	800294c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d6:	2210      	movs	r2, #16
 80028d8:	409a      	lsls	r2, r3
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d018      	beq.n	800291e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d108      	bne.n	800290c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d024      	beq.n	800294c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4798      	blx	r3
 800290a:	e01f      	b.n	800294c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002910:	2b00      	cmp	r3, #0
 8002912:	d01b      	beq.n	800294c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
 800291c:	e016      	b.n	800294c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002928:	2b00      	cmp	r3, #0
 800292a:	d107      	bne.n	800293c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0208 	bic.w	r2, r2, #8
 800293a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002950:	2220      	movs	r2, #32
 8002952:	409a      	lsls	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 808f 	beq.w	8002a7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8087 	beq.w	8002a7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002972:	2220      	movs	r2, #32
 8002974:	409a      	lsls	r2, r3
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b05      	cmp	r3, #5
 8002984:	d136      	bne.n	80029f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0216 	bic.w	r2, r2, #22
 8002994:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d103      	bne.n	80029b6 <HAL_DMA_IRQHandler+0x1da>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d007      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0208 	bic.w	r2, r2, #8
 80029c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ca:	223f      	movs	r2, #63	@ 0x3f
 80029cc:	409a      	lsls	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d07e      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4798      	blx	r3
        }
        return;
 80029f2:	e079      	b.n	8002ae8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d01d      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10d      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d031      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	4798      	blx	r3
 8002a20:	e02c      	b.n	8002a7c <HAL_DMA_IRQHandler+0x2a0>
 8002a22:	bf00      	nop
 8002a24:	20000000 	.word	0x20000000
 8002a28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d023      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
 8002a3c:	e01e      	b.n	8002a7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10f      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0210 	bic.w	r2, r2, #16
 8002a5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d032      	beq.n	8002aea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d022      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2205      	movs	r2, #5
 8002a94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0201 	bic.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d307      	bcc.n	8002ac4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f2      	bne.n	8002aa8 <HAL_DMA_IRQHandler+0x2cc>
 8002ac2:	e000      	b.n	8002ac6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ac4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d005      	beq.n	8002aea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	4798      	blx	r3
 8002ae6:	e000      	b.n	8002aea <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ae8:	bf00      	nop
    }
  }
}
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	3b10      	subs	r3, #16
 8002b00:	4a14      	ldr	r2, [pc, #80]	@ (8002b54 <DMA_CalcBaseAndBitshift+0x64>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b0a:	4a13      	ldr	r2, [pc, #76]	@ (8002b58 <DMA_CalcBaseAndBitshift+0x68>)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4413      	add	r3, r2
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d909      	bls.n	8002b32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b26:	f023 0303 	bic.w	r3, r3, #3
 8002b2a:	1d1a      	adds	r2, r3, #4
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b30:	e007      	b.n	8002b42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b3a:	f023 0303 	bic.w	r3, r3, #3
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	aaaaaaab 	.word	0xaaaaaaab
 8002b58:	080073b0 	.word	0x080073b0

08002b5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d11f      	bne.n	8002bb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d856      	bhi.n	8002c2a <DMA_CheckFifoParam+0xce>
 8002b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b84 <DMA_CheckFifoParam+0x28>)
 8002b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b82:	bf00      	nop
 8002b84:	08002b95 	.word	0x08002b95
 8002b88:	08002ba7 	.word	0x08002ba7
 8002b8c:	08002b95 	.word	0x08002b95
 8002b90:	08002c2b 	.word	0x08002c2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d046      	beq.n	8002c2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba4:	e043      	b.n	8002c2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002baa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bae:	d140      	bne.n	8002c32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb4:	e03d      	b.n	8002c32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bbe:	d121      	bne.n	8002c04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d837      	bhi.n	8002c36 <DMA_CheckFifoParam+0xda>
 8002bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bcc <DMA_CheckFifoParam+0x70>)
 8002bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bcc:	08002bdd 	.word	0x08002bdd
 8002bd0:	08002be3 	.word	0x08002be3
 8002bd4:	08002bdd 	.word	0x08002bdd
 8002bd8:	08002bf5 	.word	0x08002bf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
      break;
 8002be0:	e030      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d025      	beq.n	8002c3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf2:	e022      	b.n	8002c3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bfc:	d11f      	bne.n	8002c3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c02:	e01c      	b.n	8002c3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d903      	bls.n	8002c12 <DMA_CheckFifoParam+0xb6>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	d003      	beq.n	8002c18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c10:	e018      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
      break;
 8002c16:	e015      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00e      	beq.n	8002c42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      break;
 8002c28:	e00b      	b.n	8002c42 <DMA_CheckFifoParam+0xe6>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e00a      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
      break;
 8002c2e:	bf00      	nop
 8002c30:	e008      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
      break;
 8002c32:	bf00      	nop
 8002c34:	e006      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
      break;
 8002c36:	bf00      	nop
 8002c38:	e004      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e002      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c3e:	bf00      	nop
 8002c40:	e000      	b.n	8002c44 <DMA_CheckFifoParam+0xe8>
      break;
 8002c42:	bf00      	nop
    }
  } 
  
  return status; 
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop

08002c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	@ 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e165      	b.n	8002f3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c70:	2201      	movs	r2, #1
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	f040 8154 	bne.w	8002f36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d005      	beq.n	8002ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d130      	bne.n	8002d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cdc:	2201      	movs	r2, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 0201 	and.w	r2, r3, #1
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d017      	beq.n	8002d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2203      	movs	r2, #3
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d123      	bne.n	8002d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	08da      	lsrs	r2, r3, #3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3208      	adds	r2, #8
 8002d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	220f      	movs	r2, #15
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	08da      	lsrs	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3208      	adds	r2, #8
 8002d92:	69b9      	ldr	r1, [r7, #24]
 8002d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	2203      	movs	r2, #3
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0203 	and.w	r2, r3, #3
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80ae 	beq.w	8002f36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	4b5d      	ldr	r3, [pc, #372]	@ (8002f54 <HAL_GPIO_Init+0x300>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de2:	4a5c      	ldr	r2, [pc, #368]	@ (8002f54 <HAL_GPIO_Init+0x300>)
 8002de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dea:	4b5a      	ldr	r3, [pc, #360]	@ (8002f54 <HAL_GPIO_Init+0x300>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002df6:	4a58      	ldr	r2, [pc, #352]	@ (8002f58 <HAL_GPIO_Init+0x304>)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	220f      	movs	r2, #15
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a4f      	ldr	r2, [pc, #316]	@ (8002f5c <HAL_GPIO_Init+0x308>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d025      	beq.n	8002e6e <HAL_GPIO_Init+0x21a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4e      	ldr	r2, [pc, #312]	@ (8002f60 <HAL_GPIO_Init+0x30c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d01f      	beq.n	8002e6a <HAL_GPIO_Init+0x216>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4d      	ldr	r2, [pc, #308]	@ (8002f64 <HAL_GPIO_Init+0x310>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d019      	beq.n	8002e66 <HAL_GPIO_Init+0x212>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4c      	ldr	r2, [pc, #304]	@ (8002f68 <HAL_GPIO_Init+0x314>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <HAL_GPIO_Init+0x20e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4b      	ldr	r2, [pc, #300]	@ (8002f6c <HAL_GPIO_Init+0x318>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00d      	beq.n	8002e5e <HAL_GPIO_Init+0x20a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4a      	ldr	r2, [pc, #296]	@ (8002f70 <HAL_GPIO_Init+0x31c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d007      	beq.n	8002e5a <HAL_GPIO_Init+0x206>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a49      	ldr	r2, [pc, #292]	@ (8002f74 <HAL_GPIO_Init+0x320>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d101      	bne.n	8002e56 <HAL_GPIO_Init+0x202>
 8002e52:	2306      	movs	r3, #6
 8002e54:	e00c      	b.n	8002e70 <HAL_GPIO_Init+0x21c>
 8002e56:	2307      	movs	r3, #7
 8002e58:	e00a      	b.n	8002e70 <HAL_GPIO_Init+0x21c>
 8002e5a:	2305      	movs	r3, #5
 8002e5c:	e008      	b.n	8002e70 <HAL_GPIO_Init+0x21c>
 8002e5e:	2304      	movs	r3, #4
 8002e60:	e006      	b.n	8002e70 <HAL_GPIO_Init+0x21c>
 8002e62:	2303      	movs	r3, #3
 8002e64:	e004      	b.n	8002e70 <HAL_GPIO_Init+0x21c>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e002      	b.n	8002e70 <HAL_GPIO_Init+0x21c>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <HAL_GPIO_Init+0x21c>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	69fa      	ldr	r2, [r7, #28]
 8002e72:	f002 0203 	and.w	r2, r2, #3
 8002e76:	0092      	lsls	r2, r2, #2
 8002e78:	4093      	lsls	r3, r2
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e80:	4935      	ldr	r1, [pc, #212]	@ (8002f58 <HAL_GPIO_Init+0x304>)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	089b      	lsrs	r3, r3, #2
 8002e86:	3302      	adds	r3, #2
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eb2:	4a31      	ldr	r2, [pc, #196]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002edc:	4a26      	ldr	r2, [pc, #152]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ee2:	4b25      	ldr	r3, [pc, #148]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	43db      	mvns	r3, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f06:	4a1c      	ldr	r2, [pc, #112]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f30:	4a11      	ldr	r2, [pc, #68]	@ (8002f78 <HAL_GPIO_Init+0x324>)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2b0f      	cmp	r3, #15
 8002f40:	f67f ae96 	bls.w	8002c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	3724      	adds	r7, #36	@ 0x24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800
 8002f58:	40013800 	.word	0x40013800
 8002f5c:	40020000 	.word	0x40020000
 8002f60:	40020400 	.word	0x40020400
 8002f64:	40020800 	.word	0x40020800
 8002f68:	40020c00 	.word	0x40020c00
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40021400 	.word	0x40021400
 8002f74:	40021800 	.word	0x40021800
 8002f78:	40013c00 	.word	0x40013c00

08002f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f8c:	787b      	ldrb	r3, [r7, #1]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f92:	887a      	ldrh	r2, [r7, #2]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f98:	e003      	b.n	8002fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f9a:	887b      	ldrh	r3, [r7, #2]
 8002f9c:	041a      	lsls	r2, r3, #16
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	619a      	str	r2, [r3, #24]
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e12b      	b.n	800321a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe fdea 	bl	8001bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2224      	movs	r2, #36	@ 0x24
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003002:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003012:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003014:	f001 f932 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 8003018:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4a81      	ldr	r2, [pc, #516]	@ (8003224 <HAL_I2C_Init+0x274>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d807      	bhi.n	8003034 <HAL_I2C_Init+0x84>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a80      	ldr	r2, [pc, #512]	@ (8003228 <HAL_I2C_Init+0x278>)
 8003028:	4293      	cmp	r3, r2
 800302a:	bf94      	ite	ls
 800302c:	2301      	movls	r3, #1
 800302e:	2300      	movhi	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e006      	b.n	8003042 <HAL_I2C_Init+0x92>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a7d      	ldr	r2, [pc, #500]	@ (800322c <HAL_I2C_Init+0x27c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	bf94      	ite	ls
 800303c:	2301      	movls	r3, #1
 800303e:	2300      	movhi	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0e7      	b.n	800321a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a78      	ldr	r2, [pc, #480]	@ (8003230 <HAL_I2C_Init+0x280>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0c9b      	lsrs	r3, r3, #18
 8003054:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a6a      	ldr	r2, [pc, #424]	@ (8003224 <HAL_I2C_Init+0x274>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d802      	bhi.n	8003084 <HAL_I2C_Init+0xd4>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	3301      	adds	r3, #1
 8003082:	e009      	b.n	8003098 <HAL_I2C_Init+0xe8>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	4a69      	ldr	r2, [pc, #420]	@ (8003234 <HAL_I2C_Init+0x284>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	3301      	adds	r3, #1
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	430b      	orrs	r3, r1
 800309e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	495c      	ldr	r1, [pc, #368]	@ (8003224 <HAL_I2C_Init+0x274>)
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d819      	bhi.n	80030ec <HAL_I2C_Init+0x13c>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1e59      	subs	r1, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c6:	1c59      	adds	r1, r3, #1
 80030c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030cc:	400b      	ands	r3, r1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_I2C_Init+0x138>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1e59      	subs	r1, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e0:	3301      	adds	r3, #1
 80030e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e6:	e051      	b.n	800318c <HAL_I2C_Init+0x1dc>
 80030e8:	2304      	movs	r3, #4
 80030ea:	e04f      	b.n	800318c <HAL_I2C_Init+0x1dc>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d111      	bne.n	8003118 <HAL_I2C_Init+0x168>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1e58      	subs	r0, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	440b      	add	r3, r1
 8003102:	fbb0 f3f3 	udiv	r3, r0, r3
 8003106:	3301      	adds	r3, #1
 8003108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e012      	b.n	800313e <HAL_I2C_Init+0x18e>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1e58      	subs	r0, r3, #1
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	0099      	lsls	r1, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	fbb0 f3f3 	udiv	r3, r0, r3
 800312e:	3301      	adds	r3, #1
 8003130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_Init+0x196>
 8003142:	2301      	movs	r3, #1
 8003144:	e022      	b.n	800318c <HAL_I2C_Init+0x1dc>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10e      	bne.n	800316c <HAL_I2C_Init+0x1bc>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1e58      	subs	r0, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6859      	ldr	r1, [r3, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	440b      	add	r3, r1
 800315c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003160:	3301      	adds	r3, #1
 8003162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800316a:	e00f      	b.n	800318c <HAL_I2C_Init+0x1dc>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1e58      	subs	r0, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	460b      	mov	r3, r1
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	0099      	lsls	r1, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003182:	3301      	adds	r3, #1
 8003184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003188:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	6809      	ldr	r1, [r1, #0]
 8003190:	4313      	orrs	r3, r2
 8003192:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6911      	ldr	r1, [r2, #16]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68d2      	ldr	r2, [r2, #12]
 80031c6:	4311      	orrs	r1, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	000186a0 	.word	0x000186a0
 8003228:	001e847f 	.word	0x001e847f
 800322c:	003d08ff 	.word	0x003d08ff
 8003230:	431bde83 	.word	0x431bde83
 8003234:	10624dd3 	.word	0x10624dd3

08003238 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	4608      	mov	r0, r1
 8003242:	4611      	mov	r1, r2
 8003244:	461a      	mov	r2, r3
 8003246:	4603      	mov	r3, r0
 8003248:	817b      	strh	r3, [r7, #10]
 800324a:	460b      	mov	r3, r1
 800324c:	813b      	strh	r3, [r7, #8]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003252:	f7ff f841 	bl	80022d8 <HAL_GetTick>
 8003256:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b20      	cmp	r3, #32
 8003262:	f040 80d9 	bne.w	8003418 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	2319      	movs	r3, #25
 800326c:	2201      	movs	r2, #1
 800326e:	496d      	ldr	r1, [pc, #436]	@ (8003424 <HAL_I2C_Mem_Write+0x1ec>)
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fc8b 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800327c:	2302      	movs	r3, #2
 800327e:	e0cc      	b.n	800341a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_I2C_Mem_Write+0x56>
 800328a:	2302      	movs	r3, #2
 800328c:	e0c5      	b.n	800341a <HAL_I2C_Mem_Write+0x1e2>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d007      	beq.n	80032b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2221      	movs	r2, #33	@ 0x21
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2240      	movs	r2, #64	@ 0x40
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4a4d      	ldr	r2, [pc, #308]	@ (8003428 <HAL_I2C_Mem_Write+0x1f0>)
 80032f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032f6:	88f8      	ldrh	r0, [r7, #6]
 80032f8:	893a      	ldrh	r2, [r7, #8]
 80032fa:	8979      	ldrh	r1, [r7, #10]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	4603      	mov	r3, r0
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 fac2 	bl	8003890 <I2C_RequestMemoryWrite>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d052      	beq.n	80033b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e081      	b.n	800341a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fd50 	bl	8003dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	2b04      	cmp	r3, #4
 800332c:	d107      	bne.n	800333e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800333c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e06b      	b.n	800341a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	781a      	ldrb	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b04      	cmp	r3, #4
 800337e:	d11b      	bne.n	80033b8 <HAL_I2C_Mem_Write+0x180>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003384:	2b00      	cmp	r3, #0
 8003386:	d017      	beq.n	80033b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338c:	781a      	ldrb	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1aa      	bne.n	8003316 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fd43 	bl	8003e50 <I2C_WaitOnBTFFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00d      	beq.n	80033ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d107      	bne.n	80033e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e016      	b.n	800341a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003418:	2302      	movs	r3, #2
  }
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	00100002 	.word	0x00100002
 8003428:	ffff0000 	.word	0xffff0000

0800342c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b08c      	sub	sp, #48	@ 0x30
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	4608      	mov	r0, r1
 8003436:	4611      	mov	r1, r2
 8003438:	461a      	mov	r2, r3
 800343a:	4603      	mov	r3, r0
 800343c:	817b      	strh	r3, [r7, #10]
 800343e:	460b      	mov	r3, r1
 8003440:	813b      	strh	r3, [r7, #8]
 8003442:	4613      	mov	r3, r2
 8003444:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003446:	f7fe ff47 	bl	80022d8 <HAL_GetTick>
 800344a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b20      	cmp	r3, #32
 8003456:	f040 8214 	bne.w	8003882 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800345a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	2319      	movs	r3, #25
 8003460:	2201      	movs	r2, #1
 8003462:	497b      	ldr	r1, [pc, #492]	@ (8003650 <HAL_I2C_Mem_Read+0x224>)
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 fb91 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
 8003472:	e207      	b.n	8003884 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_I2C_Mem_Read+0x56>
 800347e:	2302      	movs	r3, #2
 8003480:	e200      	b.n	8003884 <HAL_I2C_Mem_Read+0x458>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d007      	beq.n	80034a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2222      	movs	r2, #34	@ 0x22
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2240      	movs	r2, #64	@ 0x40
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80034d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4a5b      	ldr	r2, [pc, #364]	@ (8003654 <HAL_I2C_Mem_Read+0x228>)
 80034e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034ea:	88f8      	ldrh	r0, [r7, #6]
 80034ec:	893a      	ldrh	r2, [r7, #8]
 80034ee:	8979      	ldrh	r1, [r7, #10]
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	4603      	mov	r3, r0
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 fa5e 	bl	80039bc <I2C_RequestMemoryRead>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e1bc      	b.n	8003884 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350e:	2b00      	cmp	r3, #0
 8003510:	d113      	bne.n	800353a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003512:	2300      	movs	r3, #0
 8003514:	623b      	str	r3, [r7, #32]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	623b      	str	r3, [r7, #32]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	623b      	str	r3, [r7, #32]
 8003526:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	e190      	b.n	800385c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353e:	2b01      	cmp	r3, #1
 8003540:	d11b      	bne.n	800357a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003550:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	e170      	b.n	800385c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357e:	2b02      	cmp	r3, #2
 8003580:	d11b      	bne.n	80035ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003590:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a2:	2300      	movs	r3, #0
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	e150      	b.n	800385c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035d0:	e144      	b.n	800385c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	f200 80f1 	bhi.w	80037be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d123      	bne.n	800362c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fc79 	bl	8003ee0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e145      	b.n	8003884 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800362a:	e117      	b.n	800385c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003630:	2b02      	cmp	r3, #2
 8003632:	d14e      	bne.n	80036d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363a:	2200      	movs	r2, #0
 800363c:	4906      	ldr	r1, [pc, #24]	@ (8003658 <HAL_I2C_Mem_Read+0x22c>)
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 faa4 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e11a      	b.n	8003884 <HAL_I2C_Mem_Read+0x458>
 800364e:	bf00      	nop
 8003650:	00100002 	.word	0x00100002
 8003654:	ffff0000 	.word	0xffff0000
 8003658:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800366a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036d0:	e0c4      	b.n	800385c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d8:	2200      	movs	r2, #0
 80036da:	496c      	ldr	r1, [pc, #432]	@ (800388c <HAL_I2C_Mem_Read+0x460>)
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fa55 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0cb      	b.n	8003884 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003734:	2200      	movs	r2, #0
 8003736:	4955      	ldr	r1, [pc, #340]	@ (800388c <HAL_I2C_Mem_Read+0x460>)
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fa27 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e09d      	b.n	8003884 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003756:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037bc:	e04e      	b.n	800385c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fb8c 	bl	8003ee0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e058      	b.n	8003884 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b04      	cmp	r3, #4
 8003810:	d124      	bne.n	800385c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003816:	2b03      	cmp	r3, #3
 8003818:	d107      	bne.n	800382a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003828:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003860:	2b00      	cmp	r3, #0
 8003862:	f47f aeb6 	bne.w	80035d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	e000      	b.n	8003884 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003882:	2302      	movs	r3, #2
  }
}
 8003884:	4618      	mov	r0, r3
 8003886:	3728      	adds	r7, #40	@ 0x28
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	00010004 	.word	0x00010004

08003890 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b088      	sub	sp, #32
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	4608      	mov	r0, r1
 800389a:	4611      	mov	r1, r2
 800389c:	461a      	mov	r2, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	817b      	strh	r3, [r7, #10]
 80038a2:	460b      	mov	r3, r1
 80038a4:	813b      	strh	r3, [r7, #8]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f960 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00d      	beq.n	80038ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038e0:	d103      	bne.n	80038ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e05f      	b.n	80039ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038ee:	897b      	ldrh	r3, [r7, #10]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	461a      	mov	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003900:	6a3a      	ldr	r2, [r7, #32]
 8003902:	492d      	ldr	r1, [pc, #180]	@ (80039b8 <I2C_RequestMemoryWrite+0x128>)
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f9bb 	bl	8003c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e04c      	b.n	80039ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800392a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392c:	6a39      	ldr	r1, [r7, #32]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fa46 	bl	8003dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	2b04      	cmp	r3, #4
 8003940:	d107      	bne.n	8003952 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003950:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e02b      	b.n	80039ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d105      	bne.n	8003968 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800395c:	893b      	ldrh	r3, [r7, #8]
 800395e:	b2da      	uxtb	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	611a      	str	r2, [r3, #16]
 8003966:	e021      	b.n	80039ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003968:	893b      	ldrh	r3, [r7, #8]
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	b29b      	uxth	r3, r3
 800396e:	b2da      	uxtb	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003978:	6a39      	ldr	r1, [r7, #32]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fa20 	bl	8003dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00d      	beq.n	80039a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	2b04      	cmp	r3, #4
 800398c:	d107      	bne.n	800399e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800399c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e005      	b.n	80039ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039a2:	893b      	ldrh	r3, [r7, #8]
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	00010002 	.word	0x00010002

080039bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4611      	mov	r1, r2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	817b      	strh	r3, [r7, #10]
 80039ce:	460b      	mov	r3, r1
 80039d0:	813b      	strh	r3, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 f8c2 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00d      	beq.n	8003a2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a1c:	d103      	bne.n	8003a26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e0aa      	b.n	8003b80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a2a:	897b      	ldrh	r3, [r7, #10]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3c:	6a3a      	ldr	r2, [r7, #32]
 8003a3e:	4952      	ldr	r1, [pc, #328]	@ (8003b88 <I2C_RequestMemoryRead+0x1cc>)
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 f91d 	bl	8003c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e097      	b.n	8003b80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a68:	6a39      	ldr	r1, [r7, #32]
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f9a8 	bl	8003dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00d      	beq.n	8003a92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d107      	bne.n	8003a8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e076      	b.n	8003b80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d105      	bne.n	8003aa4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a98:	893b      	ldrh	r3, [r7, #8]
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	611a      	str	r2, [r3, #16]
 8003aa2:	e021      	b.n	8003ae8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003aa4:	893b      	ldrh	r3, [r7, #8]
 8003aa6:	0a1b      	lsrs	r3, r3, #8
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab4:	6a39      	ldr	r1, [r7, #32]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f982 	bl	8003dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00d      	beq.n	8003ade <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d107      	bne.n	8003ada <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ad8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e050      	b.n	8003b80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ade:	893b      	ldrh	r3, [r7, #8]
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aea:	6a39      	ldr	r1, [r7, #32]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f967 	bl	8003dc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00d      	beq.n	8003b14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d107      	bne.n	8003b10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e035      	b.n	8003b80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f82b 	bl	8003b8c <I2C_WaitOnFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00d      	beq.n	8003b58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b4a:	d103      	bne.n	8003b54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e013      	b.n	8003b80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b58:	897b      	ldrh	r3, [r7, #10]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	6a3a      	ldr	r2, [r7, #32]
 8003b6c:	4906      	ldr	r1, [pc, #24]	@ (8003b88 <I2C_RequestMemoryRead+0x1cc>)
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f886 	bl	8003c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	00010002 	.word	0x00010002

08003b8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b9c:	e048      	b.n	8003c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d044      	beq.n	8003c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba6:	f7fe fb97 	bl	80022d8 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d302      	bcc.n	8003bbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d139      	bne.n	8003c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	0c1b      	lsrs	r3, r3, #16
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d10d      	bne.n	8003be2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	43da      	mvns	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	bf0c      	ite	eq
 8003bd8:	2301      	moveq	r3, #1
 8003bda:	2300      	movne	r3, #0
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	e00c      	b.n	8003bfc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	43da      	mvns	r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	4013      	ands	r3, r2
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bf0c      	ite	eq
 8003bf4:	2301      	moveq	r3, #1
 8003bf6:	2300      	movne	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d116      	bne.n	8003c30 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e023      	b.n	8003c78 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	0c1b      	lsrs	r3, r3, #16
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d10d      	bne.n	8003c56 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	43da      	mvns	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4013      	ands	r3, r2
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	e00c      	b.n	8003c70 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	43da      	mvns	r2, r3
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4013      	ands	r3, r2
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d093      	beq.n	8003b9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c8e:	e071      	b.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c9e:	d123      	bne.n	8003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003cb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd4:	f043 0204 	orr.w	r2, r3, #4
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e067      	b.n	8003db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d041      	beq.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf0:	f7fe faf2 	bl	80022d8 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d302      	bcc.n	8003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d136      	bne.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d10c      	bne.n	8003d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	43da      	mvns	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	bf14      	ite	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	2300      	moveq	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	e00b      	b.n	8003d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	43da      	mvns	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4013      	ands	r3, r2
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	bf14      	ite	ne
 8003d3c:	2301      	movne	r3, #1
 8003d3e:	2300      	moveq	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d016      	beq.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	f043 0220 	orr.w	r2, r3, #32
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e021      	b.n	8003db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	0c1b      	lsrs	r3, r3, #16
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d10c      	bne.n	8003d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	43da      	mvns	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf14      	ite	ne
 8003d90:	2301      	movne	r3, #1
 8003d92:	2300      	moveq	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	e00b      	b.n	8003db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	43da      	mvns	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4013      	ands	r3, r2
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	bf14      	ite	ne
 8003daa:	2301      	movne	r3, #1
 8003dac:	2300      	moveq	r3, #0
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f47f af6d 	bne.w	8003c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dcc:	e034      	b.n	8003e38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f8e3 	bl	8003f9a <I2C_IsAcknowledgeFailed>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e034      	b.n	8003e48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d028      	beq.n	8003e38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de6:	f7fe fa77 	bl	80022d8 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d302      	bcc.n	8003dfc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d11d      	bne.n	8003e38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e06:	2b80      	cmp	r3, #128	@ 0x80
 8003e08:	d016      	beq.n	8003e38 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e24:	f043 0220 	orr.w	r2, r3, #32
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e007      	b.n	8003e48 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e42:	2b80      	cmp	r3, #128	@ 0x80
 8003e44:	d1c3      	bne.n	8003dce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e5c:	e034      	b.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f89b 	bl	8003f9a <I2C_IsAcknowledgeFailed>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e034      	b.n	8003ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d028      	beq.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e76:	f7fe fa2f 	bl	80022d8 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d302      	bcc.n	8003e8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d11d      	bne.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d016      	beq.n	8003ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	f043 0220 	orr.w	r2, r3, #32
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e007      	b.n	8003ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d1c3      	bne.n	8003e5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003eec:	e049      	b.n	8003f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f003 0310 	and.w	r3, r3, #16
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d119      	bne.n	8003f30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0210 	mvn.w	r2, #16
 8003f04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e030      	b.n	8003f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f30:	f7fe f9d2 	bl	80022d8 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d302      	bcc.n	8003f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d11d      	bne.n	8003f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f50:	2b40      	cmp	r3, #64	@ 0x40
 8003f52:	d016      	beq.n	8003f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	f043 0220 	orr.w	r2, r3, #32
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e007      	b.n	8003f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8c:	2b40      	cmp	r3, #64	@ 0x40
 8003f8e:	d1ae      	bne.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb0:	d11b      	bne.n	8003fea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	f043 0204 	orr.w	r2, r3, #4
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	4b20      	ldr	r3, [pc, #128]	@ (8004088 <HAL_PWREx_EnableOverDrive+0x90>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400a:	4a1f      	ldr	r2, [pc, #124]	@ (8004088 <HAL_PWREx_EnableOverDrive+0x90>)
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004010:	6413      	str	r3, [r2, #64]	@ 0x40
 8004012:	4b1d      	ldr	r3, [pc, #116]	@ (8004088 <HAL_PWREx_EnableOverDrive+0x90>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800401e:	4b1b      	ldr	r3, [pc, #108]	@ (800408c <HAL_PWREx_EnableOverDrive+0x94>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004024:	f7fe f958 	bl	80022d8 <HAL_GetTick>
 8004028:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800402a:	e009      	b.n	8004040 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800402c:	f7fe f954 	bl	80022d8 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800403a:	d901      	bls.n	8004040 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e01f      	b.n	8004080 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004040:	4b13      	ldr	r3, [pc, #76]	@ (8004090 <HAL_PWREx_EnableOverDrive+0x98>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800404c:	d1ee      	bne.n	800402c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800404e:	4b11      	ldr	r3, [pc, #68]	@ (8004094 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004054:	f7fe f940 	bl	80022d8 <HAL_GetTick>
 8004058:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800405a:	e009      	b.n	8004070 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800405c:	f7fe f93c 	bl	80022d8 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800406a:	d901      	bls.n	8004070 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e007      	b.n	8004080 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004070:	4b07      	ldr	r3, [pc, #28]	@ (8004090 <HAL_PWREx_EnableOverDrive+0x98>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004078:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800407c:	d1ee      	bne.n	800405c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40023800 	.word	0x40023800
 800408c:	420e0040 	.word	0x420e0040
 8004090:	40007000 	.word	0x40007000
 8004094:	420e0044 	.word	0x420e0044

08004098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0cc      	b.n	8004246 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040ac:	4b68      	ldr	r3, [pc, #416]	@ (8004250 <HAL_RCC_ClockConfig+0x1b8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d90c      	bls.n	80040d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b65      	ldr	r3, [pc, #404]	@ (8004250 <HAL_RCC_ClockConfig+0x1b8>)
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c2:	4b63      	ldr	r3, [pc, #396]	@ (8004250 <HAL_RCC_ClockConfig+0x1b8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0b8      	b.n	8004246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d020      	beq.n	8004122 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040ec:	4b59      	ldr	r3, [pc, #356]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a58      	ldr	r2, [pc, #352]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004104:	4b53      	ldr	r3, [pc, #332]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4a52      	ldr	r2, [pc, #328]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800410e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004110:	4b50      	ldr	r3, [pc, #320]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	494d      	ldr	r1, [pc, #308]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	4313      	orrs	r3, r2
 8004120:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d044      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d107      	bne.n	8004146 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004136:	4b47      	ldr	r3, [pc, #284]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d119      	bne.n	8004176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e07f      	b.n	8004246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d003      	beq.n	8004156 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004152:	2b03      	cmp	r3, #3
 8004154:	d107      	bne.n	8004166 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004156:	4b3f      	ldr	r3, [pc, #252]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d109      	bne.n	8004176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e06f      	b.n	8004246 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004166:	4b3b      	ldr	r3, [pc, #236]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e067      	b.n	8004246 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004176:	4b37      	ldr	r3, [pc, #220]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f023 0203 	bic.w	r2, r3, #3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	4934      	ldr	r1, [pc, #208]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	4313      	orrs	r3, r2
 8004186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004188:	f7fe f8a6 	bl	80022d8 <HAL_GetTick>
 800418c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418e:	e00a      	b.n	80041a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004190:	f7fe f8a2 	bl	80022d8 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e04f      	b.n	8004246 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 020c 	and.w	r2, r3, #12
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d1eb      	bne.n	8004190 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041b8:	4b25      	ldr	r3, [pc, #148]	@ (8004250 <HAL_RCC_ClockConfig+0x1b8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d20c      	bcs.n	80041e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c6:	4b22      	ldr	r3, [pc, #136]	@ (8004250 <HAL_RCC_ClockConfig+0x1b8>)
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ce:	4b20      	ldr	r3, [pc, #128]	@ (8004250 <HAL_RCC_ClockConfig+0x1b8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d001      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e032      	b.n	8004246 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d008      	beq.n	80041fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041ec:	4b19      	ldr	r3, [pc, #100]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	4916      	ldr	r1, [pc, #88]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0308 	and.w	r3, r3, #8
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800420a:	4b12      	ldr	r3, [pc, #72]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	490e      	ldr	r1, [pc, #56]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	4313      	orrs	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800421e:	f000 f855 	bl	80042cc <HAL_RCC_GetSysClockFreq>
 8004222:	4602      	mov	r2, r0
 8004224:	4b0b      	ldr	r3, [pc, #44]	@ (8004254 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	091b      	lsrs	r3, r3, #4
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	490a      	ldr	r1, [pc, #40]	@ (8004258 <HAL_RCC_ClockConfig+0x1c0>)
 8004230:	5ccb      	ldrb	r3, [r1, r3]
 8004232:	fa22 f303 	lsr.w	r3, r2, r3
 8004236:	4a09      	ldr	r2, [pc, #36]	@ (800425c <HAL_RCC_ClockConfig+0x1c4>)
 8004238:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800423a:	4b09      	ldr	r3, [pc, #36]	@ (8004260 <HAL_RCC_ClockConfig+0x1c8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7fe f806 	bl	8002250 <HAL_InitTick>

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40023c00 	.word	0x40023c00
 8004254:	40023800 	.word	0x40023800
 8004258:	08007398 	.word	0x08007398
 800425c:	20000000 	.word	0x20000000
 8004260:	20000004 	.word	0x20000004

08004264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004268:	4b03      	ldr	r3, [pc, #12]	@ (8004278 <HAL_RCC_GetHCLKFreq+0x14>)
 800426a:	681b      	ldr	r3, [r3, #0]
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000000 	.word	0x20000000

0800427c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004280:	f7ff fff0 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 8004284:	4602      	mov	r2, r0
 8004286:	4b05      	ldr	r3, [pc, #20]	@ (800429c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	0a9b      	lsrs	r3, r3, #10
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	4903      	ldr	r1, [pc, #12]	@ (80042a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004292:	5ccb      	ldrb	r3, [r1, r3]
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004298:	4618      	mov	r0, r3
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40023800 	.word	0x40023800
 80042a0:	080073a8 	.word	0x080073a8

080042a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042a8:	f7ff ffdc 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b05      	ldr	r3, [pc, #20]	@ (80042c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	0b5b      	lsrs	r3, r3, #13
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4903      	ldr	r1, [pc, #12]	@ (80042c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40023800 	.word	0x40023800
 80042c8:	080073a8 	.word	0x080073a8

080042cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d0:	b0ae      	sub	sp, #184	@ 0xb8
 80042d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042f2:	4bcb      	ldr	r3, [pc, #812]	@ (8004620 <HAL_RCC_GetSysClockFreq+0x354>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b0c      	cmp	r3, #12
 80042fc:	f200 8206 	bhi.w	800470c <HAL_RCC_GetSysClockFreq+0x440>
 8004300:	a201      	add	r2, pc, #4	@ (adr r2, 8004308 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004306:	bf00      	nop
 8004308:	0800433d 	.word	0x0800433d
 800430c:	0800470d 	.word	0x0800470d
 8004310:	0800470d 	.word	0x0800470d
 8004314:	0800470d 	.word	0x0800470d
 8004318:	08004345 	.word	0x08004345
 800431c:	0800470d 	.word	0x0800470d
 8004320:	0800470d 	.word	0x0800470d
 8004324:	0800470d 	.word	0x0800470d
 8004328:	0800434d 	.word	0x0800434d
 800432c:	0800470d 	.word	0x0800470d
 8004330:	0800470d 	.word	0x0800470d
 8004334:	0800470d 	.word	0x0800470d
 8004338:	0800453d 	.word	0x0800453d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800433c:	4bb9      	ldr	r3, [pc, #740]	@ (8004624 <HAL_RCC_GetSysClockFreq+0x358>)
 800433e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004342:	e1e7      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004344:	4bb8      	ldr	r3, [pc, #736]	@ (8004628 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004346:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800434a:	e1e3      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800434c:	4bb4      	ldr	r3, [pc, #720]	@ (8004620 <HAL_RCC_GetSysClockFreq+0x354>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004354:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004358:	4bb1      	ldr	r3, [pc, #708]	@ (8004620 <HAL_RCC_GetSysClockFreq+0x354>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d071      	beq.n	8004448 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004364:	4bae      	ldr	r3, [pc, #696]	@ (8004620 <HAL_RCC_GetSysClockFreq+0x354>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	099b      	lsrs	r3, r3, #6
 800436a:	2200      	movs	r2, #0
 800436c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004370:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004374:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004380:	2300      	movs	r3, #0
 8004382:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004386:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800438a:	4622      	mov	r2, r4
 800438c:	462b      	mov	r3, r5
 800438e:	f04f 0000 	mov.w	r0, #0
 8004392:	f04f 0100 	mov.w	r1, #0
 8004396:	0159      	lsls	r1, r3, #5
 8004398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800439c:	0150      	lsls	r0, r2, #5
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4621      	mov	r1, r4
 80043a4:	1a51      	subs	r1, r2, r1
 80043a6:	6439      	str	r1, [r7, #64]	@ 0x40
 80043a8:	4629      	mov	r1, r5
 80043aa:	eb63 0301 	sbc.w	r3, r3, r1
 80043ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80043bc:	4649      	mov	r1, r9
 80043be:	018b      	lsls	r3, r1, #6
 80043c0:	4641      	mov	r1, r8
 80043c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043c6:	4641      	mov	r1, r8
 80043c8:	018a      	lsls	r2, r1, #6
 80043ca:	4641      	mov	r1, r8
 80043cc:	1a51      	subs	r1, r2, r1
 80043ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043d0:	4649      	mov	r1, r9
 80043d2:	eb63 0301 	sbc.w	r3, r3, r1
 80043d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80043e4:	4649      	mov	r1, r9
 80043e6:	00cb      	lsls	r3, r1, #3
 80043e8:	4641      	mov	r1, r8
 80043ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ee:	4641      	mov	r1, r8
 80043f0:	00ca      	lsls	r2, r1, #3
 80043f2:	4610      	mov	r0, r2
 80043f4:	4619      	mov	r1, r3
 80043f6:	4603      	mov	r3, r0
 80043f8:	4622      	mov	r2, r4
 80043fa:	189b      	adds	r3, r3, r2
 80043fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80043fe:	462b      	mov	r3, r5
 8004400:	460a      	mov	r2, r1
 8004402:	eb42 0303 	adc.w	r3, r2, r3
 8004406:	637b      	str	r3, [r7, #52]	@ 0x34
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004414:	4629      	mov	r1, r5
 8004416:	024b      	lsls	r3, r1, #9
 8004418:	4621      	mov	r1, r4
 800441a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800441e:	4621      	mov	r1, r4
 8004420:	024a      	lsls	r2, r1, #9
 8004422:	4610      	mov	r0, r2
 8004424:	4619      	mov	r1, r3
 8004426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800442a:	2200      	movs	r2, #0
 800442c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004430:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004434:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004438:	f7fc fb68 	bl	8000b0c <__aeabi_uldivmod>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4613      	mov	r3, r2
 8004442:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004446:	e067      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004448:	4b75      	ldr	r3, [pc, #468]	@ (8004620 <HAL_RCC_GetSysClockFreq+0x354>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	099b      	lsrs	r3, r3, #6
 800444e:	2200      	movs	r2, #0
 8004450:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004454:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004458:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800445c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004460:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004462:	2300      	movs	r3, #0
 8004464:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004466:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800446a:	4622      	mov	r2, r4
 800446c:	462b      	mov	r3, r5
 800446e:	f04f 0000 	mov.w	r0, #0
 8004472:	f04f 0100 	mov.w	r1, #0
 8004476:	0159      	lsls	r1, r3, #5
 8004478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800447c:	0150      	lsls	r0, r2, #5
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4621      	mov	r1, r4
 8004484:	1a51      	subs	r1, r2, r1
 8004486:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004488:	4629      	mov	r1, r5
 800448a:	eb63 0301 	sbc.w	r3, r3, r1
 800448e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800449c:	4649      	mov	r1, r9
 800449e:	018b      	lsls	r3, r1, #6
 80044a0:	4641      	mov	r1, r8
 80044a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044a6:	4641      	mov	r1, r8
 80044a8:	018a      	lsls	r2, r1, #6
 80044aa:	4641      	mov	r1, r8
 80044ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80044b0:	4649      	mov	r1, r9
 80044b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044ca:	4692      	mov	sl, r2
 80044cc:	469b      	mov	fp, r3
 80044ce:	4623      	mov	r3, r4
 80044d0:	eb1a 0303 	adds.w	r3, sl, r3
 80044d4:	623b      	str	r3, [r7, #32]
 80044d6:	462b      	mov	r3, r5
 80044d8:	eb4b 0303 	adc.w	r3, fp, r3
 80044dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80044ea:	4629      	mov	r1, r5
 80044ec:	028b      	lsls	r3, r1, #10
 80044ee:	4621      	mov	r1, r4
 80044f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044f4:	4621      	mov	r1, r4
 80044f6:	028a      	lsls	r2, r1, #10
 80044f8:	4610      	mov	r0, r2
 80044fa:	4619      	mov	r1, r3
 80044fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004500:	2200      	movs	r2, #0
 8004502:	673b      	str	r3, [r7, #112]	@ 0x70
 8004504:	677a      	str	r2, [r7, #116]	@ 0x74
 8004506:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800450a:	f7fc faff 	bl	8000b0c <__aeabi_uldivmod>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4613      	mov	r3, r2
 8004514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004518:	4b41      	ldr	r3, [pc, #260]	@ (8004620 <HAL_RCC_GetSysClockFreq+0x354>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	0c1b      	lsrs	r3, r3, #16
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	3301      	adds	r3, #1
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800452a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800452e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004532:	fbb2 f3f3 	udiv	r3, r2, r3
 8004536:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800453a:	e0eb      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800453c:	4b38      	ldr	r3, [pc, #224]	@ (8004620 <HAL_RCC_GetSysClockFreq+0x354>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004544:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004548:	4b35      	ldr	r3, [pc, #212]	@ (8004620 <HAL_RCC_GetSysClockFreq+0x354>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d06b      	beq.n	800462c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004554:	4b32      	ldr	r3, [pc, #200]	@ (8004620 <HAL_RCC_GetSysClockFreq+0x354>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	099b      	lsrs	r3, r3, #6
 800455a:	2200      	movs	r2, #0
 800455c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800455e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004560:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004566:	663b      	str	r3, [r7, #96]	@ 0x60
 8004568:	2300      	movs	r3, #0
 800456a:	667b      	str	r3, [r7, #100]	@ 0x64
 800456c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004570:	4622      	mov	r2, r4
 8004572:	462b      	mov	r3, r5
 8004574:	f04f 0000 	mov.w	r0, #0
 8004578:	f04f 0100 	mov.w	r1, #0
 800457c:	0159      	lsls	r1, r3, #5
 800457e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004582:	0150      	lsls	r0, r2, #5
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4621      	mov	r1, r4
 800458a:	1a51      	subs	r1, r2, r1
 800458c:	61b9      	str	r1, [r7, #24]
 800458e:	4629      	mov	r1, r5
 8004590:	eb63 0301 	sbc.w	r3, r3, r1
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80045a2:	4659      	mov	r1, fp
 80045a4:	018b      	lsls	r3, r1, #6
 80045a6:	4651      	mov	r1, sl
 80045a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ac:	4651      	mov	r1, sl
 80045ae:	018a      	lsls	r2, r1, #6
 80045b0:	4651      	mov	r1, sl
 80045b2:	ebb2 0801 	subs.w	r8, r2, r1
 80045b6:	4659      	mov	r1, fp
 80045b8:	eb63 0901 	sbc.w	r9, r3, r1
 80045bc:	f04f 0200 	mov.w	r2, #0
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045d0:	4690      	mov	r8, r2
 80045d2:	4699      	mov	r9, r3
 80045d4:	4623      	mov	r3, r4
 80045d6:	eb18 0303 	adds.w	r3, r8, r3
 80045da:	613b      	str	r3, [r7, #16]
 80045dc:	462b      	mov	r3, r5
 80045de:	eb49 0303 	adc.w	r3, r9, r3
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80045f0:	4629      	mov	r1, r5
 80045f2:	024b      	lsls	r3, r1, #9
 80045f4:	4621      	mov	r1, r4
 80045f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045fa:	4621      	mov	r1, r4
 80045fc:	024a      	lsls	r2, r1, #9
 80045fe:	4610      	mov	r0, r2
 8004600:	4619      	mov	r1, r3
 8004602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004606:	2200      	movs	r2, #0
 8004608:	65bb      	str	r3, [r7, #88]	@ 0x58
 800460a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800460c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004610:	f7fc fa7c 	bl	8000b0c <__aeabi_uldivmod>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4613      	mov	r3, r2
 800461a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800461e:	e065      	b.n	80046ec <HAL_RCC_GetSysClockFreq+0x420>
 8004620:	40023800 	.word	0x40023800
 8004624:	00f42400 	.word	0x00f42400
 8004628:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800462c:	4b3d      	ldr	r3, [pc, #244]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x458>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	099b      	lsrs	r3, r3, #6
 8004632:	2200      	movs	r2, #0
 8004634:	4618      	mov	r0, r3
 8004636:	4611      	mov	r1, r2
 8004638:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800463c:	653b      	str	r3, [r7, #80]	@ 0x50
 800463e:	2300      	movs	r3, #0
 8004640:	657b      	str	r3, [r7, #84]	@ 0x54
 8004642:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004646:	4642      	mov	r2, r8
 8004648:	464b      	mov	r3, r9
 800464a:	f04f 0000 	mov.w	r0, #0
 800464e:	f04f 0100 	mov.w	r1, #0
 8004652:	0159      	lsls	r1, r3, #5
 8004654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004658:	0150      	lsls	r0, r2, #5
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4641      	mov	r1, r8
 8004660:	1a51      	subs	r1, r2, r1
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	4649      	mov	r1, r9
 8004666:	eb63 0301 	sbc.w	r3, r3, r1
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004678:	4659      	mov	r1, fp
 800467a:	018b      	lsls	r3, r1, #6
 800467c:	4651      	mov	r1, sl
 800467e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004682:	4651      	mov	r1, sl
 8004684:	018a      	lsls	r2, r1, #6
 8004686:	4651      	mov	r1, sl
 8004688:	1a54      	subs	r4, r2, r1
 800468a:	4659      	mov	r1, fp
 800468c:	eb63 0501 	sbc.w	r5, r3, r1
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	00eb      	lsls	r3, r5, #3
 800469a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800469e:	00e2      	lsls	r2, r4, #3
 80046a0:	4614      	mov	r4, r2
 80046a2:	461d      	mov	r5, r3
 80046a4:	4643      	mov	r3, r8
 80046a6:	18e3      	adds	r3, r4, r3
 80046a8:	603b      	str	r3, [r7, #0]
 80046aa:	464b      	mov	r3, r9
 80046ac:	eb45 0303 	adc.w	r3, r5, r3
 80046b0:	607b      	str	r3, [r7, #4]
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046be:	4629      	mov	r1, r5
 80046c0:	028b      	lsls	r3, r1, #10
 80046c2:	4621      	mov	r1, r4
 80046c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046c8:	4621      	mov	r1, r4
 80046ca:	028a      	lsls	r2, r1, #10
 80046cc:	4610      	mov	r0, r2
 80046ce:	4619      	mov	r1, r3
 80046d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046d4:	2200      	movs	r2, #0
 80046d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046d8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80046da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046de:	f7fc fa15 	bl	8000b0c <__aeabi_uldivmod>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4613      	mov	r3, r2
 80046e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80046ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x458>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	0f1b      	lsrs	r3, r3, #28
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80046fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004702:	fbb2 f3f3 	udiv	r3, r2, r3
 8004706:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800470a:	e003      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800470c:	4b06      	ldr	r3, [pc, #24]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x45c>)
 800470e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004712:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004714:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004718:	4618      	mov	r0, r3
 800471a:	37b8      	adds	r7, #184	@ 0xb8
 800471c:	46bd      	mov	sp, r7
 800471e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004722:	bf00      	nop
 8004724:	40023800 	.word	0x40023800
 8004728:	00f42400 	.word	0x00f42400

0800472c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e28d      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 8083 	beq.w	8004852 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800474c:	4b94      	ldr	r3, [pc, #592]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b04      	cmp	r3, #4
 8004756:	d019      	beq.n	800478c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004758:	4b91      	ldr	r3, [pc, #580]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004760:	2b08      	cmp	r3, #8
 8004762:	d106      	bne.n	8004772 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004764:	4b8e      	ldr	r3, [pc, #568]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800476c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004770:	d00c      	beq.n	800478c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004772:	4b8b      	ldr	r3, [pc, #556]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800477a:	2b0c      	cmp	r3, #12
 800477c:	d112      	bne.n	80047a4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800477e:	4b88      	ldr	r3, [pc, #544]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004786:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800478a:	d10b      	bne.n	80047a4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800478c:	4b84      	ldr	r3, [pc, #528]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d05b      	beq.n	8004850 <HAL_RCC_OscConfig+0x124>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d157      	bne.n	8004850 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e25a      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ac:	d106      	bne.n	80047bc <HAL_RCC_OscConfig+0x90>
 80047ae:	4b7c      	ldr	r3, [pc, #496]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a7b      	ldr	r2, [pc, #492]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 80047b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b8:	6013      	str	r3, [r2, #0]
 80047ba:	e01d      	b.n	80047f8 <HAL_RCC_OscConfig+0xcc>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCC_OscConfig+0xb4>
 80047c6:	4b76      	ldr	r3, [pc, #472]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a75      	ldr	r2, [pc, #468]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 80047cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	4b73      	ldr	r3, [pc, #460]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a72      	ldr	r2, [pc, #456]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 80047d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	e00b      	b.n	80047f8 <HAL_RCC_OscConfig+0xcc>
 80047e0:	4b6f      	ldr	r3, [pc, #444]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a6e      	ldr	r2, [pc, #440]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 80047e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	4b6c      	ldr	r3, [pc, #432]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a6b      	ldr	r2, [pc, #428]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 80047f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d013      	beq.n	8004828 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fd fd6a 	bl	80022d8 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004808:	f7fd fd66 	bl	80022d8 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b64      	cmp	r3, #100	@ 0x64
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e21f      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800481a:	4b61      	ldr	r3, [pc, #388]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0xdc>
 8004826:	e014      	b.n	8004852 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fd fd56 	bl	80022d8 <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004830:	f7fd fd52 	bl	80022d8 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b64      	cmp	r3, #100	@ 0x64
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e20b      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004842:	4b57      	ldr	r3, [pc, #348]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x104>
 800484e:	e000      	b.n	8004852 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d06f      	beq.n	800493e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800485e:	4b50      	ldr	r3, [pc, #320]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 030c 	and.w	r3, r3, #12
 8004866:	2b00      	cmp	r3, #0
 8004868:	d017      	beq.n	800489a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800486a:	4b4d      	ldr	r3, [pc, #308]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004872:	2b08      	cmp	r3, #8
 8004874:	d105      	bne.n	8004882 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004876:	4b4a      	ldr	r3, [pc, #296]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004882:	4b47      	ldr	r3, [pc, #284]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800488a:	2b0c      	cmp	r3, #12
 800488c:	d11c      	bne.n	80048c8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800488e:	4b44      	ldr	r3, [pc, #272]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d116      	bne.n	80048c8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800489a:	4b41      	ldr	r3, [pc, #260]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <HAL_RCC_OscConfig+0x186>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d001      	beq.n	80048b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e1d3      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b2:	4b3b      	ldr	r3, [pc, #236]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4937      	ldr	r1, [pc, #220]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048c6:	e03a      	b.n	800493e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d020      	beq.n	8004912 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048d0:	4b34      	ldr	r3, [pc, #208]	@ (80049a4 <HAL_RCC_OscConfig+0x278>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fd fcff 	bl	80022d8 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048de:	f7fd fcfb 	bl	80022d8 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e1b4      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f0:	4b2b      	ldr	r3, [pc, #172]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fc:	4b28      	ldr	r3, [pc, #160]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	4925      	ldr	r1, [pc, #148]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 800490c:	4313      	orrs	r3, r2
 800490e:	600b      	str	r3, [r1, #0]
 8004910:	e015      	b.n	800493e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004912:	4b24      	ldr	r3, [pc, #144]	@ (80049a4 <HAL_RCC_OscConfig+0x278>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fd fcde 	bl	80022d8 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004920:	f7fd fcda 	bl	80022d8 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e193      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004932:	4b1b      	ldr	r3, [pc, #108]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d036      	beq.n	80049b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d016      	beq.n	8004980 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004952:	4b15      	ldr	r3, [pc, #84]	@ (80049a8 <HAL_RCC_OscConfig+0x27c>)
 8004954:	2201      	movs	r2, #1
 8004956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004958:	f7fd fcbe 	bl	80022d8 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004960:	f7fd fcba 	bl	80022d8 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e173      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004972:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <HAL_RCC_OscConfig+0x274>)
 8004974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x234>
 800497e:	e01b      	b.n	80049b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004980:	4b09      	ldr	r3, [pc, #36]	@ (80049a8 <HAL_RCC_OscConfig+0x27c>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004986:	f7fd fca7 	bl	80022d8 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800498c:	e00e      	b.n	80049ac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800498e:	f7fd fca3 	bl	80022d8 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d907      	bls.n	80049ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e15c      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
 80049a0:	40023800 	.word	0x40023800
 80049a4:	42470000 	.word	0x42470000
 80049a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049ac:	4b8a      	ldr	r3, [pc, #552]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 80049ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1ea      	bne.n	800498e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 8097 	beq.w	8004af4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049c6:	2300      	movs	r3, #0
 80049c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ca:	4b83      	ldr	r3, [pc, #524]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10f      	bne.n	80049f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	4b7f      	ldr	r3, [pc, #508]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	4a7e      	ldr	r2, [pc, #504]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 80049e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80049e6:	4b7c      	ldr	r3, [pc, #496]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ee:	60bb      	str	r3, [r7, #8]
 80049f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049f2:	2301      	movs	r3, #1
 80049f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f6:	4b79      	ldr	r3, [pc, #484]	@ (8004bdc <HAL_RCC_OscConfig+0x4b0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d118      	bne.n	8004a34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a02:	4b76      	ldr	r3, [pc, #472]	@ (8004bdc <HAL_RCC_OscConfig+0x4b0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a75      	ldr	r2, [pc, #468]	@ (8004bdc <HAL_RCC_OscConfig+0x4b0>)
 8004a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a0e:	f7fd fc63 	bl	80022d8 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a16:	f7fd fc5f 	bl	80022d8 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e118      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a28:	4b6c      	ldr	r3, [pc, #432]	@ (8004bdc <HAL_RCC_OscConfig+0x4b0>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d106      	bne.n	8004a4a <HAL_RCC_OscConfig+0x31e>
 8004a3c:	4b66      	ldr	r3, [pc, #408]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a40:	4a65      	ldr	r2, [pc, #404]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a48:	e01c      	b.n	8004a84 <HAL_RCC_OscConfig+0x358>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b05      	cmp	r3, #5
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCC_OscConfig+0x340>
 8004a52:	4b61      	ldr	r3, [pc, #388]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a56:	4a60      	ldr	r2, [pc, #384]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004a58:	f043 0304 	orr.w	r3, r3, #4
 8004a5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a5e:	4b5e      	ldr	r3, [pc, #376]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a62:	4a5d      	ldr	r2, [pc, #372]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004a64:	f043 0301 	orr.w	r3, r3, #1
 8004a68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a6a:	e00b      	b.n	8004a84 <HAL_RCC_OscConfig+0x358>
 8004a6c:	4b5a      	ldr	r3, [pc, #360]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a70:	4a59      	ldr	r2, [pc, #356]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a78:	4b57      	ldr	r3, [pc, #348]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7c:	4a56      	ldr	r2, [pc, #344]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004a7e:	f023 0304 	bic.w	r3, r3, #4
 8004a82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d015      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8c:	f7fd fc24 	bl	80022d8 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a92:	e00a      	b.n	8004aaa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a94:	f7fd fc20 	bl	80022d8 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e0d7      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aaa:	4b4b      	ldr	r3, [pc, #300]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0ee      	beq.n	8004a94 <HAL_RCC_OscConfig+0x368>
 8004ab6:	e014      	b.n	8004ae2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab8:	f7fd fc0e 	bl	80022d8 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac0:	f7fd fc0a 	bl	80022d8 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e0c1      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad6:	4b40      	ldr	r3, [pc, #256]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1ee      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ae2:	7dfb      	ldrb	r3, [r7, #23]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d105      	bne.n	8004af4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	4a3a      	ldr	r2, [pc, #232]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004af2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80ad 	beq.w	8004c58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004afe:	4b36      	ldr	r3, [pc, #216]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d060      	beq.n	8004bcc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d145      	bne.n	8004b9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b12:	4b33      	ldr	r3, [pc, #204]	@ (8004be0 <HAL_RCC_OscConfig+0x4b4>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b18:	f7fd fbde 	bl	80022d8 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b20:	f7fd fbda 	bl	80022d8 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e093      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b32:	4b29      	ldr	r3, [pc, #164]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69da      	ldr	r2, [r3, #28]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4c:	019b      	lsls	r3, r3, #6
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b54:	085b      	lsrs	r3, r3, #1
 8004b56:	3b01      	subs	r3, #1
 8004b58:	041b      	lsls	r3, r3, #16
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b60:	061b      	lsls	r3, r3, #24
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b68:	071b      	lsls	r3, r3, #28
 8004b6a:	491b      	ldr	r1, [pc, #108]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b70:	4b1b      	ldr	r3, [pc, #108]	@ (8004be0 <HAL_RCC_OscConfig+0x4b4>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fd fbaf 	bl	80022d8 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b7e:	f7fd fbab 	bl	80022d8 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e064      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b90:	4b11      	ldr	r3, [pc, #68]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x452>
 8004b9c:	e05c      	b.n	8004c58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b9e:	4b10      	ldr	r3, [pc, #64]	@ (8004be0 <HAL_RCC_OscConfig+0x4b4>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba4:	f7fd fb98 	bl	80022d8 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bac:	f7fd fb94 	bl	80022d8 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e04d      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bbe:	4b06      	ldr	r3, [pc, #24]	@ (8004bd8 <HAL_RCC_OscConfig+0x4ac>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0x480>
 8004bca:	e045      	b.n	8004c58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d107      	bne.n	8004be4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e040      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	40007000 	.word	0x40007000
 8004be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004be4:	4b1f      	ldr	r3, [pc, #124]	@ (8004c64 <HAL_RCC_OscConfig+0x538>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d030      	beq.n	8004c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d129      	bne.n	8004c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d122      	bne.n	8004c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c14:	4013      	ands	r3, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d119      	bne.n	8004c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2a:	085b      	lsrs	r3, r3, #1
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d10f      	bne.n	8004c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d107      	bne.n	8004c54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40023800 	.word	0x40023800

08004c68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e041      	b.n	8004cfe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fd f872 	bl	8001d78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	f000 fc0e 	bl	80054c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d109      	bne.n	8004d2c <HAL_TIM_PWM_Start+0x24>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	bf14      	ite	ne
 8004d24:	2301      	movne	r3, #1
 8004d26:	2300      	moveq	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	e022      	b.n	8004d72 <HAL_TIM_PWM_Start+0x6a>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d109      	bne.n	8004d46 <HAL_TIM_PWM_Start+0x3e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	bf14      	ite	ne
 8004d3e:	2301      	movne	r3, #1
 8004d40:	2300      	moveq	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	e015      	b.n	8004d72 <HAL_TIM_PWM_Start+0x6a>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d109      	bne.n	8004d60 <HAL_TIM_PWM_Start+0x58>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	bf14      	ite	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	2300      	moveq	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e008      	b.n	8004d72 <HAL_TIM_PWM_Start+0x6a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	bf14      	ite	ne
 8004d6c:	2301      	movne	r3, #1
 8004d6e:	2300      	moveq	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e07c      	b.n	8004e74 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d104      	bne.n	8004d8a <HAL_TIM_PWM_Start+0x82>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d88:	e013      	b.n	8004db2 <HAL_TIM_PWM_Start+0xaa>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d104      	bne.n	8004d9a <HAL_TIM_PWM_Start+0x92>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d98:	e00b      	b.n	8004db2 <HAL_TIM_PWM_Start+0xaa>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d104      	bne.n	8004daa <HAL_TIM_PWM_Start+0xa2>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004da8:	e003      	b.n	8004db2 <HAL_TIM_PWM_Start+0xaa>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2201      	movs	r2, #1
 8004db8:	6839      	ldr	r1, [r7, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fde0 	bl	8005980 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a2d      	ldr	r2, [pc, #180]	@ (8004e7c <HAL_TIM_PWM_Start+0x174>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d004      	beq.n	8004dd4 <HAL_TIM_PWM_Start+0xcc>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a2c      	ldr	r2, [pc, #176]	@ (8004e80 <HAL_TIM_PWM_Start+0x178>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d101      	bne.n	8004dd8 <HAL_TIM_PWM_Start+0xd0>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <HAL_TIM_PWM_Start+0xd2>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004dec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a22      	ldr	r2, [pc, #136]	@ (8004e7c <HAL_TIM_PWM_Start+0x174>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d022      	beq.n	8004e3e <HAL_TIM_PWM_Start+0x136>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e00:	d01d      	beq.n	8004e3e <HAL_TIM_PWM_Start+0x136>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1f      	ldr	r2, [pc, #124]	@ (8004e84 <HAL_TIM_PWM_Start+0x17c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d018      	beq.n	8004e3e <HAL_TIM_PWM_Start+0x136>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1d      	ldr	r2, [pc, #116]	@ (8004e88 <HAL_TIM_PWM_Start+0x180>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <HAL_TIM_PWM_Start+0x136>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8004e8c <HAL_TIM_PWM_Start+0x184>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00e      	beq.n	8004e3e <HAL_TIM_PWM_Start+0x136>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a16      	ldr	r2, [pc, #88]	@ (8004e80 <HAL_TIM_PWM_Start+0x178>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d009      	beq.n	8004e3e <HAL_TIM_PWM_Start+0x136>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a18      	ldr	r2, [pc, #96]	@ (8004e90 <HAL_TIM_PWM_Start+0x188>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <HAL_TIM_PWM_Start+0x136>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a16      	ldr	r2, [pc, #88]	@ (8004e94 <HAL_TIM_PWM_Start+0x18c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d111      	bne.n	8004e62 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b06      	cmp	r3, #6
 8004e4e:	d010      	beq.n	8004e72 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e60:	e007      	b.n	8004e72 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0201 	orr.w	r2, r2, #1
 8004e70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40010000 	.word	0x40010000
 8004e80:	40010400 	.word	0x40010400
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	40014000 	.word	0x40014000
 8004e94:	40001800 	.word	0x40001800

08004e98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e097      	b.n	8004fdc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7fc fedf 	bl	8001c84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2202      	movs	r2, #2
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004edc:	f023 0307 	bic.w	r3, r3, #7
 8004ee0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f000 faeb 	bl	80054c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f1a:	f023 0303 	bic.w	r3, r3, #3
 8004f1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004f38:	f023 030c 	bic.w	r3, r3, #12
 8004f3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	4313      	orrs	r3, r2
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	011a      	lsls	r2, r3, #4
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	031b      	lsls	r3, r3, #12
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004f76:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ff4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ffc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005004:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800500c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d110      	bne.n	8005036 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d102      	bne.n	8005020 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800501a:	7b7b      	ldrb	r3, [r7, #13]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d001      	beq.n	8005024 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e069      	b.n	80050f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005034:	e031      	b.n	800509a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b04      	cmp	r3, #4
 800503a:	d110      	bne.n	800505e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800503c:	7bbb      	ldrb	r3, [r7, #14]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d102      	bne.n	8005048 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005042:	7b3b      	ldrb	r3, [r7, #12]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d001      	beq.n	800504c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e055      	b.n	80050f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800505c:	e01d      	b.n	800509a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d108      	bne.n	8005076 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005064:	7bbb      	ldrb	r3, [r7, #14]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d105      	bne.n	8005076 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800506a:	7b7b      	ldrb	r3, [r7, #13]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d102      	bne.n	8005076 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005070:	7b3b      	ldrb	r3, [r7, #12]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d001      	beq.n	800507a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e03e      	b.n	80050f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2202      	movs	r2, #2
 800507e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2202      	movs	r2, #2
 8005086:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2202      	movs	r2, #2
 800508e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_TIM_Encoder_Start+0xc4>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d008      	beq.n	80050b8 <HAL_TIM_Encoder_Start+0xd4>
 80050a6:	e00f      	b.n	80050c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2201      	movs	r2, #1
 80050ae:	2100      	movs	r1, #0
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 fc65 	bl	8005980 <TIM_CCxChannelCmd>
      break;
 80050b6:	e016      	b.n	80050e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2201      	movs	r2, #1
 80050be:	2104      	movs	r1, #4
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 fc5d 	bl	8005980 <TIM_CCxChannelCmd>
      break;
 80050c6:	e00e      	b.n	80050e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2201      	movs	r2, #1
 80050ce:	2100      	movs	r1, #0
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fc55 	bl	8005980 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2201      	movs	r2, #1
 80050dc:	2104      	movs	r1, #4
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fc4e 	bl	8005980 <TIM_CCxChannelCmd>
      break;
 80050e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d020      	beq.n	8005164 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01b      	beq.n	8005164 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0202 	mvn.w	r2, #2
 8005134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f99e 	bl	800548c <HAL_TIM_IC_CaptureCallback>
 8005150:	e005      	b.n	800515e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f990 	bl	8005478 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f9a1 	bl	80054a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f003 0304 	and.w	r3, r3, #4
 800516a:	2b00      	cmp	r3, #0
 800516c:	d020      	beq.n	80051b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	d01b      	beq.n	80051b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0204 	mvn.w	r2, #4
 8005180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2202      	movs	r2, #2
 8005186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f978 	bl	800548c <HAL_TIM_IC_CaptureCallback>
 800519c:	e005      	b.n	80051aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f96a 	bl	8005478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f97b 	bl	80054a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d020      	beq.n	80051fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01b      	beq.n	80051fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0208 	mvn.w	r2, #8
 80051cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2204      	movs	r2, #4
 80051d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f952 	bl	800548c <HAL_TIM_IC_CaptureCallback>
 80051e8:	e005      	b.n	80051f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f944 	bl	8005478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f955 	bl	80054a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	2b00      	cmp	r3, #0
 8005204:	d020      	beq.n	8005248 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01b      	beq.n	8005248 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0210 	mvn.w	r2, #16
 8005218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2208      	movs	r2, #8
 800521e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f92c 	bl	800548c <HAL_TIM_IC_CaptureCallback>
 8005234:	e005      	b.n	8005242 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f91e 	bl	8005478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f92f 	bl	80054a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00c      	beq.n	800526c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0201 	mvn.w	r2, #1
 8005264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f8fc 	bl	8005464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00c      	beq.n	8005290 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800527c:	2b00      	cmp	r3, #0
 800527e:	d007      	beq.n	8005290 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fc24 	bl	8005ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00c      	beq.n	80052b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d007      	beq.n	80052b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f900 	bl	80054b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00c      	beq.n	80052d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d007      	beq.n	80052d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0220 	mvn.w	r2, #32
 80052d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fbf6 	bl	8005ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e0ae      	b.n	800545c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b0c      	cmp	r3, #12
 800530a:	f200 809f 	bhi.w	800544c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800530e:	a201      	add	r2, pc, #4	@ (adr r2, 8005314 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005314:	08005349 	.word	0x08005349
 8005318:	0800544d 	.word	0x0800544d
 800531c:	0800544d 	.word	0x0800544d
 8005320:	0800544d 	.word	0x0800544d
 8005324:	08005389 	.word	0x08005389
 8005328:	0800544d 	.word	0x0800544d
 800532c:	0800544d 	.word	0x0800544d
 8005330:	0800544d 	.word	0x0800544d
 8005334:	080053cb 	.word	0x080053cb
 8005338:	0800544d 	.word	0x0800544d
 800533c:	0800544d 	.word	0x0800544d
 8005340:	0800544d 	.word	0x0800544d
 8005344:	0800540b 	.word	0x0800540b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f966 	bl	8005620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0208 	orr.w	r2, r2, #8
 8005362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0204 	bic.w	r2, r2, #4
 8005372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6999      	ldr	r1, [r3, #24]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	691a      	ldr	r2, [r3, #16]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	619a      	str	r2, [r3, #24]
      break;
 8005386:	e064      	b.n	8005452 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f9b6 	bl	8005700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6999      	ldr	r1, [r3, #24]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	021a      	lsls	r2, r3, #8
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	619a      	str	r2, [r3, #24]
      break;
 80053c8:	e043      	b.n	8005452 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 fa0b 	bl	80057ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69da      	ldr	r2, [r3, #28]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0208 	orr.w	r2, r2, #8
 80053e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69da      	ldr	r2, [r3, #28]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0204 	bic.w	r2, r2, #4
 80053f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69d9      	ldr	r1, [r3, #28]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	61da      	str	r2, [r3, #28]
      break;
 8005408:	e023      	b.n	8005452 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fa5f 	bl	80058d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69da      	ldr	r2, [r3, #28]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69d9      	ldr	r1, [r3, #28]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	021a      	lsls	r2, r3, #8
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	61da      	str	r2, [r3, #28]
      break;
 800544a:	e002      	b.n	8005452 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	75fb      	strb	r3, [r7, #23]
      break;
 8005450:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800545a:	7dfb      	ldrb	r3, [r7, #23]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a46      	ldr	r2, [pc, #280]	@ (80055f4 <TIM_Base_SetConfig+0x12c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d013      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e6:	d00f      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a43      	ldr	r2, [pc, #268]	@ (80055f8 <TIM_Base_SetConfig+0x130>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00b      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a42      	ldr	r2, [pc, #264]	@ (80055fc <TIM_Base_SetConfig+0x134>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d007      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a41      	ldr	r2, [pc, #260]	@ (8005600 <TIM_Base_SetConfig+0x138>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a40      	ldr	r2, [pc, #256]	@ (8005604 <TIM_Base_SetConfig+0x13c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d108      	bne.n	800551a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a35      	ldr	r2, [pc, #212]	@ (80055f4 <TIM_Base_SetConfig+0x12c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d02b      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005528:	d027      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a32      	ldr	r2, [pc, #200]	@ (80055f8 <TIM_Base_SetConfig+0x130>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d023      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a31      	ldr	r2, [pc, #196]	@ (80055fc <TIM_Base_SetConfig+0x134>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01f      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a30      	ldr	r2, [pc, #192]	@ (8005600 <TIM_Base_SetConfig+0x138>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d01b      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a2f      	ldr	r2, [pc, #188]	@ (8005604 <TIM_Base_SetConfig+0x13c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d017      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a2e      	ldr	r2, [pc, #184]	@ (8005608 <TIM_Base_SetConfig+0x140>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d013      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a2d      	ldr	r2, [pc, #180]	@ (800560c <TIM_Base_SetConfig+0x144>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00f      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a2c      	ldr	r2, [pc, #176]	@ (8005610 <TIM_Base_SetConfig+0x148>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00b      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2b      	ldr	r2, [pc, #172]	@ (8005614 <TIM_Base_SetConfig+0x14c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d007      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2a      	ldr	r2, [pc, #168]	@ (8005618 <TIM_Base_SetConfig+0x150>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a29      	ldr	r2, [pc, #164]	@ (800561c <TIM_Base_SetConfig+0x154>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d108      	bne.n	800558c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a10      	ldr	r2, [pc, #64]	@ (80055f4 <TIM_Base_SetConfig+0x12c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_Base_SetConfig+0xf8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a12      	ldr	r2, [pc, #72]	@ (8005604 <TIM_Base_SetConfig+0x13c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d103      	bne.n	80055c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d105      	bne.n	80055e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f023 0201 	bic.w	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	611a      	str	r2, [r3, #16]
  }
}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40010000 	.word	0x40010000
 80055f8:	40000400 	.word	0x40000400
 80055fc:	40000800 	.word	0x40000800
 8005600:	40000c00 	.word	0x40000c00
 8005604:	40010400 	.word	0x40010400
 8005608:	40014000 	.word	0x40014000
 800560c:	40014400 	.word	0x40014400
 8005610:	40014800 	.word	0x40014800
 8005614:	40001800 	.word	0x40001800
 8005618:	40001c00 	.word	0x40001c00
 800561c:	40002000 	.word	0x40002000

08005620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	f023 0201 	bic.w	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800564e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0303 	bic.w	r3, r3, #3
 8005656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f023 0302 	bic.w	r3, r3, #2
 8005668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a20      	ldr	r2, [pc, #128]	@ (80056f8 <TIM_OC1_SetConfig+0xd8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_OC1_SetConfig+0x64>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a1f      	ldr	r2, [pc, #124]	@ (80056fc <TIM_OC1_SetConfig+0xdc>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d10c      	bne.n	800569e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f023 0308 	bic.w	r3, r3, #8
 800568a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f023 0304 	bic.w	r3, r3, #4
 800569c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a15      	ldr	r2, [pc, #84]	@ (80056f8 <TIM_OC1_SetConfig+0xd8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d003      	beq.n	80056ae <TIM_OC1_SetConfig+0x8e>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a14      	ldr	r2, [pc, #80]	@ (80056fc <TIM_OC1_SetConfig+0xdc>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d111      	bne.n	80056d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	621a      	str	r2, [r3, #32]
}
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	40010000 	.word	0x40010000
 80056fc:	40010400 	.word	0x40010400

08005700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f023 0210 	bic.w	r2, r3, #16
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800572e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	021b      	lsls	r3, r3, #8
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f023 0320 	bic.w	r3, r3, #32
 800574a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4313      	orrs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a22      	ldr	r2, [pc, #136]	@ (80057e4 <TIM_OC2_SetConfig+0xe4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d003      	beq.n	8005768 <TIM_OC2_SetConfig+0x68>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a21      	ldr	r2, [pc, #132]	@ (80057e8 <TIM_OC2_SetConfig+0xe8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d10d      	bne.n	8005784 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800576e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005782:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a17      	ldr	r2, [pc, #92]	@ (80057e4 <TIM_OC2_SetConfig+0xe4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d003      	beq.n	8005794 <TIM_OC2_SetConfig+0x94>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a16      	ldr	r2, [pc, #88]	@ (80057e8 <TIM_OC2_SetConfig+0xe8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d113      	bne.n	80057bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800579a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	621a      	str	r2, [r3, #32]
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40010000 	.word	0x40010000
 80057e8:	40010400 	.word	0x40010400

080057ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a21      	ldr	r2, [pc, #132]	@ (80058cc <TIM_OC3_SetConfig+0xe0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d003      	beq.n	8005852 <TIM_OC3_SetConfig+0x66>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a20      	ldr	r2, [pc, #128]	@ (80058d0 <TIM_OC3_SetConfig+0xe4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d10d      	bne.n	800586e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800586c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a16      	ldr	r2, [pc, #88]	@ (80058cc <TIM_OC3_SetConfig+0xe0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d003      	beq.n	800587e <TIM_OC3_SetConfig+0x92>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a15      	ldr	r2, [pc, #84]	@ (80058d0 <TIM_OC3_SetConfig+0xe4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d113      	bne.n	80058a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800588c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	621a      	str	r2, [r3, #32]
}
 80058c0:	bf00      	nop
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	40010000 	.word	0x40010000
 80058d0:	40010400 	.word	0x40010400

080058d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800590a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800591e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	031b      	lsls	r3, r3, #12
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a12      	ldr	r2, [pc, #72]	@ (8005978 <TIM_OC4_SetConfig+0xa4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_OC4_SetConfig+0x68>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a11      	ldr	r2, [pc, #68]	@ (800597c <TIM_OC4_SetConfig+0xa8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d109      	bne.n	8005950 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005942:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	019b      	lsls	r3, r3, #6
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	621a      	str	r2, [r3, #32]
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40010000 	.word	0x40010000
 800597c:	40010400 	.word	0x40010400

08005980 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f003 031f 	and.w	r3, r3, #31
 8005992:	2201      	movs	r2, #1
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a1a      	ldr	r2, [r3, #32]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	43db      	mvns	r3, r3
 80059a2:	401a      	ands	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a1a      	ldr	r2, [r3, #32]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	fa01 f303 	lsl.w	r3, r1, r3
 80059b8:	431a      	orrs	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	621a      	str	r2, [r3, #32]
}
 80059be:	bf00      	nop
 80059c0:	371c      	adds	r7, #28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
	...

080059cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e05a      	b.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a21      	ldr	r2, [pc, #132]	@ (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d022      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a30:	d01d      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a1d      	ldr	r2, [pc, #116]	@ (8005aac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d018      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d013      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00e      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a18      	ldr	r2, [pc, #96]	@ (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d009      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a17      	ldr	r2, [pc, #92]	@ (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d004      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a15      	ldr	r2, [pc, #84]	@ (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d10c      	bne.n	8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40010000 	.word	0x40010000
 8005aac:	40000400 	.word	0x40000400
 8005ab0:	40000800 	.word	0x40000800
 8005ab4:	40000c00 	.word	0x40000c00
 8005ab8:	40010400 	.word	0x40010400
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40001800 	.word	0x40001800

08005ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e042      	b.n	8005b84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fc f992 	bl	8001e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2224      	movs	r2, #36	@ 0x24
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fcdb 	bl	80064ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695a      	ldr	r2, [r3, #20]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	4613      	mov	r3, r2
 8005b98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	d112      	bne.n	8005bcc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d002      	beq.n	8005bb2 <HAL_UART_Receive_IT+0x26>
 8005bac:	88fb      	ldrh	r3, [r7, #6]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e00b      	b.n	8005bce <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005bbc:	88fb      	ldrh	r3, [r7, #6]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 faba 	bl	800613c <UART_Start_Receive_IT>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	e000      	b.n	8005bce <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005bcc:	2302      	movs	r3, #2
  }
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b0ba      	sub	sp, #232	@ 0xe8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10f      	bne.n	8005c3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <HAL_UART_IRQHandler+0x66>
 8005c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fb99 	bl	800636e <UART_Receive_IT>
      return;
 8005c3c:	e25b      	b.n	80060f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 80de 	beq.w	8005e04 <HAL_UART_IRQHandler+0x22c>
 8005c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d106      	bne.n	8005c62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c58:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 80d1 	beq.w	8005e04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00b      	beq.n	8005c86 <HAL_UART_IRQHandler+0xae>
 8005c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d005      	beq.n	8005c86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7e:	f043 0201 	orr.w	r2, r3, #1
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00b      	beq.n	8005caa <HAL_UART_IRQHandler+0xd2>
 8005c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca2:	f043 0202 	orr.w	r2, r3, #2
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00b      	beq.n	8005cce <HAL_UART_IRQHandler+0xf6>
 8005cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d005      	beq.n	8005cce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc6:	f043 0204 	orr.w	r2, r3, #4
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d011      	beq.n	8005cfe <HAL_UART_IRQHandler+0x126>
 8005cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d105      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d005      	beq.n	8005cfe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf6:	f043 0208 	orr.w	r2, r3, #8
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 81f2 	beq.w	80060ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_UART_IRQHandler+0x14e>
 8005d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fb24 	bl	800636e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d30:	2b40      	cmp	r3, #64	@ 0x40
 8005d32:	bf0c      	ite	eq
 8005d34:	2301      	moveq	r3, #1
 8005d36:	2300      	movne	r3, #0
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d42:	f003 0308 	and.w	r3, r3, #8
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d103      	bne.n	8005d52 <HAL_UART_IRQHandler+0x17a>
 8005d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d04f      	beq.n	8005df2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fa2c 	bl	80061b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d62:	2b40      	cmp	r3, #64	@ 0x40
 8005d64:	d141      	bne.n	8005dea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3314      	adds	r3, #20
 8005d6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3314      	adds	r3, #20
 8005d8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1d9      	bne.n	8005d66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d013      	beq.n	8005de2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dbe:	4a7e      	ldr	r2, [pc, #504]	@ (8005fb8 <HAL_UART_IRQHandler+0x3e0>)
 8005dc0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fc fce6 	bl	8002798 <HAL_DMA_Abort_IT>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d016      	beq.n	8005e00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ddc:	4610      	mov	r0, r2
 8005dde:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de0:	e00e      	b.n	8005e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f994 	bl	8006110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de8:	e00a      	b.n	8005e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f990 	bl	8006110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df0:	e006      	b.n	8005e00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f98c 	bl	8006110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005dfe:	e175      	b.n	80060ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e00:	bf00      	nop
    return;
 8005e02:	e173      	b.n	80060ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	f040 814f 	bne.w	80060ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e12:	f003 0310 	and.w	r3, r3, #16
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 8148 	beq.w	80060ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e20:	f003 0310 	and.w	r3, r3, #16
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8141 	beq.w	80060ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60bb      	str	r3, [r7, #8]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60bb      	str	r3, [r7, #8]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	60bb      	str	r3, [r7, #8]
 8005e3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4a:	2b40      	cmp	r3, #64	@ 0x40
 8005e4c:	f040 80b6 	bne.w	8005fbc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 8145 	beq.w	80060f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	f080 813e 	bcs.w	80060f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e86:	f000 8088 	beq.w	8005f9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	330c      	adds	r3, #12
 8005e90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ea4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005eb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005eba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ec2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1d9      	bne.n	8005e8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3314      	adds	r3, #20
 8005edc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ede:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ee6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ee8:	f023 0301 	bic.w	r3, r3, #1
 8005eec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3314      	adds	r3, #20
 8005ef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005efa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005efe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f06:	e841 2300 	strex	r3, r2, [r1]
 8005f0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e1      	bne.n	8005ed6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3314      	adds	r3, #20
 8005f18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005f22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3314      	adds	r3, #20
 8005f32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e3      	bne.n	8005f12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f62:	e853 3f00 	ldrex	r3, [r3]
 8005f66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f6a:	f023 0310 	bic.w	r3, r3, #16
 8005f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	330c      	adds	r3, #12
 8005f78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005f7c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005f7e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f84:	e841 2300 	strex	r3, r2, [r1]
 8005f88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e3      	bne.n	8005f58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fc fb8f 	bl	80026b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f8b7 	bl	8006124 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fb6:	e09b      	b.n	80060f0 <HAL_UART_IRQHandler+0x518>
 8005fb8:	08006277 	.word	0x08006277
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 808e 	beq.w	80060f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8089 	beq.w	80060f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ff8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	330c      	adds	r3, #12
 8006002:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006006:	647a      	str	r2, [r7, #68]	@ 0x44
 8006008:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800600c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e3      	bne.n	8005fe2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3314      	adds	r3, #20
 8006020:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	623b      	str	r3, [r7, #32]
   return(result);
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	f023 0301 	bic.w	r3, r3, #1
 8006030:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3314      	adds	r3, #20
 800603a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800603e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006040:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800604c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e3      	bne.n	800601a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	330c      	adds	r3, #12
 8006066:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0310 	bic.w	r3, r3, #16
 8006076:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	330c      	adds	r3, #12
 8006080:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006084:	61fa      	str	r2, [r7, #28]
 8006086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	69b9      	ldr	r1, [r7, #24]
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	617b      	str	r3, [r7, #20]
   return(result);
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e3      	bne.n	8006060 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800609e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f83d 	bl	8006124 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060aa:	e023      	b.n	80060f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d009      	beq.n	80060cc <HAL_UART_IRQHandler+0x4f4>
 80060b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f8ea 	bl	800629e <UART_Transmit_IT>
    return;
 80060ca:	e014      	b.n	80060f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00e      	beq.n	80060f6 <HAL_UART_IRQHandler+0x51e>
 80060d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f92a 	bl	800633e <UART_EndTransmit_IT>
    return;
 80060ea:	e004      	b.n	80060f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80060ec:	bf00      	nop
 80060ee:	e002      	b.n	80060f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80060f0:	bf00      	nop
 80060f2:	e000      	b.n	80060f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80060f4:	bf00      	nop
  }
}
 80060f6:	37e8      	adds	r7, #232	@ 0xe8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	88fa      	ldrh	r2, [r7, #6]
 8006154:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	88fa      	ldrh	r2, [r7, #6]
 800615a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2222      	movs	r2, #34	@ 0x22
 8006166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006180:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695a      	ldr	r2, [r3, #20]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0201 	orr.w	r2, r2, #1
 8006190:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f042 0220 	orr.w	r2, r2, #32
 80061a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b095      	sub	sp, #84	@ 0x54
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	330c      	adds	r3, #12
 80061be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c2:	e853 3f00 	ldrex	r3, [r3]
 80061c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	330c      	adds	r3, #12
 80061d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e5      	bne.n	80061b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3314      	adds	r3, #20
 80061f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	e853 3f00 	ldrex	r3, [r3]
 80061fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f023 0301 	bic.w	r3, r3, #1
 8006202:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3314      	adds	r3, #20
 800620a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800620c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800620e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006210:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006214:	e841 2300 	strex	r3, r2, [r1]
 8006218:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e5      	bne.n	80061ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006224:	2b01      	cmp	r3, #1
 8006226:	d119      	bne.n	800625c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	330c      	adds	r3, #12
 800622e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	e853 3f00 	ldrex	r3, [r3]
 8006236:	60bb      	str	r3, [r7, #8]
   return(result);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f023 0310 	bic.w	r3, r3, #16
 800623e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	330c      	adds	r3, #12
 8006246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006248:	61ba      	str	r2, [r7, #24]
 800624a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624c:	6979      	ldr	r1, [r7, #20]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	613b      	str	r3, [r7, #16]
   return(result);
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e5      	bne.n	8006228 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800626a:	bf00      	nop
 800626c:	3754      	adds	r7, #84	@ 0x54
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006282:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f7ff ff3d 	bl	8006110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006296:	bf00      	nop
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800629e:	b480      	push	{r7}
 80062a0:	b085      	sub	sp, #20
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b21      	cmp	r3, #33	@ 0x21
 80062b0:	d13e      	bne.n	8006330 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ba:	d114      	bne.n	80062e6 <UART_Transmit_IT+0x48>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d110      	bne.n	80062e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	1c9a      	adds	r2, r3, #2
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	621a      	str	r2, [r3, #32]
 80062e4:	e008      	b.n	80062f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	1c59      	adds	r1, r3, #1
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6211      	str	r1, [r2, #32]
 80062f0:	781a      	ldrb	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29b      	uxth	r3, r3
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	4619      	mov	r1, r3
 8006306:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10f      	bne.n	800632c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800631a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800632a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	e000      	b.n	8006332 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006330:	2302      	movs	r3, #2
  }
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006354:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fecc 	bl	80060fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b08c      	sub	sp, #48	@ 0x30
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b22      	cmp	r3, #34	@ 0x22
 8006380:	f040 80ae 	bne.w	80064e0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800638c:	d117      	bne.n	80063be <UART_Receive_IT+0x50>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d113      	bne.n	80063be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b6:	1c9a      	adds	r2, r3, #2
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80063bc:	e026      	b.n	800640c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d0:	d007      	beq.n	80063e2 <UART_Receive_IT+0x74>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <UART_Receive_IT+0x82>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d106      	bne.n	80063f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	e008      	b.n	8006402 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006400:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006410:	b29b      	uxth	r3, r3
 8006412:	3b01      	subs	r3, #1
 8006414:	b29b      	uxth	r3, r3
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	4619      	mov	r1, r3
 800641a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800641c:	2b00      	cmp	r3, #0
 800641e:	d15d      	bne.n	80064dc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0220 	bic.w	r2, r2, #32
 800642e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800643e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	695a      	ldr	r2, [r3, #20]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0201 	bic.w	r2, r2, #1
 800644e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006462:	2b01      	cmp	r3, #1
 8006464:	d135      	bne.n	80064d2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	330c      	adds	r3, #12
 8006472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	e853 3f00 	ldrex	r3, [r3]
 800647a:	613b      	str	r3, [r7, #16]
   return(result);
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	f023 0310 	bic.w	r3, r3, #16
 8006482:	627b      	str	r3, [r7, #36]	@ 0x24
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	330c      	adds	r3, #12
 800648a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800648c:	623a      	str	r2, [r7, #32]
 800648e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	69f9      	ldr	r1, [r7, #28]
 8006492:	6a3a      	ldr	r2, [r7, #32]
 8006494:	e841 2300 	strex	r3, r2, [r1]
 8006498:	61bb      	str	r3, [r7, #24]
   return(result);
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e5      	bne.n	800646c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0310 	and.w	r3, r3, #16
 80064aa:	2b10      	cmp	r3, #16
 80064ac:	d10a      	bne.n	80064c4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff fe2a 	bl	8006124 <HAL_UARTEx_RxEventCallback>
 80064d0:	e002      	b.n	80064d8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fa fcba 	bl	8000e4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064d8:	2300      	movs	r3, #0
 80064da:	e002      	b.n	80064e2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	e000      	b.n	80064e2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80064e0:	2302      	movs	r3, #2
  }
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3730      	adds	r7, #48	@ 0x30
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f0:	b0c0      	sub	sp, #256	@ 0x100
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006508:	68d9      	ldr	r1, [r3, #12]
 800650a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	ea40 0301 	orr.w	r3, r0, r1
 8006514:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651a:	689a      	ldr	r2, [r3, #8]
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	431a      	orrs	r2, r3
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	431a      	orrs	r2, r3
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	4313      	orrs	r3, r2
 8006534:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006544:	f021 010c 	bic.w	r1, r1, #12
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006552:	430b      	orrs	r3, r1
 8006554:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006566:	6999      	ldr	r1, [r3, #24]
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	ea40 0301 	orr.w	r3, r0, r1
 8006572:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4b8f      	ldr	r3, [pc, #572]	@ (80067b8 <UART_SetConfig+0x2cc>)
 800657c:	429a      	cmp	r2, r3
 800657e:	d005      	beq.n	800658c <UART_SetConfig+0xa0>
 8006580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	4b8d      	ldr	r3, [pc, #564]	@ (80067bc <UART_SetConfig+0x2d0>)
 8006588:	429a      	cmp	r2, r3
 800658a:	d104      	bne.n	8006596 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800658c:	f7fd fe8a 	bl	80042a4 <HAL_RCC_GetPCLK2Freq>
 8006590:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006594:	e003      	b.n	800659e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006596:	f7fd fe71 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 800659a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800659e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a2:	69db      	ldr	r3, [r3, #28]
 80065a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065a8:	f040 810c 	bne.w	80067c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065b0:	2200      	movs	r2, #0
 80065b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065be:	4622      	mov	r2, r4
 80065c0:	462b      	mov	r3, r5
 80065c2:	1891      	adds	r1, r2, r2
 80065c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065c6:	415b      	adcs	r3, r3
 80065c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065ce:	4621      	mov	r1, r4
 80065d0:	eb12 0801 	adds.w	r8, r2, r1
 80065d4:	4629      	mov	r1, r5
 80065d6:	eb43 0901 	adc.w	r9, r3, r1
 80065da:	f04f 0200 	mov.w	r2, #0
 80065de:	f04f 0300 	mov.w	r3, #0
 80065e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065ee:	4690      	mov	r8, r2
 80065f0:	4699      	mov	r9, r3
 80065f2:	4623      	mov	r3, r4
 80065f4:	eb18 0303 	adds.w	r3, r8, r3
 80065f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065fc:	462b      	mov	r3, r5
 80065fe:	eb49 0303 	adc.w	r3, r9, r3
 8006602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006612:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006616:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800661a:	460b      	mov	r3, r1
 800661c:	18db      	adds	r3, r3, r3
 800661e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006620:	4613      	mov	r3, r2
 8006622:	eb42 0303 	adc.w	r3, r2, r3
 8006626:	657b      	str	r3, [r7, #84]	@ 0x54
 8006628:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800662c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006630:	f7fa fa6c 	bl	8000b0c <__aeabi_uldivmod>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4b61      	ldr	r3, [pc, #388]	@ (80067c0 <UART_SetConfig+0x2d4>)
 800663a:	fba3 2302 	umull	r2, r3, r3, r2
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	011c      	lsls	r4, r3, #4
 8006642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006646:	2200      	movs	r2, #0
 8006648:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800664c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006650:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006654:	4642      	mov	r2, r8
 8006656:	464b      	mov	r3, r9
 8006658:	1891      	adds	r1, r2, r2
 800665a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800665c:	415b      	adcs	r3, r3
 800665e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006660:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006664:	4641      	mov	r1, r8
 8006666:	eb12 0a01 	adds.w	sl, r2, r1
 800666a:	4649      	mov	r1, r9
 800666c:	eb43 0b01 	adc.w	fp, r3, r1
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	f04f 0300 	mov.w	r3, #0
 8006678:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800667c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006680:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006684:	4692      	mov	sl, r2
 8006686:	469b      	mov	fp, r3
 8006688:	4643      	mov	r3, r8
 800668a:	eb1a 0303 	adds.w	r3, sl, r3
 800668e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006692:	464b      	mov	r3, r9
 8006694:	eb4b 0303 	adc.w	r3, fp, r3
 8006698:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066b0:	460b      	mov	r3, r1
 80066b2:	18db      	adds	r3, r3, r3
 80066b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80066b6:	4613      	mov	r3, r2
 80066b8:	eb42 0303 	adc.w	r3, r2, r3
 80066bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066c6:	f7fa fa21 	bl	8000b0c <__aeabi_uldivmod>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4611      	mov	r1, r2
 80066d0:	4b3b      	ldr	r3, [pc, #236]	@ (80067c0 <UART_SetConfig+0x2d4>)
 80066d2:	fba3 2301 	umull	r2, r3, r3, r1
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	2264      	movs	r2, #100	@ 0x64
 80066da:	fb02 f303 	mul.w	r3, r2, r3
 80066de:	1acb      	subs	r3, r1, r3
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066e6:	4b36      	ldr	r3, [pc, #216]	@ (80067c0 <UART_SetConfig+0x2d4>)
 80066e8:	fba3 2302 	umull	r2, r3, r3, r2
 80066ec:	095b      	lsrs	r3, r3, #5
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066f4:	441c      	add	r4, r3
 80066f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006700:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006704:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006708:	4642      	mov	r2, r8
 800670a:	464b      	mov	r3, r9
 800670c:	1891      	adds	r1, r2, r2
 800670e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006710:	415b      	adcs	r3, r3
 8006712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006714:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006718:	4641      	mov	r1, r8
 800671a:	1851      	adds	r1, r2, r1
 800671c:	6339      	str	r1, [r7, #48]	@ 0x30
 800671e:	4649      	mov	r1, r9
 8006720:	414b      	adcs	r3, r1
 8006722:	637b      	str	r3, [r7, #52]	@ 0x34
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006730:	4659      	mov	r1, fp
 8006732:	00cb      	lsls	r3, r1, #3
 8006734:	4651      	mov	r1, sl
 8006736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800673a:	4651      	mov	r1, sl
 800673c:	00ca      	lsls	r2, r1, #3
 800673e:	4610      	mov	r0, r2
 8006740:	4619      	mov	r1, r3
 8006742:	4603      	mov	r3, r0
 8006744:	4642      	mov	r2, r8
 8006746:	189b      	adds	r3, r3, r2
 8006748:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800674c:	464b      	mov	r3, r9
 800674e:	460a      	mov	r2, r1
 8006750:	eb42 0303 	adc.w	r3, r2, r3
 8006754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006764:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006768:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800676c:	460b      	mov	r3, r1
 800676e:	18db      	adds	r3, r3, r3
 8006770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006772:	4613      	mov	r3, r2
 8006774:	eb42 0303 	adc.w	r3, r2, r3
 8006778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800677a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800677e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006782:	f7fa f9c3 	bl	8000b0c <__aeabi_uldivmod>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4b0d      	ldr	r3, [pc, #52]	@ (80067c0 <UART_SetConfig+0x2d4>)
 800678c:	fba3 1302 	umull	r1, r3, r3, r2
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	2164      	movs	r1, #100	@ 0x64
 8006794:	fb01 f303 	mul.w	r3, r1, r3
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	3332      	adds	r3, #50	@ 0x32
 800679e:	4a08      	ldr	r2, [pc, #32]	@ (80067c0 <UART_SetConfig+0x2d4>)
 80067a0:	fba2 2303 	umull	r2, r3, r2, r3
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	f003 0207 	and.w	r2, r3, #7
 80067aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4422      	add	r2, r4
 80067b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067b4:	e106      	b.n	80069c4 <UART_SetConfig+0x4d8>
 80067b6:	bf00      	nop
 80067b8:	40011000 	.word	0x40011000
 80067bc:	40011400 	.word	0x40011400
 80067c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067c8:	2200      	movs	r2, #0
 80067ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067d6:	4642      	mov	r2, r8
 80067d8:	464b      	mov	r3, r9
 80067da:	1891      	adds	r1, r2, r2
 80067dc:	6239      	str	r1, [r7, #32]
 80067de:	415b      	adcs	r3, r3
 80067e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067e6:	4641      	mov	r1, r8
 80067e8:	1854      	adds	r4, r2, r1
 80067ea:	4649      	mov	r1, r9
 80067ec:	eb43 0501 	adc.w	r5, r3, r1
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	f04f 0300 	mov.w	r3, #0
 80067f8:	00eb      	lsls	r3, r5, #3
 80067fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067fe:	00e2      	lsls	r2, r4, #3
 8006800:	4614      	mov	r4, r2
 8006802:	461d      	mov	r5, r3
 8006804:	4643      	mov	r3, r8
 8006806:	18e3      	adds	r3, r4, r3
 8006808:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800680c:	464b      	mov	r3, r9
 800680e:	eb45 0303 	adc.w	r3, r5, r3
 8006812:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006822:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006826:	f04f 0200 	mov.w	r2, #0
 800682a:	f04f 0300 	mov.w	r3, #0
 800682e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006832:	4629      	mov	r1, r5
 8006834:	008b      	lsls	r3, r1, #2
 8006836:	4621      	mov	r1, r4
 8006838:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800683c:	4621      	mov	r1, r4
 800683e:	008a      	lsls	r2, r1, #2
 8006840:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006844:	f7fa f962 	bl	8000b0c <__aeabi_uldivmod>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4b60      	ldr	r3, [pc, #384]	@ (80069d0 <UART_SetConfig+0x4e4>)
 800684e:	fba3 2302 	umull	r2, r3, r3, r2
 8006852:	095b      	lsrs	r3, r3, #5
 8006854:	011c      	lsls	r4, r3, #4
 8006856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800685a:	2200      	movs	r2, #0
 800685c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006860:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006864:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006868:	4642      	mov	r2, r8
 800686a:	464b      	mov	r3, r9
 800686c:	1891      	adds	r1, r2, r2
 800686e:	61b9      	str	r1, [r7, #24]
 8006870:	415b      	adcs	r3, r3
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006878:	4641      	mov	r1, r8
 800687a:	1851      	adds	r1, r2, r1
 800687c:	6139      	str	r1, [r7, #16]
 800687e:	4649      	mov	r1, r9
 8006880:	414b      	adcs	r3, r1
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006890:	4659      	mov	r1, fp
 8006892:	00cb      	lsls	r3, r1, #3
 8006894:	4651      	mov	r1, sl
 8006896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800689a:	4651      	mov	r1, sl
 800689c:	00ca      	lsls	r2, r1, #3
 800689e:	4610      	mov	r0, r2
 80068a0:	4619      	mov	r1, r3
 80068a2:	4603      	mov	r3, r0
 80068a4:	4642      	mov	r2, r8
 80068a6:	189b      	adds	r3, r3, r2
 80068a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068ac:	464b      	mov	r3, r9
 80068ae:	460a      	mov	r2, r1
 80068b0:	eb42 0303 	adc.w	r3, r2, r3
 80068b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068c4:	f04f 0200 	mov.w	r2, #0
 80068c8:	f04f 0300 	mov.w	r3, #0
 80068cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068d0:	4649      	mov	r1, r9
 80068d2:	008b      	lsls	r3, r1, #2
 80068d4:	4641      	mov	r1, r8
 80068d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068da:	4641      	mov	r1, r8
 80068dc:	008a      	lsls	r2, r1, #2
 80068de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80068e2:	f7fa f913 	bl	8000b0c <__aeabi_uldivmod>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	4611      	mov	r1, r2
 80068ec:	4b38      	ldr	r3, [pc, #224]	@ (80069d0 <UART_SetConfig+0x4e4>)
 80068ee:	fba3 2301 	umull	r2, r3, r3, r1
 80068f2:	095b      	lsrs	r3, r3, #5
 80068f4:	2264      	movs	r2, #100	@ 0x64
 80068f6:	fb02 f303 	mul.w	r3, r2, r3
 80068fa:	1acb      	subs	r3, r1, r3
 80068fc:	011b      	lsls	r3, r3, #4
 80068fe:	3332      	adds	r3, #50	@ 0x32
 8006900:	4a33      	ldr	r2, [pc, #204]	@ (80069d0 <UART_SetConfig+0x4e4>)
 8006902:	fba2 2303 	umull	r2, r3, r2, r3
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800690c:	441c      	add	r4, r3
 800690e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006912:	2200      	movs	r2, #0
 8006914:	673b      	str	r3, [r7, #112]	@ 0x70
 8006916:	677a      	str	r2, [r7, #116]	@ 0x74
 8006918:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800691c:	4642      	mov	r2, r8
 800691e:	464b      	mov	r3, r9
 8006920:	1891      	adds	r1, r2, r2
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	415b      	adcs	r3, r3
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800692c:	4641      	mov	r1, r8
 800692e:	1851      	adds	r1, r2, r1
 8006930:	6039      	str	r1, [r7, #0]
 8006932:	4649      	mov	r1, r9
 8006934:	414b      	adcs	r3, r1
 8006936:	607b      	str	r3, [r7, #4]
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006944:	4659      	mov	r1, fp
 8006946:	00cb      	lsls	r3, r1, #3
 8006948:	4651      	mov	r1, sl
 800694a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800694e:	4651      	mov	r1, sl
 8006950:	00ca      	lsls	r2, r1, #3
 8006952:	4610      	mov	r0, r2
 8006954:	4619      	mov	r1, r3
 8006956:	4603      	mov	r3, r0
 8006958:	4642      	mov	r2, r8
 800695a:	189b      	adds	r3, r3, r2
 800695c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800695e:	464b      	mov	r3, r9
 8006960:	460a      	mov	r2, r1
 8006962:	eb42 0303 	adc.w	r3, r2, r3
 8006966:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	663b      	str	r3, [r7, #96]	@ 0x60
 8006972:	667a      	str	r2, [r7, #100]	@ 0x64
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006980:	4649      	mov	r1, r9
 8006982:	008b      	lsls	r3, r1, #2
 8006984:	4641      	mov	r1, r8
 8006986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800698a:	4641      	mov	r1, r8
 800698c:	008a      	lsls	r2, r1, #2
 800698e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006992:	f7fa f8bb 	bl	8000b0c <__aeabi_uldivmod>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4b0d      	ldr	r3, [pc, #52]	@ (80069d0 <UART_SetConfig+0x4e4>)
 800699c:	fba3 1302 	umull	r1, r3, r3, r2
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	2164      	movs	r1, #100	@ 0x64
 80069a4:	fb01 f303 	mul.w	r3, r1, r3
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	3332      	adds	r3, #50	@ 0x32
 80069ae:	4a08      	ldr	r2, [pc, #32]	@ (80069d0 <UART_SetConfig+0x4e4>)
 80069b0:	fba2 2303 	umull	r2, r3, r2, r3
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	f003 020f 	and.w	r2, r3, #15
 80069ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4422      	add	r2, r4
 80069c2:	609a      	str	r2, [r3, #8]
}
 80069c4:	bf00      	nop
 80069c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069ca:	46bd      	mov	sp, r7
 80069cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069d0:	51eb851f 	.word	0x51eb851f

080069d4 <sniprintf>:
 80069d4:	b40c      	push	{r2, r3}
 80069d6:	b530      	push	{r4, r5, lr}
 80069d8:	4b17      	ldr	r3, [pc, #92]	@ (8006a38 <sniprintf+0x64>)
 80069da:	1e0c      	subs	r4, r1, #0
 80069dc:	681d      	ldr	r5, [r3, #0]
 80069de:	b09d      	sub	sp, #116	@ 0x74
 80069e0:	da08      	bge.n	80069f4 <sniprintf+0x20>
 80069e2:	238b      	movs	r3, #139	@ 0x8b
 80069e4:	602b      	str	r3, [r5, #0]
 80069e6:	f04f 30ff 	mov.w	r0, #4294967295
 80069ea:	b01d      	add	sp, #116	@ 0x74
 80069ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069f0:	b002      	add	sp, #8
 80069f2:	4770      	bx	lr
 80069f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80069f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80069fc:	bf14      	ite	ne
 80069fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006a02:	4623      	moveq	r3, r4
 8006a04:	9304      	str	r3, [sp, #16]
 8006a06:	9307      	str	r3, [sp, #28]
 8006a08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a0c:	9002      	str	r0, [sp, #8]
 8006a0e:	9006      	str	r0, [sp, #24]
 8006a10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a14:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006a16:	ab21      	add	r3, sp, #132	@ 0x84
 8006a18:	a902      	add	r1, sp, #8
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	f000 f9a9 	bl	8006d74 <_svfiprintf_r>
 8006a22:	1c43      	adds	r3, r0, #1
 8006a24:	bfbc      	itt	lt
 8006a26:	238b      	movlt	r3, #139	@ 0x8b
 8006a28:	602b      	strlt	r3, [r5, #0]
 8006a2a:	2c00      	cmp	r4, #0
 8006a2c:	d0dd      	beq.n	80069ea <sniprintf+0x16>
 8006a2e:	9b02      	ldr	r3, [sp, #8]
 8006a30:	2200      	movs	r2, #0
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	e7d9      	b.n	80069ea <sniprintf+0x16>
 8006a36:	bf00      	nop
 8006a38:	2000000c 	.word	0x2000000c

08006a3c <memset>:
 8006a3c:	4402      	add	r2, r0
 8006a3e:	4603      	mov	r3, r0
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d100      	bne.n	8006a46 <memset+0xa>
 8006a44:	4770      	bx	lr
 8006a46:	f803 1b01 	strb.w	r1, [r3], #1
 8006a4a:	e7f9      	b.n	8006a40 <memset+0x4>

08006a4c <strncpy>:
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	3901      	subs	r1, #1
 8006a50:	4603      	mov	r3, r0
 8006a52:	b132      	cbz	r2, 8006a62 <strncpy+0x16>
 8006a54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006a58:	f803 4b01 	strb.w	r4, [r3], #1
 8006a5c:	3a01      	subs	r2, #1
 8006a5e:	2c00      	cmp	r4, #0
 8006a60:	d1f7      	bne.n	8006a52 <strncpy+0x6>
 8006a62:	441a      	add	r2, r3
 8006a64:	2100      	movs	r1, #0
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d100      	bne.n	8006a6c <strncpy+0x20>
 8006a6a:	bd10      	pop	{r4, pc}
 8006a6c:	f803 1b01 	strb.w	r1, [r3], #1
 8006a70:	e7f9      	b.n	8006a66 <strncpy+0x1a>
	...

08006a74 <__errno>:
 8006a74:	4b01      	ldr	r3, [pc, #4]	@ (8006a7c <__errno+0x8>)
 8006a76:	6818      	ldr	r0, [r3, #0]
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	2000000c 	.word	0x2000000c

08006a80 <__libc_init_array>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	4d0d      	ldr	r5, [pc, #52]	@ (8006ab8 <__libc_init_array+0x38>)
 8006a84:	4c0d      	ldr	r4, [pc, #52]	@ (8006abc <__libc_init_array+0x3c>)
 8006a86:	1b64      	subs	r4, r4, r5
 8006a88:	10a4      	asrs	r4, r4, #2
 8006a8a:	2600      	movs	r6, #0
 8006a8c:	42a6      	cmp	r6, r4
 8006a8e:	d109      	bne.n	8006aa4 <__libc_init_array+0x24>
 8006a90:	4d0b      	ldr	r5, [pc, #44]	@ (8006ac0 <__libc_init_array+0x40>)
 8006a92:	4c0c      	ldr	r4, [pc, #48]	@ (8006ac4 <__libc_init_array+0x44>)
 8006a94:	f000 fc66 	bl	8007364 <_init>
 8006a98:	1b64      	subs	r4, r4, r5
 8006a9a:	10a4      	asrs	r4, r4, #2
 8006a9c:	2600      	movs	r6, #0
 8006a9e:	42a6      	cmp	r6, r4
 8006aa0:	d105      	bne.n	8006aae <__libc_init_array+0x2e>
 8006aa2:	bd70      	pop	{r4, r5, r6, pc}
 8006aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa8:	4798      	blx	r3
 8006aaa:	3601      	adds	r6, #1
 8006aac:	e7ee      	b.n	8006a8c <__libc_init_array+0xc>
 8006aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab2:	4798      	blx	r3
 8006ab4:	3601      	adds	r6, #1
 8006ab6:	e7f2      	b.n	8006a9e <__libc_init_array+0x1e>
 8006ab8:	080073f4 	.word	0x080073f4
 8006abc:	080073f4 	.word	0x080073f4
 8006ac0:	080073f4 	.word	0x080073f4
 8006ac4:	080073f8 	.word	0x080073f8

08006ac8 <__retarget_lock_acquire_recursive>:
 8006ac8:	4770      	bx	lr

08006aca <__retarget_lock_release_recursive>:
 8006aca:	4770      	bx	lr

08006acc <_free_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	4605      	mov	r5, r0
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	d041      	beq.n	8006b58 <_free_r+0x8c>
 8006ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ad8:	1f0c      	subs	r4, r1, #4
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	bfb8      	it	lt
 8006ade:	18e4      	addlt	r4, r4, r3
 8006ae0:	f000 f8e0 	bl	8006ca4 <__malloc_lock>
 8006ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b5c <_free_r+0x90>)
 8006ae6:	6813      	ldr	r3, [r2, #0]
 8006ae8:	b933      	cbnz	r3, 8006af8 <_free_r+0x2c>
 8006aea:	6063      	str	r3, [r4, #4]
 8006aec:	6014      	str	r4, [r2, #0]
 8006aee:	4628      	mov	r0, r5
 8006af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006af4:	f000 b8dc 	b.w	8006cb0 <__malloc_unlock>
 8006af8:	42a3      	cmp	r3, r4
 8006afa:	d908      	bls.n	8006b0e <_free_r+0x42>
 8006afc:	6820      	ldr	r0, [r4, #0]
 8006afe:	1821      	adds	r1, r4, r0
 8006b00:	428b      	cmp	r3, r1
 8006b02:	bf01      	itttt	eq
 8006b04:	6819      	ldreq	r1, [r3, #0]
 8006b06:	685b      	ldreq	r3, [r3, #4]
 8006b08:	1809      	addeq	r1, r1, r0
 8006b0a:	6021      	streq	r1, [r4, #0]
 8006b0c:	e7ed      	b.n	8006aea <_free_r+0x1e>
 8006b0e:	461a      	mov	r2, r3
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	b10b      	cbz	r3, 8006b18 <_free_r+0x4c>
 8006b14:	42a3      	cmp	r3, r4
 8006b16:	d9fa      	bls.n	8006b0e <_free_r+0x42>
 8006b18:	6811      	ldr	r1, [r2, #0]
 8006b1a:	1850      	adds	r0, r2, r1
 8006b1c:	42a0      	cmp	r0, r4
 8006b1e:	d10b      	bne.n	8006b38 <_free_r+0x6c>
 8006b20:	6820      	ldr	r0, [r4, #0]
 8006b22:	4401      	add	r1, r0
 8006b24:	1850      	adds	r0, r2, r1
 8006b26:	4283      	cmp	r3, r0
 8006b28:	6011      	str	r1, [r2, #0]
 8006b2a:	d1e0      	bne.n	8006aee <_free_r+0x22>
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	6053      	str	r3, [r2, #4]
 8006b32:	4408      	add	r0, r1
 8006b34:	6010      	str	r0, [r2, #0]
 8006b36:	e7da      	b.n	8006aee <_free_r+0x22>
 8006b38:	d902      	bls.n	8006b40 <_free_r+0x74>
 8006b3a:	230c      	movs	r3, #12
 8006b3c:	602b      	str	r3, [r5, #0]
 8006b3e:	e7d6      	b.n	8006aee <_free_r+0x22>
 8006b40:	6820      	ldr	r0, [r4, #0]
 8006b42:	1821      	adds	r1, r4, r0
 8006b44:	428b      	cmp	r3, r1
 8006b46:	bf04      	itt	eq
 8006b48:	6819      	ldreq	r1, [r3, #0]
 8006b4a:	685b      	ldreq	r3, [r3, #4]
 8006b4c:	6063      	str	r3, [r4, #4]
 8006b4e:	bf04      	itt	eq
 8006b50:	1809      	addeq	r1, r1, r0
 8006b52:	6021      	streq	r1, [r4, #0]
 8006b54:	6054      	str	r4, [r2, #4]
 8006b56:	e7ca      	b.n	8006aee <_free_r+0x22>
 8006b58:	bd38      	pop	{r3, r4, r5, pc}
 8006b5a:	bf00      	nop
 8006b5c:	200006a0 	.word	0x200006a0

08006b60 <sbrk_aligned>:
 8006b60:	b570      	push	{r4, r5, r6, lr}
 8006b62:	4e0f      	ldr	r6, [pc, #60]	@ (8006ba0 <sbrk_aligned+0x40>)
 8006b64:	460c      	mov	r4, r1
 8006b66:	6831      	ldr	r1, [r6, #0]
 8006b68:	4605      	mov	r5, r0
 8006b6a:	b911      	cbnz	r1, 8006b72 <sbrk_aligned+0x12>
 8006b6c:	f000 fba6 	bl	80072bc <_sbrk_r>
 8006b70:	6030      	str	r0, [r6, #0]
 8006b72:	4621      	mov	r1, r4
 8006b74:	4628      	mov	r0, r5
 8006b76:	f000 fba1 	bl	80072bc <_sbrk_r>
 8006b7a:	1c43      	adds	r3, r0, #1
 8006b7c:	d103      	bne.n	8006b86 <sbrk_aligned+0x26>
 8006b7e:	f04f 34ff 	mov.w	r4, #4294967295
 8006b82:	4620      	mov	r0, r4
 8006b84:	bd70      	pop	{r4, r5, r6, pc}
 8006b86:	1cc4      	adds	r4, r0, #3
 8006b88:	f024 0403 	bic.w	r4, r4, #3
 8006b8c:	42a0      	cmp	r0, r4
 8006b8e:	d0f8      	beq.n	8006b82 <sbrk_aligned+0x22>
 8006b90:	1a21      	subs	r1, r4, r0
 8006b92:	4628      	mov	r0, r5
 8006b94:	f000 fb92 	bl	80072bc <_sbrk_r>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d1f2      	bne.n	8006b82 <sbrk_aligned+0x22>
 8006b9c:	e7ef      	b.n	8006b7e <sbrk_aligned+0x1e>
 8006b9e:	bf00      	nop
 8006ba0:	2000069c 	.word	0x2000069c

08006ba4 <_malloc_r>:
 8006ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ba8:	1ccd      	adds	r5, r1, #3
 8006baa:	f025 0503 	bic.w	r5, r5, #3
 8006bae:	3508      	adds	r5, #8
 8006bb0:	2d0c      	cmp	r5, #12
 8006bb2:	bf38      	it	cc
 8006bb4:	250c      	movcc	r5, #12
 8006bb6:	2d00      	cmp	r5, #0
 8006bb8:	4606      	mov	r6, r0
 8006bba:	db01      	blt.n	8006bc0 <_malloc_r+0x1c>
 8006bbc:	42a9      	cmp	r1, r5
 8006bbe:	d904      	bls.n	8006bca <_malloc_r+0x26>
 8006bc0:	230c      	movs	r3, #12
 8006bc2:	6033      	str	r3, [r6, #0]
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ca0 <_malloc_r+0xfc>
 8006bce:	f000 f869 	bl	8006ca4 <__malloc_lock>
 8006bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8006bd6:	461c      	mov	r4, r3
 8006bd8:	bb44      	cbnz	r4, 8006c2c <_malloc_r+0x88>
 8006bda:	4629      	mov	r1, r5
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f7ff ffbf 	bl	8006b60 <sbrk_aligned>
 8006be2:	1c43      	adds	r3, r0, #1
 8006be4:	4604      	mov	r4, r0
 8006be6:	d158      	bne.n	8006c9a <_malloc_r+0xf6>
 8006be8:	f8d8 4000 	ldr.w	r4, [r8]
 8006bec:	4627      	mov	r7, r4
 8006bee:	2f00      	cmp	r7, #0
 8006bf0:	d143      	bne.n	8006c7a <_malloc_r+0xd6>
 8006bf2:	2c00      	cmp	r4, #0
 8006bf4:	d04b      	beq.n	8006c8e <_malloc_r+0xea>
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	4639      	mov	r1, r7
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	eb04 0903 	add.w	r9, r4, r3
 8006c00:	f000 fb5c 	bl	80072bc <_sbrk_r>
 8006c04:	4581      	cmp	r9, r0
 8006c06:	d142      	bne.n	8006c8e <_malloc_r+0xea>
 8006c08:	6821      	ldr	r1, [r4, #0]
 8006c0a:	1a6d      	subs	r5, r5, r1
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	4630      	mov	r0, r6
 8006c10:	f7ff ffa6 	bl	8006b60 <sbrk_aligned>
 8006c14:	3001      	adds	r0, #1
 8006c16:	d03a      	beq.n	8006c8e <_malloc_r+0xea>
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	442b      	add	r3, r5
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	bb62      	cbnz	r2, 8006c80 <_malloc_r+0xdc>
 8006c26:	f8c8 7000 	str.w	r7, [r8]
 8006c2a:	e00f      	b.n	8006c4c <_malloc_r+0xa8>
 8006c2c:	6822      	ldr	r2, [r4, #0]
 8006c2e:	1b52      	subs	r2, r2, r5
 8006c30:	d420      	bmi.n	8006c74 <_malloc_r+0xd0>
 8006c32:	2a0b      	cmp	r2, #11
 8006c34:	d917      	bls.n	8006c66 <_malloc_r+0xc2>
 8006c36:	1961      	adds	r1, r4, r5
 8006c38:	42a3      	cmp	r3, r4
 8006c3a:	6025      	str	r5, [r4, #0]
 8006c3c:	bf18      	it	ne
 8006c3e:	6059      	strne	r1, [r3, #4]
 8006c40:	6863      	ldr	r3, [r4, #4]
 8006c42:	bf08      	it	eq
 8006c44:	f8c8 1000 	streq.w	r1, [r8]
 8006c48:	5162      	str	r2, [r4, r5]
 8006c4a:	604b      	str	r3, [r1, #4]
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	f000 f82f 	bl	8006cb0 <__malloc_unlock>
 8006c52:	f104 000b 	add.w	r0, r4, #11
 8006c56:	1d23      	adds	r3, r4, #4
 8006c58:	f020 0007 	bic.w	r0, r0, #7
 8006c5c:	1ac2      	subs	r2, r0, r3
 8006c5e:	bf1c      	itt	ne
 8006c60:	1a1b      	subne	r3, r3, r0
 8006c62:	50a3      	strne	r3, [r4, r2]
 8006c64:	e7af      	b.n	8006bc6 <_malloc_r+0x22>
 8006c66:	6862      	ldr	r2, [r4, #4]
 8006c68:	42a3      	cmp	r3, r4
 8006c6a:	bf0c      	ite	eq
 8006c6c:	f8c8 2000 	streq.w	r2, [r8]
 8006c70:	605a      	strne	r2, [r3, #4]
 8006c72:	e7eb      	b.n	8006c4c <_malloc_r+0xa8>
 8006c74:	4623      	mov	r3, r4
 8006c76:	6864      	ldr	r4, [r4, #4]
 8006c78:	e7ae      	b.n	8006bd8 <_malloc_r+0x34>
 8006c7a:	463c      	mov	r4, r7
 8006c7c:	687f      	ldr	r7, [r7, #4]
 8006c7e:	e7b6      	b.n	8006bee <_malloc_r+0x4a>
 8006c80:	461a      	mov	r2, r3
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	42a3      	cmp	r3, r4
 8006c86:	d1fb      	bne.n	8006c80 <_malloc_r+0xdc>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	6053      	str	r3, [r2, #4]
 8006c8c:	e7de      	b.n	8006c4c <_malloc_r+0xa8>
 8006c8e:	230c      	movs	r3, #12
 8006c90:	6033      	str	r3, [r6, #0]
 8006c92:	4630      	mov	r0, r6
 8006c94:	f000 f80c 	bl	8006cb0 <__malloc_unlock>
 8006c98:	e794      	b.n	8006bc4 <_malloc_r+0x20>
 8006c9a:	6005      	str	r5, [r0, #0]
 8006c9c:	e7d6      	b.n	8006c4c <_malloc_r+0xa8>
 8006c9e:	bf00      	nop
 8006ca0:	200006a0 	.word	0x200006a0

08006ca4 <__malloc_lock>:
 8006ca4:	4801      	ldr	r0, [pc, #4]	@ (8006cac <__malloc_lock+0x8>)
 8006ca6:	f7ff bf0f 	b.w	8006ac8 <__retarget_lock_acquire_recursive>
 8006caa:	bf00      	nop
 8006cac:	20000698 	.word	0x20000698

08006cb0 <__malloc_unlock>:
 8006cb0:	4801      	ldr	r0, [pc, #4]	@ (8006cb8 <__malloc_unlock+0x8>)
 8006cb2:	f7ff bf0a 	b.w	8006aca <__retarget_lock_release_recursive>
 8006cb6:	bf00      	nop
 8006cb8:	20000698 	.word	0x20000698

08006cbc <__ssputs_r>:
 8006cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc0:	688e      	ldr	r6, [r1, #8]
 8006cc2:	461f      	mov	r7, r3
 8006cc4:	42be      	cmp	r6, r7
 8006cc6:	680b      	ldr	r3, [r1, #0]
 8006cc8:	4682      	mov	sl, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	4690      	mov	r8, r2
 8006cce:	d82d      	bhi.n	8006d2c <__ssputs_r+0x70>
 8006cd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006cd8:	d026      	beq.n	8006d28 <__ssputs_r+0x6c>
 8006cda:	6965      	ldr	r5, [r4, #20]
 8006cdc:	6909      	ldr	r1, [r1, #16]
 8006cde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ce2:	eba3 0901 	sub.w	r9, r3, r1
 8006ce6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cea:	1c7b      	adds	r3, r7, #1
 8006cec:	444b      	add	r3, r9
 8006cee:	106d      	asrs	r5, r5, #1
 8006cf0:	429d      	cmp	r5, r3
 8006cf2:	bf38      	it	cc
 8006cf4:	461d      	movcc	r5, r3
 8006cf6:	0553      	lsls	r3, r2, #21
 8006cf8:	d527      	bpl.n	8006d4a <__ssputs_r+0x8e>
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	f7ff ff52 	bl	8006ba4 <_malloc_r>
 8006d00:	4606      	mov	r6, r0
 8006d02:	b360      	cbz	r0, 8006d5e <__ssputs_r+0xa2>
 8006d04:	6921      	ldr	r1, [r4, #16]
 8006d06:	464a      	mov	r2, r9
 8006d08:	f000 fae8 	bl	80072dc <memcpy>
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d16:	81a3      	strh	r3, [r4, #12]
 8006d18:	6126      	str	r6, [r4, #16]
 8006d1a:	6165      	str	r5, [r4, #20]
 8006d1c:	444e      	add	r6, r9
 8006d1e:	eba5 0509 	sub.w	r5, r5, r9
 8006d22:	6026      	str	r6, [r4, #0]
 8006d24:	60a5      	str	r5, [r4, #8]
 8006d26:	463e      	mov	r6, r7
 8006d28:	42be      	cmp	r6, r7
 8006d2a:	d900      	bls.n	8006d2e <__ssputs_r+0x72>
 8006d2c:	463e      	mov	r6, r7
 8006d2e:	6820      	ldr	r0, [r4, #0]
 8006d30:	4632      	mov	r2, r6
 8006d32:	4641      	mov	r1, r8
 8006d34:	f000 faa8 	bl	8007288 <memmove>
 8006d38:	68a3      	ldr	r3, [r4, #8]
 8006d3a:	1b9b      	subs	r3, r3, r6
 8006d3c:	60a3      	str	r3, [r4, #8]
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	4433      	add	r3, r6
 8006d42:	6023      	str	r3, [r4, #0]
 8006d44:	2000      	movs	r0, #0
 8006d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d4a:	462a      	mov	r2, r5
 8006d4c:	f000 fad4 	bl	80072f8 <_realloc_r>
 8006d50:	4606      	mov	r6, r0
 8006d52:	2800      	cmp	r0, #0
 8006d54:	d1e0      	bne.n	8006d18 <__ssputs_r+0x5c>
 8006d56:	6921      	ldr	r1, [r4, #16]
 8006d58:	4650      	mov	r0, sl
 8006d5a:	f7ff feb7 	bl	8006acc <_free_r>
 8006d5e:	230c      	movs	r3, #12
 8006d60:	f8ca 3000 	str.w	r3, [sl]
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d6a:	81a3      	strh	r3, [r4, #12]
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	e7e9      	b.n	8006d46 <__ssputs_r+0x8a>
	...

08006d74 <_svfiprintf_r>:
 8006d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	4698      	mov	r8, r3
 8006d7a:	898b      	ldrh	r3, [r1, #12]
 8006d7c:	061b      	lsls	r3, r3, #24
 8006d7e:	b09d      	sub	sp, #116	@ 0x74
 8006d80:	4607      	mov	r7, r0
 8006d82:	460d      	mov	r5, r1
 8006d84:	4614      	mov	r4, r2
 8006d86:	d510      	bpl.n	8006daa <_svfiprintf_r+0x36>
 8006d88:	690b      	ldr	r3, [r1, #16]
 8006d8a:	b973      	cbnz	r3, 8006daa <_svfiprintf_r+0x36>
 8006d8c:	2140      	movs	r1, #64	@ 0x40
 8006d8e:	f7ff ff09 	bl	8006ba4 <_malloc_r>
 8006d92:	6028      	str	r0, [r5, #0]
 8006d94:	6128      	str	r0, [r5, #16]
 8006d96:	b930      	cbnz	r0, 8006da6 <_svfiprintf_r+0x32>
 8006d98:	230c      	movs	r3, #12
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006da0:	b01d      	add	sp, #116	@ 0x74
 8006da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da6:	2340      	movs	r3, #64	@ 0x40
 8006da8:	616b      	str	r3, [r5, #20]
 8006daa:	2300      	movs	r3, #0
 8006dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dae:	2320      	movs	r3, #32
 8006db0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006db8:	2330      	movs	r3, #48	@ 0x30
 8006dba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006f58 <_svfiprintf_r+0x1e4>
 8006dbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006dc2:	f04f 0901 	mov.w	r9, #1
 8006dc6:	4623      	mov	r3, r4
 8006dc8:	469a      	mov	sl, r3
 8006dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dce:	b10a      	cbz	r2, 8006dd4 <_svfiprintf_r+0x60>
 8006dd0:	2a25      	cmp	r2, #37	@ 0x25
 8006dd2:	d1f9      	bne.n	8006dc8 <_svfiprintf_r+0x54>
 8006dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8006dd8:	d00b      	beq.n	8006df2 <_svfiprintf_r+0x7e>
 8006dda:	465b      	mov	r3, fp
 8006ddc:	4622      	mov	r2, r4
 8006dde:	4629      	mov	r1, r5
 8006de0:	4638      	mov	r0, r7
 8006de2:	f7ff ff6b 	bl	8006cbc <__ssputs_r>
 8006de6:	3001      	adds	r0, #1
 8006de8:	f000 80a7 	beq.w	8006f3a <_svfiprintf_r+0x1c6>
 8006dec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dee:	445a      	add	r2, fp
 8006df0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006df2:	f89a 3000 	ldrb.w	r3, [sl]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 809f 	beq.w	8006f3a <_svfiprintf_r+0x1c6>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e06:	f10a 0a01 	add.w	sl, sl, #1
 8006e0a:	9304      	str	r3, [sp, #16]
 8006e0c:	9307      	str	r3, [sp, #28]
 8006e0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e12:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e14:	4654      	mov	r4, sl
 8006e16:	2205      	movs	r2, #5
 8006e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e1c:	484e      	ldr	r0, [pc, #312]	@ (8006f58 <_svfiprintf_r+0x1e4>)
 8006e1e:	f7f9 fa07 	bl	8000230 <memchr>
 8006e22:	9a04      	ldr	r2, [sp, #16]
 8006e24:	b9d8      	cbnz	r0, 8006e5e <_svfiprintf_r+0xea>
 8006e26:	06d0      	lsls	r0, r2, #27
 8006e28:	bf44      	itt	mi
 8006e2a:	2320      	movmi	r3, #32
 8006e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e30:	0711      	lsls	r1, r2, #28
 8006e32:	bf44      	itt	mi
 8006e34:	232b      	movmi	r3, #43	@ 0x2b
 8006e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e40:	d015      	beq.n	8006e6e <_svfiprintf_r+0xfa>
 8006e42:	9a07      	ldr	r2, [sp, #28]
 8006e44:	4654      	mov	r4, sl
 8006e46:	2000      	movs	r0, #0
 8006e48:	f04f 0c0a 	mov.w	ip, #10
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e52:	3b30      	subs	r3, #48	@ 0x30
 8006e54:	2b09      	cmp	r3, #9
 8006e56:	d94b      	bls.n	8006ef0 <_svfiprintf_r+0x17c>
 8006e58:	b1b0      	cbz	r0, 8006e88 <_svfiprintf_r+0x114>
 8006e5a:	9207      	str	r2, [sp, #28]
 8006e5c:	e014      	b.n	8006e88 <_svfiprintf_r+0x114>
 8006e5e:	eba0 0308 	sub.w	r3, r0, r8
 8006e62:	fa09 f303 	lsl.w	r3, r9, r3
 8006e66:	4313      	orrs	r3, r2
 8006e68:	9304      	str	r3, [sp, #16]
 8006e6a:	46a2      	mov	sl, r4
 8006e6c:	e7d2      	b.n	8006e14 <_svfiprintf_r+0xa0>
 8006e6e:	9b03      	ldr	r3, [sp, #12]
 8006e70:	1d19      	adds	r1, r3, #4
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	9103      	str	r1, [sp, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	bfbb      	ittet	lt
 8006e7a:	425b      	neglt	r3, r3
 8006e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8006e80:	9307      	strge	r3, [sp, #28]
 8006e82:	9307      	strlt	r3, [sp, #28]
 8006e84:	bfb8      	it	lt
 8006e86:	9204      	strlt	r2, [sp, #16]
 8006e88:	7823      	ldrb	r3, [r4, #0]
 8006e8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e8c:	d10a      	bne.n	8006ea4 <_svfiprintf_r+0x130>
 8006e8e:	7863      	ldrb	r3, [r4, #1]
 8006e90:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e92:	d132      	bne.n	8006efa <_svfiprintf_r+0x186>
 8006e94:	9b03      	ldr	r3, [sp, #12]
 8006e96:	1d1a      	adds	r2, r3, #4
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	9203      	str	r2, [sp, #12]
 8006e9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ea0:	3402      	adds	r4, #2
 8006ea2:	9305      	str	r3, [sp, #20]
 8006ea4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f68 <_svfiprintf_r+0x1f4>
 8006ea8:	7821      	ldrb	r1, [r4, #0]
 8006eaa:	2203      	movs	r2, #3
 8006eac:	4650      	mov	r0, sl
 8006eae:	f7f9 f9bf 	bl	8000230 <memchr>
 8006eb2:	b138      	cbz	r0, 8006ec4 <_svfiprintf_r+0x150>
 8006eb4:	9b04      	ldr	r3, [sp, #16]
 8006eb6:	eba0 000a 	sub.w	r0, r0, sl
 8006eba:	2240      	movs	r2, #64	@ 0x40
 8006ebc:	4082      	lsls	r2, r0
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	3401      	adds	r4, #1
 8006ec2:	9304      	str	r3, [sp, #16]
 8006ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec8:	4824      	ldr	r0, [pc, #144]	@ (8006f5c <_svfiprintf_r+0x1e8>)
 8006eca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ece:	2206      	movs	r2, #6
 8006ed0:	f7f9 f9ae 	bl	8000230 <memchr>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d036      	beq.n	8006f46 <_svfiprintf_r+0x1d2>
 8006ed8:	4b21      	ldr	r3, [pc, #132]	@ (8006f60 <_svfiprintf_r+0x1ec>)
 8006eda:	bb1b      	cbnz	r3, 8006f24 <_svfiprintf_r+0x1b0>
 8006edc:	9b03      	ldr	r3, [sp, #12]
 8006ede:	3307      	adds	r3, #7
 8006ee0:	f023 0307 	bic.w	r3, r3, #7
 8006ee4:	3308      	adds	r3, #8
 8006ee6:	9303      	str	r3, [sp, #12]
 8006ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eea:	4433      	add	r3, r6
 8006eec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eee:	e76a      	b.n	8006dc6 <_svfiprintf_r+0x52>
 8006ef0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	2001      	movs	r0, #1
 8006ef8:	e7a8      	b.n	8006e4c <_svfiprintf_r+0xd8>
 8006efa:	2300      	movs	r3, #0
 8006efc:	3401      	adds	r4, #1
 8006efe:	9305      	str	r3, [sp, #20]
 8006f00:	4619      	mov	r1, r3
 8006f02:	f04f 0c0a 	mov.w	ip, #10
 8006f06:	4620      	mov	r0, r4
 8006f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f0c:	3a30      	subs	r2, #48	@ 0x30
 8006f0e:	2a09      	cmp	r2, #9
 8006f10:	d903      	bls.n	8006f1a <_svfiprintf_r+0x1a6>
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0c6      	beq.n	8006ea4 <_svfiprintf_r+0x130>
 8006f16:	9105      	str	r1, [sp, #20]
 8006f18:	e7c4      	b.n	8006ea4 <_svfiprintf_r+0x130>
 8006f1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f1e:	4604      	mov	r4, r0
 8006f20:	2301      	movs	r3, #1
 8006f22:	e7f0      	b.n	8006f06 <_svfiprintf_r+0x192>
 8006f24:	ab03      	add	r3, sp, #12
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	462a      	mov	r2, r5
 8006f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006f64 <_svfiprintf_r+0x1f0>)
 8006f2c:	a904      	add	r1, sp, #16
 8006f2e:	4638      	mov	r0, r7
 8006f30:	f3af 8000 	nop.w
 8006f34:	1c42      	adds	r2, r0, #1
 8006f36:	4606      	mov	r6, r0
 8006f38:	d1d6      	bne.n	8006ee8 <_svfiprintf_r+0x174>
 8006f3a:	89ab      	ldrh	r3, [r5, #12]
 8006f3c:	065b      	lsls	r3, r3, #25
 8006f3e:	f53f af2d 	bmi.w	8006d9c <_svfiprintf_r+0x28>
 8006f42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f44:	e72c      	b.n	8006da0 <_svfiprintf_r+0x2c>
 8006f46:	ab03      	add	r3, sp, #12
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	462a      	mov	r2, r5
 8006f4c:	4b05      	ldr	r3, [pc, #20]	@ (8006f64 <_svfiprintf_r+0x1f0>)
 8006f4e:	a904      	add	r1, sp, #16
 8006f50:	4638      	mov	r0, r7
 8006f52:	f000 f879 	bl	8007048 <_printf_i>
 8006f56:	e7ed      	b.n	8006f34 <_svfiprintf_r+0x1c0>
 8006f58:	080073b8 	.word	0x080073b8
 8006f5c:	080073c2 	.word	0x080073c2
 8006f60:	00000000 	.word	0x00000000
 8006f64:	08006cbd 	.word	0x08006cbd
 8006f68:	080073be 	.word	0x080073be

08006f6c <_printf_common>:
 8006f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f70:	4616      	mov	r6, r2
 8006f72:	4698      	mov	r8, r3
 8006f74:	688a      	ldr	r2, [r1, #8]
 8006f76:	690b      	ldr	r3, [r1, #16]
 8006f78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	bfb8      	it	lt
 8006f80:	4613      	movlt	r3, r2
 8006f82:	6033      	str	r3, [r6, #0]
 8006f84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f88:	4607      	mov	r7, r0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	b10a      	cbz	r2, 8006f92 <_printf_common+0x26>
 8006f8e:	3301      	adds	r3, #1
 8006f90:	6033      	str	r3, [r6, #0]
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	0699      	lsls	r1, r3, #26
 8006f96:	bf42      	ittt	mi
 8006f98:	6833      	ldrmi	r3, [r6, #0]
 8006f9a:	3302      	addmi	r3, #2
 8006f9c:	6033      	strmi	r3, [r6, #0]
 8006f9e:	6825      	ldr	r5, [r4, #0]
 8006fa0:	f015 0506 	ands.w	r5, r5, #6
 8006fa4:	d106      	bne.n	8006fb4 <_printf_common+0x48>
 8006fa6:	f104 0a19 	add.w	sl, r4, #25
 8006faa:	68e3      	ldr	r3, [r4, #12]
 8006fac:	6832      	ldr	r2, [r6, #0]
 8006fae:	1a9b      	subs	r3, r3, r2
 8006fb0:	42ab      	cmp	r3, r5
 8006fb2:	dc26      	bgt.n	8007002 <_printf_common+0x96>
 8006fb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006fb8:	6822      	ldr	r2, [r4, #0]
 8006fba:	3b00      	subs	r3, #0
 8006fbc:	bf18      	it	ne
 8006fbe:	2301      	movne	r3, #1
 8006fc0:	0692      	lsls	r2, r2, #26
 8006fc2:	d42b      	bmi.n	800701c <_printf_common+0xb0>
 8006fc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fc8:	4641      	mov	r1, r8
 8006fca:	4638      	mov	r0, r7
 8006fcc:	47c8      	blx	r9
 8006fce:	3001      	adds	r0, #1
 8006fd0:	d01e      	beq.n	8007010 <_printf_common+0xa4>
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	6922      	ldr	r2, [r4, #16]
 8006fd6:	f003 0306 	and.w	r3, r3, #6
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	bf02      	ittt	eq
 8006fde:	68e5      	ldreq	r5, [r4, #12]
 8006fe0:	6833      	ldreq	r3, [r6, #0]
 8006fe2:	1aed      	subeq	r5, r5, r3
 8006fe4:	68a3      	ldr	r3, [r4, #8]
 8006fe6:	bf0c      	ite	eq
 8006fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fec:	2500      	movne	r5, #0
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	bfc4      	itt	gt
 8006ff2:	1a9b      	subgt	r3, r3, r2
 8006ff4:	18ed      	addgt	r5, r5, r3
 8006ff6:	2600      	movs	r6, #0
 8006ff8:	341a      	adds	r4, #26
 8006ffa:	42b5      	cmp	r5, r6
 8006ffc:	d11a      	bne.n	8007034 <_printf_common+0xc8>
 8006ffe:	2000      	movs	r0, #0
 8007000:	e008      	b.n	8007014 <_printf_common+0xa8>
 8007002:	2301      	movs	r3, #1
 8007004:	4652      	mov	r2, sl
 8007006:	4641      	mov	r1, r8
 8007008:	4638      	mov	r0, r7
 800700a:	47c8      	blx	r9
 800700c:	3001      	adds	r0, #1
 800700e:	d103      	bne.n	8007018 <_printf_common+0xac>
 8007010:	f04f 30ff 	mov.w	r0, #4294967295
 8007014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007018:	3501      	adds	r5, #1
 800701a:	e7c6      	b.n	8006faa <_printf_common+0x3e>
 800701c:	18e1      	adds	r1, r4, r3
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	2030      	movs	r0, #48	@ 0x30
 8007022:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007026:	4422      	add	r2, r4
 8007028:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800702c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007030:	3302      	adds	r3, #2
 8007032:	e7c7      	b.n	8006fc4 <_printf_common+0x58>
 8007034:	2301      	movs	r3, #1
 8007036:	4622      	mov	r2, r4
 8007038:	4641      	mov	r1, r8
 800703a:	4638      	mov	r0, r7
 800703c:	47c8      	blx	r9
 800703e:	3001      	adds	r0, #1
 8007040:	d0e6      	beq.n	8007010 <_printf_common+0xa4>
 8007042:	3601      	adds	r6, #1
 8007044:	e7d9      	b.n	8006ffa <_printf_common+0x8e>
	...

08007048 <_printf_i>:
 8007048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800704c:	7e0f      	ldrb	r7, [r1, #24]
 800704e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007050:	2f78      	cmp	r7, #120	@ 0x78
 8007052:	4691      	mov	r9, r2
 8007054:	4680      	mov	r8, r0
 8007056:	460c      	mov	r4, r1
 8007058:	469a      	mov	sl, r3
 800705a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800705e:	d807      	bhi.n	8007070 <_printf_i+0x28>
 8007060:	2f62      	cmp	r7, #98	@ 0x62
 8007062:	d80a      	bhi.n	800707a <_printf_i+0x32>
 8007064:	2f00      	cmp	r7, #0
 8007066:	f000 80d2 	beq.w	800720e <_printf_i+0x1c6>
 800706a:	2f58      	cmp	r7, #88	@ 0x58
 800706c:	f000 80b9 	beq.w	80071e2 <_printf_i+0x19a>
 8007070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007074:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007078:	e03a      	b.n	80070f0 <_printf_i+0xa8>
 800707a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800707e:	2b15      	cmp	r3, #21
 8007080:	d8f6      	bhi.n	8007070 <_printf_i+0x28>
 8007082:	a101      	add	r1, pc, #4	@ (adr r1, 8007088 <_printf_i+0x40>)
 8007084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007088:	080070e1 	.word	0x080070e1
 800708c:	080070f5 	.word	0x080070f5
 8007090:	08007071 	.word	0x08007071
 8007094:	08007071 	.word	0x08007071
 8007098:	08007071 	.word	0x08007071
 800709c:	08007071 	.word	0x08007071
 80070a0:	080070f5 	.word	0x080070f5
 80070a4:	08007071 	.word	0x08007071
 80070a8:	08007071 	.word	0x08007071
 80070ac:	08007071 	.word	0x08007071
 80070b0:	08007071 	.word	0x08007071
 80070b4:	080071f5 	.word	0x080071f5
 80070b8:	0800711f 	.word	0x0800711f
 80070bc:	080071af 	.word	0x080071af
 80070c0:	08007071 	.word	0x08007071
 80070c4:	08007071 	.word	0x08007071
 80070c8:	08007217 	.word	0x08007217
 80070cc:	08007071 	.word	0x08007071
 80070d0:	0800711f 	.word	0x0800711f
 80070d4:	08007071 	.word	0x08007071
 80070d8:	08007071 	.word	0x08007071
 80070dc:	080071b7 	.word	0x080071b7
 80070e0:	6833      	ldr	r3, [r6, #0]
 80070e2:	1d1a      	adds	r2, r3, #4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6032      	str	r2, [r6, #0]
 80070e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070f0:	2301      	movs	r3, #1
 80070f2:	e09d      	b.n	8007230 <_printf_i+0x1e8>
 80070f4:	6833      	ldr	r3, [r6, #0]
 80070f6:	6820      	ldr	r0, [r4, #0]
 80070f8:	1d19      	adds	r1, r3, #4
 80070fa:	6031      	str	r1, [r6, #0]
 80070fc:	0606      	lsls	r6, r0, #24
 80070fe:	d501      	bpl.n	8007104 <_printf_i+0xbc>
 8007100:	681d      	ldr	r5, [r3, #0]
 8007102:	e003      	b.n	800710c <_printf_i+0xc4>
 8007104:	0645      	lsls	r5, r0, #25
 8007106:	d5fb      	bpl.n	8007100 <_printf_i+0xb8>
 8007108:	f9b3 5000 	ldrsh.w	r5, [r3]
 800710c:	2d00      	cmp	r5, #0
 800710e:	da03      	bge.n	8007118 <_printf_i+0xd0>
 8007110:	232d      	movs	r3, #45	@ 0x2d
 8007112:	426d      	negs	r5, r5
 8007114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007118:	4859      	ldr	r0, [pc, #356]	@ (8007280 <_printf_i+0x238>)
 800711a:	230a      	movs	r3, #10
 800711c:	e011      	b.n	8007142 <_printf_i+0xfa>
 800711e:	6821      	ldr	r1, [r4, #0]
 8007120:	6833      	ldr	r3, [r6, #0]
 8007122:	0608      	lsls	r0, r1, #24
 8007124:	f853 5b04 	ldr.w	r5, [r3], #4
 8007128:	d402      	bmi.n	8007130 <_printf_i+0xe8>
 800712a:	0649      	lsls	r1, r1, #25
 800712c:	bf48      	it	mi
 800712e:	b2ad      	uxthmi	r5, r5
 8007130:	2f6f      	cmp	r7, #111	@ 0x6f
 8007132:	4853      	ldr	r0, [pc, #332]	@ (8007280 <_printf_i+0x238>)
 8007134:	6033      	str	r3, [r6, #0]
 8007136:	bf14      	ite	ne
 8007138:	230a      	movne	r3, #10
 800713a:	2308      	moveq	r3, #8
 800713c:	2100      	movs	r1, #0
 800713e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007142:	6866      	ldr	r6, [r4, #4]
 8007144:	60a6      	str	r6, [r4, #8]
 8007146:	2e00      	cmp	r6, #0
 8007148:	bfa2      	ittt	ge
 800714a:	6821      	ldrge	r1, [r4, #0]
 800714c:	f021 0104 	bicge.w	r1, r1, #4
 8007150:	6021      	strge	r1, [r4, #0]
 8007152:	b90d      	cbnz	r5, 8007158 <_printf_i+0x110>
 8007154:	2e00      	cmp	r6, #0
 8007156:	d04b      	beq.n	80071f0 <_printf_i+0x1a8>
 8007158:	4616      	mov	r6, r2
 800715a:	fbb5 f1f3 	udiv	r1, r5, r3
 800715e:	fb03 5711 	mls	r7, r3, r1, r5
 8007162:	5dc7      	ldrb	r7, [r0, r7]
 8007164:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007168:	462f      	mov	r7, r5
 800716a:	42bb      	cmp	r3, r7
 800716c:	460d      	mov	r5, r1
 800716e:	d9f4      	bls.n	800715a <_printf_i+0x112>
 8007170:	2b08      	cmp	r3, #8
 8007172:	d10b      	bne.n	800718c <_printf_i+0x144>
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	07df      	lsls	r7, r3, #31
 8007178:	d508      	bpl.n	800718c <_printf_i+0x144>
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	6861      	ldr	r1, [r4, #4]
 800717e:	4299      	cmp	r1, r3
 8007180:	bfde      	ittt	le
 8007182:	2330      	movle	r3, #48	@ 0x30
 8007184:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007188:	f106 36ff 	addle.w	r6, r6, #4294967295
 800718c:	1b92      	subs	r2, r2, r6
 800718e:	6122      	str	r2, [r4, #16]
 8007190:	f8cd a000 	str.w	sl, [sp]
 8007194:	464b      	mov	r3, r9
 8007196:	aa03      	add	r2, sp, #12
 8007198:	4621      	mov	r1, r4
 800719a:	4640      	mov	r0, r8
 800719c:	f7ff fee6 	bl	8006f6c <_printf_common>
 80071a0:	3001      	adds	r0, #1
 80071a2:	d14a      	bne.n	800723a <_printf_i+0x1f2>
 80071a4:	f04f 30ff 	mov.w	r0, #4294967295
 80071a8:	b004      	add	sp, #16
 80071aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	f043 0320 	orr.w	r3, r3, #32
 80071b4:	6023      	str	r3, [r4, #0]
 80071b6:	4833      	ldr	r0, [pc, #204]	@ (8007284 <_printf_i+0x23c>)
 80071b8:	2778      	movs	r7, #120	@ 0x78
 80071ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	6831      	ldr	r1, [r6, #0]
 80071c2:	061f      	lsls	r7, r3, #24
 80071c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80071c8:	d402      	bmi.n	80071d0 <_printf_i+0x188>
 80071ca:	065f      	lsls	r7, r3, #25
 80071cc:	bf48      	it	mi
 80071ce:	b2ad      	uxthmi	r5, r5
 80071d0:	6031      	str	r1, [r6, #0]
 80071d2:	07d9      	lsls	r1, r3, #31
 80071d4:	bf44      	itt	mi
 80071d6:	f043 0320 	orrmi.w	r3, r3, #32
 80071da:	6023      	strmi	r3, [r4, #0]
 80071dc:	b11d      	cbz	r5, 80071e6 <_printf_i+0x19e>
 80071de:	2310      	movs	r3, #16
 80071e0:	e7ac      	b.n	800713c <_printf_i+0xf4>
 80071e2:	4827      	ldr	r0, [pc, #156]	@ (8007280 <_printf_i+0x238>)
 80071e4:	e7e9      	b.n	80071ba <_printf_i+0x172>
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	f023 0320 	bic.w	r3, r3, #32
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	e7f6      	b.n	80071de <_printf_i+0x196>
 80071f0:	4616      	mov	r6, r2
 80071f2:	e7bd      	b.n	8007170 <_printf_i+0x128>
 80071f4:	6833      	ldr	r3, [r6, #0]
 80071f6:	6825      	ldr	r5, [r4, #0]
 80071f8:	6961      	ldr	r1, [r4, #20]
 80071fa:	1d18      	adds	r0, r3, #4
 80071fc:	6030      	str	r0, [r6, #0]
 80071fe:	062e      	lsls	r6, r5, #24
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	d501      	bpl.n	8007208 <_printf_i+0x1c0>
 8007204:	6019      	str	r1, [r3, #0]
 8007206:	e002      	b.n	800720e <_printf_i+0x1c6>
 8007208:	0668      	lsls	r0, r5, #25
 800720a:	d5fb      	bpl.n	8007204 <_printf_i+0x1bc>
 800720c:	8019      	strh	r1, [r3, #0]
 800720e:	2300      	movs	r3, #0
 8007210:	6123      	str	r3, [r4, #16]
 8007212:	4616      	mov	r6, r2
 8007214:	e7bc      	b.n	8007190 <_printf_i+0x148>
 8007216:	6833      	ldr	r3, [r6, #0]
 8007218:	1d1a      	adds	r2, r3, #4
 800721a:	6032      	str	r2, [r6, #0]
 800721c:	681e      	ldr	r6, [r3, #0]
 800721e:	6862      	ldr	r2, [r4, #4]
 8007220:	2100      	movs	r1, #0
 8007222:	4630      	mov	r0, r6
 8007224:	f7f9 f804 	bl	8000230 <memchr>
 8007228:	b108      	cbz	r0, 800722e <_printf_i+0x1e6>
 800722a:	1b80      	subs	r0, r0, r6
 800722c:	6060      	str	r0, [r4, #4]
 800722e:	6863      	ldr	r3, [r4, #4]
 8007230:	6123      	str	r3, [r4, #16]
 8007232:	2300      	movs	r3, #0
 8007234:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007238:	e7aa      	b.n	8007190 <_printf_i+0x148>
 800723a:	6923      	ldr	r3, [r4, #16]
 800723c:	4632      	mov	r2, r6
 800723e:	4649      	mov	r1, r9
 8007240:	4640      	mov	r0, r8
 8007242:	47d0      	blx	sl
 8007244:	3001      	adds	r0, #1
 8007246:	d0ad      	beq.n	80071a4 <_printf_i+0x15c>
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	079b      	lsls	r3, r3, #30
 800724c:	d413      	bmi.n	8007276 <_printf_i+0x22e>
 800724e:	68e0      	ldr	r0, [r4, #12]
 8007250:	9b03      	ldr	r3, [sp, #12]
 8007252:	4298      	cmp	r0, r3
 8007254:	bfb8      	it	lt
 8007256:	4618      	movlt	r0, r3
 8007258:	e7a6      	b.n	80071a8 <_printf_i+0x160>
 800725a:	2301      	movs	r3, #1
 800725c:	4632      	mov	r2, r6
 800725e:	4649      	mov	r1, r9
 8007260:	4640      	mov	r0, r8
 8007262:	47d0      	blx	sl
 8007264:	3001      	adds	r0, #1
 8007266:	d09d      	beq.n	80071a4 <_printf_i+0x15c>
 8007268:	3501      	adds	r5, #1
 800726a:	68e3      	ldr	r3, [r4, #12]
 800726c:	9903      	ldr	r1, [sp, #12]
 800726e:	1a5b      	subs	r3, r3, r1
 8007270:	42ab      	cmp	r3, r5
 8007272:	dcf2      	bgt.n	800725a <_printf_i+0x212>
 8007274:	e7eb      	b.n	800724e <_printf_i+0x206>
 8007276:	2500      	movs	r5, #0
 8007278:	f104 0619 	add.w	r6, r4, #25
 800727c:	e7f5      	b.n	800726a <_printf_i+0x222>
 800727e:	bf00      	nop
 8007280:	080073c9 	.word	0x080073c9
 8007284:	080073da 	.word	0x080073da

08007288 <memmove>:
 8007288:	4288      	cmp	r0, r1
 800728a:	b510      	push	{r4, lr}
 800728c:	eb01 0402 	add.w	r4, r1, r2
 8007290:	d902      	bls.n	8007298 <memmove+0x10>
 8007292:	4284      	cmp	r4, r0
 8007294:	4623      	mov	r3, r4
 8007296:	d807      	bhi.n	80072a8 <memmove+0x20>
 8007298:	1e43      	subs	r3, r0, #1
 800729a:	42a1      	cmp	r1, r4
 800729c:	d008      	beq.n	80072b0 <memmove+0x28>
 800729e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072a6:	e7f8      	b.n	800729a <memmove+0x12>
 80072a8:	4402      	add	r2, r0
 80072aa:	4601      	mov	r1, r0
 80072ac:	428a      	cmp	r2, r1
 80072ae:	d100      	bne.n	80072b2 <memmove+0x2a>
 80072b0:	bd10      	pop	{r4, pc}
 80072b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072ba:	e7f7      	b.n	80072ac <memmove+0x24>

080072bc <_sbrk_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d06      	ldr	r5, [pc, #24]	@ (80072d8 <_sbrk_r+0x1c>)
 80072c0:	2300      	movs	r3, #0
 80072c2:	4604      	mov	r4, r0
 80072c4:	4608      	mov	r0, r1
 80072c6:	602b      	str	r3, [r5, #0]
 80072c8:	f7fa fef4 	bl	80020b4 <_sbrk>
 80072cc:	1c43      	adds	r3, r0, #1
 80072ce:	d102      	bne.n	80072d6 <_sbrk_r+0x1a>
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	b103      	cbz	r3, 80072d6 <_sbrk_r+0x1a>
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	bd38      	pop	{r3, r4, r5, pc}
 80072d8:	20000694 	.word	0x20000694

080072dc <memcpy>:
 80072dc:	440a      	add	r2, r1
 80072de:	4291      	cmp	r1, r2
 80072e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80072e4:	d100      	bne.n	80072e8 <memcpy+0xc>
 80072e6:	4770      	bx	lr
 80072e8:	b510      	push	{r4, lr}
 80072ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072f2:	4291      	cmp	r1, r2
 80072f4:	d1f9      	bne.n	80072ea <memcpy+0xe>
 80072f6:	bd10      	pop	{r4, pc}

080072f8 <_realloc_r>:
 80072f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072fc:	4680      	mov	r8, r0
 80072fe:	4615      	mov	r5, r2
 8007300:	460c      	mov	r4, r1
 8007302:	b921      	cbnz	r1, 800730e <_realloc_r+0x16>
 8007304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007308:	4611      	mov	r1, r2
 800730a:	f7ff bc4b 	b.w	8006ba4 <_malloc_r>
 800730e:	b92a      	cbnz	r2, 800731c <_realloc_r+0x24>
 8007310:	f7ff fbdc 	bl	8006acc <_free_r>
 8007314:	2400      	movs	r4, #0
 8007316:	4620      	mov	r0, r4
 8007318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800731c:	f000 f81a 	bl	8007354 <_malloc_usable_size_r>
 8007320:	4285      	cmp	r5, r0
 8007322:	4606      	mov	r6, r0
 8007324:	d802      	bhi.n	800732c <_realloc_r+0x34>
 8007326:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800732a:	d8f4      	bhi.n	8007316 <_realloc_r+0x1e>
 800732c:	4629      	mov	r1, r5
 800732e:	4640      	mov	r0, r8
 8007330:	f7ff fc38 	bl	8006ba4 <_malloc_r>
 8007334:	4607      	mov	r7, r0
 8007336:	2800      	cmp	r0, #0
 8007338:	d0ec      	beq.n	8007314 <_realloc_r+0x1c>
 800733a:	42b5      	cmp	r5, r6
 800733c:	462a      	mov	r2, r5
 800733e:	4621      	mov	r1, r4
 8007340:	bf28      	it	cs
 8007342:	4632      	movcs	r2, r6
 8007344:	f7ff ffca 	bl	80072dc <memcpy>
 8007348:	4621      	mov	r1, r4
 800734a:	4640      	mov	r0, r8
 800734c:	f7ff fbbe 	bl	8006acc <_free_r>
 8007350:	463c      	mov	r4, r7
 8007352:	e7e0      	b.n	8007316 <_realloc_r+0x1e>

08007354 <_malloc_usable_size_r>:
 8007354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007358:	1f18      	subs	r0, r3, #4
 800735a:	2b00      	cmp	r3, #0
 800735c:	bfbc      	itt	lt
 800735e:	580b      	ldrlt	r3, [r1, r0]
 8007360:	18c0      	addlt	r0, r0, r3
 8007362:	4770      	bx	lr

08007364 <_init>:
 8007364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007366:	bf00      	nop
 8007368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800736a:	bc08      	pop	{r3}
 800736c:	469e      	mov	lr, r3
 800736e:	4770      	bx	lr

08007370 <_fini>:
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007372:	bf00      	nop
 8007374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007376:	bc08      	pop	{r3}
 8007378:	469e      	mov	lr, r3
 800737a:	4770      	bx	lr
