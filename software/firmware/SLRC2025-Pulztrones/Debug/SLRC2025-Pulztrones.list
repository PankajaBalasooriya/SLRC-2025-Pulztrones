
SLRC2025-Pulztrones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4b4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  0800b688  0800b688  0000c688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be6c  0800be6c  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800be6c  0800be6c  0000ce6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be74  0800be74  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be74  0800be74  0000ce74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be78  0800be78  0000ce78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800be7c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bb4  200001d4  0800c050  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d88  0800c050  0000dd88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177d3  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a9e  00000000  00000000  000249d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00028478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a5  00000000  00000000  00029b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006bbe  00000000  00000000  0002ad0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e548  00000000  00000000  000318cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7cfa  00000000  00000000  0004fe13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137b0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007064  00000000  00000000  00137b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  0013ebb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b66c 	.word	0x0800b66c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800b66c 	.word	0x0800b66c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b988 	b.w	8000fd0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	468e      	mov	lr, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4688      	mov	r8, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d962      	bls.n	8000db4 <__udivmoddi4+0xdc>
 8000cee:	fab2 f682 	clz	r6, r2
 8000cf2:	b14e      	cbz	r6, 8000d08 <__udivmoddi4+0x30>
 8000cf4:	f1c6 0320 	rsb	r3, r6, #32
 8000cf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	ea43 0808 	orr.w	r8, r3, r8
 8000d06:	40b4      	lsls	r4, r6
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d14:	0c23      	lsrs	r3, r4, #16
 8000d16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d2c:	f080 80ea 	bcs.w	8000f04 <__udivmoddi4+0x22c>
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f240 80e7 	bls.w	8000f04 <__udivmoddi4+0x22c>
 8000d36:	3902      	subs	r1, #2
 8000d38:	443b      	add	r3, r7
 8000d3a:	1a9a      	subs	r2, r3, r2
 8000d3c:	b2a3      	uxth	r3, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4e:	459c      	cmp	ip, r3
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x8e>
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d58:	f080 80d6 	bcs.w	8000f08 <__udivmoddi4+0x230>
 8000d5c:	459c      	cmp	ip, r3
 8000d5e:	f240 80d3 	bls.w	8000f08 <__udivmoddi4+0x230>
 8000d62:	443b      	add	r3, r7
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6a:	eba3 030c 	sub.w	r3, r3, ip
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40f3      	lsrs	r3, r6
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xb6>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb0>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x14c>
 8000d96:	4573      	cmp	r3, lr
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xc8>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	f200 8105 	bhi.w	8000faa <__udivmoddi4+0x2d2>
 8000da0:	1a84      	subs	r4, r0, r2
 8000da2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	4690      	mov	r8, r2
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d0e5      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000dae:	e9c5 4800 	strd	r4, r8, [r5]
 8000db2:	e7e2      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f000 8090 	beq.w	8000eda <__udivmoddi4+0x202>
 8000dba:	fab2 f682 	clz	r6, r2
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	f040 80a4 	bne.w	8000f0c <__udivmoddi4+0x234>
 8000dc4:	1a8a      	subs	r2, r1, r2
 8000dc6:	0c03      	lsrs	r3, r0, #16
 8000dc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dcc:	b280      	uxth	r0, r0
 8000dce:	b2bc      	uxth	r4, r7
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dde:	fb04 f20c 	mul.w	r2, r4, ip
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x11e>
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x11c>
 8000dee:	429a      	cmp	r2, r3
 8000df0:	f200 80e0 	bhi.w	8000fb4 <__udivmoddi4+0x2dc>
 8000df4:	46c4      	mov	ip, r8
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e04:	fb02 f404 	mul.w	r4, r2, r4
 8000e08:	429c      	cmp	r4, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x144>
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x142>
 8000e14:	429c      	cmp	r4, r3
 8000e16:	f200 80ca 	bhi.w	8000fae <__udivmoddi4+0x2d6>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	1b1b      	subs	r3, r3, r4
 8000e1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa0e f401 	lsl.w	r4, lr, r1
 8000e34:	fa20 f306 	lsr.w	r3, r0, r6
 8000e38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e40:	4323      	orrs	r3, r4
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	fa1f fc87 	uxth.w	ip, r7
 8000e4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e4e:	0c1c      	lsrs	r4, r3, #16
 8000e50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d909      	bls.n	8000e78 <__udivmoddi4+0x1a0>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e6a:	f080 809c 	bcs.w	8000fa6 <__udivmoddi4+0x2ce>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f240 8099 	bls.w	8000fa6 <__udivmoddi4+0x2ce>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	eba4 040e 	sub.w	r4, r4, lr
 8000e7c:	fa1f fe83 	uxth.w	lr, r3
 8000e80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e84:	fb09 4413 	mls	r4, r9, r3, r4
 8000e88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e90:	45a4      	cmp	ip, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1ce>
 8000e94:	193c      	adds	r4, r7, r4
 8000e96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e9a:	f080 8082 	bcs.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d97f      	bls.n	8000fa2 <__udivmoddi4+0x2ca>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eaa:	eba4 040c 	sub.w	r4, r4, ip
 8000eae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000eb2:	4564      	cmp	r4, ip
 8000eb4:	4673      	mov	r3, lr
 8000eb6:	46e1      	mov	r9, ip
 8000eb8:	d362      	bcc.n	8000f80 <__udivmoddi4+0x2a8>
 8000eba:	d05f      	beq.n	8000f7c <__udivmoddi4+0x2a4>
 8000ebc:	b15d      	cbz	r5, 8000ed6 <__udivmoddi4+0x1fe>
 8000ebe:	ebb8 0203 	subs.w	r2, r8, r3
 8000ec2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	fa22 f301 	lsr.w	r3, r2, r1
 8000ece:	431e      	orrs	r6, r3
 8000ed0:	40cc      	lsrs	r4, r1
 8000ed2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e74f      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000eda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ede:	0c01      	lsrs	r1, r0, #16
 8000ee0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eea:	463b      	mov	r3, r7
 8000eec:	4638      	mov	r0, r7
 8000eee:	463c      	mov	r4, r7
 8000ef0:	46b8      	mov	r8, r7
 8000ef2:	46be      	mov	lr, r7
 8000ef4:	2620      	movs	r6, #32
 8000ef6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000efa:	eba2 0208 	sub.w	r2, r2, r8
 8000efe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f02:	e766      	b.n	8000dd2 <__udivmoddi4+0xfa>
 8000f04:	4601      	mov	r1, r0
 8000f06:	e718      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	e72c      	b.n	8000d66 <__udivmoddi4+0x8e>
 8000f0c:	f1c6 0220 	rsb	r2, r6, #32
 8000f10:	fa2e f302 	lsr.w	r3, lr, r2
 8000f14:	40b7      	lsls	r7, r6
 8000f16:	40b1      	lsls	r1, r6
 8000f18:	fa20 f202 	lsr.w	r2, r0, r2
 8000f1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f20:	430a      	orrs	r2, r1
 8000f22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f26:	b2bc      	uxth	r4, r7
 8000f28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb08 f904 	mul.w	r9, r8, r4
 8000f36:	40b0      	lsls	r0, r6
 8000f38:	4589      	cmp	r9, r1
 8000f3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f3e:	b280      	uxth	r0, r0
 8000f40:	d93e      	bls.n	8000fc0 <__udivmoddi4+0x2e8>
 8000f42:	1879      	adds	r1, r7, r1
 8000f44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f48:	d201      	bcs.n	8000f4e <__udivmoddi4+0x276>
 8000f4a:	4589      	cmp	r9, r1
 8000f4c:	d81f      	bhi.n	8000f8e <__udivmoddi4+0x2b6>
 8000f4e:	eba1 0109 	sub.w	r1, r1, r9
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fb09 f804 	mul.w	r8, r9, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	b292      	uxth	r2, r2
 8000f60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f64:	4542      	cmp	r2, r8
 8000f66:	d229      	bcs.n	8000fbc <__udivmoddi4+0x2e4>
 8000f68:	18ba      	adds	r2, r7, r2
 8000f6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f6e:	d2c4      	bcs.n	8000efa <__udivmoddi4+0x222>
 8000f70:	4542      	cmp	r2, r8
 8000f72:	d2c2      	bcs.n	8000efa <__udivmoddi4+0x222>
 8000f74:	f1a9 0102 	sub.w	r1, r9, #2
 8000f78:	443a      	add	r2, r7
 8000f7a:	e7be      	b.n	8000efa <__udivmoddi4+0x222>
 8000f7c:	45f0      	cmp	r8, lr
 8000f7e:	d29d      	bcs.n	8000ebc <__udivmoddi4+0x1e4>
 8000f80:	ebbe 0302 	subs.w	r3, lr, r2
 8000f84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f88:	3801      	subs	r0, #1
 8000f8a:	46e1      	mov	r9, ip
 8000f8c:	e796      	b.n	8000ebc <__udivmoddi4+0x1e4>
 8000f8e:	eba7 0909 	sub.w	r9, r7, r9
 8000f92:	4449      	add	r1, r9
 8000f94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9c:	fb09 f804 	mul.w	r8, r9, r4
 8000fa0:	e7db      	b.n	8000f5a <__udivmoddi4+0x282>
 8000fa2:	4673      	mov	r3, lr
 8000fa4:	e77f      	b.n	8000ea6 <__udivmoddi4+0x1ce>
 8000fa6:	4650      	mov	r0, sl
 8000fa8:	e766      	b.n	8000e78 <__udivmoddi4+0x1a0>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e6fd      	b.n	8000daa <__udivmoddi4+0xd2>
 8000fae:	443b      	add	r3, r7
 8000fb0:	3a02      	subs	r2, #2
 8000fb2:	e733      	b.n	8000e1c <__udivmoddi4+0x144>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	443b      	add	r3, r7
 8000fba:	e71c      	b.n	8000df6 <__udivmoddi4+0x11e>
 8000fbc:	4649      	mov	r1, r9
 8000fbe:	e79c      	b.n	8000efa <__udivmoddi4+0x222>
 8000fc0:	eba1 0109 	sub.w	r1, r1, r9
 8000fc4:	46c4      	mov	ip, r8
 8000fc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fca:	fb09 f804 	mul.w	r8, r9, r4
 8000fce:	e7c4      	b.n	8000f5a <__udivmoddi4+0x282>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <Buzzer_On>:
#include "buzzer.h"
#include "main.h"

// Turn on the buzzer (PC15 high)
void Buzzer_On(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2120      	movs	r1, #32
 8000fdc:	4802      	ldr	r0, [pc, #8]	@ (8000fe8 <Buzzer_On+0x14>)
 8000fde:	f003 fe85 	bl	8004cec <HAL_GPIO_WritePin>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40020000 	.word	0x40020000

08000fec <Buzzer_Off>:

// Turn off the buzzer (PC15 low)
void Buzzer_Off(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2120      	movs	r1, #32
 8000ff4:	4802      	ldr	r0, [pc, #8]	@ (8001000 <Buzzer_Off+0x14>)
 8000ff6:	f003 fe79 	bl	8004cec <HAL_GPIO_WritePin>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40020000 	.word	0x40020000

08001004 <Buzzer_Toggle>:

// Toggle the buzzer state with a specified delay
void Buzzer_Toggle(uint32_t delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    Buzzer_On();
 800100c:	f7ff ffe2 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(delay);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f002 fdb3 	bl	8003b7c <HAL_Delay>
    Buzzer_Off();
 8001016:	f7ff ffe9 	bl	8000fec <Buzzer_Off>
    HAL_Delay(delay);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f002 fdae 	bl	8003b7c <HAL_Delay>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <Buzzer_UniquePattern>:

void Buzzer_UniquePattern(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
    // Pattern: Short-Short-Long-Short-Long
    // Total duration: 1000ms (1 second)

    Buzzer_On();
 800102c:	f7ff ffd2 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 8001030:	2064      	movs	r0, #100	@ 0x64
 8001032:	f002 fda3 	bl	8003b7c <HAL_Delay>
    Buzzer_Off();
 8001036:	f7ff ffd9 	bl	8000fec <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800103a:	2064      	movs	r0, #100	@ 0x64
 800103c:	f002 fd9e 	bl	8003b7c <HAL_Delay>

    Buzzer_On();
 8001040:	f7ff ffc8 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 8001044:	2064      	movs	r0, #100	@ 0x64
 8001046:	f002 fd99 	bl	8003b7c <HAL_Delay>
    Buzzer_Off();
 800104a:	f7ff ffcf 	bl	8000fec <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 800104e:	2064      	movs	r0, #100	@ 0x64
 8001050:	f002 fd94 	bl	8003b7c <HAL_Delay>

    Buzzer_On();
 8001054:	f7ff ffbe 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 8001058:	20c8      	movs	r0, #200	@ 0xc8
 800105a:	f002 fd8f 	bl	8003b7c <HAL_Delay>
    Buzzer_Off();
 800105e:	f7ff ffc5 	bl	8000fec <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 8001062:	2064      	movs	r0, #100	@ 0x64
 8001064:	f002 fd8a 	bl	8003b7c <HAL_Delay>

    Buzzer_On();
 8001068:	f7ff ffb4 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(100);  // 100ms on
 800106c:	2064      	movs	r0, #100	@ 0x64
 800106e:	f002 fd85 	bl	8003b7c <HAL_Delay>
    Buzzer_Off();
 8001072:	f7ff ffbb 	bl	8000fec <Buzzer_Off>
    HAL_Delay(100);  // 100ms off
 8001076:	2064      	movs	r0, #100	@ 0x64
 8001078:	f002 fd80 	bl	8003b7c <HAL_Delay>

    Buzzer_On();
 800107c:	f7ff ffaa 	bl	8000fd4 <Buzzer_On>
    HAL_Delay(200);  // 200ms on
 8001080:	20c8      	movs	r0, #200	@ 0xc8
 8001082:	f002 fd7b 	bl	8003b7c <HAL_Delay>
    Buzzer_Off();
 8001086:	f7ff ffb1 	bl	8000fec <Buzzer_Off>
    // No delay at the end to make it exactly 1 second
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}

0800108e <Controller_Init>:
#include "fonts.h"
#include <stdio.h>

static float oldSpeed = 0;

void Controller_Init(Controller *controller) {
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
    // Initialize motor struct
	controller->forward_error = 0;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
	controller->rotational_error = 0;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
	controller->previous_forward_error = 0;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
	controller->previous_rotational_error = 0;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f04f 0200 	mov.w	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
	controller->velocity = 0;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
	controller->omega = 0;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
	controller->left_motor_pwm = 0;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
	controller->right_motor_pwm = 0;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
	controller->controllers_enabled = 1;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2020 	strb.w	r2, [r3, #32]
	controller->feedforward_enabled = 1;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <Controller_ResetControllers>:
}

/**
 * Reset the error integrals for both forward and rotational controllers.
 */
void Controller_ResetControllers(Controller *controller) {
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
    controller->forward_error = 0;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
    controller->rotational_error = 0;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	605a      	str	r2, [r3, #4]
    controller->previous_forward_error = 0;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
    controller->previous_rotational_error = 0;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <UpdateControllers>:


/**
 * Update motor controllers based on velocity, angular velocity, and steering adjustment.
 */
void UpdateControllers(Controller *controller, float velocity, float omega, float steering_adjustment) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b090      	sub	sp, #64	@ 0x40
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	ed87 0a02 	vstr	s0, [r7, #8]
 8001134:	edc7 0a01 	vstr	s1, [r7, #4]
 8001138:	ed87 1a00 	vstr	s2, [r7]
    float forward_output, rotational_output, left_output, right_output;
    //float left_speed, right_speed, left_ff, right_ff;

    controller->velocity = velocity;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	611a      	str	r2, [r3, #16]
    controller->omega = omega;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	615a      	str	r2, [r3, #20]

    // Forward motion control
    float forward_increment = velocity * LOOP_INTERVAL;//
 8001148:	4b6c      	ldr	r3, [pc, #432]	@ (80012fc <UpdateControllers+0x1d4>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001156:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    controller->forward_error += forward_increment - robot_fwd_change();
 800115a:	f000 fa87 	bl	800166c <robot_fwd_change>
 800115e:	eeb0 7a40 	vmov.f32	s14, s0
 8001162:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001166:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	edc3 7a00 	vstr	s15, [r3]
    float forward_diff = controller->forward_error - controller->previous_forward_error;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	ed93 7a00 	vldr	s14, [r3]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	edd3 7a02 	vldr	s15, [r3, #8]
 8001186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    controller->previous_forward_error = controller->forward_error;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	609a      	str	r2, [r3, #8]
    forward_output = FWD_KP * controller->forward_error + FWD_KD * forward_diff;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	ed93 7a00 	vldr	s14, [r3]
 800119c:	4b58      	ldr	r3, [pc, #352]	@ (8001300 <UpdateControllers+0x1d8>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011a6:	4b57      	ldr	r3, [pc, #348]	@ (8001304 <UpdateControllers+0x1dc>)
 80011a8:	edd3 6a00 	vldr	s13, [r3]
 80011ac:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80011b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Rotational control
    float rotational_increment = omega * LOOP_INTERVAL;
 80011bc:	4b4f      	ldr	r3, [pc, #316]	@ (80012fc <UpdateControllers+0x1d4>)
 80011be:	edd3 7a00 	vldr	s15, [r3]
 80011c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80011c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ca:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    controller->rotational_error += rotational_increment - robot_rot_change();
 80011ce:	f000 fa5f 	bl	8001690 <robot_rot_change>
 80011d2:	eeb0 7a40 	vmov.f32	s14, s0
 80011d6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80011da:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	edc3 7a01 	vstr	s15, [r3, #4]
    controller->rotational_error -= steering_adjustment;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80011f4:	edd7 7a00 	vldr	s15, [r7]
 80011f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	edc3 7a01 	vstr	s15, [r3, #4]
    float rotational_diff = controller->rotational_error - controller->previous_rotational_error;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	ed93 7a01 	vldr	s14, [r3, #4]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	edd3 7a03 	vldr	s15, [r3, #12]
 800120e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001212:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    controller->previous_rotational_error = controller->rotational_error;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	60da      	str	r2, [r3, #12]
    rotational_output = ROT_KP * controller->rotational_error + ROT_KD * rotational_diff;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	ed93 7a01 	vldr	s14, [r3, #4]
 8001224:	4b38      	ldr	r3, [pc, #224]	@ (8001308 <UpdateControllers+0x1e0>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800122e:	4b37      	ldr	r3, [pc, #220]	@ (800130c <UpdateControllers+0x1e4>)
 8001230:	edd3 6a00 	vldr	s13, [r3]
 8001234:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800123c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001240:	edc7 7a08 	vstr	s15, [r7, #32]

    // Combine forward and rotational outputs
    left_output = forward_output - rotational_output;
 8001244:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001248:	edd7 7a08 	vldr	s15, [r7, #32]
 800124c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001250:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    right_output = forward_output + rotational_output;
 8001254:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001258:	edd7 7a08 	vldr	s15, [r7, #32]
 800125c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001260:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    float tangent_speed = omega * ROBOT_RADIUS * RADIANS_PER_DEGREE;
 8001264:	4b2a      	ldr	r3, [pc, #168]	@ (8001310 <UpdateControllers+0x1e8>)
 8001266:	ed93 7a00 	vldr	s14, [r3]
 800126a:	edd7 7a01 	vldr	s15, [r7, #4]
 800126e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001272:	4b28      	ldr	r3, [pc, #160]	@ (8001314 <UpdateControllers+0x1ec>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127c:	edc7 7a07 	vstr	s15, [r7, #28]

	float left_speed = velocity - tangent_speed;
 8001280:	ed97 7a02 	vldr	s14, [r7, #8]
 8001284:	edd7 7a07 	vldr	s15, [r7, #28]
 8001288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800128c:	edc7 7a06 	vstr	s15, [r7, #24]
	float right_speed = velocity + tangent_speed;
 8001290:	ed97 7a02 	vldr	s14, [r7, #8]
 8001294:	edd7 7a07 	vldr	s15, [r7, #28]
 8001298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129c:	edc7 7a05 	vstr	s15, [r7, #20]

	if (controller->feedforward_enabled) {
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d017      	beq.n	80012da <UpdateControllers+0x1b2>
		// Feedforward calculation
		left_output += leftFeedForward(left_speed);
 80012aa:	ed97 0a06 	vldr	s0, [r7, #24]
 80012ae:	f000 f833 	bl	8001318 <leftFeedForward>
 80012b2:	eeb0 7a40 	vmov.f32	s14, s0
 80012b6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80012ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012be:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		right_output += rightFeedForward(right_speed);
 80012c2:	ed97 0a05 	vldr	s0, [r7, #20]
 80012c6:	f000 f88d 	bl	80013e4 <rightFeedForward>
 80012ca:	eeb0 7a40 	vmov.f32	s14, s0
 80012ce:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80012d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012d6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	}

    if (controller->controllers_enabled) {
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d007      	beq.n	80012f4 <UpdateControllers+0x1cc>
    	setMotorLPWM(left_output);
 80012e4:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80012e8:	f000 ff22 	bl	8002130 <setMotorLPWM>
        setMotorRPWM(right_output);
 80012ec:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 80012f0:	f000 ff64 	bl	80021bc <setMotorRPWM>
    }


}
 80012f4:	bf00      	nop
 80012f6:	3740      	adds	r7, #64	@ 0x40
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	0800b6b4 	.word	0x0800b6b4
 8001300:	0800b6c4 	.word	0x0800b6c4
 8001304:	0800b6c8 	.word	0x0800b6c8
 8001308:	0800b6cc 	.word	0x0800b6cc
 800130c:	0800b6d0 	.word	0x0800b6d0
 8001310:	0800b6a4 	.word	0x0800b6a4
 8001314:	0800b6ac 	.word	0x0800b6ac

08001318 <leftFeedForward>:


float leftFeedForward(float speed) {
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	ed87 0a01 	vstr	s0, [r7, #4]
//  static float oldSpeed = speed;
  float leftFF = speed * SPEED_FF;
 8001322:	4b2b      	ldr	r3, [pc, #172]	@ (80013d0 <leftFeedForward+0xb8>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	ed97 7a01 	vldr	s14, [r7, #4]
 800132c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001330:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 8001334:	edd7 7a01 	vldr	s15, [r7, #4]
 8001338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001340:	dd09      	ble.n	8001356 <leftFeedForward+0x3e>
    leftFF += BIAS_FF;
 8001342:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <leftFeedForward+0xbc>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	ed97 7a05 	vldr	s14, [r7, #20]
 800134c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001350:	edc7 7a05 	vstr	s15, [r7, #20]
 8001354:	e00f      	b.n	8001376 <leftFeedForward+0x5e>
  } else if (speed < 0) {
 8001356:	edd7 7a01 	vldr	s15, [r7, #4]
 800135a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001362:	d508      	bpl.n	8001376 <leftFeedForward+0x5e>
    leftFF -= BIAS_FF;
 8001364:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <leftFeedForward+0xbc>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	ed97 7a05 	vldr	s14, [r7, #20]
 800136e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001372:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 8001376:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <leftFeedForward+0xc0>)
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001380:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001384:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <leftFeedForward+0xc4>)
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138e:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 8001392:	4a11      	ldr	r2, [pc, #68]	@ (80013d8 <leftFeedForward+0xc0>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <leftFeedForward+0xc8>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	ed97 7a04 	vldr	s14, [r7, #16]
 80013a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a6:	edc7 7a03 	vstr	s15, [r7, #12]
  leftFF += accFF;
 80013aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80013ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80013b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b6:	edc7 7a05 	vstr	s15, [r7, #20]
  return leftFF;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	ee07 3a90 	vmov	s15, r3
}
 80013c0:	eeb0 0a67 	vmov.f32	s0, s15
 80013c4:	371c      	adds	r7, #28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	0800b6b8 	.word	0x0800b6b8
 80013d4:	0800b6c0 	.word	0x0800b6c0
 80013d8:	200001f0 	.word	0x200001f0
 80013dc:	0800b6b0 	.word	0x0800b6b0
 80013e0:	0800b6bc 	.word	0x0800b6bc

080013e4 <rightFeedForward>:

float rightFeedForward(float speed) {
 80013e4:	b480      	push	{r7}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	ed87 0a01 	vstr	s0, [r7, #4]
  //static float oldSpeed = speed;
  float rightFF = speed * SPEED_FF;
 80013ee:	4b2b      	ldr	r3, [pc, #172]	@ (800149c <rightFeedForward+0xb8>)
 80013f0:	edd3 7a00 	vldr	s15, [r3]
 80013f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80013f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013fc:	edc7 7a05 	vstr	s15, [r7, #20]
  if (speed > 0) {
 8001400:	edd7 7a01 	vldr	s15, [r7, #4]
 8001404:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140c:	dd09      	ble.n	8001422 <rightFeedForward+0x3e>
    rightFF += BIAS_FF;
 800140e:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <rightFeedForward+0xbc>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	ed97 7a05 	vldr	s14, [r7, #20]
 8001418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141c:	edc7 7a05 	vstr	s15, [r7, #20]
 8001420:	e00f      	b.n	8001442 <rightFeedForward+0x5e>
  } else if (speed < 0) {
 8001422:	edd7 7a01 	vldr	s15, [r7, #4]
 8001426:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142e:	d508      	bpl.n	8001442 <rightFeedForward+0x5e>
    rightFF -= BIAS_FF;
 8001430:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <rightFeedForward+0xbc>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ed97 7a05 	vldr	s14, [r7, #20]
 800143a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143e:	edc7 7a05 	vstr	s15, [r7, #20]
  } else {
    // No bias when the speed is 0
  }
  float acc = (speed - oldSpeed) * LOOP_FREQUENCY;
 8001442:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <rightFeedForward+0xc0>)
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	ed97 7a01 	vldr	s14, [r7, #4]
 800144c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001450:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <rightFeedForward+0xc4>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145a:	edc7 7a04 	vstr	s15, [r7, #16]
  oldSpeed = speed;
 800145e:	4a11      	ldr	r2, [pc, #68]	@ (80014a4 <rightFeedForward+0xc0>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6013      	str	r3, [r2, #0]
  float accFF = ACC_FF * acc;
 8001464:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <rightFeedForward+0xc8>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	ed97 7a04 	vldr	s14, [r7, #16]
 800146e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001472:	edc7 7a03 	vstr	s15, [r7, #12]
  rightFF += accFF;
 8001476:	ed97 7a05 	vldr	s14, [r7, #20]
 800147a:	edd7 7a03 	vldr	s15, [r7, #12]
 800147e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001482:	edc7 7a05 	vstr	s15, [r7, #20]
  return rightFF;
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	ee07 3a90 	vmov	s15, r3
}
 800148c:	eeb0 0a67 	vmov.f32	s0, s15
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	0800b6b8 	.word	0x0800b6b8
 80014a0:	0800b6c0 	.word	0x0800b6c0
 80014a4:	200001f0 	.word	0x200001f0
 80014a8:	0800b6b0 	.word	0x0800b6b0
 80014ac:	0800b6bc 	.word	0x0800b6bc

080014b0 <Delay_Init>:

#include "main.h"
#include "delay.h"

void Delay_Init(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk))
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <Delay_Init+0x38>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10e      	bne.n	80014de <Delay_Init+0x2e>
    {
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <Delay_Init+0x38>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	4a08      	ldr	r2, [pc, #32]	@ (80014e8 <Delay_Init+0x38>)
 80014c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014ca:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80014cc:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <Delay_Init+0x3c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <Delay_Init+0x3c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a05      	ldr	r2, [pc, #20]	@ (80014ec <Delay_Init+0x3c>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6013      	str	r3, [r2, #0]
    }
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000edf0 	.word	0xe000edf0
 80014ec:	e0001000 	.word	0xe0001000

080014f0 <getRightEncoderCounts>:
/*
 * NOTE: your timers might be different based on what you used when designing your PCB!
 * Also, if your encoder values are negative of what they should be, multiply the return values by -1.
 */

int16_t getRightEncoderCounts() {
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
	return (int16_t) TIM2->CNT;
 80014f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fa:	b21b      	sxth	r3, r3
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
	return (int16_t) TIM1->CNT;
 800150c:	4b03      	ldr	r3, [pc, #12]	@ (800151c <getLeftEncoderCounts+0x14>)
 800150e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001510:	b21b      	sxth	r3, r3
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	40010000 	.word	0x40010000

08001520 <resetEncodersinSystick>:
	previous_left_count = 0;
	previous_right_count = 0;

}

void resetEncodersinSystick() {
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
	TIM1->CNT = (int16_t) 0;
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <resetEncodersinSystick+0x1c>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = (int16_t) 0;
 800152a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40010000 	.word	0x40010000

08001540 <update_Encoder_Data>:

void update_Encoder_Data(){
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
	int16_t left_count = getLeftEncoderCounts();
 8001546:	f7ff ffdf 	bl	8001508 <getLeftEncoderCounts>
 800154a:	4603      	mov	r3, r0
 800154c:	81fb      	strh	r3, [r7, #14]
	int16_t right_count = getRightEncoderCounts();
 800154e:	f7ff ffcf 	bl	80014f0 <getRightEncoderCounts>
 8001552:	4603      	mov	r3, r0
 8001554:	81bb      	strh	r3, [r7, #12]

	left_delta = left_count - previous_left_count;
 8001556:	89fa      	ldrh	r2, [r7, #14]
 8001558:	4b3b      	ldr	r3, [pc, #236]	@ (8001648 <update_Encoder_Data+0x108>)
 800155a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155e:	b29b      	uxth	r3, r3
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	b29b      	uxth	r3, r3
 8001564:	b21a      	sxth	r2, r3
 8001566:	4b39      	ldr	r3, [pc, #228]	@ (800164c <update_Encoder_Data+0x10c>)
 8001568:	801a      	strh	r2, [r3, #0]
	previous_left_count = left_count;
 800156a:	4a37      	ldr	r2, [pc, #220]	@ (8001648 <update_Encoder_Data+0x108>)
 800156c:	89fb      	ldrh	r3, [r7, #14]
 800156e:	8013      	strh	r3, [r2, #0]

	right_delta = right_count - previous_right_count;
 8001570:	89ba      	ldrh	r2, [r7, #12]
 8001572:	4b37      	ldr	r3, [pc, #220]	@ (8001650 <update_Encoder_Data+0x110>)
 8001574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001578:	b29b      	uxth	r3, r3
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	b29b      	uxth	r3, r3
 800157e:	b21a      	sxth	r2, r3
 8001580:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <update_Encoder_Data+0x114>)
 8001582:	801a      	strh	r2, [r3, #0]
	previous_right_count = right_count;
 8001584:	4a32      	ldr	r2, [pc, #200]	@ (8001650 <update_Encoder_Data+0x110>)
 8001586:	89bb      	ldrh	r3, [r7, #12]
 8001588:	8013      	strh	r3, [r2, #0]

	float left_change = left_delta * MM_PER_COUNT_LEFT;
 800158a:	4b30      	ldr	r3, [pc, #192]	@ (800164c <update_Encoder_Data+0x10c>)
 800158c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe fff7 	bl	8000584 <__aeabi_i2d>
 8001596:	a32a      	add	r3, pc, #168	@ (adr r3, 8001640 <update_Encoder_Data+0x100>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7ff f85c 	bl	8000658 <__aeabi_dmul>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	f7ff fb2e 	bl	8000c08 <__aeabi_d2f>
 80015ac:	4603      	mov	r3, r0
 80015ae:	60bb      	str	r3, [r7, #8]
	float right_change = right_delta * MM_PER_COUNT_RIGHT;
 80015b0:	4b28      	ldr	r3, [pc, #160]	@ (8001654 <update_Encoder_Data+0x114>)
 80015b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffe4 	bl	8000584 <__aeabi_i2d>
 80015bc:	a320      	add	r3, pc, #128	@ (adr r3, 8001640 <update_Encoder_Data+0x100>)
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	f7ff f849 	bl	8000658 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fb1b 	bl	8000c08 <__aeabi_d2f>
 80015d2:	4603      	mov	r3, r0
 80015d4:	607b      	str	r3, [r7, #4]

	m_fwd_change = 0.5 * (right_change + left_change);
 80015d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80015da:	edd7 7a02 	vldr	s15, [r7, #8]
 80015de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80015e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001658 <update_Encoder_Data+0x118>)
 80015ec:	edc3 7a00 	vstr	s15, [r3]
	m_robot_distance += m_fwd_change;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <update_Encoder_Data+0x11c>)
 80015f2:	ed93 7a00 	vldr	s14, [r3]
 80015f6:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <update_Encoder_Data+0x118>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001600:	4b16      	ldr	r3, [pc, #88]	@ (800165c <update_Encoder_Data+0x11c>)
 8001602:	edc3 7a00 	vstr	s15, [r3]
	m_rot_change = (right_change - left_change) * DEG_PER_MM_DIFFERENCE;
 8001606:	ed97 7a01 	vldr	s14, [r7, #4]
 800160a:	edd7 7a02 	vldr	s15, [r7, #8]
 800160e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001612:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <update_Encoder_Data+0x120>)
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <update_Encoder_Data+0x124>)
 800161e:	edc3 7a00 	vstr	s15, [r3]
	m_robot_angle += m_rot_change;
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <update_Encoder_Data+0x128>)
 8001624:	ed93 7a00 	vldr	s14, [r3]
 8001628:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <update_Encoder_Data+0x124>)
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001632:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <update_Encoder_Data+0x128>)
 8001634:	edc3 7a00 	vstr	s15, [r3]


}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	58e4ab66 	.word	0x58e4ab66
 8001644:	3fb0cd2e 	.word	0x3fb0cd2e
 8001648:	20000200 	.word	0x20000200
 800164c:	200001fc 	.word	0x200001fc
 8001650:	20000202 	.word	0x20000202
 8001654:	200001fe 	.word	0x200001fe
 8001658:	20000204 	.word	0x20000204
 800165c:	200001f4 	.word	0x200001f4
 8001660:	0800b6a8 	.word	0x0800b6a8
 8001664:	20000208 	.word	0x20000208
 8001668:	200001f8 	.word	0x200001f8

0800166c <robot_fwd_change>:
	float omega;
	omega = LOOP_FREQUENCY * m_rot_change;
	return omega;
}

float robot_fwd_change() {
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
	float distance;
	distance = m_fwd_change;
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <robot_fwd_change+0x20>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	607b      	str	r3, [r7, #4]
	return distance;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	ee07 3a90 	vmov	s15, r3
}
 800167e:	eeb0 0a67 	vmov.f32	s0, s15
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	20000204 	.word	0x20000204

08001690 <robot_rot_change>:

float robot_rot_change() {
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
	float distance;
	distance = m_rot_change;
 8001696:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <robot_rot_change+0x20>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	607b      	str	r3, [r7, #4]
	return distance;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	ee07 3a90 	vmov	s15, r3
}
 80016a2:	eeb0 0a67 	vmov.f32	s0, s15
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	20000208 	.word	0x20000208

080016b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ba:	f002 f9ed 	bl	8003a98 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016be:	f000 f8c5 	bl	800184c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c2:	f000 fba7 	bl	8001e14 <MX_GPIO_Init>
  MX_DMA_Init();
 80016c6:	f000 fb85 	bl	8001dd4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016ca:	f000 fb05 	bl	8001cd8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80016ce:	f000 f9dd 	bl	8001a8c <MX_TIM1_Init>
  MX_TIM2_Init();
 80016d2:	f000 fa33 	bl	8001b3c <MX_TIM2_Init>
  MX_I2C2_Init();
 80016d6:	f000 f9ab 	bl	8001a30 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 80016da:	f000 fb27 	bl	8001d2c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80016de:	f000 fb4f 	bl	8001d80 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80016e2:	f000 f925 	bl	8001930 <MX_ADC1_Init>
  MX_I2C1_Init();
 80016e6:	f000 f975 	bl	80019d4 <MX_I2C1_Init>
  MX_TIM3_Init();
 80016ea:	f000 fa7b 	bl	8001be4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80016ee:	213c      	movs	r1, #60	@ 0x3c
 80016f0:	4844      	ldr	r0, [pc, #272]	@ (8001804 <main+0x150>)
 80016f2:	f005 fddd 	bl	80072b0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80016f6:	213c      	movs	r1, #60	@ 0x3c
 80016f8:	4843      	ldr	r0, [pc, #268]	@ (8001808 <main+0x154>)
 80016fa:	f005 fdd9 	bl	80072b0 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80016fe:	2100      	movs	r1, #0
 8001700:	4842      	ldr	r0, [pc, #264]	@ (800180c <main+0x158>)
 8001702:	f005 fc67 	bl	8006fd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001706:	2104      	movs	r1, #4
 8001708:	4840      	ldr	r0, [pc, #256]	@ (800180c <main+0x158>)
 800170a:	f005 fc63 	bl	8006fd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800170e:	2108      	movs	r1, #8
 8001710:	483e      	ldr	r0, [pc, #248]	@ (800180c <main+0x158>)
 8001712:	f005 fc5f 	bl	8006fd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001716:	210c      	movs	r1, #12
 8001718:	483c      	ldr	r0, [pc, #240]	@ (800180c <main+0x158>)
 800171a:	f005 fc5b 	bl	8006fd4 <HAL_TIM_PWM_Start>

  SSD1306_Init();
 800171e:	f001 ff4f 	bl	80035c0 <SSD1306_Init>
    SSD1306_DrawBitmap(0, 0, logo, 128, 64, 1);
 8001722:	2301      	movs	r3, #1
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	2340      	movs	r3, #64	@ 0x40
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2380      	movs	r3, #128	@ 0x80
 800172c:	4a38      	ldr	r2, [pc, #224]	@ (8001810 <main+0x15c>)
 800172e:	2100      	movs	r1, #0
 8001730:	2000      	movs	r0, #0
 8001732:	f002 f8af 	bl	8003894 <SSD1306_DrawBitmap>
    SSD1306_UpdateScreen(); // update screen
 8001736:	f002 f807 	bl	8003748 <SSD1306_UpdateScreen>




	  Buzzer_UniquePattern();
 800173a:	f7ff fc75 	bl	8001028 <Buzzer_UniquePattern>

  /*---------------------Delay--------------------------------*/
  Delay_Init();
 800173e:	f7ff feb7 	bl	80014b0 <Delay_Init>
  /*-------------------------------------------------------------------*/

  //AnalogMux_Init();

  UART_Init(&huart3);
 8001742:	4834      	ldr	r0, [pc, #208]	@ (8001814 <main+0x160>)
 8001744:	f001 ff06 	bl	8003554 <UART_Init>

  /*---------------------Servo--------------------------------*/
  Servo_Init(50);  // 50Hz for standard servos
 8001748:	2032      	movs	r0, #50	@ 0x32
 800174a:	f001 f887 	bl	800285c <Servo_Init>

  //Examples
  // Register servos (do this once)
  int claw = Servo_Register(11, "claw", 0, 180);
 800174e:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8001818 <main+0x164>
 8001752:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 800181c <main+0x168>
 8001756:	4932      	ldr	r1, [pc, #200]	@ (8001820 <main+0x16c>)
 8001758:	200b      	movs	r0, #11
 800175a:	f001 f8a3 	bl	80028a4 <Servo_Register>
 800175e:	60f8      	str	r0, [r7, #12]
  int arm = Servo_Register(13, "arm", 0, 180);
 8001760:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8001818 <main+0x164>
 8001764:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 800181c <main+0x168>
 8001768:	492e      	ldr	r1, [pc, #184]	@ (8001824 <main+0x170>)
 800176a:	200d      	movs	r0, #13
 800176c:	f001 f89a 	bl	80028a4 <Servo_Register>
 8001770:	60b8      	str	r0, [r7, #8]
  int base = Servo_Register(15, "base", 0, 180);
 8001772:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8001818 <main+0x164>
 8001776:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800181c <main+0x168>
 800177a:	492b      	ldr	r1, [pc, #172]	@ (8001828 <main+0x174>)
 800177c:	200f      	movs	r0, #15
 800177e:	f001 f891 	bl	80028a4 <Servo_Register>
 8001782:	6078      	str	r0, [r7, #4]

  // Later in your code, use the servos by ID
  Servo_SetAngle(claw, 35);   // Set claw to 45 degrees
 8001784:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800182c <main+0x178>
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f001 f97f 	bl	8002a8c <Servo_SetAngle>
  Servo_SetAngle(arm,100);    // Set arm to 90 degrees
 800178e:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001830 <main+0x17c>
 8001792:	68b8      	ldr	r0, [r7, #8]
 8001794:	f001 f97a 	bl	8002a8c <Servo_SetAngle>

  // Or use them by name
  Servo_SetAngleByName("base", 90);  // Set base to 120 degrees
 8001798:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8001834 <main+0x180>
 800179c:	4822      	ldr	r0, [pc, #136]	@ (8001828 <main+0x174>)
 800179e:	f001 f9e9 	bl	8002b74 <Servo_SetAngleByName>

  HAL_Delay(1000);
 80017a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017a6:	f002 f9e9 	bl	8003b7c <HAL_Delay>
  Controller_Init(&controller);
 80017aa:	4823      	ldr	r0, [pc, #140]	@ (8001838 <main+0x184>)
 80017ac:	f7ff fc6f 	bl	800108e <Controller_Init>
    Profile_Reset(&forward_profile);
 80017b0:	4822      	ldr	r0, [pc, #136]	@ (800183c <main+0x188>)
 80017b2:	f000 fe73 	bl	800249c <Profile_Reset>
    Profile_Reset(&rotation_profile);
 80017b6:	4822      	ldr	r0, [pc, #136]	@ (8001840 <main+0x18c>)
 80017b8:	f000 fe70 	bl	800249c <Profile_Reset>
    Motion_Init(&motion, &controller, &forward_profile, &rotation_profile);
 80017bc:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <main+0x18c>)
 80017be:	4a1f      	ldr	r2, [pc, #124]	@ (800183c <main+0x188>)
 80017c0:	491d      	ldr	r1, [pc, #116]	@ (8001838 <main+0x184>)
 80017c2:	4820      	ldr	r0, [pc, #128]	@ (8001844 <main+0x190>)
 80017c4:	f000 fbd2 	bl	8001f6c <Motion_Init>
    Controller_ResetControllers(&controller);
 80017c8:	481b      	ldr	r0, [pc, #108]	@ (8001838 <main+0x184>)
 80017ca:	f7ff fc92 	bl	80010f2 <Controller_ResetControllers>

  // Reset all servos to center position
  //Servo_ResetAll();

  Buzzer_Toggle(100);
 80017ce:	2064      	movs	r0, #100	@ 0x64
 80017d0:	f7ff fc18 	bl	8001004 <Buzzer_Toggle>
  //HAL_UART_Receive_IT(&huart6, (uint8_t *)uart_rx_buffer, BUFFER_SIZE);  // Enable UART interrupt

 // HAL_Delay(2000);
  //RAYKHA_Calibrate(&raykha_calibration, RAYKHA_LINE_WHITE);

  Buzzer_Toggle(100);
 80017d4:	2064      	movs	r0, #100	@ 0x64
 80017d6:	f7ff fc15 	bl	8001004 <Buzzer_Toggle>

  HAL_Delay(5000);
 80017da:	f241 3088 	movw	r0, #5000	@ 0x1388
 80017de:	f002 f9cd 	bl	8003b7c <HAL_Delay>
  Buzzer_Toggle(100);
 80017e2:	2064      	movs	r0, #100	@ 0x64
 80017e4:	f7ff fc0e 	bl	8001004 <Buzzer_Toggle>

  EnableSysTickFunction();
 80017e8:	f001 fe6e 	bl	80034c8 <EnableSysTickFunction>

  //setMotorLPWM(1);
  //setMotorRPWM(1);

  //Motion_Move(&motion, 1000, 400, 0, 200);
  Motion_SpinTurn(&motion, 90, 200.0, 20.0);
 80017ec:	eeb3 1a04 	vmov.f32	s2, #52	@ 0x41a00000  20.0
 80017f0:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8001848 <main+0x194>
 80017f4:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8001834 <main+0x180>
 80017f8:	4812      	ldr	r0, [pc, #72]	@ (8001844 <main+0x190>)
 80017fa:	f000 fc33 	bl	8002064 <Motion_SpinTurn>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017fe:	bf00      	nop
 8001800:	e7fd      	b.n	80017fe <main+0x14a>
 8001802:	bf00      	nop
 8001804:	200002fc 	.word	0x200002fc
 8001808:	20000344 	.word	0x20000344
 800180c:	2000038c 	.word	0x2000038c
 8001810:	0800b6ec 	.word	0x0800b6ec
 8001814:	2000041c 	.word	0x2000041c
 8001818:	43340000 	.word	0x43340000
 800181c:	00000000 	.word	0x00000000
 8001820:	0800b688 	.word	0x0800b688
 8001824:	0800b690 	.word	0x0800b690
 8001828:	0800b694 	.word	0x0800b694
 800182c:	420c0000 	.word	0x420c0000
 8001830:	42c80000 	.word	0x42c80000
 8001834:	42b40000 	.word	0x42b40000
 8001838:	200005c4 	.word	0x200005c4
 800183c:	2000057c 	.word	0x2000057c
 8001840:	200005a0 	.word	0x200005a0
 8001844:	20000510 	.word	0x20000510
 8001848:	43480000 	.word	0x43480000

0800184c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b094      	sub	sp, #80	@ 0x50
 8001850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	2234      	movs	r2, #52	@ 0x34
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f007 fe25 	bl	80094aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001860:	f107 0308 	add.w	r3, r7, #8
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	4b2c      	ldr	r3, [pc, #176]	@ (8001928 <SystemClock_Config+0xdc>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	4a2b      	ldr	r2, [pc, #172]	@ (8001928 <SystemClock_Config+0xdc>)
 800187a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800187e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001880:	4b29      	ldr	r3, [pc, #164]	@ (8001928 <SystemClock_Config+0xdc>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800188c:	2300      	movs	r3, #0
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	4b26      	ldr	r3, [pc, #152]	@ (800192c <SystemClock_Config+0xe0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a25      	ldr	r2, [pc, #148]	@ (800192c <SystemClock_Config+0xe0>)
 8001896:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b23      	ldr	r3, [pc, #140]	@ (800192c <SystemClock_Config+0xe0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ac:	2301      	movs	r3, #1
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b0:	2310      	movs	r3, #16
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b4:	2302      	movs	r3, #2
 80018b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018b8:	2300      	movs	r3, #0
 80018ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018bc:	2308      	movs	r3, #8
 80018be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80018c0:	23b4      	movs	r3, #180	@ 0xb4
 80018c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018c4:	2302      	movs	r3, #2
 80018c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018c8:	2302      	movs	r3, #2
 80018ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018cc:	2302      	movs	r3, #2
 80018ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	4618      	mov	r0, r3
 80018d6:	f005 f88f 	bl	80069f8 <HAL_RCC_OscConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018e0:	f000 fb3e 	bl	8001f60 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018e4:	f004 fcee 	bl	80062c4 <HAL_PWREx_EnableOverDrive>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018ee:	f000 fb37 	bl	8001f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f2:	230f      	movs	r3, #15
 80018f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f6:	2302      	movs	r3, #2
 80018f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001904:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001908:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	2105      	movs	r1, #5
 8001910:	4618      	mov	r0, r3
 8001912:	f004 fd27 	bl	8006364 <HAL_RCC_ClockConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800191c:	f000 fb20 	bl	8001f60 <Error_Handler>
  }
}
 8001920:	bf00      	nop
 8001922:	3750      	adds	r7, #80	@ 0x50
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40023800 	.word	0x40023800
 800192c:	40007000 	.word	0x40007000

08001930 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001936:	463b      	mov	r3, r7
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001942:	4b21      	ldr	r3, [pc, #132]	@ (80019c8 <MX_ADC1_Init+0x98>)
 8001944:	4a21      	ldr	r2, [pc, #132]	@ (80019cc <MX_ADC1_Init+0x9c>)
 8001946:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001948:	4b1f      	ldr	r3, [pc, #124]	@ (80019c8 <MX_ADC1_Init+0x98>)
 800194a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800194e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001950:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <MX_ADC1_Init+0x98>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001956:	4b1c      	ldr	r3, [pc, #112]	@ (80019c8 <MX_ADC1_Init+0x98>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800195c:	4b1a      	ldr	r3, [pc, #104]	@ (80019c8 <MX_ADC1_Init+0x98>)
 800195e:	2201      	movs	r2, #1
 8001960:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001962:	4b19      	ldr	r3, [pc, #100]	@ (80019c8 <MX_ADC1_Init+0x98>)
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800196a:	4b17      	ldr	r3, [pc, #92]	@ (80019c8 <MX_ADC1_Init+0x98>)
 800196c:	2200      	movs	r2, #0
 800196e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001970:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <MX_ADC1_Init+0x98>)
 8001972:	4a17      	ldr	r2, [pc, #92]	@ (80019d0 <MX_ADC1_Init+0xa0>)
 8001974:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001976:	4b14      	ldr	r3, [pc, #80]	@ (80019c8 <MX_ADC1_Init+0x98>)
 8001978:	2200      	movs	r2, #0
 800197a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800197c:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <MX_ADC1_Init+0x98>)
 800197e:	2201      	movs	r2, #1
 8001980:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001982:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <MX_ADC1_Init+0x98>)
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800198a:	4b0f      	ldr	r3, [pc, #60]	@ (80019c8 <MX_ADC1_Init+0x98>)
 800198c:	2201      	movs	r2, #1
 800198e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001990:	480d      	ldr	r0, [pc, #52]	@ (80019c8 <MX_ADC1_Init+0x98>)
 8001992:	f002 f917 	bl	8003bc4 <HAL_ADC_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800199c:	f000 fae0 	bl	8001f60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80019a0:	230a      	movs	r3, #10
 80019a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ac:	463b      	mov	r3, r7
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <MX_ADC1_Init+0x98>)
 80019b2:	f002 f94b 	bl	8003c4c <HAL_ADC_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019bc:	f000 fad0 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	2000020c 	.word	0x2000020c
 80019cc:	40012000 	.word	0x40012000
 80019d0:	0f000001 	.word	0x0f000001

080019d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <MX_I2C1_Init+0x50>)
 80019da:	4a13      	ldr	r2, [pc, #76]	@ (8001a28 <MX_I2C1_Init+0x54>)
 80019dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80019de:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <MX_I2C1_Init+0x50>)
 80019e0:	4a12      	ldr	r2, [pc, #72]	@ (8001a2c <MX_I2C1_Init+0x58>)
 80019e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <MX_I2C1_Init+0x50>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <MX_I2C1_Init+0x50>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <MX_I2C1_Init+0x50>)
 80019f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <MX_I2C1_Init+0x50>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019fe:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <MX_I2C1_Init+0x50>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a04:	4b07      	ldr	r3, [pc, #28]	@ (8001a24 <MX_I2C1_Init+0x50>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <MX_I2C1_Init+0x50>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a10:	4804      	ldr	r0, [pc, #16]	@ (8001a24 <MX_I2C1_Init+0x50>)
 8001a12:	f003 f985 	bl	8004d20 <HAL_I2C_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a1c:	f000 faa0 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000254 	.word	0x20000254
 8001a28:	40005400 	.word	0x40005400
 8001a2c:	00061a80 	.word	0x00061a80

08001a30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a36:	4a13      	ldr	r2, [pc, #76]	@ (8001a84 <MX_I2C2_Init+0x54>)
 8001a38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a3c:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <MX_I2C2_Init+0x58>)
 8001a3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	@ (8001a80 <MX_I2C2_Init+0x50>)
 8001a6e:	f003 f957 	bl	8004d20 <HAL_I2C_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a78:	f000 fa72 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200002a8 	.word	0x200002a8
 8001a84:	40005800 	.word	0x40005800
 8001a88:	000186a0 	.word	0x000186a0

08001a8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	@ 0x30
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	2224      	movs	r2, #36	@ 0x24
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f007 fd05 	bl	80094aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aa8:	4b22      	ldr	r3, [pc, #136]	@ (8001b34 <MX_TIM1_Init+0xa8>)
 8001aaa:	4a23      	ldr	r2, [pc, #140]	@ (8001b38 <MX_TIM1_Init+0xac>)
 8001aac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001aae:	4b21      	ldr	r3, [pc, #132]	@ (8001b34 <MX_TIM1_Init+0xa8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b34 <MX_TIM1_Init+0xa8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001aba:	4b1e      	ldr	r3, [pc, #120]	@ (8001b34 <MX_TIM1_Init+0xa8>)
 8001abc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ac0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b34 <MX_TIM1_Init+0xa8>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b34 <MX_TIM1_Init+0xa8>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ace:	4b19      	ldr	r3, [pc, #100]	@ (8001b34 <MX_TIM1_Init+0xa8>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001adc:	2301      	movs	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aec:	2301      	movs	r3, #1
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4619      	mov	r1, r3
 8001afe:	480d      	ldr	r0, [pc, #52]	@ (8001b34 <MX_TIM1_Init+0xa8>)
 8001b00:	f005 fb30 	bl	8007164 <HAL_TIM_Encoder_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001b0a:	f000 fa29 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4806      	ldr	r0, [pc, #24]	@ (8001b34 <MX_TIM1_Init+0xa8>)
 8001b1c:	f005 ff9a 	bl	8007a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001b26:	f000 fa1b 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	3730      	adds	r7, #48	@ 0x30
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200002fc 	.word	0x200002fc
 8001b38:	40010000 	.word	0x40010000

08001b3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	@ 0x30
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	2224      	movs	r2, #36	@ 0x24
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f007 fcad 	bl	80094aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b58:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <MX_TIM2_Init+0xa4>)
 8001b5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b60:	4b1f      	ldr	r3, [pc, #124]	@ (8001be0 <MX_TIM2_Init+0xa4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b66:	4b1e      	ldr	r3, [pc, #120]	@ (8001be0 <MX_TIM2_Init+0xa4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <MX_TIM2_Init+0xa4>)
 8001b6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b74:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <MX_TIM2_Init+0xa4>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7a:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <MX_TIM2_Init+0xa4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b80:	2303      	movs	r3, #3
 8001b82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	4619      	mov	r1, r3
 8001baa:	480d      	ldr	r0, [pc, #52]	@ (8001be0 <MX_TIM2_Init+0xa4>)
 8001bac:	f005 fada 	bl	8007164 <HAL_TIM_Encoder_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001bb6:	f000 f9d3 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4806      	ldr	r0, [pc, #24]	@ (8001be0 <MX_TIM2_Init+0xa4>)
 8001bc8:	f005 ff44 	bl	8007a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001bd2:	f000 f9c5 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	3730      	adds	r7, #48	@ 0x30
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000344 	.word	0x20000344

08001be4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	@ 0x28
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bea:	f107 0320 	add.w	r3, r7, #32
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	615a      	str	r2, [r3, #20]
 8001c04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c06:	4b32      	ldr	r3, [pc, #200]	@ (8001cd0 <MX_TIM3_Init+0xec>)
 8001c08:	4a32      	ldr	r2, [pc, #200]	@ (8001cd4 <MX_TIM3_Init+0xf0>)
 8001c0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c0c:	4b30      	ldr	r3, [pc, #192]	@ (8001cd0 <MX_TIM3_Init+0xec>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c12:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd0 <MX_TIM3_Init+0xec>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8001c18:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd0 <MX_TIM3_Init+0xec>)
 8001c1a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001c1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c20:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd0 <MX_TIM3_Init+0xec>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c26:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd0 <MX_TIM3_Init+0xec>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c2c:	4828      	ldr	r0, [pc, #160]	@ (8001cd0 <MX_TIM3_Init+0xec>)
 8001c2e:	f005 f981 	bl	8006f34 <HAL_TIM_PWM_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c38:	f000 f992 	bl	8001f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c44:	f107 0320 	add.w	r3, r7, #32
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4821      	ldr	r0, [pc, #132]	@ (8001cd0 <MX_TIM3_Init+0xec>)
 8001c4c:	f005 ff02 	bl	8007a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c56:	f000 f983 	bl	8001f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5a:	2360      	movs	r3, #96	@ 0x60
 8001c5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4817      	ldr	r0, [pc, #92]	@ (8001cd0 <MX_TIM3_Init+0xec>)
 8001c72:	f005 fbab 	bl	80073cc <HAL_TIM_PWM_ConfigChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001c7c:	f000 f970 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2204      	movs	r2, #4
 8001c84:	4619      	mov	r1, r3
 8001c86:	4812      	ldr	r0, [pc, #72]	@ (8001cd0 <MX_TIM3_Init+0xec>)
 8001c88:	f005 fba0 	bl	80073cc <HAL_TIM_PWM_ConfigChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c92:	f000 f965 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2208      	movs	r2, #8
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480c      	ldr	r0, [pc, #48]	@ (8001cd0 <MX_TIM3_Init+0xec>)
 8001c9e:	f005 fb95 	bl	80073cc <HAL_TIM_PWM_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001ca8:	f000 f95a 	bl	8001f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	220c      	movs	r2, #12
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4807      	ldr	r0, [pc, #28]	@ (8001cd0 <MX_TIM3_Init+0xec>)
 8001cb4:	f005 fb8a 	bl	80073cc <HAL_TIM_PWM_ConfigChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001cbe:	f000 f94f 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cc2:	4803      	ldr	r0, [pc, #12]	@ (8001cd0 <MX_TIM3_Init+0xec>)
 8001cc4:	f001 f95a 	bl	8002f7c <HAL_TIM_MspPostInit>

}
 8001cc8:	bf00      	nop
 8001cca:	3728      	adds	r7, #40	@ 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	2000038c 	.word	0x2000038c
 8001cd4:	40000400 	.word	0x40000400

08001cd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001cde:	4a12      	ldr	r2, [pc, #72]	@ (8001d28 <MX_USART2_UART_Init+0x50>)
 8001ce0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ce2:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001ce4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ce8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001cfe:	220c      	movs	r2, #12
 8001d00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d02:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d0e:	4805      	ldr	r0, [pc, #20]	@ (8001d24 <MX_USART2_UART_Init+0x4c>)
 8001d10:	f005 ff1c 	bl	8007b4c <HAL_UART_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d1a:	f000 f921 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	200003d4 	.word	0x200003d4
 8001d28:	40004400 	.word	0x40004400

08001d2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d32:	4a12      	ldr	r2, [pc, #72]	@ (8001d7c <MX_USART3_UART_Init+0x50>)
 8001d34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d38:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d52:	220c      	movs	r2, #12
 8001d54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d56:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d62:	4805      	ldr	r0, [pc, #20]	@ (8001d78 <MX_USART3_UART_Init+0x4c>)
 8001d64:	f005 fef2 	bl	8007b4c <HAL_UART_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d6e:	f000 f8f7 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	2000041c 	.word	0x2000041c
 8001d7c:	40004800 	.word	0x40004800

08001d80 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <MX_USART6_UART_Init+0x4c>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	@ (8001dd0 <MX_USART6_UART_Init+0x50>)
 8001d88:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <MX_USART6_UART_Init+0x4c>)
 8001d8c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d90:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <MX_USART6_UART_Init+0x4c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <MX_USART6_UART_Init+0x4c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <MX_USART6_UART_Init+0x4c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001da4:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <MX_USART6_UART_Init+0x4c>)
 8001da6:	220c      	movs	r2, #12
 8001da8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001daa:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <MX_USART6_UART_Init+0x4c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db0:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <MX_USART6_UART_Init+0x4c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001db6:	4805      	ldr	r0, [pc, #20]	@ (8001dcc <MX_USART6_UART_Init+0x4c>)
 8001db8:	f005 fec8 	bl	8007b4c <HAL_UART_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001dc2:	f000 f8cd 	bl	8001f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000464 	.word	0x20000464
 8001dd0:	40011400 	.word	0x40011400

08001dd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <MX_DMA_Init+0x3c>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a0b      	ldr	r2, [pc, #44]	@ (8001e10 <MX_DMA_Init+0x3c>)
 8001de4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <MX_DMA_Init+0x3c>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2039      	movs	r0, #57	@ 0x39
 8001dfc:	f002 fa2f 	bl	800425e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001e00:	2039      	movs	r0, #57	@ 0x39
 8001e02:	f002 fa48 	bl	8004296 <HAL_NVIC_EnableIRQ>

}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800

08001e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	@ 0x28
 8001e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	4b48      	ldr	r3, [pc, #288]	@ (8001f50 <MX_GPIO_Init+0x13c>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	4a47      	ldr	r2, [pc, #284]	@ (8001f50 <MX_GPIO_Init+0x13c>)
 8001e34:	f043 0304 	orr.w	r3, r3, #4
 8001e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3a:	4b45      	ldr	r3, [pc, #276]	@ (8001f50 <MX_GPIO_Init+0x13c>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b41      	ldr	r3, [pc, #260]	@ (8001f50 <MX_GPIO_Init+0x13c>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	4a40      	ldr	r2, [pc, #256]	@ (8001f50 <MX_GPIO_Init+0x13c>)
 8001e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e56:	4b3e      	ldr	r3, [pc, #248]	@ (8001f50 <MX_GPIO_Init+0x13c>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	4b3a      	ldr	r3, [pc, #232]	@ (8001f50 <MX_GPIO_Init+0x13c>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	4a39      	ldr	r2, [pc, #228]	@ (8001f50 <MX_GPIO_Init+0x13c>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e72:	4b37      	ldr	r3, [pc, #220]	@ (8001f50 <MX_GPIO_Init+0x13c>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	4b33      	ldr	r3, [pc, #204]	@ (8001f50 <MX_GPIO_Init+0x13c>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	4a32      	ldr	r2, [pc, #200]	@ (8001f50 <MX_GPIO_Init+0x13c>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8e:	4b30      	ldr	r3, [pc, #192]	@ (8001f50 <MX_GPIO_Init+0x13c>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIRPUMP_Pin|WATERPUMP_Pin, GPIO_PIN_SET);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	2106      	movs	r1, #6
 8001e9e:	482d      	ldr	r0, [pc, #180]	@ (8001f54 <MX_GPIO_Init+0x140>)
 8001ea0:	f002 ff24 	bl	8004cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2120      	movs	r1, #32
 8001ea8:	482b      	ldr	r0, [pc, #172]	@ (8001f58 <MX_GPIO_Init+0x144>)
 8001eaa:	f002 ff1f 	bl	8004cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001eb4:	4829      	ldr	r0, [pc, #164]	@ (8001f5c <MX_GPIO_Init+0x148>)
 8001eb6:	f002 ff19 	bl	8004cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001eba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ec0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4820      	ldr	r0, [pc, #128]	@ (8001f54 <MX_GPIO_Init+0x140>)
 8001ed2:	f002 fd77 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIRPUMP_Pin WATERPUMP_Pin */
  GPIO_InitStruct.Pin = AIRPUMP_Pin|WATERPUMP_Pin;
 8001ed6:	2306      	movs	r3, #6
 8001ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4819      	ldr	r0, [pc, #100]	@ (8001f54 <MX_GPIO_Init+0x140>)
 8001eee:	f002 fd69 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	4813      	ldr	r0, [pc, #76]	@ (8001f58 <MX_GPIO_Init+0x144>)
 8001f0a:	f002 fd5b 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 8001f0e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f14:	2301      	movs	r3, #1
 8001f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	480d      	ldr	r0, [pc, #52]	@ (8001f5c <MX_GPIO_Init+0x148>)
 8001f28:	f002 fd4c 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3a:	f107 0314 	add.w	r3, r7, #20
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <MX_GPIO_Init+0x140>)
 8001f42:	f002 fd3f 	bl	80049c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001f46:	bf00      	nop
 8001f48:	3728      	adds	r7, #40	@ 0x28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020800 	.word	0x40020800
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	40020400 	.word	0x40020400

08001f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f64:	b672      	cpsid	i
}
 8001f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <Error_Handler+0x8>

08001f6c <Motion_Init>:
#include "uartcom.h"
#include "encoders.h"

extern UART_HandleTypeDef huart6;

void Motion_Init(Motion *motion, Controller *controller, Profile *forward, Profile *rotation) {
 8001f6c:	b4b0      	push	{r4, r5, r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
    motion->controller = *controller;  // Copy the controller structure
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4614      	mov	r4, r2
 8001f80:	461d      	mov	r5, r3
 8001f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f8a:	682b      	ldr	r3, [r5, #0]
 8001f8c:	6023      	str	r3, [r4, #0]
    motion->forward = *forward;        // Copy the forward profile structure
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8001f96:	4615      	mov	r5, r2
 8001f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa0:	682b      	ldr	r3, [r5, #0]
 8001fa2:	6023      	str	r3, [r4, #0]
    motion->rotation = *rotation;      // Copy the rotation profile structure
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	f103 0448 	add.w	r4, r3, #72	@ 0x48
 8001fac:	4615      	mov	r5, r2
 8001fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb6:	682b      	ldr	r3, [r5, #0]
 8001fb8:	6023      	str	r3, [r4, #0]
}
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bcb0      	pop	{r4, r5, r7}
 8001fc2:	4770      	bx	lr

08001fc4 <Motion_Velocity>:

float Motion_Position(Motion *motion) {
    return Profile_GetPosition(&(motion->forward));
}

float Motion_Velocity(Motion *motion) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->forward));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3324      	adds	r3, #36	@ 0x24
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fb5f 	bl	8002694 <Profile_GetSpeed>
 8001fd6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001fda:	eeb0 0a67 	vmov.f32	s0, s15
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <Motion_Omega>:

float Motion_Angle(Motion *motion) {
    return Profile_GetPosition(&(motion->rotation));
}

float Motion_Omega(Motion *motion) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
    return Profile_GetSpeed(&(motion->rotation));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3348      	adds	r3, #72	@ 0x48
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fb4f 	bl	8002694 <Profile_GetSpeed>
 8001ff6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <Motion_Turn>:
uint8_t Motion_TurnFinished(Motion *motion) {
    return Profile_IsFinished(&(motion->rotation));
}


void Motion_Turn(Motion *motion, float angle, float omega, float alpha) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002010:	edc7 0a01 	vstr	s1, [r7, #4]
 8002014:	ed87 1a00 	vstr	s2, [r7]
    Profile_Move(&(motion->rotation), angle, omega, 0, alpha);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3348      	adds	r3, #72	@ 0x48
 800201c:	edd7 1a00 	vldr	s3, [r7]
 8002020:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 800203c <Motion_Turn+0x38>
 8002024:	edd7 0a01 	vldr	s1, [r7, #4]
 8002028:	ed97 0a02 	vldr	s0, [r7, #8]
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fad9 	bl	80025e4 <Profile_Move>
}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	00000000 	.word	0x00000000

08002040 <Motion_Update>:

void Motion_Turn_(Motion *motion, float angle, float omega, float final_speed, float alpha){
	Profile_Move(&(motion->rotation), angle, omega, final_speed, alpha);
}

void Motion_Update(Motion *motion) {
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
    Profile_Update(&(motion->forward));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3324      	adds	r3, #36	@ 0x24
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fb3f 	bl	80026d0 <Profile_Update>
    Profile_Update(&(motion->rotation));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3348      	adds	r3, #72	@ 0x48
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fb3a 	bl	80026d0 <Profile_Update>
    //UART_Transmit_Float(&huart6, ">V", motion->forward.speed, 2);
    //UART_Transmit_Float(&huart6, ">W", robot_speed(), 2);
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <Motion_SpinTurn>:

/**
  *
  * @brief turn in place. Force forward speed to zero
  */
void Motion_SpinTurn(Motion *motion, float angle, float omega, float alpha) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002070:	edc7 0a01 	vstr	s1, [r7, #4]
 8002074:	ed87 1a00 	vstr	s2, [r7]
    Profile_SetTargetSpeed(&(motion->forward), 0);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3324      	adds	r3, #36	@ 0x24
 800207c:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80020c0 <Motion_SpinTurn+0x5c>
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fb16 	bl	80026b2 <Profile_SetTargetSpeed>
    while (Profile_GetSpeed(&(motion->forward)) != 0) {
 8002086:	e002      	b.n	800208e <Motion_SpinTurn+0x2a>
        HAL_Delay(2);
 8002088:	2002      	movs	r0, #2
 800208a:	f001 fd77 	bl	8003b7c <HAL_Delay>
    while (Profile_GetSpeed(&(motion->forward)) != 0) {
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3324      	adds	r3, #36	@ 0x24
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fafe 	bl	8002694 <Profile_GetSpeed>
 8002098:	eef0 7a40 	vmov.f32	s15, s0
 800209c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a4:	d1f0      	bne.n	8002088 <Motion_SpinTurn+0x24>
    }
    Motion_Turn(motion, angle, omega, alpha);
 80020a6:	ed97 1a00 	vldr	s2, [r7]
 80020aa:	edd7 0a01 	vldr	s1, [r7, #4]
 80020ae:	ed97 0a02 	vldr	s0, [r7, #8]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f7ff ffa6 	bl	8002004 <Motion_Turn>
}
 80020b8:	bf00      	nop
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
	...

080020c8 <limitPWM>:
#include "motors.h"

/*
 * This function should return PWM_MAX if pwm > PWM_MAX, -PWM_MAX if pwm < -PWM_MAX, and pwm otherwise.
 */
float limitPWM(float pwm) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm > PWM_MAX)
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7fe fa68 	bl	80005a8 <__aeabi_f2d>
 80020d8:	a313      	add	r3, pc, #76	@ (adr r3, 8002128 <limitPWM+0x60>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	f7fe fd4b 	bl	8000b78 <__aeabi_dcmpgt>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <limitPWM+0x24>
		return PWM_MAX;
 80020e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <limitPWM+0x58>)
 80020ea:	e00d      	b.n	8002108 <limitPWM+0x40>
	else if (pwm < -PWM_MAX)
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7fe fa5b 	bl	80005a8 <__aeabi_f2d>
 80020f2:	a309      	add	r3, pc, #36	@ (adr r3, 8002118 <limitPWM+0x50>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	f7fe fd20 	bl	8000b3c <__aeabi_dcmplt>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <limitPWM+0x3e>
		return -PWM_MAX;
 8002102:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <limitPWM+0x5c>)
 8002104:	e000      	b.n	8002108 <limitPWM+0x40>
	return pwm;
 8002106:	687b      	ldr	r3, [r7, #4]
}
 8002108:	ee07 3a90 	vmov	s15, r3
 800210c:	eeb0 0a67 	vmov.f32	s0, s15
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	70a3d70a 	.word	0x70a3d70a
 800211c:	bfef0a3d 	.word	0xbfef0a3d
 8002120:	3f7851ec 	.word	0x3f7851ec
 8002124:	bf7851ec 	.word	0xbf7851ec
 8002128:	70a3d70a 	.word	0x70a3d70a
 800212c:	3fef0a3d 	.word	0x3fef0a3d

08002130 <setMotorLPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the left wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorLPWM(float pwm) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 800213a:	edd7 7a01 	vldr	s15, [r7, #4]
 800213e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002146:	db13      	blt.n	8002170 <setMotorLPWM+0x40>
		TIM3->CCR4 = 0;
 8002148:	4b1a      	ldr	r3, [pc, #104]	@ (80021b4 <setMotorLPWM+0x84>)
 800214a:	2200      	movs	r2, #0
 800214c:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM3->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800214e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002152:	f7ff ffb9 	bl	80020c8 <limitPWM>
 8002156:	eef0 7a40 	vmov.f32	s15, s0
 800215a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80021b8 <setMotorLPWM+0x88>
 800215e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002162:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <setMotorLPWM+0x84>)
 8002164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002168:	ee17 2a90 	vmov	r2, s15
 800216c:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	else if (pwm < 0) {
		TIM3->CCR3 = 0;
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 800216e:	e01c      	b.n	80021aa <setMotorLPWM+0x7a>
	else if (pwm < 0) {
 8002170:	edd7 7a01 	vldr	s15, [r7, #4]
 8002174:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217c:	d400      	bmi.n	8002180 <setMotorLPWM+0x50>
}
 800217e:	e014      	b.n	80021aa <setMotorLPWM+0x7a>
		TIM3->CCR3 = 0;
 8002180:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <setMotorLPWM+0x84>)
 8002182:	2200      	movs	r2, #0
 8002184:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3->CCR4 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002186:	ed97 0a01 	vldr	s0, [r7, #4]
 800218a:	f7ff ff9d 	bl	80020c8 <limitPWM>
 800218e:	eef0 7a40 	vmov.f32	s15, s0
 8002192:	eef1 7a67 	vneg.f32	s15, s15
 8002196:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80021b8 <setMotorLPWM+0x88>
 800219a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800219e:	4b05      	ldr	r3, [pc, #20]	@ (80021b4 <setMotorLPWM+0x84>)
 80021a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021a4:	ee17 2a90 	vmov	r2, s15
 80021a8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40000400 	.word	0x40000400
 80021b8:	45e0f800 	.word	0x45e0f800

080021bc <setMotorRPWM>:
 * IMPORTANT: NEVER SET BOTH THE FORWARD AND BACKWARD CHANNELS TO NON-ZERO VALUES AT THE SAME TIME. As mentioned in lecture, this can
 * destroy your h-bridge. When setting a channel, always set the other channel to zero first.
 *
 * Implement this function to make the right wheel spin forwards when pwm is >= 0, and spin backwards when pwm < 0.
 */
void setMotorRPWM(float pwm) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pwm >= 0) {
 80021c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d2:	db13      	blt.n	80021fc <setMotorRPWM+0x40>
		TIM3->CCR2 = 0;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <setMotorRPWM+0x84>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM3->CCR1 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80021da:	ed97 0a01 	vldr	s0, [r7, #4]
 80021de:	f7ff ff73 	bl	80020c8 <limitPWM>
 80021e2:	eef0 7a40 	vmov.f32	s15, s0
 80021e6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002244 <setMotorRPWM+0x88>
 80021ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ee:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <setMotorRPWM+0x84>)
 80021f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021f4:	ee17 2a90 	vmov	r2, s15
 80021f8:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else if (pwm < 0) {
		TIM3->CCR1 = 0;
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 80021fa:	e01c      	b.n	8002236 <setMotorRPWM+0x7a>
	else if (pwm < 0) {
 80021fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002200:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002208:	d400      	bmi.n	800220c <setMotorRPWM+0x50>
}
 800220a:	e014      	b.n	8002236 <setMotorRPWM+0x7a>
		TIM3->CCR1 = 0;
 800220c:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <setMotorRPWM+0x84>)
 800220e:	2200      	movs	r2, #0
 8002210:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = (uint32_t) (-1 * limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002212:	ed97 0a01 	vldr	s0, [r7, #4]
 8002216:	f7ff ff57 	bl	80020c8 <limitPWM>
 800221a:	eef0 7a40 	vmov.f32	s15, s0
 800221e:	eef1 7a67 	vneg.f32	s15, s15
 8002222:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002244 <setMotorRPWM+0x88>
 8002226:	ee67 7a87 	vmul.f32	s15, s15, s14
 800222a:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <setMotorRPWM+0x84>)
 800222c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002230:	ee17 2a90 	vmov	r2, s15
 8002234:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40000400 	.word	0x40000400
 8002244:	45e0f800 	.word	0x45e0f800

08002248 <PCA9685_SetBit>:
  * @param  Bit: Bit position to modify (0-7)
  * @param  Value: Value to set (0 or 1)
  * @retval None
  */
void PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af04      	add	r7, sp, #16
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
 8002252:	460b      	mov	r3, r1
 8002254:	71bb      	strb	r3, [r7, #6]
 8002256:	4613      	mov	r3, r2
 8002258:	717b      	strb	r3, [r7, #5]
  uint8_t readValue;
  // Read all 8 bits and set only one bit to 0/1 and write all 8 bits back
  HAL_I2C_Mem_Read(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	b29a      	uxth	r2, r3
 800225e:	230a      	movs	r3, #10
 8002260:	9302      	str	r3, [sp, #8]
 8002262:	2301      	movs	r3, #1
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	f107 030f 	add.w	r3, r7, #15
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2301      	movs	r3, #1
 800226e:	2180      	movs	r1, #128	@ 0x80
 8002270:	4819      	ldr	r0, [pc, #100]	@ (80022d8 <PCA9685_SetBit+0x90>)
 8002272:	f003 f891 	bl	8005398 <HAL_I2C_Mem_Read>
  if (Value == 0)
 8002276:	797b      	ldrb	r3, [r7, #5]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10d      	bne.n	8002298 <PCA9685_SetBit+0x50>
    readValue &= ~(1 << Bit);
 800227c:	79bb      	ldrb	r3, [r7, #6]
 800227e:	2201      	movs	r2, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	b25b      	sxtb	r3, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	b25a      	sxtb	r2, r3
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	b25b      	sxtb	r3, r3
 800228e:	4013      	ands	r3, r2
 8002290:	b25b      	sxtb	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	73fb      	strb	r3, [r7, #15]
 8002296:	e00a      	b.n	80022ae <PCA9685_SetBit+0x66>
  else
    readValue |= (1 << Bit);
 8002298:	79bb      	ldrb	r3, [r7, #6]
 800229a:	2201      	movs	r2, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	b25b      	sxtb	r3, r3
 80022a6:	4313      	orrs	r3, r2
 80022a8:	b25b      	sxtb	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, Register, 1, &readValue, 1, 10);
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	230a      	movs	r3, #10
 80022b4:	9302      	str	r3, [sp, #8]
 80022b6:	2301      	movs	r3, #1
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	f107 030f 	add.w	r3, r7, #15
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2301      	movs	r3, #1
 80022c2:	2180      	movs	r1, #128	@ 0x80
 80022c4:	4804      	ldr	r0, [pc, #16]	@ (80022d8 <PCA9685_SetBit+0x90>)
 80022c6:	f002 ff6d 	bl	80051a4 <HAL_I2C_Mem_Write>
  HAL_Delay(1);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f001 fc56 	bl	8003b7c <HAL_Delay>
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	200002a8 	.word	0x200002a8

080022dc <PCA9685_SetPWMFrequency>:
  * @brief  Set PWM frequency (24Hz to 1526Hz)
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_SetPWMFrequency(uint16_t frequency)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af04      	add	r7, sp, #16
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
  uint8_t prescale;

  // Ensure frequency is within valid range
  if(frequency >= 1526)
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	f240 52f5 	movw	r2, #1525	@ 0x5f5
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d902      	bls.n	80022f6 <PCA9685_SetPWMFrequency+0x1a>
    prescale = 0x03;  // Maximum frequency (1526Hz)
 80022f0:	2303      	movs	r3, #3
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	e00c      	b.n	8002310 <PCA9685_SetPWMFrequency+0x34>
  else if(frequency <= 24)
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	2b18      	cmp	r3, #24
 80022fa:	d802      	bhi.n	8002302 <PCA9685_SetPWMFrequency+0x26>
    prescale = 0xFF;  // Minimum frequency (24Hz)
 80022fc:	23ff      	movs	r3, #255	@ 0xff
 80022fe:	73fb      	strb	r3, [r7, #15]
 8002300:	e006      	b.n	8002310 <PCA9685_SetPWMFrequency+0x34>
  else
    // Calculate prescale value based on 25MHz internal oscillator
    prescale = (uint8_t)(25000000 / (4096 * frequency));
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	031b      	lsls	r3, r3, #12
 8002306:	4a12      	ldr	r2, [pc, #72]	@ (8002350 <PCA9685_SetPWMFrequency+0x74>)
 8002308:	fb92 f3f3 	sdiv	r3, r2, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	73fb      	strb	r3, [r7, #15]

  // Enter sleep mode before changing the frequency
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 1);
 8002310:	2201      	movs	r2, #1
 8002312:	2104      	movs	r1, #4
 8002314:	2000      	movs	r0, #0
 8002316:	f7ff ff97 	bl	8002248 <PCA9685_SetBit>

  // Set the prescale value
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, PCA9685_PRE_SCALE, 1, &prescale, 1, 10);
 800231a:	230a      	movs	r3, #10
 800231c:	9302      	str	r3, [sp, #8]
 800231e:	2301      	movs	r3, #1
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	f107 030f 	add.w	r3, r7, #15
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2301      	movs	r3, #1
 800232a:	22fe      	movs	r2, #254	@ 0xfe
 800232c:	2180      	movs	r1, #128	@ 0x80
 800232e:	4809      	ldr	r0, [pc, #36]	@ (8002354 <PCA9685_SetPWMFrequency+0x78>)
 8002330:	f002 ff38 	bl	80051a4 <HAL_I2C_Mem_Write>

  // Exit sleep mode
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2104      	movs	r1, #4
 8002338:	2000      	movs	r0, #0
 800233a:	f7ff ff85 	bl	8002248 <PCA9685_SetBit>

  // Restart all PWM channels
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, 1);
 800233e:	2201      	movs	r2, #1
 8002340:	2107      	movs	r1, #7
 8002342:	2000      	movs	r0, #0
 8002344:	f7ff ff80 	bl	8002248 <PCA9685_SetBit>
}
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	017d7840 	.word	0x017d7840
 8002354:	200002a8 	.word	0x200002a8

08002358 <PCA9685_Init>:
  * @brief  Initialize PCA9685 with specified frequency
  * @param  frequency: Desired PWM frequency in Hz
  * @retval None
  */
void PCA9685_Init(uint16_t frequency)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	80fb      	strh	r3, [r7, #6]
  // Set desired PWM frequency (usually 50Hz for standard servos)
  PCA9685_SetPWMFrequency(frequency);
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ffb9 	bl	80022dc <PCA9685_SetPWMFrequency>

  // Enable Auto-Increment for efficient register writing
  PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, 1);
 800236a:	2201      	movs	r2, #1
 800236c:	2105      	movs	r1, #5
 800236e:	2000      	movs	r0, #0
 8002370:	f7ff ff6a 	bl	8002248 <PCA9685_SetBit>
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <PCA9685_SetPWM>:
  * @param  OnTime: Value between 0-4095 for ON time
  * @param  OffTime: Value between 0-4095 for OFF time
  * @retval None
  */
void PCA9685_SetPWM(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af04      	add	r7, sp, #16
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
 8002386:	460b      	mov	r3, r1
 8002388:	80bb      	strh	r3, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	807b      	strh	r3, [r7, #2]
  uint8_t registerAddress;
  uint8_t pwm[4];

  // Calculate register address for the specified channel
  registerAddress = PCA9685_LED0_ON_L + (4 * Channel);
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	b2db      	uxtb	r3, r3
 8002394:	3306      	adds	r3, #6
 8002396:	73fb      	strb	r3, [r7, #15]

  // Prepare data bytes for ON and OFF times
  pwm[0] = OnTime & 0xFF;         // ON Low byte
 8002398:	88bb      	ldrh	r3, [r7, #4]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	723b      	strb	r3, [r7, #8]
  pwm[1] = (OnTime >> 8) & 0xFF;  // ON High byte
 800239e:	88bb      	ldrh	r3, [r7, #4]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	727b      	strb	r3, [r7, #9]
  pwm[2] = OffTime & 0xFF;        // OFF Low byte
 80023a8:	887b      	ldrh	r3, [r7, #2]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	72bb      	strb	r3, [r7, #10]
  pwm[3] = (OffTime >> 8) & 0xFF; // OFF High byte
 80023ae:	887b      	ldrh	r3, [r7, #2]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	72fb      	strb	r3, [r7, #11]

  // Write all 4 bytes in a single I2C transaction
  HAL_I2C_Mem_Write(&hi2c2, PCA9685_ADDRESS, registerAddress, 1, pwm, 4, 10);
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	230a      	movs	r3, #10
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	2304      	movs	r3, #4
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	f107 0308 	add.w	r3, r7, #8
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2301      	movs	r3, #1
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	4803      	ldr	r0, [pc, #12]	@ (80023dc <PCA9685_SetPWM+0x60>)
 80023d0:	f002 fee8 	bl	80051a4 <HAL_I2C_Mem_Write>
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	200002a8 	.word	0x200002a8

080023e0 <PCA9685_SetServoAngle>:
  * @param  Channel: Channel number (0-15)
  * @param  Angle: Desired angle (0-180 degrees)
  * @retval None
  */
void PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	ed87 0a00 	vstr	s0, [r7]
 80023ec:	71fb      	strb	r3, [r7, #7]
  float pwmValue;

  // Limit angle to 0-180 range
  if (Angle < 0) Angle = 0;
 80023ee:	edd7 7a00 	vldr	s15, [r7]
 80023f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023fa:	d502      	bpl.n	8002402 <PCA9685_SetServoAngle+0x22>
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	603b      	str	r3, [r7, #0]
  if (Angle > 180) Angle = 180;
 8002402:	edd7 7a00 	vldr	s15, [r7]
 8002406:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002490 <PCA9685_SetServoAngle+0xb0>
 800240a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800240e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002412:	dd01      	ble.n	8002418 <PCA9685_SetServoAngle+0x38>
 8002414:	4b1f      	ldr	r3, [pc, #124]	@ (8002494 <PCA9685_SetServoAngle+0xb4>)
 8002416:	603b      	str	r3, [r7, #0]

  // Convert angle to PWM value
  // At 50Hz: 0° = 102.4 value (0.5ms), 180° = 511.9 value (2.5ms)
  pwmValue = (Angle * (511.9 - 102.4) / 180.0) + 102.4;
 8002418:	6838      	ldr	r0, [r7, #0]
 800241a:	f7fe f8c5 	bl	80005a8 <__aeabi_f2d>
 800241e:	a318      	add	r3, pc, #96	@ (adr r3, 8002480 <PCA9685_SetServoAngle+0xa0>)
 8002420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002424:	f7fe f918 	bl	8000658 <__aeabi_dmul>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	4b18      	ldr	r3, [pc, #96]	@ (8002498 <PCA9685_SetServoAngle+0xb8>)
 8002436:	f7fe fa39 	bl	80008ac <__aeabi_ddiv>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	a311      	add	r3, pc, #68	@ (adr r3, 8002488 <PCA9685_SetServoAngle+0xa8>)
 8002444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002448:	f7fd ff50 	bl	80002ec <__adddf3>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4610      	mov	r0, r2
 8002452:	4619      	mov	r1, r3
 8002454:	f7fe fbd8 	bl	8000c08 <__aeabi_d2f>
 8002458:	4603      	mov	r3, r0
 800245a:	60fb      	str	r3, [r7, #12]

  // Set PWM with calculated value
  PCA9685_SetPWM(Channel, 0, (uint16_t)pwmValue);
 800245c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002464:	ee17 3a90 	vmov	r3, s15
 8002468:	b29a      	uxth	r2, r3
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff84 	bl	800237c <PCA9685_SetPWM>
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	f3af 8000 	nop.w
 8002480:	00000000 	.word	0x00000000
 8002484:	40799800 	.word	0x40799800
 8002488:	9999999a 	.word	0x9999999a
 800248c:	40599999 	.word	0x40599999
 8002490:	43340000 	.word	0x43340000
 8002494:	43340000 	.word	0x43340000
 8002498:	40668000 	.word	0x40668000

0800249c <Profile_Reset>:
#include "ssd1306.h"
#include "fonts.h"
#include <stdio.h>

// Reset the profile
void Profile_Reset(Profile *profile) {
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
    profile->position = 0;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
    profile->speed = 0;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	605a      	str	r2, [r3, #4]
    profile->target_speed = 0;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
    profile->state = PS_IDLE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <Profile_Start>:
uint8_t Profile_IsFinished(const Profile *profile) {
    return profile->state == PS_FINISHED;
}

// Start a profile
void Profile_Start(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 80024ce:	b480      	push	{r7}
 80024d0:	b087      	sub	sp, #28
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6178      	str	r0, [r7, #20]
 80024d6:	ed87 0a04 	vstr	s0, [r7, #16]
 80024da:	edc7 0a03 	vstr	s1, [r7, #12]
 80024de:	ed87 1a02 	vstr	s2, [r7, #8]
 80024e2:	edc7 1a01 	vstr	s3, [r7, #4]
    profile->sign = (distance < 0) ? -1 : 1;
 80024e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80024ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f2:	d502      	bpl.n	80024fa <Profile_Start+0x2c>
 80024f4:	f04f 32ff 	mov.w	r2, #4294967295
 80024f8:	e000      	b.n	80024fc <Profile_Start+0x2e>
 80024fa:	2201      	movs	r2, #1
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	731a      	strb	r2, [r3, #12]
    if (distance < 0) distance = -distance;
 8002500:	edd7 7a04 	vldr	s15, [r7, #16]
 8002504:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d505      	bpl.n	800251a <Profile_Start+0x4c>
 800250e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002512:	eef1 7a67 	vneg.f32	s15, s15
 8002516:	edc7 7a04 	vstr	s15, [r7, #16]

    if (distance < 1.0f) {
 800251a:	edd7 7a04 	vldr	s15, [r7, #16]
 800251e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252a:	d503      	bpl.n	8002534 <Profile_Start+0x66>
        profile->state = PS_FINISHED;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	2203      	movs	r2, #3
 8002530:	701a      	strb	r2, [r3, #0]
        return;
 8002532:	e052      	b.n	80025da <Profile_Start+0x10c>
    }

    if (final_speed > top_speed) {
 8002534:	ed97 7a02 	vldr	s14, [r7, #8]
 8002538:	edd7 7a03 	vldr	s15, [r7, #12]
 800253c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002544:	dd01      	ble.n	800254a <Profile_Start+0x7c>
        final_speed = top_speed;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	60bb      	str	r3, [r7, #8]
    }

    profile->position = 0;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
    profile->final_position = distance;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	621a      	str	r2, [r3, #32]
    profile->target_speed = profile->sign * fabsf(top_speed);
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800255e:	ee07 3a90 	vmov	s15, r3
 8002562:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002566:	edd7 7a03 	vldr	s15, [r7, #12]
 800256a:	eef0 7ae7 	vabs.f32	s15, s15
 800256e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	edc3 7a06 	vstr	s15, [r3, #24]
    profile->final_speed = profile->sign * fabsf(final_speed);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002586:	edd7 7a02 	vldr	s15, [r7, #8]
 800258a:	eef0 7ae7 	vabs.f32	s15, s15
 800258e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	edc3 7a07 	vstr	s15, [r3, #28]
    profile->acceleration = fabsf(acceleration);
 8002598:	edd7 7a01 	vldr	s15, [r7, #4]
 800259c:	eef0 7ae7 	vabs.f32	s15, s15
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	edc3 7a04 	vstr	s15, [r3, #16]
    profile->one_over_acc = (profile->acceleration >= 1) ? (1.0f / profile->acceleration) : 1.0f;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80025ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80025b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b8:	db07      	blt.n	80025ca <Profile_Start+0xfc>
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	ed93 7a04 	vldr	s14, [r3, #16]
 80025c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025c8:	e001      	b.n	80025ce <Profile_Start+0x100>
 80025ca:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	edc3 7a05 	vstr	s15, [r3, #20]
    profile->state = PS_ACCELERATING;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
}
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <Profile_Move>:

// Move a profile (blocking call)
void Profile_Move(Profile *profile, float distance, float top_speed, float final_speed, float acceleration) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6178      	str	r0, [r7, #20]
 80025ec:	ed87 0a04 	vstr	s0, [r7, #16]
 80025f0:	edc7 0a03 	vstr	s1, [r7, #12]
 80025f4:	ed87 1a02 	vstr	s2, [r7, #8]
 80025f8:	edc7 1a01 	vstr	s3, [r7, #4]
    Profile_Start(profile, distance, top_speed, final_speed, acceleration);
 80025fc:	edd7 1a01 	vldr	s3, [r7, #4]
 8002600:	ed97 1a02 	vldr	s2, [r7, #8]
 8002604:	edd7 0a03 	vldr	s1, [r7, #12]
 8002608:	ed97 0a04 	vldr	s0, [r7, #16]
 800260c:	6978      	ldr	r0, [r7, #20]
 800260e:	f7ff ff5e 	bl	80024ce <Profile_Start>
    Profile_WaitUntilFinished(profile);
 8002612:	6978      	ldr	r0, [r7, #20]
 8002614:	f000 f804 	bl	8002620 <Profile_WaitUntilFinished>
}
 8002618:	bf00      	nop
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <Profile_WaitUntilFinished>:
    profile->speed = profile->target_speed;
    profile->state = PS_FINISHED;
}

// Wait until the profile finishes
void Profile_WaitUntilFinished(Profile *profile) {
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
    while (profile->state != PS_FINISHED) {
 8002628:	e002      	b.n	8002630 <Profile_WaitUntilFinished+0x10>
        HAL_Delay(2);
 800262a:	2002      	movs	r0, #2
 800262c:	f001 faa6 	bl	8003b7c <HAL_Delay>
    while (profile->state != PS_FINISHED) {
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b03      	cmp	r3, #3
 8002638:	d1f7      	bne.n	800262a <Profile_WaitUntilFinished+0xa>
    }
}
 800263a:	bf00      	nop
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <Profile_GetBrakingDistance>:

// Get the braking distance
float Profile_GetBrakingDistance(const Profile *profile) {
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
    return fabsf(profile->speed * profile->speed - profile->final_speed * profile->final_speed) * 0.5f * profile->one_over_acc;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	edd3 7a01 	vldr	s15, [r3, #4]
 8002658:	ee27 7a27 	vmul.f32	s14, s14, s15
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	edd3 6a07 	vldr	s13, [r3, #28]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	edd3 7a07 	vldr	s15, [r3, #28]
 8002668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002670:	eef0 7ae7 	vabs.f32	s15, s15
 8002674:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002678:	ee27 7a87 	vmul.f32	s14, s15, s14
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002682:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002686:	eeb0 0a67 	vmov.f32	s0, s15
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <Profile_GetSpeed>:
float Profile_GetPosition(const Profile *profile) {
    return profile->position;
}

// Get the current speed
float Profile_GetSpeed(const Profile *profile) {
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
    return profile->speed;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	ee07 3a90 	vmov	s15, r3
}
 80026a4:	eeb0 0a67 	vmov.f32	s0, s15
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <Profile_SetTargetSpeed>:
void Profile_SetSpeed(Profile *profile, float speed) {
    profile->speed = speed;
}

// Set the target speed
void Profile_SetTargetSpeed(Profile *profile, float speed) {
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	ed87 0a00 	vstr	s0, [r7]
    profile->target_speed = speed;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	619a      	str	r2, [r3, #24]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <Profile_Update>:
void Profile_SetPosition(Profile *profile, float position) {
    profile->position = position;
}

// Update the profile
void Profile_Update(Profile *profile) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
    if (profile->state == PS_IDLE) return;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 80b5 	beq.w	800284e <Profile_Update+0x17e>

    float delta_v = profile->acceleration * LOOP_INTERVAL;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	ed93 7a04 	vldr	s14, [r3, #16]
 80026ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002858 <Profile_Update+0x188>)
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f4:	edc7 7a03 	vstr	s15, [r7, #12]
    float remaining = fabsf(profile->final_position) - fabsf(profile->position);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80026fe:	eeb0 7ae7 	vabs.f32	s14, s15
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	edd3 7a02 	vldr	s15, [r3, #8]
 8002708:	eef0 7ae7 	vabs.f32	s15, s15
 800270c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002710:	edc7 7a02 	vstr	s15, [r7, #8]

    if (profile->state == PS_ACCELERATING) {
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b01      	cmp	r3, #1
 800271c:	d128      	bne.n	8002770 <Profile_Update+0xa0>
        if (remaining < Profile_GetBrakingDistance(profile)) {
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff ff90 	bl	8002644 <Profile_GetBrakingDistance>
 8002724:	eeb0 7a40 	vmov.f32	s14, s0
 8002728:	edd7 7a02 	vldr	s15, [r7, #8]
 800272c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002734:	d51c      	bpl.n	8002770 <Profile_Update+0xa0>
            profile->state = PS_BRAKING;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2202      	movs	r2, #2
 800273a:	701a      	strb	r2, [r3, #0]
            profile->target_speed = (profile->final_speed == 0) ? (profile->sign * 5.0f) : profile->final_speed;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002742:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274a:	d10b      	bne.n	8002764 <Profile_Update+0x94>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800275a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800275e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002762:	e002      	b.n	800276a <Profile_Update+0x9a>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	edd3 7a07 	vldr	s15, [r3, #28]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	edc3 7a06 	vstr	s15, [r3, #24]
        }
    }

    if (profile->speed < profile->target_speed) {
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	ed93 7a01 	vldr	s14, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	edd3 7a06 	vldr	s15, [r3, #24]
 800277c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002784:	d519      	bpl.n	80027ba <Profile_Update+0xea>
        profile->speed += delta_v;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	ed93 7a01 	vldr	s14, [r3, #4]
 800278c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed > profile->target_speed) profile->speed = profile->target_speed;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	ed93 7a01 	vldr	s14, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80027a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ae:	dd28      	ble.n	8002802 <Profile_Update+0x132>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699a      	ldr	r2, [r3, #24]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	e023      	b.n	8002802 <Profile_Update+0x132>
    } else if (profile->speed > profile->target_speed) {
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80027c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ce:	dd18      	ble.n	8002802 <Profile_Update+0x132>
        profile->speed -= delta_v;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80027d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80027da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	edc3 7a01 	vstr	s15, [r3, #4]
        if (profile->speed < profile->target_speed) profile->speed = profile->target_speed;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80027f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f8:	d503      	bpl.n	8002802 <Profile_Update+0x132>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699a      	ldr	r2, [r3, #24]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	605a      	str	r2, [r3, #4]
    }

    profile->position += profile->speed * LOOP_INTERVAL;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	ed93 7a01 	vldr	s14, [r3, #4]
 8002808:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <Profile_Update+0x188>)
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	edd3 7a02 	vldr	s15, [r3, #8]
 8002818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	edc3 7a02 	vstr	s15, [r3, #8]

    if (profile->state != PS_FINISHED && remaining < 0.125f) {
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b03      	cmp	r3, #3
 800282a:	d011      	beq.n	8002850 <Profile_Update+0x180>
 800282c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002830:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8002834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283c:	d508      	bpl.n	8002850 <Profile_Update+0x180>
        profile->state = PS_FINISHED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2203      	movs	r2, #3
 8002842:	701a      	strb	r2, [r3, #0]
        profile->target_speed = profile->final_speed;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	619a      	str	r2, [r3, #24]
 800284c:	e000      	b.n	8002850 <Profile_Update+0x180>
    if (profile->state == PS_IDLE) return;
 800284e:	bf00      	nop
    }

}
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	0800b6b4 	.word	0x0800b6b4

0800285c <Servo_Init>:
  * @brief  Initialize the servo control system
  * @param  frequency: PWM frequency for the servos (typically 50Hz)
  * @retval None
  */
void Servo_Init(uint16_t frequency)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	80fb      	strh	r3, [r7, #6]
    if (isInitialized)
 8002866:	4b0c      	ldr	r3, [pc, #48]	@ (8002898 <Servo_Init+0x3c>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d110      	bne.n	8002890 <Servo_Init+0x34>
        return;

    // Initialize PCA9685 with the specified frequency
    PCA9685_Init(frequency);
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fd71 	bl	8002358 <PCA9685_Init>

    // Clear the servo array
    memset(servos, 0, sizeof(servos));
 8002876:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800287a:	2100      	movs	r1, #0
 800287c:	4807      	ldr	r0, [pc, #28]	@ (800289c <Servo_Init+0x40>)
 800287e:	f006 fe14 	bl	80094aa <memset>
    servoCount = 0;
 8002882:	4b07      	ldr	r3, [pc, #28]	@ (80028a0 <Servo_Init+0x44>)
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
    isInitialized = 1;
 8002888:	4b03      	ldr	r3, [pc, #12]	@ (8002898 <Servo_Init+0x3c>)
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e000      	b.n	8002892 <Servo_Init+0x36>
        return;
 8002890:	bf00      	nop
}
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000829 	.word	0x20000829
 800289c:	200005e8 	.word	0x200005e8
 80028a0:	20000828 	.word	0x20000828

080028a4 <Servo_Register>:
  * @param  minAngle: Minimum angle limit (0-180)
  * @param  maxAngle: Maximum angle limit (0-180)
  * @retval int: Servo ID (0 to MAX_SERVOS-1) or -1 if error
  */
int Servo_Register(uint8_t channel, const char* name, float minAngle, float maxAngle)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80028b2:	edc7 0a00 	vstr	s1, [r7]
 80028b6:	73fb      	strb	r3, [r7, #15]
    // Check if initialized
    if (!isInitialized)
 80028b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002a74 <Servo_Register+0x1d0>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <Servo_Register+0x22>
        return -1;
 80028c0:	f04f 33ff 	mov.w	r3, #4294967295
 80028c4:	e0d1      	b.n	8002a6a <Servo_Register+0x1c6>

    // Check if we've reached maximum servo count
    if (servoCount >= MAX_SERVOS)
 80028c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002a78 <Servo_Register+0x1d4>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b0f      	cmp	r3, #15
 80028cc:	d902      	bls.n	80028d4 <Servo_Register+0x30>
        return -1;
 80028ce:	f04f 33ff 	mov.w	r3, #4294967295
 80028d2:	e0ca      	b.n	8002a6a <Servo_Register+0x1c6>

    // Check if channel is valid
    if (channel >= MAX_SERVOS)
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	2b0f      	cmp	r3, #15
 80028d8:	d902      	bls.n	80028e0 <Servo_Register+0x3c>
        return -1;
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
 80028de:	e0c4      	b.n	8002a6a <Servo_Register+0x1c6>

    // Check if the channel is already in use
    for (int i = 0; i < servoCount; i++) {
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	e01b      	b.n	800291e <Servo_Register+0x7a>
        if (servos[i].initialized && servos[i].channel == channel)
 80028e6:	4965      	ldr	r1, [pc, #404]	@ (8002a7c <Servo_Register+0x1d8>)
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4613      	mov	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	3310      	adds	r3, #16
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00d      	beq.n	8002918 <Servo_Register+0x74>
 80028fc:	495f      	ldr	r1, [pc, #380]	@ (8002a7c <Servo_Register+0x1d8>)
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	7bfa      	ldrb	r2, [r7, #15]
 800290e:	429a      	cmp	r2, r3
 8002910:	d102      	bne.n	8002918 <Servo_Register+0x74>
            return -1;
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
 8002916:	e0a8      	b.n	8002a6a <Servo_Register+0x1c6>
    for (int i = 0; i < servoCount; i++) {
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	3301      	adds	r3, #1
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	4b56      	ldr	r3, [pc, #344]	@ (8002a78 <Servo_Register+0x1d4>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	4293      	cmp	r3, r2
 8002928:	dbdd      	blt.n	80028e6 <Servo_Register+0x42>
    }

    // Validate angle limits
    if (minAngle < SERVO_ANGLE_MIN) minAngle = SERVO_ANGLE_MIN;
 800292a:	edd7 7a01 	vldr	s15, [r7, #4]
 800292e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002936:	d502      	bpl.n	800293e <Servo_Register+0x9a>
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	607b      	str	r3, [r7, #4]
    if (maxAngle > SERVO_ANGLE_MAX) maxAngle = SERVO_ANGLE_MAX;
 800293e:	edd7 7a00 	vldr	s15, [r7]
 8002942:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8002a80 <Servo_Register+0x1dc>
 8002946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294e:	dd01      	ble.n	8002954 <Servo_Register+0xb0>
 8002950:	4b4c      	ldr	r3, [pc, #304]	@ (8002a84 <Servo_Register+0x1e0>)
 8002952:	603b      	str	r3, [r7, #0]
    if (minAngle >= maxAngle) return -1;
 8002954:	ed97 7a01 	vldr	s14, [r7, #4]
 8002958:	edd7 7a00 	vldr	s15, [r7]
 800295c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002964:	db02      	blt.n	800296c <Servo_Register+0xc8>
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
 800296a:	e07e      	b.n	8002a6a <Servo_Register+0x1c6>

    // Register the servo
    int servoId = servoCount;
 800296c:	4b42      	ldr	r3, [pc, #264]	@ (8002a78 <Servo_Register+0x1d4>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	613b      	str	r3, [r7, #16]
    servos[servoId].channel = channel;
 8002972:	4942      	ldr	r1, [pc, #264]	@ (8002a7c <Servo_Register+0x1d8>)
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	701a      	strb	r2, [r3, #0]
    servos[servoId].minAngle = minAngle;
 8002984:	493d      	ldr	r1, [pc, #244]	@ (8002a7c <Servo_Register+0x1d8>)
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	3304      	adds	r3, #4
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	601a      	str	r2, [r3, #0]
    servos[servoId].maxAngle = maxAngle;
 8002998:	4938      	ldr	r1, [pc, #224]	@ (8002a7c <Servo_Register+0x1d8>)
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	3308      	adds	r3, #8
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	601a      	str	r2, [r3, #0]
    servos[servoId].currentAngle = (minAngle + maxAngle) / 2.0f;  // Center position
 80029ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80029b0:	edd7 7a00 	vldr	s15, [r7]
 80029b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029b8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80029bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029c0:	492e      	ldr	r1, [pc, #184]	@ (8002a7c <Servo_Register+0x1d8>)
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4613      	mov	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	330c      	adds	r3, #12
 80029d0:	edc3 7a00 	vstr	s15, [r3]
    servos[servoId].initialized = 1;
 80029d4:	4929      	ldr	r1, [pc, #164]	@ (8002a7c <Servo_Register+0x1d8>)
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	3310      	adds	r3, #16
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]

    // Set optional name
    if (name != NULL) {
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d018      	beq.n	8002a20 <Servo_Register+0x17c>
        strncpy(servos[servoId].name, name, sizeof(servos[servoId].name) - 1);
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4613      	mov	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	3310      	adds	r3, #16
 80029fa:	4a20      	ldr	r2, [pc, #128]	@ (8002a7c <Servo_Register+0x1d8>)
 80029fc:	4413      	add	r3, r2
 80029fe:	3301      	adds	r3, #1
 8002a00:	220f      	movs	r2, #15
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f006 fd58 	bl	80094ba <strncpy>
        servos[servoId].name[sizeof(servos[servoId].name) - 1] = '\0';  // Ensure null termination
 8002a0a:	491c      	ldr	r1, [pc, #112]	@ (8002a7c <Servo_Register+0x1d8>)
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	3320      	adds	r3, #32
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e00d      	b.n	8002a3c <Servo_Register+0x198>
    } else {
        snprintf(servos[servoId].name, sizeof(servos[servoId].name), "Servo%d", servoId);
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	3310      	adds	r3, #16
 8002a2c:	4a13      	ldr	r2, [pc, #76]	@ (8002a7c <Servo_Register+0x1d8>)
 8002a2e:	4413      	add	r3, r2
 8002a30:	1c58      	adds	r0, r3, #1
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4a14      	ldr	r2, [pc, #80]	@ (8002a88 <Servo_Register+0x1e4>)
 8002a36:	2110      	movs	r1, #16
 8002a38:	f006 fcbe 	bl	80093b8 <sniprintf>
    }

    // Update servo count
    servoCount++;
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a78 <Servo_Register+0x1d4>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	3301      	adds	r3, #1
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	4b0c      	ldr	r3, [pc, #48]	@ (8002a78 <Servo_Register+0x1d4>)
 8002a46:	701a      	strb	r2, [r3, #0]

    // Move servo to center position
    PCA9685_SetServoAngle(channel, servos[servoId].currentAngle);
 8002a48:	490c      	ldr	r1, [pc, #48]	@ (8002a7c <Servo_Register+0x1d8>)
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	330c      	adds	r3, #12
 8002a58:	edd3 7a00 	vldr	s15, [r3]
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fcbc 	bl	80023e0 <PCA9685_SetServoAngle>

    return servoId;
 8002a68:	693b      	ldr	r3, [r7, #16]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000829 	.word	0x20000829
 8002a78:	20000828 	.word	0x20000828
 8002a7c:	200005e8 	.word	0x200005e8
 8002a80:	43340000 	.word	0x43340000
 8002a84:	43340000 	.word	0x43340000
 8002a88:	0800b69c 	.word	0x0800b69c

08002a8c <Servo_SetAngle>:
  * @param  servoId: ID returned from Servo_Register
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngle(int servoId, float angle)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	ed87 0a00 	vstr	s0, [r7]
    // Check if servo ID is valid
    if (servoId < 0 || servoId >= servoCount || !servos[servoId].initialized)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	db10      	blt.n	8002ac0 <Servo_SetAngle+0x34>
 8002a9e:	4b33      	ldr	r3, [pc, #204]	@ (8002b6c <Servo_SetAngle+0xe0>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	da0a      	bge.n	8002ac0 <Servo_SetAngle+0x34>
 8002aaa:	4931      	ldr	r1, [pc, #196]	@ (8002b70 <Servo_SetAngle+0xe4>)
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3310      	adds	r3, #16
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <Servo_SetAngle+0x3a>
        return -1;
 8002ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac4:	e04d      	b.n	8002b62 <Servo_SetAngle+0xd6>

    // Clamp angle to servo limits
    if (angle < servos[servoId].minAngle)
 8002ac6:	492a      	ldr	r1, [pc, #168]	@ (8002b70 <Servo_SetAngle+0xe4>)
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	ed97 7a00 	vldr	s14, [r7]
 8002ade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae6:	d509      	bpl.n	8002afc <Servo_SetAngle+0x70>
        angle = servos[servoId].minAngle;
 8002ae8:	4921      	ldr	r1, [pc, #132]	@ (8002b70 <Servo_SetAngle+0xe4>)
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	3304      	adds	r3, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	603b      	str	r3, [r7, #0]
    if (angle > servos[servoId].maxAngle)
 8002afc:	491c      	ldr	r1, [pc, #112]	@ (8002b70 <Servo_SetAngle+0xe4>)
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	3308      	adds	r3, #8
 8002b0c:	edd3 7a00 	vldr	s15, [r3]
 8002b10:	ed97 7a00 	vldr	s14, [r7]
 8002b14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	dd09      	ble.n	8002b32 <Servo_SetAngle+0xa6>
        angle = servos[servoId].maxAngle;
 8002b1e:	4914      	ldr	r1, [pc, #80]	@ (8002b70 <Servo_SetAngle+0xe4>)
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	603b      	str	r3, [r7, #0]

    // Update current angle
    servos[servoId].currentAngle = angle;
 8002b32:	490f      	ldr	r1, [pc, #60]	@ (8002b70 <Servo_SetAngle+0xe4>)
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	330c      	adds	r3, #12
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	601a      	str	r2, [r3, #0]

    // Set servo position
    PCA9685_SetServoAngle(servos[servoId].channel, angle);
 8002b46:	490a      	ldr	r1, [pc, #40]	@ (8002b70 <Servo_SetAngle+0xe4>)
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	ed97 0a00 	vldr	s0, [r7]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fc40 	bl	80023e0 <PCA9685_SetServoAngle>

    return 0;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000828 	.word	0x20000828
 8002b70:	200005e8 	.word	0x200005e8

08002b74 <Servo_SetAngleByName>:
  * @param  name: Name of the servo
  * @param  angle: Desired angle in degrees
  * @retval int: 0 if successful, -1 if error
  */
int Servo_SetAngleByName(const char* name, float angle)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	ed87 0a00 	vstr	s0, [r7]
    if (name == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <Servo_SetAngleByName+0x18>
        return -1;
 8002b86:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8a:	e00f      	b.n	8002bac <Servo_SetAngleByName+0x38>

    int servoId = Servo_GetIdByName(name);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f811 	bl	8002bb4 <Servo_GetIdByName>
 8002b92:	60f8      	str	r0, [r7, #12]

    if (servoId >= 0)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db06      	blt.n	8002ba8 <Servo_SetAngleByName+0x34>
        return Servo_SetAngle(servoId, angle);
 8002b9a:	ed97 0a00 	vldr	s0, [r7]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f7ff ff74 	bl	8002a8c <Servo_SetAngle>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	e001      	b.n	8002bac <Servo_SetAngleByName+0x38>
    else
        return -1;
 8002ba8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <Servo_GetIdByName>:
  * @brief  Get servo ID by name
  * @param  name: Name of the servo
  * @retval int: Servo ID or -1 if not found
  */
int Servo_GetIdByName(const char* name)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
    if (name == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d102      	bne.n	8002bc8 <Servo_GetIdByName+0x14>
        return -1;
 8002bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc6:	e02a      	b.n	8002c1e <Servo_GetIdByName+0x6a>

    // Search for servo with the given name
    for (int i = 0; i < servoCount; i++) {
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e01f      	b.n	8002c0e <Servo_GetIdByName+0x5a>
        if (servos[i].initialized && strcmp(servos[i].name, name) == 0)
 8002bce:	4916      	ldr	r1, [pc, #88]	@ (8002c28 <Servo_GetIdByName+0x74>)
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	3310      	adds	r3, #16
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d011      	beq.n	8002c08 <Servo_GetIdByName+0x54>
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	3310      	adds	r3, #16
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c28 <Servo_GetIdByName+0x74>)
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fb09 	bl	8000210 <strcmp>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <Servo_GetIdByName+0x54>
            return i;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	e00a      	b.n	8002c1e <Servo_GetIdByName+0x6a>
    for (int i = 0; i < servoCount; i++) {
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <Servo_GetIdByName+0x78>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4293      	cmp	r3, r2
 8002c18:	dbd9      	blt.n	8002bce <Servo_GetIdByName+0x1a>
    }

    return -1;
 8002c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200005e8 	.word	0x200005e8
 8002c2c:	20000828 	.word	0x20000828

08002c30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	4b10      	ldr	r3, [pc, #64]	@ (8002c7c <HAL_MspInit+0x4c>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002c7c <HAL_MspInit+0x4c>)
 8002c40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c46:	4b0d      	ldr	r3, [pc, #52]	@ (8002c7c <HAL_MspInit+0x4c>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c4e:	607b      	str	r3, [r7, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	603b      	str	r3, [r7, #0]
 8002c56:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <HAL_MspInit+0x4c>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	4a08      	ldr	r2, [pc, #32]	@ (8002c7c <HAL_MspInit+0x4c>)
 8002c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c62:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <HAL_MspInit+0x4c>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c6e:	2007      	movs	r0, #7
 8002c70:	f001 faea 	bl	8004248 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40023800 	.word	0x40023800

08002c80 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	@ 0x28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a17      	ldr	r2, [pc, #92]	@ (8002cfc <HAL_ADC_MspInit+0x7c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d127      	bne.n	8002cf2 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	4b16      	ldr	r3, [pc, #88]	@ (8002d00 <HAL_ADC_MspInit+0x80>)
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	4a15      	ldr	r2, [pc, #84]	@ (8002d00 <HAL_ADC_MspInit+0x80>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cb2:	4b13      	ldr	r3, [pc, #76]	@ (8002d00 <HAL_ADC_MspInit+0x80>)
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d00 <HAL_ADC_MspInit+0x80>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8002d00 <HAL_ADC_MspInit+0x80>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cce:	4b0c      	ldr	r3, [pc, #48]	@ (8002d00 <HAL_ADC_MspInit+0x80>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = IR_ADC_Pin;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_ADC_GPIO_Port, &GPIO_InitStruct);
 8002ce6:	f107 0314 	add.w	r3, r7, #20
 8002cea:	4619      	mov	r1, r3
 8002cec:	4805      	ldr	r0, [pc, #20]	@ (8002d04 <HAL_ADC_MspInit+0x84>)
 8002cee:	f001 fe69 	bl	80049c4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002cf2:	bf00      	nop
 8002cf4:	3728      	adds	r7, #40	@ 0x28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40012000 	.word	0x40012000
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40020800 	.word	0x40020800

08002d08 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08c      	sub	sp, #48	@ 0x30
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	f107 031c 	add.w	r3, r7, #28
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a42      	ldr	r2, [pc, #264]	@ (8002e30 <HAL_I2C_MspInit+0x128>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d12c      	bne.n	8002d84 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	4b41      	ldr	r3, [pc, #260]	@ (8002e34 <HAL_I2C_MspInit+0x12c>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	4a40      	ldr	r2, [pc, #256]	@ (8002e34 <HAL_I2C_MspInit+0x12c>)
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e34 <HAL_I2C_MspInit+0x12c>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	61bb      	str	r3, [r7, #24]
 8002d44:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d46:	23c0      	movs	r3, #192	@ 0xc0
 8002d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d4a:	2312      	movs	r3, #18
 8002d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d52:	2303      	movs	r3, #3
 8002d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d56:	2304      	movs	r3, #4
 8002d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5a:	f107 031c 	add.w	r3, r7, #28
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4835      	ldr	r0, [pc, #212]	@ (8002e38 <HAL_I2C_MspInit+0x130>)
 8002d62:	f001 fe2f 	bl	80049c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	4b32      	ldr	r3, [pc, #200]	@ (8002e34 <HAL_I2C_MspInit+0x12c>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	4a31      	ldr	r2, [pc, #196]	@ (8002e34 <HAL_I2C_MspInit+0x12c>)
 8002d70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d76:	4b2f      	ldr	r3, [pc, #188]	@ (8002e34 <HAL_I2C_MspInit+0x12c>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d82:	e050      	b.n	8002e26 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a2c      	ldr	r2, [pc, #176]	@ (8002e3c <HAL_I2C_MspInit+0x134>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d14b      	bne.n	8002e26 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	4b28      	ldr	r3, [pc, #160]	@ (8002e34 <HAL_I2C_MspInit+0x12c>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	4a27      	ldr	r2, [pc, #156]	@ (8002e34 <HAL_I2C_MspInit+0x12c>)
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d9e:	4b25      	ldr	r3, [pc, #148]	@ (8002e34 <HAL_I2C_MspInit+0x12c>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b21      	ldr	r3, [pc, #132]	@ (8002e34 <HAL_I2C_MspInit+0x12c>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	4a20      	ldr	r2, [pc, #128]	@ (8002e34 <HAL_I2C_MspInit+0x12c>)
 8002db4:	f043 0304 	orr.w	r3, r3, #4
 8002db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dba:	4b1e      	ldr	r3, [pc, #120]	@ (8002e34 <HAL_I2C_MspInit+0x12c>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dcc:	2312      	movs	r3, #18
 8002dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002dd8:	2304      	movs	r3, #4
 8002dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ddc:	f107 031c 	add.w	r3, r7, #28
 8002de0:	4619      	mov	r1, r3
 8002de2:	4815      	ldr	r0, [pc, #84]	@ (8002e38 <HAL_I2C_MspInit+0x130>)
 8002de4:	f001 fdee 	bl	80049c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dee:	2312      	movs	r3, #18
 8002df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df6:	2303      	movs	r3, #3
 8002df8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dfe:	f107 031c 	add.w	r3, r7, #28
 8002e02:	4619      	mov	r1, r3
 8002e04:	480e      	ldr	r0, [pc, #56]	@ (8002e40 <HAL_I2C_MspInit+0x138>)
 8002e06:	f001 fddd 	bl	80049c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <HAL_I2C_MspInit+0x12c>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	4a08      	ldr	r2, [pc, #32]	@ (8002e34 <HAL_I2C_MspInit+0x12c>)
 8002e14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e1a:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <HAL_I2C_MspInit+0x12c>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
}
 8002e26:	bf00      	nop
 8002e28:	3730      	adds	r7, #48	@ 0x30
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40005400 	.word	0x40005400
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40020400 	.word	0x40020400
 8002e3c:	40005800 	.word	0x40005800
 8002e40:	40020800 	.word	0x40020800

08002e44 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08c      	sub	sp, #48	@ 0x30
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	f107 031c 	add.w	r3, r7, #28
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a32      	ldr	r2, [pc, #200]	@ (8002f2c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d12d      	bne.n	8002ec2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	4b31      	ldr	r3, [pc, #196]	@ (8002f30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	4a30      	ldr	r2, [pc, #192]	@ (8002f30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e76:	4b2e      	ldr	r3, [pc, #184]	@ (8002f30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	61bb      	str	r3, [r7, #24]
 8002e80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	4b2a      	ldr	r3, [pc, #168]	@ (8002f30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	4a29      	ldr	r2, [pc, #164]	@ (8002f30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e92:	4b27      	ldr	r3, [pc, #156]	@ (8002f30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8002e9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb4:	f107 031c 	add.w	r3, r7, #28
 8002eb8:	4619      	mov	r1, r3
 8002eba:	481e      	ldr	r0, [pc, #120]	@ (8002f34 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002ebc:	f001 fd82 	bl	80049c4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ec0:	e030      	b.n	8002f24 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM2)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eca:	d12b      	bne.n	8002f24 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	4b17      	ldr	r3, [pc, #92]	@ (8002f30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed4:	4a16      	ldr	r2, [pc, #88]	@ (8002f30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6413      	str	r3, [r2, #64]	@ 0x40
 8002edc:	4b14      	ldr	r3, [pc, #80]	@ (8002f30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	4b10      	ldr	r3, [pc, #64]	@ (8002f30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8002f30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8002f04:	2303      	movs	r3, #3
 8002f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	2300      	movs	r3, #0
 8002f12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f14:	2301      	movs	r3, #1
 8002f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f18:	f107 031c 	add.w	r3, r7, #28
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4805      	ldr	r0, [pc, #20]	@ (8002f34 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002f20:	f001 fd50 	bl	80049c4 <HAL_GPIO_Init>
}
 8002f24:	bf00      	nop
 8002f26:	3730      	adds	r7, #48	@ 0x30
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40010000 	.word	0x40010000
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40020000 	.word	0x40020000

08002f38 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0b      	ldr	r2, [pc, #44]	@ (8002f74 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d10d      	bne.n	8002f66 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f78 <HAL_TIM_PWM_MspInit+0x40>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	4a09      	ldr	r2, [pc, #36]	@ (8002f78 <HAL_TIM_PWM_MspInit+0x40>)
 8002f54:	f043 0302 	orr.w	r3, r3, #2
 8002f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f5a:	4b07      	ldr	r3, [pc, #28]	@ (8002f78 <HAL_TIM_PWM_MspInit+0x40>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40023800 	.word	0x40023800

08002f7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	@ 0x28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 0314 	add.w	r3, r7, #20
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a21      	ldr	r2, [pc, #132]	@ (8003020 <HAL_TIM_MspPostInit+0xa4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d13b      	bne.n	8003016 <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	4b20      	ldr	r3, [pc, #128]	@ (8003024 <HAL_TIM_MspPostInit+0xa8>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8003024 <HAL_TIM_MspPostInit+0xa8>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fae:	4b1d      	ldr	r3, [pc, #116]	@ (8003024 <HAL_TIM_MspPostInit+0xa8>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	4b19      	ldr	r3, [pc, #100]	@ (8003024 <HAL_TIM_MspPostInit+0xa8>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	4a18      	ldr	r2, [pc, #96]	@ (8003024 <HAL_TIM_MspPostInit+0xa8>)
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fca:	4b16      	ldr	r3, [pc, #88]	@ (8003024 <HAL_TIM_MspPostInit+0xa8>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fd6:	23c0      	movs	r3, #192	@ 0xc0
 8002fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fea:	f107 0314 	add.w	r3, r7, #20
 8002fee:	4619      	mov	r1, r3
 8002ff0:	480d      	ldr	r0, [pc, #52]	@ (8003028 <HAL_TIM_MspPostInit+0xac>)
 8002ff2:	f001 fce7 	bl	80049c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003002:	2300      	movs	r3, #0
 8003004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003006:	2302      	movs	r3, #2
 8003008:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	4619      	mov	r1, r3
 8003010:	4806      	ldr	r0, [pc, #24]	@ (800302c <HAL_TIM_MspPostInit+0xb0>)
 8003012:	f001 fcd7 	bl	80049c4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003016:	bf00      	nop
 8003018:	3728      	adds	r7, #40	@ 0x28
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40000400 	.word	0x40000400
 8003024:	40023800 	.word	0x40023800
 8003028:	40020000 	.word	0x40020000
 800302c:	40020400 	.word	0x40020400

08003030 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08e      	sub	sp, #56	@ 0x38
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a66      	ldr	r2, [pc, #408]	@ (80031e8 <HAL_UART_MspInit+0x1b8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d12c      	bne.n	80030ac <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	623b      	str	r3, [r7, #32]
 8003056:	4b65      	ldr	r3, [pc, #404]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	4a64      	ldr	r2, [pc, #400]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 800305c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003060:	6413      	str	r3, [r2, #64]	@ 0x40
 8003062:	4b62      	ldr	r3, [pc, #392]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	623b      	str	r3, [r7, #32]
 800306c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	4b5e      	ldr	r3, [pc, #376]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	4a5d      	ldr	r2, [pc, #372]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6313      	str	r3, [r2, #48]	@ 0x30
 800307e:	4b5b      	ldr	r3, [pc, #364]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	61fb      	str	r3, [r7, #28]
 8003088:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800308a:	230c      	movs	r3, #12
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003096:	2303      	movs	r3, #3
 8003098:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800309a:	2307      	movs	r3, #7
 800309c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030a2:	4619      	mov	r1, r3
 80030a4:	4852      	ldr	r0, [pc, #328]	@ (80031f0 <HAL_UART_MspInit+0x1c0>)
 80030a6:	f001 fc8d 	bl	80049c4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 80030aa:	e099      	b.n	80031e0 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a50      	ldr	r2, [pc, #320]	@ (80031f4 <HAL_UART_MspInit+0x1c4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d12d      	bne.n	8003112 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	4b4c      	ldr	r3, [pc, #304]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	4a4b      	ldr	r2, [pc, #300]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 80030c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030c6:	4b49      	ldr	r3, [pc, #292]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	4b45      	ldr	r3, [pc, #276]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	4a44      	ldr	r2, [pc, #272]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 80030dc:	f043 0304 	orr.w	r3, r3, #4
 80030e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030e2:	4b42      	ldr	r3, [pc, #264]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80030ee:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f4:	2302      	movs	r3, #2
 80030f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030fc:	2303      	movs	r3, #3
 80030fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003100:	2307      	movs	r3, #7
 8003102:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003104:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003108:	4619      	mov	r1, r3
 800310a:	483b      	ldr	r0, [pc, #236]	@ (80031f8 <HAL_UART_MspInit+0x1c8>)
 800310c:	f001 fc5a 	bl	80049c4 <HAL_GPIO_Init>
}
 8003110:	e066      	b.n	80031e0 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a39      	ldr	r2, [pc, #228]	@ (80031fc <HAL_UART_MspInit+0x1cc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d161      	bne.n	80031e0 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	4b32      	ldr	r3, [pc, #200]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 8003122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003124:	4a31      	ldr	r2, [pc, #196]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 8003126:	f043 0320 	orr.w	r3, r3, #32
 800312a:	6453      	str	r3, [r2, #68]	@ 0x44
 800312c:	4b2f      	ldr	r3, [pc, #188]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 800312e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	4b2b      	ldr	r3, [pc, #172]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	4a2a      	ldr	r2, [pc, #168]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 8003142:	f043 0304 	orr.w	r3, r3, #4
 8003146:	6313      	str	r3, [r2, #48]	@ 0x30
 8003148:	4b28      	ldr	r3, [pc, #160]	@ (80031ec <HAL_UART_MspInit+0x1bc>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003154:	23c0      	movs	r3, #192	@ 0xc0
 8003156:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003158:	2302      	movs	r3, #2
 800315a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003160:	2303      	movs	r3, #3
 8003162:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003164:	2308      	movs	r3, #8
 8003166:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003168:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800316c:	4619      	mov	r1, r3
 800316e:	4822      	ldr	r0, [pc, #136]	@ (80031f8 <HAL_UART_MspInit+0x1c8>)
 8003170:	f001 fc28 	bl	80049c4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8003174:	4b22      	ldr	r3, [pc, #136]	@ (8003200 <HAL_UART_MspInit+0x1d0>)
 8003176:	4a23      	ldr	r2, [pc, #140]	@ (8003204 <HAL_UART_MspInit+0x1d4>)
 8003178:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800317a:	4b21      	ldr	r3, [pc, #132]	@ (8003200 <HAL_UART_MspInit+0x1d0>)
 800317c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003180:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003182:	4b1f      	ldr	r3, [pc, #124]	@ (8003200 <HAL_UART_MspInit+0x1d0>)
 8003184:	2200      	movs	r2, #0
 8003186:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003188:	4b1d      	ldr	r3, [pc, #116]	@ (8003200 <HAL_UART_MspInit+0x1d0>)
 800318a:	2200      	movs	r2, #0
 800318c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800318e:	4b1c      	ldr	r3, [pc, #112]	@ (8003200 <HAL_UART_MspInit+0x1d0>)
 8003190:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003194:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003196:	4b1a      	ldr	r3, [pc, #104]	@ (8003200 <HAL_UART_MspInit+0x1d0>)
 8003198:	2200      	movs	r2, #0
 800319a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800319c:	4b18      	ldr	r3, [pc, #96]	@ (8003200 <HAL_UART_MspInit+0x1d0>)
 800319e:	2200      	movs	r2, #0
 80031a0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80031a2:	4b17      	ldr	r3, [pc, #92]	@ (8003200 <HAL_UART_MspInit+0x1d0>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031a8:	4b15      	ldr	r3, [pc, #84]	@ (8003200 <HAL_UART_MspInit+0x1d0>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031ae:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <HAL_UART_MspInit+0x1d0>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80031b4:	4812      	ldr	r0, [pc, #72]	@ (8003200 <HAL_UART_MspInit+0x1d0>)
 80031b6:	f001 f889 	bl	80042cc <HAL_DMA_Init>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_UART_MspInit+0x194>
      Error_Handler();
 80031c0:	f7fe fece 	bl	8001f60 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003200 <HAL_UART_MspInit+0x1d0>)
 80031c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003200 <HAL_UART_MspInit+0x1d0>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80031d0:	2200      	movs	r2, #0
 80031d2:	2100      	movs	r1, #0
 80031d4:	2047      	movs	r0, #71	@ 0x47
 80031d6:	f001 f842 	bl	800425e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80031da:	2047      	movs	r0, #71	@ 0x47
 80031dc:	f001 f85b 	bl	8004296 <HAL_NVIC_EnableIRQ>
}
 80031e0:	bf00      	nop
 80031e2:	3738      	adds	r7, #56	@ 0x38
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40004400 	.word	0x40004400
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40020000 	.word	0x40020000
 80031f4:	40004800 	.word	0x40004800
 80031f8:	40020800 	.word	0x40020800
 80031fc:	40011400 	.word	0x40011400
 8003200:	200004ac 	.word	0x200004ac
 8003204:	40026428 	.word	0x40026428

08003208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800320c:	bf00      	nop
 800320e:	e7fd      	b.n	800320c <NMI_Handler+0x4>

08003210 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003214:	bf00      	nop
 8003216:	e7fd      	b.n	8003214 <HardFault_Handler+0x4>

08003218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800321c:	bf00      	nop
 800321e:	e7fd      	b.n	800321c <MemManage_Handler+0x4>

08003220 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003224:	bf00      	nop
 8003226:	e7fd      	b.n	8003224 <BusFault_Handler+0x4>

08003228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800322c:	bf00      	nop
 800322e:	e7fd      	b.n	800322c <UsageFault_Handler+0x4>

08003230 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800323e:	b480      	push	{r7}
 8003240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003242:	bf00      	nop
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003260:	f000 fc6c 	bl	8003b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  tick_accumulator += 1;  // Increment by 1 ms
 8003264:	4b0c      	ldr	r3, [pc, #48]	@ (8003298 <SysTick_Handler+0x3c>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	3301      	adds	r3, #1
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <SysTick_Handler+0x3c>)
 8003270:	701a      	strb	r2, [r3, #0]
  if(systick_function_enabled){
 8003272:	4b0a      	ldr	r3, [pc, #40]	@ (800329c <SysTick_Handler+0x40>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d009      	beq.n	8003290 <SysTick_Handler+0x34>
	  if (tick_accumulator >= TICK_INTERVAL) {
 800327c:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <SysTick_Handler+0x3c>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b13      	cmp	r3, #19
 8003284:	d904      	bls.n	8003290 <SysTick_Handler+0x34>
	        tick_accumulator = 0;  // Accumulate remainder
 8003286:	4b04      	ldr	r3, [pc, #16]	@ (8003298 <SysTick_Handler+0x3c>)
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
	        SysTickFunction();
 800328c:	f000 f8f4 	bl	8003478 <SysTickFunction>
	      }
  }

  CheckEncoderCounts();
 8003290:	f000 f926 	bl	80034e0 <CheckEncoderCounts>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003294:	bf00      	nop
 8003296:	bd80      	pop	{r7, pc}
 8003298:	2000082a 	.word	0x2000082a
 800329c:	2000050c 	.word	0x2000050c

080032a0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80032a4:	4802      	ldr	r0, [pc, #8]	@ (80032b0 <DMA2_Stream1_IRQHandler+0x10>)
 80032a6:	f001 f951 	bl	800454c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	200004ac 	.word	0x200004ac

080032b4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80032b8:	4802      	ldr	r0, [pc, #8]	@ (80032c4 <USART6_IRQHandler+0x10>)
 80032ba:	f004 fc97 	bl	8007bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000464 	.word	0x20000464

080032c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return 1;
 80032cc:	2301      	movs	r3, #1
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <_kill>:

int _kill(int pid, int sig)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032e2:	f006 f947 	bl	8009574 <__errno>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2216      	movs	r2, #22
 80032ea:	601a      	str	r2, [r3, #0]
  return -1;
 80032ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <_exit>:

void _exit (int status)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003300:	f04f 31ff 	mov.w	r1, #4294967295
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7ff ffe7 	bl	80032d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800330a:	bf00      	nop
 800330c:	e7fd      	b.n	800330a <_exit+0x12>

0800330e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	e00a      	b.n	8003336 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003320:	f3af 8000 	nop.w
 8003324:	4601      	mov	r1, r0
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	60ba      	str	r2, [r7, #8]
 800332c:	b2ca      	uxtb	r2, r1
 800332e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	3301      	adds	r3, #1
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	dbf0      	blt.n	8003320 <_read+0x12>
  }

  return len;
 800333e:	687b      	ldr	r3, [r7, #4]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	e009      	b.n	800336e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	60ba      	str	r2, [r7, #8]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	3301      	adds	r3, #1
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	429a      	cmp	r2, r3
 8003374:	dbf1      	blt.n	800335a <_write+0x12>
  }
  return len;
 8003376:	687b      	ldr	r3, [r7, #4]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <_close>:

int _close(int file)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033a8:	605a      	str	r2, [r3, #4]
  return 0;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <_isatty>:

int _isatty(int file)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033c0:	2301      	movs	r3, #1
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b085      	sub	sp, #20
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033f0:	4a14      	ldr	r2, [pc, #80]	@ (8003444 <_sbrk+0x5c>)
 80033f2:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <_sbrk+0x60>)
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033fc:	4b13      	ldr	r3, [pc, #76]	@ (800344c <_sbrk+0x64>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003404:	4b11      	ldr	r3, [pc, #68]	@ (800344c <_sbrk+0x64>)
 8003406:	4a12      	ldr	r2, [pc, #72]	@ (8003450 <_sbrk+0x68>)
 8003408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800340a:	4b10      	ldr	r3, [pc, #64]	@ (800344c <_sbrk+0x64>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	429a      	cmp	r2, r3
 8003416:	d207      	bcs.n	8003428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003418:	f006 f8ac 	bl	8009574 <__errno>
 800341c:	4603      	mov	r3, r0
 800341e:	220c      	movs	r2, #12
 8003420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003422:	f04f 33ff 	mov.w	r3, #4294967295
 8003426:	e009      	b.n	800343c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003428:	4b08      	ldr	r3, [pc, #32]	@ (800344c <_sbrk+0x64>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800342e:	4b07      	ldr	r3, [pc, #28]	@ (800344c <_sbrk+0x64>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	4a05      	ldr	r2, [pc, #20]	@ (800344c <_sbrk+0x64>)
 8003438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800343a:	68fb      	ldr	r3, [r7, #12]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20020000 	.word	0x20020000
 8003448:	00000400 	.word	0x00000400
 800344c:	2000082c 	.word	0x2000082c
 8003450:	20000d88 	.word	0x20000d88

08003454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003458:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <SystemInit+0x20>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345e:	4a05      	ldr	r2, [pc, #20]	@ (8003474 <SystemInit+0x20>)
 8003460:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003464:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <SysTickFunction>:
extern Motion motion;

extern volatile uint8_t systick_function_enabled;
extern UART_HandleTypeDef huart3;

void SysTickFunction(void) {
 8003478:	b580      	push	{r7, lr}
 800347a:	ed2d 8b02 	vpush	{d8}
 800347e:	af00      	add	r7, sp, #0
	/*
	 * Anything in this function body will be executed every millisecond.
	 * Call you PID update function here.
	 */
	//--------------------------------------------------------------------
		update_Encoder_Data();
 8003480:	f7fe f85e 	bl	8001540 <update_Encoder_Data>
		Motion_Update(&motion);
 8003484:	480d      	ldr	r0, [pc, #52]	@ (80034bc <SysTickFunction+0x44>)
 8003486:	f7fe fddb 	bl	8002040 <Motion_Update>
		//Sensors_Update(&tof_sensors);

		//UpdateControllers(&controller, Motion_Velocity(&motion), Motion_Omega(&motion), get_steering_feedback());
		UpdateControllers(&controller, Motion_Velocity(&motion), Motion_Omega(&motion), 0);
 800348a:	480c      	ldr	r0, [pc, #48]	@ (80034bc <SysTickFunction+0x44>)
 800348c:	f7fe fd9a 	bl	8001fc4 <Motion_Velocity>
 8003490:	eeb0 8a40 	vmov.f32	s16, s0
 8003494:	4809      	ldr	r0, [pc, #36]	@ (80034bc <SysTickFunction+0x44>)
 8003496:	f7fe fda5 	bl	8001fe4 <Motion_Omega>
 800349a:	eef0 7a40 	vmov.f32	s15, s0
 800349e:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 80034c0 <SysTickFunction+0x48>
 80034a2:	eef0 0a67 	vmov.f32	s1, s15
 80034a6:	eeb0 0a48 	vmov.f32	s0, s16
 80034aa:	4806      	ldr	r0, [pc, #24]	@ (80034c4 <SysTickFunction+0x4c>)
 80034ac:	f7fd fe3c 	bl	8001128 <UpdateControllers>
	//--------------------------------------------------------------------
		//UART_Transmit_EncoderData(&huart3);



}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	ecbd 8b02 	vpop	{d8}
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000510 	.word	0x20000510
 80034c0:	00000000 	.word	0x00000000
 80034c4:	200005c4 	.word	0x200005c4

080034c8 <EnableSysTickFunction>:



void EnableSysTickFunction(void) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  //HAL_Delay(10);
  systick_function_enabled = 1;
 80034cc:	4b03      	ldr	r3, [pc, #12]	@ (80034dc <EnableSysTickFunction+0x14>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10);
 80034d2:	200a      	movs	r0, #10
 80034d4:	f000 fb52 	bl	8003b7c <HAL_Delay>
}
 80034d8:	bf00      	nop
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	2000050c 	.word	0x2000050c

080034e0 <CheckEncoderCounts>:
	//HAL_Delay(10);
  systick_function_enabled = 0;
  HAL_Delay(10);
}

void CheckEncoderCounts(void){
 80034e0:	b590      	push	{r4, r7, lr}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
		 * It also maintains the magnitude of the difference between the left and right encoders so that PID will work seamlessly.
		 *
		 * You may have to adjust it in the event you try to traverse more than 31000 encoder counts at once (~9 meters) without
		 * turning. But that'll be approximately never in Micromouse :)
		 */
		if (getRightEncoderCounts() > 31000 || getLeftEncoderCounts() > 31000
 80034e6:	f7fe f803 	bl	80014f0 <getRightEncoderCounts>
 80034ea:	4603      	mov	r3, r0
 80034ec:	461a      	mov	r2, r3
 80034ee:	f647 1318 	movw	r3, #31000	@ 0x7918
 80034f2:	429a      	cmp	r2, r3
 80034f4:	dc15      	bgt.n	8003522 <CheckEncoderCounts+0x42>
 80034f6:	f7fe f807 	bl	8001508 <getLeftEncoderCounts>
 80034fa:	4603      	mov	r3, r0
 80034fc:	461a      	mov	r2, r3
 80034fe:	f647 1318 	movw	r3, #31000	@ 0x7918
 8003502:	429a      	cmp	r2, r3
 8003504:	dc0d      	bgt.n	8003522 <CheckEncoderCounts+0x42>
				|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
 8003506:	f7fd fff3 	bl	80014f0 <getRightEncoderCounts>
 800350a:	4603      	mov	r3, r0
 800350c:	461a      	mov	r2, r3
 800350e:	4b0f      	ldr	r3, [pc, #60]	@ (800354c <CheckEncoderCounts+0x6c>)
 8003510:	429a      	cmp	r2, r3
 8003512:	db06      	blt.n	8003522 <CheckEncoderCounts+0x42>
 8003514:	f7fd fff8 	bl	8001508 <getLeftEncoderCounts>
 8003518:	4603      	mov	r3, r0
 800351a:	461a      	mov	r2, r3
 800351c:	4b0b      	ldr	r3, [pc, #44]	@ (800354c <CheckEncoderCounts+0x6c>)
 800351e:	429a      	cmp	r2, r3
 8003520:	da10      	bge.n	8003544 <CheckEncoderCounts+0x64>
			int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
 8003522:	f7fd ffe5 	bl	80014f0 <getRightEncoderCounts>
 8003526:	4603      	mov	r3, r0
 8003528:	b29c      	uxth	r4, r3
 800352a:	f7fd ffed 	bl	8001508 <getLeftEncoderCounts>
 800352e:	4603      	mov	r3, r0
 8003530:	b29b      	uxth	r3, r3
 8003532:	1ae3      	subs	r3, r4, r3
 8003534:	b29b      	uxth	r3, r3
 8003536:	80fb      	strh	r3, [r7, #6]
			resetEncodersinSystick();
 8003538:	f7fd fff2 	bl	8001520 <resetEncodersinSystick>
			TIM1->CNT = (int16_t) difference;
 800353c:	4a04      	ldr	r2, [pc, #16]	@ (8003550 <CheckEncoderCounts+0x70>)
 800353e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003542:	6253      	str	r3, [r2, #36]	@ 0x24
		}
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bd90      	pop	{r4, r7, pc}
 800354c:	ffff86e8 	.word	0xffff86e8
 8003550:	40010000 	.word	0x40010000

08003554 <UART_Init>:
#include "string.h"
#include "encoders.h"

// UART Initialization function
void UART_Init(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
    // You can customize this function depending on your UART configuration
    // Initialize UART with the desired configuration (baud rate, parity, stop bits, etc.)
    HAL_UART_Init(huart);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f004 faf5 	bl	8007b4c <HAL_UART_Init>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800356c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80035a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003570:	f7ff ff70 	bl	8003454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003574:	480c      	ldr	r0, [pc, #48]	@ (80035a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003576:	490d      	ldr	r1, [pc, #52]	@ (80035ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003578:	4a0d      	ldr	r2, [pc, #52]	@ (80035b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800357a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800357c:	e002      	b.n	8003584 <LoopCopyDataInit>

0800357e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800357e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003582:	3304      	adds	r3, #4

08003584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003588:	d3f9      	bcc.n	800357e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800358a:	4a0a      	ldr	r2, [pc, #40]	@ (80035b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800358c:	4c0a      	ldr	r4, [pc, #40]	@ (80035b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800358e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003590:	e001      	b.n	8003596 <LoopFillZerobss>

08003592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003594:	3204      	adds	r2, #4

08003596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003598:	d3fb      	bcc.n	8003592 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800359a:	f005 fff1 	bl	8009580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800359e:	f7fe f889 	bl	80016b4 <main>
  bx  lr    
 80035a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035ac:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80035b0:	0800be7c 	.word	0x0800be7c
  ldr r2, =_sbss
 80035b4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80035b8:	20000d88 	.word	0x20000d88

080035bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035bc:	e7fe      	b.n	80035bc <ADC_IRQHandler>
	...

080035c0 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80035c6:	f000 f9cd 	bl	8003964 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80035ca:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80035ce:	2201      	movs	r2, #1
 80035d0:	2178      	movs	r1, #120	@ 0x78
 80035d2:	485b      	ldr	r0, [pc, #364]	@ (8003740 <SSD1306_Init+0x180>)
 80035d4:	f002 f912 	bl	80057fc <HAL_I2C_IsDeviceReady>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	e0a9      	b.n	8003736 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80035e2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80035e6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80035e8:	e002      	b.n	80035f0 <SSD1306_Init+0x30>
		p--;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	607b      	str	r3, [r7, #4]
	while(p>0)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f9      	bne.n	80035ea <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80035f6:	22ae      	movs	r2, #174	@ 0xae
 80035f8:	2100      	movs	r1, #0
 80035fa:	2078      	movs	r0, #120	@ 0x78
 80035fc:	f000 fa2e 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8003600:	2220      	movs	r2, #32
 8003602:	2100      	movs	r1, #0
 8003604:	2078      	movs	r0, #120	@ 0x78
 8003606:	f000 fa29 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800360a:	2210      	movs	r2, #16
 800360c:	2100      	movs	r1, #0
 800360e:	2078      	movs	r0, #120	@ 0x78
 8003610:	f000 fa24 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003614:	22b0      	movs	r2, #176	@ 0xb0
 8003616:	2100      	movs	r1, #0
 8003618:	2078      	movs	r0, #120	@ 0x78
 800361a:	f000 fa1f 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800361e:	22c8      	movs	r2, #200	@ 0xc8
 8003620:	2100      	movs	r1, #0
 8003622:	2078      	movs	r0, #120	@ 0x78
 8003624:	f000 fa1a 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003628:	2200      	movs	r2, #0
 800362a:	2100      	movs	r1, #0
 800362c:	2078      	movs	r0, #120	@ 0x78
 800362e:	f000 fa15 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003632:	2210      	movs	r2, #16
 8003634:	2100      	movs	r1, #0
 8003636:	2078      	movs	r0, #120	@ 0x78
 8003638:	f000 fa10 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800363c:	2240      	movs	r2, #64	@ 0x40
 800363e:	2100      	movs	r1, #0
 8003640:	2078      	movs	r0, #120	@ 0x78
 8003642:	f000 fa0b 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003646:	2281      	movs	r2, #129	@ 0x81
 8003648:	2100      	movs	r1, #0
 800364a:	2078      	movs	r0, #120	@ 0x78
 800364c:	f000 fa06 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003650:	22ff      	movs	r2, #255	@ 0xff
 8003652:	2100      	movs	r1, #0
 8003654:	2078      	movs	r0, #120	@ 0x78
 8003656:	f000 fa01 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800365a:	22a1      	movs	r2, #161	@ 0xa1
 800365c:	2100      	movs	r1, #0
 800365e:	2078      	movs	r0, #120	@ 0x78
 8003660:	f000 f9fc 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003664:	22a6      	movs	r2, #166	@ 0xa6
 8003666:	2100      	movs	r1, #0
 8003668:	2078      	movs	r0, #120	@ 0x78
 800366a:	f000 f9f7 	bl	8003a5c <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800366e:	22a8      	movs	r2, #168	@ 0xa8
 8003670:	2100      	movs	r1, #0
 8003672:	2078      	movs	r0, #120	@ 0x78
 8003674:	f000 f9f2 	bl	8003a5c <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8003678:	223f      	movs	r2, #63	@ 0x3f
 800367a:	2100      	movs	r1, #0
 800367c:	2078      	movs	r0, #120	@ 0x78
 800367e:	f000 f9ed 	bl	8003a5c <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003682:	22a4      	movs	r2, #164	@ 0xa4
 8003684:	2100      	movs	r1, #0
 8003686:	2078      	movs	r0, #120	@ 0x78
 8003688:	f000 f9e8 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800368c:	22d3      	movs	r2, #211	@ 0xd3
 800368e:	2100      	movs	r1, #0
 8003690:	2078      	movs	r0, #120	@ 0x78
 8003692:	f000 f9e3 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003696:	2200      	movs	r2, #0
 8003698:	2100      	movs	r1, #0
 800369a:	2078      	movs	r0, #120	@ 0x78
 800369c:	f000 f9de 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80036a0:	22d5      	movs	r2, #213	@ 0xd5
 80036a2:	2100      	movs	r1, #0
 80036a4:	2078      	movs	r0, #120	@ 0x78
 80036a6:	f000 f9d9 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80036aa:	22f0      	movs	r2, #240	@ 0xf0
 80036ac:	2100      	movs	r1, #0
 80036ae:	2078      	movs	r0, #120	@ 0x78
 80036b0:	f000 f9d4 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80036b4:	22d9      	movs	r2, #217	@ 0xd9
 80036b6:	2100      	movs	r1, #0
 80036b8:	2078      	movs	r0, #120	@ 0x78
 80036ba:	f000 f9cf 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80036be:	2222      	movs	r2, #34	@ 0x22
 80036c0:	2100      	movs	r1, #0
 80036c2:	2078      	movs	r0, #120	@ 0x78
 80036c4:	f000 f9ca 	bl	8003a5c <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80036c8:	22da      	movs	r2, #218	@ 0xda
 80036ca:	2100      	movs	r1, #0
 80036cc:	2078      	movs	r0, #120	@ 0x78
 80036ce:	f000 f9c5 	bl	8003a5c <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 80036d2:	2212      	movs	r2, #18
 80036d4:	2100      	movs	r1, #0
 80036d6:	2078      	movs	r0, #120	@ 0x78
 80036d8:	f000 f9c0 	bl	8003a5c <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80036dc:	22db      	movs	r2, #219	@ 0xdb
 80036de:	2100      	movs	r1, #0
 80036e0:	2078      	movs	r0, #120	@ 0x78
 80036e2:	f000 f9bb 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80036e6:	2220      	movs	r2, #32
 80036e8:	2100      	movs	r1, #0
 80036ea:	2078      	movs	r0, #120	@ 0x78
 80036ec:	f000 f9b6 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80036f0:	228d      	movs	r2, #141	@ 0x8d
 80036f2:	2100      	movs	r1, #0
 80036f4:	2078      	movs	r0, #120	@ 0x78
 80036f6:	f000 f9b1 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80036fa:	2214      	movs	r2, #20
 80036fc:	2100      	movs	r1, #0
 80036fe:	2078      	movs	r0, #120	@ 0x78
 8003700:	f000 f9ac 	bl	8003a5c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003704:	22af      	movs	r2, #175	@ 0xaf
 8003706:	2100      	movs	r1, #0
 8003708:	2078      	movs	r0, #120	@ 0x78
 800370a:	f000 f9a7 	bl	8003a5c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800370e:	222e      	movs	r2, #46	@ 0x2e
 8003710:	2100      	movs	r1, #0
 8003712:	2078      	movs	r0, #120	@ 0x78
 8003714:	f000 f9a2 	bl	8003a5c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003718:	2000      	movs	r0, #0
 800371a:	f000 f843 	bl	80037a4 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800371e:	f000 f813 	bl	8003748 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8003722:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <SSD1306_Init+0x184>)
 8003724:	2200      	movs	r2, #0
 8003726:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003728:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <SSD1306_Init+0x184>)
 800372a:	2200      	movs	r2, #0
 800372c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800372e:	4b05      	ldr	r3, [pc, #20]	@ (8003744 <SSD1306_Init+0x184>)
 8003730:	2201      	movs	r2, #1
 8003732:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8003734:	2301      	movs	r3, #1
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000254 	.word	0x20000254
 8003744:	20000c30 	.word	0x20000c30

08003748 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800374e:	2300      	movs	r3, #0
 8003750:	71fb      	strb	r3, [r7, #7]
 8003752:	e01d      	b.n	8003790 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	3b50      	subs	r3, #80	@ 0x50
 8003758:	b2db      	uxtb	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	2100      	movs	r1, #0
 800375e:	2078      	movs	r0, #120	@ 0x78
 8003760:	f000 f97c 	bl	8003a5c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003764:	2200      	movs	r2, #0
 8003766:	2100      	movs	r1, #0
 8003768:	2078      	movs	r0, #120	@ 0x78
 800376a:	f000 f977 	bl	8003a5c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800376e:	2210      	movs	r2, #16
 8003770:	2100      	movs	r1, #0
 8003772:	2078      	movs	r0, #120	@ 0x78
 8003774:	f000 f972 	bl	8003a5c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	01db      	lsls	r3, r3, #7
 800377c:	4a08      	ldr	r2, [pc, #32]	@ (80037a0 <SSD1306_UpdateScreen+0x58>)
 800377e:	441a      	add	r2, r3
 8003780:	2380      	movs	r3, #128	@ 0x80
 8003782:	2140      	movs	r1, #64	@ 0x40
 8003784:	2078      	movs	r0, #120	@ 0x78
 8003786:	f000 f903 	bl	8003990 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	3301      	adds	r3, #1
 800378e:	71fb      	strb	r3, [r7, #7]
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	2b07      	cmp	r3, #7
 8003794:	d9de      	bls.n	8003754 <SSD1306_UpdateScreen+0xc>
	}
}
 8003796:	bf00      	nop
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20000830 	.word	0x20000830

080037a4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <SSD1306_Fill+0x14>
 80037b4:	2300      	movs	r3, #0
 80037b6:	e000      	b.n	80037ba <SSD1306_Fill+0x16>
 80037b8:	23ff      	movs	r3, #255	@ 0xff
 80037ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037be:	4619      	mov	r1, r3
 80037c0:	4803      	ldr	r0, [pc, #12]	@ (80037d0 <SSD1306_Fill+0x2c>)
 80037c2:	f005 fe72 	bl	80094aa <memset>
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000830 	.word	0x20000830

080037d4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	80fb      	strh	r3, [r7, #6]
 80037de:	460b      	mov	r3, r1
 80037e0:	80bb      	strh	r3, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	70fb      	strb	r3, [r7, #3]
	if (
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80037ea:	d848      	bhi.n	800387e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80037ec:	88bb      	ldrh	r3, [r7, #4]
 80037ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80037f0:	d845      	bhi.n	800387e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80037f2:	4b26      	ldr	r3, [pc, #152]	@ (800388c <SSD1306_DrawPixel+0xb8>)
 80037f4:	791b      	ldrb	r3, [r3, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d006      	beq.n	8003808 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d11a      	bne.n	8003844 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800380e:	88fa      	ldrh	r2, [r7, #6]
 8003810:	88bb      	ldrh	r3, [r7, #4]
 8003812:	08db      	lsrs	r3, r3, #3
 8003814:	b298      	uxth	r0, r3
 8003816:	4603      	mov	r3, r0
 8003818:	01db      	lsls	r3, r3, #7
 800381a:	4413      	add	r3, r2
 800381c:	4a1c      	ldr	r2, [pc, #112]	@ (8003890 <SSD1306_DrawPixel+0xbc>)
 800381e:	5cd3      	ldrb	r3, [r2, r3]
 8003820:	b25a      	sxtb	r2, r3
 8003822:	88bb      	ldrh	r3, [r7, #4]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	2101      	movs	r1, #1
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	b25b      	sxtb	r3, r3
 8003830:	4313      	orrs	r3, r2
 8003832:	b259      	sxtb	r1, r3
 8003834:	88fa      	ldrh	r2, [r7, #6]
 8003836:	4603      	mov	r3, r0
 8003838:	01db      	lsls	r3, r3, #7
 800383a:	4413      	add	r3, r2
 800383c:	b2c9      	uxtb	r1, r1
 800383e:	4a14      	ldr	r2, [pc, #80]	@ (8003890 <SSD1306_DrawPixel+0xbc>)
 8003840:	54d1      	strb	r1, [r2, r3]
 8003842:	e01d      	b.n	8003880 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003844:	88fa      	ldrh	r2, [r7, #6]
 8003846:	88bb      	ldrh	r3, [r7, #4]
 8003848:	08db      	lsrs	r3, r3, #3
 800384a:	b298      	uxth	r0, r3
 800384c:	4603      	mov	r3, r0
 800384e:	01db      	lsls	r3, r3, #7
 8003850:	4413      	add	r3, r2
 8003852:	4a0f      	ldr	r2, [pc, #60]	@ (8003890 <SSD1306_DrawPixel+0xbc>)
 8003854:	5cd3      	ldrb	r3, [r2, r3]
 8003856:	b25a      	sxtb	r2, r3
 8003858:	88bb      	ldrh	r3, [r7, #4]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	2101      	movs	r1, #1
 8003860:	fa01 f303 	lsl.w	r3, r1, r3
 8003864:	b25b      	sxtb	r3, r3
 8003866:	43db      	mvns	r3, r3
 8003868:	b25b      	sxtb	r3, r3
 800386a:	4013      	ands	r3, r2
 800386c:	b259      	sxtb	r1, r3
 800386e:	88fa      	ldrh	r2, [r7, #6]
 8003870:	4603      	mov	r3, r0
 8003872:	01db      	lsls	r3, r3, #7
 8003874:	4413      	add	r3, r2
 8003876:	b2c9      	uxtb	r1, r1
 8003878:	4a05      	ldr	r2, [pc, #20]	@ (8003890 <SSD1306_DrawPixel+0xbc>)
 800387a:	54d1      	strb	r1, [r2, r3]
 800387c:	e000      	b.n	8003880 <SSD1306_DrawPixel+0xac>
		return;
 800387e:	bf00      	nop
	}
}
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000c30 	.word	0x20000c30
 8003890:	20000830 	.word	0x20000830

08003894 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	60ba      	str	r2, [r7, #8]
 800389c:	461a      	mov	r2, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	81fb      	strh	r3, [r7, #14]
 80038a2:	460b      	mov	r3, r1
 80038a4:	81bb      	strh	r3, [r7, #12]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80038aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038ae:	3307      	adds	r3, #7
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	da00      	bge.n	80038b6 <SSD1306_DrawBitmap+0x22>
 80038b4:	3307      	adds	r3, #7
 80038b6:	10db      	asrs	r3, r3, #3
 80038b8:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80038be:	2300      	movs	r3, #0
 80038c0:	82bb      	strh	r3, [r7, #20]
 80038c2:	e044      	b.n	800394e <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80038c4:	2300      	movs	r3, #0
 80038c6:	827b      	strh	r3, [r7, #18]
 80038c8:	e02f      	b.n	800392a <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80038ca:	8a7b      	ldrh	r3, [r7, #18]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	75fb      	strb	r3, [r7, #23]
 80038da:	e012      	b.n	8003902 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80038dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038e0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80038e4:	fb03 f202 	mul.w	r2, r3, r2
 80038e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	da00      	bge.n	80038f2 <SSD1306_DrawBitmap+0x5e>
 80038f0:	3307      	adds	r3, #7
 80038f2:	10db      	asrs	r3, r3, #3
 80038f4:	b21b      	sxth	r3, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	461a      	mov	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4413      	add	r3, r2
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8003902:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003906:	2b00      	cmp	r3, #0
 8003908:	da09      	bge.n	800391e <SSD1306_DrawBitmap+0x8a>
 800390a:	89fa      	ldrh	r2, [r7, #14]
 800390c:	8a7b      	ldrh	r3, [r7, #18]
 800390e:	4413      	add	r3, r2
 8003910:	b29b      	uxth	r3, r3
 8003912:	89b9      	ldrh	r1, [r7, #12]
 8003914:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff ff5b 	bl	80037d4 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800391e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003922:	b29b      	uxth	r3, r3
 8003924:	3301      	adds	r3, #1
 8003926:	b29b      	uxth	r3, r3
 8003928:	827b      	strh	r3, [r7, #18]
 800392a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800392e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003932:	429a      	cmp	r2, r3
 8003934:	dbc9      	blt.n	80038ca <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8003936:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800393a:	b29b      	uxth	r3, r3
 800393c:	3301      	adds	r3, #1
 800393e:	b29b      	uxth	r3, r3
 8003940:	82bb      	strh	r3, [r7, #20]
 8003942:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003946:	b29b      	uxth	r3, r3
 8003948:	3301      	adds	r3, #1
 800394a:	b29b      	uxth	r3, r3
 800394c:	81bb      	strh	r3, [r7, #12]
 800394e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003952:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003956:	429a      	cmp	r2, r3
 8003958:	dbb4      	blt.n	80038c4 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800395a:	bf00      	nop
 800395c:	bf00      	nop
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800396a:	4b08      	ldr	r3, [pc, #32]	@ (800398c <ssd1306_I2C_Init+0x28>)
 800396c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800396e:	e002      	b.n	8003976 <ssd1306_I2C_Init+0x12>
		p--;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3b01      	subs	r3, #1
 8003974:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f9      	bne.n	8003970 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	0003d090 	.word	0x0003d090

08003990 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b0c7      	sub	sp, #284	@ 0x11c
 8003994:	af02      	add	r7, sp, #8
 8003996:	4604      	mov	r4, r0
 8003998:	4608      	mov	r0, r1
 800399a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800399e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80039a2:	600a      	str	r2, [r1, #0]
 80039a4:	4619      	mov	r1, r3
 80039a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80039aa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80039ae:	4622      	mov	r2, r4
 80039b0:	701a      	strb	r2, [r3, #0]
 80039b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80039b6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80039ba:	4602      	mov	r2, r0
 80039bc:	701a      	strb	r2, [r3, #0]
 80039be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80039c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80039c6:	460a      	mov	r2, r1
 80039c8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80039ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80039ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80039d2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80039d6:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80039da:	7812      	ldrb	r2, [r2, #0]
 80039dc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80039de:	2300      	movs	r3, #0
 80039e0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80039e4:	e015      	b.n	8003a12 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80039e6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80039ea:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80039ee:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	441a      	add	r2, r3
 80039f6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80039fa:	3301      	adds	r3, #1
 80039fc:	7811      	ldrb	r1, [r2, #0]
 80039fe:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003a02:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8003a06:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003a08:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8003a12:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003a1c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8003a20:	8812      	ldrh	r2, [r2, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d8df      	bhi.n	80039e6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8003a26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a2a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	b299      	uxth	r1, r3
 8003a32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	f107 020c 	add.w	r2, r7, #12
 8003a44:	200a      	movs	r0, #10
 8003a46:	9000      	str	r0, [sp, #0]
 8003a48:	4803      	ldr	r0, [pc, #12]	@ (8003a58 <ssd1306_I2C_WriteMulti+0xc8>)
 8003a4a:	f001 faad 	bl	8004fa8 <HAL_I2C_Master_Transmit>
}
 8003a4e:	bf00      	nop
 8003a50:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd90      	pop	{r4, r7, pc}
 8003a58:	20000254 	.word	0x20000254

08003a5c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	4603      	mov	r3, r0
 8003a64:	71fb      	strb	r3, [r7, #7]
 8003a66:	460b      	mov	r3, r1
 8003a68:	71bb      	strb	r3, [r7, #6]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003a6e:	79bb      	ldrb	r3, [r7, #6]
 8003a70:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003a72:	797b      	ldrb	r3, [r7, #5]
 8003a74:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	b299      	uxth	r1, r3
 8003a7a:	f107 020c 	add.w	r2, r7, #12
 8003a7e:	230a      	movs	r3, #10
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	2302      	movs	r3, #2
 8003a84:	4803      	ldr	r0, [pc, #12]	@ (8003a94 <ssd1306_I2C_Write+0x38>)
 8003a86:	f001 fa8f 	bl	8004fa8 <HAL_I2C_Master_Transmit>
}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000254 	.word	0x20000254

08003a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad8 <HAL_Init+0x40>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ad8 <HAL_Init+0x40>)
 8003aa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <HAL_Init+0x40>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad8 <HAL_Init+0x40>)
 8003aae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ab4:	4b08      	ldr	r3, [pc, #32]	@ (8003ad8 <HAL_Init+0x40>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a07      	ldr	r2, [pc, #28]	@ (8003ad8 <HAL_Init+0x40>)
 8003aba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ac0:	2003      	movs	r0, #3
 8003ac2:	f000 fbc1 	bl	8004248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f000 f808 	bl	8003adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003acc:	f7ff f8b0 	bl	8002c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40023c00 	.word	0x40023c00

08003adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ae4:	4b12      	ldr	r3, [pc, #72]	@ (8003b30 <HAL_InitTick+0x54>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	4b12      	ldr	r3, [pc, #72]	@ (8003b34 <HAL_InitTick+0x58>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	4619      	mov	r1, r3
 8003aee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fbd9 	bl	80042b2 <HAL_SYSTICK_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e00e      	b.n	8003b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b0f      	cmp	r3, #15
 8003b0e:	d80a      	bhi.n	8003b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b10:	2200      	movs	r2, #0
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	f04f 30ff 	mov.w	r0, #4294967295
 8003b18:	f000 fba1 	bl	800425e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b1c:	4a06      	ldr	r2, [pc, #24]	@ (8003b38 <HAL_InitTick+0x5c>)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	e000      	b.n	8003b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000000 	.word	0x20000000
 8003b34:	20000008 	.word	0x20000008
 8003b38:	20000004 	.word	0x20000004

08003b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b40:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <HAL_IncTick+0x20>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <HAL_IncTick+0x24>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	4a04      	ldr	r2, [pc, #16]	@ (8003b60 <HAL_IncTick+0x24>)
 8003b4e:	6013      	str	r3, [r2, #0]
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000008 	.word	0x20000008
 8003b60:	20000c38 	.word	0x20000c38

08003b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return uwTick;
 8003b68:	4b03      	ldr	r3, [pc, #12]	@ (8003b78 <HAL_GetTick+0x14>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000c38 	.word	0x20000c38

08003b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b84:	f7ff ffee 	bl	8003b64 <HAL_GetTick>
 8003b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b94:	d005      	beq.n	8003ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b96:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <HAL_Delay+0x44>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ba2:	bf00      	nop
 8003ba4:	f7ff ffde 	bl	8003b64 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d8f7      	bhi.n	8003ba4 <HAL_Delay+0x28>
  {
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000008 	.word	0x20000008

08003bc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e033      	b.n	8003c42 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff f84c 	bl	8002c80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d118      	bne.n	8003c34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c0a:	f023 0302 	bic.w	r3, r3, #2
 8003c0e:	f043 0202 	orr.w	r2, r3, #2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f94a 	bl	8003eb0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	f023 0303 	bic.w	r3, r3, #3
 8003c2a:	f043 0201 	orr.w	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c32:	e001      	b.n	8003c38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x1c>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e113      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x244>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b09      	cmp	r3, #9
 8003c76:	d925      	bls.n	8003cc4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68d9      	ldr	r1, [r3, #12]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	4613      	mov	r3, r2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3b1e      	subs	r3, #30
 8003c8e:	2207      	movs	r2, #7
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43da      	mvns	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68d9      	ldr	r1, [r3, #12]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	4618      	mov	r0, r3
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	4403      	add	r3, r0
 8003cb6:	3b1e      	subs	r3, #30
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	e022      	b.n	8003d0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6919      	ldr	r1, [r3, #16]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	4413      	add	r3, r2
 8003cd8:	2207      	movs	r2, #7
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6919      	ldr	r1, [r3, #16]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	4403      	add	r3, r0
 8003d00:	409a      	lsls	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b06      	cmp	r3, #6
 8003d10:	d824      	bhi.n	8003d5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	3b05      	subs	r3, #5
 8003d24:	221f      	movs	r2, #31
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43da      	mvns	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	400a      	ands	r2, r1
 8003d32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	4618      	mov	r0, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3b05      	subs	r3, #5
 8003d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d5a:	e04c      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	d824      	bhi.n	8003dae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	3b23      	subs	r3, #35	@ 0x23
 8003d76:	221f      	movs	r2, #31
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43da      	mvns	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	400a      	ands	r2, r1
 8003d84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	4618      	mov	r0, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3b23      	subs	r3, #35	@ 0x23
 8003da0:	fa00 f203 	lsl.w	r2, r0, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30
 8003dac:	e023      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3b41      	subs	r3, #65	@ 0x41
 8003dc0:	221f      	movs	r2, #31
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	400a      	ands	r2, r1
 8003dce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	4618      	mov	r0, r3
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	3b41      	subs	r3, #65	@ 0x41
 8003dea:	fa00 f203 	lsl.w	r2, r0, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003df6:	4b29      	ldr	r3, [pc, #164]	@ (8003e9c <HAL_ADC_ConfigChannel+0x250>)
 8003df8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a28      	ldr	r2, [pc, #160]	@ (8003ea0 <HAL_ADC_ConfigChannel+0x254>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d10f      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x1d8>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b12      	cmp	r3, #18
 8003e0a:	d10b      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea0 <HAL_ADC_ConfigChannel+0x254>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d12b      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x23a>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1c      	ldr	r2, [pc, #112]	@ (8003ea4 <HAL_ADC_ConfigChannel+0x258>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d003      	beq.n	8003e40 <HAL_ADC_ConfigChannel+0x1f4>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b11      	cmp	r3, #17
 8003e3e:	d122      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a11      	ldr	r2, [pc, #68]	@ (8003ea4 <HAL_ADC_ConfigChannel+0x258>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d111      	bne.n	8003e86 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e62:	4b11      	ldr	r3, [pc, #68]	@ (8003ea8 <HAL_ADC_ConfigChannel+0x25c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a11      	ldr	r2, [pc, #68]	@ (8003eac <HAL_ADC_ConfigChannel+0x260>)
 8003e68:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6c:	0c9a      	lsrs	r2, r3, #18
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e78:	e002      	b.n	8003e80 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f9      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	40012300 	.word	0x40012300
 8003ea0:	40012000 	.word	0x40012000
 8003ea4:	10000012 	.word	0x10000012
 8003ea8:	20000000 	.word	0x20000000
 8003eac:	431bde83 	.word	0x431bde83

08003eb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003eb8:	4b79      	ldr	r3, [pc, #484]	@ (80040a0 <ADC_Init+0x1f0>)
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ee4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	021a      	lsls	r2, r3, #8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003f08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6899      	ldr	r1, [r3, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f42:	4a58      	ldr	r2, [pc, #352]	@ (80040a4 <ADC_Init+0x1f4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d022      	beq.n	8003f8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6899      	ldr	r1, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003f78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6899      	ldr	r1, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	e00f      	b.n	8003fae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003fac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0202 	bic.w	r2, r2, #2
 8003fbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6899      	ldr	r1, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	7e1b      	ldrb	r3, [r3, #24]
 8003fc8:	005a      	lsls	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01b      	beq.n	8004014 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003ffa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	3b01      	subs	r3, #1
 8004008:	035a      	lsls	r2, r3, #13
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	e007      	b.n	8004024 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004022:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004032:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	3b01      	subs	r3, #1
 8004040:	051a      	lsls	r2, r3, #20
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6899      	ldr	r1, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004066:	025a      	lsls	r2, r3, #9
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800407e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6899      	ldr	r1, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	029a      	lsls	r2, r3, #10
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	609a      	str	r2, [r3, #8]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40012300 	.word	0x40012300
 80040a4:	0f000001 	.word	0x0f000001

080040a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040b8:	4b0c      	ldr	r3, [pc, #48]	@ (80040ec <__NVIC_SetPriorityGrouping+0x44>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040c4:	4013      	ands	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040da:	4a04      	ldr	r2, [pc, #16]	@ (80040ec <__NVIC_SetPriorityGrouping+0x44>)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	60d3      	str	r3, [r2, #12]
}
 80040e0:	bf00      	nop
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	e000ed00 	.word	0xe000ed00

080040f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040f4:	4b04      	ldr	r3, [pc, #16]	@ (8004108 <__NVIC_GetPriorityGrouping+0x18>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	0a1b      	lsrs	r3, r3, #8
 80040fa:	f003 0307 	and.w	r3, r3, #7
}
 80040fe:	4618      	mov	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411a:	2b00      	cmp	r3, #0
 800411c:	db0b      	blt.n	8004136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	f003 021f 	and.w	r2, r3, #31
 8004124:	4907      	ldr	r1, [pc, #28]	@ (8004144 <__NVIC_EnableIRQ+0x38>)
 8004126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	2001      	movs	r0, #1
 800412e:	fa00 f202 	lsl.w	r2, r0, r2
 8004132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	e000e100 	.word	0xe000e100

08004148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	6039      	str	r1, [r7, #0]
 8004152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004158:	2b00      	cmp	r3, #0
 800415a:	db0a      	blt.n	8004172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	490c      	ldr	r1, [pc, #48]	@ (8004194 <__NVIC_SetPriority+0x4c>)
 8004162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004166:	0112      	lsls	r2, r2, #4
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	440b      	add	r3, r1
 800416c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004170:	e00a      	b.n	8004188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4908      	ldr	r1, [pc, #32]	@ (8004198 <__NVIC_SetPriority+0x50>)
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	3b04      	subs	r3, #4
 8004180:	0112      	lsls	r2, r2, #4
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	440b      	add	r3, r1
 8004186:	761a      	strb	r2, [r3, #24]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000e100 	.word	0xe000e100
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800419c:	b480      	push	{r7}
 800419e:	b089      	sub	sp, #36	@ 0x24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f1c3 0307 	rsb	r3, r3, #7
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	bf28      	it	cs
 80041ba:	2304      	movcs	r3, #4
 80041bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	3304      	adds	r3, #4
 80041c2:	2b06      	cmp	r3, #6
 80041c4:	d902      	bls.n	80041cc <NVIC_EncodePriority+0x30>
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3b03      	subs	r3, #3
 80041ca:	e000      	b.n	80041ce <NVIC_EncodePriority+0x32>
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d0:	f04f 32ff 	mov.w	r2, #4294967295
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43da      	mvns	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	401a      	ands	r2, r3
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041e4:	f04f 31ff 	mov.w	r1, #4294967295
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	fa01 f303 	lsl.w	r3, r1, r3
 80041ee:	43d9      	mvns	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f4:	4313      	orrs	r3, r2
         );
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3724      	adds	r7, #36	@ 0x24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3b01      	subs	r3, #1
 8004210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004214:	d301      	bcc.n	800421a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004216:	2301      	movs	r3, #1
 8004218:	e00f      	b.n	800423a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800421a:	4a0a      	ldr	r2, [pc, #40]	@ (8004244 <SysTick_Config+0x40>)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3b01      	subs	r3, #1
 8004220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004222:	210f      	movs	r1, #15
 8004224:	f04f 30ff 	mov.w	r0, #4294967295
 8004228:	f7ff ff8e 	bl	8004148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800422c:	4b05      	ldr	r3, [pc, #20]	@ (8004244 <SysTick_Config+0x40>)
 800422e:	2200      	movs	r2, #0
 8004230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004232:	4b04      	ldr	r3, [pc, #16]	@ (8004244 <SysTick_Config+0x40>)
 8004234:	2207      	movs	r2, #7
 8004236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	e000e010 	.word	0xe000e010

08004248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ff29 	bl	80040a8 <__NVIC_SetPriorityGrouping>
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800425e:	b580      	push	{r7, lr}
 8004260:	b086      	sub	sp, #24
 8004262:	af00      	add	r7, sp, #0
 8004264:	4603      	mov	r3, r0
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004270:	f7ff ff3e 	bl	80040f0 <__NVIC_GetPriorityGrouping>
 8004274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	6978      	ldr	r0, [r7, #20]
 800427c:	f7ff ff8e 	bl	800419c <NVIC_EncodePriority>
 8004280:	4602      	mov	r2, r0
 8004282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004286:	4611      	mov	r1, r2
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff ff5d 	bl	8004148 <__NVIC_SetPriority>
}
 800428e:	bf00      	nop
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	4603      	mov	r3, r0
 800429e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff31 	bl	800410c <__NVIC_EnableIRQ>
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff ffa2 	bl	8004204 <SysTick_Config>
 80042c0:	4603      	mov	r3, r0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042d8:	f7ff fc44 	bl	8003b64 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e099      	b.n	800441c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0201 	bic.w	r2, r2, #1
 8004306:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004308:	e00f      	b.n	800432a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800430a:	f7ff fc2b 	bl	8003b64 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b05      	cmp	r3, #5
 8004316:	d908      	bls.n	800432a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2203      	movs	r2, #3
 8004322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e078      	b.n	800441c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e8      	bne.n	800430a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4b38      	ldr	r3, [pc, #224]	@ (8004424 <HAL_DMA_Init+0x158>)
 8004344:	4013      	ands	r3, r2
 8004346:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004356:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004362:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800436e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	2b04      	cmp	r3, #4
 8004382:	d107      	bne.n	8004394 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	4313      	orrs	r3, r2
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f023 0307 	bic.w	r3, r3, #7
 80043aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d117      	bne.n	80043ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00e      	beq.n	80043ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 fa7b 	bl	80048cc <DMA_CheckFifoParam>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2240      	movs	r2, #64	@ 0x40
 80043e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80043ea:	2301      	movs	r3, #1
 80043ec:	e016      	b.n	800441c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fa32 	bl	8004860 <DMA_CalcBaseAndBitshift>
 80043fc:	4603      	mov	r3, r0
 80043fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004404:	223f      	movs	r2, #63	@ 0x3f
 8004406:	409a      	lsls	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	f010803f 	.word	0xf010803f

08004428 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004434:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004436:	f7ff fb95 	bl	8003b64 <HAL_GetTick>
 800443a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d008      	beq.n	800445a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2280      	movs	r2, #128	@ 0x80
 800444c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e052      	b.n	8004500 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 0216 	bic.w	r2, r2, #22
 8004468:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695a      	ldr	r2, [r3, #20]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004478:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d103      	bne.n	800448a <HAL_DMA_Abort+0x62>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004486:	2b00      	cmp	r3, #0
 8004488:	d007      	beq.n	800449a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0208 	bic.w	r2, r2, #8
 8004498:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0201 	bic.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044aa:	e013      	b.n	80044d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044ac:	f7ff fb5a 	bl	8003b64 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b05      	cmp	r3, #5
 80044b8:	d90c      	bls.n	80044d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2203      	movs	r2, #3
 80044c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e015      	b.n	8004500 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e4      	bne.n	80044ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044e6:	223f      	movs	r2, #63	@ 0x3f
 80044e8:	409a      	lsls	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d004      	beq.n	8004526 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2280      	movs	r2, #128	@ 0x80
 8004520:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e00c      	b.n	8004540 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2205      	movs	r2, #5
 800452a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0201 	bic.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004558:	4b8e      	ldr	r3, [pc, #568]	@ (8004794 <HAL_DMA_IRQHandler+0x248>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a8e      	ldr	r2, [pc, #568]	@ (8004798 <HAL_DMA_IRQHandler+0x24c>)
 800455e:	fba2 2303 	umull	r2, r3, r2, r3
 8004562:	0a9b      	lsrs	r3, r3, #10
 8004564:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004576:	2208      	movs	r2, #8
 8004578:	409a      	lsls	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d01a      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d013      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0204 	bic.w	r2, r2, #4
 800459e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a4:	2208      	movs	r2, #8
 80045a6:	409a      	lsls	r2, r3
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b0:	f043 0201 	orr.w	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045bc:	2201      	movs	r2, #1
 80045be:	409a      	lsls	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d012      	beq.n	80045ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045da:	2201      	movs	r2, #1
 80045dc:	409a      	lsls	r2, r3
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e6:	f043 0202 	orr.w	r2, r3, #2
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f2:	2204      	movs	r2, #4
 80045f4:	409a      	lsls	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4013      	ands	r3, r2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d012      	beq.n	8004624 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00b      	beq.n	8004624 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004610:	2204      	movs	r2, #4
 8004612:	409a      	lsls	r2, r3
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461c:	f043 0204 	orr.w	r2, r3, #4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004628:	2210      	movs	r2, #16
 800462a:	409a      	lsls	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d043      	beq.n	80046bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d03c      	beq.n	80046bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004646:	2210      	movs	r2, #16
 8004648:	409a      	lsls	r2, r3
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d018      	beq.n	800468e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d108      	bne.n	800467c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d024      	beq.n	80046bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
 800467a:	e01f      	b.n	80046bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	4798      	blx	r3
 800468c:	e016      	b.n	80046bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d107      	bne.n	80046ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0208 	bic.w	r2, r2, #8
 80046aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c0:	2220      	movs	r2, #32
 80046c2:	409a      	lsls	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 808f 	beq.w	80047ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 8087 	beq.w	80047ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e2:	2220      	movs	r2, #32
 80046e4:	409a      	lsls	r2, r3
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d136      	bne.n	8004764 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0216 	bic.w	r2, r2, #22
 8004704:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004714:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d103      	bne.n	8004726 <HAL_DMA_IRQHandler+0x1da>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0208 	bic.w	r2, r2, #8
 8004734:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473a:	223f      	movs	r2, #63	@ 0x3f
 800473c:	409a      	lsls	r2, r3
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004756:	2b00      	cmp	r3, #0
 8004758:	d07e      	beq.n	8004858 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	4798      	blx	r3
        }
        return;
 8004762:	e079      	b.n	8004858 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d01d      	beq.n	80047ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10d      	bne.n	800479c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004784:	2b00      	cmp	r3, #0
 8004786:	d031      	beq.n	80047ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	4798      	blx	r3
 8004790:	e02c      	b.n	80047ec <HAL_DMA_IRQHandler+0x2a0>
 8004792:	bf00      	nop
 8004794:	20000000 	.word	0x20000000
 8004798:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d023      	beq.n	80047ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	4798      	blx	r3
 80047ac:	e01e      	b.n	80047ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10f      	bne.n	80047dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0210 	bic.w	r2, r2, #16
 80047ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d032      	beq.n	800485a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d022      	beq.n	8004846 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2205      	movs	r2, #5
 8004804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	3301      	adds	r3, #1
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	429a      	cmp	r2, r3
 8004822:	d307      	bcc.n	8004834 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f2      	bne.n	8004818 <HAL_DMA_IRQHandler+0x2cc>
 8004832:	e000      	b.n	8004836 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004834:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800484a:	2b00      	cmp	r3, #0
 800484c:	d005      	beq.n	800485a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	4798      	blx	r3
 8004856:	e000      	b.n	800485a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004858:	bf00      	nop
    }
  }
}
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	3b10      	subs	r3, #16
 8004870:	4a14      	ldr	r2, [pc, #80]	@ (80048c4 <DMA_CalcBaseAndBitshift+0x64>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	091b      	lsrs	r3, r3, #4
 8004878:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800487a:	4a13      	ldr	r2, [pc, #76]	@ (80048c8 <DMA_CalcBaseAndBitshift+0x68>)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b03      	cmp	r3, #3
 800488c:	d909      	bls.n	80048a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004896:	f023 0303 	bic.w	r3, r3, #3
 800489a:	1d1a      	adds	r2, r3, #4
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	659a      	str	r2, [r3, #88]	@ 0x58
 80048a0:	e007      	b.n	80048b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80048aa:	f023 0303 	bic.w	r3, r3, #3
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	aaaaaaab 	.word	0xaaaaaaab
 80048c8:	0800baec 	.word	0x0800baec

080048cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d11f      	bne.n	8004926 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d856      	bhi.n	800499a <DMA_CheckFifoParam+0xce>
 80048ec:	a201      	add	r2, pc, #4	@ (adr r2, 80048f4 <DMA_CheckFifoParam+0x28>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004905 	.word	0x08004905
 80048f8:	08004917 	.word	0x08004917
 80048fc:	08004905 	.word	0x08004905
 8004900:	0800499b 	.word	0x0800499b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004908:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d046      	beq.n	800499e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004914:	e043      	b.n	800499e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800491e:	d140      	bne.n	80049a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004924:	e03d      	b.n	80049a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800492e:	d121      	bne.n	8004974 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b03      	cmp	r3, #3
 8004934:	d837      	bhi.n	80049a6 <DMA_CheckFifoParam+0xda>
 8004936:	a201      	add	r2, pc, #4	@ (adr r2, 800493c <DMA_CheckFifoParam+0x70>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	0800494d 	.word	0x0800494d
 8004940:	08004953 	.word	0x08004953
 8004944:	0800494d 	.word	0x0800494d
 8004948:	08004965 	.word	0x08004965
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	73fb      	strb	r3, [r7, #15]
      break;
 8004950:	e030      	b.n	80049b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004956:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d025      	beq.n	80049aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004962:	e022      	b.n	80049aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004968:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800496c:	d11f      	bne.n	80049ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004972:	e01c      	b.n	80049ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d903      	bls.n	8004982 <DMA_CheckFifoParam+0xb6>
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b03      	cmp	r3, #3
 800497e:	d003      	beq.n	8004988 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004980:	e018      	b.n	80049b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	73fb      	strb	r3, [r7, #15]
      break;
 8004986:	e015      	b.n	80049b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00e      	beq.n	80049b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
      break;
 8004998:	e00b      	b.n	80049b2 <DMA_CheckFifoParam+0xe6>
      break;
 800499a:	bf00      	nop
 800499c:	e00a      	b.n	80049b4 <DMA_CheckFifoParam+0xe8>
      break;
 800499e:	bf00      	nop
 80049a0:	e008      	b.n	80049b4 <DMA_CheckFifoParam+0xe8>
      break;
 80049a2:	bf00      	nop
 80049a4:	e006      	b.n	80049b4 <DMA_CheckFifoParam+0xe8>
      break;
 80049a6:	bf00      	nop
 80049a8:	e004      	b.n	80049b4 <DMA_CheckFifoParam+0xe8>
      break;
 80049aa:	bf00      	nop
 80049ac:	e002      	b.n	80049b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80049ae:	bf00      	nop
 80049b0:	e000      	b.n	80049b4 <DMA_CheckFifoParam+0xe8>
      break;
 80049b2:	bf00      	nop
    }
  } 
  
  return status; 
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop

080049c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	@ 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049da:	2300      	movs	r3, #0
 80049dc:	61fb      	str	r3, [r7, #28]
 80049de:	e165      	b.n	8004cac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049e0:	2201      	movs	r2, #1
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4013      	ands	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	f040 8154 	bne.w	8004ca6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d005      	beq.n	8004a16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d130      	bne.n	8004a78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	2203      	movs	r2, #3
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	43db      	mvns	r3, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	091b      	lsrs	r3, r3, #4
 8004a62:	f003 0201 	and.w	r2, r3, #1
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 0303 	and.w	r3, r3, #3
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d017      	beq.n	8004ab4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	2203      	movs	r2, #3
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	43db      	mvns	r3, r3
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	689a      	ldr	r2, [r3, #8]
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d123      	bne.n	8004b08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	08da      	lsrs	r2, r3, #3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3208      	adds	r2, #8
 8004ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	220f      	movs	r2, #15
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	43db      	mvns	r3, r3
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	08da      	lsrs	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3208      	adds	r2, #8
 8004b02:	69b9      	ldr	r1, [r7, #24]
 8004b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	2203      	movs	r2, #3
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f003 0203 	and.w	r2, r3, #3
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 80ae 	beq.w	8004ca6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	4b5d      	ldr	r3, [pc, #372]	@ (8004cc4 <HAL_GPIO_Init+0x300>)
 8004b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b52:	4a5c      	ldr	r2, [pc, #368]	@ (8004cc4 <HAL_GPIO_Init+0x300>)
 8004b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b5a:	4b5a      	ldr	r3, [pc, #360]	@ (8004cc4 <HAL_GPIO_Init+0x300>)
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b66:	4a58      	ldr	r2, [pc, #352]	@ (8004cc8 <HAL_GPIO_Init+0x304>)
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	089b      	lsrs	r3, r3, #2
 8004b6c:	3302      	adds	r3, #2
 8004b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	220f      	movs	r2, #15
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	43db      	mvns	r3, r3
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	4013      	ands	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a4f      	ldr	r2, [pc, #316]	@ (8004ccc <HAL_GPIO_Init+0x308>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d025      	beq.n	8004bde <HAL_GPIO_Init+0x21a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a4e      	ldr	r2, [pc, #312]	@ (8004cd0 <HAL_GPIO_Init+0x30c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01f      	beq.n	8004bda <HAL_GPIO_Init+0x216>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a4d      	ldr	r2, [pc, #308]	@ (8004cd4 <HAL_GPIO_Init+0x310>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d019      	beq.n	8004bd6 <HAL_GPIO_Init+0x212>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a4c      	ldr	r2, [pc, #304]	@ (8004cd8 <HAL_GPIO_Init+0x314>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <HAL_GPIO_Init+0x20e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a4b      	ldr	r2, [pc, #300]	@ (8004cdc <HAL_GPIO_Init+0x318>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00d      	beq.n	8004bce <HAL_GPIO_Init+0x20a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a4a      	ldr	r2, [pc, #296]	@ (8004ce0 <HAL_GPIO_Init+0x31c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d007      	beq.n	8004bca <HAL_GPIO_Init+0x206>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a49      	ldr	r2, [pc, #292]	@ (8004ce4 <HAL_GPIO_Init+0x320>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d101      	bne.n	8004bc6 <HAL_GPIO_Init+0x202>
 8004bc2:	2306      	movs	r3, #6
 8004bc4:	e00c      	b.n	8004be0 <HAL_GPIO_Init+0x21c>
 8004bc6:	2307      	movs	r3, #7
 8004bc8:	e00a      	b.n	8004be0 <HAL_GPIO_Init+0x21c>
 8004bca:	2305      	movs	r3, #5
 8004bcc:	e008      	b.n	8004be0 <HAL_GPIO_Init+0x21c>
 8004bce:	2304      	movs	r3, #4
 8004bd0:	e006      	b.n	8004be0 <HAL_GPIO_Init+0x21c>
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e004      	b.n	8004be0 <HAL_GPIO_Init+0x21c>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e002      	b.n	8004be0 <HAL_GPIO_Init+0x21c>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <HAL_GPIO_Init+0x21c>
 8004bde:	2300      	movs	r3, #0
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	f002 0203 	and.w	r2, r2, #3
 8004be6:	0092      	lsls	r2, r2, #2
 8004be8:	4093      	lsls	r3, r2
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bf0:	4935      	ldr	r1, [pc, #212]	@ (8004cc8 <HAL_GPIO_Init+0x304>)
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	089b      	lsrs	r3, r3, #2
 8004bf6:	3302      	adds	r3, #2
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bfe:	4b3a      	ldr	r3, [pc, #232]	@ (8004ce8 <HAL_GPIO_Init+0x324>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	43db      	mvns	r3, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c22:	4a31      	ldr	r2, [pc, #196]	@ (8004ce8 <HAL_GPIO_Init+0x324>)
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c28:	4b2f      	ldr	r3, [pc, #188]	@ (8004ce8 <HAL_GPIO_Init+0x324>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	43db      	mvns	r3, r3
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	4013      	ands	r3, r2
 8004c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c4c:	4a26      	ldr	r2, [pc, #152]	@ (8004ce8 <HAL_GPIO_Init+0x324>)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c52:	4b25      	ldr	r3, [pc, #148]	@ (8004ce8 <HAL_GPIO_Init+0x324>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c76:	4a1c      	ldr	r2, [pc, #112]	@ (8004ce8 <HAL_GPIO_Init+0x324>)
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce8 <HAL_GPIO_Init+0x324>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	43db      	mvns	r3, r3
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ca0:	4a11      	ldr	r2, [pc, #68]	@ (8004ce8 <HAL_GPIO_Init+0x324>)
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	61fb      	str	r3, [r7, #28]
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	2b0f      	cmp	r3, #15
 8004cb0:	f67f ae96 	bls.w	80049e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop
 8004cb8:	3724      	adds	r7, #36	@ 0x24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	40013800 	.word	0x40013800
 8004ccc:	40020000 	.word	0x40020000
 8004cd0:	40020400 	.word	0x40020400
 8004cd4:	40020800 	.word	0x40020800
 8004cd8:	40020c00 	.word	0x40020c00
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	40021400 	.word	0x40021400
 8004ce4:	40021800 	.word	0x40021800
 8004ce8:	40013c00 	.word	0x40013c00

08004cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	807b      	strh	r3, [r7, #2]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cfc:	787b      	ldrb	r3, [r7, #1]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d02:	887a      	ldrh	r2, [r7, #2]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d08:	e003      	b.n	8004d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d0a:	887b      	ldrh	r3, [r7, #2]
 8004d0c:	041a      	lsls	r2, r3, #16
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	619a      	str	r2, [r3, #24]
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
	...

08004d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e12b      	b.n	8004f8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d106      	bne.n	8004d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fd ffde 	bl	8002d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2224      	movs	r2, #36	@ 0x24
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0201 	bic.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d84:	f001 fbe0 	bl	8006548 <HAL_RCC_GetPCLK1Freq>
 8004d88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4a81      	ldr	r2, [pc, #516]	@ (8004f94 <HAL_I2C_Init+0x274>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d807      	bhi.n	8004da4 <HAL_I2C_Init+0x84>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a80      	ldr	r2, [pc, #512]	@ (8004f98 <HAL_I2C_Init+0x278>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	bf94      	ite	ls
 8004d9c:	2301      	movls	r3, #1
 8004d9e:	2300      	movhi	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	e006      	b.n	8004db2 <HAL_I2C_Init+0x92>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4a7d      	ldr	r2, [pc, #500]	@ (8004f9c <HAL_I2C_Init+0x27c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	bf94      	ite	ls
 8004dac:	2301      	movls	r3, #1
 8004dae:	2300      	movhi	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e0e7      	b.n	8004f8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4a78      	ldr	r2, [pc, #480]	@ (8004fa0 <HAL_I2C_Init+0x280>)
 8004dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc2:	0c9b      	lsrs	r3, r3, #18
 8004dc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	4a6a      	ldr	r2, [pc, #424]	@ (8004f94 <HAL_I2C_Init+0x274>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d802      	bhi.n	8004df4 <HAL_I2C_Init+0xd4>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	3301      	adds	r3, #1
 8004df2:	e009      	b.n	8004e08 <HAL_I2C_Init+0xe8>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	4a69      	ldr	r2, [pc, #420]	@ (8004fa4 <HAL_I2C_Init+0x284>)
 8004e00:	fba2 2303 	umull	r2, r3, r2, r3
 8004e04:	099b      	lsrs	r3, r3, #6
 8004e06:	3301      	adds	r3, #1
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6812      	ldr	r2, [r2, #0]
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004e1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	495c      	ldr	r1, [pc, #368]	@ (8004f94 <HAL_I2C_Init+0x274>)
 8004e24:	428b      	cmp	r3, r1
 8004e26:	d819      	bhi.n	8004e5c <HAL_I2C_Init+0x13c>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	1e59      	subs	r1, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e36:	1c59      	adds	r1, r3, #1
 8004e38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e3c:	400b      	ands	r3, r1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <HAL_I2C_Init+0x138>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1e59      	subs	r1, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e50:	3301      	adds	r3, #1
 8004e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e56:	e051      	b.n	8004efc <HAL_I2C_Init+0x1dc>
 8004e58:	2304      	movs	r3, #4
 8004e5a:	e04f      	b.n	8004efc <HAL_I2C_Init+0x1dc>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d111      	bne.n	8004e88 <HAL_I2C_Init+0x168>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	1e58      	subs	r0, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6859      	ldr	r1, [r3, #4]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	440b      	add	r3, r1
 8004e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e76:	3301      	adds	r3, #1
 8004e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bf0c      	ite	eq
 8004e80:	2301      	moveq	r3, #1
 8004e82:	2300      	movne	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	e012      	b.n	8004eae <HAL_I2C_Init+0x18e>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	1e58      	subs	r0, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6859      	ldr	r1, [r3, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	0099      	lsls	r1, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bf0c      	ite	eq
 8004ea8:	2301      	moveq	r3, #1
 8004eaa:	2300      	movne	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_Init+0x196>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e022      	b.n	8004efc <HAL_I2C_Init+0x1dc>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10e      	bne.n	8004edc <HAL_I2C_Init+0x1bc>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1e58      	subs	r0, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6859      	ldr	r1, [r3, #4]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	440b      	add	r3, r1
 8004ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eda:	e00f      	b.n	8004efc <HAL_I2C_Init+0x1dc>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	1e58      	subs	r0, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6859      	ldr	r1, [r3, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	0099      	lsls	r1, r3, #2
 8004eec:	440b      	add	r3, r1
 8004eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	6809      	ldr	r1, [r1, #0]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69da      	ldr	r2, [r3, #28]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004f2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6911      	ldr	r1, [r2, #16]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	68d2      	ldr	r2, [r2, #12]
 8004f36:	4311      	orrs	r1, r2
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6812      	ldr	r2, [r2, #0]
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	000186a0 	.word	0x000186a0
 8004f98:	001e847f 	.word	0x001e847f
 8004f9c:	003d08ff 	.word	0x003d08ff
 8004fa0:	431bde83 	.word	0x431bde83
 8004fa4:	10624dd3 	.word	0x10624dd3

08004fa8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af02      	add	r7, sp, #8
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	607a      	str	r2, [r7, #4]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	817b      	strh	r3, [r7, #10]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fbc:	f7fe fdd2 	bl	8003b64 <HAL_GetTick>
 8004fc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	f040 80e0 	bne.w	8005190 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	2319      	movs	r3, #25
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	4970      	ldr	r1, [pc, #448]	@ (800519c <HAL_I2C_Master_Transmit+0x1f4>)
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 ff3c 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e0d3      	b.n	8005192 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_I2C_Master_Transmit+0x50>
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e0cc      	b.n	8005192 <HAL_I2C_Master_Transmit+0x1ea>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b01      	cmp	r3, #1
 800500c:	d007      	beq.n	800501e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0201 	orr.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800502c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2221      	movs	r2, #33	@ 0x21
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2210      	movs	r2, #16
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	893a      	ldrh	r2, [r7, #8]
 800504e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005054:	b29a      	uxth	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4a50      	ldr	r2, [pc, #320]	@ (80051a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800505e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005060:	8979      	ldrh	r1, [r7, #10]
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	6a3a      	ldr	r2, [r7, #32]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 fcf6 	bl	8005a58 <I2C_MasterRequestWrite>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e08d      	b.n	8005192 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005076:	2300      	movs	r3, #0
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800508c:	e066      	b.n	800515c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	6a39      	ldr	r1, [r7, #32]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 fffa 	bl	800608c <I2C_WaitOnTXEFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00d      	beq.n	80050ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d107      	bne.n	80050b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e06b      	b.n	8005192 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050be:	781a      	ldrb	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d11b      	bne.n	8005130 <HAL_I2C_Master_Transmit+0x188>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d017      	beq.n	8005130 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005104:	781a      	ldrb	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005128:	3b01      	subs	r3, #1
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	6a39      	ldr	r1, [r7, #32]
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fff1 	bl	800611c <I2C_WaitOnBTFFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00d      	beq.n	800515c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005144:	2b04      	cmp	r3, #4
 8005146:	d107      	bne.n	8005158 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005156:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e01a      	b.n	8005192 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005160:	2b00      	cmp	r3, #0
 8005162:	d194      	bne.n	800508e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	e000      	b.n	8005192 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005190:	2302      	movs	r3, #2
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	00100002 	.word	0x00100002
 80051a0:	ffff0000 	.word	0xffff0000

080051a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	4608      	mov	r0, r1
 80051ae:	4611      	mov	r1, r2
 80051b0:	461a      	mov	r2, r3
 80051b2:	4603      	mov	r3, r0
 80051b4:	817b      	strh	r3, [r7, #10]
 80051b6:	460b      	mov	r3, r1
 80051b8:	813b      	strh	r3, [r7, #8]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051be:	f7fe fcd1 	bl	8003b64 <HAL_GetTick>
 80051c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	f040 80d9 	bne.w	8005384 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	2319      	movs	r3, #25
 80051d8:	2201      	movs	r2, #1
 80051da:	496d      	ldr	r1, [pc, #436]	@ (8005390 <HAL_I2C_Mem_Write+0x1ec>)
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 fe3b 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80051e8:	2302      	movs	r3, #2
 80051ea:	e0cc      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_I2C_Mem_Write+0x56>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e0c5      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b01      	cmp	r3, #1
 800520e:	d007      	beq.n	8005220 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800522e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2221      	movs	r2, #33	@ 0x21
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2240      	movs	r2, #64	@ 0x40
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a3a      	ldr	r2, [r7, #32]
 800524a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005250:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4a4d      	ldr	r2, [pc, #308]	@ (8005394 <HAL_I2C_Mem_Write+0x1f0>)
 8005260:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005262:	88f8      	ldrh	r0, [r7, #6]
 8005264:	893a      	ldrh	r2, [r7, #8]
 8005266:	8979      	ldrh	r1, [r7, #10]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	4603      	mov	r3, r0
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fc72 	bl	8005b5c <I2C_RequestMemoryWrite>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d052      	beq.n	8005324 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e081      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 ff00 	bl	800608c <I2C_WaitOnTXEFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00d      	beq.n	80052ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005296:	2b04      	cmp	r3, #4
 8005298:	d107      	bne.n	80052aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e06b      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b2:	781a      	ldrb	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d11b      	bne.n	8005324 <HAL_I2C_Mem_Write+0x180>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d017      	beq.n	8005324 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f8:	781a      	ldrb	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1aa      	bne.n	8005282 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 fef3 	bl	800611c <I2C_WaitOnBTFFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00d      	beq.n	8005358 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005340:	2b04      	cmp	r3, #4
 8005342:	d107      	bne.n	8005354 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005352:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e016      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	e000      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005384:	2302      	movs	r3, #2
  }
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	00100002 	.word	0x00100002
 8005394:	ffff0000 	.word	0xffff0000

08005398 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08c      	sub	sp, #48	@ 0x30
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	4608      	mov	r0, r1
 80053a2:	4611      	mov	r1, r2
 80053a4:	461a      	mov	r2, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	817b      	strh	r3, [r7, #10]
 80053aa:	460b      	mov	r3, r1
 80053ac:	813b      	strh	r3, [r7, #8]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053b2:	f7fe fbd7 	bl	8003b64 <HAL_GetTick>
 80053b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	f040 8214 	bne.w	80057ee <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	2319      	movs	r3, #25
 80053cc:	2201      	movs	r2, #1
 80053ce:	497b      	ldr	r1, [pc, #492]	@ (80055bc <HAL_I2C_Mem_Read+0x224>)
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 fd41 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80053dc:	2302      	movs	r3, #2
 80053de:	e207      	b.n	80057f0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_I2C_Mem_Read+0x56>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e200      	b.n	80057f0 <HAL_I2C_Mem_Read+0x458>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b01      	cmp	r3, #1
 8005402:	d007      	beq.n	8005414 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005422:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2222      	movs	r2, #34	@ 0x22
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2240      	movs	r2, #64	@ 0x40
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800543e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005444:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a5b      	ldr	r2, [pc, #364]	@ (80055c0 <HAL_I2C_Mem_Read+0x228>)
 8005454:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005456:	88f8      	ldrh	r0, [r7, #6]
 8005458:	893a      	ldrh	r2, [r7, #8]
 800545a:	8979      	ldrh	r1, [r7, #10]
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	4603      	mov	r3, r0
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 fc0e 	bl	8005c88 <I2C_RequestMemoryRead>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e1bc      	b.n	80057f0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800547a:	2b00      	cmp	r3, #0
 800547c:	d113      	bne.n	80054a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800547e:	2300      	movs	r3, #0
 8005480:	623b      	str	r3, [r7, #32]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	623b      	str	r3, [r7, #32]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	623b      	str	r3, [r7, #32]
 8005492:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	e190      	b.n	80057c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d11b      	bne.n	80054e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054be:	2300      	movs	r3, #0
 80054c0:	61fb      	str	r3, [r7, #28]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	61fb      	str	r3, [r7, #28]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	e170      	b.n	80057c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d11b      	bne.n	8005526 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800550c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550e:	2300      	movs	r3, #0
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	e150      	b.n	80057c8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800553c:	e144      	b.n	80057c8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005542:	2b03      	cmp	r3, #3
 8005544:	f200 80f1 	bhi.w	800572a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800554c:	2b01      	cmp	r3, #1
 800554e:	d123      	bne.n	8005598 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005552:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 fe29 	bl	80061ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e145      	b.n	80057f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005596:	e117      	b.n	80057c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800559c:	2b02      	cmp	r3, #2
 800559e:	d14e      	bne.n	800563e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a6:	2200      	movs	r2, #0
 80055a8:	4906      	ldr	r1, [pc, #24]	@ (80055c4 <HAL_I2C_Mem_Read+0x22c>)
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fc54 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d008      	beq.n	80055c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e11a      	b.n	80057f0 <HAL_I2C_Mem_Read+0x458>
 80055ba:	bf00      	nop
 80055bc:	00100002 	.word	0x00100002
 80055c0:	ffff0000 	.word	0xffff0000
 80055c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800563c:	e0c4      	b.n	80057c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005644:	2200      	movs	r2, #0
 8005646:	496c      	ldr	r1, [pc, #432]	@ (80057f8 <HAL_I2C_Mem_Read+0x460>)
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 fc05 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0cb      	b.n	80057f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a0:	2200      	movs	r2, #0
 80056a2:	4955      	ldr	r1, [pc, #340]	@ (80057f8 <HAL_I2C_Mem_Read+0x460>)
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 fbd7 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e09d      	b.n	80057f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691a      	ldr	r2, [r3, #16]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005728:	e04e      	b.n	80057c8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800572a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800572c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 fd3c 	bl	80061ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e058      	b.n	80057f0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b04      	cmp	r3, #4
 800577c:	d124      	bne.n	80057c8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005782:	2b03      	cmp	r3, #3
 8005784:	d107      	bne.n	8005796 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005794:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f47f aeb6 	bne.w	800553e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e000      	b.n	80057f0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80057ee:	2302      	movs	r3, #2
  }
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3728      	adds	r7, #40	@ 0x28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	00010004 	.word	0x00010004

080057fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08a      	sub	sp, #40	@ 0x28
 8005800:	af02      	add	r7, sp, #8
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	607a      	str	r2, [r7, #4]
 8005806:	603b      	str	r3, [r7, #0]
 8005808:	460b      	mov	r3, r1
 800580a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800580c:	f7fe f9aa 	bl	8003b64 <HAL_GetTick>
 8005810:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b20      	cmp	r3, #32
 8005820:	f040 8111 	bne.w	8005a46 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	2319      	movs	r3, #25
 800582a:	2201      	movs	r2, #1
 800582c:	4988      	ldr	r1, [pc, #544]	@ (8005a50 <HAL_I2C_IsDeviceReady+0x254>)
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 fb12 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800583a:	2302      	movs	r3, #2
 800583c:	e104      	b.n	8005a48 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_I2C_IsDeviceReady+0x50>
 8005848:	2302      	movs	r3, #2
 800584a:	e0fd      	b.n	8005a48 <HAL_I2C_IsDeviceReady+0x24c>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b01      	cmp	r3, #1
 8005860:	d007      	beq.n	8005872 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0201 	orr.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005880:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2224      	movs	r2, #36	@ 0x24
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4a70      	ldr	r2, [pc, #448]	@ (8005a54 <HAL_I2C_IsDeviceReady+0x258>)
 8005894:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 fad0 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00d      	beq.n	80058da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058cc:	d103      	bne.n	80058d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058d4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e0b6      	b.n	8005a48 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058da:	897b      	ldrh	r3, [r7, #10]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80058e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80058ea:	f7fe f93b 	bl	8003b64 <HAL_GetTick>
 80058ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	bf0c      	ite	eq
 80058fe:	2301      	moveq	r3, #1
 8005900:	2300      	movne	r3, #0
 8005902:	b2db      	uxtb	r3, r3
 8005904:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005914:	bf0c      	ite	eq
 8005916:	2301      	moveq	r3, #1
 8005918:	2300      	movne	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800591e:	e025      	b.n	800596c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005920:	f7fe f920 	bl	8003b64 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d302      	bcc.n	8005936 <HAL_I2C_IsDeviceReady+0x13a>
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d103      	bne.n	800593e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	22a0      	movs	r2, #160	@ 0xa0
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b02      	cmp	r3, #2
 800594a:	bf0c      	ite	eq
 800594c:	2301      	moveq	r3, #1
 800594e:	2300      	movne	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800595e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005962:	bf0c      	ite	eq
 8005964:	2301      	moveq	r3, #1
 8005966:	2300      	movne	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2ba0      	cmp	r3, #160	@ 0xa0
 8005976:	d005      	beq.n	8005984 <HAL_I2C_IsDeviceReady+0x188>
 8005978:	7dfb      	ldrb	r3, [r7, #23]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <HAL_I2C_IsDeviceReady+0x188>
 800597e:	7dbb      	ldrb	r3, [r7, #22]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0cd      	beq.n	8005920 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b02      	cmp	r3, #2
 8005998:	d129      	bne.n	80059ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059aa:	2300      	movs	r3, #0
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	2319      	movs	r3, #25
 80059c6:	2201      	movs	r2, #1
 80059c8:	4921      	ldr	r1, [pc, #132]	@ (8005a50 <HAL_I2C_IsDeviceReady+0x254>)
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 fa44 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e036      	b.n	8005a48 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e02c      	b.n	8005a48 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a06:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	2319      	movs	r3, #25
 8005a0e:	2201      	movs	r2, #1
 8005a10:	490f      	ldr	r1, [pc, #60]	@ (8005a50 <HAL_I2C_IsDeviceReady+0x254>)
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 fa20 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e012      	b.n	8005a48 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	3301      	adds	r3, #1
 8005a26:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	f4ff af32 	bcc.w	8005896 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005a46:	2302      	movs	r3, #2
  }
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	00100002 	.word	0x00100002
 8005a54:	ffff0000 	.word	0xffff0000

08005a58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	607a      	str	r2, [r7, #4]
 8005a62:	603b      	str	r3, [r7, #0]
 8005a64:	460b      	mov	r3, r1
 8005a66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d006      	beq.n	8005a82 <I2C_MasterRequestWrite+0x2a>
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d003      	beq.n	8005a82 <I2C_MasterRequestWrite+0x2a>
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a80:	d108      	bne.n	8005a94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	e00b      	b.n	8005aac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a98:	2b12      	cmp	r3, #18
 8005a9a:	d107      	bne.n	8005aac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005aaa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 f9cd 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00d      	beq.n	8005ae0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ad2:	d103      	bne.n	8005adc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ada:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e035      	b.n	8005b4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ae8:	d108      	bne.n	8005afc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005aea:	897b      	ldrh	r3, [r7, #10]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005af8:	611a      	str	r2, [r3, #16]
 8005afa:	e01b      	b.n	8005b34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005afc:	897b      	ldrh	r3, [r7, #10]
 8005afe:	11db      	asrs	r3, r3, #7
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	f003 0306 	and.w	r3, r3, #6
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	f063 030f 	orn	r3, r3, #15
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	490e      	ldr	r1, [pc, #56]	@ (8005b54 <I2C_MasterRequestWrite+0xfc>)
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 fa16 	bl	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e010      	b.n	8005b4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b2a:	897b      	ldrh	r3, [r7, #10]
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4907      	ldr	r1, [pc, #28]	@ (8005b58 <I2C_MasterRequestWrite+0x100>)
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 fa06 	bl	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	00010008 	.word	0x00010008
 8005b58:	00010002 	.word	0x00010002

08005b5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	4608      	mov	r0, r1
 8005b66:	4611      	mov	r1, r2
 8005b68:	461a      	mov	r2, r3
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	817b      	strh	r3, [r7, #10]
 8005b6e:	460b      	mov	r3, r1
 8005b70:	813b      	strh	r3, [r7, #8]
 8005b72:	4613      	mov	r3, r2
 8005b74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f960 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00d      	beq.n	8005bba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bac:	d103      	bne.n	8005bb6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e05f      	b.n	8005c7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bba:	897b      	ldrh	r3, [r7, #10]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005bc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	6a3a      	ldr	r2, [r7, #32]
 8005bce:	492d      	ldr	r1, [pc, #180]	@ (8005c84 <I2C_RequestMemoryWrite+0x128>)
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f9bb 	bl	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e04c      	b.n	8005c7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bf8:	6a39      	ldr	r1, [r7, #32]
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 fa46 	bl	800608c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00d      	beq.n	8005c22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d107      	bne.n	8005c1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e02b      	b.n	8005c7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c22:	88fb      	ldrh	r3, [r7, #6]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d105      	bne.n	8005c34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c28:	893b      	ldrh	r3, [r7, #8]
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	611a      	str	r2, [r3, #16]
 8005c32:	e021      	b.n	8005c78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c34:	893b      	ldrh	r3, [r7, #8]
 8005c36:	0a1b      	lsrs	r3, r3, #8
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c44:	6a39      	ldr	r1, [r7, #32]
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 fa20 	bl	800608c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00d      	beq.n	8005c6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d107      	bne.n	8005c6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e005      	b.n	8005c7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c6e:	893b      	ldrh	r3, [r7, #8]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	00010002 	.word	0x00010002

08005c88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af02      	add	r7, sp, #8
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	4608      	mov	r0, r1
 8005c92:	4611      	mov	r1, r2
 8005c94:	461a      	mov	r2, r3
 8005c96:	4603      	mov	r3, r0
 8005c98:	817b      	strh	r3, [r7, #10]
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	813b      	strh	r3, [r7, #8]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005cb0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 f8c2 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00d      	beq.n	8005cf6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ce8:	d103      	bne.n	8005cf2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cf0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e0aa      	b.n	8005e4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cf6:	897b      	ldrh	r3, [r7, #10]
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	6a3a      	ldr	r2, [r7, #32]
 8005d0a:	4952      	ldr	r1, [pc, #328]	@ (8005e54 <I2C_RequestMemoryRead+0x1cc>)
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f91d 	bl	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e097      	b.n	8005e4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	617b      	str	r3, [r7, #20]
 8005d30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d34:	6a39      	ldr	r1, [r7, #32]
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 f9a8 	bl	800608c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00d      	beq.n	8005d5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d107      	bne.n	8005d5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e076      	b.n	8005e4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d5e:	88fb      	ldrh	r3, [r7, #6]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d105      	bne.n	8005d70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d64:	893b      	ldrh	r3, [r7, #8]
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	611a      	str	r2, [r3, #16]
 8005d6e:	e021      	b.n	8005db4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d70:	893b      	ldrh	r3, [r7, #8]
 8005d72:	0a1b      	lsrs	r3, r3, #8
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d80:	6a39      	ldr	r1, [r7, #32]
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 f982 	bl	800608c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00d      	beq.n	8005daa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d92:	2b04      	cmp	r3, #4
 8005d94:	d107      	bne.n	8005da6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005da4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e050      	b.n	8005e4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005daa:	893b      	ldrh	r3, [r7, #8]
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005db6:	6a39      	ldr	r1, [r7, #32]
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f967 	bl	800608c <I2C_WaitOnTXEFlagUntilTimeout>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00d      	beq.n	8005de0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d107      	bne.n	8005ddc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e035      	b.n	8005e4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 f82b 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00d      	beq.n	8005e24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e16:	d103      	bne.n	8005e20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e013      	b.n	8005e4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e24:	897b      	ldrh	r3, [r7, #10]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e36:	6a3a      	ldr	r2, [r7, #32]
 8005e38:	4906      	ldr	r1, [pc, #24]	@ (8005e54 <I2C_RequestMemoryRead+0x1cc>)
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f000 f886 	bl	8005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	00010002 	.word	0x00010002

08005e58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e68:	e048      	b.n	8005efc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e70:	d044      	beq.n	8005efc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e72:	f7fd fe77 	bl	8003b64 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d302      	bcc.n	8005e88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d139      	bne.n	8005efc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	0c1b      	lsrs	r3, r3, #16
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d10d      	bne.n	8005eae <I2C_WaitOnFlagUntilTimeout+0x56>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	43da      	mvns	r2, r3
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bf0c      	ite	eq
 8005ea4:	2301      	moveq	r3, #1
 8005ea6:	2300      	movne	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	461a      	mov	r2, r3
 8005eac:	e00c      	b.n	8005ec8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	43da      	mvns	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bf0c      	ite	eq
 8005ec0:	2301      	moveq	r3, #1
 8005ec2:	2300      	movne	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d116      	bne.n	8005efc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee8:	f043 0220 	orr.w	r2, r3, #32
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e023      	b.n	8005f44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	0c1b      	lsrs	r3, r3, #16
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d10d      	bne.n	8005f22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	43da      	mvns	r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4013      	ands	r3, r2
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bf0c      	ite	eq
 8005f18:	2301      	moveq	r3, #1
 8005f1a:	2300      	movne	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	e00c      	b.n	8005f3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	43da      	mvns	r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bf0c      	ite	eq
 8005f34:	2301      	moveq	r3, #1
 8005f36:	2300      	movne	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	79fb      	ldrb	r3, [r7, #7]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d093      	beq.n	8005e6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
 8005f58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f5a:	e071      	b.n	8006040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f6a:	d123      	bne.n	8005fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa0:	f043 0204 	orr.w	r2, r3, #4
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e067      	b.n	8006084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fba:	d041      	beq.n	8006040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbc:	f7fd fdd2 	bl	8003b64 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d302      	bcc.n	8005fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d136      	bne.n	8006040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	0c1b      	lsrs	r3, r3, #16
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d10c      	bne.n	8005ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	43da      	mvns	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	bf14      	ite	ne
 8005fee:	2301      	movne	r3, #1
 8005ff0:	2300      	moveq	r3, #0
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	e00b      	b.n	800600e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	43da      	mvns	r2, r3
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	4013      	ands	r3, r2
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	bf14      	ite	ne
 8006008:	2301      	movne	r3, #1
 800600a:	2300      	moveq	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d016      	beq.n	8006040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602c:	f043 0220 	orr.w	r2, r3, #32
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e021      	b.n	8006084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	0c1b      	lsrs	r3, r3, #16
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b01      	cmp	r3, #1
 8006048:	d10c      	bne.n	8006064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	43da      	mvns	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	4013      	ands	r3, r2
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	bf14      	ite	ne
 800605c:	2301      	movne	r3, #1
 800605e:	2300      	moveq	r3, #0
 8006060:	b2db      	uxtb	r3, r3
 8006062:	e00b      	b.n	800607c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	43da      	mvns	r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4013      	ands	r3, r2
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	bf14      	ite	ne
 8006076:	2301      	movne	r3, #1
 8006078:	2300      	moveq	r3, #0
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	f47f af6d 	bne.w	8005f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006098:	e034      	b.n	8006104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f8e3 	bl	8006266 <I2C_IsAcknowledgeFailed>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e034      	b.n	8006114 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b0:	d028      	beq.n	8006104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060b2:	f7fd fd57 	bl	8003b64 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d302      	bcc.n	80060c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d11d      	bne.n	8006104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d2:	2b80      	cmp	r3, #128	@ 0x80
 80060d4:	d016      	beq.n	8006104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2220      	movs	r2, #32
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f0:	f043 0220 	orr.w	r2, r3, #32
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e007      	b.n	8006114 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800610e:	2b80      	cmp	r3, #128	@ 0x80
 8006110:	d1c3      	bne.n	800609a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006128:	e034      	b.n	8006194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f89b 	bl	8006266 <I2C_IsAcknowledgeFailed>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e034      	b.n	80061a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006140:	d028      	beq.n	8006194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006142:	f7fd fd0f 	bl	8003b64 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	429a      	cmp	r2, r3
 8006150:	d302      	bcc.n	8006158 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d11d      	bne.n	8006194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b04      	cmp	r3, #4
 8006164:	d016      	beq.n	8006194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2220      	movs	r2, #32
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006180:	f043 0220 	orr.w	r2, r3, #32
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e007      	b.n	80061a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	f003 0304 	and.w	r3, r3, #4
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d1c3      	bne.n	800612a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061b8:	e049      	b.n	800624e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	f003 0310 	and.w	r3, r3, #16
 80061c4:	2b10      	cmp	r3, #16
 80061c6:	d119      	bne.n	80061fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f06f 0210 	mvn.w	r2, #16
 80061d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e030      	b.n	800625e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061fc:	f7fd fcb2 	bl	8003b64 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	429a      	cmp	r2, r3
 800620a:	d302      	bcc.n	8006212 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d11d      	bne.n	800624e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800621c:	2b40      	cmp	r3, #64	@ 0x40
 800621e:	d016      	beq.n	800624e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623a:	f043 0220 	orr.w	r2, r3, #32
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e007      	b.n	800625e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006258:	2b40      	cmp	r3, #64	@ 0x40
 800625a:	d1ae      	bne.n	80061ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800627c:	d11b      	bne.n	80062b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006286:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a2:	f043 0204 	orr.w	r2, r3, #4
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e000      	b.n	80062b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80062ce:	2300      	movs	r3, #0
 80062d0:	603b      	str	r3, [r7, #0]
 80062d2:	4b20      	ldr	r3, [pc, #128]	@ (8006354 <HAL_PWREx_EnableOverDrive+0x90>)
 80062d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006354 <HAL_PWREx_EnableOverDrive+0x90>)
 80062d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80062de:	4b1d      	ldr	r3, [pc, #116]	@ (8006354 <HAL_PWREx_EnableOverDrive+0x90>)
 80062e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80062ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006358 <HAL_PWREx_EnableOverDrive+0x94>)
 80062ec:	2201      	movs	r2, #1
 80062ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062f0:	f7fd fc38 	bl	8003b64 <HAL_GetTick>
 80062f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062f6:	e009      	b.n	800630c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062f8:	f7fd fc34 	bl	8003b64 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006306:	d901      	bls.n	800630c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e01f      	b.n	800634c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800630c:	4b13      	ldr	r3, [pc, #76]	@ (800635c <HAL_PWREx_EnableOverDrive+0x98>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006318:	d1ee      	bne.n	80062f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800631a:	4b11      	ldr	r3, [pc, #68]	@ (8006360 <HAL_PWREx_EnableOverDrive+0x9c>)
 800631c:	2201      	movs	r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006320:	f7fd fc20 	bl	8003b64 <HAL_GetTick>
 8006324:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006326:	e009      	b.n	800633c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006328:	f7fd fc1c 	bl	8003b64 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006336:	d901      	bls.n	800633c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e007      	b.n	800634c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800633c:	4b07      	ldr	r3, [pc, #28]	@ (800635c <HAL_PWREx_EnableOverDrive+0x98>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006344:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006348:	d1ee      	bne.n	8006328 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40023800 	.word	0x40023800
 8006358:	420e0040 	.word	0x420e0040
 800635c:	40007000 	.word	0x40007000
 8006360:	420e0044 	.word	0x420e0044

08006364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e0cc      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006378:	4b68      	ldr	r3, [pc, #416]	@ (800651c <HAL_RCC_ClockConfig+0x1b8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 030f 	and.w	r3, r3, #15
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d90c      	bls.n	80063a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006386:	4b65      	ldr	r3, [pc, #404]	@ (800651c <HAL_RCC_ClockConfig+0x1b8>)
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800638e:	4b63      	ldr	r3, [pc, #396]	@ (800651c <HAL_RCC_ClockConfig+0x1b8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d001      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0b8      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d020      	beq.n	80063ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d005      	beq.n	80063c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063b8:	4b59      	ldr	r3, [pc, #356]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	4a58      	ldr	r2, [pc, #352]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80063c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0308 	and.w	r3, r3, #8
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063d0:	4b53      	ldr	r3, [pc, #332]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	4a52      	ldr	r2, [pc, #328]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80063da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063dc:	4b50      	ldr	r3, [pc, #320]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	494d      	ldr	r1, [pc, #308]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d044      	beq.n	8006484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d107      	bne.n	8006412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006402:	4b47      	ldr	r3, [pc, #284]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d119      	bne.n	8006442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e07f      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b02      	cmp	r3, #2
 8006418:	d003      	beq.n	8006422 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800641e:	2b03      	cmp	r3, #3
 8006420:	d107      	bne.n	8006432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006422:	4b3f      	ldr	r3, [pc, #252]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d109      	bne.n	8006442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e06f      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006432:	4b3b      	ldr	r3, [pc, #236]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e067      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006442:	4b37      	ldr	r3, [pc, #220]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f023 0203 	bic.w	r2, r3, #3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	4934      	ldr	r1, [pc, #208]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006450:	4313      	orrs	r3, r2
 8006452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006454:	f7fd fb86 	bl	8003b64 <HAL_GetTick>
 8006458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800645a:	e00a      	b.n	8006472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800645c:	f7fd fb82 	bl	8003b64 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800646a:	4293      	cmp	r3, r2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e04f      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006472:	4b2b      	ldr	r3, [pc, #172]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 020c 	and.w	r2, r3, #12
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	429a      	cmp	r2, r3
 8006482:	d1eb      	bne.n	800645c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006484:	4b25      	ldr	r3, [pc, #148]	@ (800651c <HAL_RCC_ClockConfig+0x1b8>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d20c      	bcs.n	80064ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006492:	4b22      	ldr	r3, [pc, #136]	@ (800651c <HAL_RCC_ClockConfig+0x1b8>)
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800649a:	4b20      	ldr	r3, [pc, #128]	@ (800651c <HAL_RCC_ClockConfig+0x1b8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d001      	beq.n	80064ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e032      	b.n	8006512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d008      	beq.n	80064ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064b8:	4b19      	ldr	r3, [pc, #100]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	4916      	ldr	r1, [pc, #88]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064d6:	4b12      	ldr	r3, [pc, #72]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	490e      	ldr	r1, [pc, #56]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80064ea:	f000 f855 	bl	8006598 <HAL_RCC_GetSysClockFreq>
 80064ee:	4602      	mov	r2, r0
 80064f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006520 <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	091b      	lsrs	r3, r3, #4
 80064f6:	f003 030f 	and.w	r3, r3, #15
 80064fa:	490a      	ldr	r1, [pc, #40]	@ (8006524 <HAL_RCC_ClockConfig+0x1c0>)
 80064fc:	5ccb      	ldrb	r3, [r1, r3]
 80064fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006502:	4a09      	ldr	r2, [pc, #36]	@ (8006528 <HAL_RCC_ClockConfig+0x1c4>)
 8006504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006506:	4b09      	ldr	r3, [pc, #36]	@ (800652c <HAL_RCC_ClockConfig+0x1c8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f7fd fae6 	bl	8003adc <HAL_InitTick>

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	40023c00 	.word	0x40023c00
 8006520:	40023800 	.word	0x40023800
 8006524:	0800b6d4 	.word	0x0800b6d4
 8006528:	20000000 	.word	0x20000000
 800652c:	20000004 	.word	0x20000004

08006530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006534:	4b03      	ldr	r3, [pc, #12]	@ (8006544 <HAL_RCC_GetHCLKFreq+0x14>)
 8006536:	681b      	ldr	r3, [r3, #0]
}
 8006538:	4618      	mov	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	20000000 	.word	0x20000000

08006548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800654c:	f7ff fff0 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 8006550:	4602      	mov	r2, r0
 8006552:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	0a9b      	lsrs	r3, r3, #10
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	4903      	ldr	r1, [pc, #12]	@ (800656c <HAL_RCC_GetPCLK1Freq+0x24>)
 800655e:	5ccb      	ldrb	r3, [r1, r3]
 8006560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006564:	4618      	mov	r0, r3
 8006566:	bd80      	pop	{r7, pc}
 8006568:	40023800 	.word	0x40023800
 800656c:	0800b6e4 	.word	0x0800b6e4

08006570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006574:	f7ff ffdc 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 8006578:	4602      	mov	r2, r0
 800657a:	4b05      	ldr	r3, [pc, #20]	@ (8006590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	0b5b      	lsrs	r3, r3, #13
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	4903      	ldr	r1, [pc, #12]	@ (8006594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006586:	5ccb      	ldrb	r3, [r1, r3]
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800658c:	4618      	mov	r0, r3
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40023800 	.word	0x40023800
 8006594:	0800b6e4 	.word	0x0800b6e4

08006598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800659c:	b0ae      	sub	sp, #184	@ 0xb8
 800659e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065be:	4bcb      	ldr	r3, [pc, #812]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 030c 	and.w	r3, r3, #12
 80065c6:	2b0c      	cmp	r3, #12
 80065c8:	f200 8206 	bhi.w	80069d8 <HAL_RCC_GetSysClockFreq+0x440>
 80065cc:	a201      	add	r2, pc, #4	@ (adr r2, 80065d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	08006609 	.word	0x08006609
 80065d8:	080069d9 	.word	0x080069d9
 80065dc:	080069d9 	.word	0x080069d9
 80065e0:	080069d9 	.word	0x080069d9
 80065e4:	08006611 	.word	0x08006611
 80065e8:	080069d9 	.word	0x080069d9
 80065ec:	080069d9 	.word	0x080069d9
 80065f0:	080069d9 	.word	0x080069d9
 80065f4:	08006619 	.word	0x08006619
 80065f8:	080069d9 	.word	0x080069d9
 80065fc:	080069d9 	.word	0x080069d9
 8006600:	080069d9 	.word	0x080069d9
 8006604:	08006809 	.word	0x08006809
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006608:	4bb9      	ldr	r3, [pc, #740]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800660a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800660e:	e1e7      	b.n	80069e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006610:	4bb8      	ldr	r3, [pc, #736]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006612:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006616:	e1e3      	b.n	80069e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006618:	4bb4      	ldr	r3, [pc, #720]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006620:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006624:	4bb1      	ldr	r3, [pc, #708]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d071      	beq.n	8006714 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006630:	4bae      	ldr	r3, [pc, #696]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	099b      	lsrs	r3, r3, #6
 8006636:	2200      	movs	r2, #0
 8006638:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800663c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006640:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006648:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800664c:	2300      	movs	r3, #0
 800664e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006652:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006656:	4622      	mov	r2, r4
 8006658:	462b      	mov	r3, r5
 800665a:	f04f 0000 	mov.w	r0, #0
 800665e:	f04f 0100 	mov.w	r1, #0
 8006662:	0159      	lsls	r1, r3, #5
 8006664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006668:	0150      	lsls	r0, r2, #5
 800666a:	4602      	mov	r2, r0
 800666c:	460b      	mov	r3, r1
 800666e:	4621      	mov	r1, r4
 8006670:	1a51      	subs	r1, r2, r1
 8006672:	6439      	str	r1, [r7, #64]	@ 0x40
 8006674:	4629      	mov	r1, r5
 8006676:	eb63 0301 	sbc.w	r3, r3, r1
 800667a:	647b      	str	r3, [r7, #68]	@ 0x44
 800667c:	f04f 0200 	mov.w	r2, #0
 8006680:	f04f 0300 	mov.w	r3, #0
 8006684:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006688:	4649      	mov	r1, r9
 800668a:	018b      	lsls	r3, r1, #6
 800668c:	4641      	mov	r1, r8
 800668e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006692:	4641      	mov	r1, r8
 8006694:	018a      	lsls	r2, r1, #6
 8006696:	4641      	mov	r1, r8
 8006698:	1a51      	subs	r1, r2, r1
 800669a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800669c:	4649      	mov	r1, r9
 800669e:	eb63 0301 	sbc.w	r3, r3, r1
 80066a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80066b0:	4649      	mov	r1, r9
 80066b2:	00cb      	lsls	r3, r1, #3
 80066b4:	4641      	mov	r1, r8
 80066b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066ba:	4641      	mov	r1, r8
 80066bc:	00ca      	lsls	r2, r1, #3
 80066be:	4610      	mov	r0, r2
 80066c0:	4619      	mov	r1, r3
 80066c2:	4603      	mov	r3, r0
 80066c4:	4622      	mov	r2, r4
 80066c6:	189b      	adds	r3, r3, r2
 80066c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066ca:	462b      	mov	r3, r5
 80066cc:	460a      	mov	r2, r1
 80066ce:	eb42 0303 	adc.w	r3, r2, r3
 80066d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80066d4:	f04f 0200 	mov.w	r2, #0
 80066d8:	f04f 0300 	mov.w	r3, #0
 80066dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80066e0:	4629      	mov	r1, r5
 80066e2:	024b      	lsls	r3, r1, #9
 80066e4:	4621      	mov	r1, r4
 80066e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066ea:	4621      	mov	r1, r4
 80066ec:	024a      	lsls	r2, r1, #9
 80066ee:	4610      	mov	r0, r2
 80066f0:	4619      	mov	r1, r3
 80066f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006700:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006704:	f7fa fad0 	bl	8000ca8 <__aeabi_uldivmod>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	4613      	mov	r3, r2
 800670e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006712:	e067      	b.n	80067e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006714:	4b75      	ldr	r3, [pc, #468]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	099b      	lsrs	r3, r3, #6
 800671a:	2200      	movs	r2, #0
 800671c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006720:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006724:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800672c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800672e:	2300      	movs	r3, #0
 8006730:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006732:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006736:	4622      	mov	r2, r4
 8006738:	462b      	mov	r3, r5
 800673a:	f04f 0000 	mov.w	r0, #0
 800673e:	f04f 0100 	mov.w	r1, #0
 8006742:	0159      	lsls	r1, r3, #5
 8006744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006748:	0150      	lsls	r0, r2, #5
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	4621      	mov	r1, r4
 8006750:	1a51      	subs	r1, r2, r1
 8006752:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006754:	4629      	mov	r1, r5
 8006756:	eb63 0301 	sbc.w	r3, r3, r1
 800675a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	f04f 0300 	mov.w	r3, #0
 8006764:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006768:	4649      	mov	r1, r9
 800676a:	018b      	lsls	r3, r1, #6
 800676c:	4641      	mov	r1, r8
 800676e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006772:	4641      	mov	r1, r8
 8006774:	018a      	lsls	r2, r1, #6
 8006776:	4641      	mov	r1, r8
 8006778:	ebb2 0a01 	subs.w	sl, r2, r1
 800677c:	4649      	mov	r1, r9
 800677e:	eb63 0b01 	sbc.w	fp, r3, r1
 8006782:	f04f 0200 	mov.w	r2, #0
 8006786:	f04f 0300 	mov.w	r3, #0
 800678a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800678e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006792:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006796:	4692      	mov	sl, r2
 8006798:	469b      	mov	fp, r3
 800679a:	4623      	mov	r3, r4
 800679c:	eb1a 0303 	adds.w	r3, sl, r3
 80067a0:	623b      	str	r3, [r7, #32]
 80067a2:	462b      	mov	r3, r5
 80067a4:	eb4b 0303 	adc.w	r3, fp, r3
 80067a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067aa:	f04f 0200 	mov.w	r2, #0
 80067ae:	f04f 0300 	mov.w	r3, #0
 80067b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80067b6:	4629      	mov	r1, r5
 80067b8:	028b      	lsls	r3, r1, #10
 80067ba:	4621      	mov	r1, r4
 80067bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067c0:	4621      	mov	r1, r4
 80067c2:	028a      	lsls	r2, r1, #10
 80067c4:	4610      	mov	r0, r2
 80067c6:	4619      	mov	r1, r3
 80067c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067cc:	2200      	movs	r2, #0
 80067ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80067d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80067d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80067d6:	f7fa fa67 	bl	8000ca8 <__aeabi_uldivmod>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4613      	mov	r3, r2
 80067e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80067e4:	4b41      	ldr	r3, [pc, #260]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	0c1b      	lsrs	r3, r3, #16
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	3301      	adds	r3, #1
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80067f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80067fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80067fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006802:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006806:	e0eb      	b.n	80069e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006808:	4b38      	ldr	r3, [pc, #224]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006810:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006814:	4b35      	ldr	r3, [pc, #212]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d06b      	beq.n	80068f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006820:	4b32      	ldr	r3, [pc, #200]	@ (80068ec <HAL_RCC_GetSysClockFreq+0x354>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	099b      	lsrs	r3, r3, #6
 8006826:	2200      	movs	r2, #0
 8006828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800682a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800682c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800682e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006832:	663b      	str	r3, [r7, #96]	@ 0x60
 8006834:	2300      	movs	r3, #0
 8006836:	667b      	str	r3, [r7, #100]	@ 0x64
 8006838:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800683c:	4622      	mov	r2, r4
 800683e:	462b      	mov	r3, r5
 8006840:	f04f 0000 	mov.w	r0, #0
 8006844:	f04f 0100 	mov.w	r1, #0
 8006848:	0159      	lsls	r1, r3, #5
 800684a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800684e:	0150      	lsls	r0, r2, #5
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4621      	mov	r1, r4
 8006856:	1a51      	subs	r1, r2, r1
 8006858:	61b9      	str	r1, [r7, #24]
 800685a:	4629      	mov	r1, r5
 800685c:	eb63 0301 	sbc.w	r3, r3, r1
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	f04f 0300 	mov.w	r3, #0
 800686a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800686e:	4659      	mov	r1, fp
 8006870:	018b      	lsls	r3, r1, #6
 8006872:	4651      	mov	r1, sl
 8006874:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006878:	4651      	mov	r1, sl
 800687a:	018a      	lsls	r2, r1, #6
 800687c:	4651      	mov	r1, sl
 800687e:	ebb2 0801 	subs.w	r8, r2, r1
 8006882:	4659      	mov	r1, fp
 8006884:	eb63 0901 	sbc.w	r9, r3, r1
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006894:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006898:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800689c:	4690      	mov	r8, r2
 800689e:	4699      	mov	r9, r3
 80068a0:	4623      	mov	r3, r4
 80068a2:	eb18 0303 	adds.w	r3, r8, r3
 80068a6:	613b      	str	r3, [r7, #16]
 80068a8:	462b      	mov	r3, r5
 80068aa:	eb49 0303 	adc.w	r3, r9, r3
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80068bc:	4629      	mov	r1, r5
 80068be:	024b      	lsls	r3, r1, #9
 80068c0:	4621      	mov	r1, r4
 80068c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80068c6:	4621      	mov	r1, r4
 80068c8:	024a      	lsls	r2, r1, #9
 80068ca:	4610      	mov	r0, r2
 80068cc:	4619      	mov	r1, r3
 80068ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80068d2:	2200      	movs	r2, #0
 80068d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80068d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80068d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80068dc:	f7fa f9e4 	bl	8000ca8 <__aeabi_uldivmod>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4613      	mov	r3, r2
 80068e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068ea:	e065      	b.n	80069b8 <HAL_RCC_GetSysClockFreq+0x420>
 80068ec:	40023800 	.word	0x40023800
 80068f0:	00f42400 	.word	0x00f42400
 80068f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068f8:	4b3d      	ldr	r3, [pc, #244]	@ (80069f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	099b      	lsrs	r3, r3, #6
 80068fe:	2200      	movs	r2, #0
 8006900:	4618      	mov	r0, r3
 8006902:	4611      	mov	r1, r2
 8006904:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006908:	653b      	str	r3, [r7, #80]	@ 0x50
 800690a:	2300      	movs	r3, #0
 800690c:	657b      	str	r3, [r7, #84]	@ 0x54
 800690e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006912:	4642      	mov	r2, r8
 8006914:	464b      	mov	r3, r9
 8006916:	f04f 0000 	mov.w	r0, #0
 800691a:	f04f 0100 	mov.w	r1, #0
 800691e:	0159      	lsls	r1, r3, #5
 8006920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006924:	0150      	lsls	r0, r2, #5
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4641      	mov	r1, r8
 800692c:	1a51      	subs	r1, r2, r1
 800692e:	60b9      	str	r1, [r7, #8]
 8006930:	4649      	mov	r1, r9
 8006932:	eb63 0301 	sbc.w	r3, r3, r1
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006944:	4659      	mov	r1, fp
 8006946:	018b      	lsls	r3, r1, #6
 8006948:	4651      	mov	r1, sl
 800694a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800694e:	4651      	mov	r1, sl
 8006950:	018a      	lsls	r2, r1, #6
 8006952:	4651      	mov	r1, sl
 8006954:	1a54      	subs	r4, r2, r1
 8006956:	4659      	mov	r1, fp
 8006958:	eb63 0501 	sbc.w	r5, r3, r1
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	00eb      	lsls	r3, r5, #3
 8006966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800696a:	00e2      	lsls	r2, r4, #3
 800696c:	4614      	mov	r4, r2
 800696e:	461d      	mov	r5, r3
 8006970:	4643      	mov	r3, r8
 8006972:	18e3      	adds	r3, r4, r3
 8006974:	603b      	str	r3, [r7, #0]
 8006976:	464b      	mov	r3, r9
 8006978:	eb45 0303 	adc.w	r3, r5, r3
 800697c:	607b      	str	r3, [r7, #4]
 800697e:	f04f 0200 	mov.w	r2, #0
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	e9d7 4500 	ldrd	r4, r5, [r7]
 800698a:	4629      	mov	r1, r5
 800698c:	028b      	lsls	r3, r1, #10
 800698e:	4621      	mov	r1, r4
 8006990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006994:	4621      	mov	r1, r4
 8006996:	028a      	lsls	r2, r1, #10
 8006998:	4610      	mov	r0, r2
 800699a:	4619      	mov	r1, r3
 800699c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069a0:	2200      	movs	r2, #0
 80069a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069a4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80069a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80069aa:	f7fa f97d 	bl	8000ca8 <__aeabi_uldivmod>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4613      	mov	r3, r2
 80069b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80069b8:	4b0d      	ldr	r3, [pc, #52]	@ (80069f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	0f1b      	lsrs	r3, r3, #28
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80069c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80069ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80069ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80069d6:	e003      	b.n	80069e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069d8:	4b06      	ldr	r3, [pc, #24]	@ (80069f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80069da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80069de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	37b8      	adds	r7, #184	@ 0xb8
 80069e8:	46bd      	mov	sp, r7
 80069ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ee:	bf00      	nop
 80069f0:	40023800 	.word	0x40023800
 80069f4:	00f42400 	.word	0x00f42400

080069f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e28d      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 8083 	beq.w	8006b1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006a18:	4b94      	ldr	r3, [pc, #592]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 030c 	and.w	r3, r3, #12
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d019      	beq.n	8006a58 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006a24:	4b91      	ldr	r3, [pc, #580]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 030c 	and.w	r3, r3, #12
        || \
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d106      	bne.n	8006a3e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006a30:	4b8e      	ldr	r3, [pc, #568]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a3c:	d00c      	beq.n	8006a58 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a3e:	4b8b      	ldr	r3, [pc, #556]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006a46:	2b0c      	cmp	r3, #12
 8006a48:	d112      	bne.n	8006a70 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a4a:	4b88      	ldr	r3, [pc, #544]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a56:	d10b      	bne.n	8006a70 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a58:	4b84      	ldr	r3, [pc, #528]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d05b      	beq.n	8006b1c <HAL_RCC_OscConfig+0x124>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d157      	bne.n	8006b1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e25a      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a78:	d106      	bne.n	8006a88 <HAL_RCC_OscConfig+0x90>
 8006a7a:	4b7c      	ldr	r3, [pc, #496]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a7b      	ldr	r2, [pc, #492]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	e01d      	b.n	8006ac4 <HAL_RCC_OscConfig+0xcc>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a90:	d10c      	bne.n	8006aac <HAL_RCC_OscConfig+0xb4>
 8006a92:	4b76      	ldr	r3, [pc, #472]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a75      	ldr	r2, [pc, #468]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	4b73      	ldr	r3, [pc, #460]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a72      	ldr	r2, [pc, #456]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	e00b      	b.n	8006ac4 <HAL_RCC_OscConfig+0xcc>
 8006aac:	4b6f      	ldr	r3, [pc, #444]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a6e      	ldr	r2, [pc, #440]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	4b6c      	ldr	r3, [pc, #432]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a6b      	ldr	r2, [pc, #428]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d013      	beq.n	8006af4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006acc:	f7fd f84a 	bl	8003b64 <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ad2:	e008      	b.n	8006ae6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ad4:	f7fd f846 	bl	8003b64 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b64      	cmp	r3, #100	@ 0x64
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e21f      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ae6:	4b61      	ldr	r3, [pc, #388]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0f0      	beq.n	8006ad4 <HAL_RCC_OscConfig+0xdc>
 8006af2:	e014      	b.n	8006b1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af4:	f7fd f836 	bl	8003b64 <HAL_GetTick>
 8006af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006afc:	f7fd f832 	bl	8003b64 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b64      	cmp	r3, #100	@ 0x64
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e20b      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b0e:	4b57      	ldr	r3, [pc, #348]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1f0      	bne.n	8006afc <HAL_RCC_OscConfig+0x104>
 8006b1a:	e000      	b.n	8006b1e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d06f      	beq.n	8006c0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006b2a:	4b50      	ldr	r3, [pc, #320]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f003 030c 	and.w	r3, r3, #12
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d017      	beq.n	8006b66 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006b36:	4b4d      	ldr	r3, [pc, #308]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f003 030c 	and.w	r3, r3, #12
        || \
 8006b3e:	2b08      	cmp	r3, #8
 8006b40:	d105      	bne.n	8006b4e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006b42:	4b4a      	ldr	r3, [pc, #296]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00b      	beq.n	8006b66 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b4e:	4b47      	ldr	r3, [pc, #284]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006b56:	2b0c      	cmp	r3, #12
 8006b58:	d11c      	bne.n	8006b94 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b5a:	4b44      	ldr	r3, [pc, #272]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d116      	bne.n	8006b94 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b66:	4b41      	ldr	r3, [pc, #260]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d005      	beq.n	8006b7e <HAL_RCC_OscConfig+0x186>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d001      	beq.n	8006b7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e1d3      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	4937      	ldr	r1, [pc, #220]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b92:	e03a      	b.n	8006c0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d020      	beq.n	8006bde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b9c:	4b34      	ldr	r3, [pc, #208]	@ (8006c70 <HAL_RCC_OscConfig+0x278>)
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba2:	f7fc ffdf 	bl	8003b64 <HAL_GetTick>
 8006ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ba8:	e008      	b.n	8006bbc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006baa:	f7fc ffdb 	bl	8003b64 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d901      	bls.n	8006bbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e1b4      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0f0      	beq.n	8006baa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bc8:	4b28      	ldr	r3, [pc, #160]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	00db      	lsls	r3, r3, #3
 8006bd6:	4925      	ldr	r1, [pc, #148]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	600b      	str	r3, [r1, #0]
 8006bdc:	e015      	b.n	8006c0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bde:	4b24      	ldr	r3, [pc, #144]	@ (8006c70 <HAL_RCC_OscConfig+0x278>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be4:	f7fc ffbe 	bl	8003b64 <HAL_GetTick>
 8006be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bec:	f7fc ffba 	bl	8003b64 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e193      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1f0      	bne.n	8006bec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0308 	and.w	r3, r3, #8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d036      	beq.n	8006c84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d016      	beq.n	8006c4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c1e:	4b15      	ldr	r3, [pc, #84]	@ (8006c74 <HAL_RCC_OscConfig+0x27c>)
 8006c20:	2201      	movs	r2, #1
 8006c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c24:	f7fc ff9e 	bl	8003b64 <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c2c:	f7fc ff9a 	bl	8003b64 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e173      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c6c <HAL_RCC_OscConfig+0x274>)
 8006c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0f0      	beq.n	8006c2c <HAL_RCC_OscConfig+0x234>
 8006c4a:	e01b      	b.n	8006c84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c4c:	4b09      	ldr	r3, [pc, #36]	@ (8006c74 <HAL_RCC_OscConfig+0x27c>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c52:	f7fc ff87 	bl	8003b64 <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c58:	e00e      	b.n	8006c78 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c5a:	f7fc ff83 	bl	8003b64 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d907      	bls.n	8006c78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e15c      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
 8006c6c:	40023800 	.word	0x40023800
 8006c70:	42470000 	.word	0x42470000
 8006c74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c78:	4b8a      	ldr	r3, [pc, #552]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1ea      	bne.n	8006c5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 8097 	beq.w	8006dc0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c92:	2300      	movs	r3, #0
 8006c94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c96:	4b83      	ldr	r3, [pc, #524]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10f      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60bb      	str	r3, [r7, #8]
 8006ca6:	4b7f      	ldr	r3, [pc, #508]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006caa:	4a7e      	ldr	r2, [pc, #504]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cb2:	4b7c      	ldr	r3, [pc, #496]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cba:	60bb      	str	r3, [r7, #8]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cc2:	4b79      	ldr	r3, [pc, #484]	@ (8006ea8 <HAL_RCC_OscConfig+0x4b0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d118      	bne.n	8006d00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cce:	4b76      	ldr	r3, [pc, #472]	@ (8006ea8 <HAL_RCC_OscConfig+0x4b0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a75      	ldr	r2, [pc, #468]	@ (8006ea8 <HAL_RCC_OscConfig+0x4b0>)
 8006cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cda:	f7fc ff43 	bl	8003b64 <HAL_GetTick>
 8006cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ce0:	e008      	b.n	8006cf4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ce2:	f7fc ff3f 	bl	8003b64 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e118      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cf4:	4b6c      	ldr	r3, [pc, #432]	@ (8006ea8 <HAL_RCC_OscConfig+0x4b0>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0f0      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d106      	bne.n	8006d16 <HAL_RCC_OscConfig+0x31e>
 8006d08:	4b66      	ldr	r3, [pc, #408]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d0c:	4a65      	ldr	r2, [pc, #404]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d0e:	f043 0301 	orr.w	r3, r3, #1
 8006d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d14:	e01c      	b.n	8006d50 <HAL_RCC_OscConfig+0x358>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2b05      	cmp	r3, #5
 8006d1c:	d10c      	bne.n	8006d38 <HAL_RCC_OscConfig+0x340>
 8006d1e:	4b61      	ldr	r3, [pc, #388]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d22:	4a60      	ldr	r2, [pc, #384]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d24:	f043 0304 	orr.w	r3, r3, #4
 8006d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d2a:	4b5e      	ldr	r3, [pc, #376]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d2e:	4a5d      	ldr	r2, [pc, #372]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d30:	f043 0301 	orr.w	r3, r3, #1
 8006d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d36:	e00b      	b.n	8006d50 <HAL_RCC_OscConfig+0x358>
 8006d38:	4b5a      	ldr	r3, [pc, #360]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d3c:	4a59      	ldr	r2, [pc, #356]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d3e:	f023 0301 	bic.w	r3, r3, #1
 8006d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d44:	4b57      	ldr	r3, [pc, #348]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d48:	4a56      	ldr	r2, [pc, #344]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d4a:	f023 0304 	bic.w	r3, r3, #4
 8006d4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d015      	beq.n	8006d84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d58:	f7fc ff04 	bl	8003b64 <HAL_GetTick>
 8006d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d5e:	e00a      	b.n	8006d76 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d60:	f7fc ff00 	bl	8003b64 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e0d7      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d76:	4b4b      	ldr	r3, [pc, #300]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0ee      	beq.n	8006d60 <HAL_RCC_OscConfig+0x368>
 8006d82:	e014      	b.n	8006dae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d84:	f7fc feee 	bl	8003b64 <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d8a:	e00a      	b.n	8006da2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d8c:	f7fc feea 	bl	8003b64 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e0c1      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006da2:	4b40      	ldr	r3, [pc, #256]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1ee      	bne.n	8006d8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d105      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006db4:	4b3b      	ldr	r3, [pc, #236]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db8:	4a3a      	ldr	r2, [pc, #232]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006dba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 80ad 	beq.w	8006f24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006dca:	4b36      	ldr	r3, [pc, #216]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f003 030c 	and.w	r3, r3, #12
 8006dd2:	2b08      	cmp	r3, #8
 8006dd4:	d060      	beq.n	8006e98 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d145      	bne.n	8006e6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dde:	4b33      	ldr	r3, [pc, #204]	@ (8006eac <HAL_RCC_OscConfig+0x4b4>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de4:	f7fc febe 	bl	8003b64 <HAL_GetTick>
 8006de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dec:	f7fc feba 	bl	8003b64 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e093      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dfe:	4b29      	ldr	r3, [pc, #164]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1f0      	bne.n	8006dec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	69da      	ldr	r2, [r3, #28]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	431a      	orrs	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e18:	019b      	lsls	r3, r3, #6
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e20:	085b      	lsrs	r3, r3, #1
 8006e22:	3b01      	subs	r3, #1
 8006e24:	041b      	lsls	r3, r3, #16
 8006e26:	431a      	orrs	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2c:	061b      	lsls	r3, r3, #24
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e34:	071b      	lsls	r3, r3, #28
 8006e36:	491b      	ldr	r1, [pc, #108]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8006eac <HAL_RCC_OscConfig+0x4b4>)
 8006e3e:	2201      	movs	r2, #1
 8006e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e42:	f7fc fe8f 	bl	8003b64 <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e4a:	f7fc fe8b 	bl	8003b64 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e064      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e5c:	4b11      	ldr	r3, [pc, #68]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0f0      	beq.n	8006e4a <HAL_RCC_OscConfig+0x452>
 8006e68:	e05c      	b.n	8006f24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e6a:	4b10      	ldr	r3, [pc, #64]	@ (8006eac <HAL_RCC_OscConfig+0x4b4>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e70:	f7fc fe78 	bl	8003b64 <HAL_GetTick>
 8006e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e76:	e008      	b.n	8006e8a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e78:	f7fc fe74 	bl	8003b64 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d901      	bls.n	8006e8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e04d      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e8a:	4b06      	ldr	r3, [pc, #24]	@ (8006ea4 <HAL_RCC_OscConfig+0x4ac>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1f0      	bne.n	8006e78 <HAL_RCC_OscConfig+0x480>
 8006e96:	e045      	b.n	8006f24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d107      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e040      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
 8006ea4:	40023800 	.word	0x40023800
 8006ea8:	40007000 	.word	0x40007000
 8006eac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8006f30 <HAL_RCC_OscConfig+0x538>)
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d030      	beq.n	8006f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d129      	bne.n	8006f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d122      	bne.n	8006f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ee6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d119      	bne.n	8006f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef6:	085b      	lsrs	r3, r3, #1
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d10f      	bne.n	8006f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d107      	bne.n	8006f20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d001      	beq.n	8006f24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e000      	b.n	8006f26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	40023800 	.word	0x40023800

08006f34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e041      	b.n	8006fca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d106      	bne.n	8006f60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7fb ffec 	bl	8002f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3304      	adds	r3, #4
 8006f70:	4619      	mov	r1, r3
 8006f72:	4610      	mov	r0, r2
 8006f74:	f000 faec 	bl	8007550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d109      	bne.n	8006ff8 <HAL_TIM_PWM_Start+0x24>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	bf14      	ite	ne
 8006ff0:	2301      	movne	r3, #1
 8006ff2:	2300      	moveq	r3, #0
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	e022      	b.n	800703e <HAL_TIM_PWM_Start+0x6a>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	2b04      	cmp	r3, #4
 8006ffc:	d109      	bne.n	8007012 <HAL_TIM_PWM_Start+0x3e>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b01      	cmp	r3, #1
 8007008:	bf14      	ite	ne
 800700a:	2301      	movne	r3, #1
 800700c:	2300      	moveq	r3, #0
 800700e:	b2db      	uxtb	r3, r3
 8007010:	e015      	b.n	800703e <HAL_TIM_PWM_Start+0x6a>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b08      	cmp	r3, #8
 8007016:	d109      	bne.n	800702c <HAL_TIM_PWM_Start+0x58>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b01      	cmp	r3, #1
 8007022:	bf14      	ite	ne
 8007024:	2301      	movne	r3, #1
 8007026:	2300      	moveq	r3, #0
 8007028:	b2db      	uxtb	r3, r3
 800702a:	e008      	b.n	800703e <HAL_TIM_PWM_Start+0x6a>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b01      	cmp	r3, #1
 8007036:	bf14      	ite	ne
 8007038:	2301      	movne	r3, #1
 800703a:	2300      	moveq	r3, #0
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e07c      	b.n	8007140 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d104      	bne.n	8007056 <HAL_TIM_PWM_Start+0x82>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007054:	e013      	b.n	800707e <HAL_TIM_PWM_Start+0xaa>
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b04      	cmp	r3, #4
 800705a:	d104      	bne.n	8007066 <HAL_TIM_PWM_Start+0x92>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2202      	movs	r2, #2
 8007060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007064:	e00b      	b.n	800707e <HAL_TIM_PWM_Start+0xaa>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b08      	cmp	r3, #8
 800706a:	d104      	bne.n	8007076 <HAL_TIM_PWM_Start+0xa2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007074:	e003      	b.n	800707e <HAL_TIM_PWM_Start+0xaa>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2202      	movs	r2, #2
 800707a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2201      	movs	r2, #1
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	4618      	mov	r0, r3
 8007088:	f000 fcbe 	bl	8007a08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a2d      	ldr	r2, [pc, #180]	@ (8007148 <HAL_TIM_PWM_Start+0x174>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d004      	beq.n	80070a0 <HAL_TIM_PWM_Start+0xcc>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a2c      	ldr	r2, [pc, #176]	@ (800714c <HAL_TIM_PWM_Start+0x178>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d101      	bne.n	80070a4 <HAL_TIM_PWM_Start+0xd0>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e000      	b.n	80070a6 <HAL_TIM_PWM_Start+0xd2>
 80070a4:	2300      	movs	r3, #0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d007      	beq.n	80070ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a22      	ldr	r2, [pc, #136]	@ (8007148 <HAL_TIM_PWM_Start+0x174>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d022      	beq.n	800710a <HAL_TIM_PWM_Start+0x136>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070cc:	d01d      	beq.n	800710a <HAL_TIM_PWM_Start+0x136>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a1f      	ldr	r2, [pc, #124]	@ (8007150 <HAL_TIM_PWM_Start+0x17c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d018      	beq.n	800710a <HAL_TIM_PWM_Start+0x136>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007154 <HAL_TIM_PWM_Start+0x180>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d013      	beq.n	800710a <HAL_TIM_PWM_Start+0x136>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1c      	ldr	r2, [pc, #112]	@ (8007158 <HAL_TIM_PWM_Start+0x184>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00e      	beq.n	800710a <HAL_TIM_PWM_Start+0x136>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a16      	ldr	r2, [pc, #88]	@ (800714c <HAL_TIM_PWM_Start+0x178>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d009      	beq.n	800710a <HAL_TIM_PWM_Start+0x136>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a18      	ldr	r2, [pc, #96]	@ (800715c <HAL_TIM_PWM_Start+0x188>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d004      	beq.n	800710a <HAL_TIM_PWM_Start+0x136>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a16      	ldr	r2, [pc, #88]	@ (8007160 <HAL_TIM_PWM_Start+0x18c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d111      	bne.n	800712e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f003 0307 	and.w	r3, r3, #7
 8007114:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b06      	cmp	r3, #6
 800711a:	d010      	beq.n	800713e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0201 	orr.w	r2, r2, #1
 800712a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712c:	e007      	b.n	800713e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f042 0201 	orr.w	r2, r2, #1
 800713c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	40010000 	.word	0x40010000
 800714c:	40010400 	.word	0x40010400
 8007150:	40000400 	.word	0x40000400
 8007154:	40000800 	.word	0x40000800
 8007158:	40000c00 	.word	0x40000c00
 800715c:	40014000 	.word	0x40014000
 8007160:	40001800 	.word	0x40001800

08007164 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e097      	b.n	80072a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7fb fe59 	bl	8002e44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	6812      	ldr	r2, [r2, #0]
 80071a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071a8:	f023 0307 	bic.w	r3, r3, #7
 80071ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3304      	adds	r3, #4
 80071b6:	4619      	mov	r1, r3
 80071b8:	4610      	mov	r0, r2
 80071ba:	f000 f9c9 	bl	8007550 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071e6:	f023 0303 	bic.w	r3, r3, #3
 80071ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	021b      	lsls	r3, r3, #8
 80071f6:	4313      	orrs	r3, r2
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007204:	f023 030c 	bic.w	r3, r3, #12
 8007208:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007210:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68da      	ldr	r2, [r3, #12]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	021b      	lsls	r3, r3, #8
 8007220:	4313      	orrs	r3, r2
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	4313      	orrs	r3, r2
 8007226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	011a      	lsls	r2, r3, #4
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	031b      	lsls	r3, r3, #12
 8007234:	4313      	orrs	r3, r2
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	4313      	orrs	r3, r2
 800723a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007242:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800724a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	011b      	lsls	r3, r3, #4
 8007256:	4313      	orrs	r3, r2
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80072c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80072d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d110      	bne.n	8007302 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d102      	bne.n	80072ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80072e6:	7b7b      	ldrb	r3, [r7, #13]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d001      	beq.n	80072f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e069      	b.n	80073c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007300:	e031      	b.n	8007366 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b04      	cmp	r3, #4
 8007306:	d110      	bne.n	800732a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007308:	7bbb      	ldrb	r3, [r7, #14]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d102      	bne.n	8007314 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800730e:	7b3b      	ldrb	r3, [r7, #12]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d001      	beq.n	8007318 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e055      	b.n	80073c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2202      	movs	r2, #2
 8007324:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007328:	e01d      	b.n	8007366 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d108      	bne.n	8007342 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d105      	bne.n	8007342 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007336:	7b7b      	ldrb	r3, [r7, #13]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d102      	bne.n	8007342 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800733c:	7b3b      	ldrb	r3, [r7, #12]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d001      	beq.n	8007346 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e03e      	b.n	80073c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2202      	movs	r2, #2
 800734a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2202      	movs	r2, #2
 8007352:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2202      	movs	r2, #2
 800735a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2202      	movs	r2, #2
 8007362:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <HAL_TIM_Encoder_Start+0xc4>
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	2b04      	cmp	r3, #4
 8007370:	d008      	beq.n	8007384 <HAL_TIM_Encoder_Start+0xd4>
 8007372:	e00f      	b.n	8007394 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2201      	movs	r2, #1
 800737a:	2100      	movs	r1, #0
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fb43 	bl	8007a08 <TIM_CCxChannelCmd>
      break;
 8007382:	e016      	b.n	80073b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2201      	movs	r2, #1
 800738a:	2104      	movs	r1, #4
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fb3b 	bl	8007a08 <TIM_CCxChannelCmd>
      break;
 8007392:	e00e      	b.n	80073b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2201      	movs	r2, #1
 800739a:	2100      	movs	r1, #0
 800739c:	4618      	mov	r0, r3
 800739e:	f000 fb33 	bl	8007a08 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2201      	movs	r2, #1
 80073a8:	2104      	movs	r1, #4
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fb2c 	bl	8007a08 <TIM_CCxChannelCmd>
      break;
 80073b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f042 0201 	orr.w	r2, r2, #1
 80073c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d101      	bne.n	80073ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073e6:	2302      	movs	r3, #2
 80073e8:	e0ae      	b.n	8007548 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b0c      	cmp	r3, #12
 80073f6:	f200 809f 	bhi.w	8007538 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80073fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007400 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007400:	08007435 	.word	0x08007435
 8007404:	08007539 	.word	0x08007539
 8007408:	08007539 	.word	0x08007539
 800740c:	08007539 	.word	0x08007539
 8007410:	08007475 	.word	0x08007475
 8007414:	08007539 	.word	0x08007539
 8007418:	08007539 	.word	0x08007539
 800741c:	08007539 	.word	0x08007539
 8007420:	080074b7 	.word	0x080074b7
 8007424:	08007539 	.word	0x08007539
 8007428:	08007539 	.word	0x08007539
 800742c:	08007539 	.word	0x08007539
 8007430:	080074f7 	.word	0x080074f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68b9      	ldr	r1, [r7, #8]
 800743a:	4618      	mov	r0, r3
 800743c:	f000 f934 	bl	80076a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699a      	ldr	r2, [r3, #24]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f042 0208 	orr.w	r2, r2, #8
 800744e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	699a      	ldr	r2, [r3, #24]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0204 	bic.w	r2, r2, #4
 800745e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6999      	ldr	r1, [r3, #24]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	691a      	ldr	r2, [r3, #16]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	619a      	str	r2, [r3, #24]
      break;
 8007472:	e064      	b.n	800753e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68b9      	ldr	r1, [r7, #8]
 800747a:	4618      	mov	r0, r3
 800747c:	f000 f984 	bl	8007788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	699a      	ldr	r2, [r3, #24]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800748e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699a      	ldr	r2, [r3, #24]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800749e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6999      	ldr	r1, [r3, #24]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	021a      	lsls	r2, r3, #8
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	619a      	str	r2, [r3, #24]
      break;
 80074b4:	e043      	b.n	800753e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68b9      	ldr	r1, [r7, #8]
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 f9d9 	bl	8007874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69da      	ldr	r2, [r3, #28]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f042 0208 	orr.w	r2, r2, #8
 80074d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	69da      	ldr	r2, [r3, #28]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0204 	bic.w	r2, r2, #4
 80074e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69d9      	ldr	r1, [r3, #28]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	691a      	ldr	r2, [r3, #16]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	61da      	str	r2, [r3, #28]
      break;
 80074f4:	e023      	b.n	800753e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 fa2d 	bl	800795c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	69da      	ldr	r2, [r3, #28]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	69da      	ldr	r2, [r3, #28]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	69d9      	ldr	r1, [r3, #28]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	021a      	lsls	r2, r3, #8
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	61da      	str	r2, [r3, #28]
      break;
 8007536:	e002      	b.n	800753e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	75fb      	strb	r3, [r7, #23]
      break;
 800753c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007546:	7dfb      	ldrb	r3, [r7, #23]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a46      	ldr	r2, [pc, #280]	@ (800767c <TIM_Base_SetConfig+0x12c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d013      	beq.n	8007590 <TIM_Base_SetConfig+0x40>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800756e:	d00f      	beq.n	8007590 <TIM_Base_SetConfig+0x40>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a43      	ldr	r2, [pc, #268]	@ (8007680 <TIM_Base_SetConfig+0x130>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00b      	beq.n	8007590 <TIM_Base_SetConfig+0x40>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a42      	ldr	r2, [pc, #264]	@ (8007684 <TIM_Base_SetConfig+0x134>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d007      	beq.n	8007590 <TIM_Base_SetConfig+0x40>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a41      	ldr	r2, [pc, #260]	@ (8007688 <TIM_Base_SetConfig+0x138>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d003      	beq.n	8007590 <TIM_Base_SetConfig+0x40>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a40      	ldr	r2, [pc, #256]	@ (800768c <TIM_Base_SetConfig+0x13c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d108      	bne.n	80075a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	4313      	orrs	r3, r2
 80075a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a35      	ldr	r2, [pc, #212]	@ (800767c <TIM_Base_SetConfig+0x12c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d02b      	beq.n	8007602 <TIM_Base_SetConfig+0xb2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075b0:	d027      	beq.n	8007602 <TIM_Base_SetConfig+0xb2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a32      	ldr	r2, [pc, #200]	@ (8007680 <TIM_Base_SetConfig+0x130>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d023      	beq.n	8007602 <TIM_Base_SetConfig+0xb2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a31      	ldr	r2, [pc, #196]	@ (8007684 <TIM_Base_SetConfig+0x134>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d01f      	beq.n	8007602 <TIM_Base_SetConfig+0xb2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a30      	ldr	r2, [pc, #192]	@ (8007688 <TIM_Base_SetConfig+0x138>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d01b      	beq.n	8007602 <TIM_Base_SetConfig+0xb2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a2f      	ldr	r2, [pc, #188]	@ (800768c <TIM_Base_SetConfig+0x13c>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d017      	beq.n	8007602 <TIM_Base_SetConfig+0xb2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a2e      	ldr	r2, [pc, #184]	@ (8007690 <TIM_Base_SetConfig+0x140>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d013      	beq.n	8007602 <TIM_Base_SetConfig+0xb2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a2d      	ldr	r2, [pc, #180]	@ (8007694 <TIM_Base_SetConfig+0x144>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d00f      	beq.n	8007602 <TIM_Base_SetConfig+0xb2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a2c      	ldr	r2, [pc, #176]	@ (8007698 <TIM_Base_SetConfig+0x148>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d00b      	beq.n	8007602 <TIM_Base_SetConfig+0xb2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a2b      	ldr	r2, [pc, #172]	@ (800769c <TIM_Base_SetConfig+0x14c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d007      	beq.n	8007602 <TIM_Base_SetConfig+0xb2>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a2a      	ldr	r2, [pc, #168]	@ (80076a0 <TIM_Base_SetConfig+0x150>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d003      	beq.n	8007602 <TIM_Base_SetConfig+0xb2>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a29      	ldr	r2, [pc, #164]	@ (80076a4 <TIM_Base_SetConfig+0x154>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d108      	bne.n	8007614 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	4313      	orrs	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	4313      	orrs	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a10      	ldr	r2, [pc, #64]	@ (800767c <TIM_Base_SetConfig+0x12c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d003      	beq.n	8007648 <TIM_Base_SetConfig+0xf8>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a12      	ldr	r2, [pc, #72]	@ (800768c <TIM_Base_SetConfig+0x13c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d103      	bne.n	8007650 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	691a      	ldr	r2, [r3, #16]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b01      	cmp	r3, #1
 8007660:	d105      	bne.n	800766e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	f023 0201 	bic.w	r2, r3, #1
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	611a      	str	r2, [r3, #16]
  }
}
 800766e:	bf00      	nop
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	40010000 	.word	0x40010000
 8007680:	40000400 	.word	0x40000400
 8007684:	40000800 	.word	0x40000800
 8007688:	40000c00 	.word	0x40000c00
 800768c:	40010400 	.word	0x40010400
 8007690:	40014000 	.word	0x40014000
 8007694:	40014400 	.word	0x40014400
 8007698:	40014800 	.word	0x40014800
 800769c:	40001800 	.word	0x40001800
 80076a0:	40001c00 	.word	0x40001c00
 80076a4:	40002000 	.word	0x40002000

080076a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	f023 0201 	bic.w	r2, r3, #1
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0303 	bic.w	r3, r3, #3
 80076de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f023 0302 	bic.w	r3, r3, #2
 80076f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a20      	ldr	r2, [pc, #128]	@ (8007780 <TIM_OC1_SetConfig+0xd8>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d003      	beq.n	800770c <TIM_OC1_SetConfig+0x64>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a1f      	ldr	r2, [pc, #124]	@ (8007784 <TIM_OC1_SetConfig+0xdc>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d10c      	bne.n	8007726 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f023 0308 	bic.w	r3, r3, #8
 8007712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	4313      	orrs	r3, r2
 800771c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f023 0304 	bic.w	r3, r3, #4
 8007724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a15      	ldr	r2, [pc, #84]	@ (8007780 <TIM_OC1_SetConfig+0xd8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d003      	beq.n	8007736 <TIM_OC1_SetConfig+0x8e>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a14      	ldr	r2, [pc, #80]	@ (8007784 <TIM_OC1_SetConfig+0xdc>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d111      	bne.n	800775a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800773c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	4313      	orrs	r3, r2
 800774e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	4313      	orrs	r3, r2
 8007758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	621a      	str	r2, [r3, #32]
}
 8007774:	bf00      	nop
 8007776:	371c      	adds	r7, #28
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	40010000 	.word	0x40010000
 8007784:	40010400 	.word	0x40010400

08007788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	f023 0210 	bic.w	r2, r3, #16
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	021b      	lsls	r3, r3, #8
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f023 0320 	bic.w	r3, r3, #32
 80077d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	4313      	orrs	r3, r2
 80077de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a22      	ldr	r2, [pc, #136]	@ (800786c <TIM_OC2_SetConfig+0xe4>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d003      	beq.n	80077f0 <TIM_OC2_SetConfig+0x68>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a21      	ldr	r2, [pc, #132]	@ (8007870 <TIM_OC2_SetConfig+0xe8>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d10d      	bne.n	800780c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4313      	orrs	r3, r2
 8007802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800780a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a17      	ldr	r2, [pc, #92]	@ (800786c <TIM_OC2_SetConfig+0xe4>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d003      	beq.n	800781c <TIM_OC2_SetConfig+0x94>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a16      	ldr	r2, [pc, #88]	@ (8007870 <TIM_OC2_SetConfig+0xe8>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d113      	bne.n	8007844 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800782a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	4313      	orrs	r3, r2
 8007842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	621a      	str	r2, [r3, #32]
}
 800785e:	bf00      	nop
 8007860:	371c      	adds	r7, #28
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	40010000 	.word	0x40010000
 8007870:	40010400 	.word	0x40010400

08007874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f023 0303 	bic.w	r3, r3, #3
 80078aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80078bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	021b      	lsls	r3, r3, #8
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a21      	ldr	r2, [pc, #132]	@ (8007954 <TIM_OC3_SetConfig+0xe0>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d003      	beq.n	80078da <TIM_OC3_SetConfig+0x66>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a20      	ldr	r2, [pc, #128]	@ (8007958 <TIM_OC3_SetConfig+0xe4>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d10d      	bne.n	80078f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80078e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	021b      	lsls	r3, r3, #8
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80078f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a16      	ldr	r2, [pc, #88]	@ (8007954 <TIM_OC3_SetConfig+0xe0>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d003      	beq.n	8007906 <TIM_OC3_SetConfig+0x92>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a15      	ldr	r2, [pc, #84]	@ (8007958 <TIM_OC3_SetConfig+0xe4>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d113      	bne.n	800792e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800790c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	011b      	lsls	r3, r3, #4
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	4313      	orrs	r3, r2
 8007920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	4313      	orrs	r3, r2
 800792c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	621a      	str	r2, [r3, #32]
}
 8007948:	bf00      	nop
 800794a:	371c      	adds	r7, #28
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	40010000 	.word	0x40010000
 8007958:	40010400 	.word	0x40010400

0800795c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800798a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	021b      	lsls	r3, r3, #8
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	4313      	orrs	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80079a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	031b      	lsls	r3, r3, #12
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a12      	ldr	r2, [pc, #72]	@ (8007a00 <TIM_OC4_SetConfig+0xa4>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d003      	beq.n	80079c4 <TIM_OC4_SetConfig+0x68>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a11      	ldr	r2, [pc, #68]	@ (8007a04 <TIM_OC4_SetConfig+0xa8>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d109      	bne.n	80079d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80079ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	019b      	lsls	r3, r3, #6
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685a      	ldr	r2, [r3, #4]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	621a      	str	r2, [r3, #32]
}
 80079f2:	bf00      	nop
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	40010000 	.word	0x40010000
 8007a04:	40010400 	.word	0x40010400

08007a08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	f003 031f 	and.w	r3, r3, #31
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1a      	ldr	r2, [r3, #32]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	43db      	mvns	r3, r3
 8007a2a:	401a      	ands	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a1a      	ldr	r2, [r3, #32]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f003 031f 	and.w	r3, r3, #31
 8007a3a:	6879      	ldr	r1, [r7, #4]
 8007a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a40:	431a      	orrs	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	621a      	str	r2, [r3, #32]
}
 8007a46:	bf00      	nop
 8007a48:	371c      	adds	r7, #28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
	...

08007a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d101      	bne.n	8007a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e05a      	b.n	8007b22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a21      	ldr	r2, [pc, #132]	@ (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d022      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ab8:	d01d      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a1d      	ldr	r2, [pc, #116]	@ (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d018      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d013      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a1a      	ldr	r2, [pc, #104]	@ (8007b3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d00e      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a18      	ldr	r2, [pc, #96]	@ (8007b40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d009      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a17      	ldr	r2, [pc, #92]	@ (8007b44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d004      	beq.n	8007af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a15      	ldr	r2, [pc, #84]	@ (8007b48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d10c      	bne.n	8007b10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007afc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	40010000 	.word	0x40010000
 8007b34:	40000400 	.word	0x40000400
 8007b38:	40000800 	.word	0x40000800
 8007b3c:	40000c00 	.word	0x40000c00
 8007b40:	40010400 	.word	0x40010400
 8007b44:	40014000 	.word	0x40014000
 8007b48:	40001800 	.word	0x40001800

08007b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e042      	b.n	8007be4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d106      	bne.n	8007b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7fb fa5c 	bl	8003030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2224      	movs	r2, #36	@ 0x24
 8007b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68da      	ldr	r2, [r3, #12]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fc85 	bl	80084a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	691a      	ldr	r2, [r3, #16]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	695a      	ldr	r2, [r3, #20]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b0ba      	sub	sp, #232	@ 0xe8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c22:	f003 030f 	and.w	r3, r3, #15
 8007c26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007c2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10f      	bne.n	8007c52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d009      	beq.n	8007c52 <HAL_UART_IRQHandler+0x66>
 8007c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c42:	f003 0320 	and.w	r3, r3, #32
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d003      	beq.n	8007c52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fb69 	bl	8008322 <UART_Receive_IT>
      return;
 8007c50:	e25b      	b.n	800810a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 80de 	beq.w	8007e18 <HAL_UART_IRQHandler+0x22c>
 8007c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d106      	bne.n	8007c76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 80d1 	beq.w	8007e18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00b      	beq.n	8007c9a <HAL_UART_IRQHandler+0xae>
 8007c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d005      	beq.n	8007c9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c92:	f043 0201 	orr.w	r2, r3, #1
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c9e:	f003 0304 	and.w	r3, r3, #4
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00b      	beq.n	8007cbe <HAL_UART_IRQHandler+0xd2>
 8007ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d005      	beq.n	8007cbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb6:	f043 0202 	orr.w	r2, r3, #2
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00b      	beq.n	8007ce2 <HAL_UART_IRQHandler+0xf6>
 8007cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cda:	f043 0204 	orr.w	r2, r3, #4
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ce6:	f003 0308 	and.w	r3, r3, #8
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d011      	beq.n	8007d12 <HAL_UART_IRQHandler+0x126>
 8007cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cf2:	f003 0320 	and.w	r3, r3, #32
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d105      	bne.n	8007d06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d005      	beq.n	8007d12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d0a:	f043 0208 	orr.w	r2, r3, #8
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 81f2 	beq.w	8008100 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d20:	f003 0320 	and.w	r3, r3, #32
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d008      	beq.n	8007d3a <HAL_UART_IRQHandler+0x14e>
 8007d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d2c:	f003 0320 	and.w	r3, r3, #32
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 faf4 	bl	8008322 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d44:	2b40      	cmp	r3, #64	@ 0x40
 8007d46:	bf0c      	ite	eq
 8007d48:	2301      	moveq	r3, #1
 8007d4a:	2300      	movne	r3, #0
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d56:	f003 0308 	and.w	r3, r3, #8
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d103      	bne.n	8007d66 <HAL_UART_IRQHandler+0x17a>
 8007d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d04f      	beq.n	8007e06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f9fc 	bl	8008164 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d76:	2b40      	cmp	r3, #64	@ 0x40
 8007d78:	d141      	bne.n	8007dfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3314      	adds	r3, #20
 8007d80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3314      	adds	r3, #20
 8007da2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007da6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007daa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007db2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007db6:	e841 2300 	strex	r3, r2, [r1]
 8007dba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1d9      	bne.n	8007d7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d013      	beq.n	8007df6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd2:	4a7e      	ldr	r2, [pc, #504]	@ (8007fcc <HAL_UART_IRQHandler+0x3e0>)
 8007dd4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fc fb94 	bl	8004508 <HAL_DMA_Abort_IT>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d016      	beq.n	8007e14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007df0:	4610      	mov	r0, r2
 8007df2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007df4:	e00e      	b.n	8007e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f99e 	bl	8008138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dfc:	e00a      	b.n	8007e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f99a 	bl	8008138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e04:	e006      	b.n	8007e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f996 	bl	8008138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007e12:	e175      	b.n	8008100 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e14:	bf00      	nop
    return;
 8007e16:	e173      	b.n	8008100 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	f040 814f 	bne.w	80080c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e26:	f003 0310 	and.w	r3, r3, #16
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 8148 	beq.w	80080c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e34:	f003 0310 	and.w	r3, r3, #16
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 8141 	beq.w	80080c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60bb      	str	r3, [r7, #8]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	60bb      	str	r3, [r7, #8]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	60bb      	str	r3, [r7, #8]
 8007e52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e5e:	2b40      	cmp	r3, #64	@ 0x40
 8007e60:	f040 80b6 	bne.w	8007fd0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 8145 	beq.w	8008104 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e82:	429a      	cmp	r2, r3
 8007e84:	f080 813e 	bcs.w	8008104 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e9a:	f000 8088 	beq.w	8007fae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	330c      	adds	r3, #12
 8007ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007eac:	e853 3f00 	ldrex	r3, [r3]
 8007eb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	330c      	adds	r3, #12
 8007ec6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007eca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007ece:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007ed6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007eda:	e841 2300 	strex	r3, r2, [r1]
 8007ede:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1d9      	bne.n	8007e9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3314      	adds	r3, #20
 8007ef0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007efa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007efc:	f023 0301 	bic.w	r3, r3, #1
 8007f00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3314      	adds	r3, #20
 8007f0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007f12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f1a:	e841 2300 	strex	r3, r2, [r1]
 8007f1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007f20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1e1      	bne.n	8007eea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3314      	adds	r3, #20
 8007f2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f30:	e853 3f00 	ldrex	r3, [r3]
 8007f34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007f36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3314      	adds	r3, #20
 8007f46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007f4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f52:	e841 2300 	strex	r3, r2, [r1]
 8007f56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1e3      	bne.n	8007f26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2220      	movs	r2, #32
 8007f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	330c      	adds	r3, #12
 8007f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f76:	e853 3f00 	ldrex	r3, [r3]
 8007f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f7e:	f023 0310 	bic.w	r3, r3, #16
 8007f82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	330c      	adds	r3, #12
 8007f8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007f90:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007f92:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e3      	bne.n	8007f6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fc fa3d 	bl	8004428 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f8c1 	bl	800814c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fca:	e09b      	b.n	8008104 <HAL_UART_IRQHandler+0x518>
 8007fcc:	0800822b 	.word	0x0800822b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 808e 	beq.w	8008108 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f000 8089 	beq.w	8008108 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	330c      	adds	r3, #12
 8007ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008008:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800800c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	330c      	adds	r3, #12
 8008016:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800801a:	647a      	str	r2, [r7, #68]	@ 0x44
 800801c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008020:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008022:	e841 2300 	strex	r3, r2, [r1]
 8008026:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1e3      	bne.n	8007ff6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3314      	adds	r3, #20
 8008034:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	e853 3f00 	ldrex	r3, [r3]
 800803c:	623b      	str	r3, [r7, #32]
   return(result);
 800803e:	6a3b      	ldr	r3, [r7, #32]
 8008040:	f023 0301 	bic.w	r3, r3, #1
 8008044:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3314      	adds	r3, #20
 800804e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008052:	633a      	str	r2, [r7, #48]	@ 0x30
 8008054:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e3      	bne.n	800802e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2220      	movs	r2, #32
 800806a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	330c      	adds	r3, #12
 800807a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	60fb      	str	r3, [r7, #12]
   return(result);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f023 0310 	bic.w	r3, r3, #16
 800808a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	330c      	adds	r3, #12
 8008094:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008098:	61fa      	str	r2, [r7, #28]
 800809a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809c:	69b9      	ldr	r1, [r7, #24]
 800809e:	69fa      	ldr	r2, [r7, #28]
 80080a0:	e841 2300 	strex	r3, r2, [r1]
 80080a4:	617b      	str	r3, [r7, #20]
   return(result);
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1e3      	bne.n	8008074 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f847 	bl	800814c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80080be:	e023      	b.n	8008108 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80080c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d009      	beq.n	80080e0 <HAL_UART_IRQHandler+0x4f4>
 80080cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d003      	beq.n	80080e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f8ba 	bl	8008252 <UART_Transmit_IT>
    return;
 80080de:	e014      	b.n	800810a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00e      	beq.n	800810a <HAL_UART_IRQHandler+0x51e>
 80080ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d008      	beq.n	800810a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f8fa 	bl	80082f2 <UART_EndTransmit_IT>
    return;
 80080fe:	e004      	b.n	800810a <HAL_UART_IRQHandler+0x51e>
    return;
 8008100:	bf00      	nop
 8008102:	e002      	b.n	800810a <HAL_UART_IRQHandler+0x51e>
      return;
 8008104:	bf00      	nop
 8008106:	e000      	b.n	800810a <HAL_UART_IRQHandler+0x51e>
      return;
 8008108:	bf00      	nop
  }
}
 800810a:	37e8      	adds	r7, #232	@ 0xe8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008164:	b480      	push	{r7}
 8008166:	b095      	sub	sp, #84	@ 0x54
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	330c      	adds	r3, #12
 8008172:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008176:	e853 3f00 	ldrex	r3, [r3]
 800817a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800817c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	330c      	adds	r3, #12
 800818a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800818c:	643a      	str	r2, [r7, #64]	@ 0x40
 800818e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008190:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008192:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008194:	e841 2300 	strex	r3, r2, [r1]
 8008198:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800819a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1e5      	bne.n	800816c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3314      	adds	r3, #20
 80081a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	e853 3f00 	ldrex	r3, [r3]
 80081ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	f023 0301 	bic.w	r3, r3, #1
 80081b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3314      	adds	r3, #20
 80081be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081c8:	e841 2300 	strex	r3, r2, [r1]
 80081cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e5      	bne.n	80081a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d119      	bne.n	8008210 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	330c      	adds	r3, #12
 80081e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	e853 3f00 	ldrex	r3, [r3]
 80081ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f023 0310 	bic.w	r3, r3, #16
 80081f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	330c      	adds	r3, #12
 80081fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081fc:	61ba      	str	r2, [r7, #24]
 80081fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008200:	6979      	ldr	r1, [r7, #20]
 8008202:	69ba      	ldr	r2, [r7, #24]
 8008204:	e841 2300 	strex	r3, r2, [r1]
 8008208:	613b      	str	r3, [r7, #16]
   return(result);
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1e5      	bne.n	80081dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2220      	movs	r2, #32
 8008214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800821e:	bf00      	nop
 8008220:	3754      	adds	r7, #84	@ 0x54
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008236:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2200      	movs	r2, #0
 800823c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7ff ff77 	bl	8008138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800824a:	bf00      	nop
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008252:	b480      	push	{r7}
 8008254:	b085      	sub	sp, #20
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b21      	cmp	r3, #33	@ 0x21
 8008264:	d13e      	bne.n	80082e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800826e:	d114      	bne.n	800829a <UART_Transmit_IT+0x48>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d110      	bne.n	800829a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800828c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	1c9a      	adds	r2, r3, #2
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	621a      	str	r2, [r3, #32]
 8008298:	e008      	b.n	80082ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	1c59      	adds	r1, r3, #1
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	6211      	str	r1, [r2, #32]
 80082a4:	781a      	ldrb	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	3b01      	subs	r3, #1
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	4619      	mov	r1, r3
 80082ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10f      	bne.n	80082e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80082ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	e000      	b.n	80082e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082e4:	2302      	movs	r3, #2
  }
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68da      	ldr	r2, [r3, #12]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008308:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2220      	movs	r2, #32
 800830e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7ff fefc 	bl	8008110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b08c      	sub	sp, #48	@ 0x30
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b22      	cmp	r3, #34	@ 0x22
 8008334:	f040 80ae 	bne.w	8008494 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008340:	d117      	bne.n	8008372 <UART_Receive_IT+0x50>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d113      	bne.n	8008372 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800834a:	2300      	movs	r3, #0
 800834c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008352:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	b29b      	uxth	r3, r3
 800835c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008360:	b29a      	uxth	r2, r3
 8008362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008364:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800836a:	1c9a      	adds	r2, r3, #2
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008370:	e026      	b.n	80083c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008376:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008378:	2300      	movs	r3, #0
 800837a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008384:	d007      	beq.n	8008396 <UART_Receive_IT+0x74>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10a      	bne.n	80083a4 <UART_Receive_IT+0x82>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d106      	bne.n	80083a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	b2da      	uxtb	r2, r3
 800839e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a0:	701a      	strb	r2, [r3, #0]
 80083a2:	e008      	b.n	80083b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083b0:	b2da      	uxtb	r2, r3
 80083b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	3b01      	subs	r3, #1
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	4619      	mov	r1, r3
 80083ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d15d      	bne.n	8008490 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f022 0220 	bic.w	r2, r2, #32
 80083e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	695a      	ldr	r2, [r3, #20]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 0201 	bic.w	r2, r2, #1
 8008402:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2220      	movs	r2, #32
 8008408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008416:	2b01      	cmp	r3, #1
 8008418:	d135      	bne.n	8008486 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	330c      	adds	r3, #12
 8008426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	613b      	str	r3, [r7, #16]
   return(result);
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	f023 0310 	bic.w	r3, r3, #16
 8008436:	627b      	str	r3, [r7, #36]	@ 0x24
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	330c      	adds	r3, #12
 800843e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008440:	623a      	str	r2, [r7, #32]
 8008442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008444:	69f9      	ldr	r1, [r7, #28]
 8008446:	6a3a      	ldr	r2, [r7, #32]
 8008448:	e841 2300 	strex	r3, r2, [r1]
 800844c:	61bb      	str	r3, [r7, #24]
   return(result);
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e5      	bne.n	8008420 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0310 	and.w	r3, r3, #16
 800845e:	2b10      	cmp	r3, #16
 8008460:	d10a      	bne.n	8008478 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008462:	2300      	movs	r3, #0
 8008464:	60fb      	str	r3, [r7, #12]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	60fb      	str	r3, [r7, #12]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff fe64 	bl	800814c <HAL_UARTEx_RxEventCallback>
 8008484:	e002      	b.n	800848c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7ff fe4c 	bl	8008124 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	e002      	b.n	8008496 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	e000      	b.n	8008496 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008494:	2302      	movs	r3, #2
  }
}
 8008496:	4618      	mov	r0, r3
 8008498:	3730      	adds	r7, #48	@ 0x30
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084a4:	b0c0      	sub	sp, #256	@ 0x100
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80084b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084bc:	68d9      	ldr	r1, [r3, #12]
 80084be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	ea40 0301 	orr.w	r3, r0, r1
 80084c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ce:	689a      	ldr	r2, [r3, #8]
 80084d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	431a      	orrs	r2, r3
 80084d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	431a      	orrs	r2, r3
 80084e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80084f8:	f021 010c 	bic.w	r1, r1, #12
 80084fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008506:	430b      	orrs	r3, r1
 8008508:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800850a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800851a:	6999      	ldr	r1, [r3, #24]
 800851c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	ea40 0301 	orr.w	r3, r0, r1
 8008526:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	4b8f      	ldr	r3, [pc, #572]	@ (800876c <UART_SetConfig+0x2cc>)
 8008530:	429a      	cmp	r2, r3
 8008532:	d005      	beq.n	8008540 <UART_SetConfig+0xa0>
 8008534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	4b8d      	ldr	r3, [pc, #564]	@ (8008770 <UART_SetConfig+0x2d0>)
 800853c:	429a      	cmp	r2, r3
 800853e:	d104      	bne.n	800854a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008540:	f7fe f816 	bl	8006570 <HAL_RCC_GetPCLK2Freq>
 8008544:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008548:	e003      	b.n	8008552 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800854a:	f7fd fffd 	bl	8006548 <HAL_RCC_GetPCLK1Freq>
 800854e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800855c:	f040 810c 	bne.w	8008778 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008564:	2200      	movs	r2, #0
 8008566:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800856a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800856e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008572:	4622      	mov	r2, r4
 8008574:	462b      	mov	r3, r5
 8008576:	1891      	adds	r1, r2, r2
 8008578:	65b9      	str	r1, [r7, #88]	@ 0x58
 800857a:	415b      	adcs	r3, r3
 800857c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800857e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008582:	4621      	mov	r1, r4
 8008584:	eb12 0801 	adds.w	r8, r2, r1
 8008588:	4629      	mov	r1, r5
 800858a:	eb43 0901 	adc.w	r9, r3, r1
 800858e:	f04f 0200 	mov.w	r2, #0
 8008592:	f04f 0300 	mov.w	r3, #0
 8008596:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800859a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800859e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80085a2:	4690      	mov	r8, r2
 80085a4:	4699      	mov	r9, r3
 80085a6:	4623      	mov	r3, r4
 80085a8:	eb18 0303 	adds.w	r3, r8, r3
 80085ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80085b0:	462b      	mov	r3, r5
 80085b2:	eb49 0303 	adc.w	r3, r9, r3
 80085b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80085ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80085c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80085ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80085ce:	460b      	mov	r3, r1
 80085d0:	18db      	adds	r3, r3, r3
 80085d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80085d4:	4613      	mov	r3, r2
 80085d6:	eb42 0303 	adc.w	r3, r2, r3
 80085da:	657b      	str	r3, [r7, #84]	@ 0x54
 80085dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80085e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80085e4:	f7f8 fb60 	bl	8000ca8 <__aeabi_uldivmod>
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4b61      	ldr	r3, [pc, #388]	@ (8008774 <UART_SetConfig+0x2d4>)
 80085ee:	fba3 2302 	umull	r2, r3, r3, r2
 80085f2:	095b      	lsrs	r3, r3, #5
 80085f4:	011c      	lsls	r4, r3, #4
 80085f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085fa:	2200      	movs	r2, #0
 80085fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008600:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008604:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008608:	4642      	mov	r2, r8
 800860a:	464b      	mov	r3, r9
 800860c:	1891      	adds	r1, r2, r2
 800860e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008610:	415b      	adcs	r3, r3
 8008612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008614:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008618:	4641      	mov	r1, r8
 800861a:	eb12 0a01 	adds.w	sl, r2, r1
 800861e:	4649      	mov	r1, r9
 8008620:	eb43 0b01 	adc.w	fp, r3, r1
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008630:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008634:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008638:	4692      	mov	sl, r2
 800863a:	469b      	mov	fp, r3
 800863c:	4643      	mov	r3, r8
 800863e:	eb1a 0303 	adds.w	r3, sl, r3
 8008642:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008646:	464b      	mov	r3, r9
 8008648:	eb4b 0303 	adc.w	r3, fp, r3
 800864c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800865c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008660:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008664:	460b      	mov	r3, r1
 8008666:	18db      	adds	r3, r3, r3
 8008668:	643b      	str	r3, [r7, #64]	@ 0x40
 800866a:	4613      	mov	r3, r2
 800866c:	eb42 0303 	adc.w	r3, r2, r3
 8008670:	647b      	str	r3, [r7, #68]	@ 0x44
 8008672:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008676:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800867a:	f7f8 fb15 	bl	8000ca8 <__aeabi_uldivmod>
 800867e:	4602      	mov	r2, r0
 8008680:	460b      	mov	r3, r1
 8008682:	4611      	mov	r1, r2
 8008684:	4b3b      	ldr	r3, [pc, #236]	@ (8008774 <UART_SetConfig+0x2d4>)
 8008686:	fba3 2301 	umull	r2, r3, r3, r1
 800868a:	095b      	lsrs	r3, r3, #5
 800868c:	2264      	movs	r2, #100	@ 0x64
 800868e:	fb02 f303 	mul.w	r3, r2, r3
 8008692:	1acb      	subs	r3, r1, r3
 8008694:	00db      	lsls	r3, r3, #3
 8008696:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800869a:	4b36      	ldr	r3, [pc, #216]	@ (8008774 <UART_SetConfig+0x2d4>)
 800869c:	fba3 2302 	umull	r2, r3, r3, r2
 80086a0:	095b      	lsrs	r3, r3, #5
 80086a2:	005b      	lsls	r3, r3, #1
 80086a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80086a8:	441c      	add	r4, r3
 80086aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086ae:	2200      	movs	r2, #0
 80086b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80086b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80086b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80086bc:	4642      	mov	r2, r8
 80086be:	464b      	mov	r3, r9
 80086c0:	1891      	adds	r1, r2, r2
 80086c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80086c4:	415b      	adcs	r3, r3
 80086c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80086cc:	4641      	mov	r1, r8
 80086ce:	1851      	adds	r1, r2, r1
 80086d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80086d2:	4649      	mov	r1, r9
 80086d4:	414b      	adcs	r3, r1
 80086d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086d8:	f04f 0200 	mov.w	r2, #0
 80086dc:	f04f 0300 	mov.w	r3, #0
 80086e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80086e4:	4659      	mov	r1, fp
 80086e6:	00cb      	lsls	r3, r1, #3
 80086e8:	4651      	mov	r1, sl
 80086ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086ee:	4651      	mov	r1, sl
 80086f0:	00ca      	lsls	r2, r1, #3
 80086f2:	4610      	mov	r0, r2
 80086f4:	4619      	mov	r1, r3
 80086f6:	4603      	mov	r3, r0
 80086f8:	4642      	mov	r2, r8
 80086fa:	189b      	adds	r3, r3, r2
 80086fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008700:	464b      	mov	r3, r9
 8008702:	460a      	mov	r2, r1
 8008704:	eb42 0303 	adc.w	r3, r2, r3
 8008708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800870c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008718:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800871c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008720:	460b      	mov	r3, r1
 8008722:	18db      	adds	r3, r3, r3
 8008724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008726:	4613      	mov	r3, r2
 8008728:	eb42 0303 	adc.w	r3, r2, r3
 800872c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800872e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008732:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008736:	f7f8 fab7 	bl	8000ca8 <__aeabi_uldivmod>
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	4b0d      	ldr	r3, [pc, #52]	@ (8008774 <UART_SetConfig+0x2d4>)
 8008740:	fba3 1302 	umull	r1, r3, r3, r2
 8008744:	095b      	lsrs	r3, r3, #5
 8008746:	2164      	movs	r1, #100	@ 0x64
 8008748:	fb01 f303 	mul.w	r3, r1, r3
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	3332      	adds	r3, #50	@ 0x32
 8008752:	4a08      	ldr	r2, [pc, #32]	@ (8008774 <UART_SetConfig+0x2d4>)
 8008754:	fba2 2303 	umull	r2, r3, r2, r3
 8008758:	095b      	lsrs	r3, r3, #5
 800875a:	f003 0207 	and.w	r2, r3, #7
 800875e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4422      	add	r2, r4
 8008766:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008768:	e106      	b.n	8008978 <UART_SetConfig+0x4d8>
 800876a:	bf00      	nop
 800876c:	40011000 	.word	0x40011000
 8008770:	40011400 	.word	0x40011400
 8008774:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800877c:	2200      	movs	r2, #0
 800877e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008782:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008786:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800878a:	4642      	mov	r2, r8
 800878c:	464b      	mov	r3, r9
 800878e:	1891      	adds	r1, r2, r2
 8008790:	6239      	str	r1, [r7, #32]
 8008792:	415b      	adcs	r3, r3
 8008794:	627b      	str	r3, [r7, #36]	@ 0x24
 8008796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800879a:	4641      	mov	r1, r8
 800879c:	1854      	adds	r4, r2, r1
 800879e:	4649      	mov	r1, r9
 80087a0:	eb43 0501 	adc.w	r5, r3, r1
 80087a4:	f04f 0200 	mov.w	r2, #0
 80087a8:	f04f 0300 	mov.w	r3, #0
 80087ac:	00eb      	lsls	r3, r5, #3
 80087ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087b2:	00e2      	lsls	r2, r4, #3
 80087b4:	4614      	mov	r4, r2
 80087b6:	461d      	mov	r5, r3
 80087b8:	4643      	mov	r3, r8
 80087ba:	18e3      	adds	r3, r4, r3
 80087bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80087c0:	464b      	mov	r3, r9
 80087c2:	eb45 0303 	adc.w	r3, r5, r3
 80087c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80087ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80087d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80087da:	f04f 0200 	mov.w	r2, #0
 80087de:	f04f 0300 	mov.w	r3, #0
 80087e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80087e6:	4629      	mov	r1, r5
 80087e8:	008b      	lsls	r3, r1, #2
 80087ea:	4621      	mov	r1, r4
 80087ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087f0:	4621      	mov	r1, r4
 80087f2:	008a      	lsls	r2, r1, #2
 80087f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80087f8:	f7f8 fa56 	bl	8000ca8 <__aeabi_uldivmod>
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4b60      	ldr	r3, [pc, #384]	@ (8008984 <UART_SetConfig+0x4e4>)
 8008802:	fba3 2302 	umull	r2, r3, r3, r2
 8008806:	095b      	lsrs	r3, r3, #5
 8008808:	011c      	lsls	r4, r3, #4
 800880a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800880e:	2200      	movs	r2, #0
 8008810:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008814:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008818:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800881c:	4642      	mov	r2, r8
 800881e:	464b      	mov	r3, r9
 8008820:	1891      	adds	r1, r2, r2
 8008822:	61b9      	str	r1, [r7, #24]
 8008824:	415b      	adcs	r3, r3
 8008826:	61fb      	str	r3, [r7, #28]
 8008828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800882c:	4641      	mov	r1, r8
 800882e:	1851      	adds	r1, r2, r1
 8008830:	6139      	str	r1, [r7, #16]
 8008832:	4649      	mov	r1, r9
 8008834:	414b      	adcs	r3, r1
 8008836:	617b      	str	r3, [r7, #20]
 8008838:	f04f 0200 	mov.w	r2, #0
 800883c:	f04f 0300 	mov.w	r3, #0
 8008840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008844:	4659      	mov	r1, fp
 8008846:	00cb      	lsls	r3, r1, #3
 8008848:	4651      	mov	r1, sl
 800884a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800884e:	4651      	mov	r1, sl
 8008850:	00ca      	lsls	r2, r1, #3
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	4603      	mov	r3, r0
 8008858:	4642      	mov	r2, r8
 800885a:	189b      	adds	r3, r3, r2
 800885c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008860:	464b      	mov	r3, r9
 8008862:	460a      	mov	r2, r1
 8008864:	eb42 0303 	adc.w	r3, r2, r3
 8008868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800886c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008876:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008878:	f04f 0200 	mov.w	r2, #0
 800887c:	f04f 0300 	mov.w	r3, #0
 8008880:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008884:	4649      	mov	r1, r9
 8008886:	008b      	lsls	r3, r1, #2
 8008888:	4641      	mov	r1, r8
 800888a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800888e:	4641      	mov	r1, r8
 8008890:	008a      	lsls	r2, r1, #2
 8008892:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008896:	f7f8 fa07 	bl	8000ca8 <__aeabi_uldivmod>
 800889a:	4602      	mov	r2, r0
 800889c:	460b      	mov	r3, r1
 800889e:	4611      	mov	r1, r2
 80088a0:	4b38      	ldr	r3, [pc, #224]	@ (8008984 <UART_SetConfig+0x4e4>)
 80088a2:	fba3 2301 	umull	r2, r3, r3, r1
 80088a6:	095b      	lsrs	r3, r3, #5
 80088a8:	2264      	movs	r2, #100	@ 0x64
 80088aa:	fb02 f303 	mul.w	r3, r2, r3
 80088ae:	1acb      	subs	r3, r1, r3
 80088b0:	011b      	lsls	r3, r3, #4
 80088b2:	3332      	adds	r3, #50	@ 0x32
 80088b4:	4a33      	ldr	r2, [pc, #204]	@ (8008984 <UART_SetConfig+0x4e4>)
 80088b6:	fba2 2303 	umull	r2, r3, r2, r3
 80088ba:	095b      	lsrs	r3, r3, #5
 80088bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80088c0:	441c      	add	r4, r3
 80088c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088c6:	2200      	movs	r2, #0
 80088c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80088ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80088cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80088d0:	4642      	mov	r2, r8
 80088d2:	464b      	mov	r3, r9
 80088d4:	1891      	adds	r1, r2, r2
 80088d6:	60b9      	str	r1, [r7, #8]
 80088d8:	415b      	adcs	r3, r3
 80088da:	60fb      	str	r3, [r7, #12]
 80088dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088e0:	4641      	mov	r1, r8
 80088e2:	1851      	adds	r1, r2, r1
 80088e4:	6039      	str	r1, [r7, #0]
 80088e6:	4649      	mov	r1, r9
 80088e8:	414b      	adcs	r3, r1
 80088ea:	607b      	str	r3, [r7, #4]
 80088ec:	f04f 0200 	mov.w	r2, #0
 80088f0:	f04f 0300 	mov.w	r3, #0
 80088f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088f8:	4659      	mov	r1, fp
 80088fa:	00cb      	lsls	r3, r1, #3
 80088fc:	4651      	mov	r1, sl
 80088fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008902:	4651      	mov	r1, sl
 8008904:	00ca      	lsls	r2, r1, #3
 8008906:	4610      	mov	r0, r2
 8008908:	4619      	mov	r1, r3
 800890a:	4603      	mov	r3, r0
 800890c:	4642      	mov	r2, r8
 800890e:	189b      	adds	r3, r3, r2
 8008910:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008912:	464b      	mov	r3, r9
 8008914:	460a      	mov	r2, r1
 8008916:	eb42 0303 	adc.w	r3, r2, r3
 800891a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800891c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	663b      	str	r3, [r7, #96]	@ 0x60
 8008926:	667a      	str	r2, [r7, #100]	@ 0x64
 8008928:	f04f 0200 	mov.w	r2, #0
 800892c:	f04f 0300 	mov.w	r3, #0
 8008930:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008934:	4649      	mov	r1, r9
 8008936:	008b      	lsls	r3, r1, #2
 8008938:	4641      	mov	r1, r8
 800893a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800893e:	4641      	mov	r1, r8
 8008940:	008a      	lsls	r2, r1, #2
 8008942:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008946:	f7f8 f9af 	bl	8000ca8 <__aeabi_uldivmod>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4b0d      	ldr	r3, [pc, #52]	@ (8008984 <UART_SetConfig+0x4e4>)
 8008950:	fba3 1302 	umull	r1, r3, r3, r2
 8008954:	095b      	lsrs	r3, r3, #5
 8008956:	2164      	movs	r1, #100	@ 0x64
 8008958:	fb01 f303 	mul.w	r3, r1, r3
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	011b      	lsls	r3, r3, #4
 8008960:	3332      	adds	r3, #50	@ 0x32
 8008962:	4a08      	ldr	r2, [pc, #32]	@ (8008984 <UART_SetConfig+0x4e4>)
 8008964:	fba2 2303 	umull	r2, r3, r2, r3
 8008968:	095b      	lsrs	r3, r3, #5
 800896a:	f003 020f 	and.w	r2, r3, #15
 800896e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4422      	add	r2, r4
 8008976:	609a      	str	r2, [r3, #8]
}
 8008978:	bf00      	nop
 800897a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800897e:	46bd      	mov	sp, r7
 8008980:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008984:	51eb851f 	.word	0x51eb851f

08008988 <__cvt>:
 8008988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800898c:	ec57 6b10 	vmov	r6, r7, d0
 8008990:	2f00      	cmp	r7, #0
 8008992:	460c      	mov	r4, r1
 8008994:	4619      	mov	r1, r3
 8008996:	463b      	mov	r3, r7
 8008998:	bfbb      	ittet	lt
 800899a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800899e:	461f      	movlt	r7, r3
 80089a0:	2300      	movge	r3, #0
 80089a2:	232d      	movlt	r3, #45	@ 0x2d
 80089a4:	700b      	strb	r3, [r1, #0]
 80089a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80089ac:	4691      	mov	r9, r2
 80089ae:	f023 0820 	bic.w	r8, r3, #32
 80089b2:	bfbc      	itt	lt
 80089b4:	4632      	movlt	r2, r6
 80089b6:	4616      	movlt	r6, r2
 80089b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80089bc:	d005      	beq.n	80089ca <__cvt+0x42>
 80089be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80089c2:	d100      	bne.n	80089c6 <__cvt+0x3e>
 80089c4:	3401      	adds	r4, #1
 80089c6:	2102      	movs	r1, #2
 80089c8:	e000      	b.n	80089cc <__cvt+0x44>
 80089ca:	2103      	movs	r1, #3
 80089cc:	ab03      	add	r3, sp, #12
 80089ce:	9301      	str	r3, [sp, #4]
 80089d0:	ab02      	add	r3, sp, #8
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	ec47 6b10 	vmov	d0, r6, r7
 80089d8:	4653      	mov	r3, sl
 80089da:	4622      	mov	r2, r4
 80089dc:	f000 fe90 	bl	8009700 <_dtoa_r>
 80089e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80089e4:	4605      	mov	r5, r0
 80089e6:	d119      	bne.n	8008a1c <__cvt+0x94>
 80089e8:	f019 0f01 	tst.w	r9, #1
 80089ec:	d00e      	beq.n	8008a0c <__cvt+0x84>
 80089ee:	eb00 0904 	add.w	r9, r0, r4
 80089f2:	2200      	movs	r2, #0
 80089f4:	2300      	movs	r3, #0
 80089f6:	4630      	mov	r0, r6
 80089f8:	4639      	mov	r1, r7
 80089fa:	f7f8 f895 	bl	8000b28 <__aeabi_dcmpeq>
 80089fe:	b108      	cbz	r0, 8008a04 <__cvt+0x7c>
 8008a00:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a04:	2230      	movs	r2, #48	@ 0x30
 8008a06:	9b03      	ldr	r3, [sp, #12]
 8008a08:	454b      	cmp	r3, r9
 8008a0a:	d31e      	bcc.n	8008a4a <__cvt+0xc2>
 8008a0c:	9b03      	ldr	r3, [sp, #12]
 8008a0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a10:	1b5b      	subs	r3, r3, r5
 8008a12:	4628      	mov	r0, r5
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	b004      	add	sp, #16
 8008a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a20:	eb00 0904 	add.w	r9, r0, r4
 8008a24:	d1e5      	bne.n	80089f2 <__cvt+0x6a>
 8008a26:	7803      	ldrb	r3, [r0, #0]
 8008a28:	2b30      	cmp	r3, #48	@ 0x30
 8008a2a:	d10a      	bne.n	8008a42 <__cvt+0xba>
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2300      	movs	r3, #0
 8008a30:	4630      	mov	r0, r6
 8008a32:	4639      	mov	r1, r7
 8008a34:	f7f8 f878 	bl	8000b28 <__aeabi_dcmpeq>
 8008a38:	b918      	cbnz	r0, 8008a42 <__cvt+0xba>
 8008a3a:	f1c4 0401 	rsb	r4, r4, #1
 8008a3e:	f8ca 4000 	str.w	r4, [sl]
 8008a42:	f8da 3000 	ldr.w	r3, [sl]
 8008a46:	4499      	add	r9, r3
 8008a48:	e7d3      	b.n	80089f2 <__cvt+0x6a>
 8008a4a:	1c59      	adds	r1, r3, #1
 8008a4c:	9103      	str	r1, [sp, #12]
 8008a4e:	701a      	strb	r2, [r3, #0]
 8008a50:	e7d9      	b.n	8008a06 <__cvt+0x7e>

08008a52 <__exponent>:
 8008a52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a54:	2900      	cmp	r1, #0
 8008a56:	bfba      	itte	lt
 8008a58:	4249      	neglt	r1, r1
 8008a5a:	232d      	movlt	r3, #45	@ 0x2d
 8008a5c:	232b      	movge	r3, #43	@ 0x2b
 8008a5e:	2909      	cmp	r1, #9
 8008a60:	7002      	strb	r2, [r0, #0]
 8008a62:	7043      	strb	r3, [r0, #1]
 8008a64:	dd29      	ble.n	8008aba <__exponent+0x68>
 8008a66:	f10d 0307 	add.w	r3, sp, #7
 8008a6a:	461d      	mov	r5, r3
 8008a6c:	270a      	movs	r7, #10
 8008a6e:	461a      	mov	r2, r3
 8008a70:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a74:	fb07 1416 	mls	r4, r7, r6, r1
 8008a78:	3430      	adds	r4, #48	@ 0x30
 8008a7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a7e:	460c      	mov	r4, r1
 8008a80:	2c63      	cmp	r4, #99	@ 0x63
 8008a82:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a86:	4631      	mov	r1, r6
 8008a88:	dcf1      	bgt.n	8008a6e <__exponent+0x1c>
 8008a8a:	3130      	adds	r1, #48	@ 0x30
 8008a8c:	1e94      	subs	r4, r2, #2
 8008a8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a92:	1c41      	adds	r1, r0, #1
 8008a94:	4623      	mov	r3, r4
 8008a96:	42ab      	cmp	r3, r5
 8008a98:	d30a      	bcc.n	8008ab0 <__exponent+0x5e>
 8008a9a:	f10d 0309 	add.w	r3, sp, #9
 8008a9e:	1a9b      	subs	r3, r3, r2
 8008aa0:	42ac      	cmp	r4, r5
 8008aa2:	bf88      	it	hi
 8008aa4:	2300      	movhi	r3, #0
 8008aa6:	3302      	adds	r3, #2
 8008aa8:	4403      	add	r3, r0
 8008aaa:	1a18      	subs	r0, r3, r0
 8008aac:	b003      	add	sp, #12
 8008aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ab0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008ab4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008ab8:	e7ed      	b.n	8008a96 <__exponent+0x44>
 8008aba:	2330      	movs	r3, #48	@ 0x30
 8008abc:	3130      	adds	r1, #48	@ 0x30
 8008abe:	7083      	strb	r3, [r0, #2]
 8008ac0:	70c1      	strb	r1, [r0, #3]
 8008ac2:	1d03      	adds	r3, r0, #4
 8008ac4:	e7f1      	b.n	8008aaa <__exponent+0x58>
	...

08008ac8 <_printf_float>:
 8008ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	b08d      	sub	sp, #52	@ 0x34
 8008ace:	460c      	mov	r4, r1
 8008ad0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ad4:	4616      	mov	r6, r2
 8008ad6:	461f      	mov	r7, r3
 8008ad8:	4605      	mov	r5, r0
 8008ada:	f000 fd01 	bl	80094e0 <_localeconv_r>
 8008ade:	6803      	ldr	r3, [r0, #0]
 8008ae0:	9304      	str	r3, [sp, #16]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7f7 fbf4 	bl	80002d0 <strlen>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	930a      	str	r3, [sp, #40]	@ 0x28
 8008aec:	f8d8 3000 	ldr.w	r3, [r8]
 8008af0:	9005      	str	r0, [sp, #20]
 8008af2:	3307      	adds	r3, #7
 8008af4:	f023 0307 	bic.w	r3, r3, #7
 8008af8:	f103 0208 	add.w	r2, r3, #8
 8008afc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008b00:	f8d4 b000 	ldr.w	fp, [r4]
 8008b04:	f8c8 2000 	str.w	r2, [r8]
 8008b08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008b10:	9307      	str	r3, [sp, #28]
 8008b12:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008b1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b1e:	4b9c      	ldr	r3, [pc, #624]	@ (8008d90 <_printf_float+0x2c8>)
 8008b20:	f04f 32ff 	mov.w	r2, #4294967295
 8008b24:	f7f8 f832 	bl	8000b8c <__aeabi_dcmpun>
 8008b28:	bb70      	cbnz	r0, 8008b88 <_printf_float+0xc0>
 8008b2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b2e:	4b98      	ldr	r3, [pc, #608]	@ (8008d90 <_printf_float+0x2c8>)
 8008b30:	f04f 32ff 	mov.w	r2, #4294967295
 8008b34:	f7f8 f80c 	bl	8000b50 <__aeabi_dcmple>
 8008b38:	bb30      	cbnz	r0, 8008b88 <_printf_float+0xc0>
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	4640      	mov	r0, r8
 8008b40:	4649      	mov	r1, r9
 8008b42:	f7f7 fffb 	bl	8000b3c <__aeabi_dcmplt>
 8008b46:	b110      	cbz	r0, 8008b4e <_printf_float+0x86>
 8008b48:	232d      	movs	r3, #45	@ 0x2d
 8008b4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b4e:	4a91      	ldr	r2, [pc, #580]	@ (8008d94 <_printf_float+0x2cc>)
 8008b50:	4b91      	ldr	r3, [pc, #580]	@ (8008d98 <_printf_float+0x2d0>)
 8008b52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008b56:	bf8c      	ite	hi
 8008b58:	4690      	movhi	r8, r2
 8008b5a:	4698      	movls	r8, r3
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	6123      	str	r3, [r4, #16]
 8008b60:	f02b 0304 	bic.w	r3, fp, #4
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	f04f 0900 	mov.w	r9, #0
 8008b6a:	9700      	str	r7, [sp, #0]
 8008b6c:	4633      	mov	r3, r6
 8008b6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008b70:	4621      	mov	r1, r4
 8008b72:	4628      	mov	r0, r5
 8008b74:	f000 f9d2 	bl	8008f1c <_printf_common>
 8008b78:	3001      	adds	r0, #1
 8008b7a:	f040 808d 	bne.w	8008c98 <_printf_float+0x1d0>
 8008b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b82:	b00d      	add	sp, #52	@ 0x34
 8008b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b88:	4642      	mov	r2, r8
 8008b8a:	464b      	mov	r3, r9
 8008b8c:	4640      	mov	r0, r8
 8008b8e:	4649      	mov	r1, r9
 8008b90:	f7f7 fffc 	bl	8000b8c <__aeabi_dcmpun>
 8008b94:	b140      	cbz	r0, 8008ba8 <_printf_float+0xe0>
 8008b96:	464b      	mov	r3, r9
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	bfbc      	itt	lt
 8008b9c:	232d      	movlt	r3, #45	@ 0x2d
 8008b9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008ba2:	4a7e      	ldr	r2, [pc, #504]	@ (8008d9c <_printf_float+0x2d4>)
 8008ba4:	4b7e      	ldr	r3, [pc, #504]	@ (8008da0 <_printf_float+0x2d8>)
 8008ba6:	e7d4      	b.n	8008b52 <_printf_float+0x8a>
 8008ba8:	6863      	ldr	r3, [r4, #4]
 8008baa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008bae:	9206      	str	r2, [sp, #24]
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	d13b      	bne.n	8008c2c <_printf_float+0x164>
 8008bb4:	2306      	movs	r3, #6
 8008bb6:	6063      	str	r3, [r4, #4]
 8008bb8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	6022      	str	r2, [r4, #0]
 8008bc0:	9303      	str	r3, [sp, #12]
 8008bc2:	ab0a      	add	r3, sp, #40	@ 0x28
 8008bc4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008bc8:	ab09      	add	r3, sp, #36	@ 0x24
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	6861      	ldr	r1, [r4, #4]
 8008bce:	ec49 8b10 	vmov	d0, r8, r9
 8008bd2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	f7ff fed6 	bl	8008988 <__cvt>
 8008bdc:	9b06      	ldr	r3, [sp, #24]
 8008bde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008be0:	2b47      	cmp	r3, #71	@ 0x47
 8008be2:	4680      	mov	r8, r0
 8008be4:	d129      	bne.n	8008c3a <_printf_float+0x172>
 8008be6:	1cc8      	adds	r0, r1, #3
 8008be8:	db02      	blt.n	8008bf0 <_printf_float+0x128>
 8008bea:	6863      	ldr	r3, [r4, #4]
 8008bec:	4299      	cmp	r1, r3
 8008bee:	dd41      	ble.n	8008c74 <_printf_float+0x1ac>
 8008bf0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008bf4:	fa5f fa8a 	uxtb.w	sl, sl
 8008bf8:	3901      	subs	r1, #1
 8008bfa:	4652      	mov	r2, sl
 8008bfc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008c00:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c02:	f7ff ff26 	bl	8008a52 <__exponent>
 8008c06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c08:	1813      	adds	r3, r2, r0
 8008c0a:	2a01      	cmp	r2, #1
 8008c0c:	4681      	mov	r9, r0
 8008c0e:	6123      	str	r3, [r4, #16]
 8008c10:	dc02      	bgt.n	8008c18 <_printf_float+0x150>
 8008c12:	6822      	ldr	r2, [r4, #0]
 8008c14:	07d2      	lsls	r2, r2, #31
 8008c16:	d501      	bpl.n	8008c1c <_printf_float+0x154>
 8008c18:	3301      	adds	r3, #1
 8008c1a:	6123      	str	r3, [r4, #16]
 8008c1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d0a2      	beq.n	8008b6a <_printf_float+0xa2>
 8008c24:	232d      	movs	r3, #45	@ 0x2d
 8008c26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c2a:	e79e      	b.n	8008b6a <_printf_float+0xa2>
 8008c2c:	9a06      	ldr	r2, [sp, #24]
 8008c2e:	2a47      	cmp	r2, #71	@ 0x47
 8008c30:	d1c2      	bne.n	8008bb8 <_printf_float+0xf0>
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1c0      	bne.n	8008bb8 <_printf_float+0xf0>
 8008c36:	2301      	movs	r3, #1
 8008c38:	e7bd      	b.n	8008bb6 <_printf_float+0xee>
 8008c3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c3e:	d9db      	bls.n	8008bf8 <_printf_float+0x130>
 8008c40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008c44:	d118      	bne.n	8008c78 <_printf_float+0x1b0>
 8008c46:	2900      	cmp	r1, #0
 8008c48:	6863      	ldr	r3, [r4, #4]
 8008c4a:	dd0b      	ble.n	8008c64 <_printf_float+0x19c>
 8008c4c:	6121      	str	r1, [r4, #16]
 8008c4e:	b913      	cbnz	r3, 8008c56 <_printf_float+0x18e>
 8008c50:	6822      	ldr	r2, [r4, #0]
 8008c52:	07d0      	lsls	r0, r2, #31
 8008c54:	d502      	bpl.n	8008c5c <_printf_float+0x194>
 8008c56:	3301      	adds	r3, #1
 8008c58:	440b      	add	r3, r1
 8008c5a:	6123      	str	r3, [r4, #16]
 8008c5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008c5e:	f04f 0900 	mov.w	r9, #0
 8008c62:	e7db      	b.n	8008c1c <_printf_float+0x154>
 8008c64:	b913      	cbnz	r3, 8008c6c <_printf_float+0x1a4>
 8008c66:	6822      	ldr	r2, [r4, #0]
 8008c68:	07d2      	lsls	r2, r2, #31
 8008c6a:	d501      	bpl.n	8008c70 <_printf_float+0x1a8>
 8008c6c:	3302      	adds	r3, #2
 8008c6e:	e7f4      	b.n	8008c5a <_printf_float+0x192>
 8008c70:	2301      	movs	r3, #1
 8008c72:	e7f2      	b.n	8008c5a <_printf_float+0x192>
 8008c74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008c78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c7a:	4299      	cmp	r1, r3
 8008c7c:	db05      	blt.n	8008c8a <_printf_float+0x1c2>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	6121      	str	r1, [r4, #16]
 8008c82:	07d8      	lsls	r0, r3, #31
 8008c84:	d5ea      	bpl.n	8008c5c <_printf_float+0x194>
 8008c86:	1c4b      	adds	r3, r1, #1
 8008c88:	e7e7      	b.n	8008c5a <_printf_float+0x192>
 8008c8a:	2900      	cmp	r1, #0
 8008c8c:	bfd4      	ite	le
 8008c8e:	f1c1 0202 	rsble	r2, r1, #2
 8008c92:	2201      	movgt	r2, #1
 8008c94:	4413      	add	r3, r2
 8008c96:	e7e0      	b.n	8008c5a <_printf_float+0x192>
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	055a      	lsls	r2, r3, #21
 8008c9c:	d407      	bmi.n	8008cae <_printf_float+0x1e6>
 8008c9e:	6923      	ldr	r3, [r4, #16]
 8008ca0:	4642      	mov	r2, r8
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	47b8      	blx	r7
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d12b      	bne.n	8008d04 <_printf_float+0x23c>
 8008cac:	e767      	b.n	8008b7e <_printf_float+0xb6>
 8008cae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008cb2:	f240 80dd 	bls.w	8008e70 <_printf_float+0x3a8>
 8008cb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f7f7 ff33 	bl	8000b28 <__aeabi_dcmpeq>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d033      	beq.n	8008d2e <_printf_float+0x266>
 8008cc6:	4a37      	ldr	r2, [pc, #220]	@ (8008da4 <_printf_float+0x2dc>)
 8008cc8:	2301      	movs	r3, #1
 8008cca:	4631      	mov	r1, r6
 8008ccc:	4628      	mov	r0, r5
 8008cce:	47b8      	blx	r7
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	f43f af54 	beq.w	8008b7e <_printf_float+0xb6>
 8008cd6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008cda:	4543      	cmp	r3, r8
 8008cdc:	db02      	blt.n	8008ce4 <_printf_float+0x21c>
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	07d8      	lsls	r0, r3, #31
 8008ce2:	d50f      	bpl.n	8008d04 <_printf_float+0x23c>
 8008ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ce8:	4631      	mov	r1, r6
 8008cea:	4628      	mov	r0, r5
 8008cec:	47b8      	blx	r7
 8008cee:	3001      	adds	r0, #1
 8008cf0:	f43f af45 	beq.w	8008b7e <_printf_float+0xb6>
 8008cf4:	f04f 0900 	mov.w	r9, #0
 8008cf8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008cfc:	f104 0a1a 	add.w	sl, r4, #26
 8008d00:	45c8      	cmp	r8, r9
 8008d02:	dc09      	bgt.n	8008d18 <_printf_float+0x250>
 8008d04:	6823      	ldr	r3, [r4, #0]
 8008d06:	079b      	lsls	r3, r3, #30
 8008d08:	f100 8103 	bmi.w	8008f12 <_printf_float+0x44a>
 8008d0c:	68e0      	ldr	r0, [r4, #12]
 8008d0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d10:	4298      	cmp	r0, r3
 8008d12:	bfb8      	it	lt
 8008d14:	4618      	movlt	r0, r3
 8008d16:	e734      	b.n	8008b82 <_printf_float+0xba>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	4652      	mov	r2, sl
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4628      	mov	r0, r5
 8008d20:	47b8      	blx	r7
 8008d22:	3001      	adds	r0, #1
 8008d24:	f43f af2b 	beq.w	8008b7e <_printf_float+0xb6>
 8008d28:	f109 0901 	add.w	r9, r9, #1
 8008d2c:	e7e8      	b.n	8008d00 <_printf_float+0x238>
 8008d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	dc39      	bgt.n	8008da8 <_printf_float+0x2e0>
 8008d34:	4a1b      	ldr	r2, [pc, #108]	@ (8008da4 <_printf_float+0x2dc>)
 8008d36:	2301      	movs	r3, #1
 8008d38:	4631      	mov	r1, r6
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	47b8      	blx	r7
 8008d3e:	3001      	adds	r0, #1
 8008d40:	f43f af1d 	beq.w	8008b7e <_printf_float+0xb6>
 8008d44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008d48:	ea59 0303 	orrs.w	r3, r9, r3
 8008d4c:	d102      	bne.n	8008d54 <_printf_float+0x28c>
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	07d9      	lsls	r1, r3, #31
 8008d52:	d5d7      	bpl.n	8008d04 <_printf_float+0x23c>
 8008d54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d58:	4631      	mov	r1, r6
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	47b8      	blx	r7
 8008d5e:	3001      	adds	r0, #1
 8008d60:	f43f af0d 	beq.w	8008b7e <_printf_float+0xb6>
 8008d64:	f04f 0a00 	mov.w	sl, #0
 8008d68:	f104 0b1a 	add.w	fp, r4, #26
 8008d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d6e:	425b      	negs	r3, r3
 8008d70:	4553      	cmp	r3, sl
 8008d72:	dc01      	bgt.n	8008d78 <_printf_float+0x2b0>
 8008d74:	464b      	mov	r3, r9
 8008d76:	e793      	b.n	8008ca0 <_printf_float+0x1d8>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	465a      	mov	r2, fp
 8008d7c:	4631      	mov	r1, r6
 8008d7e:	4628      	mov	r0, r5
 8008d80:	47b8      	blx	r7
 8008d82:	3001      	adds	r0, #1
 8008d84:	f43f aefb 	beq.w	8008b7e <_printf_float+0xb6>
 8008d88:	f10a 0a01 	add.w	sl, sl, #1
 8008d8c:	e7ee      	b.n	8008d6c <_printf_float+0x2a4>
 8008d8e:	bf00      	nop
 8008d90:	7fefffff 	.word	0x7fefffff
 8008d94:	0800baf8 	.word	0x0800baf8
 8008d98:	0800baf4 	.word	0x0800baf4
 8008d9c:	0800bb00 	.word	0x0800bb00
 8008da0:	0800bafc 	.word	0x0800bafc
 8008da4:	0800bb04 	.word	0x0800bb04
 8008da8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008daa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008dae:	4553      	cmp	r3, sl
 8008db0:	bfa8      	it	ge
 8008db2:	4653      	movge	r3, sl
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	4699      	mov	r9, r3
 8008db8:	dc36      	bgt.n	8008e28 <_printf_float+0x360>
 8008dba:	f04f 0b00 	mov.w	fp, #0
 8008dbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008dc2:	f104 021a 	add.w	r2, r4, #26
 8008dc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008dc8:	9306      	str	r3, [sp, #24]
 8008dca:	eba3 0309 	sub.w	r3, r3, r9
 8008dce:	455b      	cmp	r3, fp
 8008dd0:	dc31      	bgt.n	8008e36 <_printf_float+0x36e>
 8008dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd4:	459a      	cmp	sl, r3
 8008dd6:	dc3a      	bgt.n	8008e4e <_printf_float+0x386>
 8008dd8:	6823      	ldr	r3, [r4, #0]
 8008dda:	07da      	lsls	r2, r3, #31
 8008ddc:	d437      	bmi.n	8008e4e <_printf_float+0x386>
 8008dde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de0:	ebaa 0903 	sub.w	r9, sl, r3
 8008de4:	9b06      	ldr	r3, [sp, #24]
 8008de6:	ebaa 0303 	sub.w	r3, sl, r3
 8008dea:	4599      	cmp	r9, r3
 8008dec:	bfa8      	it	ge
 8008dee:	4699      	movge	r9, r3
 8008df0:	f1b9 0f00 	cmp.w	r9, #0
 8008df4:	dc33      	bgt.n	8008e5e <_printf_float+0x396>
 8008df6:	f04f 0800 	mov.w	r8, #0
 8008dfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008dfe:	f104 0b1a 	add.w	fp, r4, #26
 8008e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e04:	ebaa 0303 	sub.w	r3, sl, r3
 8008e08:	eba3 0309 	sub.w	r3, r3, r9
 8008e0c:	4543      	cmp	r3, r8
 8008e0e:	f77f af79 	ble.w	8008d04 <_printf_float+0x23c>
 8008e12:	2301      	movs	r3, #1
 8008e14:	465a      	mov	r2, fp
 8008e16:	4631      	mov	r1, r6
 8008e18:	4628      	mov	r0, r5
 8008e1a:	47b8      	blx	r7
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	f43f aeae 	beq.w	8008b7e <_printf_float+0xb6>
 8008e22:	f108 0801 	add.w	r8, r8, #1
 8008e26:	e7ec      	b.n	8008e02 <_printf_float+0x33a>
 8008e28:	4642      	mov	r2, r8
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	47b8      	blx	r7
 8008e30:	3001      	adds	r0, #1
 8008e32:	d1c2      	bne.n	8008dba <_printf_float+0x2f2>
 8008e34:	e6a3      	b.n	8008b7e <_printf_float+0xb6>
 8008e36:	2301      	movs	r3, #1
 8008e38:	4631      	mov	r1, r6
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	9206      	str	r2, [sp, #24]
 8008e3e:	47b8      	blx	r7
 8008e40:	3001      	adds	r0, #1
 8008e42:	f43f ae9c 	beq.w	8008b7e <_printf_float+0xb6>
 8008e46:	9a06      	ldr	r2, [sp, #24]
 8008e48:	f10b 0b01 	add.w	fp, fp, #1
 8008e4c:	e7bb      	b.n	8008dc6 <_printf_float+0x2fe>
 8008e4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e52:	4631      	mov	r1, r6
 8008e54:	4628      	mov	r0, r5
 8008e56:	47b8      	blx	r7
 8008e58:	3001      	adds	r0, #1
 8008e5a:	d1c0      	bne.n	8008dde <_printf_float+0x316>
 8008e5c:	e68f      	b.n	8008b7e <_printf_float+0xb6>
 8008e5e:	9a06      	ldr	r2, [sp, #24]
 8008e60:	464b      	mov	r3, r9
 8008e62:	4442      	add	r2, r8
 8008e64:	4631      	mov	r1, r6
 8008e66:	4628      	mov	r0, r5
 8008e68:	47b8      	blx	r7
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	d1c3      	bne.n	8008df6 <_printf_float+0x32e>
 8008e6e:	e686      	b.n	8008b7e <_printf_float+0xb6>
 8008e70:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e74:	f1ba 0f01 	cmp.w	sl, #1
 8008e78:	dc01      	bgt.n	8008e7e <_printf_float+0x3b6>
 8008e7a:	07db      	lsls	r3, r3, #31
 8008e7c:	d536      	bpl.n	8008eec <_printf_float+0x424>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	4642      	mov	r2, r8
 8008e82:	4631      	mov	r1, r6
 8008e84:	4628      	mov	r0, r5
 8008e86:	47b8      	blx	r7
 8008e88:	3001      	adds	r0, #1
 8008e8a:	f43f ae78 	beq.w	8008b7e <_printf_float+0xb6>
 8008e8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e92:	4631      	mov	r1, r6
 8008e94:	4628      	mov	r0, r5
 8008e96:	47b8      	blx	r7
 8008e98:	3001      	adds	r0, #1
 8008e9a:	f43f ae70 	beq.w	8008b7e <_printf_float+0xb6>
 8008e9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008eaa:	f7f7 fe3d 	bl	8000b28 <__aeabi_dcmpeq>
 8008eae:	b9c0      	cbnz	r0, 8008ee2 <_printf_float+0x41a>
 8008eb0:	4653      	mov	r3, sl
 8008eb2:	f108 0201 	add.w	r2, r8, #1
 8008eb6:	4631      	mov	r1, r6
 8008eb8:	4628      	mov	r0, r5
 8008eba:	47b8      	blx	r7
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	d10c      	bne.n	8008eda <_printf_float+0x412>
 8008ec0:	e65d      	b.n	8008b7e <_printf_float+0xb6>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	465a      	mov	r2, fp
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	4628      	mov	r0, r5
 8008eca:	47b8      	blx	r7
 8008ecc:	3001      	adds	r0, #1
 8008ece:	f43f ae56 	beq.w	8008b7e <_printf_float+0xb6>
 8008ed2:	f108 0801 	add.w	r8, r8, #1
 8008ed6:	45d0      	cmp	r8, sl
 8008ed8:	dbf3      	blt.n	8008ec2 <_printf_float+0x3fa>
 8008eda:	464b      	mov	r3, r9
 8008edc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ee0:	e6df      	b.n	8008ca2 <_printf_float+0x1da>
 8008ee2:	f04f 0800 	mov.w	r8, #0
 8008ee6:	f104 0b1a 	add.w	fp, r4, #26
 8008eea:	e7f4      	b.n	8008ed6 <_printf_float+0x40e>
 8008eec:	2301      	movs	r3, #1
 8008eee:	4642      	mov	r2, r8
 8008ef0:	e7e1      	b.n	8008eb6 <_printf_float+0x3ee>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	464a      	mov	r2, r9
 8008ef6:	4631      	mov	r1, r6
 8008ef8:	4628      	mov	r0, r5
 8008efa:	47b8      	blx	r7
 8008efc:	3001      	adds	r0, #1
 8008efe:	f43f ae3e 	beq.w	8008b7e <_printf_float+0xb6>
 8008f02:	f108 0801 	add.w	r8, r8, #1
 8008f06:	68e3      	ldr	r3, [r4, #12]
 8008f08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f0a:	1a5b      	subs	r3, r3, r1
 8008f0c:	4543      	cmp	r3, r8
 8008f0e:	dcf0      	bgt.n	8008ef2 <_printf_float+0x42a>
 8008f10:	e6fc      	b.n	8008d0c <_printf_float+0x244>
 8008f12:	f04f 0800 	mov.w	r8, #0
 8008f16:	f104 0919 	add.w	r9, r4, #25
 8008f1a:	e7f4      	b.n	8008f06 <_printf_float+0x43e>

08008f1c <_printf_common>:
 8008f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f20:	4616      	mov	r6, r2
 8008f22:	4698      	mov	r8, r3
 8008f24:	688a      	ldr	r2, [r1, #8]
 8008f26:	690b      	ldr	r3, [r1, #16]
 8008f28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	bfb8      	it	lt
 8008f30:	4613      	movlt	r3, r2
 8008f32:	6033      	str	r3, [r6, #0]
 8008f34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f38:	4607      	mov	r7, r0
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	b10a      	cbz	r2, 8008f42 <_printf_common+0x26>
 8008f3e:	3301      	adds	r3, #1
 8008f40:	6033      	str	r3, [r6, #0]
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	0699      	lsls	r1, r3, #26
 8008f46:	bf42      	ittt	mi
 8008f48:	6833      	ldrmi	r3, [r6, #0]
 8008f4a:	3302      	addmi	r3, #2
 8008f4c:	6033      	strmi	r3, [r6, #0]
 8008f4e:	6825      	ldr	r5, [r4, #0]
 8008f50:	f015 0506 	ands.w	r5, r5, #6
 8008f54:	d106      	bne.n	8008f64 <_printf_common+0x48>
 8008f56:	f104 0a19 	add.w	sl, r4, #25
 8008f5a:	68e3      	ldr	r3, [r4, #12]
 8008f5c:	6832      	ldr	r2, [r6, #0]
 8008f5e:	1a9b      	subs	r3, r3, r2
 8008f60:	42ab      	cmp	r3, r5
 8008f62:	dc26      	bgt.n	8008fb2 <_printf_common+0x96>
 8008f64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f68:	6822      	ldr	r2, [r4, #0]
 8008f6a:	3b00      	subs	r3, #0
 8008f6c:	bf18      	it	ne
 8008f6e:	2301      	movne	r3, #1
 8008f70:	0692      	lsls	r2, r2, #26
 8008f72:	d42b      	bmi.n	8008fcc <_printf_common+0xb0>
 8008f74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f78:	4641      	mov	r1, r8
 8008f7a:	4638      	mov	r0, r7
 8008f7c:	47c8      	blx	r9
 8008f7e:	3001      	adds	r0, #1
 8008f80:	d01e      	beq.n	8008fc0 <_printf_common+0xa4>
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	6922      	ldr	r2, [r4, #16]
 8008f86:	f003 0306 	and.w	r3, r3, #6
 8008f8a:	2b04      	cmp	r3, #4
 8008f8c:	bf02      	ittt	eq
 8008f8e:	68e5      	ldreq	r5, [r4, #12]
 8008f90:	6833      	ldreq	r3, [r6, #0]
 8008f92:	1aed      	subeq	r5, r5, r3
 8008f94:	68a3      	ldr	r3, [r4, #8]
 8008f96:	bf0c      	ite	eq
 8008f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f9c:	2500      	movne	r5, #0
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	bfc4      	itt	gt
 8008fa2:	1a9b      	subgt	r3, r3, r2
 8008fa4:	18ed      	addgt	r5, r5, r3
 8008fa6:	2600      	movs	r6, #0
 8008fa8:	341a      	adds	r4, #26
 8008faa:	42b5      	cmp	r5, r6
 8008fac:	d11a      	bne.n	8008fe4 <_printf_common+0xc8>
 8008fae:	2000      	movs	r0, #0
 8008fb0:	e008      	b.n	8008fc4 <_printf_common+0xa8>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	4652      	mov	r2, sl
 8008fb6:	4641      	mov	r1, r8
 8008fb8:	4638      	mov	r0, r7
 8008fba:	47c8      	blx	r9
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	d103      	bne.n	8008fc8 <_printf_common+0xac>
 8008fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc8:	3501      	adds	r5, #1
 8008fca:	e7c6      	b.n	8008f5a <_printf_common+0x3e>
 8008fcc:	18e1      	adds	r1, r4, r3
 8008fce:	1c5a      	adds	r2, r3, #1
 8008fd0:	2030      	movs	r0, #48	@ 0x30
 8008fd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fd6:	4422      	add	r2, r4
 8008fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008fdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008fe0:	3302      	adds	r3, #2
 8008fe2:	e7c7      	b.n	8008f74 <_printf_common+0x58>
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	4622      	mov	r2, r4
 8008fe8:	4641      	mov	r1, r8
 8008fea:	4638      	mov	r0, r7
 8008fec:	47c8      	blx	r9
 8008fee:	3001      	adds	r0, #1
 8008ff0:	d0e6      	beq.n	8008fc0 <_printf_common+0xa4>
 8008ff2:	3601      	adds	r6, #1
 8008ff4:	e7d9      	b.n	8008faa <_printf_common+0x8e>
	...

08008ff8 <_printf_i>:
 8008ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ffc:	7e0f      	ldrb	r7, [r1, #24]
 8008ffe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009000:	2f78      	cmp	r7, #120	@ 0x78
 8009002:	4691      	mov	r9, r2
 8009004:	4680      	mov	r8, r0
 8009006:	460c      	mov	r4, r1
 8009008:	469a      	mov	sl, r3
 800900a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800900e:	d807      	bhi.n	8009020 <_printf_i+0x28>
 8009010:	2f62      	cmp	r7, #98	@ 0x62
 8009012:	d80a      	bhi.n	800902a <_printf_i+0x32>
 8009014:	2f00      	cmp	r7, #0
 8009016:	f000 80d1 	beq.w	80091bc <_printf_i+0x1c4>
 800901a:	2f58      	cmp	r7, #88	@ 0x58
 800901c:	f000 80b8 	beq.w	8009190 <_printf_i+0x198>
 8009020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009024:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009028:	e03a      	b.n	80090a0 <_printf_i+0xa8>
 800902a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800902e:	2b15      	cmp	r3, #21
 8009030:	d8f6      	bhi.n	8009020 <_printf_i+0x28>
 8009032:	a101      	add	r1, pc, #4	@ (adr r1, 8009038 <_printf_i+0x40>)
 8009034:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009038:	08009091 	.word	0x08009091
 800903c:	080090a5 	.word	0x080090a5
 8009040:	08009021 	.word	0x08009021
 8009044:	08009021 	.word	0x08009021
 8009048:	08009021 	.word	0x08009021
 800904c:	08009021 	.word	0x08009021
 8009050:	080090a5 	.word	0x080090a5
 8009054:	08009021 	.word	0x08009021
 8009058:	08009021 	.word	0x08009021
 800905c:	08009021 	.word	0x08009021
 8009060:	08009021 	.word	0x08009021
 8009064:	080091a3 	.word	0x080091a3
 8009068:	080090cf 	.word	0x080090cf
 800906c:	0800915d 	.word	0x0800915d
 8009070:	08009021 	.word	0x08009021
 8009074:	08009021 	.word	0x08009021
 8009078:	080091c5 	.word	0x080091c5
 800907c:	08009021 	.word	0x08009021
 8009080:	080090cf 	.word	0x080090cf
 8009084:	08009021 	.word	0x08009021
 8009088:	08009021 	.word	0x08009021
 800908c:	08009165 	.word	0x08009165
 8009090:	6833      	ldr	r3, [r6, #0]
 8009092:	1d1a      	adds	r2, r3, #4
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6032      	str	r2, [r6, #0]
 8009098:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800909c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090a0:	2301      	movs	r3, #1
 80090a2:	e09c      	b.n	80091de <_printf_i+0x1e6>
 80090a4:	6833      	ldr	r3, [r6, #0]
 80090a6:	6820      	ldr	r0, [r4, #0]
 80090a8:	1d19      	adds	r1, r3, #4
 80090aa:	6031      	str	r1, [r6, #0]
 80090ac:	0606      	lsls	r6, r0, #24
 80090ae:	d501      	bpl.n	80090b4 <_printf_i+0xbc>
 80090b0:	681d      	ldr	r5, [r3, #0]
 80090b2:	e003      	b.n	80090bc <_printf_i+0xc4>
 80090b4:	0645      	lsls	r5, r0, #25
 80090b6:	d5fb      	bpl.n	80090b0 <_printf_i+0xb8>
 80090b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090bc:	2d00      	cmp	r5, #0
 80090be:	da03      	bge.n	80090c8 <_printf_i+0xd0>
 80090c0:	232d      	movs	r3, #45	@ 0x2d
 80090c2:	426d      	negs	r5, r5
 80090c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090c8:	4858      	ldr	r0, [pc, #352]	@ (800922c <_printf_i+0x234>)
 80090ca:	230a      	movs	r3, #10
 80090cc:	e011      	b.n	80090f2 <_printf_i+0xfa>
 80090ce:	6821      	ldr	r1, [r4, #0]
 80090d0:	6833      	ldr	r3, [r6, #0]
 80090d2:	0608      	lsls	r0, r1, #24
 80090d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80090d8:	d402      	bmi.n	80090e0 <_printf_i+0xe8>
 80090da:	0649      	lsls	r1, r1, #25
 80090dc:	bf48      	it	mi
 80090de:	b2ad      	uxthmi	r5, r5
 80090e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80090e2:	4852      	ldr	r0, [pc, #328]	@ (800922c <_printf_i+0x234>)
 80090e4:	6033      	str	r3, [r6, #0]
 80090e6:	bf14      	ite	ne
 80090e8:	230a      	movne	r3, #10
 80090ea:	2308      	moveq	r3, #8
 80090ec:	2100      	movs	r1, #0
 80090ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090f2:	6866      	ldr	r6, [r4, #4]
 80090f4:	60a6      	str	r6, [r4, #8]
 80090f6:	2e00      	cmp	r6, #0
 80090f8:	db05      	blt.n	8009106 <_printf_i+0x10e>
 80090fa:	6821      	ldr	r1, [r4, #0]
 80090fc:	432e      	orrs	r6, r5
 80090fe:	f021 0104 	bic.w	r1, r1, #4
 8009102:	6021      	str	r1, [r4, #0]
 8009104:	d04b      	beq.n	800919e <_printf_i+0x1a6>
 8009106:	4616      	mov	r6, r2
 8009108:	fbb5 f1f3 	udiv	r1, r5, r3
 800910c:	fb03 5711 	mls	r7, r3, r1, r5
 8009110:	5dc7      	ldrb	r7, [r0, r7]
 8009112:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009116:	462f      	mov	r7, r5
 8009118:	42bb      	cmp	r3, r7
 800911a:	460d      	mov	r5, r1
 800911c:	d9f4      	bls.n	8009108 <_printf_i+0x110>
 800911e:	2b08      	cmp	r3, #8
 8009120:	d10b      	bne.n	800913a <_printf_i+0x142>
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	07df      	lsls	r7, r3, #31
 8009126:	d508      	bpl.n	800913a <_printf_i+0x142>
 8009128:	6923      	ldr	r3, [r4, #16]
 800912a:	6861      	ldr	r1, [r4, #4]
 800912c:	4299      	cmp	r1, r3
 800912e:	bfde      	ittt	le
 8009130:	2330      	movle	r3, #48	@ 0x30
 8009132:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009136:	f106 36ff 	addle.w	r6, r6, #4294967295
 800913a:	1b92      	subs	r2, r2, r6
 800913c:	6122      	str	r2, [r4, #16]
 800913e:	f8cd a000 	str.w	sl, [sp]
 8009142:	464b      	mov	r3, r9
 8009144:	aa03      	add	r2, sp, #12
 8009146:	4621      	mov	r1, r4
 8009148:	4640      	mov	r0, r8
 800914a:	f7ff fee7 	bl	8008f1c <_printf_common>
 800914e:	3001      	adds	r0, #1
 8009150:	d14a      	bne.n	80091e8 <_printf_i+0x1f0>
 8009152:	f04f 30ff 	mov.w	r0, #4294967295
 8009156:	b004      	add	sp, #16
 8009158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	f043 0320 	orr.w	r3, r3, #32
 8009162:	6023      	str	r3, [r4, #0]
 8009164:	4832      	ldr	r0, [pc, #200]	@ (8009230 <_printf_i+0x238>)
 8009166:	2778      	movs	r7, #120	@ 0x78
 8009168:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800916c:	6823      	ldr	r3, [r4, #0]
 800916e:	6831      	ldr	r1, [r6, #0]
 8009170:	061f      	lsls	r7, r3, #24
 8009172:	f851 5b04 	ldr.w	r5, [r1], #4
 8009176:	d402      	bmi.n	800917e <_printf_i+0x186>
 8009178:	065f      	lsls	r7, r3, #25
 800917a:	bf48      	it	mi
 800917c:	b2ad      	uxthmi	r5, r5
 800917e:	6031      	str	r1, [r6, #0]
 8009180:	07d9      	lsls	r1, r3, #31
 8009182:	bf44      	itt	mi
 8009184:	f043 0320 	orrmi.w	r3, r3, #32
 8009188:	6023      	strmi	r3, [r4, #0]
 800918a:	b11d      	cbz	r5, 8009194 <_printf_i+0x19c>
 800918c:	2310      	movs	r3, #16
 800918e:	e7ad      	b.n	80090ec <_printf_i+0xf4>
 8009190:	4826      	ldr	r0, [pc, #152]	@ (800922c <_printf_i+0x234>)
 8009192:	e7e9      	b.n	8009168 <_printf_i+0x170>
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	f023 0320 	bic.w	r3, r3, #32
 800919a:	6023      	str	r3, [r4, #0]
 800919c:	e7f6      	b.n	800918c <_printf_i+0x194>
 800919e:	4616      	mov	r6, r2
 80091a0:	e7bd      	b.n	800911e <_printf_i+0x126>
 80091a2:	6833      	ldr	r3, [r6, #0]
 80091a4:	6825      	ldr	r5, [r4, #0]
 80091a6:	6961      	ldr	r1, [r4, #20]
 80091a8:	1d18      	adds	r0, r3, #4
 80091aa:	6030      	str	r0, [r6, #0]
 80091ac:	062e      	lsls	r6, r5, #24
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	d501      	bpl.n	80091b6 <_printf_i+0x1be>
 80091b2:	6019      	str	r1, [r3, #0]
 80091b4:	e002      	b.n	80091bc <_printf_i+0x1c4>
 80091b6:	0668      	lsls	r0, r5, #25
 80091b8:	d5fb      	bpl.n	80091b2 <_printf_i+0x1ba>
 80091ba:	8019      	strh	r1, [r3, #0]
 80091bc:	2300      	movs	r3, #0
 80091be:	6123      	str	r3, [r4, #16]
 80091c0:	4616      	mov	r6, r2
 80091c2:	e7bc      	b.n	800913e <_printf_i+0x146>
 80091c4:	6833      	ldr	r3, [r6, #0]
 80091c6:	1d1a      	adds	r2, r3, #4
 80091c8:	6032      	str	r2, [r6, #0]
 80091ca:	681e      	ldr	r6, [r3, #0]
 80091cc:	6862      	ldr	r2, [r4, #4]
 80091ce:	2100      	movs	r1, #0
 80091d0:	4630      	mov	r0, r6
 80091d2:	f7f7 f82d 	bl	8000230 <memchr>
 80091d6:	b108      	cbz	r0, 80091dc <_printf_i+0x1e4>
 80091d8:	1b80      	subs	r0, r0, r6
 80091da:	6060      	str	r0, [r4, #4]
 80091dc:	6863      	ldr	r3, [r4, #4]
 80091de:	6123      	str	r3, [r4, #16]
 80091e0:	2300      	movs	r3, #0
 80091e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091e6:	e7aa      	b.n	800913e <_printf_i+0x146>
 80091e8:	6923      	ldr	r3, [r4, #16]
 80091ea:	4632      	mov	r2, r6
 80091ec:	4649      	mov	r1, r9
 80091ee:	4640      	mov	r0, r8
 80091f0:	47d0      	blx	sl
 80091f2:	3001      	adds	r0, #1
 80091f4:	d0ad      	beq.n	8009152 <_printf_i+0x15a>
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	079b      	lsls	r3, r3, #30
 80091fa:	d413      	bmi.n	8009224 <_printf_i+0x22c>
 80091fc:	68e0      	ldr	r0, [r4, #12]
 80091fe:	9b03      	ldr	r3, [sp, #12]
 8009200:	4298      	cmp	r0, r3
 8009202:	bfb8      	it	lt
 8009204:	4618      	movlt	r0, r3
 8009206:	e7a6      	b.n	8009156 <_printf_i+0x15e>
 8009208:	2301      	movs	r3, #1
 800920a:	4632      	mov	r2, r6
 800920c:	4649      	mov	r1, r9
 800920e:	4640      	mov	r0, r8
 8009210:	47d0      	blx	sl
 8009212:	3001      	adds	r0, #1
 8009214:	d09d      	beq.n	8009152 <_printf_i+0x15a>
 8009216:	3501      	adds	r5, #1
 8009218:	68e3      	ldr	r3, [r4, #12]
 800921a:	9903      	ldr	r1, [sp, #12]
 800921c:	1a5b      	subs	r3, r3, r1
 800921e:	42ab      	cmp	r3, r5
 8009220:	dcf2      	bgt.n	8009208 <_printf_i+0x210>
 8009222:	e7eb      	b.n	80091fc <_printf_i+0x204>
 8009224:	2500      	movs	r5, #0
 8009226:	f104 0619 	add.w	r6, r4, #25
 800922a:	e7f5      	b.n	8009218 <_printf_i+0x220>
 800922c:	0800bb06 	.word	0x0800bb06
 8009230:	0800bb17 	.word	0x0800bb17

08009234 <std>:
 8009234:	2300      	movs	r3, #0
 8009236:	b510      	push	{r4, lr}
 8009238:	4604      	mov	r4, r0
 800923a:	e9c0 3300 	strd	r3, r3, [r0]
 800923e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009242:	6083      	str	r3, [r0, #8]
 8009244:	8181      	strh	r1, [r0, #12]
 8009246:	6643      	str	r3, [r0, #100]	@ 0x64
 8009248:	81c2      	strh	r2, [r0, #14]
 800924a:	6183      	str	r3, [r0, #24]
 800924c:	4619      	mov	r1, r3
 800924e:	2208      	movs	r2, #8
 8009250:	305c      	adds	r0, #92	@ 0x5c
 8009252:	f000 f92a 	bl	80094aa <memset>
 8009256:	4b0d      	ldr	r3, [pc, #52]	@ (800928c <std+0x58>)
 8009258:	6263      	str	r3, [r4, #36]	@ 0x24
 800925a:	4b0d      	ldr	r3, [pc, #52]	@ (8009290 <std+0x5c>)
 800925c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800925e:	4b0d      	ldr	r3, [pc, #52]	@ (8009294 <std+0x60>)
 8009260:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009262:	4b0d      	ldr	r3, [pc, #52]	@ (8009298 <std+0x64>)
 8009264:	6323      	str	r3, [r4, #48]	@ 0x30
 8009266:	4b0d      	ldr	r3, [pc, #52]	@ (800929c <std+0x68>)
 8009268:	6224      	str	r4, [r4, #32]
 800926a:	429c      	cmp	r4, r3
 800926c:	d006      	beq.n	800927c <std+0x48>
 800926e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009272:	4294      	cmp	r4, r2
 8009274:	d002      	beq.n	800927c <std+0x48>
 8009276:	33d0      	adds	r3, #208	@ 0xd0
 8009278:	429c      	cmp	r4, r3
 800927a:	d105      	bne.n	8009288 <std+0x54>
 800927c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009284:	f000 b9a0 	b.w	80095c8 <__retarget_lock_init_recursive>
 8009288:	bd10      	pop	{r4, pc}
 800928a:	bf00      	nop
 800928c:	08009425 	.word	0x08009425
 8009290:	08009447 	.word	0x08009447
 8009294:	0800947f 	.word	0x0800947f
 8009298:	080094a3 	.word	0x080094a3
 800929c:	20000c3c 	.word	0x20000c3c

080092a0 <stdio_exit_handler>:
 80092a0:	4a02      	ldr	r2, [pc, #8]	@ (80092ac <stdio_exit_handler+0xc>)
 80092a2:	4903      	ldr	r1, [pc, #12]	@ (80092b0 <stdio_exit_handler+0x10>)
 80092a4:	4803      	ldr	r0, [pc, #12]	@ (80092b4 <stdio_exit_handler+0x14>)
 80092a6:	f000 b869 	b.w	800937c <_fwalk_sglue>
 80092aa:	bf00      	nop
 80092ac:	2000000c 	.word	0x2000000c
 80092b0:	0800af4d 	.word	0x0800af4d
 80092b4:	2000001c 	.word	0x2000001c

080092b8 <cleanup_stdio>:
 80092b8:	6841      	ldr	r1, [r0, #4]
 80092ba:	4b0c      	ldr	r3, [pc, #48]	@ (80092ec <cleanup_stdio+0x34>)
 80092bc:	4299      	cmp	r1, r3
 80092be:	b510      	push	{r4, lr}
 80092c0:	4604      	mov	r4, r0
 80092c2:	d001      	beq.n	80092c8 <cleanup_stdio+0x10>
 80092c4:	f001 fe42 	bl	800af4c <_fflush_r>
 80092c8:	68a1      	ldr	r1, [r4, #8]
 80092ca:	4b09      	ldr	r3, [pc, #36]	@ (80092f0 <cleanup_stdio+0x38>)
 80092cc:	4299      	cmp	r1, r3
 80092ce:	d002      	beq.n	80092d6 <cleanup_stdio+0x1e>
 80092d0:	4620      	mov	r0, r4
 80092d2:	f001 fe3b 	bl	800af4c <_fflush_r>
 80092d6:	68e1      	ldr	r1, [r4, #12]
 80092d8:	4b06      	ldr	r3, [pc, #24]	@ (80092f4 <cleanup_stdio+0x3c>)
 80092da:	4299      	cmp	r1, r3
 80092dc:	d004      	beq.n	80092e8 <cleanup_stdio+0x30>
 80092de:	4620      	mov	r0, r4
 80092e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092e4:	f001 be32 	b.w	800af4c <_fflush_r>
 80092e8:	bd10      	pop	{r4, pc}
 80092ea:	bf00      	nop
 80092ec:	20000c3c 	.word	0x20000c3c
 80092f0:	20000ca4 	.word	0x20000ca4
 80092f4:	20000d0c 	.word	0x20000d0c

080092f8 <global_stdio_init.part.0>:
 80092f8:	b510      	push	{r4, lr}
 80092fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009328 <global_stdio_init.part.0+0x30>)
 80092fc:	4c0b      	ldr	r4, [pc, #44]	@ (800932c <global_stdio_init.part.0+0x34>)
 80092fe:	4a0c      	ldr	r2, [pc, #48]	@ (8009330 <global_stdio_init.part.0+0x38>)
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	4620      	mov	r0, r4
 8009304:	2200      	movs	r2, #0
 8009306:	2104      	movs	r1, #4
 8009308:	f7ff ff94 	bl	8009234 <std>
 800930c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009310:	2201      	movs	r2, #1
 8009312:	2109      	movs	r1, #9
 8009314:	f7ff ff8e 	bl	8009234 <std>
 8009318:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800931c:	2202      	movs	r2, #2
 800931e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009322:	2112      	movs	r1, #18
 8009324:	f7ff bf86 	b.w	8009234 <std>
 8009328:	20000d74 	.word	0x20000d74
 800932c:	20000c3c 	.word	0x20000c3c
 8009330:	080092a1 	.word	0x080092a1

08009334 <__sfp_lock_acquire>:
 8009334:	4801      	ldr	r0, [pc, #4]	@ (800933c <__sfp_lock_acquire+0x8>)
 8009336:	f000 b948 	b.w	80095ca <__retarget_lock_acquire_recursive>
 800933a:	bf00      	nop
 800933c:	20000d7d 	.word	0x20000d7d

08009340 <__sfp_lock_release>:
 8009340:	4801      	ldr	r0, [pc, #4]	@ (8009348 <__sfp_lock_release+0x8>)
 8009342:	f000 b943 	b.w	80095cc <__retarget_lock_release_recursive>
 8009346:	bf00      	nop
 8009348:	20000d7d 	.word	0x20000d7d

0800934c <__sinit>:
 800934c:	b510      	push	{r4, lr}
 800934e:	4604      	mov	r4, r0
 8009350:	f7ff fff0 	bl	8009334 <__sfp_lock_acquire>
 8009354:	6a23      	ldr	r3, [r4, #32]
 8009356:	b11b      	cbz	r3, 8009360 <__sinit+0x14>
 8009358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800935c:	f7ff bff0 	b.w	8009340 <__sfp_lock_release>
 8009360:	4b04      	ldr	r3, [pc, #16]	@ (8009374 <__sinit+0x28>)
 8009362:	6223      	str	r3, [r4, #32]
 8009364:	4b04      	ldr	r3, [pc, #16]	@ (8009378 <__sinit+0x2c>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1f5      	bne.n	8009358 <__sinit+0xc>
 800936c:	f7ff ffc4 	bl	80092f8 <global_stdio_init.part.0>
 8009370:	e7f2      	b.n	8009358 <__sinit+0xc>
 8009372:	bf00      	nop
 8009374:	080092b9 	.word	0x080092b9
 8009378:	20000d74 	.word	0x20000d74

0800937c <_fwalk_sglue>:
 800937c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009380:	4607      	mov	r7, r0
 8009382:	4688      	mov	r8, r1
 8009384:	4614      	mov	r4, r2
 8009386:	2600      	movs	r6, #0
 8009388:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800938c:	f1b9 0901 	subs.w	r9, r9, #1
 8009390:	d505      	bpl.n	800939e <_fwalk_sglue+0x22>
 8009392:	6824      	ldr	r4, [r4, #0]
 8009394:	2c00      	cmp	r4, #0
 8009396:	d1f7      	bne.n	8009388 <_fwalk_sglue+0xc>
 8009398:	4630      	mov	r0, r6
 800939a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800939e:	89ab      	ldrh	r3, [r5, #12]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d907      	bls.n	80093b4 <_fwalk_sglue+0x38>
 80093a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093a8:	3301      	adds	r3, #1
 80093aa:	d003      	beq.n	80093b4 <_fwalk_sglue+0x38>
 80093ac:	4629      	mov	r1, r5
 80093ae:	4638      	mov	r0, r7
 80093b0:	47c0      	blx	r8
 80093b2:	4306      	orrs	r6, r0
 80093b4:	3568      	adds	r5, #104	@ 0x68
 80093b6:	e7e9      	b.n	800938c <_fwalk_sglue+0x10>

080093b8 <sniprintf>:
 80093b8:	b40c      	push	{r2, r3}
 80093ba:	b530      	push	{r4, r5, lr}
 80093bc:	4b18      	ldr	r3, [pc, #96]	@ (8009420 <sniprintf+0x68>)
 80093be:	1e0c      	subs	r4, r1, #0
 80093c0:	681d      	ldr	r5, [r3, #0]
 80093c2:	b09d      	sub	sp, #116	@ 0x74
 80093c4:	da08      	bge.n	80093d8 <sniprintf+0x20>
 80093c6:	238b      	movs	r3, #139	@ 0x8b
 80093c8:	602b      	str	r3, [r5, #0]
 80093ca:	f04f 30ff 	mov.w	r0, #4294967295
 80093ce:	b01d      	add	sp, #116	@ 0x74
 80093d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093d4:	b002      	add	sp, #8
 80093d6:	4770      	bx	lr
 80093d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80093dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80093e0:	f04f 0300 	mov.w	r3, #0
 80093e4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80093e6:	bf14      	ite	ne
 80093e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80093ec:	4623      	moveq	r3, r4
 80093ee:	9304      	str	r3, [sp, #16]
 80093f0:	9307      	str	r3, [sp, #28]
 80093f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80093f6:	9002      	str	r0, [sp, #8]
 80093f8:	9006      	str	r0, [sp, #24]
 80093fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80093fe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009400:	ab21      	add	r3, sp, #132	@ 0x84
 8009402:	a902      	add	r1, sp, #8
 8009404:	4628      	mov	r0, r5
 8009406:	9301      	str	r3, [sp, #4]
 8009408:	f001 fc20 	bl	800ac4c <_svfiprintf_r>
 800940c:	1c43      	adds	r3, r0, #1
 800940e:	bfbc      	itt	lt
 8009410:	238b      	movlt	r3, #139	@ 0x8b
 8009412:	602b      	strlt	r3, [r5, #0]
 8009414:	2c00      	cmp	r4, #0
 8009416:	d0da      	beq.n	80093ce <sniprintf+0x16>
 8009418:	9b02      	ldr	r3, [sp, #8]
 800941a:	2200      	movs	r2, #0
 800941c:	701a      	strb	r2, [r3, #0]
 800941e:	e7d6      	b.n	80093ce <sniprintf+0x16>
 8009420:	20000018 	.word	0x20000018

08009424 <__sread>:
 8009424:	b510      	push	{r4, lr}
 8009426:	460c      	mov	r4, r1
 8009428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800942c:	f000 f87e 	bl	800952c <_read_r>
 8009430:	2800      	cmp	r0, #0
 8009432:	bfab      	itete	ge
 8009434:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009436:	89a3      	ldrhlt	r3, [r4, #12]
 8009438:	181b      	addge	r3, r3, r0
 800943a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800943e:	bfac      	ite	ge
 8009440:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009442:	81a3      	strhlt	r3, [r4, #12]
 8009444:	bd10      	pop	{r4, pc}

08009446 <__swrite>:
 8009446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800944a:	461f      	mov	r7, r3
 800944c:	898b      	ldrh	r3, [r1, #12]
 800944e:	05db      	lsls	r3, r3, #23
 8009450:	4605      	mov	r5, r0
 8009452:	460c      	mov	r4, r1
 8009454:	4616      	mov	r6, r2
 8009456:	d505      	bpl.n	8009464 <__swrite+0x1e>
 8009458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800945c:	2302      	movs	r3, #2
 800945e:	2200      	movs	r2, #0
 8009460:	f000 f852 	bl	8009508 <_lseek_r>
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800946a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800946e:	81a3      	strh	r3, [r4, #12]
 8009470:	4632      	mov	r2, r6
 8009472:	463b      	mov	r3, r7
 8009474:	4628      	mov	r0, r5
 8009476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800947a:	f000 b869 	b.w	8009550 <_write_r>

0800947e <__sseek>:
 800947e:	b510      	push	{r4, lr}
 8009480:	460c      	mov	r4, r1
 8009482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009486:	f000 f83f 	bl	8009508 <_lseek_r>
 800948a:	1c43      	adds	r3, r0, #1
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	bf15      	itete	ne
 8009490:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009492:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009496:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800949a:	81a3      	strheq	r3, [r4, #12]
 800949c:	bf18      	it	ne
 800949e:	81a3      	strhne	r3, [r4, #12]
 80094a0:	bd10      	pop	{r4, pc}

080094a2 <__sclose>:
 80094a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a6:	f000 b81f 	b.w	80094e8 <_close_r>

080094aa <memset>:
 80094aa:	4402      	add	r2, r0
 80094ac:	4603      	mov	r3, r0
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d100      	bne.n	80094b4 <memset+0xa>
 80094b2:	4770      	bx	lr
 80094b4:	f803 1b01 	strb.w	r1, [r3], #1
 80094b8:	e7f9      	b.n	80094ae <memset+0x4>

080094ba <strncpy>:
 80094ba:	b510      	push	{r4, lr}
 80094bc:	3901      	subs	r1, #1
 80094be:	4603      	mov	r3, r0
 80094c0:	b132      	cbz	r2, 80094d0 <strncpy+0x16>
 80094c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80094c6:	f803 4b01 	strb.w	r4, [r3], #1
 80094ca:	3a01      	subs	r2, #1
 80094cc:	2c00      	cmp	r4, #0
 80094ce:	d1f7      	bne.n	80094c0 <strncpy+0x6>
 80094d0:	441a      	add	r2, r3
 80094d2:	2100      	movs	r1, #0
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d100      	bne.n	80094da <strncpy+0x20>
 80094d8:	bd10      	pop	{r4, pc}
 80094da:	f803 1b01 	strb.w	r1, [r3], #1
 80094de:	e7f9      	b.n	80094d4 <strncpy+0x1a>

080094e0 <_localeconv_r>:
 80094e0:	4800      	ldr	r0, [pc, #0]	@ (80094e4 <_localeconv_r+0x4>)
 80094e2:	4770      	bx	lr
 80094e4:	20000158 	.word	0x20000158

080094e8 <_close_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4d06      	ldr	r5, [pc, #24]	@ (8009504 <_close_r+0x1c>)
 80094ec:	2300      	movs	r3, #0
 80094ee:	4604      	mov	r4, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	602b      	str	r3, [r5, #0]
 80094f4:	f7f9 ff44 	bl	8003380 <_close>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	d102      	bne.n	8009502 <_close_r+0x1a>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	b103      	cbz	r3, 8009502 <_close_r+0x1a>
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	20000d78 	.word	0x20000d78

08009508 <_lseek_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	4d07      	ldr	r5, [pc, #28]	@ (8009528 <_lseek_r+0x20>)
 800950c:	4604      	mov	r4, r0
 800950e:	4608      	mov	r0, r1
 8009510:	4611      	mov	r1, r2
 8009512:	2200      	movs	r2, #0
 8009514:	602a      	str	r2, [r5, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	f7f9 ff59 	bl	80033ce <_lseek>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d102      	bne.n	8009526 <_lseek_r+0x1e>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	b103      	cbz	r3, 8009526 <_lseek_r+0x1e>
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	20000d78 	.word	0x20000d78

0800952c <_read_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4d07      	ldr	r5, [pc, #28]	@ (800954c <_read_r+0x20>)
 8009530:	4604      	mov	r4, r0
 8009532:	4608      	mov	r0, r1
 8009534:	4611      	mov	r1, r2
 8009536:	2200      	movs	r2, #0
 8009538:	602a      	str	r2, [r5, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	f7f9 fee7 	bl	800330e <_read>
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	d102      	bne.n	800954a <_read_r+0x1e>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	b103      	cbz	r3, 800954a <_read_r+0x1e>
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	bd38      	pop	{r3, r4, r5, pc}
 800954c:	20000d78 	.word	0x20000d78

08009550 <_write_r>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	4d07      	ldr	r5, [pc, #28]	@ (8009570 <_write_r+0x20>)
 8009554:	4604      	mov	r4, r0
 8009556:	4608      	mov	r0, r1
 8009558:	4611      	mov	r1, r2
 800955a:	2200      	movs	r2, #0
 800955c:	602a      	str	r2, [r5, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	f7f9 fef2 	bl	8003348 <_write>
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	d102      	bne.n	800956e <_write_r+0x1e>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	b103      	cbz	r3, 800956e <_write_r+0x1e>
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	20000d78 	.word	0x20000d78

08009574 <__errno>:
 8009574:	4b01      	ldr	r3, [pc, #4]	@ (800957c <__errno+0x8>)
 8009576:	6818      	ldr	r0, [r3, #0]
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	20000018 	.word	0x20000018

08009580 <__libc_init_array>:
 8009580:	b570      	push	{r4, r5, r6, lr}
 8009582:	4d0d      	ldr	r5, [pc, #52]	@ (80095b8 <__libc_init_array+0x38>)
 8009584:	4c0d      	ldr	r4, [pc, #52]	@ (80095bc <__libc_init_array+0x3c>)
 8009586:	1b64      	subs	r4, r4, r5
 8009588:	10a4      	asrs	r4, r4, #2
 800958a:	2600      	movs	r6, #0
 800958c:	42a6      	cmp	r6, r4
 800958e:	d109      	bne.n	80095a4 <__libc_init_array+0x24>
 8009590:	4d0b      	ldr	r5, [pc, #44]	@ (80095c0 <__libc_init_array+0x40>)
 8009592:	4c0c      	ldr	r4, [pc, #48]	@ (80095c4 <__libc_init_array+0x44>)
 8009594:	f002 f86a 	bl	800b66c <_init>
 8009598:	1b64      	subs	r4, r4, r5
 800959a:	10a4      	asrs	r4, r4, #2
 800959c:	2600      	movs	r6, #0
 800959e:	42a6      	cmp	r6, r4
 80095a0:	d105      	bne.n	80095ae <__libc_init_array+0x2e>
 80095a2:	bd70      	pop	{r4, r5, r6, pc}
 80095a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095a8:	4798      	blx	r3
 80095aa:	3601      	adds	r6, #1
 80095ac:	e7ee      	b.n	800958c <__libc_init_array+0xc>
 80095ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b2:	4798      	blx	r3
 80095b4:	3601      	adds	r6, #1
 80095b6:	e7f2      	b.n	800959e <__libc_init_array+0x1e>
 80095b8:	0800be74 	.word	0x0800be74
 80095bc:	0800be74 	.word	0x0800be74
 80095c0:	0800be74 	.word	0x0800be74
 80095c4:	0800be78 	.word	0x0800be78

080095c8 <__retarget_lock_init_recursive>:
 80095c8:	4770      	bx	lr

080095ca <__retarget_lock_acquire_recursive>:
 80095ca:	4770      	bx	lr

080095cc <__retarget_lock_release_recursive>:
 80095cc:	4770      	bx	lr

080095ce <memcpy>:
 80095ce:	440a      	add	r2, r1
 80095d0:	4291      	cmp	r1, r2
 80095d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80095d6:	d100      	bne.n	80095da <memcpy+0xc>
 80095d8:	4770      	bx	lr
 80095da:	b510      	push	{r4, lr}
 80095dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095e4:	4291      	cmp	r1, r2
 80095e6:	d1f9      	bne.n	80095dc <memcpy+0xe>
 80095e8:	bd10      	pop	{r4, pc}

080095ea <quorem>:
 80095ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ee:	6903      	ldr	r3, [r0, #16]
 80095f0:	690c      	ldr	r4, [r1, #16]
 80095f2:	42a3      	cmp	r3, r4
 80095f4:	4607      	mov	r7, r0
 80095f6:	db7e      	blt.n	80096f6 <quorem+0x10c>
 80095f8:	3c01      	subs	r4, #1
 80095fa:	f101 0814 	add.w	r8, r1, #20
 80095fe:	00a3      	lsls	r3, r4, #2
 8009600:	f100 0514 	add.w	r5, r0, #20
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800960a:	9301      	str	r3, [sp, #4]
 800960c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009610:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009614:	3301      	adds	r3, #1
 8009616:	429a      	cmp	r2, r3
 8009618:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800961c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009620:	d32e      	bcc.n	8009680 <quorem+0x96>
 8009622:	f04f 0a00 	mov.w	sl, #0
 8009626:	46c4      	mov	ip, r8
 8009628:	46ae      	mov	lr, r5
 800962a:	46d3      	mov	fp, sl
 800962c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009630:	b298      	uxth	r0, r3
 8009632:	fb06 a000 	mla	r0, r6, r0, sl
 8009636:	0c02      	lsrs	r2, r0, #16
 8009638:	0c1b      	lsrs	r3, r3, #16
 800963a:	fb06 2303 	mla	r3, r6, r3, r2
 800963e:	f8de 2000 	ldr.w	r2, [lr]
 8009642:	b280      	uxth	r0, r0
 8009644:	b292      	uxth	r2, r2
 8009646:	1a12      	subs	r2, r2, r0
 8009648:	445a      	add	r2, fp
 800964a:	f8de 0000 	ldr.w	r0, [lr]
 800964e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009652:	b29b      	uxth	r3, r3
 8009654:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009658:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800965c:	b292      	uxth	r2, r2
 800965e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009662:	45e1      	cmp	r9, ip
 8009664:	f84e 2b04 	str.w	r2, [lr], #4
 8009668:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800966c:	d2de      	bcs.n	800962c <quorem+0x42>
 800966e:	9b00      	ldr	r3, [sp, #0]
 8009670:	58eb      	ldr	r3, [r5, r3]
 8009672:	b92b      	cbnz	r3, 8009680 <quorem+0x96>
 8009674:	9b01      	ldr	r3, [sp, #4]
 8009676:	3b04      	subs	r3, #4
 8009678:	429d      	cmp	r5, r3
 800967a:	461a      	mov	r2, r3
 800967c:	d32f      	bcc.n	80096de <quorem+0xf4>
 800967e:	613c      	str	r4, [r7, #16]
 8009680:	4638      	mov	r0, r7
 8009682:	f001 f97f 	bl	800a984 <__mcmp>
 8009686:	2800      	cmp	r0, #0
 8009688:	db25      	blt.n	80096d6 <quorem+0xec>
 800968a:	4629      	mov	r1, r5
 800968c:	2000      	movs	r0, #0
 800968e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009692:	f8d1 c000 	ldr.w	ip, [r1]
 8009696:	fa1f fe82 	uxth.w	lr, r2
 800969a:	fa1f f38c 	uxth.w	r3, ip
 800969e:	eba3 030e 	sub.w	r3, r3, lr
 80096a2:	4403      	add	r3, r0
 80096a4:	0c12      	lsrs	r2, r2, #16
 80096a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80096aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096b4:	45c1      	cmp	r9, r8
 80096b6:	f841 3b04 	str.w	r3, [r1], #4
 80096ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80096be:	d2e6      	bcs.n	800968e <quorem+0xa4>
 80096c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096c8:	b922      	cbnz	r2, 80096d4 <quorem+0xea>
 80096ca:	3b04      	subs	r3, #4
 80096cc:	429d      	cmp	r5, r3
 80096ce:	461a      	mov	r2, r3
 80096d0:	d30b      	bcc.n	80096ea <quorem+0x100>
 80096d2:	613c      	str	r4, [r7, #16]
 80096d4:	3601      	adds	r6, #1
 80096d6:	4630      	mov	r0, r6
 80096d8:	b003      	add	sp, #12
 80096da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096de:	6812      	ldr	r2, [r2, #0]
 80096e0:	3b04      	subs	r3, #4
 80096e2:	2a00      	cmp	r2, #0
 80096e4:	d1cb      	bne.n	800967e <quorem+0x94>
 80096e6:	3c01      	subs	r4, #1
 80096e8:	e7c6      	b.n	8009678 <quorem+0x8e>
 80096ea:	6812      	ldr	r2, [r2, #0]
 80096ec:	3b04      	subs	r3, #4
 80096ee:	2a00      	cmp	r2, #0
 80096f0:	d1ef      	bne.n	80096d2 <quorem+0xe8>
 80096f2:	3c01      	subs	r4, #1
 80096f4:	e7ea      	b.n	80096cc <quorem+0xe2>
 80096f6:	2000      	movs	r0, #0
 80096f8:	e7ee      	b.n	80096d8 <quorem+0xee>
 80096fa:	0000      	movs	r0, r0
 80096fc:	0000      	movs	r0, r0
	...

08009700 <_dtoa_r>:
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	69c7      	ldr	r7, [r0, #28]
 8009706:	b097      	sub	sp, #92	@ 0x5c
 8009708:	ed8d 0b04 	vstr	d0, [sp, #16]
 800970c:	ec55 4b10 	vmov	r4, r5, d0
 8009710:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009712:	9107      	str	r1, [sp, #28]
 8009714:	4681      	mov	r9, r0
 8009716:	920c      	str	r2, [sp, #48]	@ 0x30
 8009718:	9311      	str	r3, [sp, #68]	@ 0x44
 800971a:	b97f      	cbnz	r7, 800973c <_dtoa_r+0x3c>
 800971c:	2010      	movs	r0, #16
 800971e:	f000 fe09 	bl	800a334 <malloc>
 8009722:	4602      	mov	r2, r0
 8009724:	f8c9 001c 	str.w	r0, [r9, #28]
 8009728:	b920      	cbnz	r0, 8009734 <_dtoa_r+0x34>
 800972a:	4ba9      	ldr	r3, [pc, #676]	@ (80099d0 <_dtoa_r+0x2d0>)
 800972c:	21ef      	movs	r1, #239	@ 0xef
 800972e:	48a9      	ldr	r0, [pc, #676]	@ (80099d4 <_dtoa_r+0x2d4>)
 8009730:	f001 fc5e 	bl	800aff0 <__assert_func>
 8009734:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009738:	6007      	str	r7, [r0, #0]
 800973a:	60c7      	str	r7, [r0, #12]
 800973c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009740:	6819      	ldr	r1, [r3, #0]
 8009742:	b159      	cbz	r1, 800975c <_dtoa_r+0x5c>
 8009744:	685a      	ldr	r2, [r3, #4]
 8009746:	604a      	str	r2, [r1, #4]
 8009748:	2301      	movs	r3, #1
 800974a:	4093      	lsls	r3, r2
 800974c:	608b      	str	r3, [r1, #8]
 800974e:	4648      	mov	r0, r9
 8009750:	f000 fee6 	bl	800a520 <_Bfree>
 8009754:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009758:	2200      	movs	r2, #0
 800975a:	601a      	str	r2, [r3, #0]
 800975c:	1e2b      	subs	r3, r5, #0
 800975e:	bfb9      	ittee	lt
 8009760:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009764:	9305      	strlt	r3, [sp, #20]
 8009766:	2300      	movge	r3, #0
 8009768:	6033      	strge	r3, [r6, #0]
 800976a:	9f05      	ldr	r7, [sp, #20]
 800976c:	4b9a      	ldr	r3, [pc, #616]	@ (80099d8 <_dtoa_r+0x2d8>)
 800976e:	bfbc      	itt	lt
 8009770:	2201      	movlt	r2, #1
 8009772:	6032      	strlt	r2, [r6, #0]
 8009774:	43bb      	bics	r3, r7
 8009776:	d112      	bne.n	800979e <_dtoa_r+0x9e>
 8009778:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800977a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009784:	4323      	orrs	r3, r4
 8009786:	f000 855a 	beq.w	800a23e <_dtoa_r+0xb3e>
 800978a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800978c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80099ec <_dtoa_r+0x2ec>
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 855c 	beq.w	800a24e <_dtoa_r+0xb4e>
 8009796:	f10a 0303 	add.w	r3, sl, #3
 800979a:	f000 bd56 	b.w	800a24a <_dtoa_r+0xb4a>
 800979e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80097a2:	2200      	movs	r2, #0
 80097a4:	ec51 0b17 	vmov	r0, r1, d7
 80097a8:	2300      	movs	r3, #0
 80097aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80097ae:	f7f7 f9bb 	bl	8000b28 <__aeabi_dcmpeq>
 80097b2:	4680      	mov	r8, r0
 80097b4:	b158      	cbz	r0, 80097ce <_dtoa_r+0xce>
 80097b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80097b8:	2301      	movs	r3, #1
 80097ba:	6013      	str	r3, [r2, #0]
 80097bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80097be:	b113      	cbz	r3, 80097c6 <_dtoa_r+0xc6>
 80097c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80097c2:	4b86      	ldr	r3, [pc, #536]	@ (80099dc <_dtoa_r+0x2dc>)
 80097c4:	6013      	str	r3, [r2, #0]
 80097c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80099f0 <_dtoa_r+0x2f0>
 80097ca:	f000 bd40 	b.w	800a24e <_dtoa_r+0xb4e>
 80097ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80097d2:	aa14      	add	r2, sp, #80	@ 0x50
 80097d4:	a915      	add	r1, sp, #84	@ 0x54
 80097d6:	4648      	mov	r0, r9
 80097d8:	f001 f984 	bl	800aae4 <__d2b>
 80097dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80097e0:	9002      	str	r0, [sp, #8]
 80097e2:	2e00      	cmp	r6, #0
 80097e4:	d078      	beq.n	80098d8 <_dtoa_r+0x1d8>
 80097e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80097ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80097f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80097f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80097fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009800:	4619      	mov	r1, r3
 8009802:	2200      	movs	r2, #0
 8009804:	4b76      	ldr	r3, [pc, #472]	@ (80099e0 <_dtoa_r+0x2e0>)
 8009806:	f7f6 fd6f 	bl	80002e8 <__aeabi_dsub>
 800980a:	a36b      	add	r3, pc, #428	@ (adr r3, 80099b8 <_dtoa_r+0x2b8>)
 800980c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009810:	f7f6 ff22 	bl	8000658 <__aeabi_dmul>
 8009814:	a36a      	add	r3, pc, #424	@ (adr r3, 80099c0 <_dtoa_r+0x2c0>)
 8009816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981a:	f7f6 fd67 	bl	80002ec <__adddf3>
 800981e:	4604      	mov	r4, r0
 8009820:	4630      	mov	r0, r6
 8009822:	460d      	mov	r5, r1
 8009824:	f7f6 feae 	bl	8000584 <__aeabi_i2d>
 8009828:	a367      	add	r3, pc, #412	@ (adr r3, 80099c8 <_dtoa_r+0x2c8>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	f7f6 ff13 	bl	8000658 <__aeabi_dmul>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4620      	mov	r0, r4
 8009838:	4629      	mov	r1, r5
 800983a:	f7f6 fd57 	bl	80002ec <__adddf3>
 800983e:	4604      	mov	r4, r0
 8009840:	460d      	mov	r5, r1
 8009842:	f7f7 f9b9 	bl	8000bb8 <__aeabi_d2iz>
 8009846:	2200      	movs	r2, #0
 8009848:	4607      	mov	r7, r0
 800984a:	2300      	movs	r3, #0
 800984c:	4620      	mov	r0, r4
 800984e:	4629      	mov	r1, r5
 8009850:	f7f7 f974 	bl	8000b3c <__aeabi_dcmplt>
 8009854:	b140      	cbz	r0, 8009868 <_dtoa_r+0x168>
 8009856:	4638      	mov	r0, r7
 8009858:	f7f6 fe94 	bl	8000584 <__aeabi_i2d>
 800985c:	4622      	mov	r2, r4
 800985e:	462b      	mov	r3, r5
 8009860:	f7f7 f962 	bl	8000b28 <__aeabi_dcmpeq>
 8009864:	b900      	cbnz	r0, 8009868 <_dtoa_r+0x168>
 8009866:	3f01      	subs	r7, #1
 8009868:	2f16      	cmp	r7, #22
 800986a:	d852      	bhi.n	8009912 <_dtoa_r+0x212>
 800986c:	4b5d      	ldr	r3, [pc, #372]	@ (80099e4 <_dtoa_r+0x2e4>)
 800986e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800987a:	f7f7 f95f 	bl	8000b3c <__aeabi_dcmplt>
 800987e:	2800      	cmp	r0, #0
 8009880:	d049      	beq.n	8009916 <_dtoa_r+0x216>
 8009882:	3f01      	subs	r7, #1
 8009884:	2300      	movs	r3, #0
 8009886:	9310      	str	r3, [sp, #64]	@ 0x40
 8009888:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800988a:	1b9b      	subs	r3, r3, r6
 800988c:	1e5a      	subs	r2, r3, #1
 800988e:	bf45      	ittet	mi
 8009890:	f1c3 0301 	rsbmi	r3, r3, #1
 8009894:	9300      	strmi	r3, [sp, #0]
 8009896:	2300      	movpl	r3, #0
 8009898:	2300      	movmi	r3, #0
 800989a:	9206      	str	r2, [sp, #24]
 800989c:	bf54      	ite	pl
 800989e:	9300      	strpl	r3, [sp, #0]
 80098a0:	9306      	strmi	r3, [sp, #24]
 80098a2:	2f00      	cmp	r7, #0
 80098a4:	db39      	blt.n	800991a <_dtoa_r+0x21a>
 80098a6:	9b06      	ldr	r3, [sp, #24]
 80098a8:	970d      	str	r7, [sp, #52]	@ 0x34
 80098aa:	443b      	add	r3, r7
 80098ac:	9306      	str	r3, [sp, #24]
 80098ae:	2300      	movs	r3, #0
 80098b0:	9308      	str	r3, [sp, #32]
 80098b2:	9b07      	ldr	r3, [sp, #28]
 80098b4:	2b09      	cmp	r3, #9
 80098b6:	d863      	bhi.n	8009980 <_dtoa_r+0x280>
 80098b8:	2b05      	cmp	r3, #5
 80098ba:	bfc4      	itt	gt
 80098bc:	3b04      	subgt	r3, #4
 80098be:	9307      	strgt	r3, [sp, #28]
 80098c0:	9b07      	ldr	r3, [sp, #28]
 80098c2:	f1a3 0302 	sub.w	r3, r3, #2
 80098c6:	bfcc      	ite	gt
 80098c8:	2400      	movgt	r4, #0
 80098ca:	2401      	movle	r4, #1
 80098cc:	2b03      	cmp	r3, #3
 80098ce:	d863      	bhi.n	8009998 <_dtoa_r+0x298>
 80098d0:	e8df f003 	tbb	[pc, r3]
 80098d4:	2b375452 	.word	0x2b375452
 80098d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80098dc:	441e      	add	r6, r3
 80098de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80098e2:	2b20      	cmp	r3, #32
 80098e4:	bfc1      	itttt	gt
 80098e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80098ea:	409f      	lslgt	r7, r3
 80098ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80098f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80098f4:	bfd6      	itet	le
 80098f6:	f1c3 0320 	rsble	r3, r3, #32
 80098fa:	ea47 0003 	orrgt.w	r0, r7, r3
 80098fe:	fa04 f003 	lslle.w	r0, r4, r3
 8009902:	f7f6 fe2f 	bl	8000564 <__aeabi_ui2d>
 8009906:	2201      	movs	r2, #1
 8009908:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800990c:	3e01      	subs	r6, #1
 800990e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009910:	e776      	b.n	8009800 <_dtoa_r+0x100>
 8009912:	2301      	movs	r3, #1
 8009914:	e7b7      	b.n	8009886 <_dtoa_r+0x186>
 8009916:	9010      	str	r0, [sp, #64]	@ 0x40
 8009918:	e7b6      	b.n	8009888 <_dtoa_r+0x188>
 800991a:	9b00      	ldr	r3, [sp, #0]
 800991c:	1bdb      	subs	r3, r3, r7
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	427b      	negs	r3, r7
 8009922:	9308      	str	r3, [sp, #32]
 8009924:	2300      	movs	r3, #0
 8009926:	930d      	str	r3, [sp, #52]	@ 0x34
 8009928:	e7c3      	b.n	80098b2 <_dtoa_r+0x1b2>
 800992a:	2301      	movs	r3, #1
 800992c:	9309      	str	r3, [sp, #36]	@ 0x24
 800992e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009930:	eb07 0b03 	add.w	fp, r7, r3
 8009934:	f10b 0301 	add.w	r3, fp, #1
 8009938:	2b01      	cmp	r3, #1
 800993a:	9303      	str	r3, [sp, #12]
 800993c:	bfb8      	it	lt
 800993e:	2301      	movlt	r3, #1
 8009940:	e006      	b.n	8009950 <_dtoa_r+0x250>
 8009942:	2301      	movs	r3, #1
 8009944:	9309      	str	r3, [sp, #36]	@ 0x24
 8009946:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009948:	2b00      	cmp	r3, #0
 800994a:	dd28      	ble.n	800999e <_dtoa_r+0x29e>
 800994c:	469b      	mov	fp, r3
 800994e:	9303      	str	r3, [sp, #12]
 8009950:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009954:	2100      	movs	r1, #0
 8009956:	2204      	movs	r2, #4
 8009958:	f102 0514 	add.w	r5, r2, #20
 800995c:	429d      	cmp	r5, r3
 800995e:	d926      	bls.n	80099ae <_dtoa_r+0x2ae>
 8009960:	6041      	str	r1, [r0, #4]
 8009962:	4648      	mov	r0, r9
 8009964:	f000 fd9c 	bl	800a4a0 <_Balloc>
 8009968:	4682      	mov	sl, r0
 800996a:	2800      	cmp	r0, #0
 800996c:	d142      	bne.n	80099f4 <_dtoa_r+0x2f4>
 800996e:	4b1e      	ldr	r3, [pc, #120]	@ (80099e8 <_dtoa_r+0x2e8>)
 8009970:	4602      	mov	r2, r0
 8009972:	f240 11af 	movw	r1, #431	@ 0x1af
 8009976:	e6da      	b.n	800972e <_dtoa_r+0x2e>
 8009978:	2300      	movs	r3, #0
 800997a:	e7e3      	b.n	8009944 <_dtoa_r+0x244>
 800997c:	2300      	movs	r3, #0
 800997e:	e7d5      	b.n	800992c <_dtoa_r+0x22c>
 8009980:	2401      	movs	r4, #1
 8009982:	2300      	movs	r3, #0
 8009984:	9307      	str	r3, [sp, #28]
 8009986:	9409      	str	r4, [sp, #36]	@ 0x24
 8009988:	f04f 3bff 	mov.w	fp, #4294967295
 800998c:	2200      	movs	r2, #0
 800998e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009992:	2312      	movs	r3, #18
 8009994:	920c      	str	r2, [sp, #48]	@ 0x30
 8009996:	e7db      	b.n	8009950 <_dtoa_r+0x250>
 8009998:	2301      	movs	r3, #1
 800999a:	9309      	str	r3, [sp, #36]	@ 0x24
 800999c:	e7f4      	b.n	8009988 <_dtoa_r+0x288>
 800999e:	f04f 0b01 	mov.w	fp, #1
 80099a2:	f8cd b00c 	str.w	fp, [sp, #12]
 80099a6:	465b      	mov	r3, fp
 80099a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80099ac:	e7d0      	b.n	8009950 <_dtoa_r+0x250>
 80099ae:	3101      	adds	r1, #1
 80099b0:	0052      	lsls	r2, r2, #1
 80099b2:	e7d1      	b.n	8009958 <_dtoa_r+0x258>
 80099b4:	f3af 8000 	nop.w
 80099b8:	636f4361 	.word	0x636f4361
 80099bc:	3fd287a7 	.word	0x3fd287a7
 80099c0:	8b60c8b3 	.word	0x8b60c8b3
 80099c4:	3fc68a28 	.word	0x3fc68a28
 80099c8:	509f79fb 	.word	0x509f79fb
 80099cc:	3fd34413 	.word	0x3fd34413
 80099d0:	0800bb35 	.word	0x0800bb35
 80099d4:	0800bb4c 	.word	0x0800bb4c
 80099d8:	7ff00000 	.word	0x7ff00000
 80099dc:	0800bb05 	.word	0x0800bb05
 80099e0:	3ff80000 	.word	0x3ff80000
 80099e4:	0800bca0 	.word	0x0800bca0
 80099e8:	0800bba4 	.word	0x0800bba4
 80099ec:	0800bb31 	.word	0x0800bb31
 80099f0:	0800bb04 	.word	0x0800bb04
 80099f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80099f8:	6018      	str	r0, [r3, #0]
 80099fa:	9b03      	ldr	r3, [sp, #12]
 80099fc:	2b0e      	cmp	r3, #14
 80099fe:	f200 80a1 	bhi.w	8009b44 <_dtoa_r+0x444>
 8009a02:	2c00      	cmp	r4, #0
 8009a04:	f000 809e 	beq.w	8009b44 <_dtoa_r+0x444>
 8009a08:	2f00      	cmp	r7, #0
 8009a0a:	dd33      	ble.n	8009a74 <_dtoa_r+0x374>
 8009a0c:	4b9c      	ldr	r3, [pc, #624]	@ (8009c80 <_dtoa_r+0x580>)
 8009a0e:	f007 020f 	and.w	r2, r7, #15
 8009a12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a16:	ed93 7b00 	vldr	d7, [r3]
 8009a1a:	05f8      	lsls	r0, r7, #23
 8009a1c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009a20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009a24:	d516      	bpl.n	8009a54 <_dtoa_r+0x354>
 8009a26:	4b97      	ldr	r3, [pc, #604]	@ (8009c84 <_dtoa_r+0x584>)
 8009a28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009a2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a30:	f7f6 ff3c 	bl	80008ac <__aeabi_ddiv>
 8009a34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a38:	f004 040f 	and.w	r4, r4, #15
 8009a3c:	2603      	movs	r6, #3
 8009a3e:	4d91      	ldr	r5, [pc, #580]	@ (8009c84 <_dtoa_r+0x584>)
 8009a40:	b954      	cbnz	r4, 8009a58 <_dtoa_r+0x358>
 8009a42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a4a:	f7f6 ff2f 	bl	80008ac <__aeabi_ddiv>
 8009a4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a52:	e028      	b.n	8009aa6 <_dtoa_r+0x3a6>
 8009a54:	2602      	movs	r6, #2
 8009a56:	e7f2      	b.n	8009a3e <_dtoa_r+0x33e>
 8009a58:	07e1      	lsls	r1, r4, #31
 8009a5a:	d508      	bpl.n	8009a6e <_dtoa_r+0x36e>
 8009a5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009a60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a64:	f7f6 fdf8 	bl	8000658 <__aeabi_dmul>
 8009a68:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009a6c:	3601      	adds	r6, #1
 8009a6e:	1064      	asrs	r4, r4, #1
 8009a70:	3508      	adds	r5, #8
 8009a72:	e7e5      	b.n	8009a40 <_dtoa_r+0x340>
 8009a74:	f000 80af 	beq.w	8009bd6 <_dtoa_r+0x4d6>
 8009a78:	427c      	negs	r4, r7
 8009a7a:	4b81      	ldr	r3, [pc, #516]	@ (8009c80 <_dtoa_r+0x580>)
 8009a7c:	4d81      	ldr	r5, [pc, #516]	@ (8009c84 <_dtoa_r+0x584>)
 8009a7e:	f004 020f 	and.w	r2, r4, #15
 8009a82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009a8e:	f7f6 fde3 	bl	8000658 <__aeabi_dmul>
 8009a92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a96:	1124      	asrs	r4, r4, #4
 8009a98:	2300      	movs	r3, #0
 8009a9a:	2602      	movs	r6, #2
 8009a9c:	2c00      	cmp	r4, #0
 8009a9e:	f040 808f 	bne.w	8009bc0 <_dtoa_r+0x4c0>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1d3      	bne.n	8009a4e <_dtoa_r+0x34e>
 8009aa6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009aa8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	f000 8094 	beq.w	8009bda <_dtoa_r+0x4da>
 8009ab2:	4b75      	ldr	r3, [pc, #468]	@ (8009c88 <_dtoa_r+0x588>)
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	4629      	mov	r1, r5
 8009aba:	f7f7 f83f 	bl	8000b3c <__aeabi_dcmplt>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	f000 808b 	beq.w	8009bda <_dtoa_r+0x4da>
 8009ac4:	9b03      	ldr	r3, [sp, #12]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 8087 	beq.w	8009bda <_dtoa_r+0x4da>
 8009acc:	f1bb 0f00 	cmp.w	fp, #0
 8009ad0:	dd34      	ble.n	8009b3c <_dtoa_r+0x43c>
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	4b6d      	ldr	r3, [pc, #436]	@ (8009c8c <_dtoa_r+0x58c>)
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	4629      	mov	r1, r5
 8009ada:	f7f6 fdbd 	bl	8000658 <__aeabi_dmul>
 8009ade:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ae2:	f107 38ff 	add.w	r8, r7, #4294967295
 8009ae6:	3601      	adds	r6, #1
 8009ae8:	465c      	mov	r4, fp
 8009aea:	4630      	mov	r0, r6
 8009aec:	f7f6 fd4a 	bl	8000584 <__aeabi_i2d>
 8009af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009af4:	f7f6 fdb0 	bl	8000658 <__aeabi_dmul>
 8009af8:	4b65      	ldr	r3, [pc, #404]	@ (8009c90 <_dtoa_r+0x590>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	f7f6 fbf6 	bl	80002ec <__adddf3>
 8009b00:	4605      	mov	r5, r0
 8009b02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009b06:	2c00      	cmp	r4, #0
 8009b08:	d16a      	bne.n	8009be0 <_dtoa_r+0x4e0>
 8009b0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b0e:	4b61      	ldr	r3, [pc, #388]	@ (8009c94 <_dtoa_r+0x594>)
 8009b10:	2200      	movs	r2, #0
 8009b12:	f7f6 fbe9 	bl	80002e8 <__aeabi_dsub>
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b1e:	462a      	mov	r2, r5
 8009b20:	4633      	mov	r3, r6
 8009b22:	f7f7 f829 	bl	8000b78 <__aeabi_dcmpgt>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	f040 8298 	bne.w	800a05c <_dtoa_r+0x95c>
 8009b2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b30:	462a      	mov	r2, r5
 8009b32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009b36:	f7f7 f801 	bl	8000b3c <__aeabi_dcmplt>
 8009b3a:	bb38      	cbnz	r0, 8009b8c <_dtoa_r+0x48c>
 8009b3c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009b40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009b44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f2c0 8157 	blt.w	8009dfa <_dtoa_r+0x6fa>
 8009b4c:	2f0e      	cmp	r7, #14
 8009b4e:	f300 8154 	bgt.w	8009dfa <_dtoa_r+0x6fa>
 8009b52:	4b4b      	ldr	r3, [pc, #300]	@ (8009c80 <_dtoa_r+0x580>)
 8009b54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b58:	ed93 7b00 	vldr	d7, [r3]
 8009b5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	ed8d 7b00 	vstr	d7, [sp]
 8009b64:	f280 80e5 	bge.w	8009d32 <_dtoa_r+0x632>
 8009b68:	9b03      	ldr	r3, [sp, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f300 80e1 	bgt.w	8009d32 <_dtoa_r+0x632>
 8009b70:	d10c      	bne.n	8009b8c <_dtoa_r+0x48c>
 8009b72:	4b48      	ldr	r3, [pc, #288]	@ (8009c94 <_dtoa_r+0x594>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	ec51 0b17 	vmov	r0, r1, d7
 8009b7a:	f7f6 fd6d 	bl	8000658 <__aeabi_dmul>
 8009b7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b82:	f7f6 ffef 	bl	8000b64 <__aeabi_dcmpge>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	f000 8266 	beq.w	800a058 <_dtoa_r+0x958>
 8009b8c:	2400      	movs	r4, #0
 8009b8e:	4625      	mov	r5, r4
 8009b90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b92:	4656      	mov	r6, sl
 8009b94:	ea6f 0803 	mvn.w	r8, r3
 8009b98:	2700      	movs	r7, #0
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	4648      	mov	r0, r9
 8009b9e:	f000 fcbf 	bl	800a520 <_Bfree>
 8009ba2:	2d00      	cmp	r5, #0
 8009ba4:	f000 80bd 	beq.w	8009d22 <_dtoa_r+0x622>
 8009ba8:	b12f      	cbz	r7, 8009bb6 <_dtoa_r+0x4b6>
 8009baa:	42af      	cmp	r7, r5
 8009bac:	d003      	beq.n	8009bb6 <_dtoa_r+0x4b6>
 8009bae:	4639      	mov	r1, r7
 8009bb0:	4648      	mov	r0, r9
 8009bb2:	f000 fcb5 	bl	800a520 <_Bfree>
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	4648      	mov	r0, r9
 8009bba:	f000 fcb1 	bl	800a520 <_Bfree>
 8009bbe:	e0b0      	b.n	8009d22 <_dtoa_r+0x622>
 8009bc0:	07e2      	lsls	r2, r4, #31
 8009bc2:	d505      	bpl.n	8009bd0 <_dtoa_r+0x4d0>
 8009bc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009bc8:	f7f6 fd46 	bl	8000658 <__aeabi_dmul>
 8009bcc:	3601      	adds	r6, #1
 8009bce:	2301      	movs	r3, #1
 8009bd0:	1064      	asrs	r4, r4, #1
 8009bd2:	3508      	adds	r5, #8
 8009bd4:	e762      	b.n	8009a9c <_dtoa_r+0x39c>
 8009bd6:	2602      	movs	r6, #2
 8009bd8:	e765      	b.n	8009aa6 <_dtoa_r+0x3a6>
 8009bda:	9c03      	ldr	r4, [sp, #12]
 8009bdc:	46b8      	mov	r8, r7
 8009bde:	e784      	b.n	8009aea <_dtoa_r+0x3ea>
 8009be0:	4b27      	ldr	r3, [pc, #156]	@ (8009c80 <_dtoa_r+0x580>)
 8009be2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009be4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009be8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009bec:	4454      	add	r4, sl
 8009bee:	2900      	cmp	r1, #0
 8009bf0:	d054      	beq.n	8009c9c <_dtoa_r+0x59c>
 8009bf2:	4929      	ldr	r1, [pc, #164]	@ (8009c98 <_dtoa_r+0x598>)
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	f7f6 fe59 	bl	80008ac <__aeabi_ddiv>
 8009bfa:	4633      	mov	r3, r6
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	f7f6 fb73 	bl	80002e8 <__aeabi_dsub>
 8009c02:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009c06:	4656      	mov	r6, sl
 8009c08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c0c:	f7f6 ffd4 	bl	8000bb8 <__aeabi_d2iz>
 8009c10:	4605      	mov	r5, r0
 8009c12:	f7f6 fcb7 	bl	8000584 <__aeabi_i2d>
 8009c16:	4602      	mov	r2, r0
 8009c18:	460b      	mov	r3, r1
 8009c1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c1e:	f7f6 fb63 	bl	80002e8 <__aeabi_dsub>
 8009c22:	3530      	adds	r5, #48	@ 0x30
 8009c24:	4602      	mov	r2, r0
 8009c26:	460b      	mov	r3, r1
 8009c28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c2c:	f806 5b01 	strb.w	r5, [r6], #1
 8009c30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009c34:	f7f6 ff82 	bl	8000b3c <__aeabi_dcmplt>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d172      	bne.n	8009d22 <_dtoa_r+0x622>
 8009c3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c40:	4911      	ldr	r1, [pc, #68]	@ (8009c88 <_dtoa_r+0x588>)
 8009c42:	2000      	movs	r0, #0
 8009c44:	f7f6 fb50 	bl	80002e8 <__aeabi_dsub>
 8009c48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009c4c:	f7f6 ff76 	bl	8000b3c <__aeabi_dcmplt>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	f040 80b4 	bne.w	8009dbe <_dtoa_r+0x6be>
 8009c56:	42a6      	cmp	r6, r4
 8009c58:	f43f af70 	beq.w	8009b3c <_dtoa_r+0x43c>
 8009c5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009c60:	4b0a      	ldr	r3, [pc, #40]	@ (8009c8c <_dtoa_r+0x58c>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	f7f6 fcf8 	bl	8000658 <__aeabi_dmul>
 8009c68:	4b08      	ldr	r3, [pc, #32]	@ (8009c8c <_dtoa_r+0x58c>)
 8009c6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009c6e:	2200      	movs	r2, #0
 8009c70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c74:	f7f6 fcf0 	bl	8000658 <__aeabi_dmul>
 8009c78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c7c:	e7c4      	b.n	8009c08 <_dtoa_r+0x508>
 8009c7e:	bf00      	nop
 8009c80:	0800bca0 	.word	0x0800bca0
 8009c84:	0800bc78 	.word	0x0800bc78
 8009c88:	3ff00000 	.word	0x3ff00000
 8009c8c:	40240000 	.word	0x40240000
 8009c90:	401c0000 	.word	0x401c0000
 8009c94:	40140000 	.word	0x40140000
 8009c98:	3fe00000 	.word	0x3fe00000
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f7f6 fcda 	bl	8000658 <__aeabi_dmul>
 8009ca4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009ca8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009caa:	4656      	mov	r6, sl
 8009cac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cb0:	f7f6 ff82 	bl	8000bb8 <__aeabi_d2iz>
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	f7f6 fc65 	bl	8000584 <__aeabi_i2d>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cc2:	f7f6 fb11 	bl	80002e8 <__aeabi_dsub>
 8009cc6:	3530      	adds	r5, #48	@ 0x30
 8009cc8:	f806 5b01 	strb.w	r5, [r6], #1
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	42a6      	cmp	r6, r4
 8009cd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009cd6:	f04f 0200 	mov.w	r2, #0
 8009cda:	d124      	bne.n	8009d26 <_dtoa_r+0x626>
 8009cdc:	4baf      	ldr	r3, [pc, #700]	@ (8009f9c <_dtoa_r+0x89c>)
 8009cde:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009ce2:	f7f6 fb03 	bl	80002ec <__adddf3>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cee:	f7f6 ff43 	bl	8000b78 <__aeabi_dcmpgt>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d163      	bne.n	8009dbe <_dtoa_r+0x6be>
 8009cf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009cfa:	49a8      	ldr	r1, [pc, #672]	@ (8009f9c <_dtoa_r+0x89c>)
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	f7f6 faf3 	bl	80002e8 <__aeabi_dsub>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d0a:	f7f6 ff17 	bl	8000b3c <__aeabi_dcmplt>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	f43f af14 	beq.w	8009b3c <_dtoa_r+0x43c>
 8009d14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009d16:	1e73      	subs	r3, r6, #1
 8009d18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d1e:	2b30      	cmp	r3, #48	@ 0x30
 8009d20:	d0f8      	beq.n	8009d14 <_dtoa_r+0x614>
 8009d22:	4647      	mov	r7, r8
 8009d24:	e03b      	b.n	8009d9e <_dtoa_r+0x69e>
 8009d26:	4b9e      	ldr	r3, [pc, #632]	@ (8009fa0 <_dtoa_r+0x8a0>)
 8009d28:	f7f6 fc96 	bl	8000658 <__aeabi_dmul>
 8009d2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d30:	e7bc      	b.n	8009cac <_dtoa_r+0x5ac>
 8009d32:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009d36:	4656      	mov	r6, sl
 8009d38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	4629      	mov	r1, r5
 8009d40:	f7f6 fdb4 	bl	80008ac <__aeabi_ddiv>
 8009d44:	f7f6 ff38 	bl	8000bb8 <__aeabi_d2iz>
 8009d48:	4680      	mov	r8, r0
 8009d4a:	f7f6 fc1b 	bl	8000584 <__aeabi_i2d>
 8009d4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d52:	f7f6 fc81 	bl	8000658 <__aeabi_dmul>
 8009d56:	4602      	mov	r2, r0
 8009d58:	460b      	mov	r3, r1
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009d62:	f7f6 fac1 	bl	80002e8 <__aeabi_dsub>
 8009d66:	f806 4b01 	strb.w	r4, [r6], #1
 8009d6a:	9d03      	ldr	r5, [sp, #12]
 8009d6c:	eba6 040a 	sub.w	r4, r6, sl
 8009d70:	42a5      	cmp	r5, r4
 8009d72:	4602      	mov	r2, r0
 8009d74:	460b      	mov	r3, r1
 8009d76:	d133      	bne.n	8009de0 <_dtoa_r+0x6e0>
 8009d78:	f7f6 fab8 	bl	80002ec <__adddf3>
 8009d7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d80:	4604      	mov	r4, r0
 8009d82:	460d      	mov	r5, r1
 8009d84:	f7f6 fef8 	bl	8000b78 <__aeabi_dcmpgt>
 8009d88:	b9c0      	cbnz	r0, 8009dbc <_dtoa_r+0x6bc>
 8009d8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d8e:	4620      	mov	r0, r4
 8009d90:	4629      	mov	r1, r5
 8009d92:	f7f6 fec9 	bl	8000b28 <__aeabi_dcmpeq>
 8009d96:	b110      	cbz	r0, 8009d9e <_dtoa_r+0x69e>
 8009d98:	f018 0f01 	tst.w	r8, #1
 8009d9c:	d10e      	bne.n	8009dbc <_dtoa_r+0x6bc>
 8009d9e:	9902      	ldr	r1, [sp, #8]
 8009da0:	4648      	mov	r0, r9
 8009da2:	f000 fbbd 	bl	800a520 <_Bfree>
 8009da6:	2300      	movs	r3, #0
 8009da8:	7033      	strb	r3, [r6, #0]
 8009daa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009dac:	3701      	adds	r7, #1
 8009dae:	601f      	str	r7, [r3, #0]
 8009db0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f000 824b 	beq.w	800a24e <_dtoa_r+0xb4e>
 8009db8:	601e      	str	r6, [r3, #0]
 8009dba:	e248      	b.n	800a24e <_dtoa_r+0xb4e>
 8009dbc:	46b8      	mov	r8, r7
 8009dbe:	4633      	mov	r3, r6
 8009dc0:	461e      	mov	r6, r3
 8009dc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dc6:	2a39      	cmp	r2, #57	@ 0x39
 8009dc8:	d106      	bne.n	8009dd8 <_dtoa_r+0x6d8>
 8009dca:	459a      	cmp	sl, r3
 8009dcc:	d1f8      	bne.n	8009dc0 <_dtoa_r+0x6c0>
 8009dce:	2230      	movs	r2, #48	@ 0x30
 8009dd0:	f108 0801 	add.w	r8, r8, #1
 8009dd4:	f88a 2000 	strb.w	r2, [sl]
 8009dd8:	781a      	ldrb	r2, [r3, #0]
 8009dda:	3201      	adds	r2, #1
 8009ddc:	701a      	strb	r2, [r3, #0]
 8009dde:	e7a0      	b.n	8009d22 <_dtoa_r+0x622>
 8009de0:	4b6f      	ldr	r3, [pc, #444]	@ (8009fa0 <_dtoa_r+0x8a0>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	f7f6 fc38 	bl	8000658 <__aeabi_dmul>
 8009de8:	2200      	movs	r2, #0
 8009dea:	2300      	movs	r3, #0
 8009dec:	4604      	mov	r4, r0
 8009dee:	460d      	mov	r5, r1
 8009df0:	f7f6 fe9a 	bl	8000b28 <__aeabi_dcmpeq>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	d09f      	beq.n	8009d38 <_dtoa_r+0x638>
 8009df8:	e7d1      	b.n	8009d9e <_dtoa_r+0x69e>
 8009dfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dfc:	2a00      	cmp	r2, #0
 8009dfe:	f000 80ea 	beq.w	8009fd6 <_dtoa_r+0x8d6>
 8009e02:	9a07      	ldr	r2, [sp, #28]
 8009e04:	2a01      	cmp	r2, #1
 8009e06:	f300 80cd 	bgt.w	8009fa4 <_dtoa_r+0x8a4>
 8009e0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009e0c:	2a00      	cmp	r2, #0
 8009e0e:	f000 80c1 	beq.w	8009f94 <_dtoa_r+0x894>
 8009e12:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009e16:	9c08      	ldr	r4, [sp, #32]
 8009e18:	9e00      	ldr	r6, [sp, #0]
 8009e1a:	9a00      	ldr	r2, [sp, #0]
 8009e1c:	441a      	add	r2, r3
 8009e1e:	9200      	str	r2, [sp, #0]
 8009e20:	9a06      	ldr	r2, [sp, #24]
 8009e22:	2101      	movs	r1, #1
 8009e24:	441a      	add	r2, r3
 8009e26:	4648      	mov	r0, r9
 8009e28:	9206      	str	r2, [sp, #24]
 8009e2a:	f000 fc2d 	bl	800a688 <__i2b>
 8009e2e:	4605      	mov	r5, r0
 8009e30:	b166      	cbz	r6, 8009e4c <_dtoa_r+0x74c>
 8009e32:	9b06      	ldr	r3, [sp, #24]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	dd09      	ble.n	8009e4c <_dtoa_r+0x74c>
 8009e38:	42b3      	cmp	r3, r6
 8009e3a:	9a00      	ldr	r2, [sp, #0]
 8009e3c:	bfa8      	it	ge
 8009e3e:	4633      	movge	r3, r6
 8009e40:	1ad2      	subs	r2, r2, r3
 8009e42:	9200      	str	r2, [sp, #0]
 8009e44:	9a06      	ldr	r2, [sp, #24]
 8009e46:	1af6      	subs	r6, r6, r3
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	9306      	str	r3, [sp, #24]
 8009e4c:	9b08      	ldr	r3, [sp, #32]
 8009e4e:	b30b      	cbz	r3, 8009e94 <_dtoa_r+0x794>
 8009e50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f000 80c6 	beq.w	8009fe4 <_dtoa_r+0x8e4>
 8009e58:	2c00      	cmp	r4, #0
 8009e5a:	f000 80c0 	beq.w	8009fde <_dtoa_r+0x8de>
 8009e5e:	4629      	mov	r1, r5
 8009e60:	4622      	mov	r2, r4
 8009e62:	4648      	mov	r0, r9
 8009e64:	f000 fcc8 	bl	800a7f8 <__pow5mult>
 8009e68:	9a02      	ldr	r2, [sp, #8]
 8009e6a:	4601      	mov	r1, r0
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	4648      	mov	r0, r9
 8009e70:	f000 fc20 	bl	800a6b4 <__multiply>
 8009e74:	9902      	ldr	r1, [sp, #8]
 8009e76:	4680      	mov	r8, r0
 8009e78:	4648      	mov	r0, r9
 8009e7a:	f000 fb51 	bl	800a520 <_Bfree>
 8009e7e:	9b08      	ldr	r3, [sp, #32]
 8009e80:	1b1b      	subs	r3, r3, r4
 8009e82:	9308      	str	r3, [sp, #32]
 8009e84:	f000 80b1 	beq.w	8009fea <_dtoa_r+0x8ea>
 8009e88:	9a08      	ldr	r2, [sp, #32]
 8009e8a:	4641      	mov	r1, r8
 8009e8c:	4648      	mov	r0, r9
 8009e8e:	f000 fcb3 	bl	800a7f8 <__pow5mult>
 8009e92:	9002      	str	r0, [sp, #8]
 8009e94:	2101      	movs	r1, #1
 8009e96:	4648      	mov	r0, r9
 8009e98:	f000 fbf6 	bl	800a688 <__i2b>
 8009e9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f000 81d8 	beq.w	800a256 <_dtoa_r+0xb56>
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	4601      	mov	r1, r0
 8009eaa:	4648      	mov	r0, r9
 8009eac:	f000 fca4 	bl	800a7f8 <__pow5mult>
 8009eb0:	9b07      	ldr	r3, [sp, #28]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	f300 809f 	bgt.w	8009ff8 <_dtoa_r+0x8f8>
 8009eba:	9b04      	ldr	r3, [sp, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f040 8097 	bne.w	8009ff0 <_dtoa_r+0x8f0>
 8009ec2:	9b05      	ldr	r3, [sp, #20]
 8009ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f040 8093 	bne.w	8009ff4 <_dtoa_r+0x8f4>
 8009ece:	9b05      	ldr	r3, [sp, #20]
 8009ed0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ed4:	0d1b      	lsrs	r3, r3, #20
 8009ed6:	051b      	lsls	r3, r3, #20
 8009ed8:	b133      	cbz	r3, 8009ee8 <_dtoa_r+0x7e8>
 8009eda:	9b00      	ldr	r3, [sp, #0]
 8009edc:	3301      	adds	r3, #1
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	9b06      	ldr	r3, [sp, #24]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	9306      	str	r3, [sp, #24]
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	9308      	str	r3, [sp, #32]
 8009eea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f000 81b8 	beq.w	800a262 <_dtoa_r+0xb62>
 8009ef2:	6923      	ldr	r3, [r4, #16]
 8009ef4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ef8:	6918      	ldr	r0, [r3, #16]
 8009efa:	f000 fb79 	bl	800a5f0 <__hi0bits>
 8009efe:	f1c0 0020 	rsb	r0, r0, #32
 8009f02:	9b06      	ldr	r3, [sp, #24]
 8009f04:	4418      	add	r0, r3
 8009f06:	f010 001f 	ands.w	r0, r0, #31
 8009f0a:	f000 8082 	beq.w	800a012 <_dtoa_r+0x912>
 8009f0e:	f1c0 0320 	rsb	r3, r0, #32
 8009f12:	2b04      	cmp	r3, #4
 8009f14:	dd73      	ble.n	8009ffe <_dtoa_r+0x8fe>
 8009f16:	9b00      	ldr	r3, [sp, #0]
 8009f18:	f1c0 001c 	rsb	r0, r0, #28
 8009f1c:	4403      	add	r3, r0
 8009f1e:	9300      	str	r3, [sp, #0]
 8009f20:	9b06      	ldr	r3, [sp, #24]
 8009f22:	4403      	add	r3, r0
 8009f24:	4406      	add	r6, r0
 8009f26:	9306      	str	r3, [sp, #24]
 8009f28:	9b00      	ldr	r3, [sp, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	dd05      	ble.n	8009f3a <_dtoa_r+0x83a>
 8009f2e:	9902      	ldr	r1, [sp, #8]
 8009f30:	461a      	mov	r2, r3
 8009f32:	4648      	mov	r0, r9
 8009f34:	f000 fcba 	bl	800a8ac <__lshift>
 8009f38:	9002      	str	r0, [sp, #8]
 8009f3a:	9b06      	ldr	r3, [sp, #24]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	dd05      	ble.n	8009f4c <_dtoa_r+0x84c>
 8009f40:	4621      	mov	r1, r4
 8009f42:	461a      	mov	r2, r3
 8009f44:	4648      	mov	r0, r9
 8009f46:	f000 fcb1 	bl	800a8ac <__lshift>
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d061      	beq.n	800a016 <_dtoa_r+0x916>
 8009f52:	9802      	ldr	r0, [sp, #8]
 8009f54:	4621      	mov	r1, r4
 8009f56:	f000 fd15 	bl	800a984 <__mcmp>
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	da5b      	bge.n	800a016 <_dtoa_r+0x916>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	9902      	ldr	r1, [sp, #8]
 8009f62:	220a      	movs	r2, #10
 8009f64:	4648      	mov	r0, r9
 8009f66:	f000 fafd 	bl	800a564 <__multadd>
 8009f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f6c:	9002      	str	r0, [sp, #8]
 8009f6e:	f107 38ff 	add.w	r8, r7, #4294967295
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f000 8177 	beq.w	800a266 <_dtoa_r+0xb66>
 8009f78:	4629      	mov	r1, r5
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	220a      	movs	r2, #10
 8009f7e:	4648      	mov	r0, r9
 8009f80:	f000 faf0 	bl	800a564 <__multadd>
 8009f84:	f1bb 0f00 	cmp.w	fp, #0
 8009f88:	4605      	mov	r5, r0
 8009f8a:	dc6f      	bgt.n	800a06c <_dtoa_r+0x96c>
 8009f8c:	9b07      	ldr	r3, [sp, #28]
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	dc49      	bgt.n	800a026 <_dtoa_r+0x926>
 8009f92:	e06b      	b.n	800a06c <_dtoa_r+0x96c>
 8009f94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009f96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009f9a:	e73c      	b.n	8009e16 <_dtoa_r+0x716>
 8009f9c:	3fe00000 	.word	0x3fe00000
 8009fa0:	40240000 	.word	0x40240000
 8009fa4:	9b03      	ldr	r3, [sp, #12]
 8009fa6:	1e5c      	subs	r4, r3, #1
 8009fa8:	9b08      	ldr	r3, [sp, #32]
 8009faa:	42a3      	cmp	r3, r4
 8009fac:	db09      	blt.n	8009fc2 <_dtoa_r+0x8c2>
 8009fae:	1b1c      	subs	r4, r3, r4
 8009fb0:	9b03      	ldr	r3, [sp, #12]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f6bf af30 	bge.w	8009e18 <_dtoa_r+0x718>
 8009fb8:	9b00      	ldr	r3, [sp, #0]
 8009fba:	9a03      	ldr	r2, [sp, #12]
 8009fbc:	1a9e      	subs	r6, r3, r2
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	e72b      	b.n	8009e1a <_dtoa_r+0x71a>
 8009fc2:	9b08      	ldr	r3, [sp, #32]
 8009fc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009fc6:	9408      	str	r4, [sp, #32]
 8009fc8:	1ae3      	subs	r3, r4, r3
 8009fca:	441a      	add	r2, r3
 8009fcc:	9e00      	ldr	r6, [sp, #0]
 8009fce:	9b03      	ldr	r3, [sp, #12]
 8009fd0:	920d      	str	r2, [sp, #52]	@ 0x34
 8009fd2:	2400      	movs	r4, #0
 8009fd4:	e721      	b.n	8009e1a <_dtoa_r+0x71a>
 8009fd6:	9c08      	ldr	r4, [sp, #32]
 8009fd8:	9e00      	ldr	r6, [sp, #0]
 8009fda:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009fdc:	e728      	b.n	8009e30 <_dtoa_r+0x730>
 8009fde:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009fe2:	e751      	b.n	8009e88 <_dtoa_r+0x788>
 8009fe4:	9a08      	ldr	r2, [sp, #32]
 8009fe6:	9902      	ldr	r1, [sp, #8]
 8009fe8:	e750      	b.n	8009e8c <_dtoa_r+0x78c>
 8009fea:	f8cd 8008 	str.w	r8, [sp, #8]
 8009fee:	e751      	b.n	8009e94 <_dtoa_r+0x794>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	e779      	b.n	8009ee8 <_dtoa_r+0x7e8>
 8009ff4:	9b04      	ldr	r3, [sp, #16]
 8009ff6:	e777      	b.n	8009ee8 <_dtoa_r+0x7e8>
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	9308      	str	r3, [sp, #32]
 8009ffc:	e779      	b.n	8009ef2 <_dtoa_r+0x7f2>
 8009ffe:	d093      	beq.n	8009f28 <_dtoa_r+0x828>
 800a000:	9a00      	ldr	r2, [sp, #0]
 800a002:	331c      	adds	r3, #28
 800a004:	441a      	add	r2, r3
 800a006:	9200      	str	r2, [sp, #0]
 800a008:	9a06      	ldr	r2, [sp, #24]
 800a00a:	441a      	add	r2, r3
 800a00c:	441e      	add	r6, r3
 800a00e:	9206      	str	r2, [sp, #24]
 800a010:	e78a      	b.n	8009f28 <_dtoa_r+0x828>
 800a012:	4603      	mov	r3, r0
 800a014:	e7f4      	b.n	800a000 <_dtoa_r+0x900>
 800a016:	9b03      	ldr	r3, [sp, #12]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	46b8      	mov	r8, r7
 800a01c:	dc20      	bgt.n	800a060 <_dtoa_r+0x960>
 800a01e:	469b      	mov	fp, r3
 800a020:	9b07      	ldr	r3, [sp, #28]
 800a022:	2b02      	cmp	r3, #2
 800a024:	dd1e      	ble.n	800a064 <_dtoa_r+0x964>
 800a026:	f1bb 0f00 	cmp.w	fp, #0
 800a02a:	f47f adb1 	bne.w	8009b90 <_dtoa_r+0x490>
 800a02e:	4621      	mov	r1, r4
 800a030:	465b      	mov	r3, fp
 800a032:	2205      	movs	r2, #5
 800a034:	4648      	mov	r0, r9
 800a036:	f000 fa95 	bl	800a564 <__multadd>
 800a03a:	4601      	mov	r1, r0
 800a03c:	4604      	mov	r4, r0
 800a03e:	9802      	ldr	r0, [sp, #8]
 800a040:	f000 fca0 	bl	800a984 <__mcmp>
 800a044:	2800      	cmp	r0, #0
 800a046:	f77f ada3 	ble.w	8009b90 <_dtoa_r+0x490>
 800a04a:	4656      	mov	r6, sl
 800a04c:	2331      	movs	r3, #49	@ 0x31
 800a04e:	f806 3b01 	strb.w	r3, [r6], #1
 800a052:	f108 0801 	add.w	r8, r8, #1
 800a056:	e59f      	b.n	8009b98 <_dtoa_r+0x498>
 800a058:	9c03      	ldr	r4, [sp, #12]
 800a05a:	46b8      	mov	r8, r7
 800a05c:	4625      	mov	r5, r4
 800a05e:	e7f4      	b.n	800a04a <_dtoa_r+0x94a>
 800a060:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a066:	2b00      	cmp	r3, #0
 800a068:	f000 8101 	beq.w	800a26e <_dtoa_r+0xb6e>
 800a06c:	2e00      	cmp	r6, #0
 800a06e:	dd05      	ble.n	800a07c <_dtoa_r+0x97c>
 800a070:	4629      	mov	r1, r5
 800a072:	4632      	mov	r2, r6
 800a074:	4648      	mov	r0, r9
 800a076:	f000 fc19 	bl	800a8ac <__lshift>
 800a07a:	4605      	mov	r5, r0
 800a07c:	9b08      	ldr	r3, [sp, #32]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d05c      	beq.n	800a13c <_dtoa_r+0xa3c>
 800a082:	6869      	ldr	r1, [r5, #4]
 800a084:	4648      	mov	r0, r9
 800a086:	f000 fa0b 	bl	800a4a0 <_Balloc>
 800a08a:	4606      	mov	r6, r0
 800a08c:	b928      	cbnz	r0, 800a09a <_dtoa_r+0x99a>
 800a08e:	4b82      	ldr	r3, [pc, #520]	@ (800a298 <_dtoa_r+0xb98>)
 800a090:	4602      	mov	r2, r0
 800a092:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a096:	f7ff bb4a 	b.w	800972e <_dtoa_r+0x2e>
 800a09a:	692a      	ldr	r2, [r5, #16]
 800a09c:	3202      	adds	r2, #2
 800a09e:	0092      	lsls	r2, r2, #2
 800a0a0:	f105 010c 	add.w	r1, r5, #12
 800a0a4:	300c      	adds	r0, #12
 800a0a6:	f7ff fa92 	bl	80095ce <memcpy>
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	4631      	mov	r1, r6
 800a0ae:	4648      	mov	r0, r9
 800a0b0:	f000 fbfc 	bl	800a8ac <__lshift>
 800a0b4:	f10a 0301 	add.w	r3, sl, #1
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	eb0a 030b 	add.w	r3, sl, fp
 800a0be:	9308      	str	r3, [sp, #32]
 800a0c0:	9b04      	ldr	r3, [sp, #16]
 800a0c2:	f003 0301 	and.w	r3, r3, #1
 800a0c6:	462f      	mov	r7, r5
 800a0c8:	9306      	str	r3, [sp, #24]
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	9b00      	ldr	r3, [sp, #0]
 800a0ce:	9802      	ldr	r0, [sp, #8]
 800a0d0:	4621      	mov	r1, r4
 800a0d2:	f103 3bff 	add.w	fp, r3, #4294967295
 800a0d6:	f7ff fa88 	bl	80095ea <quorem>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	3330      	adds	r3, #48	@ 0x30
 800a0de:	9003      	str	r0, [sp, #12]
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	9802      	ldr	r0, [sp, #8]
 800a0e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0e6:	f000 fc4d 	bl	800a984 <__mcmp>
 800a0ea:	462a      	mov	r2, r5
 800a0ec:	9004      	str	r0, [sp, #16]
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4648      	mov	r0, r9
 800a0f2:	f000 fc63 	bl	800a9bc <__mdiff>
 800a0f6:	68c2      	ldr	r2, [r0, #12]
 800a0f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0fa:	4606      	mov	r6, r0
 800a0fc:	bb02      	cbnz	r2, 800a140 <_dtoa_r+0xa40>
 800a0fe:	4601      	mov	r1, r0
 800a100:	9802      	ldr	r0, [sp, #8]
 800a102:	f000 fc3f 	bl	800a984 <__mcmp>
 800a106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a108:	4602      	mov	r2, r0
 800a10a:	4631      	mov	r1, r6
 800a10c:	4648      	mov	r0, r9
 800a10e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a110:	9309      	str	r3, [sp, #36]	@ 0x24
 800a112:	f000 fa05 	bl	800a520 <_Bfree>
 800a116:	9b07      	ldr	r3, [sp, #28]
 800a118:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a11a:	9e00      	ldr	r6, [sp, #0]
 800a11c:	ea42 0103 	orr.w	r1, r2, r3
 800a120:	9b06      	ldr	r3, [sp, #24]
 800a122:	4319      	orrs	r1, r3
 800a124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a126:	d10d      	bne.n	800a144 <_dtoa_r+0xa44>
 800a128:	2b39      	cmp	r3, #57	@ 0x39
 800a12a:	d027      	beq.n	800a17c <_dtoa_r+0xa7c>
 800a12c:	9a04      	ldr	r2, [sp, #16]
 800a12e:	2a00      	cmp	r2, #0
 800a130:	dd01      	ble.n	800a136 <_dtoa_r+0xa36>
 800a132:	9b03      	ldr	r3, [sp, #12]
 800a134:	3331      	adds	r3, #49	@ 0x31
 800a136:	f88b 3000 	strb.w	r3, [fp]
 800a13a:	e52e      	b.n	8009b9a <_dtoa_r+0x49a>
 800a13c:	4628      	mov	r0, r5
 800a13e:	e7b9      	b.n	800a0b4 <_dtoa_r+0x9b4>
 800a140:	2201      	movs	r2, #1
 800a142:	e7e2      	b.n	800a10a <_dtoa_r+0xa0a>
 800a144:	9904      	ldr	r1, [sp, #16]
 800a146:	2900      	cmp	r1, #0
 800a148:	db04      	blt.n	800a154 <_dtoa_r+0xa54>
 800a14a:	9807      	ldr	r0, [sp, #28]
 800a14c:	4301      	orrs	r1, r0
 800a14e:	9806      	ldr	r0, [sp, #24]
 800a150:	4301      	orrs	r1, r0
 800a152:	d120      	bne.n	800a196 <_dtoa_r+0xa96>
 800a154:	2a00      	cmp	r2, #0
 800a156:	ddee      	ble.n	800a136 <_dtoa_r+0xa36>
 800a158:	9902      	ldr	r1, [sp, #8]
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	2201      	movs	r2, #1
 800a15e:	4648      	mov	r0, r9
 800a160:	f000 fba4 	bl	800a8ac <__lshift>
 800a164:	4621      	mov	r1, r4
 800a166:	9002      	str	r0, [sp, #8]
 800a168:	f000 fc0c 	bl	800a984 <__mcmp>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	9b00      	ldr	r3, [sp, #0]
 800a170:	dc02      	bgt.n	800a178 <_dtoa_r+0xa78>
 800a172:	d1e0      	bne.n	800a136 <_dtoa_r+0xa36>
 800a174:	07da      	lsls	r2, r3, #31
 800a176:	d5de      	bpl.n	800a136 <_dtoa_r+0xa36>
 800a178:	2b39      	cmp	r3, #57	@ 0x39
 800a17a:	d1da      	bne.n	800a132 <_dtoa_r+0xa32>
 800a17c:	2339      	movs	r3, #57	@ 0x39
 800a17e:	f88b 3000 	strb.w	r3, [fp]
 800a182:	4633      	mov	r3, r6
 800a184:	461e      	mov	r6, r3
 800a186:	3b01      	subs	r3, #1
 800a188:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a18c:	2a39      	cmp	r2, #57	@ 0x39
 800a18e:	d04e      	beq.n	800a22e <_dtoa_r+0xb2e>
 800a190:	3201      	adds	r2, #1
 800a192:	701a      	strb	r2, [r3, #0]
 800a194:	e501      	b.n	8009b9a <_dtoa_r+0x49a>
 800a196:	2a00      	cmp	r2, #0
 800a198:	dd03      	ble.n	800a1a2 <_dtoa_r+0xaa2>
 800a19a:	2b39      	cmp	r3, #57	@ 0x39
 800a19c:	d0ee      	beq.n	800a17c <_dtoa_r+0xa7c>
 800a19e:	3301      	adds	r3, #1
 800a1a0:	e7c9      	b.n	800a136 <_dtoa_r+0xa36>
 800a1a2:	9a00      	ldr	r2, [sp, #0]
 800a1a4:	9908      	ldr	r1, [sp, #32]
 800a1a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a1aa:	428a      	cmp	r2, r1
 800a1ac:	d028      	beq.n	800a200 <_dtoa_r+0xb00>
 800a1ae:	9902      	ldr	r1, [sp, #8]
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	220a      	movs	r2, #10
 800a1b4:	4648      	mov	r0, r9
 800a1b6:	f000 f9d5 	bl	800a564 <__multadd>
 800a1ba:	42af      	cmp	r7, r5
 800a1bc:	9002      	str	r0, [sp, #8]
 800a1be:	f04f 0300 	mov.w	r3, #0
 800a1c2:	f04f 020a 	mov.w	r2, #10
 800a1c6:	4639      	mov	r1, r7
 800a1c8:	4648      	mov	r0, r9
 800a1ca:	d107      	bne.n	800a1dc <_dtoa_r+0xadc>
 800a1cc:	f000 f9ca 	bl	800a564 <__multadd>
 800a1d0:	4607      	mov	r7, r0
 800a1d2:	4605      	mov	r5, r0
 800a1d4:	9b00      	ldr	r3, [sp, #0]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	e777      	b.n	800a0cc <_dtoa_r+0x9cc>
 800a1dc:	f000 f9c2 	bl	800a564 <__multadd>
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	4607      	mov	r7, r0
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	220a      	movs	r2, #10
 800a1e8:	4648      	mov	r0, r9
 800a1ea:	f000 f9bb 	bl	800a564 <__multadd>
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	e7f0      	b.n	800a1d4 <_dtoa_r+0xad4>
 800a1f2:	f1bb 0f00 	cmp.w	fp, #0
 800a1f6:	bfcc      	ite	gt
 800a1f8:	465e      	movgt	r6, fp
 800a1fa:	2601      	movle	r6, #1
 800a1fc:	4456      	add	r6, sl
 800a1fe:	2700      	movs	r7, #0
 800a200:	9902      	ldr	r1, [sp, #8]
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	2201      	movs	r2, #1
 800a206:	4648      	mov	r0, r9
 800a208:	f000 fb50 	bl	800a8ac <__lshift>
 800a20c:	4621      	mov	r1, r4
 800a20e:	9002      	str	r0, [sp, #8]
 800a210:	f000 fbb8 	bl	800a984 <__mcmp>
 800a214:	2800      	cmp	r0, #0
 800a216:	dcb4      	bgt.n	800a182 <_dtoa_r+0xa82>
 800a218:	d102      	bne.n	800a220 <_dtoa_r+0xb20>
 800a21a:	9b00      	ldr	r3, [sp, #0]
 800a21c:	07db      	lsls	r3, r3, #31
 800a21e:	d4b0      	bmi.n	800a182 <_dtoa_r+0xa82>
 800a220:	4633      	mov	r3, r6
 800a222:	461e      	mov	r6, r3
 800a224:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a228:	2a30      	cmp	r2, #48	@ 0x30
 800a22a:	d0fa      	beq.n	800a222 <_dtoa_r+0xb22>
 800a22c:	e4b5      	b.n	8009b9a <_dtoa_r+0x49a>
 800a22e:	459a      	cmp	sl, r3
 800a230:	d1a8      	bne.n	800a184 <_dtoa_r+0xa84>
 800a232:	2331      	movs	r3, #49	@ 0x31
 800a234:	f108 0801 	add.w	r8, r8, #1
 800a238:	f88a 3000 	strb.w	r3, [sl]
 800a23c:	e4ad      	b.n	8009b9a <_dtoa_r+0x49a>
 800a23e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a240:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a29c <_dtoa_r+0xb9c>
 800a244:	b11b      	cbz	r3, 800a24e <_dtoa_r+0xb4e>
 800a246:	f10a 0308 	add.w	r3, sl, #8
 800a24a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a24c:	6013      	str	r3, [r2, #0]
 800a24e:	4650      	mov	r0, sl
 800a250:	b017      	add	sp, #92	@ 0x5c
 800a252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a256:	9b07      	ldr	r3, [sp, #28]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	f77f ae2e 	ble.w	8009eba <_dtoa_r+0x7ba>
 800a25e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a260:	9308      	str	r3, [sp, #32]
 800a262:	2001      	movs	r0, #1
 800a264:	e64d      	b.n	8009f02 <_dtoa_r+0x802>
 800a266:	f1bb 0f00 	cmp.w	fp, #0
 800a26a:	f77f aed9 	ble.w	800a020 <_dtoa_r+0x920>
 800a26e:	4656      	mov	r6, sl
 800a270:	9802      	ldr	r0, [sp, #8]
 800a272:	4621      	mov	r1, r4
 800a274:	f7ff f9b9 	bl	80095ea <quorem>
 800a278:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a27c:	f806 3b01 	strb.w	r3, [r6], #1
 800a280:	eba6 020a 	sub.w	r2, r6, sl
 800a284:	4593      	cmp	fp, r2
 800a286:	ddb4      	ble.n	800a1f2 <_dtoa_r+0xaf2>
 800a288:	9902      	ldr	r1, [sp, #8]
 800a28a:	2300      	movs	r3, #0
 800a28c:	220a      	movs	r2, #10
 800a28e:	4648      	mov	r0, r9
 800a290:	f000 f968 	bl	800a564 <__multadd>
 800a294:	9002      	str	r0, [sp, #8]
 800a296:	e7eb      	b.n	800a270 <_dtoa_r+0xb70>
 800a298:	0800bba4 	.word	0x0800bba4
 800a29c:	0800bb28 	.word	0x0800bb28

0800a2a0 <_free_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	4605      	mov	r5, r0
 800a2a4:	2900      	cmp	r1, #0
 800a2a6:	d041      	beq.n	800a32c <_free_r+0x8c>
 800a2a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2ac:	1f0c      	subs	r4, r1, #4
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	bfb8      	it	lt
 800a2b2:	18e4      	addlt	r4, r4, r3
 800a2b4:	f000 f8e8 	bl	800a488 <__malloc_lock>
 800a2b8:	4a1d      	ldr	r2, [pc, #116]	@ (800a330 <_free_r+0x90>)
 800a2ba:	6813      	ldr	r3, [r2, #0]
 800a2bc:	b933      	cbnz	r3, 800a2cc <_free_r+0x2c>
 800a2be:	6063      	str	r3, [r4, #4]
 800a2c0:	6014      	str	r4, [r2, #0]
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2c8:	f000 b8e4 	b.w	800a494 <__malloc_unlock>
 800a2cc:	42a3      	cmp	r3, r4
 800a2ce:	d908      	bls.n	800a2e2 <_free_r+0x42>
 800a2d0:	6820      	ldr	r0, [r4, #0]
 800a2d2:	1821      	adds	r1, r4, r0
 800a2d4:	428b      	cmp	r3, r1
 800a2d6:	bf01      	itttt	eq
 800a2d8:	6819      	ldreq	r1, [r3, #0]
 800a2da:	685b      	ldreq	r3, [r3, #4]
 800a2dc:	1809      	addeq	r1, r1, r0
 800a2de:	6021      	streq	r1, [r4, #0]
 800a2e0:	e7ed      	b.n	800a2be <_free_r+0x1e>
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	b10b      	cbz	r3, 800a2ec <_free_r+0x4c>
 800a2e8:	42a3      	cmp	r3, r4
 800a2ea:	d9fa      	bls.n	800a2e2 <_free_r+0x42>
 800a2ec:	6811      	ldr	r1, [r2, #0]
 800a2ee:	1850      	adds	r0, r2, r1
 800a2f0:	42a0      	cmp	r0, r4
 800a2f2:	d10b      	bne.n	800a30c <_free_r+0x6c>
 800a2f4:	6820      	ldr	r0, [r4, #0]
 800a2f6:	4401      	add	r1, r0
 800a2f8:	1850      	adds	r0, r2, r1
 800a2fa:	4283      	cmp	r3, r0
 800a2fc:	6011      	str	r1, [r2, #0]
 800a2fe:	d1e0      	bne.n	800a2c2 <_free_r+0x22>
 800a300:	6818      	ldr	r0, [r3, #0]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	6053      	str	r3, [r2, #4]
 800a306:	4408      	add	r0, r1
 800a308:	6010      	str	r0, [r2, #0]
 800a30a:	e7da      	b.n	800a2c2 <_free_r+0x22>
 800a30c:	d902      	bls.n	800a314 <_free_r+0x74>
 800a30e:	230c      	movs	r3, #12
 800a310:	602b      	str	r3, [r5, #0]
 800a312:	e7d6      	b.n	800a2c2 <_free_r+0x22>
 800a314:	6820      	ldr	r0, [r4, #0]
 800a316:	1821      	adds	r1, r4, r0
 800a318:	428b      	cmp	r3, r1
 800a31a:	bf04      	itt	eq
 800a31c:	6819      	ldreq	r1, [r3, #0]
 800a31e:	685b      	ldreq	r3, [r3, #4]
 800a320:	6063      	str	r3, [r4, #4]
 800a322:	bf04      	itt	eq
 800a324:	1809      	addeq	r1, r1, r0
 800a326:	6021      	streq	r1, [r4, #0]
 800a328:	6054      	str	r4, [r2, #4]
 800a32a:	e7ca      	b.n	800a2c2 <_free_r+0x22>
 800a32c:	bd38      	pop	{r3, r4, r5, pc}
 800a32e:	bf00      	nop
 800a330:	20000d84 	.word	0x20000d84

0800a334 <malloc>:
 800a334:	4b02      	ldr	r3, [pc, #8]	@ (800a340 <malloc+0xc>)
 800a336:	4601      	mov	r1, r0
 800a338:	6818      	ldr	r0, [r3, #0]
 800a33a:	f000 b825 	b.w	800a388 <_malloc_r>
 800a33e:	bf00      	nop
 800a340:	20000018 	.word	0x20000018

0800a344 <sbrk_aligned>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	4e0f      	ldr	r6, [pc, #60]	@ (800a384 <sbrk_aligned+0x40>)
 800a348:	460c      	mov	r4, r1
 800a34a:	6831      	ldr	r1, [r6, #0]
 800a34c:	4605      	mov	r5, r0
 800a34e:	b911      	cbnz	r1, 800a356 <sbrk_aligned+0x12>
 800a350:	f000 fe3e 	bl	800afd0 <_sbrk_r>
 800a354:	6030      	str	r0, [r6, #0]
 800a356:	4621      	mov	r1, r4
 800a358:	4628      	mov	r0, r5
 800a35a:	f000 fe39 	bl	800afd0 <_sbrk_r>
 800a35e:	1c43      	adds	r3, r0, #1
 800a360:	d103      	bne.n	800a36a <sbrk_aligned+0x26>
 800a362:	f04f 34ff 	mov.w	r4, #4294967295
 800a366:	4620      	mov	r0, r4
 800a368:	bd70      	pop	{r4, r5, r6, pc}
 800a36a:	1cc4      	adds	r4, r0, #3
 800a36c:	f024 0403 	bic.w	r4, r4, #3
 800a370:	42a0      	cmp	r0, r4
 800a372:	d0f8      	beq.n	800a366 <sbrk_aligned+0x22>
 800a374:	1a21      	subs	r1, r4, r0
 800a376:	4628      	mov	r0, r5
 800a378:	f000 fe2a 	bl	800afd0 <_sbrk_r>
 800a37c:	3001      	adds	r0, #1
 800a37e:	d1f2      	bne.n	800a366 <sbrk_aligned+0x22>
 800a380:	e7ef      	b.n	800a362 <sbrk_aligned+0x1e>
 800a382:	bf00      	nop
 800a384:	20000d80 	.word	0x20000d80

0800a388 <_malloc_r>:
 800a388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a38c:	1ccd      	adds	r5, r1, #3
 800a38e:	f025 0503 	bic.w	r5, r5, #3
 800a392:	3508      	adds	r5, #8
 800a394:	2d0c      	cmp	r5, #12
 800a396:	bf38      	it	cc
 800a398:	250c      	movcc	r5, #12
 800a39a:	2d00      	cmp	r5, #0
 800a39c:	4606      	mov	r6, r0
 800a39e:	db01      	blt.n	800a3a4 <_malloc_r+0x1c>
 800a3a0:	42a9      	cmp	r1, r5
 800a3a2:	d904      	bls.n	800a3ae <_malloc_r+0x26>
 800a3a4:	230c      	movs	r3, #12
 800a3a6:	6033      	str	r3, [r6, #0]
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a484 <_malloc_r+0xfc>
 800a3b2:	f000 f869 	bl	800a488 <__malloc_lock>
 800a3b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a3ba:	461c      	mov	r4, r3
 800a3bc:	bb44      	cbnz	r4, 800a410 <_malloc_r+0x88>
 800a3be:	4629      	mov	r1, r5
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	f7ff ffbf 	bl	800a344 <sbrk_aligned>
 800a3c6:	1c43      	adds	r3, r0, #1
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	d158      	bne.n	800a47e <_malloc_r+0xf6>
 800a3cc:	f8d8 4000 	ldr.w	r4, [r8]
 800a3d0:	4627      	mov	r7, r4
 800a3d2:	2f00      	cmp	r7, #0
 800a3d4:	d143      	bne.n	800a45e <_malloc_r+0xd6>
 800a3d6:	2c00      	cmp	r4, #0
 800a3d8:	d04b      	beq.n	800a472 <_malloc_r+0xea>
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	4639      	mov	r1, r7
 800a3de:	4630      	mov	r0, r6
 800a3e0:	eb04 0903 	add.w	r9, r4, r3
 800a3e4:	f000 fdf4 	bl	800afd0 <_sbrk_r>
 800a3e8:	4581      	cmp	r9, r0
 800a3ea:	d142      	bne.n	800a472 <_malloc_r+0xea>
 800a3ec:	6821      	ldr	r1, [r4, #0]
 800a3ee:	1a6d      	subs	r5, r5, r1
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	f7ff ffa6 	bl	800a344 <sbrk_aligned>
 800a3f8:	3001      	adds	r0, #1
 800a3fa:	d03a      	beq.n	800a472 <_malloc_r+0xea>
 800a3fc:	6823      	ldr	r3, [r4, #0]
 800a3fe:	442b      	add	r3, r5
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	f8d8 3000 	ldr.w	r3, [r8]
 800a406:	685a      	ldr	r2, [r3, #4]
 800a408:	bb62      	cbnz	r2, 800a464 <_malloc_r+0xdc>
 800a40a:	f8c8 7000 	str.w	r7, [r8]
 800a40e:	e00f      	b.n	800a430 <_malloc_r+0xa8>
 800a410:	6822      	ldr	r2, [r4, #0]
 800a412:	1b52      	subs	r2, r2, r5
 800a414:	d420      	bmi.n	800a458 <_malloc_r+0xd0>
 800a416:	2a0b      	cmp	r2, #11
 800a418:	d917      	bls.n	800a44a <_malloc_r+0xc2>
 800a41a:	1961      	adds	r1, r4, r5
 800a41c:	42a3      	cmp	r3, r4
 800a41e:	6025      	str	r5, [r4, #0]
 800a420:	bf18      	it	ne
 800a422:	6059      	strne	r1, [r3, #4]
 800a424:	6863      	ldr	r3, [r4, #4]
 800a426:	bf08      	it	eq
 800a428:	f8c8 1000 	streq.w	r1, [r8]
 800a42c:	5162      	str	r2, [r4, r5]
 800a42e:	604b      	str	r3, [r1, #4]
 800a430:	4630      	mov	r0, r6
 800a432:	f000 f82f 	bl	800a494 <__malloc_unlock>
 800a436:	f104 000b 	add.w	r0, r4, #11
 800a43a:	1d23      	adds	r3, r4, #4
 800a43c:	f020 0007 	bic.w	r0, r0, #7
 800a440:	1ac2      	subs	r2, r0, r3
 800a442:	bf1c      	itt	ne
 800a444:	1a1b      	subne	r3, r3, r0
 800a446:	50a3      	strne	r3, [r4, r2]
 800a448:	e7af      	b.n	800a3aa <_malloc_r+0x22>
 800a44a:	6862      	ldr	r2, [r4, #4]
 800a44c:	42a3      	cmp	r3, r4
 800a44e:	bf0c      	ite	eq
 800a450:	f8c8 2000 	streq.w	r2, [r8]
 800a454:	605a      	strne	r2, [r3, #4]
 800a456:	e7eb      	b.n	800a430 <_malloc_r+0xa8>
 800a458:	4623      	mov	r3, r4
 800a45a:	6864      	ldr	r4, [r4, #4]
 800a45c:	e7ae      	b.n	800a3bc <_malloc_r+0x34>
 800a45e:	463c      	mov	r4, r7
 800a460:	687f      	ldr	r7, [r7, #4]
 800a462:	e7b6      	b.n	800a3d2 <_malloc_r+0x4a>
 800a464:	461a      	mov	r2, r3
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	42a3      	cmp	r3, r4
 800a46a:	d1fb      	bne.n	800a464 <_malloc_r+0xdc>
 800a46c:	2300      	movs	r3, #0
 800a46e:	6053      	str	r3, [r2, #4]
 800a470:	e7de      	b.n	800a430 <_malloc_r+0xa8>
 800a472:	230c      	movs	r3, #12
 800a474:	6033      	str	r3, [r6, #0]
 800a476:	4630      	mov	r0, r6
 800a478:	f000 f80c 	bl	800a494 <__malloc_unlock>
 800a47c:	e794      	b.n	800a3a8 <_malloc_r+0x20>
 800a47e:	6005      	str	r5, [r0, #0]
 800a480:	e7d6      	b.n	800a430 <_malloc_r+0xa8>
 800a482:	bf00      	nop
 800a484:	20000d84 	.word	0x20000d84

0800a488 <__malloc_lock>:
 800a488:	4801      	ldr	r0, [pc, #4]	@ (800a490 <__malloc_lock+0x8>)
 800a48a:	f7ff b89e 	b.w	80095ca <__retarget_lock_acquire_recursive>
 800a48e:	bf00      	nop
 800a490:	20000d7c 	.word	0x20000d7c

0800a494 <__malloc_unlock>:
 800a494:	4801      	ldr	r0, [pc, #4]	@ (800a49c <__malloc_unlock+0x8>)
 800a496:	f7ff b899 	b.w	80095cc <__retarget_lock_release_recursive>
 800a49a:	bf00      	nop
 800a49c:	20000d7c 	.word	0x20000d7c

0800a4a0 <_Balloc>:
 800a4a0:	b570      	push	{r4, r5, r6, lr}
 800a4a2:	69c6      	ldr	r6, [r0, #28]
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	460d      	mov	r5, r1
 800a4a8:	b976      	cbnz	r6, 800a4c8 <_Balloc+0x28>
 800a4aa:	2010      	movs	r0, #16
 800a4ac:	f7ff ff42 	bl	800a334 <malloc>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	61e0      	str	r0, [r4, #28]
 800a4b4:	b920      	cbnz	r0, 800a4c0 <_Balloc+0x20>
 800a4b6:	4b18      	ldr	r3, [pc, #96]	@ (800a518 <_Balloc+0x78>)
 800a4b8:	4818      	ldr	r0, [pc, #96]	@ (800a51c <_Balloc+0x7c>)
 800a4ba:	216b      	movs	r1, #107	@ 0x6b
 800a4bc:	f000 fd98 	bl	800aff0 <__assert_func>
 800a4c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4c4:	6006      	str	r6, [r0, #0]
 800a4c6:	60c6      	str	r6, [r0, #12]
 800a4c8:	69e6      	ldr	r6, [r4, #28]
 800a4ca:	68f3      	ldr	r3, [r6, #12]
 800a4cc:	b183      	cbz	r3, 800a4f0 <_Balloc+0x50>
 800a4ce:	69e3      	ldr	r3, [r4, #28]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4d6:	b9b8      	cbnz	r0, 800a508 <_Balloc+0x68>
 800a4d8:	2101      	movs	r1, #1
 800a4da:	fa01 f605 	lsl.w	r6, r1, r5
 800a4de:	1d72      	adds	r2, r6, #5
 800a4e0:	0092      	lsls	r2, r2, #2
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 fda2 	bl	800b02c <_calloc_r>
 800a4e8:	b160      	cbz	r0, 800a504 <_Balloc+0x64>
 800a4ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4ee:	e00e      	b.n	800a50e <_Balloc+0x6e>
 800a4f0:	2221      	movs	r2, #33	@ 0x21
 800a4f2:	2104      	movs	r1, #4
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f000 fd99 	bl	800b02c <_calloc_r>
 800a4fa:	69e3      	ldr	r3, [r4, #28]
 800a4fc:	60f0      	str	r0, [r6, #12]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1e4      	bne.n	800a4ce <_Balloc+0x2e>
 800a504:	2000      	movs	r0, #0
 800a506:	bd70      	pop	{r4, r5, r6, pc}
 800a508:	6802      	ldr	r2, [r0, #0]
 800a50a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a50e:	2300      	movs	r3, #0
 800a510:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a514:	e7f7      	b.n	800a506 <_Balloc+0x66>
 800a516:	bf00      	nop
 800a518:	0800bb35 	.word	0x0800bb35
 800a51c:	0800bbb5 	.word	0x0800bbb5

0800a520 <_Bfree>:
 800a520:	b570      	push	{r4, r5, r6, lr}
 800a522:	69c6      	ldr	r6, [r0, #28]
 800a524:	4605      	mov	r5, r0
 800a526:	460c      	mov	r4, r1
 800a528:	b976      	cbnz	r6, 800a548 <_Bfree+0x28>
 800a52a:	2010      	movs	r0, #16
 800a52c:	f7ff ff02 	bl	800a334 <malloc>
 800a530:	4602      	mov	r2, r0
 800a532:	61e8      	str	r0, [r5, #28]
 800a534:	b920      	cbnz	r0, 800a540 <_Bfree+0x20>
 800a536:	4b09      	ldr	r3, [pc, #36]	@ (800a55c <_Bfree+0x3c>)
 800a538:	4809      	ldr	r0, [pc, #36]	@ (800a560 <_Bfree+0x40>)
 800a53a:	218f      	movs	r1, #143	@ 0x8f
 800a53c:	f000 fd58 	bl	800aff0 <__assert_func>
 800a540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a544:	6006      	str	r6, [r0, #0]
 800a546:	60c6      	str	r6, [r0, #12]
 800a548:	b13c      	cbz	r4, 800a55a <_Bfree+0x3a>
 800a54a:	69eb      	ldr	r3, [r5, #28]
 800a54c:	6862      	ldr	r2, [r4, #4]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a554:	6021      	str	r1, [r4, #0]
 800a556:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a55a:	bd70      	pop	{r4, r5, r6, pc}
 800a55c:	0800bb35 	.word	0x0800bb35
 800a560:	0800bbb5 	.word	0x0800bbb5

0800a564 <__multadd>:
 800a564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a568:	690d      	ldr	r5, [r1, #16]
 800a56a:	4607      	mov	r7, r0
 800a56c:	460c      	mov	r4, r1
 800a56e:	461e      	mov	r6, r3
 800a570:	f101 0c14 	add.w	ip, r1, #20
 800a574:	2000      	movs	r0, #0
 800a576:	f8dc 3000 	ldr.w	r3, [ip]
 800a57a:	b299      	uxth	r1, r3
 800a57c:	fb02 6101 	mla	r1, r2, r1, r6
 800a580:	0c1e      	lsrs	r6, r3, #16
 800a582:	0c0b      	lsrs	r3, r1, #16
 800a584:	fb02 3306 	mla	r3, r2, r6, r3
 800a588:	b289      	uxth	r1, r1
 800a58a:	3001      	adds	r0, #1
 800a58c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a590:	4285      	cmp	r5, r0
 800a592:	f84c 1b04 	str.w	r1, [ip], #4
 800a596:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a59a:	dcec      	bgt.n	800a576 <__multadd+0x12>
 800a59c:	b30e      	cbz	r6, 800a5e2 <__multadd+0x7e>
 800a59e:	68a3      	ldr	r3, [r4, #8]
 800a5a0:	42ab      	cmp	r3, r5
 800a5a2:	dc19      	bgt.n	800a5d8 <__multadd+0x74>
 800a5a4:	6861      	ldr	r1, [r4, #4]
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	3101      	adds	r1, #1
 800a5aa:	f7ff ff79 	bl	800a4a0 <_Balloc>
 800a5ae:	4680      	mov	r8, r0
 800a5b0:	b928      	cbnz	r0, 800a5be <__multadd+0x5a>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a5e8 <__multadd+0x84>)
 800a5b6:	480d      	ldr	r0, [pc, #52]	@ (800a5ec <__multadd+0x88>)
 800a5b8:	21ba      	movs	r1, #186	@ 0xba
 800a5ba:	f000 fd19 	bl	800aff0 <__assert_func>
 800a5be:	6922      	ldr	r2, [r4, #16]
 800a5c0:	3202      	adds	r2, #2
 800a5c2:	f104 010c 	add.w	r1, r4, #12
 800a5c6:	0092      	lsls	r2, r2, #2
 800a5c8:	300c      	adds	r0, #12
 800a5ca:	f7ff f800 	bl	80095ce <memcpy>
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	4638      	mov	r0, r7
 800a5d2:	f7ff ffa5 	bl	800a520 <_Bfree>
 800a5d6:	4644      	mov	r4, r8
 800a5d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5dc:	3501      	adds	r5, #1
 800a5de:	615e      	str	r6, [r3, #20]
 800a5e0:	6125      	str	r5, [r4, #16]
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e8:	0800bba4 	.word	0x0800bba4
 800a5ec:	0800bbb5 	.word	0x0800bbb5

0800a5f0 <__hi0bits>:
 800a5f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	bf36      	itet	cc
 800a5f8:	0403      	lslcc	r3, r0, #16
 800a5fa:	2000      	movcs	r0, #0
 800a5fc:	2010      	movcc	r0, #16
 800a5fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a602:	bf3c      	itt	cc
 800a604:	021b      	lslcc	r3, r3, #8
 800a606:	3008      	addcc	r0, #8
 800a608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a60c:	bf3c      	itt	cc
 800a60e:	011b      	lslcc	r3, r3, #4
 800a610:	3004      	addcc	r0, #4
 800a612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a616:	bf3c      	itt	cc
 800a618:	009b      	lslcc	r3, r3, #2
 800a61a:	3002      	addcc	r0, #2
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	db05      	blt.n	800a62c <__hi0bits+0x3c>
 800a620:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a624:	f100 0001 	add.w	r0, r0, #1
 800a628:	bf08      	it	eq
 800a62a:	2020      	moveq	r0, #32
 800a62c:	4770      	bx	lr

0800a62e <__lo0bits>:
 800a62e:	6803      	ldr	r3, [r0, #0]
 800a630:	4602      	mov	r2, r0
 800a632:	f013 0007 	ands.w	r0, r3, #7
 800a636:	d00b      	beq.n	800a650 <__lo0bits+0x22>
 800a638:	07d9      	lsls	r1, r3, #31
 800a63a:	d421      	bmi.n	800a680 <__lo0bits+0x52>
 800a63c:	0798      	lsls	r0, r3, #30
 800a63e:	bf49      	itett	mi
 800a640:	085b      	lsrmi	r3, r3, #1
 800a642:	089b      	lsrpl	r3, r3, #2
 800a644:	2001      	movmi	r0, #1
 800a646:	6013      	strmi	r3, [r2, #0]
 800a648:	bf5c      	itt	pl
 800a64a:	6013      	strpl	r3, [r2, #0]
 800a64c:	2002      	movpl	r0, #2
 800a64e:	4770      	bx	lr
 800a650:	b299      	uxth	r1, r3
 800a652:	b909      	cbnz	r1, 800a658 <__lo0bits+0x2a>
 800a654:	0c1b      	lsrs	r3, r3, #16
 800a656:	2010      	movs	r0, #16
 800a658:	b2d9      	uxtb	r1, r3
 800a65a:	b909      	cbnz	r1, 800a660 <__lo0bits+0x32>
 800a65c:	3008      	adds	r0, #8
 800a65e:	0a1b      	lsrs	r3, r3, #8
 800a660:	0719      	lsls	r1, r3, #28
 800a662:	bf04      	itt	eq
 800a664:	091b      	lsreq	r3, r3, #4
 800a666:	3004      	addeq	r0, #4
 800a668:	0799      	lsls	r1, r3, #30
 800a66a:	bf04      	itt	eq
 800a66c:	089b      	lsreq	r3, r3, #2
 800a66e:	3002      	addeq	r0, #2
 800a670:	07d9      	lsls	r1, r3, #31
 800a672:	d403      	bmi.n	800a67c <__lo0bits+0x4e>
 800a674:	085b      	lsrs	r3, r3, #1
 800a676:	f100 0001 	add.w	r0, r0, #1
 800a67a:	d003      	beq.n	800a684 <__lo0bits+0x56>
 800a67c:	6013      	str	r3, [r2, #0]
 800a67e:	4770      	bx	lr
 800a680:	2000      	movs	r0, #0
 800a682:	4770      	bx	lr
 800a684:	2020      	movs	r0, #32
 800a686:	4770      	bx	lr

0800a688 <__i2b>:
 800a688:	b510      	push	{r4, lr}
 800a68a:	460c      	mov	r4, r1
 800a68c:	2101      	movs	r1, #1
 800a68e:	f7ff ff07 	bl	800a4a0 <_Balloc>
 800a692:	4602      	mov	r2, r0
 800a694:	b928      	cbnz	r0, 800a6a2 <__i2b+0x1a>
 800a696:	4b05      	ldr	r3, [pc, #20]	@ (800a6ac <__i2b+0x24>)
 800a698:	4805      	ldr	r0, [pc, #20]	@ (800a6b0 <__i2b+0x28>)
 800a69a:	f240 1145 	movw	r1, #325	@ 0x145
 800a69e:	f000 fca7 	bl	800aff0 <__assert_func>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	6144      	str	r4, [r0, #20]
 800a6a6:	6103      	str	r3, [r0, #16]
 800a6a8:	bd10      	pop	{r4, pc}
 800a6aa:	bf00      	nop
 800a6ac:	0800bba4 	.word	0x0800bba4
 800a6b0:	0800bbb5 	.word	0x0800bbb5

0800a6b4 <__multiply>:
 800a6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b8:	4617      	mov	r7, r2
 800a6ba:	690a      	ldr	r2, [r1, #16]
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	bfa8      	it	ge
 800a6c2:	463b      	movge	r3, r7
 800a6c4:	4689      	mov	r9, r1
 800a6c6:	bfa4      	itt	ge
 800a6c8:	460f      	movge	r7, r1
 800a6ca:	4699      	movge	r9, r3
 800a6cc:	693d      	ldr	r5, [r7, #16]
 800a6ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	6879      	ldr	r1, [r7, #4]
 800a6d6:	eb05 060a 	add.w	r6, r5, sl
 800a6da:	42b3      	cmp	r3, r6
 800a6dc:	b085      	sub	sp, #20
 800a6de:	bfb8      	it	lt
 800a6e0:	3101      	addlt	r1, #1
 800a6e2:	f7ff fedd 	bl	800a4a0 <_Balloc>
 800a6e6:	b930      	cbnz	r0, 800a6f6 <__multiply+0x42>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	4b41      	ldr	r3, [pc, #260]	@ (800a7f0 <__multiply+0x13c>)
 800a6ec:	4841      	ldr	r0, [pc, #260]	@ (800a7f4 <__multiply+0x140>)
 800a6ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a6f2:	f000 fc7d 	bl	800aff0 <__assert_func>
 800a6f6:	f100 0414 	add.w	r4, r0, #20
 800a6fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a6fe:	4623      	mov	r3, r4
 800a700:	2200      	movs	r2, #0
 800a702:	4573      	cmp	r3, lr
 800a704:	d320      	bcc.n	800a748 <__multiply+0x94>
 800a706:	f107 0814 	add.w	r8, r7, #20
 800a70a:	f109 0114 	add.w	r1, r9, #20
 800a70e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a712:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a716:	9302      	str	r3, [sp, #8]
 800a718:	1beb      	subs	r3, r5, r7
 800a71a:	3b15      	subs	r3, #21
 800a71c:	f023 0303 	bic.w	r3, r3, #3
 800a720:	3304      	adds	r3, #4
 800a722:	3715      	adds	r7, #21
 800a724:	42bd      	cmp	r5, r7
 800a726:	bf38      	it	cc
 800a728:	2304      	movcc	r3, #4
 800a72a:	9301      	str	r3, [sp, #4]
 800a72c:	9b02      	ldr	r3, [sp, #8]
 800a72e:	9103      	str	r1, [sp, #12]
 800a730:	428b      	cmp	r3, r1
 800a732:	d80c      	bhi.n	800a74e <__multiply+0x9a>
 800a734:	2e00      	cmp	r6, #0
 800a736:	dd03      	ble.n	800a740 <__multiply+0x8c>
 800a738:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d055      	beq.n	800a7ec <__multiply+0x138>
 800a740:	6106      	str	r6, [r0, #16]
 800a742:	b005      	add	sp, #20
 800a744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a748:	f843 2b04 	str.w	r2, [r3], #4
 800a74c:	e7d9      	b.n	800a702 <__multiply+0x4e>
 800a74e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a752:	f1ba 0f00 	cmp.w	sl, #0
 800a756:	d01f      	beq.n	800a798 <__multiply+0xe4>
 800a758:	46c4      	mov	ip, r8
 800a75a:	46a1      	mov	r9, r4
 800a75c:	2700      	movs	r7, #0
 800a75e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a762:	f8d9 3000 	ldr.w	r3, [r9]
 800a766:	fa1f fb82 	uxth.w	fp, r2
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a770:	443b      	add	r3, r7
 800a772:	f8d9 7000 	ldr.w	r7, [r9]
 800a776:	0c12      	lsrs	r2, r2, #16
 800a778:	0c3f      	lsrs	r7, r7, #16
 800a77a:	fb0a 7202 	mla	r2, sl, r2, r7
 800a77e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a782:	b29b      	uxth	r3, r3
 800a784:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a788:	4565      	cmp	r5, ip
 800a78a:	f849 3b04 	str.w	r3, [r9], #4
 800a78e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a792:	d8e4      	bhi.n	800a75e <__multiply+0xaa>
 800a794:	9b01      	ldr	r3, [sp, #4]
 800a796:	50e7      	str	r7, [r4, r3]
 800a798:	9b03      	ldr	r3, [sp, #12]
 800a79a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a79e:	3104      	adds	r1, #4
 800a7a0:	f1b9 0f00 	cmp.w	r9, #0
 800a7a4:	d020      	beq.n	800a7e8 <__multiply+0x134>
 800a7a6:	6823      	ldr	r3, [r4, #0]
 800a7a8:	4647      	mov	r7, r8
 800a7aa:	46a4      	mov	ip, r4
 800a7ac:	f04f 0a00 	mov.w	sl, #0
 800a7b0:	f8b7 b000 	ldrh.w	fp, [r7]
 800a7b4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a7b8:	fb09 220b 	mla	r2, r9, fp, r2
 800a7bc:	4452      	add	r2, sl
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7c4:	f84c 3b04 	str.w	r3, [ip], #4
 800a7c8:	f857 3b04 	ldr.w	r3, [r7], #4
 800a7cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7d0:	f8bc 3000 	ldrh.w	r3, [ip]
 800a7d4:	fb09 330a 	mla	r3, r9, sl, r3
 800a7d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a7dc:	42bd      	cmp	r5, r7
 800a7de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7e2:	d8e5      	bhi.n	800a7b0 <__multiply+0xfc>
 800a7e4:	9a01      	ldr	r2, [sp, #4]
 800a7e6:	50a3      	str	r3, [r4, r2]
 800a7e8:	3404      	adds	r4, #4
 800a7ea:	e79f      	b.n	800a72c <__multiply+0x78>
 800a7ec:	3e01      	subs	r6, #1
 800a7ee:	e7a1      	b.n	800a734 <__multiply+0x80>
 800a7f0:	0800bba4 	.word	0x0800bba4
 800a7f4:	0800bbb5 	.word	0x0800bbb5

0800a7f8 <__pow5mult>:
 800a7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7fc:	4615      	mov	r5, r2
 800a7fe:	f012 0203 	ands.w	r2, r2, #3
 800a802:	4607      	mov	r7, r0
 800a804:	460e      	mov	r6, r1
 800a806:	d007      	beq.n	800a818 <__pow5mult+0x20>
 800a808:	4c25      	ldr	r4, [pc, #148]	@ (800a8a0 <__pow5mult+0xa8>)
 800a80a:	3a01      	subs	r2, #1
 800a80c:	2300      	movs	r3, #0
 800a80e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a812:	f7ff fea7 	bl	800a564 <__multadd>
 800a816:	4606      	mov	r6, r0
 800a818:	10ad      	asrs	r5, r5, #2
 800a81a:	d03d      	beq.n	800a898 <__pow5mult+0xa0>
 800a81c:	69fc      	ldr	r4, [r7, #28]
 800a81e:	b97c      	cbnz	r4, 800a840 <__pow5mult+0x48>
 800a820:	2010      	movs	r0, #16
 800a822:	f7ff fd87 	bl	800a334 <malloc>
 800a826:	4602      	mov	r2, r0
 800a828:	61f8      	str	r0, [r7, #28]
 800a82a:	b928      	cbnz	r0, 800a838 <__pow5mult+0x40>
 800a82c:	4b1d      	ldr	r3, [pc, #116]	@ (800a8a4 <__pow5mult+0xac>)
 800a82e:	481e      	ldr	r0, [pc, #120]	@ (800a8a8 <__pow5mult+0xb0>)
 800a830:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a834:	f000 fbdc 	bl	800aff0 <__assert_func>
 800a838:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a83c:	6004      	str	r4, [r0, #0]
 800a83e:	60c4      	str	r4, [r0, #12]
 800a840:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a844:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a848:	b94c      	cbnz	r4, 800a85e <__pow5mult+0x66>
 800a84a:	f240 2171 	movw	r1, #625	@ 0x271
 800a84e:	4638      	mov	r0, r7
 800a850:	f7ff ff1a 	bl	800a688 <__i2b>
 800a854:	2300      	movs	r3, #0
 800a856:	f8c8 0008 	str.w	r0, [r8, #8]
 800a85a:	4604      	mov	r4, r0
 800a85c:	6003      	str	r3, [r0, #0]
 800a85e:	f04f 0900 	mov.w	r9, #0
 800a862:	07eb      	lsls	r3, r5, #31
 800a864:	d50a      	bpl.n	800a87c <__pow5mult+0x84>
 800a866:	4631      	mov	r1, r6
 800a868:	4622      	mov	r2, r4
 800a86a:	4638      	mov	r0, r7
 800a86c:	f7ff ff22 	bl	800a6b4 <__multiply>
 800a870:	4631      	mov	r1, r6
 800a872:	4680      	mov	r8, r0
 800a874:	4638      	mov	r0, r7
 800a876:	f7ff fe53 	bl	800a520 <_Bfree>
 800a87a:	4646      	mov	r6, r8
 800a87c:	106d      	asrs	r5, r5, #1
 800a87e:	d00b      	beq.n	800a898 <__pow5mult+0xa0>
 800a880:	6820      	ldr	r0, [r4, #0]
 800a882:	b938      	cbnz	r0, 800a894 <__pow5mult+0x9c>
 800a884:	4622      	mov	r2, r4
 800a886:	4621      	mov	r1, r4
 800a888:	4638      	mov	r0, r7
 800a88a:	f7ff ff13 	bl	800a6b4 <__multiply>
 800a88e:	6020      	str	r0, [r4, #0]
 800a890:	f8c0 9000 	str.w	r9, [r0]
 800a894:	4604      	mov	r4, r0
 800a896:	e7e4      	b.n	800a862 <__pow5mult+0x6a>
 800a898:	4630      	mov	r0, r6
 800a89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a89e:	bf00      	nop
 800a8a0:	0800bc68 	.word	0x0800bc68
 800a8a4:	0800bb35 	.word	0x0800bb35
 800a8a8:	0800bbb5 	.word	0x0800bbb5

0800a8ac <__lshift>:
 800a8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b0:	460c      	mov	r4, r1
 800a8b2:	6849      	ldr	r1, [r1, #4]
 800a8b4:	6923      	ldr	r3, [r4, #16]
 800a8b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8ba:	68a3      	ldr	r3, [r4, #8]
 800a8bc:	4607      	mov	r7, r0
 800a8be:	4691      	mov	r9, r2
 800a8c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8c4:	f108 0601 	add.w	r6, r8, #1
 800a8c8:	42b3      	cmp	r3, r6
 800a8ca:	db0b      	blt.n	800a8e4 <__lshift+0x38>
 800a8cc:	4638      	mov	r0, r7
 800a8ce:	f7ff fde7 	bl	800a4a0 <_Balloc>
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	b948      	cbnz	r0, 800a8ea <__lshift+0x3e>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	4b28      	ldr	r3, [pc, #160]	@ (800a97c <__lshift+0xd0>)
 800a8da:	4829      	ldr	r0, [pc, #164]	@ (800a980 <__lshift+0xd4>)
 800a8dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a8e0:	f000 fb86 	bl	800aff0 <__assert_func>
 800a8e4:	3101      	adds	r1, #1
 800a8e6:	005b      	lsls	r3, r3, #1
 800a8e8:	e7ee      	b.n	800a8c8 <__lshift+0x1c>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	f100 0114 	add.w	r1, r0, #20
 800a8f0:	f100 0210 	add.w	r2, r0, #16
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	4553      	cmp	r3, sl
 800a8f8:	db33      	blt.n	800a962 <__lshift+0xb6>
 800a8fa:	6920      	ldr	r0, [r4, #16]
 800a8fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a900:	f104 0314 	add.w	r3, r4, #20
 800a904:	f019 091f 	ands.w	r9, r9, #31
 800a908:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a90c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a910:	d02b      	beq.n	800a96a <__lshift+0xbe>
 800a912:	f1c9 0e20 	rsb	lr, r9, #32
 800a916:	468a      	mov	sl, r1
 800a918:	2200      	movs	r2, #0
 800a91a:	6818      	ldr	r0, [r3, #0]
 800a91c:	fa00 f009 	lsl.w	r0, r0, r9
 800a920:	4310      	orrs	r0, r2
 800a922:	f84a 0b04 	str.w	r0, [sl], #4
 800a926:	f853 2b04 	ldr.w	r2, [r3], #4
 800a92a:	459c      	cmp	ip, r3
 800a92c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a930:	d8f3      	bhi.n	800a91a <__lshift+0x6e>
 800a932:	ebac 0304 	sub.w	r3, ip, r4
 800a936:	3b15      	subs	r3, #21
 800a938:	f023 0303 	bic.w	r3, r3, #3
 800a93c:	3304      	adds	r3, #4
 800a93e:	f104 0015 	add.w	r0, r4, #21
 800a942:	4560      	cmp	r0, ip
 800a944:	bf88      	it	hi
 800a946:	2304      	movhi	r3, #4
 800a948:	50ca      	str	r2, [r1, r3]
 800a94a:	b10a      	cbz	r2, 800a950 <__lshift+0xa4>
 800a94c:	f108 0602 	add.w	r6, r8, #2
 800a950:	3e01      	subs	r6, #1
 800a952:	4638      	mov	r0, r7
 800a954:	612e      	str	r6, [r5, #16]
 800a956:	4621      	mov	r1, r4
 800a958:	f7ff fde2 	bl	800a520 <_Bfree>
 800a95c:	4628      	mov	r0, r5
 800a95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a962:	f842 0f04 	str.w	r0, [r2, #4]!
 800a966:	3301      	adds	r3, #1
 800a968:	e7c5      	b.n	800a8f6 <__lshift+0x4a>
 800a96a:	3904      	subs	r1, #4
 800a96c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a970:	f841 2f04 	str.w	r2, [r1, #4]!
 800a974:	459c      	cmp	ip, r3
 800a976:	d8f9      	bhi.n	800a96c <__lshift+0xc0>
 800a978:	e7ea      	b.n	800a950 <__lshift+0xa4>
 800a97a:	bf00      	nop
 800a97c:	0800bba4 	.word	0x0800bba4
 800a980:	0800bbb5 	.word	0x0800bbb5

0800a984 <__mcmp>:
 800a984:	690a      	ldr	r2, [r1, #16]
 800a986:	4603      	mov	r3, r0
 800a988:	6900      	ldr	r0, [r0, #16]
 800a98a:	1a80      	subs	r0, r0, r2
 800a98c:	b530      	push	{r4, r5, lr}
 800a98e:	d10e      	bne.n	800a9ae <__mcmp+0x2a>
 800a990:	3314      	adds	r3, #20
 800a992:	3114      	adds	r1, #20
 800a994:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a998:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a99c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a9a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a9a4:	4295      	cmp	r5, r2
 800a9a6:	d003      	beq.n	800a9b0 <__mcmp+0x2c>
 800a9a8:	d205      	bcs.n	800a9b6 <__mcmp+0x32>
 800a9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ae:	bd30      	pop	{r4, r5, pc}
 800a9b0:	42a3      	cmp	r3, r4
 800a9b2:	d3f3      	bcc.n	800a99c <__mcmp+0x18>
 800a9b4:	e7fb      	b.n	800a9ae <__mcmp+0x2a>
 800a9b6:	2001      	movs	r0, #1
 800a9b8:	e7f9      	b.n	800a9ae <__mcmp+0x2a>
	...

0800a9bc <__mdiff>:
 800a9bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c0:	4689      	mov	r9, r1
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	4648      	mov	r0, r9
 800a9c8:	4614      	mov	r4, r2
 800a9ca:	f7ff ffdb 	bl	800a984 <__mcmp>
 800a9ce:	1e05      	subs	r5, r0, #0
 800a9d0:	d112      	bne.n	800a9f8 <__mdiff+0x3c>
 800a9d2:	4629      	mov	r1, r5
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	f7ff fd63 	bl	800a4a0 <_Balloc>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	b928      	cbnz	r0, 800a9ea <__mdiff+0x2e>
 800a9de:	4b3f      	ldr	r3, [pc, #252]	@ (800aadc <__mdiff+0x120>)
 800a9e0:	f240 2137 	movw	r1, #567	@ 0x237
 800a9e4:	483e      	ldr	r0, [pc, #248]	@ (800aae0 <__mdiff+0x124>)
 800a9e6:	f000 fb03 	bl	800aff0 <__assert_func>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	b003      	add	sp, #12
 800a9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f8:	bfbc      	itt	lt
 800a9fa:	464b      	movlt	r3, r9
 800a9fc:	46a1      	movlt	r9, r4
 800a9fe:	4630      	mov	r0, r6
 800aa00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aa04:	bfba      	itte	lt
 800aa06:	461c      	movlt	r4, r3
 800aa08:	2501      	movlt	r5, #1
 800aa0a:	2500      	movge	r5, #0
 800aa0c:	f7ff fd48 	bl	800a4a0 <_Balloc>
 800aa10:	4602      	mov	r2, r0
 800aa12:	b918      	cbnz	r0, 800aa1c <__mdiff+0x60>
 800aa14:	4b31      	ldr	r3, [pc, #196]	@ (800aadc <__mdiff+0x120>)
 800aa16:	f240 2145 	movw	r1, #581	@ 0x245
 800aa1a:	e7e3      	b.n	800a9e4 <__mdiff+0x28>
 800aa1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aa20:	6926      	ldr	r6, [r4, #16]
 800aa22:	60c5      	str	r5, [r0, #12]
 800aa24:	f109 0310 	add.w	r3, r9, #16
 800aa28:	f109 0514 	add.w	r5, r9, #20
 800aa2c:	f104 0e14 	add.w	lr, r4, #20
 800aa30:	f100 0b14 	add.w	fp, r0, #20
 800aa34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aa38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aa3c:	9301      	str	r3, [sp, #4]
 800aa3e:	46d9      	mov	r9, fp
 800aa40:	f04f 0c00 	mov.w	ip, #0
 800aa44:	9b01      	ldr	r3, [sp, #4]
 800aa46:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aa4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aa4e:	9301      	str	r3, [sp, #4]
 800aa50:	fa1f f38a 	uxth.w	r3, sl
 800aa54:	4619      	mov	r1, r3
 800aa56:	b283      	uxth	r3, r0
 800aa58:	1acb      	subs	r3, r1, r3
 800aa5a:	0c00      	lsrs	r0, r0, #16
 800aa5c:	4463      	add	r3, ip
 800aa5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aa62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aa6c:	4576      	cmp	r6, lr
 800aa6e:	f849 3b04 	str.w	r3, [r9], #4
 800aa72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa76:	d8e5      	bhi.n	800aa44 <__mdiff+0x88>
 800aa78:	1b33      	subs	r3, r6, r4
 800aa7a:	3b15      	subs	r3, #21
 800aa7c:	f023 0303 	bic.w	r3, r3, #3
 800aa80:	3415      	adds	r4, #21
 800aa82:	3304      	adds	r3, #4
 800aa84:	42a6      	cmp	r6, r4
 800aa86:	bf38      	it	cc
 800aa88:	2304      	movcc	r3, #4
 800aa8a:	441d      	add	r5, r3
 800aa8c:	445b      	add	r3, fp
 800aa8e:	461e      	mov	r6, r3
 800aa90:	462c      	mov	r4, r5
 800aa92:	4544      	cmp	r4, r8
 800aa94:	d30e      	bcc.n	800aab4 <__mdiff+0xf8>
 800aa96:	f108 0103 	add.w	r1, r8, #3
 800aa9a:	1b49      	subs	r1, r1, r5
 800aa9c:	f021 0103 	bic.w	r1, r1, #3
 800aaa0:	3d03      	subs	r5, #3
 800aaa2:	45a8      	cmp	r8, r5
 800aaa4:	bf38      	it	cc
 800aaa6:	2100      	movcc	r1, #0
 800aaa8:	440b      	add	r3, r1
 800aaaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aaae:	b191      	cbz	r1, 800aad6 <__mdiff+0x11a>
 800aab0:	6117      	str	r7, [r2, #16]
 800aab2:	e79d      	b.n	800a9f0 <__mdiff+0x34>
 800aab4:	f854 1b04 	ldr.w	r1, [r4], #4
 800aab8:	46e6      	mov	lr, ip
 800aaba:	0c08      	lsrs	r0, r1, #16
 800aabc:	fa1c fc81 	uxtah	ip, ip, r1
 800aac0:	4471      	add	r1, lr
 800aac2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aac6:	b289      	uxth	r1, r1
 800aac8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aacc:	f846 1b04 	str.w	r1, [r6], #4
 800aad0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aad4:	e7dd      	b.n	800aa92 <__mdiff+0xd6>
 800aad6:	3f01      	subs	r7, #1
 800aad8:	e7e7      	b.n	800aaaa <__mdiff+0xee>
 800aada:	bf00      	nop
 800aadc:	0800bba4 	.word	0x0800bba4
 800aae0:	0800bbb5 	.word	0x0800bbb5

0800aae4 <__d2b>:
 800aae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aae8:	460f      	mov	r7, r1
 800aaea:	2101      	movs	r1, #1
 800aaec:	ec59 8b10 	vmov	r8, r9, d0
 800aaf0:	4616      	mov	r6, r2
 800aaf2:	f7ff fcd5 	bl	800a4a0 <_Balloc>
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	b930      	cbnz	r0, 800ab08 <__d2b+0x24>
 800aafa:	4602      	mov	r2, r0
 800aafc:	4b23      	ldr	r3, [pc, #140]	@ (800ab8c <__d2b+0xa8>)
 800aafe:	4824      	ldr	r0, [pc, #144]	@ (800ab90 <__d2b+0xac>)
 800ab00:	f240 310f 	movw	r1, #783	@ 0x30f
 800ab04:	f000 fa74 	bl	800aff0 <__assert_func>
 800ab08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab10:	b10d      	cbz	r5, 800ab16 <__d2b+0x32>
 800ab12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab16:	9301      	str	r3, [sp, #4]
 800ab18:	f1b8 0300 	subs.w	r3, r8, #0
 800ab1c:	d023      	beq.n	800ab66 <__d2b+0x82>
 800ab1e:	4668      	mov	r0, sp
 800ab20:	9300      	str	r3, [sp, #0]
 800ab22:	f7ff fd84 	bl	800a62e <__lo0bits>
 800ab26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab2a:	b1d0      	cbz	r0, 800ab62 <__d2b+0x7e>
 800ab2c:	f1c0 0320 	rsb	r3, r0, #32
 800ab30:	fa02 f303 	lsl.w	r3, r2, r3
 800ab34:	430b      	orrs	r3, r1
 800ab36:	40c2      	lsrs	r2, r0
 800ab38:	6163      	str	r3, [r4, #20]
 800ab3a:	9201      	str	r2, [sp, #4]
 800ab3c:	9b01      	ldr	r3, [sp, #4]
 800ab3e:	61a3      	str	r3, [r4, #24]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	bf0c      	ite	eq
 800ab44:	2201      	moveq	r2, #1
 800ab46:	2202      	movne	r2, #2
 800ab48:	6122      	str	r2, [r4, #16]
 800ab4a:	b1a5      	cbz	r5, 800ab76 <__d2b+0x92>
 800ab4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ab50:	4405      	add	r5, r0
 800ab52:	603d      	str	r5, [r7, #0]
 800ab54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ab58:	6030      	str	r0, [r6, #0]
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	b003      	add	sp, #12
 800ab5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab62:	6161      	str	r1, [r4, #20]
 800ab64:	e7ea      	b.n	800ab3c <__d2b+0x58>
 800ab66:	a801      	add	r0, sp, #4
 800ab68:	f7ff fd61 	bl	800a62e <__lo0bits>
 800ab6c:	9b01      	ldr	r3, [sp, #4]
 800ab6e:	6163      	str	r3, [r4, #20]
 800ab70:	3020      	adds	r0, #32
 800ab72:	2201      	movs	r2, #1
 800ab74:	e7e8      	b.n	800ab48 <__d2b+0x64>
 800ab76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ab7e:	6038      	str	r0, [r7, #0]
 800ab80:	6918      	ldr	r0, [r3, #16]
 800ab82:	f7ff fd35 	bl	800a5f0 <__hi0bits>
 800ab86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab8a:	e7e5      	b.n	800ab58 <__d2b+0x74>
 800ab8c:	0800bba4 	.word	0x0800bba4
 800ab90:	0800bbb5 	.word	0x0800bbb5

0800ab94 <__ssputs_r>:
 800ab94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab98:	688e      	ldr	r6, [r1, #8]
 800ab9a:	461f      	mov	r7, r3
 800ab9c:	42be      	cmp	r6, r7
 800ab9e:	680b      	ldr	r3, [r1, #0]
 800aba0:	4682      	mov	sl, r0
 800aba2:	460c      	mov	r4, r1
 800aba4:	4690      	mov	r8, r2
 800aba6:	d82d      	bhi.n	800ac04 <__ssputs_r+0x70>
 800aba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800abac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800abb0:	d026      	beq.n	800ac00 <__ssputs_r+0x6c>
 800abb2:	6965      	ldr	r5, [r4, #20]
 800abb4:	6909      	ldr	r1, [r1, #16]
 800abb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abba:	eba3 0901 	sub.w	r9, r3, r1
 800abbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abc2:	1c7b      	adds	r3, r7, #1
 800abc4:	444b      	add	r3, r9
 800abc6:	106d      	asrs	r5, r5, #1
 800abc8:	429d      	cmp	r5, r3
 800abca:	bf38      	it	cc
 800abcc:	461d      	movcc	r5, r3
 800abce:	0553      	lsls	r3, r2, #21
 800abd0:	d527      	bpl.n	800ac22 <__ssputs_r+0x8e>
 800abd2:	4629      	mov	r1, r5
 800abd4:	f7ff fbd8 	bl	800a388 <_malloc_r>
 800abd8:	4606      	mov	r6, r0
 800abda:	b360      	cbz	r0, 800ac36 <__ssputs_r+0xa2>
 800abdc:	6921      	ldr	r1, [r4, #16]
 800abde:	464a      	mov	r2, r9
 800abe0:	f7fe fcf5 	bl	80095ce <memcpy>
 800abe4:	89a3      	ldrh	r3, [r4, #12]
 800abe6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800abea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abee:	81a3      	strh	r3, [r4, #12]
 800abf0:	6126      	str	r6, [r4, #16]
 800abf2:	6165      	str	r5, [r4, #20]
 800abf4:	444e      	add	r6, r9
 800abf6:	eba5 0509 	sub.w	r5, r5, r9
 800abfa:	6026      	str	r6, [r4, #0]
 800abfc:	60a5      	str	r5, [r4, #8]
 800abfe:	463e      	mov	r6, r7
 800ac00:	42be      	cmp	r6, r7
 800ac02:	d900      	bls.n	800ac06 <__ssputs_r+0x72>
 800ac04:	463e      	mov	r6, r7
 800ac06:	6820      	ldr	r0, [r4, #0]
 800ac08:	4632      	mov	r2, r6
 800ac0a:	4641      	mov	r1, r8
 800ac0c:	f000 f9c6 	bl	800af9c <memmove>
 800ac10:	68a3      	ldr	r3, [r4, #8]
 800ac12:	1b9b      	subs	r3, r3, r6
 800ac14:	60a3      	str	r3, [r4, #8]
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	4433      	add	r3, r6
 800ac1a:	6023      	str	r3, [r4, #0]
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac22:	462a      	mov	r2, r5
 800ac24:	f000 fa28 	bl	800b078 <_realloc_r>
 800ac28:	4606      	mov	r6, r0
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d1e0      	bne.n	800abf0 <__ssputs_r+0x5c>
 800ac2e:	6921      	ldr	r1, [r4, #16]
 800ac30:	4650      	mov	r0, sl
 800ac32:	f7ff fb35 	bl	800a2a0 <_free_r>
 800ac36:	230c      	movs	r3, #12
 800ac38:	f8ca 3000 	str.w	r3, [sl]
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac42:	81a3      	strh	r3, [r4, #12]
 800ac44:	f04f 30ff 	mov.w	r0, #4294967295
 800ac48:	e7e9      	b.n	800ac1e <__ssputs_r+0x8a>
	...

0800ac4c <_svfiprintf_r>:
 800ac4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac50:	4698      	mov	r8, r3
 800ac52:	898b      	ldrh	r3, [r1, #12]
 800ac54:	061b      	lsls	r3, r3, #24
 800ac56:	b09d      	sub	sp, #116	@ 0x74
 800ac58:	4607      	mov	r7, r0
 800ac5a:	460d      	mov	r5, r1
 800ac5c:	4614      	mov	r4, r2
 800ac5e:	d510      	bpl.n	800ac82 <_svfiprintf_r+0x36>
 800ac60:	690b      	ldr	r3, [r1, #16]
 800ac62:	b973      	cbnz	r3, 800ac82 <_svfiprintf_r+0x36>
 800ac64:	2140      	movs	r1, #64	@ 0x40
 800ac66:	f7ff fb8f 	bl	800a388 <_malloc_r>
 800ac6a:	6028      	str	r0, [r5, #0]
 800ac6c:	6128      	str	r0, [r5, #16]
 800ac6e:	b930      	cbnz	r0, 800ac7e <_svfiprintf_r+0x32>
 800ac70:	230c      	movs	r3, #12
 800ac72:	603b      	str	r3, [r7, #0]
 800ac74:	f04f 30ff 	mov.w	r0, #4294967295
 800ac78:	b01d      	add	sp, #116	@ 0x74
 800ac7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac7e:	2340      	movs	r3, #64	@ 0x40
 800ac80:	616b      	str	r3, [r5, #20]
 800ac82:	2300      	movs	r3, #0
 800ac84:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac86:	2320      	movs	r3, #32
 800ac88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac90:	2330      	movs	r3, #48	@ 0x30
 800ac92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ae30 <_svfiprintf_r+0x1e4>
 800ac96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac9a:	f04f 0901 	mov.w	r9, #1
 800ac9e:	4623      	mov	r3, r4
 800aca0:	469a      	mov	sl, r3
 800aca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aca6:	b10a      	cbz	r2, 800acac <_svfiprintf_r+0x60>
 800aca8:	2a25      	cmp	r2, #37	@ 0x25
 800acaa:	d1f9      	bne.n	800aca0 <_svfiprintf_r+0x54>
 800acac:	ebba 0b04 	subs.w	fp, sl, r4
 800acb0:	d00b      	beq.n	800acca <_svfiprintf_r+0x7e>
 800acb2:	465b      	mov	r3, fp
 800acb4:	4622      	mov	r2, r4
 800acb6:	4629      	mov	r1, r5
 800acb8:	4638      	mov	r0, r7
 800acba:	f7ff ff6b 	bl	800ab94 <__ssputs_r>
 800acbe:	3001      	adds	r0, #1
 800acc0:	f000 80a7 	beq.w	800ae12 <_svfiprintf_r+0x1c6>
 800acc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acc6:	445a      	add	r2, fp
 800acc8:	9209      	str	r2, [sp, #36]	@ 0x24
 800acca:	f89a 3000 	ldrb.w	r3, [sl]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f000 809f 	beq.w	800ae12 <_svfiprintf_r+0x1c6>
 800acd4:	2300      	movs	r3, #0
 800acd6:	f04f 32ff 	mov.w	r2, #4294967295
 800acda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acde:	f10a 0a01 	add.w	sl, sl, #1
 800ace2:	9304      	str	r3, [sp, #16]
 800ace4:	9307      	str	r3, [sp, #28]
 800ace6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800acea:	931a      	str	r3, [sp, #104]	@ 0x68
 800acec:	4654      	mov	r4, sl
 800acee:	2205      	movs	r2, #5
 800acf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf4:	484e      	ldr	r0, [pc, #312]	@ (800ae30 <_svfiprintf_r+0x1e4>)
 800acf6:	f7f5 fa9b 	bl	8000230 <memchr>
 800acfa:	9a04      	ldr	r2, [sp, #16]
 800acfc:	b9d8      	cbnz	r0, 800ad36 <_svfiprintf_r+0xea>
 800acfe:	06d0      	lsls	r0, r2, #27
 800ad00:	bf44      	itt	mi
 800ad02:	2320      	movmi	r3, #32
 800ad04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad08:	0711      	lsls	r1, r2, #28
 800ad0a:	bf44      	itt	mi
 800ad0c:	232b      	movmi	r3, #43	@ 0x2b
 800ad0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad12:	f89a 3000 	ldrb.w	r3, [sl]
 800ad16:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad18:	d015      	beq.n	800ad46 <_svfiprintf_r+0xfa>
 800ad1a:	9a07      	ldr	r2, [sp, #28]
 800ad1c:	4654      	mov	r4, sl
 800ad1e:	2000      	movs	r0, #0
 800ad20:	f04f 0c0a 	mov.w	ip, #10
 800ad24:	4621      	mov	r1, r4
 800ad26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad2a:	3b30      	subs	r3, #48	@ 0x30
 800ad2c:	2b09      	cmp	r3, #9
 800ad2e:	d94b      	bls.n	800adc8 <_svfiprintf_r+0x17c>
 800ad30:	b1b0      	cbz	r0, 800ad60 <_svfiprintf_r+0x114>
 800ad32:	9207      	str	r2, [sp, #28]
 800ad34:	e014      	b.n	800ad60 <_svfiprintf_r+0x114>
 800ad36:	eba0 0308 	sub.w	r3, r0, r8
 800ad3a:	fa09 f303 	lsl.w	r3, r9, r3
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	9304      	str	r3, [sp, #16]
 800ad42:	46a2      	mov	sl, r4
 800ad44:	e7d2      	b.n	800acec <_svfiprintf_r+0xa0>
 800ad46:	9b03      	ldr	r3, [sp, #12]
 800ad48:	1d19      	adds	r1, r3, #4
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	9103      	str	r1, [sp, #12]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	bfbb      	ittet	lt
 800ad52:	425b      	neglt	r3, r3
 800ad54:	f042 0202 	orrlt.w	r2, r2, #2
 800ad58:	9307      	strge	r3, [sp, #28]
 800ad5a:	9307      	strlt	r3, [sp, #28]
 800ad5c:	bfb8      	it	lt
 800ad5e:	9204      	strlt	r2, [sp, #16]
 800ad60:	7823      	ldrb	r3, [r4, #0]
 800ad62:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad64:	d10a      	bne.n	800ad7c <_svfiprintf_r+0x130>
 800ad66:	7863      	ldrb	r3, [r4, #1]
 800ad68:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad6a:	d132      	bne.n	800add2 <_svfiprintf_r+0x186>
 800ad6c:	9b03      	ldr	r3, [sp, #12]
 800ad6e:	1d1a      	adds	r2, r3, #4
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	9203      	str	r2, [sp, #12]
 800ad74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad78:	3402      	adds	r4, #2
 800ad7a:	9305      	str	r3, [sp, #20]
 800ad7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ae40 <_svfiprintf_r+0x1f4>
 800ad80:	7821      	ldrb	r1, [r4, #0]
 800ad82:	2203      	movs	r2, #3
 800ad84:	4650      	mov	r0, sl
 800ad86:	f7f5 fa53 	bl	8000230 <memchr>
 800ad8a:	b138      	cbz	r0, 800ad9c <_svfiprintf_r+0x150>
 800ad8c:	9b04      	ldr	r3, [sp, #16]
 800ad8e:	eba0 000a 	sub.w	r0, r0, sl
 800ad92:	2240      	movs	r2, #64	@ 0x40
 800ad94:	4082      	lsls	r2, r0
 800ad96:	4313      	orrs	r3, r2
 800ad98:	3401      	adds	r4, #1
 800ad9a:	9304      	str	r3, [sp, #16]
 800ad9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ada0:	4824      	ldr	r0, [pc, #144]	@ (800ae34 <_svfiprintf_r+0x1e8>)
 800ada2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ada6:	2206      	movs	r2, #6
 800ada8:	f7f5 fa42 	bl	8000230 <memchr>
 800adac:	2800      	cmp	r0, #0
 800adae:	d036      	beq.n	800ae1e <_svfiprintf_r+0x1d2>
 800adb0:	4b21      	ldr	r3, [pc, #132]	@ (800ae38 <_svfiprintf_r+0x1ec>)
 800adb2:	bb1b      	cbnz	r3, 800adfc <_svfiprintf_r+0x1b0>
 800adb4:	9b03      	ldr	r3, [sp, #12]
 800adb6:	3307      	adds	r3, #7
 800adb8:	f023 0307 	bic.w	r3, r3, #7
 800adbc:	3308      	adds	r3, #8
 800adbe:	9303      	str	r3, [sp, #12]
 800adc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adc2:	4433      	add	r3, r6
 800adc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800adc6:	e76a      	b.n	800ac9e <_svfiprintf_r+0x52>
 800adc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800adcc:	460c      	mov	r4, r1
 800adce:	2001      	movs	r0, #1
 800add0:	e7a8      	b.n	800ad24 <_svfiprintf_r+0xd8>
 800add2:	2300      	movs	r3, #0
 800add4:	3401      	adds	r4, #1
 800add6:	9305      	str	r3, [sp, #20]
 800add8:	4619      	mov	r1, r3
 800adda:	f04f 0c0a 	mov.w	ip, #10
 800adde:	4620      	mov	r0, r4
 800ade0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ade4:	3a30      	subs	r2, #48	@ 0x30
 800ade6:	2a09      	cmp	r2, #9
 800ade8:	d903      	bls.n	800adf2 <_svfiprintf_r+0x1a6>
 800adea:	2b00      	cmp	r3, #0
 800adec:	d0c6      	beq.n	800ad7c <_svfiprintf_r+0x130>
 800adee:	9105      	str	r1, [sp, #20]
 800adf0:	e7c4      	b.n	800ad7c <_svfiprintf_r+0x130>
 800adf2:	fb0c 2101 	mla	r1, ip, r1, r2
 800adf6:	4604      	mov	r4, r0
 800adf8:	2301      	movs	r3, #1
 800adfa:	e7f0      	b.n	800adde <_svfiprintf_r+0x192>
 800adfc:	ab03      	add	r3, sp, #12
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	462a      	mov	r2, r5
 800ae02:	4b0e      	ldr	r3, [pc, #56]	@ (800ae3c <_svfiprintf_r+0x1f0>)
 800ae04:	a904      	add	r1, sp, #16
 800ae06:	4638      	mov	r0, r7
 800ae08:	f7fd fe5e 	bl	8008ac8 <_printf_float>
 800ae0c:	1c42      	adds	r2, r0, #1
 800ae0e:	4606      	mov	r6, r0
 800ae10:	d1d6      	bne.n	800adc0 <_svfiprintf_r+0x174>
 800ae12:	89ab      	ldrh	r3, [r5, #12]
 800ae14:	065b      	lsls	r3, r3, #25
 800ae16:	f53f af2d 	bmi.w	800ac74 <_svfiprintf_r+0x28>
 800ae1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae1c:	e72c      	b.n	800ac78 <_svfiprintf_r+0x2c>
 800ae1e:	ab03      	add	r3, sp, #12
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	462a      	mov	r2, r5
 800ae24:	4b05      	ldr	r3, [pc, #20]	@ (800ae3c <_svfiprintf_r+0x1f0>)
 800ae26:	a904      	add	r1, sp, #16
 800ae28:	4638      	mov	r0, r7
 800ae2a:	f7fe f8e5 	bl	8008ff8 <_printf_i>
 800ae2e:	e7ed      	b.n	800ae0c <_svfiprintf_r+0x1c0>
 800ae30:	0800bc0e 	.word	0x0800bc0e
 800ae34:	0800bc18 	.word	0x0800bc18
 800ae38:	08008ac9 	.word	0x08008ac9
 800ae3c:	0800ab95 	.word	0x0800ab95
 800ae40:	0800bc14 	.word	0x0800bc14

0800ae44 <__sflush_r>:
 800ae44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4c:	0716      	lsls	r6, r2, #28
 800ae4e:	4605      	mov	r5, r0
 800ae50:	460c      	mov	r4, r1
 800ae52:	d454      	bmi.n	800aefe <__sflush_r+0xba>
 800ae54:	684b      	ldr	r3, [r1, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	dc02      	bgt.n	800ae60 <__sflush_r+0x1c>
 800ae5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	dd48      	ble.n	800aef2 <__sflush_r+0xae>
 800ae60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae62:	2e00      	cmp	r6, #0
 800ae64:	d045      	beq.n	800aef2 <__sflush_r+0xae>
 800ae66:	2300      	movs	r3, #0
 800ae68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae6c:	682f      	ldr	r7, [r5, #0]
 800ae6e:	6a21      	ldr	r1, [r4, #32]
 800ae70:	602b      	str	r3, [r5, #0]
 800ae72:	d030      	beq.n	800aed6 <__sflush_r+0x92>
 800ae74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae76:	89a3      	ldrh	r3, [r4, #12]
 800ae78:	0759      	lsls	r1, r3, #29
 800ae7a:	d505      	bpl.n	800ae88 <__sflush_r+0x44>
 800ae7c:	6863      	ldr	r3, [r4, #4]
 800ae7e:	1ad2      	subs	r2, r2, r3
 800ae80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae82:	b10b      	cbz	r3, 800ae88 <__sflush_r+0x44>
 800ae84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae86:	1ad2      	subs	r2, r2, r3
 800ae88:	2300      	movs	r3, #0
 800ae8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae8c:	6a21      	ldr	r1, [r4, #32]
 800ae8e:	4628      	mov	r0, r5
 800ae90:	47b0      	blx	r6
 800ae92:	1c43      	adds	r3, r0, #1
 800ae94:	89a3      	ldrh	r3, [r4, #12]
 800ae96:	d106      	bne.n	800aea6 <__sflush_r+0x62>
 800ae98:	6829      	ldr	r1, [r5, #0]
 800ae9a:	291d      	cmp	r1, #29
 800ae9c:	d82b      	bhi.n	800aef6 <__sflush_r+0xb2>
 800ae9e:	4a2a      	ldr	r2, [pc, #168]	@ (800af48 <__sflush_r+0x104>)
 800aea0:	40ca      	lsrs	r2, r1
 800aea2:	07d6      	lsls	r6, r2, #31
 800aea4:	d527      	bpl.n	800aef6 <__sflush_r+0xb2>
 800aea6:	2200      	movs	r2, #0
 800aea8:	6062      	str	r2, [r4, #4]
 800aeaa:	04d9      	lsls	r1, r3, #19
 800aeac:	6922      	ldr	r2, [r4, #16]
 800aeae:	6022      	str	r2, [r4, #0]
 800aeb0:	d504      	bpl.n	800aebc <__sflush_r+0x78>
 800aeb2:	1c42      	adds	r2, r0, #1
 800aeb4:	d101      	bne.n	800aeba <__sflush_r+0x76>
 800aeb6:	682b      	ldr	r3, [r5, #0]
 800aeb8:	b903      	cbnz	r3, 800aebc <__sflush_r+0x78>
 800aeba:	6560      	str	r0, [r4, #84]	@ 0x54
 800aebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aebe:	602f      	str	r7, [r5, #0]
 800aec0:	b1b9      	cbz	r1, 800aef2 <__sflush_r+0xae>
 800aec2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aec6:	4299      	cmp	r1, r3
 800aec8:	d002      	beq.n	800aed0 <__sflush_r+0x8c>
 800aeca:	4628      	mov	r0, r5
 800aecc:	f7ff f9e8 	bl	800a2a0 <_free_r>
 800aed0:	2300      	movs	r3, #0
 800aed2:	6363      	str	r3, [r4, #52]	@ 0x34
 800aed4:	e00d      	b.n	800aef2 <__sflush_r+0xae>
 800aed6:	2301      	movs	r3, #1
 800aed8:	4628      	mov	r0, r5
 800aeda:	47b0      	blx	r6
 800aedc:	4602      	mov	r2, r0
 800aede:	1c50      	adds	r0, r2, #1
 800aee0:	d1c9      	bne.n	800ae76 <__sflush_r+0x32>
 800aee2:	682b      	ldr	r3, [r5, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d0c6      	beq.n	800ae76 <__sflush_r+0x32>
 800aee8:	2b1d      	cmp	r3, #29
 800aeea:	d001      	beq.n	800aef0 <__sflush_r+0xac>
 800aeec:	2b16      	cmp	r3, #22
 800aeee:	d11e      	bne.n	800af2e <__sflush_r+0xea>
 800aef0:	602f      	str	r7, [r5, #0]
 800aef2:	2000      	movs	r0, #0
 800aef4:	e022      	b.n	800af3c <__sflush_r+0xf8>
 800aef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aefa:	b21b      	sxth	r3, r3
 800aefc:	e01b      	b.n	800af36 <__sflush_r+0xf2>
 800aefe:	690f      	ldr	r7, [r1, #16]
 800af00:	2f00      	cmp	r7, #0
 800af02:	d0f6      	beq.n	800aef2 <__sflush_r+0xae>
 800af04:	0793      	lsls	r3, r2, #30
 800af06:	680e      	ldr	r6, [r1, #0]
 800af08:	bf08      	it	eq
 800af0a:	694b      	ldreq	r3, [r1, #20]
 800af0c:	600f      	str	r7, [r1, #0]
 800af0e:	bf18      	it	ne
 800af10:	2300      	movne	r3, #0
 800af12:	eba6 0807 	sub.w	r8, r6, r7
 800af16:	608b      	str	r3, [r1, #8]
 800af18:	f1b8 0f00 	cmp.w	r8, #0
 800af1c:	dde9      	ble.n	800aef2 <__sflush_r+0xae>
 800af1e:	6a21      	ldr	r1, [r4, #32]
 800af20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af22:	4643      	mov	r3, r8
 800af24:	463a      	mov	r2, r7
 800af26:	4628      	mov	r0, r5
 800af28:	47b0      	blx	r6
 800af2a:	2800      	cmp	r0, #0
 800af2c:	dc08      	bgt.n	800af40 <__sflush_r+0xfc>
 800af2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af36:	81a3      	strh	r3, [r4, #12]
 800af38:	f04f 30ff 	mov.w	r0, #4294967295
 800af3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af40:	4407      	add	r7, r0
 800af42:	eba8 0800 	sub.w	r8, r8, r0
 800af46:	e7e7      	b.n	800af18 <__sflush_r+0xd4>
 800af48:	20400001 	.word	0x20400001

0800af4c <_fflush_r>:
 800af4c:	b538      	push	{r3, r4, r5, lr}
 800af4e:	690b      	ldr	r3, [r1, #16]
 800af50:	4605      	mov	r5, r0
 800af52:	460c      	mov	r4, r1
 800af54:	b913      	cbnz	r3, 800af5c <_fflush_r+0x10>
 800af56:	2500      	movs	r5, #0
 800af58:	4628      	mov	r0, r5
 800af5a:	bd38      	pop	{r3, r4, r5, pc}
 800af5c:	b118      	cbz	r0, 800af66 <_fflush_r+0x1a>
 800af5e:	6a03      	ldr	r3, [r0, #32]
 800af60:	b90b      	cbnz	r3, 800af66 <_fflush_r+0x1a>
 800af62:	f7fe f9f3 	bl	800934c <__sinit>
 800af66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d0f3      	beq.n	800af56 <_fflush_r+0xa>
 800af6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af70:	07d0      	lsls	r0, r2, #31
 800af72:	d404      	bmi.n	800af7e <_fflush_r+0x32>
 800af74:	0599      	lsls	r1, r3, #22
 800af76:	d402      	bmi.n	800af7e <_fflush_r+0x32>
 800af78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af7a:	f7fe fb26 	bl	80095ca <__retarget_lock_acquire_recursive>
 800af7e:	4628      	mov	r0, r5
 800af80:	4621      	mov	r1, r4
 800af82:	f7ff ff5f 	bl	800ae44 <__sflush_r>
 800af86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af88:	07da      	lsls	r2, r3, #31
 800af8a:	4605      	mov	r5, r0
 800af8c:	d4e4      	bmi.n	800af58 <_fflush_r+0xc>
 800af8e:	89a3      	ldrh	r3, [r4, #12]
 800af90:	059b      	lsls	r3, r3, #22
 800af92:	d4e1      	bmi.n	800af58 <_fflush_r+0xc>
 800af94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af96:	f7fe fb19 	bl	80095cc <__retarget_lock_release_recursive>
 800af9a:	e7dd      	b.n	800af58 <_fflush_r+0xc>

0800af9c <memmove>:
 800af9c:	4288      	cmp	r0, r1
 800af9e:	b510      	push	{r4, lr}
 800afa0:	eb01 0402 	add.w	r4, r1, r2
 800afa4:	d902      	bls.n	800afac <memmove+0x10>
 800afa6:	4284      	cmp	r4, r0
 800afa8:	4623      	mov	r3, r4
 800afaa:	d807      	bhi.n	800afbc <memmove+0x20>
 800afac:	1e43      	subs	r3, r0, #1
 800afae:	42a1      	cmp	r1, r4
 800afb0:	d008      	beq.n	800afc4 <memmove+0x28>
 800afb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afba:	e7f8      	b.n	800afae <memmove+0x12>
 800afbc:	4402      	add	r2, r0
 800afbe:	4601      	mov	r1, r0
 800afc0:	428a      	cmp	r2, r1
 800afc2:	d100      	bne.n	800afc6 <memmove+0x2a>
 800afc4:	bd10      	pop	{r4, pc}
 800afc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800afce:	e7f7      	b.n	800afc0 <memmove+0x24>

0800afd0 <_sbrk_r>:
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	4d06      	ldr	r5, [pc, #24]	@ (800afec <_sbrk_r+0x1c>)
 800afd4:	2300      	movs	r3, #0
 800afd6:	4604      	mov	r4, r0
 800afd8:	4608      	mov	r0, r1
 800afda:	602b      	str	r3, [r5, #0]
 800afdc:	f7f8 fa04 	bl	80033e8 <_sbrk>
 800afe0:	1c43      	adds	r3, r0, #1
 800afe2:	d102      	bne.n	800afea <_sbrk_r+0x1a>
 800afe4:	682b      	ldr	r3, [r5, #0]
 800afe6:	b103      	cbz	r3, 800afea <_sbrk_r+0x1a>
 800afe8:	6023      	str	r3, [r4, #0]
 800afea:	bd38      	pop	{r3, r4, r5, pc}
 800afec:	20000d78 	.word	0x20000d78

0800aff0 <__assert_func>:
 800aff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aff2:	4614      	mov	r4, r2
 800aff4:	461a      	mov	r2, r3
 800aff6:	4b09      	ldr	r3, [pc, #36]	@ (800b01c <__assert_func+0x2c>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4605      	mov	r5, r0
 800affc:	68d8      	ldr	r0, [r3, #12]
 800affe:	b14c      	cbz	r4, 800b014 <__assert_func+0x24>
 800b000:	4b07      	ldr	r3, [pc, #28]	@ (800b020 <__assert_func+0x30>)
 800b002:	9100      	str	r1, [sp, #0]
 800b004:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b008:	4906      	ldr	r1, [pc, #24]	@ (800b024 <__assert_func+0x34>)
 800b00a:	462b      	mov	r3, r5
 800b00c:	f000 f870 	bl	800b0f0 <fiprintf>
 800b010:	f000 f880 	bl	800b114 <abort>
 800b014:	4b04      	ldr	r3, [pc, #16]	@ (800b028 <__assert_func+0x38>)
 800b016:	461c      	mov	r4, r3
 800b018:	e7f3      	b.n	800b002 <__assert_func+0x12>
 800b01a:	bf00      	nop
 800b01c:	20000018 	.word	0x20000018
 800b020:	0800bc29 	.word	0x0800bc29
 800b024:	0800bc36 	.word	0x0800bc36
 800b028:	0800bc64 	.word	0x0800bc64

0800b02c <_calloc_r>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	fba1 5402 	umull	r5, r4, r1, r2
 800b032:	b934      	cbnz	r4, 800b042 <_calloc_r+0x16>
 800b034:	4629      	mov	r1, r5
 800b036:	f7ff f9a7 	bl	800a388 <_malloc_r>
 800b03a:	4606      	mov	r6, r0
 800b03c:	b928      	cbnz	r0, 800b04a <_calloc_r+0x1e>
 800b03e:	4630      	mov	r0, r6
 800b040:	bd70      	pop	{r4, r5, r6, pc}
 800b042:	220c      	movs	r2, #12
 800b044:	6002      	str	r2, [r0, #0]
 800b046:	2600      	movs	r6, #0
 800b048:	e7f9      	b.n	800b03e <_calloc_r+0x12>
 800b04a:	462a      	mov	r2, r5
 800b04c:	4621      	mov	r1, r4
 800b04e:	f7fe fa2c 	bl	80094aa <memset>
 800b052:	e7f4      	b.n	800b03e <_calloc_r+0x12>

0800b054 <__ascii_mbtowc>:
 800b054:	b082      	sub	sp, #8
 800b056:	b901      	cbnz	r1, 800b05a <__ascii_mbtowc+0x6>
 800b058:	a901      	add	r1, sp, #4
 800b05a:	b142      	cbz	r2, 800b06e <__ascii_mbtowc+0x1a>
 800b05c:	b14b      	cbz	r3, 800b072 <__ascii_mbtowc+0x1e>
 800b05e:	7813      	ldrb	r3, [r2, #0]
 800b060:	600b      	str	r3, [r1, #0]
 800b062:	7812      	ldrb	r2, [r2, #0]
 800b064:	1e10      	subs	r0, r2, #0
 800b066:	bf18      	it	ne
 800b068:	2001      	movne	r0, #1
 800b06a:	b002      	add	sp, #8
 800b06c:	4770      	bx	lr
 800b06e:	4610      	mov	r0, r2
 800b070:	e7fb      	b.n	800b06a <__ascii_mbtowc+0x16>
 800b072:	f06f 0001 	mvn.w	r0, #1
 800b076:	e7f8      	b.n	800b06a <__ascii_mbtowc+0x16>

0800b078 <_realloc_r>:
 800b078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b07c:	4607      	mov	r7, r0
 800b07e:	4614      	mov	r4, r2
 800b080:	460d      	mov	r5, r1
 800b082:	b921      	cbnz	r1, 800b08e <_realloc_r+0x16>
 800b084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b088:	4611      	mov	r1, r2
 800b08a:	f7ff b97d 	b.w	800a388 <_malloc_r>
 800b08e:	b92a      	cbnz	r2, 800b09c <_realloc_r+0x24>
 800b090:	f7ff f906 	bl	800a2a0 <_free_r>
 800b094:	4625      	mov	r5, r4
 800b096:	4628      	mov	r0, r5
 800b098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b09c:	f000 f841 	bl	800b122 <_malloc_usable_size_r>
 800b0a0:	4284      	cmp	r4, r0
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	d802      	bhi.n	800b0ac <_realloc_r+0x34>
 800b0a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0aa:	d8f4      	bhi.n	800b096 <_realloc_r+0x1e>
 800b0ac:	4621      	mov	r1, r4
 800b0ae:	4638      	mov	r0, r7
 800b0b0:	f7ff f96a 	bl	800a388 <_malloc_r>
 800b0b4:	4680      	mov	r8, r0
 800b0b6:	b908      	cbnz	r0, 800b0bc <_realloc_r+0x44>
 800b0b8:	4645      	mov	r5, r8
 800b0ba:	e7ec      	b.n	800b096 <_realloc_r+0x1e>
 800b0bc:	42b4      	cmp	r4, r6
 800b0be:	4622      	mov	r2, r4
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	bf28      	it	cs
 800b0c4:	4632      	movcs	r2, r6
 800b0c6:	f7fe fa82 	bl	80095ce <memcpy>
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	f7ff f8e7 	bl	800a2a0 <_free_r>
 800b0d2:	e7f1      	b.n	800b0b8 <_realloc_r+0x40>

0800b0d4 <__ascii_wctomb>:
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	4608      	mov	r0, r1
 800b0d8:	b141      	cbz	r1, 800b0ec <__ascii_wctomb+0x18>
 800b0da:	2aff      	cmp	r2, #255	@ 0xff
 800b0dc:	d904      	bls.n	800b0e8 <__ascii_wctomb+0x14>
 800b0de:	228a      	movs	r2, #138	@ 0x8a
 800b0e0:	601a      	str	r2, [r3, #0]
 800b0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e6:	4770      	bx	lr
 800b0e8:	700a      	strb	r2, [r1, #0]
 800b0ea:	2001      	movs	r0, #1
 800b0ec:	4770      	bx	lr
	...

0800b0f0 <fiprintf>:
 800b0f0:	b40e      	push	{r1, r2, r3}
 800b0f2:	b503      	push	{r0, r1, lr}
 800b0f4:	4601      	mov	r1, r0
 800b0f6:	ab03      	add	r3, sp, #12
 800b0f8:	4805      	ldr	r0, [pc, #20]	@ (800b110 <fiprintf+0x20>)
 800b0fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0fe:	6800      	ldr	r0, [r0, #0]
 800b100:	9301      	str	r3, [sp, #4]
 800b102:	f000 f83f 	bl	800b184 <_vfiprintf_r>
 800b106:	b002      	add	sp, #8
 800b108:	f85d eb04 	ldr.w	lr, [sp], #4
 800b10c:	b003      	add	sp, #12
 800b10e:	4770      	bx	lr
 800b110:	20000018 	.word	0x20000018

0800b114 <abort>:
 800b114:	b508      	push	{r3, lr}
 800b116:	2006      	movs	r0, #6
 800b118:	f000 fa08 	bl	800b52c <raise>
 800b11c:	2001      	movs	r0, #1
 800b11e:	f7f8 f8eb 	bl	80032f8 <_exit>

0800b122 <_malloc_usable_size_r>:
 800b122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b126:	1f18      	subs	r0, r3, #4
 800b128:	2b00      	cmp	r3, #0
 800b12a:	bfbc      	itt	lt
 800b12c:	580b      	ldrlt	r3, [r1, r0]
 800b12e:	18c0      	addlt	r0, r0, r3
 800b130:	4770      	bx	lr

0800b132 <__sfputc_r>:
 800b132:	6893      	ldr	r3, [r2, #8]
 800b134:	3b01      	subs	r3, #1
 800b136:	2b00      	cmp	r3, #0
 800b138:	b410      	push	{r4}
 800b13a:	6093      	str	r3, [r2, #8]
 800b13c:	da08      	bge.n	800b150 <__sfputc_r+0x1e>
 800b13e:	6994      	ldr	r4, [r2, #24]
 800b140:	42a3      	cmp	r3, r4
 800b142:	db01      	blt.n	800b148 <__sfputc_r+0x16>
 800b144:	290a      	cmp	r1, #10
 800b146:	d103      	bne.n	800b150 <__sfputc_r+0x1e>
 800b148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b14c:	f000 b932 	b.w	800b3b4 <__swbuf_r>
 800b150:	6813      	ldr	r3, [r2, #0]
 800b152:	1c58      	adds	r0, r3, #1
 800b154:	6010      	str	r0, [r2, #0]
 800b156:	7019      	strb	r1, [r3, #0]
 800b158:	4608      	mov	r0, r1
 800b15a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <__sfputs_r>:
 800b160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b162:	4606      	mov	r6, r0
 800b164:	460f      	mov	r7, r1
 800b166:	4614      	mov	r4, r2
 800b168:	18d5      	adds	r5, r2, r3
 800b16a:	42ac      	cmp	r4, r5
 800b16c:	d101      	bne.n	800b172 <__sfputs_r+0x12>
 800b16e:	2000      	movs	r0, #0
 800b170:	e007      	b.n	800b182 <__sfputs_r+0x22>
 800b172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b176:	463a      	mov	r2, r7
 800b178:	4630      	mov	r0, r6
 800b17a:	f7ff ffda 	bl	800b132 <__sfputc_r>
 800b17e:	1c43      	adds	r3, r0, #1
 800b180:	d1f3      	bne.n	800b16a <__sfputs_r+0xa>
 800b182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b184 <_vfiprintf_r>:
 800b184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b188:	460d      	mov	r5, r1
 800b18a:	b09d      	sub	sp, #116	@ 0x74
 800b18c:	4614      	mov	r4, r2
 800b18e:	4698      	mov	r8, r3
 800b190:	4606      	mov	r6, r0
 800b192:	b118      	cbz	r0, 800b19c <_vfiprintf_r+0x18>
 800b194:	6a03      	ldr	r3, [r0, #32]
 800b196:	b90b      	cbnz	r3, 800b19c <_vfiprintf_r+0x18>
 800b198:	f7fe f8d8 	bl	800934c <__sinit>
 800b19c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b19e:	07d9      	lsls	r1, r3, #31
 800b1a0:	d405      	bmi.n	800b1ae <_vfiprintf_r+0x2a>
 800b1a2:	89ab      	ldrh	r3, [r5, #12]
 800b1a4:	059a      	lsls	r2, r3, #22
 800b1a6:	d402      	bmi.n	800b1ae <_vfiprintf_r+0x2a>
 800b1a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1aa:	f7fe fa0e 	bl	80095ca <__retarget_lock_acquire_recursive>
 800b1ae:	89ab      	ldrh	r3, [r5, #12]
 800b1b0:	071b      	lsls	r3, r3, #28
 800b1b2:	d501      	bpl.n	800b1b8 <_vfiprintf_r+0x34>
 800b1b4:	692b      	ldr	r3, [r5, #16]
 800b1b6:	b99b      	cbnz	r3, 800b1e0 <_vfiprintf_r+0x5c>
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f000 f938 	bl	800b430 <__swsetup_r>
 800b1c0:	b170      	cbz	r0, 800b1e0 <_vfiprintf_r+0x5c>
 800b1c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1c4:	07dc      	lsls	r4, r3, #31
 800b1c6:	d504      	bpl.n	800b1d2 <_vfiprintf_r+0x4e>
 800b1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1cc:	b01d      	add	sp, #116	@ 0x74
 800b1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d2:	89ab      	ldrh	r3, [r5, #12]
 800b1d4:	0598      	lsls	r0, r3, #22
 800b1d6:	d4f7      	bmi.n	800b1c8 <_vfiprintf_r+0x44>
 800b1d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1da:	f7fe f9f7 	bl	80095cc <__retarget_lock_release_recursive>
 800b1de:	e7f3      	b.n	800b1c8 <_vfiprintf_r+0x44>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1e4:	2320      	movs	r3, #32
 800b1e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ee:	2330      	movs	r3, #48	@ 0x30
 800b1f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b3a0 <_vfiprintf_r+0x21c>
 800b1f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1f8:	f04f 0901 	mov.w	r9, #1
 800b1fc:	4623      	mov	r3, r4
 800b1fe:	469a      	mov	sl, r3
 800b200:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b204:	b10a      	cbz	r2, 800b20a <_vfiprintf_r+0x86>
 800b206:	2a25      	cmp	r2, #37	@ 0x25
 800b208:	d1f9      	bne.n	800b1fe <_vfiprintf_r+0x7a>
 800b20a:	ebba 0b04 	subs.w	fp, sl, r4
 800b20e:	d00b      	beq.n	800b228 <_vfiprintf_r+0xa4>
 800b210:	465b      	mov	r3, fp
 800b212:	4622      	mov	r2, r4
 800b214:	4629      	mov	r1, r5
 800b216:	4630      	mov	r0, r6
 800b218:	f7ff ffa2 	bl	800b160 <__sfputs_r>
 800b21c:	3001      	adds	r0, #1
 800b21e:	f000 80a7 	beq.w	800b370 <_vfiprintf_r+0x1ec>
 800b222:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b224:	445a      	add	r2, fp
 800b226:	9209      	str	r2, [sp, #36]	@ 0x24
 800b228:	f89a 3000 	ldrb.w	r3, [sl]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f000 809f 	beq.w	800b370 <_vfiprintf_r+0x1ec>
 800b232:	2300      	movs	r3, #0
 800b234:	f04f 32ff 	mov.w	r2, #4294967295
 800b238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b23c:	f10a 0a01 	add.w	sl, sl, #1
 800b240:	9304      	str	r3, [sp, #16]
 800b242:	9307      	str	r3, [sp, #28]
 800b244:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b248:	931a      	str	r3, [sp, #104]	@ 0x68
 800b24a:	4654      	mov	r4, sl
 800b24c:	2205      	movs	r2, #5
 800b24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b252:	4853      	ldr	r0, [pc, #332]	@ (800b3a0 <_vfiprintf_r+0x21c>)
 800b254:	f7f4 ffec 	bl	8000230 <memchr>
 800b258:	9a04      	ldr	r2, [sp, #16]
 800b25a:	b9d8      	cbnz	r0, 800b294 <_vfiprintf_r+0x110>
 800b25c:	06d1      	lsls	r1, r2, #27
 800b25e:	bf44      	itt	mi
 800b260:	2320      	movmi	r3, #32
 800b262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b266:	0713      	lsls	r3, r2, #28
 800b268:	bf44      	itt	mi
 800b26a:	232b      	movmi	r3, #43	@ 0x2b
 800b26c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b270:	f89a 3000 	ldrb.w	r3, [sl]
 800b274:	2b2a      	cmp	r3, #42	@ 0x2a
 800b276:	d015      	beq.n	800b2a4 <_vfiprintf_r+0x120>
 800b278:	9a07      	ldr	r2, [sp, #28]
 800b27a:	4654      	mov	r4, sl
 800b27c:	2000      	movs	r0, #0
 800b27e:	f04f 0c0a 	mov.w	ip, #10
 800b282:	4621      	mov	r1, r4
 800b284:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b288:	3b30      	subs	r3, #48	@ 0x30
 800b28a:	2b09      	cmp	r3, #9
 800b28c:	d94b      	bls.n	800b326 <_vfiprintf_r+0x1a2>
 800b28e:	b1b0      	cbz	r0, 800b2be <_vfiprintf_r+0x13a>
 800b290:	9207      	str	r2, [sp, #28]
 800b292:	e014      	b.n	800b2be <_vfiprintf_r+0x13a>
 800b294:	eba0 0308 	sub.w	r3, r0, r8
 800b298:	fa09 f303 	lsl.w	r3, r9, r3
 800b29c:	4313      	orrs	r3, r2
 800b29e:	9304      	str	r3, [sp, #16]
 800b2a0:	46a2      	mov	sl, r4
 800b2a2:	e7d2      	b.n	800b24a <_vfiprintf_r+0xc6>
 800b2a4:	9b03      	ldr	r3, [sp, #12]
 800b2a6:	1d19      	adds	r1, r3, #4
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	9103      	str	r1, [sp, #12]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	bfbb      	ittet	lt
 800b2b0:	425b      	neglt	r3, r3
 800b2b2:	f042 0202 	orrlt.w	r2, r2, #2
 800b2b6:	9307      	strge	r3, [sp, #28]
 800b2b8:	9307      	strlt	r3, [sp, #28]
 800b2ba:	bfb8      	it	lt
 800b2bc:	9204      	strlt	r2, [sp, #16]
 800b2be:	7823      	ldrb	r3, [r4, #0]
 800b2c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2c2:	d10a      	bne.n	800b2da <_vfiprintf_r+0x156>
 800b2c4:	7863      	ldrb	r3, [r4, #1]
 800b2c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2c8:	d132      	bne.n	800b330 <_vfiprintf_r+0x1ac>
 800b2ca:	9b03      	ldr	r3, [sp, #12]
 800b2cc:	1d1a      	adds	r2, r3, #4
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	9203      	str	r2, [sp, #12]
 800b2d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2d6:	3402      	adds	r4, #2
 800b2d8:	9305      	str	r3, [sp, #20]
 800b2da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b3b0 <_vfiprintf_r+0x22c>
 800b2de:	7821      	ldrb	r1, [r4, #0]
 800b2e0:	2203      	movs	r2, #3
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	f7f4 ffa4 	bl	8000230 <memchr>
 800b2e8:	b138      	cbz	r0, 800b2fa <_vfiprintf_r+0x176>
 800b2ea:	9b04      	ldr	r3, [sp, #16]
 800b2ec:	eba0 000a 	sub.w	r0, r0, sl
 800b2f0:	2240      	movs	r2, #64	@ 0x40
 800b2f2:	4082      	lsls	r2, r0
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	3401      	adds	r4, #1
 800b2f8:	9304      	str	r3, [sp, #16]
 800b2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2fe:	4829      	ldr	r0, [pc, #164]	@ (800b3a4 <_vfiprintf_r+0x220>)
 800b300:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b304:	2206      	movs	r2, #6
 800b306:	f7f4 ff93 	bl	8000230 <memchr>
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d03f      	beq.n	800b38e <_vfiprintf_r+0x20a>
 800b30e:	4b26      	ldr	r3, [pc, #152]	@ (800b3a8 <_vfiprintf_r+0x224>)
 800b310:	bb1b      	cbnz	r3, 800b35a <_vfiprintf_r+0x1d6>
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	3307      	adds	r3, #7
 800b316:	f023 0307 	bic.w	r3, r3, #7
 800b31a:	3308      	adds	r3, #8
 800b31c:	9303      	str	r3, [sp, #12]
 800b31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b320:	443b      	add	r3, r7
 800b322:	9309      	str	r3, [sp, #36]	@ 0x24
 800b324:	e76a      	b.n	800b1fc <_vfiprintf_r+0x78>
 800b326:	fb0c 3202 	mla	r2, ip, r2, r3
 800b32a:	460c      	mov	r4, r1
 800b32c:	2001      	movs	r0, #1
 800b32e:	e7a8      	b.n	800b282 <_vfiprintf_r+0xfe>
 800b330:	2300      	movs	r3, #0
 800b332:	3401      	adds	r4, #1
 800b334:	9305      	str	r3, [sp, #20]
 800b336:	4619      	mov	r1, r3
 800b338:	f04f 0c0a 	mov.w	ip, #10
 800b33c:	4620      	mov	r0, r4
 800b33e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b342:	3a30      	subs	r2, #48	@ 0x30
 800b344:	2a09      	cmp	r2, #9
 800b346:	d903      	bls.n	800b350 <_vfiprintf_r+0x1cc>
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d0c6      	beq.n	800b2da <_vfiprintf_r+0x156>
 800b34c:	9105      	str	r1, [sp, #20]
 800b34e:	e7c4      	b.n	800b2da <_vfiprintf_r+0x156>
 800b350:	fb0c 2101 	mla	r1, ip, r1, r2
 800b354:	4604      	mov	r4, r0
 800b356:	2301      	movs	r3, #1
 800b358:	e7f0      	b.n	800b33c <_vfiprintf_r+0x1b8>
 800b35a:	ab03      	add	r3, sp, #12
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	462a      	mov	r2, r5
 800b360:	4b12      	ldr	r3, [pc, #72]	@ (800b3ac <_vfiprintf_r+0x228>)
 800b362:	a904      	add	r1, sp, #16
 800b364:	4630      	mov	r0, r6
 800b366:	f7fd fbaf 	bl	8008ac8 <_printf_float>
 800b36a:	4607      	mov	r7, r0
 800b36c:	1c78      	adds	r0, r7, #1
 800b36e:	d1d6      	bne.n	800b31e <_vfiprintf_r+0x19a>
 800b370:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b372:	07d9      	lsls	r1, r3, #31
 800b374:	d405      	bmi.n	800b382 <_vfiprintf_r+0x1fe>
 800b376:	89ab      	ldrh	r3, [r5, #12]
 800b378:	059a      	lsls	r2, r3, #22
 800b37a:	d402      	bmi.n	800b382 <_vfiprintf_r+0x1fe>
 800b37c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b37e:	f7fe f925 	bl	80095cc <__retarget_lock_release_recursive>
 800b382:	89ab      	ldrh	r3, [r5, #12]
 800b384:	065b      	lsls	r3, r3, #25
 800b386:	f53f af1f 	bmi.w	800b1c8 <_vfiprintf_r+0x44>
 800b38a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b38c:	e71e      	b.n	800b1cc <_vfiprintf_r+0x48>
 800b38e:	ab03      	add	r3, sp, #12
 800b390:	9300      	str	r3, [sp, #0]
 800b392:	462a      	mov	r2, r5
 800b394:	4b05      	ldr	r3, [pc, #20]	@ (800b3ac <_vfiprintf_r+0x228>)
 800b396:	a904      	add	r1, sp, #16
 800b398:	4630      	mov	r0, r6
 800b39a:	f7fd fe2d 	bl	8008ff8 <_printf_i>
 800b39e:	e7e4      	b.n	800b36a <_vfiprintf_r+0x1e6>
 800b3a0:	0800bc0e 	.word	0x0800bc0e
 800b3a4:	0800bc18 	.word	0x0800bc18
 800b3a8:	08008ac9 	.word	0x08008ac9
 800b3ac:	0800b161 	.word	0x0800b161
 800b3b0:	0800bc14 	.word	0x0800bc14

0800b3b4 <__swbuf_r>:
 800b3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b6:	460e      	mov	r6, r1
 800b3b8:	4614      	mov	r4, r2
 800b3ba:	4605      	mov	r5, r0
 800b3bc:	b118      	cbz	r0, 800b3c6 <__swbuf_r+0x12>
 800b3be:	6a03      	ldr	r3, [r0, #32]
 800b3c0:	b90b      	cbnz	r3, 800b3c6 <__swbuf_r+0x12>
 800b3c2:	f7fd ffc3 	bl	800934c <__sinit>
 800b3c6:	69a3      	ldr	r3, [r4, #24]
 800b3c8:	60a3      	str	r3, [r4, #8]
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	071a      	lsls	r2, r3, #28
 800b3ce:	d501      	bpl.n	800b3d4 <__swbuf_r+0x20>
 800b3d0:	6923      	ldr	r3, [r4, #16]
 800b3d2:	b943      	cbnz	r3, 800b3e6 <__swbuf_r+0x32>
 800b3d4:	4621      	mov	r1, r4
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f000 f82a 	bl	800b430 <__swsetup_r>
 800b3dc:	b118      	cbz	r0, 800b3e6 <__swbuf_r+0x32>
 800b3de:	f04f 37ff 	mov.w	r7, #4294967295
 800b3e2:	4638      	mov	r0, r7
 800b3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3e6:	6823      	ldr	r3, [r4, #0]
 800b3e8:	6922      	ldr	r2, [r4, #16]
 800b3ea:	1a98      	subs	r0, r3, r2
 800b3ec:	6963      	ldr	r3, [r4, #20]
 800b3ee:	b2f6      	uxtb	r6, r6
 800b3f0:	4283      	cmp	r3, r0
 800b3f2:	4637      	mov	r7, r6
 800b3f4:	dc05      	bgt.n	800b402 <__swbuf_r+0x4e>
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	f7ff fda7 	bl	800af4c <_fflush_r>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d1ed      	bne.n	800b3de <__swbuf_r+0x2a>
 800b402:	68a3      	ldr	r3, [r4, #8]
 800b404:	3b01      	subs	r3, #1
 800b406:	60a3      	str	r3, [r4, #8]
 800b408:	6823      	ldr	r3, [r4, #0]
 800b40a:	1c5a      	adds	r2, r3, #1
 800b40c:	6022      	str	r2, [r4, #0]
 800b40e:	701e      	strb	r6, [r3, #0]
 800b410:	6962      	ldr	r2, [r4, #20]
 800b412:	1c43      	adds	r3, r0, #1
 800b414:	429a      	cmp	r2, r3
 800b416:	d004      	beq.n	800b422 <__swbuf_r+0x6e>
 800b418:	89a3      	ldrh	r3, [r4, #12]
 800b41a:	07db      	lsls	r3, r3, #31
 800b41c:	d5e1      	bpl.n	800b3e2 <__swbuf_r+0x2e>
 800b41e:	2e0a      	cmp	r6, #10
 800b420:	d1df      	bne.n	800b3e2 <__swbuf_r+0x2e>
 800b422:	4621      	mov	r1, r4
 800b424:	4628      	mov	r0, r5
 800b426:	f7ff fd91 	bl	800af4c <_fflush_r>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d0d9      	beq.n	800b3e2 <__swbuf_r+0x2e>
 800b42e:	e7d6      	b.n	800b3de <__swbuf_r+0x2a>

0800b430 <__swsetup_r>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	4b29      	ldr	r3, [pc, #164]	@ (800b4d8 <__swsetup_r+0xa8>)
 800b434:	4605      	mov	r5, r0
 800b436:	6818      	ldr	r0, [r3, #0]
 800b438:	460c      	mov	r4, r1
 800b43a:	b118      	cbz	r0, 800b444 <__swsetup_r+0x14>
 800b43c:	6a03      	ldr	r3, [r0, #32]
 800b43e:	b90b      	cbnz	r3, 800b444 <__swsetup_r+0x14>
 800b440:	f7fd ff84 	bl	800934c <__sinit>
 800b444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b448:	0719      	lsls	r1, r3, #28
 800b44a:	d422      	bmi.n	800b492 <__swsetup_r+0x62>
 800b44c:	06da      	lsls	r2, r3, #27
 800b44e:	d407      	bmi.n	800b460 <__swsetup_r+0x30>
 800b450:	2209      	movs	r2, #9
 800b452:	602a      	str	r2, [r5, #0]
 800b454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b458:	81a3      	strh	r3, [r4, #12]
 800b45a:	f04f 30ff 	mov.w	r0, #4294967295
 800b45e:	e033      	b.n	800b4c8 <__swsetup_r+0x98>
 800b460:	0758      	lsls	r0, r3, #29
 800b462:	d512      	bpl.n	800b48a <__swsetup_r+0x5a>
 800b464:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b466:	b141      	cbz	r1, 800b47a <__swsetup_r+0x4a>
 800b468:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b46c:	4299      	cmp	r1, r3
 800b46e:	d002      	beq.n	800b476 <__swsetup_r+0x46>
 800b470:	4628      	mov	r0, r5
 800b472:	f7fe ff15 	bl	800a2a0 <_free_r>
 800b476:	2300      	movs	r3, #0
 800b478:	6363      	str	r3, [r4, #52]	@ 0x34
 800b47a:	89a3      	ldrh	r3, [r4, #12]
 800b47c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b480:	81a3      	strh	r3, [r4, #12]
 800b482:	2300      	movs	r3, #0
 800b484:	6063      	str	r3, [r4, #4]
 800b486:	6923      	ldr	r3, [r4, #16]
 800b488:	6023      	str	r3, [r4, #0]
 800b48a:	89a3      	ldrh	r3, [r4, #12]
 800b48c:	f043 0308 	orr.w	r3, r3, #8
 800b490:	81a3      	strh	r3, [r4, #12]
 800b492:	6923      	ldr	r3, [r4, #16]
 800b494:	b94b      	cbnz	r3, 800b4aa <__swsetup_r+0x7a>
 800b496:	89a3      	ldrh	r3, [r4, #12]
 800b498:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b49c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4a0:	d003      	beq.n	800b4aa <__swsetup_r+0x7a>
 800b4a2:	4621      	mov	r1, r4
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	f000 f883 	bl	800b5b0 <__smakebuf_r>
 800b4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4ae:	f013 0201 	ands.w	r2, r3, #1
 800b4b2:	d00a      	beq.n	800b4ca <__swsetup_r+0x9a>
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	60a2      	str	r2, [r4, #8]
 800b4b8:	6962      	ldr	r2, [r4, #20]
 800b4ba:	4252      	negs	r2, r2
 800b4bc:	61a2      	str	r2, [r4, #24]
 800b4be:	6922      	ldr	r2, [r4, #16]
 800b4c0:	b942      	cbnz	r2, 800b4d4 <__swsetup_r+0xa4>
 800b4c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b4c6:	d1c5      	bne.n	800b454 <__swsetup_r+0x24>
 800b4c8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ca:	0799      	lsls	r1, r3, #30
 800b4cc:	bf58      	it	pl
 800b4ce:	6962      	ldrpl	r2, [r4, #20]
 800b4d0:	60a2      	str	r2, [r4, #8]
 800b4d2:	e7f4      	b.n	800b4be <__swsetup_r+0x8e>
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	e7f7      	b.n	800b4c8 <__swsetup_r+0x98>
 800b4d8:	20000018 	.word	0x20000018

0800b4dc <_raise_r>:
 800b4dc:	291f      	cmp	r1, #31
 800b4de:	b538      	push	{r3, r4, r5, lr}
 800b4e0:	4605      	mov	r5, r0
 800b4e2:	460c      	mov	r4, r1
 800b4e4:	d904      	bls.n	800b4f0 <_raise_r+0x14>
 800b4e6:	2316      	movs	r3, #22
 800b4e8:	6003      	str	r3, [r0, #0]
 800b4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ee:	bd38      	pop	{r3, r4, r5, pc}
 800b4f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b4f2:	b112      	cbz	r2, 800b4fa <_raise_r+0x1e>
 800b4f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4f8:	b94b      	cbnz	r3, 800b50e <_raise_r+0x32>
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f000 f830 	bl	800b560 <_getpid_r>
 800b500:	4622      	mov	r2, r4
 800b502:	4601      	mov	r1, r0
 800b504:	4628      	mov	r0, r5
 800b506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b50a:	f000 b817 	b.w	800b53c <_kill_r>
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d00a      	beq.n	800b528 <_raise_r+0x4c>
 800b512:	1c59      	adds	r1, r3, #1
 800b514:	d103      	bne.n	800b51e <_raise_r+0x42>
 800b516:	2316      	movs	r3, #22
 800b518:	6003      	str	r3, [r0, #0]
 800b51a:	2001      	movs	r0, #1
 800b51c:	e7e7      	b.n	800b4ee <_raise_r+0x12>
 800b51e:	2100      	movs	r1, #0
 800b520:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b524:	4620      	mov	r0, r4
 800b526:	4798      	blx	r3
 800b528:	2000      	movs	r0, #0
 800b52a:	e7e0      	b.n	800b4ee <_raise_r+0x12>

0800b52c <raise>:
 800b52c:	4b02      	ldr	r3, [pc, #8]	@ (800b538 <raise+0xc>)
 800b52e:	4601      	mov	r1, r0
 800b530:	6818      	ldr	r0, [r3, #0]
 800b532:	f7ff bfd3 	b.w	800b4dc <_raise_r>
 800b536:	bf00      	nop
 800b538:	20000018 	.word	0x20000018

0800b53c <_kill_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4d07      	ldr	r5, [pc, #28]	@ (800b55c <_kill_r+0x20>)
 800b540:	2300      	movs	r3, #0
 800b542:	4604      	mov	r4, r0
 800b544:	4608      	mov	r0, r1
 800b546:	4611      	mov	r1, r2
 800b548:	602b      	str	r3, [r5, #0]
 800b54a:	f7f7 fec5 	bl	80032d8 <_kill>
 800b54e:	1c43      	adds	r3, r0, #1
 800b550:	d102      	bne.n	800b558 <_kill_r+0x1c>
 800b552:	682b      	ldr	r3, [r5, #0]
 800b554:	b103      	cbz	r3, 800b558 <_kill_r+0x1c>
 800b556:	6023      	str	r3, [r4, #0]
 800b558:	bd38      	pop	{r3, r4, r5, pc}
 800b55a:	bf00      	nop
 800b55c:	20000d78 	.word	0x20000d78

0800b560 <_getpid_r>:
 800b560:	f7f7 beb2 	b.w	80032c8 <_getpid>

0800b564 <__swhatbuf_r>:
 800b564:	b570      	push	{r4, r5, r6, lr}
 800b566:	460c      	mov	r4, r1
 800b568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b56c:	2900      	cmp	r1, #0
 800b56e:	b096      	sub	sp, #88	@ 0x58
 800b570:	4615      	mov	r5, r2
 800b572:	461e      	mov	r6, r3
 800b574:	da0d      	bge.n	800b592 <__swhatbuf_r+0x2e>
 800b576:	89a3      	ldrh	r3, [r4, #12]
 800b578:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b57c:	f04f 0100 	mov.w	r1, #0
 800b580:	bf14      	ite	ne
 800b582:	2340      	movne	r3, #64	@ 0x40
 800b584:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b588:	2000      	movs	r0, #0
 800b58a:	6031      	str	r1, [r6, #0]
 800b58c:	602b      	str	r3, [r5, #0]
 800b58e:	b016      	add	sp, #88	@ 0x58
 800b590:	bd70      	pop	{r4, r5, r6, pc}
 800b592:	466a      	mov	r2, sp
 800b594:	f000 f848 	bl	800b628 <_fstat_r>
 800b598:	2800      	cmp	r0, #0
 800b59a:	dbec      	blt.n	800b576 <__swhatbuf_r+0x12>
 800b59c:	9901      	ldr	r1, [sp, #4]
 800b59e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b5a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b5a6:	4259      	negs	r1, r3
 800b5a8:	4159      	adcs	r1, r3
 800b5aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5ae:	e7eb      	b.n	800b588 <__swhatbuf_r+0x24>

0800b5b0 <__smakebuf_r>:
 800b5b0:	898b      	ldrh	r3, [r1, #12]
 800b5b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5b4:	079d      	lsls	r5, r3, #30
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	460c      	mov	r4, r1
 800b5ba:	d507      	bpl.n	800b5cc <__smakebuf_r+0x1c>
 800b5bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	6123      	str	r3, [r4, #16]
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	6163      	str	r3, [r4, #20]
 800b5c8:	b003      	add	sp, #12
 800b5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5cc:	ab01      	add	r3, sp, #4
 800b5ce:	466a      	mov	r2, sp
 800b5d0:	f7ff ffc8 	bl	800b564 <__swhatbuf_r>
 800b5d4:	9f00      	ldr	r7, [sp, #0]
 800b5d6:	4605      	mov	r5, r0
 800b5d8:	4639      	mov	r1, r7
 800b5da:	4630      	mov	r0, r6
 800b5dc:	f7fe fed4 	bl	800a388 <_malloc_r>
 800b5e0:	b948      	cbnz	r0, 800b5f6 <__smakebuf_r+0x46>
 800b5e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5e6:	059a      	lsls	r2, r3, #22
 800b5e8:	d4ee      	bmi.n	800b5c8 <__smakebuf_r+0x18>
 800b5ea:	f023 0303 	bic.w	r3, r3, #3
 800b5ee:	f043 0302 	orr.w	r3, r3, #2
 800b5f2:	81a3      	strh	r3, [r4, #12]
 800b5f4:	e7e2      	b.n	800b5bc <__smakebuf_r+0xc>
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	6020      	str	r0, [r4, #0]
 800b5fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5fe:	81a3      	strh	r3, [r4, #12]
 800b600:	9b01      	ldr	r3, [sp, #4]
 800b602:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b606:	b15b      	cbz	r3, 800b620 <__smakebuf_r+0x70>
 800b608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b60c:	4630      	mov	r0, r6
 800b60e:	f000 f81d 	bl	800b64c <_isatty_r>
 800b612:	b128      	cbz	r0, 800b620 <__smakebuf_r+0x70>
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	f023 0303 	bic.w	r3, r3, #3
 800b61a:	f043 0301 	orr.w	r3, r3, #1
 800b61e:	81a3      	strh	r3, [r4, #12]
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	431d      	orrs	r5, r3
 800b624:	81a5      	strh	r5, [r4, #12]
 800b626:	e7cf      	b.n	800b5c8 <__smakebuf_r+0x18>

0800b628 <_fstat_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	4d07      	ldr	r5, [pc, #28]	@ (800b648 <_fstat_r+0x20>)
 800b62c:	2300      	movs	r3, #0
 800b62e:	4604      	mov	r4, r0
 800b630:	4608      	mov	r0, r1
 800b632:	4611      	mov	r1, r2
 800b634:	602b      	str	r3, [r5, #0]
 800b636:	f7f7 feaf 	bl	8003398 <_fstat>
 800b63a:	1c43      	adds	r3, r0, #1
 800b63c:	d102      	bne.n	800b644 <_fstat_r+0x1c>
 800b63e:	682b      	ldr	r3, [r5, #0]
 800b640:	b103      	cbz	r3, 800b644 <_fstat_r+0x1c>
 800b642:	6023      	str	r3, [r4, #0]
 800b644:	bd38      	pop	{r3, r4, r5, pc}
 800b646:	bf00      	nop
 800b648:	20000d78 	.word	0x20000d78

0800b64c <_isatty_r>:
 800b64c:	b538      	push	{r3, r4, r5, lr}
 800b64e:	4d06      	ldr	r5, [pc, #24]	@ (800b668 <_isatty_r+0x1c>)
 800b650:	2300      	movs	r3, #0
 800b652:	4604      	mov	r4, r0
 800b654:	4608      	mov	r0, r1
 800b656:	602b      	str	r3, [r5, #0]
 800b658:	f7f7 feae 	bl	80033b8 <_isatty>
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	d102      	bne.n	800b666 <_isatty_r+0x1a>
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	b103      	cbz	r3, 800b666 <_isatty_r+0x1a>
 800b664:	6023      	str	r3, [r4, #0]
 800b666:	bd38      	pop	{r3, r4, r5, pc}
 800b668:	20000d78 	.word	0x20000d78

0800b66c <_init>:
 800b66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66e:	bf00      	nop
 800b670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b672:	bc08      	pop	{r3}
 800b674:	469e      	mov	lr, r3
 800b676:	4770      	bx	lr

0800b678 <_fini>:
 800b678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b67a:	bf00      	nop
 800b67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b67e:	bc08      	pop	{r3}
 800b680:	469e      	mov	lr, r3
 800b682:	4770      	bx	lr
